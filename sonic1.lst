00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 6100 0000                  		bsr.w	ReadJoypads
00000ED2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F1A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F20                            
00000F20                            	@nochg:
00000F20 4A78 F614                  		tst.w	(v_demolength).w
00000F24 6700 0000                  		beq.w	@end
00000F28 5378 F614                  		subq.w	#1,(v_demolength).w
00000F2C                            
00000F2C                            	@end:
00000F2C 4E75                       		rts	
00000F2E                            
00000F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2E                            
00000F2E                            
00000F2E                            sub_106E:
00000F2E 33FC 0100 00A1 1100        		stopZ80
00000F36 0839 0000 00A1 1100 66F6   		waitZ80
00000F40 6100 0000                  		bsr.w	ReadJoypads
00000F44 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F48 6600                       		bne.s	@waterabove	; if yes, branch
00000F4A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6E 6000                       		bra.s	@waterbelow
00000F70                            
00000F70                            	@waterabove:
00000F70 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F94                            
00000F94                            	@waterbelow:
00000F94 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB8 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FDC 33FC 0000 00A1 1100        		startZ80
00000FE4 4E75                       		rts	
00000FE6                            ; End of function sub_106E
00000FE6                            
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            ; Horizontal interrupt
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            
00000FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE6                            
00000FE6                            
00000FE6                            HBlank:
00000FE6 46FC 2700                  		disable_ints
00000FEA 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEE 6700                       		beq.s	@nochg		; if not, branch
00000FF0 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF6 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FFA 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00001000 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001004 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000100C 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 2298                       		move.l	(a0)+,(a1)
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00001052 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001056 4A38 F64F                  		tst.b	($FFFFF64F).w
0000105A 6600                       		bne.s	loc_119E
0000105C                            
0000105C                            	@nochg:
0000105C 4E73                       		rte	
0000105E                            ; ===========================================================================
0000105E                            
0000105E                            loc_119E:
0000105E 4238 F64F                  		clr.b	($FFFFF64F).w
00001062 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001066 6100 FC94                  		bsr.w	Demo_Time	
0000106A 4EB9 0000 0000             		jsr	(UpdateMusic).l
00001070 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001074 4E73                       		rte	
00001076                            ; End of function HBlank
00001076                            
00001076                            ; ---------------------------------------------------------------------------
00001076                            ; Subroutine to	initialise joypads
00001076                            ; ---------------------------------------------------------------------------
00001076                            
00001076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001076                            
00001076                            
00001076                            JoypadInit:
00001076 33FC 0100 00A1 1100        		stopZ80
0000107E 0839 0000 00A1 1100 66F6   		waitZ80
00001088 7040                       		moveq	#$40,d0
0000108A 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001090 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001096 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
0000109C 33FC 0000 00A1 1100        		startZ80
000010A4 4E75                       		rts	
000010A6                            ; End of function JoypadInit
000010A6                            
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; Subroutine to	read joypad input, and send it to the RAM
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A6                            
000010A6                            
000010A6                            ReadJoypads:
000010A6 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010AA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010B0 6100                       		bsr.s	@read		; do the first joypad
000010B2 5449                       		addq.w	#2,a1		; do the second	joypad
000010B4                            
000010B4                            	@read:
000010B4 12BC 0000                  		move.b	#0,(a1)
000010B8 4E71                       		nop	
000010BA 4E71                       		nop	
000010BC 1011                       		move.b	(a1),d0
000010BE E508                       		lsl.b	#2,d0
000010C0 0200 00C0                  		andi.b	#$C0,d0
000010C4 12BC 0040                  		move.b	#$40,(a1)
000010C8 4E71                       		nop	
000010CA 4E71                       		nop	
000010CC 1211                       		move.b	(a1),d1
000010CE 0201 003F                  		andi.b	#$3F,d1
000010D2 8001                       		or.b	d1,d0
000010D4 4600                       		not.b	d0
000010D6 1210                       		move.b	(a0),d1
000010D8 B101                       		eor.b	d0,d1
000010DA 10C0                       		move.b	d0,(a0)+
000010DC C200                       		and.b	d0,d1
000010DE 10C1                       		move.b	d1,(a0)+
000010E0 4E75                       		rts	
000010E2                            ; End of function ReadJoypads
000010E2                            
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            VDPSetupGame:
000010E2 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E8 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EE 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F4 7E12                       		moveq	#$12,d7
000010F6                            
000010F6                            	@setreg:
000010F6 309A                       		move.w	(a2)+,(a0)
000010F8 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010FC                            
000010FC 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001102 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001106 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
0000110C 7000                       		moveq	#0,d0
0000110E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001118 3E3C 003F                  		move.w	#$3F,d7
0000111C                            
0000111C                            	@clrCRAM:
0000111C 3280                       		move.w	d0,(a1)
0000111E 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00001122                            
00001122 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001126 42B8 F61A                  		clr.l	(v_scrposx_dup).w
0000112A 2F01                       		move.l	d1,-(sp)
0000112C 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114E                            
0000114E                            	@waitforDMA:
0000114E 3215                       		move.w	(a5),d1
00001150 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001154 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001156                            
00001156 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
0000115A 221F                       		move.l	(sp)+,d1
0000115C 4E75                       		rts	
0000115E                            ; End of function VDPSetupGame
0000115E                            
0000115E                            ; ===========================================================================
0000115E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00001160 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00001162 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001164 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001166 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001168 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000116A 8600                       		dc.w $8600		; unused
0000116C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116E 8800                       		dc.w $8800		; unused
00001170 8900                       		dc.w $8900		; unused
00001172 8A00                       		dc.w $8A00		; default H.interrupt register
00001174 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001176 8C81                       		dc.w $8C81		; 40-cell display mode
00001178 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000117A 8E00                       		dc.w $8E00		; unused
0000117C 8F02                       		dc.w $8F02		; set VDP increment size
0000117E 9001                       		dc.w $9001		; 64-cell hscroll size
00001180 9100                       		dc.w $9100		; window horizontal position
00001182 9200                       		dc.w $9200		; window vertical position
00001184                            
00001184                            ; ---------------------------------------------------------------------------
00001184                            ; Subroutine to	clear the screen
00001184                            ; ---------------------------------------------------------------------------
00001184                            
00001184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001184                            
00001184                            
00001184                            ClearScreen:
00001184 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A6                            
000011A6                            	@wait1:
000011A6 3215                       		move.w	(a5),d1
000011A8 0801 0001                  		btst	#1,d1
000011AC 66F8                       		bne.s	@wait1
000011AE                            
000011AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000011B2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D4                            
000011D4                            	@wait2:
000011D4 3215                       		move.w	(a5),d1
000011D6 0801 0001                  		btst	#1,d1
000011DA 66F8                       		bne.s	@wait2
000011DC                            
000011DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000011E0 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E4 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E8                            
000011E8 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011EC 7000                       		moveq	#0,d0
000011EE 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011F2                            
000011F2                            	@clearsprites:
000011F2 22C0                       		move.l	d0,(a1)+
000011F4 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F8                            
000011F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011FC 7000                       		moveq	#0,d0
000011FE 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00001202                            
00001202                            	@clearhscroll:
00001202 22C0                       		move.l	d0,(a1)+
00001204 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001208 4E75                       		rts	
0000120A                            ; End of function ClearScreen
0000120A                            
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            ; Subroutine to	load the sound driver
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            
0000120A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000120A                            
0000120A                            
0000120A                            SoundDriverLoad:
0000120A 4E71                       		nop	
0000120C 33FC 0100 00A1 1100        		stopZ80
00001214 33FC 0100 00A1 1200        		resetZ80
0000121C 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001222 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001228 6100 0000                  		bsr.w	KosDec		; decompress
0000122C 33FC 0000 00A1 1200        		resetZ80a
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 4E71                       		nop	
0000123A 4E71                       		nop	
0000123C 33FC 0100 00A1 1200        		resetZ80
00001244 33FC 0000 00A1 1100        		startZ80
0000124C 4E75                       		rts	
0000124E                            ; End of function SoundDriverLoad
0000124E                            
0000124E                            		include	"_incObj\sub PlaySound.asm"
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	play a music track
0000124E                            
0000124E                            ; input:
0000124E                            ;	d0 = track to play
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            PlaySound:
0000124E 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00001252 4E75                       		rts	
00001254                            ; End of function PlaySound
00001254                            
00001254                            ; ---------------------------------------------------------------------------
00001254                            ; Subroutine to	play a sound effect
00001254                            ; ---------------------------------------------------------------------------
00001254                            
00001254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001254                            
00001254                            
00001254                            PlaySound_Special:
00001254 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001258 4E75                       		rts	
0000125A                            ; End of function PlaySound_Special
0000125A                            
0000125A                            ; ===========================================================================
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            ; Unused sound/music subroutine
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            
0000125A                            PlaySound_Unused:
0000125A 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125E 4E75                       		rts	
0000125E 4E75                       		rts	
00001260                            		include	"_inc\PauseGame.asm"
00001260                            ; ---------------------------------------------------------------------------
00001260                            ; Subroutine to	pause the game
00001260                            ; ---------------------------------------------------------------------------
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            PauseGame:
00001260 4E71                       		nop	
00001262 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001266 6700                       		beq.s	Unpause		; if not, branch
00001268 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
0000126C 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001274 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001276                            
00001276                            Pause_StopGame:
00001276 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
0000127C 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00001282                            
00001282                            Pause_Loop:
00001282 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001288 6100 0000                  		bsr.w	WaitForVBla
0000128C 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001290 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001292 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001298 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000129A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012A0 4E71                       		nop	
000012A2 6000                       		bra.s	Pause_EndMusic
000012A4                            ; ===========================================================================
000012A4                            
000012A4                            Pause_ChkBC:
000012A4 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012AA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012AC 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012B2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B4                            
000012B4                            Pause_ChkStart:
000012B4 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012BA 67C6                       		beq.s	Pause_Loop	; if not, branch
000012BC                            
000012BC                            Pause_EndMusic:
000012BC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012C2                            
000012C2                            Unpause:
000012C2 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C8                            
000012C8                            Pause_DoNothing:
000012C8 4E75                       		rts	
000012CA                            ; ===========================================================================
000012CA                            
000012CA                            Pause_SlowMo:
000012CA 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012D0 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D6 4E75                       		rts	
000012D8                            ; End of function PauseGame
000012D8                            ; End of function PauseGame
000012D8                            
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D8                            
000012D8                            ; input:
000012D8                            ;	a1 = tile map address
000012D8                            ;	d0 = VRAM address
000012D8                            ;	d1 = width (cells)
000012D8                            ;	d2 = height (cells)
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            
000012D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D8                            
000012D8                            
000012D8                            TilemapToVRAM:
000012D8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DE 283C 0080 0000             		move.l	#$800000,d4
000012E4                            
000012E4                            	Tilemap_Line:
000012E4 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E8 3601                       		move.w	d1,d3
000012EA                            
000012EA                            	Tilemap_Cell:
000012EA 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012EC 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012F0 D084                       		add.l	d4,d0		; goto next line
000012F2 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F6 4E75                       		rts	
000012F8                            ; End of function TilemapToVRAM
000012F8                            
000012F8                            		include	"_inc\Nemesis Decompression.asm"
000012F8                            ; ==============================================================================
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Nemesis decompression routine
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Optimized by vladikcomper
000012F8                            ; ------------------------------------------------------------------------------
000012F8                             
000012F8                            NemDec_RAM:
000012F8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012FC 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001300 6000                           bra.s   NemDec_Main
00001302                             
00001302                            ; ------------------------------------------------------------------------------
00001302                            NemDec:
00001302 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001306 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000130C 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001310                             
00001310                            NemDec_Main:
00001310 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001314 3418                           move.w  (a0)+,d2        ; get number of patterns
00001316 6A00                           bpl.s   @0          ; are we in Mode 0?
00001318 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000131C E74A                       @0  lsl.w   #3,d2
0000131E 3A42                           movea.w d2,a5
00001320 7607                           moveq   #7,d3
00001322 7400                           moveq   #0,d2
00001324 7800                           moveq   #0,d4
00001326 6100 0000                      bsr.w   NemDec_BuildCodeTable
0000132A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000132C E145                           asl.w   #8,d5           ; shift up by a byte
0000132E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001330 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001334 6100                           bsr.s   NemDec2
00001336 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000133A 4E75                           rts
0000133C                             
0000133C                            ; ---------------------------------------------------------------------------
0000133C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000133C                            ; ---------------------------------------------------------------------------
0000133C                             
0000133C                            NemDec2:
0000133C 3E06                           move.w  d6,d7
0000133E 5147                           subq.w  #8,d7           ; get shift value
00001340 3205                           move.w  d5,d1
00001342 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001344 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001348 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000134A 0241 00FF                      andi.w  #$FF,d1
0000134E D241                           add.w   d1,d1
00001350 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001354 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001358 6400                           bcc.s   @0          ; if not, branch
0000135A 5046                           addq.w  #8,d6
0000135C E145                           asl.w   #8,d5
0000135E 1A18                           move.b  (a0)+,d5        ; read next byte
00001360 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001364 3001                           move.w  d1,d0
00001366 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000136A 0240 00F0                      andi.w  #$F0,d0
0000136E                             
0000136E                            NemDec_GetRepeatCount:
0000136E E848                           lsr.w   #4,d0           ; get repeat count
00001370                             
00001370                            NemDec_WritePixel:
00001370 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001372 8801                           or.b    d1,d4           ; write pixel
00001374 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001378 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000137A                            ; ---------------------------------------------------------------------------
0000137A                             
0000137A                            NemPCD_NewRow:
0000137A 7800                           moveq   #0,d4           ; reset row
0000137C 7607                           moveq   #7,d3           ; reset nybble counter
0000137E                             
0000137E                            NemDec_WritePixelLoop:
0000137E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001382 60B8                           bra.s   NemDec2
00001384                            ; ---------------------------------------------------------------------------
00001384                             
00001384                            NemDec_InlineData:
00001384 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001386 0C46 0009                      cmpi.w  #9,d6
0000138A 6400                           bcc.s   @0
0000138C 5046                           addq.w  #8,d6
0000138E E145                           asl.w   #8,d5
00001390 1A18                           move.b  (a0)+,d5
00001392 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001394 3205                           move.w  d5,d1
00001396 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001398 3001                           move.w  d1,d0
0000139A 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139E 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013A2 0C46 0009                      cmpi.w  #9,d6
000013A6 64C6                           bcc.s   NemDec_GetRepeatCount
000013A8 5046                           addq.w  #8,d6
000013AA E145                           asl.w   #8,d5
000013AC 1A18                           move.b  (a0)+,d5
000013AE 60BE                           bra.s   NemDec_GetRepeatCount
000013B0                             
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            ; Subroutines to output decompressed entry
000013B0                            ; Selected depending on current decompression mode
000013B0                            ; ---------------------------------------------------------------------------
000013B0                             
000013B0                            NemPCD_WriteRowToVDP:
000013B0                            loc_1502:
000013B0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013B2 534D                           subq.w  #1,a5
000013B4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B6 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B8 4E75                           rts
000013BA                            ; ---------------------------------------------------------------------------
000013BA                             
000013BA                            NemPCD_WriteRowToVDP_XOR:
000013BA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013BC 2882                           move.l  d2,(a4)         ; and write the result
000013BE 534D                           subq.w  #1,a5
000013C0 380D                           move.w  a5,d4
000013C2 66B6                           bne.s   NemPCD_NewRow
000013C4 4E75                           rts
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemDec_WriteRowToRAM:
000013C6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C8 534D                           subq.w  #1,a5
000013CA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013CC 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CE 4E75                           rts
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_WriteRowToRAM_XOR:
000013D0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013D2 28C2                           move.l  d2,(a4)+        ; and write the result
000013D4 534D                           subq.w  #1,a5
000013D6 380D                           move.w  a5,d4
000013D8 66A0                           bne.s   NemPCD_NewRow
000013DA 4E75                           rts
000013DC                             
000013DC                            ; ---------------------------------------------------------------------------
000013DC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013DC                            ; ---------------------------------------------------------------------------
000013DC                             
000013DC                            NemDec_BuildCodeTable:
000013DC 1018                           move.b  (a0)+,d0        ; read first byte
000013DE                             
000013DE                            @ChkEnd:
000013DE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013E2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E4 4E75                           rts
000013E6                            ; ---------------------------------------------------------------------------
000013E6                             
000013E6                            @NewPalIndex:
000013E6 3E00                           move.w  d0,d7
000013E8                             
000013E8                            @ItemLoop:
000013E8 1018                           move.b  (a0)+,d0        ; read next byte
000013EA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013EC 1200                           move.b  d0,d1
000013EE 0247 000F                      andi.w  #$F,d7          ; get palette index
000013F2 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F6 8E41                           or.w    d1,d7           ; combine the two
000013F8 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013FC 1200                           move.b  d0,d1
000013FE E149                           lsl.w   #8,d1
00001400 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001402 7208                           moveq   #8,d1
00001404 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001406 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001408 1018                           move.b  (a0)+,d0        ; get code
0000140A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000140C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001410 60D6                           bra.s   @ItemLoop       ; repeat
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            @ItemShortCode:
00001412 1018                           move.b  (a0)+,d0        ; get code
00001414 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001416 D040                           add.w   d0,d0           ; get index into code table
00001418 7A01                           moveq   #1,d5
0000141A E36D                           lsl.w   d1,d5
0000141C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001422                             
00001422                            @ItemShortCodeLoop:
00001422 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001424 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001428 60BE                           bra.s   @ItemLoop
00001428 60BE                           bra.s   @ItemLoop
0000142A                            
0000142A                              
0000142A                                pusho	; buffer local label symbol config
0000142A                                opt ws+  ; change local label symbol to '.'
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO ResetDMAQueue
0000142A                            ; Clears the DMA queue, discarding all previously-queued DMAs.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
0000142A                            ; Performs all queued DMA transfers and clears the DMA queue.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a1,a5	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE InitDMAQueue
0000142A                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
0000142A                            ; Must be called before the queue is used, and the queue expects that only it
0000142A                            ; write to this region of RAM.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a0,d0,d1	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
0000142A                            ; Queues a DMA with parameters given in registers.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	AssumeSourceAddressInBytes (default 1)
0000142A                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
0000142A                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
0000142A                            ; 	Use128kbSafeDMA (default 0)
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
0000142A                            ; 		set to 0)
0000142A                            ; 	d2	Destination address
0000142A                            ; 	d3	Transfer length (in words)
0000142A                            ; Output:
0000142A                            ; 	d0,d1,d2,d3,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 184(29/9) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; With Use128kbSafeDMA = 1, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
0000142A                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
0000142A                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
0000142A                            ;   fills the queue (second piece is discarded)
0000142A                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
0000142A                            ;   space for both pieces (both pieces queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
0000142A                            ; but only if the DMA is not entirely discarded. However, all callers must be
0000142A                            ; edited to make sure the adresss given is correct.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
0000142A                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
0000142A                            ; discarded. However, all callers must be edited to make sure the adresss given
0000142A                            ; in the correct form. You can use the dmaSource function for that.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO QueueStaticDMA
0000142A                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
0000142A                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
0000142A                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	Source address (in bytes), transfer length (in bytes), destination address
0000142A                            ; Output:
0000142A                            ; 	d0,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 32(7/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 122(21/8) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressInBytes
0000142A                            ;
0000142A                            ; This option makes the function work as a drop-in replacement of the original
0000142A                            ; functions. If you modify all callers to supply a position in words instead of
0000142A                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
0000142A =00000001                  AssumeSourceAddressInBytes = 1
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressIsRAMSafe
0000142A                            ;
0000142A                            ; This option (which is disabled by default) makes the DMA queue assume that the
0000142A                            ; source address is given to the function in a way that makes them safe to use
0000142A                            ; with RAM sources. You need to edit all callers to ensure this.
0000142A                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
0000142A =00000000                  AssumeSourceAddressIsRAMSafe = 0
0000142A                            ; ===========================================================================
0000142A                            ; option: UseRAMSourceSafeDMA
0000142A                            ;
0000142A                            ; This option (which is enabled by default) makes source addresses in RAM safe
0000142A                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
0000142A                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
0000142A =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
0000142A                            ; ===========================================================================
0000142A                            ; option: Use128kbSafeDMA
0000142A                            ;
0000142A                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
0000142A                            ; disabled by default because you can simply align the art in ROM and avoid the
0000142A                            ; issue altogether. It is here so that you have a high-performance routine to do
0000142A                            ; the job in situations where you can't align it in ROM.
0000142A =00000001                  Use128kbSafeDMA = 1
0000142A                            ; ===========================================================================
0000142A                            ; option UseVIntSafeDMA
0000142A                            ;
0000142A                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
0000142A                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
0000142A                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
0000142A                            ; KosM decoder) prevent these by masking off interrupts before calling and then
0000142A                            ; restore interrupts after.
0000142A =00000000                  UseVIntSafeDMA = 0
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            
0000142A                            ; Convenience macros, for increased maintainability of the code.
0000142A =00000027                  DMA = %100111
0000142A =00000021                  VRAM = %100001
0000142A                            ; Like vdpComm, but starting from an address contained in a register
0000142A =00000001                  vdpCommReg_defined = 1
0000142A                            vdpCommReg macro reg,type,rwd,clr
0000142A                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
0000142A                            	if ((\type&\rwd)&3)<>0
0000142A                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
0000142A                            	endif
0000142A                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
0000142A                            	swap	\reg								; Put all bits in proper places
0000142A                            	if \clr <> 0
0000142A                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
0000142A                            	endif
0000142A                            	if ((\type&\rwd)&$FC)=$20
0000142A                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
0000142A                            	elseif ((\type&\rwd)&$FC)<>0
0000142A                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
0000142A                            	endif
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  intMacros_defined = 1
0000142A                            enableInts macro
0000142A                            	move	#$2300,sr
0000142A                            	endm
0000142A                            
0000142A                            disableInts macro
0000142A                            	move	#$2700,sr
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  DMAEntry_defined = 1
0000142A                                    rsreset
0000142A =00000000                  DMAEntry.Reg94:		rs.b	1
0000142A                            			  
0000142A =00000001                  DMAEntry.Size:      rs.b    0
0000142A =00000001                  DMAEntry.SizeH:		rs.b	1
0000142A =00000002                  DMAEntry.Reg93:		rs.b	1
0000142A =00000003                  DMAEntry.Source:    rs.b    0
0000142A =00000003                  DMAEntry.SizeL:		rs.b	1
0000142A =00000004                  DMAEntry.Reg97:		rs.b	1
0000142A =00000005                  DMAEntry.SrcH:		rs.b	1
0000142A =00000006                  DMAEntry.Reg96:		rs.b	1
0000142A =00000007                  DMAEntry.SrcM:		rs.b	1
0000142A =00000008                  DMAEntry.Reg95:		rs.b	1
0000142A =00000009                  DMAEntry.SrcL:		rs.b	1
0000142A =0000000A                  DMAEntry.Command:	rs.l	1
0000142A =0000000E                  DMAEntry.len:   rs.w    0
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            						
0000142A                            										   
0000142A                            									   
0000142A                            	  
0000142A                            																			 
0000142A                            							  
0000142A =00000001                  QueueStaticDMA_defined = 1
0000142A                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
0000142A                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
0000142A                            ; crosses a 128kB boundary, or has size 0.
0000142A                            QueueStaticDMA macro src,length,dest
0000142A                                local   len
0000142A                            		if ((\src)&1)<>0
0000142A                            			inform 3,"DMA queued from odd source \1!"
0000142A                            		endif
0000142A                            		if ((\length)&1)<>0
0000142A                            			inform 3,"DMA an odd number of bytes \2!"
0000142A                            		endif
0000142A                            		if (\length)=0
0000142A                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
0000142A                            		endif
0000142A                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
0000142A                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
0000142A                            		endif
0000142A                            	  
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	sr,-(sp)										; Save current interrupt mask
0000142A                            		disableInts												; Mask off interrupts
0000142A                            	endif ; UseVIntSafeDMA=1
0000142A                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142A                            	beq.s	.done												; Return if there's no more room in the buffer
0000142A                            	len: = ((length>>1)&$7FFF)
0000142A                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
0000142A                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
0000142A                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
0000142A                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
0000142A                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
0000142A                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
0000142A                            .done:
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	(sp)+,sr										; Restore interrupts to previous state
0000142A                            	endif ;UseVIntSafeDMA=1
0000142A                            	endm
0000142A                            
0000142A                                
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ResetDMAQueue: macro
0000142A                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000142A                            	endm
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000142A                            
0000142A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
0000142A                            Add_To_DMA_Queue:
0000142A                            QueueDMATransfer:
0000142A 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142E B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001432 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001434                            
00001434 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001436 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
0000143A 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143E 7000                       	moveq	#0,d0											; We need a zero on d0
00001440                            
00001440                            		; Detect if transfer crosses 128KB boundary
00001440                            		; Using sub+sub instead of move+add handles the following edge cases:
00001440                            		; (1) d3.w = 0 => 128kB transfer
00001440                            		;   (a) d1.w = 0 => no carry, don't split the DMA
00001440                            		;   (b) d1.w != 0 => carry, need to split the DMA
00001440                            		; (2) d3.w != 0
00001440                            		;   (a) if there is carry on d1.w + d3.w
00001440                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
00001440                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
00001440                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
00001440                            		; The reason this works is that carry on d1.w + d3.w means that
00001440                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
00001440                            		; d1.w + d3.w > $10000.
00001440 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
00001442 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001444 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001446                            	; It does not cross a 128kB boundary. So just finish writing it.
00001446 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
0000144A                            
0000144A                            .finishxfer:
0000144A                            	; Command to specify destination address and begin DMA
0000144A 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001456 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
0000145A 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
0000145C 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
00001460                            
00001460                            .done:
00001460 4E75                       	rts
00001462                            ; ---------------------------------------------------------------------------
00001462                            .doubletransfer:
00001462                            		; We need to split the DMA into two parts, since it crosses a 128kB block
00001462 D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001464 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001468                            
00001468 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
0000146C 67DC                       		beq.s	.finishxfer									; Branch if not
0000146E                            
0000146E                            		; Get second transfer's source, destination, and length
0000146E 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
00001470 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
00001472 D040                       		add.w	d0,d0										; Convert to number of bytes
00001474 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001476                            
00001476                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001476                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001484 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001488                            
00001488                            		; Do second transfer
00001488 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
0000148C 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001490                            
00001490                            		; Command to specify destination address and begin DMA
0000149A 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149E 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014A0                            
000014A0 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A4 4E75                       		rts
000014A6                            ; End of function QueueDMATransfer
000014A6                            ; ===========================================================================
000014A6                            
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            ; Subroutine for issuing all VDP commands that were queued
000014A6                            ; (by earlier calls to QueueDMATransfer)
000014A6                            ; Resets the queue when it's done
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            
000014A6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A6                            
000014A6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A6                            Process_DMA_Queue:
000014A6                            ProcessDMAQueue:
000014A6 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014AA 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .jump_table:
000014AE 4E75                       	rts
000014B0                            	rept 6
000014B0                            		trap	#0											; Just in case
000014B0 4E40 4E40 4E40 4E40 4E40+  	endr
000014BC                            ; ---------------------------------------------------------------------------
000014BC =00000001                      c: = 1
000014BC                            	rept QueueSlotCount
000014BC                            		lea	(vdp_control_port).l,a5
000014BC                            		lea	(VDP_Command_Buffer).w,a1
000014BC                            		if c<>QueueSlotCount
000014BC                            			bra.w	.jump0 - c*8
000014BC                            		endif
000014BC                                c: = c + 1
000015B4                            ; ---------------------------------------------------------------------------
000015B4                            	rept QueueSlotCount
000015B4                            		move.l	(a1)+,(a5)									; Transfer length
000015B4                            		move.l	(a1)+,(a5)									; Source address high
000015B4                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B4                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B4 2A99 2A99 2A99 3A99 2A99+  	endr
00001644                            
00001644                            .jump0:
00001644 31FC C800 C8FC             	ResetDMAQueue
0000164A 4E75                       	rts
0000164C                            ; End of function ProcessDMAQueue
0000164C                            ; ===========================================================================
0000164C                            
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            ; Subroutine for initializing the DMA queue.
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            
0000164C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000164C                            
0000164C                            InitDMAQueue:
0000164C 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
00001650 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
00001652 223C 9397 9695             	move.l	#$93979695,d1
00001658 =00000000                      c: = 0
00001658                            	rept QueueSlotCount
00001658                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001658                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001658                                c: = c + DMAEntry.len
00001658 1080 03C8 0002 1140 000E+  	endr
000016E6                            
000016E6 31FC C800 C8FC             	ResetDMAQueue
000016EC 4E75                       	rts
000016EE                            ; End of function ProcessDMAQueue
000016EE                            ; ===========================================================================
000016EE                            
000016EE                            
000016EE                                popo	; buffer local label symbol config
000016EE                            
000016EE                            
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ARGUMENTS
000016EE                            ; d0 = index of PLC list
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EE                            
000016EE                            ; LoadPLC:
000016EE                            AddPLC:
000016EE 48E7 0060                  		movem.l	a1-a2,-(sp)
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
00001702 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001706                            
00001706                            	@findspace:
00001706 4A92                       		tst.l	(a2)		; is space available in RAM?
00001708 6700                       		beq.s	@copytoRAM	; if yes, branch
0000170A 5C4A                       		addq.w	#6,a2		; if not, try next space
0000170C 60F8                       		bra.s	@findspace
0000170E                            ; ===========================================================================
0000170E                            
0000170E                            @copytoRAM:
0000170E 3019                       		move.w	(a1)+,d0	; get length of PLC
00001710 6B00                       		bmi.s	@skip
00001712                            
00001712                            	@loop:
00001712 24D9                       		move.l	(a1)+,(a2)+
00001714 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001716 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
0000171A                            
0000171A                            	@skip:
0000171A 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171E 4E75                       		rts	
00001720                            ; End of function AddPLC
00001720                            
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            ; Queue pattern load requests, but clear the PLQ first
00001720                            
00001720                            ; ARGUMENTS
00001720                            ; d0 = index of PLC list (see ArtLoadCues)
00001720                            
00001720                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001720                            ;	  (or hacker) is responsible for making sure that no more than
00001720                            ;	  16 load requests are copied into the buffer.
00001720                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001720                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001720                            
00001720                            ; LoadPLC2:
00001720                            NewPLC:
00001720 48E7 0060                  		movem.l	a1-a2,-(sp)
00001724 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000172A D040                       		add.w	d0,d0
0000172C 3031 0000                  		move.w	(a1,d0.w),d0
00001730 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001734 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001736 45F8 F680                  		lea	(v_plc_buffer).w,a2
0000173A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000173C 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173E                            
0000173E                            	@loop:
0000173E 24D9                       		move.l	(a1)+,(a2)+
00001740 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001742 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001746                            
00001746                            	@skip:
00001746 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000174A 4E75                       		rts	
0000174C                            ; End of function NewPLC
0000174C                            
0000174C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174C                            
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            ; Subroutine to	clear the pattern load cues
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            
0000174C                            ; Clear the pattern load queue ($FFF680 - $FFF700)
0000174C                            
0000174C                            
0000174C                            ClearPLC:
0000174C 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
00001750 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
00001752                            
00001752                            	@loop:
00001752 429A                       		clr.l	(a2)+
00001754 51C8 FFFC                  		dbf	d0,@loop
00001758 4E75                       		rts	
0000175A                            ; End of function ClearPLC
0000175A                            
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            ; Subroutine to	use graphics listed in a pattern load cue
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            
0000175A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175A                            
0000175A                            
0000175A                            RunPLC:
0000175A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175E 6700                       		beq.s	Rplc_Exit
00001760 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001764 6600                       		bne.s	Rplc_Exit
00001766 2078 F680                  		movea.l	(v_plc_buffer).w,a0
0000176A 47F9 0000 13B0             		lea	(NemPCD_WriteRowToVDP).l,a3
00001770 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001774 3418                       		move.w	(a0)+,d2
00001776 6A00                       		bpl.s	loc_160E
00001778 D6FC 000A                  		adda.w	#$A,a3
0000177C                            
0000177C                            loc_160E:
0000177C 0242 7FFF                  		andi.w	#$7FFF,d2
00001780 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001784 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001788 1A18                       		move.b	(a0)+,d5
0000178A E145                       		asl.w	#8,d5
0000178C 1A18                       		move.b	(a0)+,d5
0000178E 7C10                       		moveq	#$10,d6
00001790 7000                       		moveq	#0,d0
00001792 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001796 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
0000179A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017A2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017AA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AE                            
000017AE                            Rplc_Exit:
000017AE 4E75                       		rts	
000017B0                            ; End of function RunPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            sub_1642:
000017B0 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B4 6700 0000                  		beq.w	locret_16DA
000017B8 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BE 7000                       		moveq	#0,d0
000017C0 3038 F684                  		move.w	($FFFFF684).w,d0
000017C4 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017CA 6000                       		bra.s	loc_1676
000017CC                            ; End of function sub_1642
000017CC                            
000017CC                            
000017CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CC                            
000017CC                            
000017CC                            ; sub_165E:
000017CC                            ProcessDPLC2:
000017CC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017D0 6700                       		beq.s	locret_16DA
000017D2 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D8 7000                       		moveq	#0,d0
000017DA 3038 F684                  		move.w	($FFFFF684).w,d0
000017DE 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E4                            
000017E4                            loc_1676:
000017E4 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017EA E588                       		lsl.l	#2,d0
000017EC E448                       		lsr.w	#2,d0
000017EE 0040 4000                  		ori.w	#$4000,d0
000017F2 4840                       		swap	d0
000017F4 2880                       		move.l	d0,(a4)
000017F6 594C                       		subq.w	#4,a4
000017F8 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017FC 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001800 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001804 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001808 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000180C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001810 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001814 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001818                            
00001818                            loc_16AA:
00001818 3A7C 0008                  		movea.w	#8,a5
0000181C 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001820 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001824 6700                       		beq.s	loc_16DC
00001826 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000182A 66EC                       		bne.s	loc_16AA
0000182C 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001830 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001834 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001838 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000183C 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001840 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001844 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001848                            
00001848                            locret_16DA:
00001848 4E75                       		rts	
0000184A                            ; ===========================================================================
0000184A                            
0000184A                            loc_16DC:
0000184A 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184E 7015                       		moveq	#$15,d0
00001850                            
00001850                            loc_16E2:
00001850 20E8 0006                  		move.l	6(a0),(a0)+
00001854 51C8 FFFA                  		dbf	d0,loc_16E2
00001858 4E75                       		rts	
0000185A                            ; End of function ProcessDPLC2
0000185A                            
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            ; Subroutine to	execute	the pattern load cue
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            QuickPLC:
0000185A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001860 D040                       		add.w	d0,d0
00001862 3031 0000                  		move.w	(a1,d0.w),d0
00001866 43F1 0000                  		lea	(a1,d0.w),a1
0000186A 3219                       		move.w	(a1)+,d1	; get length of PLC
0000186C                            
0000186C                            	Qplc_Loop:
0000186C 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186E 7000                       		moveq	#0,d0
00001870 3019                       		move.w	(a1)+,d0	; get VRAM address
00001872 E588                       		lsl.l	#2,d0
00001874 E448                       		lsr.w	#2,d0
00001876 0040 4000                  		ori.w	#$4000,d0
0000187A 4840                       		swap	d0
0000187C 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
00001882 6100 FA7E                  		bsr.w	NemDec		; decompress
00001886 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
0000188A 4E75                       		rts	
0000188C                            ; End of function QuickPLC
0000188C                            
0000188C                            		include	"_inc\Enigma Decompression.asm"
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            ; Enigma decompression algorithm
0000188C                            
0000188C                            ; input:
0000188C                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
0000188C                            ;	a0 = source address
0000188C                            ;	a1 = destination address
0000188C                            
0000188C                            ; usage:
0000188C                            ;	lea	(source).l,a0
0000188C                            ;	lea	(destination).l,a1
0000188C                            ;	move.w	#arttile,d0
0000188C                            ;	bsr.w	EniDec
0000188C                            
0000188C                            ; See http://www.segaretro.org/Enigma_compression for format description
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            EniDec:
0000188C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001890 3640                       		movea.w	d0,a3		; store starting art tile
00001892 1018                       		move.b	(a0)+,d0
00001894 4880                       		ext.w	d0
00001896 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001898 1818                       		move.b	(a0)+,d4
0000189A E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
0000189C 3458                       		movea.w	(a0)+,a2
0000189E D4CB                       		adda.w	a3,a2		; store incremental copy word
000018A0 3858                       		movea.w	(a0)+,a4
000018A2 D8CB                       		adda.w	a3,a4		; store literal copy word
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 E145                       		asl.w	#8,d5
000018A8 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018AA 7C10                       		moveq	#16,d6		; initial shift value
000018AC                            ; loc_173E:
000018AC                            Eni_Loop:
000018AC 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AE 3E06                       		move.w	d6,d7
000018B0 9E40                       		sub.w	d0,d7
000018B2 3205                       		move.w	d5,d1
000018B4 EE69                       		lsr.w	d7,d1
000018B6 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018BA 3401                       		move.w	d1,d2		; and copy it
000018BC 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018C0 6400                       		bhs.s	@sevenbitentry
000018C2 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C4 E24A                       		lsr.w	#1,d2
000018C6                            ; loc_1758:
000018C6                            @sevenbitentry:
000018C6 6100 0000                  		bsr.w	EniDec_FetchByte
000018CA 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CE E849                       		lsr.w	#4,d1
000018D0 D241                       		add.w	d1,d1
000018D2 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D6                            ; End of function EniDec
000018D6                            
000018D6                            ; ===========================================================================
000018D6                            ; loc_1768:
000018D6                            EniDec_00:
000018D6 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D8 524A                       		addq.w	#1,a2		; increment it
000018DA 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DE 60CC                       		bra.s	Eni_Loop
000018E0                            ; ===========================================================================
000018E0                            ; loc_1772:
000018E0                            EniDec_01:
000018E0 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018E2 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E6 60C4                       		bra.s	Eni_Loop
000018E8                            ; ===========================================================================
000018E8                            ; loc_177A:
000018E8                            EniDec_100:
000018E8 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018EC                            ; loc_177E:
000018EC 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018F2                            
000018F2 60B8                       		bra.s	Eni_Loop
000018F4                            ; ===========================================================================
000018F4                            ; loc_1786:
000018F4                            EniDec_101:
000018F4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F8                            ; loc_178A:
000018F8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018FA 5241                       		addq.w	#1,d1		; increment
000018FC 51CA FFFA                  		dbf	d2,@loop	; repeat
00001900                            
00001900 60AA                       		bra.s	Eni_Loop
00001902                            ; ===========================================================================
00001902                            ; loc_1794:
00001902                            EniDec_110:
00001902 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001906                            ; loc_1798:
00001906 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001908 5341                       		subq.w	#1,d1		; decrement
0000190A 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190E                            
0000190E 609C                       		bra.s	Eni_Loop
00001910                            ; ===========================================================================
00001910                            ; loc_17A2:
00001910                            EniDec_111:
00001910 0C42 000F                  		cmpi.w	#$F,d2
00001914 6700                       		beq.s	EniDec_Done
00001916                            ; loc_17A8:
00001916 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
0000191A 32C1                       		move.w	d1,(a1)+	; copy it
0000191C 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001920                            
00001920 608A                       		bra.s	Eni_Loop
00001922                            ; ===========================================================================
00001922                            ; loc_17B4:
00001922                            EniDec_Index:
00001922 60B2                       		bra.s	EniDec_00
00001924 60B0                       		bra.s	EniDec_00
00001926 60B8                       		bra.s	EniDec_01
00001928 60B6                       		bra.s	EniDec_01
0000192A 60BC                       		bra.s	EniDec_100
0000192C 60C6                       		bra.s	EniDec_101
0000192E 60D2                       		bra.s	EniDec_110
00001930 60DE                       		bra.s	EniDec_111
00001932                            ; ===========================================================================
00001932                            ; loc_17C4:
00001932                            EniDec_Done:
00001932 5348                       		subq.w	#1,a0		; go back by one byte
00001934 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001938 6600                       		bne.s	@notnewbyte	; if not, branch
0000193A 5348                       		subq.w	#1,a0		; and another one if needed
0000193C                            ; loc_17CE:
0000193C                            @notnewbyte:
0000193C 3008                       		move.w	a0,d0
0000193E E248                       		lsr.w	#1,d0		; are we on an odd byte?
00001940 6400                       		bcc.s	@evenbyte	; if not, branch
00001942 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001944                            ; loc_17D6:
00001944                            @evenbyte:
00001944 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001948 4E75                       		rts	
0000194A                            
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            ; Part of the Enigma decompressor
0000194A                            ; Fetches an inline copy value and stores it in d1
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            
0000194A                            ; =============== S U B R O U T I N E =======================================
0000194A                            
0000194A                            ; loc_17DC:
0000194A                            EniDec_FetchInlineValue:
0000194A 360B                       		move.w	a3,d3		; copy starting art tile
0000194C 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194E D201                       		add.b	d1,d1		; is the priority bit set?
00001950 6400                       		bcc.s	@skippriority	; if not, branch
00001952 5346                       		subq.w	#1,d6
00001954 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001956 6700                       		beq.s	@skippriority	; if not, branch
00001958 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
0000195C                            ; loc_17EE:
0000195C                            @skippriority:
0000195C D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195E 6400                       		bcc.s	@skiphighpal	; if not, branch
00001960 5346                       		subq.w	#1,d6
00001962 0D05                       		btst	d6,d5
00001964 6700                       		beq.s	@skiphighpal
00001966 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
0000196A                            ; loc_17FC:
0000196A                            @skiphighpal:
0000196A D201                       		add.b	d1,d1		; is the low palette line bit set?
0000196C 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196E 5346                       		subq.w	#1,d6
00001970 0D05                       		btst	d6,d5
00001972 6700                       		beq.s	@skiplowpal
00001974 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001978                            ; loc_180A:
00001978                            @skiplowpal:
00001978 D201                       		add.b	d1,d1		; is the vertical flip flag set?
0000197A 6400                       		bcc.s	@skipyflip	; if not, branch
0000197C 5346                       		subq.w	#1,d6
0000197E 0D05                       		btst	d6,d5
00001980 6700                       		beq.s	@skipyflip
00001982 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001986                            ; loc_1818:
00001986                            @skipyflip:
00001986 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001988 6400                       		bcc.s	@skipxflip	; if not, branch
0000198A 5346                       		subq.w	#1,d6
0000198C 0D05                       		btst	d6,d5
0000198E 6700                       		beq.s	@skipxflip
00001990 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001994                            ; loc_1826:
00001994                            @skipxflip:
00001994 3205                       		move.w	d5,d1
00001996 3E06                       		move.w	d6,d7
00001998 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
0000199A 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
0000199C 3C07                       		move.w	d7,d6
0000199E 0646 0010                  		addi.w	#16,d6
000019A2 4447                       		neg.w	d7		; calculate bit deficit
000019A4 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A6 1A10                       		move.b	(a0),d5		; get next byte
000019A8 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019AA DE47                       		add.w	d7,d7
000019AC CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019B0 D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019B2                            ; loc_1844:
000019B2                            @maskvalue:
000019B2 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B4 D040                       		add.w	d0,d0
000019B6 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019BA D243                       		add.w	d3,d1		; add starting art tile
000019BC 1A18                       		move.b	(a0)+,d5
000019BE E14D                       		lsl.w	#8,d5
000019C0 1A18                       		move.b	(a0)+,d5	; get next word
000019C2 4E75                       		rts	
000019C4                            ; ===========================================================================
000019C4                            ; loc_1856:
000019C4                            @enoughbits:
000019C4 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C6 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C8 300D                       		move.w	a5,d0
000019CA D040                       		add.w	d0,d0
000019CC C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019D0 D243                       		add.w	d3,d1	; add starting art tile
000019D2 300D                       		move.w	a5,d0
000019D4 6000                       		bra.s	EniDec_FetchByte
000019D6                            ; ===========================================================================
000019D6                            ; loc_1868:
000019D6                            @justenough:
000019D6 7C10                       		moveq	#16,d6	; reset shift value
000019D8 60D8                       		bra.s	@maskvalue
000019DA                            ; ===========================================================================
000019DA                            ; word_186C:
000019DA                            EniDec_Masks:
000019DA 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019E2 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019EA 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019F2 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019FA                            
000019FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019FA                            
000019FA                            ; sub_188C:
000019FA                            EniDec_FetchByte:
000019FA 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019FC 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A00 6400                       		bhs.s	@locret	; if not, branch
00001A02 5046                       		addq.w	#8,d6
00001A04 E145                       		asl.w	#8,d5
00001A06 1A18                       		move.b	(a0)+,d5
00001A08                            @locret:
00001A08 4E75                       		rts	
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            		include	"_inc\Kosinski Decompression.asm"
00001A0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A0A                            ; (sometimes called KOZINSKI decompression)
00001A0A                            ;
00001A0A                            ; ARGUMENTS:
00001A0A                            ; a0 = source address
00001A0A                            ; a1 = destination address
00001A0A                            ;
00001A0A                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A0A                            ; New faster version by written by vladikcomper, with additional improvements by
00001A0A                            ; MarkeyJester and Flamewing
00001A0A                            ; Converted to ASM68K by Beta Filter.
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A =00000001                  Kos_UseLUT: equ 1
00001A0A =00000003                  Kos_LoopUnroll: equ 3
00001A0A =00000001                  Kos_ExtremeUnrolling: equ 1
00001A0A                            
00001A0A                            Kos_RunBitStream macro
00001A0A                                dbra    d2,@skip\@
00001A0A                                moveq   #7,d2                   ; Set repeat count to 8.
00001A0A                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A0A                                not.w   d3                      ; Have all 16 bits been used up?
00001A0A                                bne.s   @skip\@                   ; Branch if not.
00001A0A                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A0A                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A0A                                if Kos_UseLUT=1
00001A0A                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A0A                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A0A                                endif
00001A0A                            @skip\@
00001A0A                                endm
00001A0A                            
00001A0A                            Kos_ReadBit macro
00001A0A                                if Kos_UseLUT=1
00001A0A                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A0A                                else
00001A0A                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A0A                                endif
00001A0A                                endm
00001A0A                            ; ===========================================================================
00001A0A                            ; KozDec@193A:
00001A0A                            KosDec:
00001A0A 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A0C 7000                           moveq   #0,d0
00001A0E 7200                           moveq   #0,d1
00001A10 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A14 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A16 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A18 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A1C 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A20 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A22 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A24 6000                           bra.s   @FetchNewCode
00001A26                            ; ---------------------------------------------------------------------------
00001A26                            @FetchCodeLoop:
00001A26                                ; Code 1 (Uncompressed byte).
00001A3E 12D8                           move.b  (a0)+,(a1)+
00001A40                            
00001A40                            @FetchNewCode:
00001A42 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A44                            
00001A44                                ; Codes 00 and 01.
00001A44 7AFF                           moveq   #-1,d5
00001A46 4BD1                           lea (a1),a5
00001A62 6500 0000                      bcs.w   @Code_01
00001A66                            
00001A66                                ; Code 00 (Dictionary ref. short).
00001A80 6500                           bcs.s   @Copy45
00001A9C 6500                           bcs.s   @Copy3
00001AB6 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB8 DAC5                           adda.w  d5,a5
00001ABA 12DD                           move.b  (a5)+,(a1)+
00001ABC 12DD                           move.b  (a5)+,(a1)+
00001ABE 6080                           bra.s   @FetchNewCode
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            @Copy3:
00001AD8 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001ADA DAC5                           adda.w  d5,a5
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 12DD                           move.b  (a5)+,(a1)+
00001AE0 12DD                           move.b  (a5)+,(a1)+
00001AE2 6000 FF5C                      bra.w   @FetchNewCode
00001AE6                            ; ---------------------------------------------------------------------------
00001AE6                            @Copy45:
00001B00 6500                           bcs.s   @Copy5
00001B1A 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B1C DAC5                           adda.w  d5,a5
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 12DD                           move.b  (a5)+,(a1)+
00001B24 12DD                           move.b  (a5)+,(a1)+
00001B26 6000 FF18                      bra.w   @FetchNewCode
00001B2A                            ; ---------------------------------------------------------------------------
00001B2A                            @Copy5:
00001B42 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B44 DAC5                           adda.w  d5,a5
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 12DD                           move.b  (a5)+,(a1)+
00001B4E 12DD                           move.b  (a5)+,(a1)+
00001B50 6000 FEEE                      bra.w   @FetchNewCode
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            @Code_01:
00001B54 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B56                                ; Code 01 (Dictionary ref. long / special).
00001B6E 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B70 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B72 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B74 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B76 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B78 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B7A 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B7C                            
00001B7C                                ; special mode (extended counter)
00001B7C 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7E 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B80 5304                           subq.b  #1,d4
00001B82 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B86                            
00001B86 DAC5                           adda.w  d5,a5
00001B88 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B8A 3C04                           move.w  d4,d6
00001B8C 4646                           not.w   d6
00001B8E CC47                           and.w   d7,d6
00001B90 DC46                           add.w   d6,d6
00001B92 E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B94 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B98                            ; ---------------------------------------------------------------------------
00001B98                            @largecopy:
00001B98                                rept (1<<Kos_LoopUnroll)
00001B98                                move.b  (a5)+,(a1)+
00001B98 12DD 12DD 12DD 12DD 12DD+      endr
00001BA8 51CC FFEE                      dbra    d4,@largecopy
00001BAC 6000 FE92                      bra.w   @FetchNewCode
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0                            @StreamCopy:
00001BB0 DAC5                           adda.w  d5,a5
00001BB2 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB4 BF44                           eor.w   d7,d4
00001BB6 D844                           add.w   d4,d4
00001BB8 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BBC                            ; ---------------------------------------------------------------------------
00001BBC                            @mediumcopy:
00001BBC                                rept 8
00001BBC                                move.b  (a5)+,(a1)+
00001BBC 12DD 12DD 12DD 12DD 12DD+      endr
00001BCC 6000 FE72                      bra.w   @FetchNewCode
00001BD0                            ; ---------------------------------------------------------------------------
00001BD0                            @Quit:
00001BD0 4E75                           rts                             ; End of function KosDec.
00001BD2                            ; ===========================================================================
00001BD2                            KosDec_ByteMap:
00001BD2 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BE2 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BF2 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C02 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C12 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C22 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C32 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C42 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C52 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C62 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C72 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C82 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C92 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CA2 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CB2 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CC2 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CD2                            ; ===========================================================================
00001CD2                            ; ===========================================================================
00001CD2                            
00001CD2                            		include	"_inc\PaletteCycle.asm"
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            ; Palette cycling routine loading subroutine
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            
00001CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CD2                            
00001CD2                            
00001CD2                            PaletteCycle:
00001CD2 7400                       		moveq	#0,d2
00001CD4 7000                       		moveq	#0,d0
00001CD6 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CDA D040                       		add.w	d0,d0
00001CDC 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CE0 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE4                            ; End of function PaletteCycle
00001CE4                            
00001CE4                            ; ===========================================================================
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4                            ; Palette cycling routines
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE6 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE8 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CEC 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEE 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CF0 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CF2                            
00001CF2                            
00001CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF2                            
00001CF2                            
00001CF2                            PCycle_Title:
00001CF2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF8 6000                       		bra.s	PCycGHZ_Go
00001CFA                            ; ===========================================================================
00001CFA                            
00001CFA                            PCycle_GHZ:
00001CFA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D00                            
00001D00                            PCycGHZ_Go:
00001D00 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D04 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D06                            
00001D06 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D0C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D10 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D14 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D18 E748                       		lsl.w	#3,d0
00001D1A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D22 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D26                            
00001D26                            PCycGHZ_Skip:
00001D26 4E75                       		rts	
00001D28                            ; End of function PCycle_GHZ
00001D28                            
00001D28                            
00001D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D28                            
00001D28                            
00001D28                            PCycle_LZ:
00001D28                            ; Waterfalls
00001D28 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D2C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2E                            
00001D2E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D34 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D38 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D3C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D40 E748                       		lsl.w	#3,d0
00001D42 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D48 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4E 6600                       		bne.s	PCycLZ_NotSBZ3
00001D50 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D56                            
00001D56                            	PCycLZ_NotSBZ3:
00001D56 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D62 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D66 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            PCycLZ_Skip1:
00001D6E                            ; Conveyor belts
00001D6E                            		;move.w	(v_framecount).w,d0
00001D6E                            		;andi.w	#7,d0
00001D6E                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6E                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6E                            		;moveq	#1,d1
00001D6E                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6E                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6E                            		;neg.w	d1
00001D6E                            
00001D6E                            	;PCycLZ_NoRev:
00001D6E                            		;move.w	(v_pal_buffer).w,d0
00001D6E                            		;andi.w	#3,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;cmpi.w	#3,d0
00001D6E                            		;bcs.s	loc_1A0A
00001D6E                            		;move.w	d0,d1
00001D6E                            		;moveq	#0,d0
00001D6E                            		;tst.w	d1
00001D6E                            		;bpl.s	loc_1A0A
00001D6E                            		;moveq	#2,d0
00001D6E                            
00001D6E                            ;loc_1A0A:
00001D6E                            		;move.w	d0,(v_pal_buffer).w
00001D6E                            		;add.w	d0,d0
00001D6E                            		;move.w	d0,d1
00001D6E                            		;add.w	d0,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;lea	(Pal_LZCyc2).l,a0
00001D6E                            		;lea	(v_pal_dry+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            		;lea	(Pal_LZCyc3).l,a0
00001D6E                            		;lea	(v_pal_water+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            ;PCycLZ_Skip2:
00001D6E 4E75                       		rts	
00001D70                            ; End of function PCycle_LZ
00001D70                            
00001D70                            ; ===========================================================================
00001D70 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D78                            ; ===========================================================================
00001D78                            
00001D78                            PCycle_MZ:
00001D78 4E75                       		rts	
00001D7A                            
00001D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7A                            
00001D7A                            
00001D7A                            PalCycle_SLZ:
00001D7A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7E 6A00                       		bpl.s	locret_1A80
00001D80 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D86 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D8A 5240                       		addq.w	#1,d0
00001D8C 0C40 0006                  		cmpi.w	#6,d0
00001D90 6500                       		bcs.s	loc_1A60
00001D92 7000                       		moveq	#0,d0
00001D94                            
00001D94                            loc_1A60:
00001D94 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D98 3200                       		move.w	d0,d1
00001D9A D241                       		add.w	d1,d1
00001D9C D041                       		add.w	d1,d0
00001D9E D040                       		add.w	d0,d0
00001DA0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB4                            
00001DB4                            locret_1A80:
00001DB4 4E75                       		rts	
00001DB6                            ; End of function PalCycle_SLZ
00001DB6                            
00001DB6                            
00001DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB6                            
00001DB6                            
00001DB6                            PalCycle_SYZ:
00001DB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DBA 6A00                       		bpl.s	locret_1AC6
00001DBC 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DC2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC6 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DCA 0240 0003                  		andi.w	#3,d0
00001DCE E548                       		lsl.w	#2,d0
00001DD0 3200                       		move.w	d0,d1
00001DD2 D040                       		add.w	d0,d0
00001DD4 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DDA 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE6 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DEC 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DF0 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF4 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DFA                            
00001DFA                            locret_1AC6:
00001DFA 4E75                       		rts	
00001DFC                            ; End of function PalCycle_SYZ
00001DFC                            
00001DFC                            
00001DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DFC                            
00001DFC                            
00001DFC                            PalCycle_SBZ:
00001DFC 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E02 4A38 FE11                  		tst.b	(v_act).w
00001E06 6700                       		beq.s	loc_1ADA
00001E08 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0E                            
00001E0E                            loc_1ADA:
00001E0E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E12 321A                       		move.w	(a2)+,d1
00001E14                            
00001E14                            loc_1AE0:
00001E14 5311                       		subq.b	#1,(a1)
00001E16 6B00                       		bmi.s	loc_1AEA
00001E18 5489                       		addq.l	#2,a1
00001E1A 5C8A                       		addq.l	#6,a2
00001E1C 6000                       		bra.s	loc_1B06
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            loc_1AEA:
00001E1E 12DA                       		move.b	(a2)+,(a1)+
00001E20 1011                       		move.b	(a1),d0
00001E22 5200                       		addq.b	#1,d0
00001E24 B01A                       		cmp.b	(a2)+,d0
00001E26 6500                       		bcs.s	loc_1AF6
00001E28 7000                       		moveq	#0,d0
00001E2A                            
00001E2A                            loc_1AF6:
00001E2A 12C0                       		move.b	d0,(a1)+
00001E2C 0240 000F                  		andi.w	#$F,d0
00001E30 D040                       		add.w	d0,d0
00001E32 305A                       		movea.w	(a2)+,a0
00001E34 365A                       		movea.w	(a2)+,a3
00001E36 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E3A                            
00001E3A                            loc_1B06:
00001E3A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E42 6A00                       		bpl.s	locret_1B64
00001E44 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E4A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E50 4A38 FE11                  		tst.b	(v_act).w
00001E54 6700                       		beq.s	loc_1B2E
00001E56 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E5C 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E62                            
00001E62                            loc_1B2E:
00001E62 72FF                       		moveq	#-1,d1
00001E64 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E68 6700                       		beq.s	loc_1B38
00001E6A 4441                       		neg.w	d1
00001E6C                            
00001E6C                            loc_1B38:
00001E6C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E70 0240 0003                  		andi.w	#3,d0
00001E74 D041                       		add.w	d1,d0
00001E76 0C40 0003                  		cmpi.w	#3,d0
00001E7A 6500                       		bcs.s	loc_1B52
00001E7C 3200                       		move.w	d0,d1
00001E7E 7000                       		moveq	#0,d0
00001E80 4A41                       		tst.w	d1
00001E82 6A00                       		bpl.s	loc_1B52
00001E84 7002                       		moveq	#2,d0
00001E86                            
00001E86                            loc_1B52:
00001E86 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E8A D040                       		add.w	d0,d0
00001E8C 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E98                            
00001E98                            locret_1B64:
00001E98 4E75                       		rts	
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            
00001E9A                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EBA                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001EDA                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EFA                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F0C                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1E                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F86                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FAA                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FCA                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FDA                            
00001FDA                            		include	"_inc\SBZ Palette Scripts.asm"
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            ; Scrap Brain Zone palette cycling script
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            
00001FDA                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FDA                            	dc.b duration, colors
00001FDA                            	dc.w paladdress, ramaddress
00001FDA                            	endm
00001FDA                            
00001FDA                            ; duration in frames, number of colors, palette address, RAM address
00001FDA                            
00001FDA                            Pal_SBZCycList1:
00001FDA 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FDC 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FE2 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE8 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEE 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF4 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FFA 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00002000 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002006 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000200C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002012                            end_SBZCycList1:
00002012                            	even
00002012                            
00002012                            Pal_SBZCycList2:
00002012 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002014 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000201A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002020 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002026 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000202C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002032 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002038 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203E                            end_SBZCycList2:
0000203E                            	even
0000203E                            	even
0000203E                            
0000203E                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204E                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205E                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206E                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000207A                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000208A                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000209A                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020BA                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C4                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D4                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            ; Subroutine to	fade in from black
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            
000020E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E0                            
000020E0                            
000020E0                            PaletteFadeIn:
000020E0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E6                            
000020E6                            PalFadeIn_Alt:				; start position and size are already set
000020E6 7000                       		moveq	#0,d0
000020E8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000020F0 D0C0                       		adda.w	d0,a0
000020F2 7200                       		moveq	#cBlack,d1
000020F4 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F8                            
000020F8                            	@fill:
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FE                            
000020FE 383C 0015                  		move.w	#$15,d4
00002102                            
00002102                            	@mainloop:
00002102 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002108 6100 0000                  		bsr.w	WaitForVBla
0000210C 6100                       		bsr.s	FadeIn_FromBlack
0000210E 6100 F64A                  		bsr.w	RunPLC
00002112 51CC FFEE                  		dbf	d4,@mainloop
00002116 4E75                       		rts	
00002118                            ; End of function PaletteFadeIn
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            FadeIn_FromBlack:
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002122 1038 F626                  		move.b	(v_pfade_start).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212E                            
0000212E                            	@addcolour:
0000212E 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002130 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002134                            
00002134 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000213A 6600                       		bne.s	@exit		; if not, branch
0000213C                            
0000213C 7000                       		moveq	#0,d0
0000213E 41F8 FA80                  		lea	(v_pal_water).w,a0
00002142 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002146 1038 F626                  		move.b	(v_pfade_start).w,d0
0000214A D0C0                       		adda.w	d0,a0
0000214C D2C0                       		adda.w	d0,a1
0000214E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002152                            
00002152                            	@addcolour2:
00002152 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002154 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002158                            
00002158                            @exit:
00002158 4E75                       		rts	
0000215A                            ; End of function FadeIn_FromBlack
0000215A                            
0000215A                            
0000215A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000215A                            
0000215A                            
0000215A                            FadeIn_AddColour:
0000215A                            @addblue:
0000215A 3419                       		move.w	(a1)+,d2
0000215C 3610                       		move.w	(a0),d3
0000215E B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002160 6700                       		beq.s	@next		; if yes, branch
00002162 3203                       		move.w	d3,d1
00002164 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002168 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000216A 6200                       		bhi.s	@addgreen	; if yes, branch
0000216C 30C1                       		move.w	d1,(a0)+	; update palette
0000216E 4E75                       		rts	
00002170                            ; ===========================================================================
00002170                            
00002170                            @addgreen:
00002170 3203                       		move.w	d3,d1
00002172 0641 0020                  		addi.w	#$20,d1		; increase green value
00002176 B242                       		cmp.w	d2,d1
00002178 6200                       		bhi.s	@addred
0000217A 30C1                       		move.w	d1,(a0)+	; update palette
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @addred:
0000217E 5458                       		addq.w	#2,(a0)+	; increase red value
00002180 4E75                       		rts	
00002182                            ; ===========================================================================
00002182                            
00002182                            @next:
00002182 5448                       		addq.w	#2,a0		; next colour
00002184 4E75                       		rts	
00002186                            ; End of function FadeIn_AddColour
00002186                            
00002186                            
00002186                            ; ---------------------------------------------------------------------------
00002186                            ; Subroutine to fade out to black
00002186                            ; ---------------------------------------------------------------------------
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            PaletteFadeOut:
00002186 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000218C 383C 0015                  		move.w	#$15,d4
00002190                            
00002190                            	@mainloop:
00002190 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002196 6100 0000                  		bsr.w	WaitForVBla
0000219A 6100                       		bsr.s	FadeOut_ToBlack
0000219C 6100 F5BC                  		bsr.w	RunPLC
000021A0 51CC FFEE                  		dbf	d4,@mainloop
000021A4 4E75                       		rts	
000021A6                            ; End of function PaletteFadeOut
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeOut_ToBlack:
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021AC 1038 F626                  		move.b	(v_pfade_start).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B6                            
000021B6                            	@decolour:
000021B6 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B8 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	(v_pal_water).w,a0
000021C2 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000021CC                            
000021CC                            	@decolour2:
000021CC 6100                       		bsr.s	FadeOut_DecColour
000021CE 51C8 FFFC                  		dbf	d0,@decolour2
000021D2 4E75                       		rts	
000021D4                            ; End of function FadeOut_ToBlack
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            FadeOut_DecColour:
000021D4                            @dered:
000021D4 3410                       		move.w	(a0),d2
000021D6 6700                       		beq.s	@next
000021D8 3202                       		move.w	d2,d1
000021DA 0241 000E                  		andi.w	#$E,d1
000021DE 6700                       		beq.s	@degreen
000021E0 5558                       		subq.w	#2,(a0)+	; decrease red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            @degreen:
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 6700                       		beq.s	@deblue
000021EC 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021F0 4E75                       		rts	
000021F2                            ; ===========================================================================
000021F2                            
000021F2                            @deblue:
000021F2 3202                       		move.w	d2,d1
000021F4 0241 0E00                  		andi.w	#$E00,d1
000021F8 6700                       		beq.s	@next
000021FA 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FE 4E75                       		rts	
00002200                            ; ===========================================================================
00002200                            
00002200                            @next:
00002200 5448                       		addq.w	#2,a0
00002202 4E75                       		rts	
00002204                            ; End of function FadeOut_DecColour
00002204                            
00002204                            ; ---------------------------------------------------------------------------
00002204                            ; Subroutine to	fade in from white (Special Stage)
00002204                            ; ---------------------------------------------------------------------------
00002204                            
00002204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002204                            
00002204                            
00002204                            PaletteWhiteIn:
00002204 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000220A 7000                       		moveq	#0,d0
0000220C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002210 1038 F626                  		move.b	(v_pfade_start).w,d0
00002214 D0C0                       		adda.w	d0,a0
00002216 323C 0EEE                  		move.w	#cWhite,d1
0000221A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221E                            
0000221E                            	@fill:
0000221E 30C1                       		move.w	d1,(a0)+
00002220 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002224                            
00002224 383C 0015                  		move.w	#$15,d4
00002228                            
00002228                            	@mainloop:
00002228 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222E 6100 0000                  		bsr.w	WaitForVBla
00002232 6100                       		bsr.s	WhiteIn_FromWhite
00002234 6100 F524                  		bsr.w	RunPLC
00002238 51CC FFEE                  		dbf	d4,@mainloop
0000223C 4E75                       		rts	
0000223E                            ; End of function PaletteWhiteIn
0000223E                            
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            WhiteIn_FromWhite:
0000223E 7000                       		moveq	#0,d0
00002240 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002244 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002248 1038 F626                  		move.b	(v_pfade_start).w,d0
0000224C D0C0                       		adda.w	d0,a0
0000224E D2C0                       		adda.w	d0,a1
00002250 1038 F627                  		move.b	(v_pfade_size).w,d0
00002254                            
00002254                            	@decolour:
00002254 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002256 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000225A                            
0000225A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002260 6600                       		bne.s	@exit		; if not, branch
00002262 7000                       		moveq	#0,d0
00002264 41F8 FA80                  		lea	(v_pal_water).w,a0
00002268 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000226C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002270 D0C0                       		adda.w	d0,a0
00002272 D2C0                       		adda.w	d0,a1
00002274 1038 F627                  		move.b	(v_pfade_size).w,d0
00002278                            
00002278                            	@decolour2:
00002278 6100                       		bsr.s	WhiteIn_DecColour
0000227A 51C8 FFFC                  		dbf	d0,@decolour2
0000227E                            
0000227E                            	@exit:
0000227E 4E75                       		rts	
00002280                            ; End of function WhiteIn_FromWhite
00002280                            
00002280                            
00002280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002280                            
00002280                            
00002280                            WhiteIn_DecColour:
00002280                            @deblue:
00002280 3419                       		move.w	(a1)+,d2
00002282 3610                       		move.w	(a0),d3
00002284 B642                       		cmp.w	d2,d3
00002286 6700                       		beq.s	@next
00002288 3203                       		move.w	d3,d1
0000228A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228E 6500                       		blo.s	@degreen
00002290 B242                       		cmp.w	d2,d1
00002292 6500                       		blo.s	@degreen
00002294 30C1                       		move.w	d1,(a0)+
00002296 4E75                       		rts	
00002298                            ; ===========================================================================
00002298                            
00002298                            @degreen:
00002298 3203                       		move.w	d3,d1
0000229A 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229E 6500                       		blo.s	@dered
000022A0 B242                       		cmp.w	d2,d1
000022A2 6500                       		blo.s	@dered
000022A4 30C1                       		move.w	d1,(a0)+
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @dered:
000022A8 5558                       		subq.w	#2,(a0)+	; decrease red value
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            @next:
000022AC 5448                       		addq.w	#2,a0
000022AE 4E75                       		rts	
000022B0                            ; End of function WhiteIn_DecColour
000022B0                            
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            ; Subroutine to fade to white (Special Stage)
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PaletteWhiteOut:
000022B0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B6 383C 0015                  		move.w	#$15,d4
000022BA                            
000022BA                            	@mainloop:
000022BA 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022C0 6100 0000                  		bsr.w	WaitForVBla
000022C4 6100                       		bsr.s	WhiteOut_ToWhite
000022C6 6100 F492                  		bsr.w	RunPLC
000022CA 51CC FFEE                  		dbf	d4,@mainloop
000022CE 4E75                       		rts	
000022D0                            ; End of function PaletteWhiteOut
000022D0                            
000022D0                            
000022D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D0                            
000022D0                            
000022D0                            WhiteOut_ToWhite:
000022D0 7000                       		moveq	#0,d0
000022D2 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022DA D0C0                       		adda.w	d0,a0
000022DC 1038 F627                  		move.b	(v_pfade_size).w,d0
000022E0                            
000022E0                            	@addcolour:
000022E0 6100                       		bsr.s	WhiteOut_AddColour
000022E2 51C8 FFFC                  		dbf	d0,@addcolour
000022E6                            
000022E6 7000                       		moveq	#0,d0
000022E8 41F8 FA80                  		lea	(v_pal_water).w,a0
000022EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000022F0 D0C0                       		adda.w	d0,a0
000022F2 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F6                            
000022F6                            	@addcolour2:
000022F6 6100                       		bsr.s	WhiteOut_AddColour
000022F8 51C8 FFFC                  		dbf	d0,@addcolour2
000022FC 4E75                       		rts	
000022FE                            ; End of function WhiteOut_ToWhite
000022FE                            
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            WhiteOut_AddColour:
000022FE                            @addred:
000022FE 3410                       		move.w	(a0),d2
00002300 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002304 6700                       		beq.s	@next
00002306 3202                       		move.w	d2,d1
00002308 0241 000E                  		andi.w	#$E,d1
0000230C 0C41 000E                  		cmpi.w	#cRed,d1
00002310 6700                       		beq.s	@addgreen
00002312 5458                       		addq.w	#2,(a0)+	; increase red value
00002314 4E75                       		rts	
00002316                            ; ===========================================================================
00002316                            
00002316                            @addgreen:
00002316 3202                       		move.w	d2,d1
00002318 0241 00E0                  		andi.w	#$E0,d1
0000231C 0C41 00E0                  		cmpi.w	#cGreen,d1
00002320 6700                       		beq.s	@addblue
00002322 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002326 4E75                       		rts	
00002328                            ; ===========================================================================
00002328                            
00002328                            @addblue:
00002328 3202                       		move.w	d2,d1
0000232A 0241 0E00                  		andi.w	#$E00,d1
0000232E 0C41 0E00                  		cmpi.w	#cBlue,d1
00002332 6700                       		beq.s	@next
00002334 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002338 4E75                       		rts	
0000233A                            ; ===========================================================================
0000233A                            
0000233A                            @next:
0000233A 5448                       		addq.w	#2,a0
0000233C 4E75                       		rts	
0000233E                            ; End of function WhiteOut_AddColour
0000233E                            
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            ; Palette cycling routine - Sega logo
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            
0000233E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233E                            
0000233E                            
0000233E                            PalCycle_Sega:
0000233E 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002342 6600                       		bne.s	loc_206A
00002344 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002348 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234E 7205                       		moveq	#5,d1
00002350 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002354                            
00002354                            loc_2020:
00002354 6A00                       		bpl.s	loc_202A
00002356 5448                       		addq.w	#2,a0
00002358 5341                       		subq.w	#1,d1
0000235A 5440                       		addq.w	#2,d0
0000235C 60F6                       		bra.s	loc_2020
0000235E                            ; ===========================================================================
0000235E                            
0000235E                            loc_202A:
0000235E 3400                       		move.w	d0,d2
00002360 0242 001E                  		andi.w	#$1E,d2
00002364 6600                       		bne.s	loc_2034
00002366 5440                       		addq.w	#2,d0
00002368                            
00002368                            loc_2034:
00002368 0C40 0060                  		cmpi.w	#$60,d0
0000236C 6400                       		bhs.s	loc_203E
0000236E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002372                            
00002372                            loc_203E:
00002372 5440                       		addq.w	#2,d0
00002374 51C9 FFE8                  		dbf	d1,loc_202A
00002378                            
00002378 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000237C 5440                       		addq.w	#2,d0
0000237E 3400                       		move.w	d0,d2
00002380 0242 001E                  		andi.w	#$1E,d2
00002384 6600                       		bne.s	loc_2054
00002386 5440                       		addq.w	#2,d0
00002388                            
00002388                            loc_2054:
00002388 0C40 0064                  		cmpi.w	#$64,d0
0000238C 6D00                       		blt.s	loc_2062
0000238E 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002394 70F4                       		moveq	#-$C,d0
00002396                            
00002396                            loc_2062:
00002396 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000239A 7001                       		moveq	#1,d0
0000239C 4E75                       		rts	
0000239E                            ; ===========================================================================
0000239E                            
0000239E                            loc_206A:
0000239E 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023A2 6A00                       		bpl.s	loc_20BC
000023A4 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023AA 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AE 0640 000C                  		addi.w	#$C,d0
000023B2 0C40 0030                  		cmpi.w	#$30,d0
000023B6 6500                       		blo.s	loc_2088
000023B8 7000                       		moveq	#0,d0
000023BA 4E75                       		rts	
000023BC                            ; ===========================================================================
000023BC                            
000023BC                            loc_2088:
000023BC 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023C0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C6 41F0 0000                  		lea	(a0,d0.w),a0
000023CA 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 22D8                       		move.l	(a0)+,(a1)+
000023D2 3298                       		move.w	(a0)+,(a1)
000023D4 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D8 7000                       		moveq	#0,d0
000023DA 722C                       		moveq	#$2C,d1
000023DC                            
000023DC                            loc_20A8:
000023DC 3400                       		move.w	d0,d2
000023DE 0242 001E                  		andi.w	#$1E,d2
000023E2 6600                       		bne.s	loc_20B2
000023E4 5440                       		addq.w	#2,d0
000023E6                            
000023E6                            loc_20B2:
000023E6 3390 0000                  		move.w	(a0),(a1,d0.w)
000023EA 5440                       		addq.w	#2,d0
000023EC 51C9 FFEE                  		dbf	d1,loc_20A8
000023F0                            
000023F0                            loc_20BC:
000023F0 7001                       		moveq	#1,d0
000023F2 4E75                       		rts	
000023F4                            ; End of function PalCycle_Sega
000023F4                            
000023F4                            ; ===========================================================================
000023F4                            
000023F4                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002400                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load palettes
00002430                            
00002430                            ; input:
00002430                            ;	d0 = index number for palette
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load pallets
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            PalLoad1:
00002430 1238 FE11                  		move.b ($FFFFFE11),d1
00002434 43F9 0000 0000             		lea (PalPointers).l,a1
0000243A 0C01 0000                  		cmp.b #0,d1
0000243E 6700 0000                  		beq.w PalLoad1_Continue
00002442 43F9 0000 0000             		lea (PalPointers2).l,a1
00002448 0C01 0001                  		cmp.b #1,d1
0000244C 6700 0000                  		beq.w PalLoad1_Continue
00002450 43F9 0000 0000             		lea (PalPointers3).l,a1
00002456                            
00002456                            PalLoad1_Continue:
00002456 E748                       		lsl.w #3,d0
00002458 D2C0                       		adda.w d0,a1
0000245A 2459                       		movea.l (a1)+,a2
0000245C 3659                       		movea.w (a1)+,a3
0000245E D6FC 0080                  		adda.w #$80,a3
00002462 3E19                       		move.w (a1)+,d7
00002464                            
00002464                            loc_2110:
00002464 26DA                       		move.l (a2)+,(a3)+
00002466 51CF FFFC                  		dbf d7,loc_2110
0000246A 4E75                       		rts
0000246C                             ; End of function PalLoad1
0000246C                            
0000246C                            
0000246C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246C                            
0000246C                            PalLoad2:
0000246C 1238 FE11                  		move.b ($FFFFFE11),d1
00002470 43F9 0000 0000             		lea (PalPointers).l,a1
00002476 0C01 0000                  		cmp.b #0,d1
0000247A 6700 0000                  		beq.w PalLoad2_Continue
0000247E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002484 0C01 0001                  		cmp.b #1,d1
00002488 6700 0000                  		beq.w PalLoad2_Continue
0000248C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002492                            
00002492                            
00002492                            PalLoad2_Continue:
00002492 E748                       		lsl.w #3,d0
00002494 D2C0                       		adda.w d0,a1
00002496 2459                       		movea.l (a1)+,a2
00002498 3659                       		movea.w (a1)+,a3
0000249A 3E19                       		move.w (a1)+,d7
0000249C                            
0000249C                            loc_2128:
0000249C 26DA                       		move.l (a2)+,(a3)+
0000249E 51CF FFFC                  		dbf d7,loc_2128
000024A2 4E75                       		rts
000024A4                            ; End of function PalLoad2
000024A4                            
000024A4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            PalLoad_Loop: ;Quick load - TIS
000024A4                                    
000024A4 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A6 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024AA 4E75                               rts
000024AC                            
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            ; Underwater pallet loading subroutine
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            
000024AC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024AC                            
000024AC                            PalLoad3_Water:
000024AC 1238 FE11                  		move.b ($FFFFFE11),d1
000024B0 43F9 0000 0000             		lea (PalPointers).l,a1
000024B6 0C01 0000                  		cmp.b #0,d1
000024BA 6700 0000                  		beq.w PalLoad3_Continue
000024BE 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C4 0C01 0001                  		cmp.b #1,d1
000024C8 6700 0000                  		beq.w PalLoad3_Continue
000024CC 43F9 0000 0000             		lea (PalPointers3).l,a1
000024D2                            
000024D2                            PalLoad3_Continue:
000024D2 E748                       		lsl.w #3,d0
000024D4 D2C0                       		adda.w d0,a1
000024D6 2459                       		movea.l (a1)+,a2
000024D8 3659                       		movea.w (a1)+,a3
000024DA 96FC 0080                  		suba.w #$80,a3
000024DE 3E19                       		move.w (a1)+,d7
000024E0                            
000024E0                            loc_2144:
000024E0 26DA                       		move.l (a2)+,(a3)+
000024E2 51CF FFFC                  		dbf d7,loc_2144
000024E6 4E75                       		rts
000024E8                            ; End of function PalLoad3_Water
000024E8                            
000024E8                            
000024E8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E8                            
000024E8                            
000024E8                            PalLoad4_Water:
000024E8 1238 FE11                  		move.b ($FFFFFE11),d1
000024EC 43F9 0000 0000             		lea (PalPointers).l,a1
000024F2 0C01 0000                  		cmp.b #0,d1
000024F6 6700 0000                  		beq.w PalLoad4_Continue
000024FA 43F9 0000 0000             		lea (PalPointers2).l,a1
00002500 0C01 0001                  		cmp.b #1,d1
00002504 6700 0000                  		beq.w PalLoad4_Continue
00002508 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250E                            
0000250E                            PalLoad4_Continue:
0000250E E748                       		lsl.w #3,d0
00002510 D2C0                       		adda.w d0,a1
00002512 2459                       		movea.l (a1)+,a2
00002514 3659                       		movea.w (a1)+,a3
00002516 96FC 0100                  		suba.w #$100,a3
0000251A 3E19                       		move.w (a1)+,d7
0000251C                            loc_2160:
0000251C 26DA                       		move.l (a2)+,(a3)+
0000251E 51CF FFFC                  		dbf d7,loc_2160
00002522 4E75                       		rts
00002524                             ; End of function PalLoad4_Water
00002524                            
00002524                            ; ===========================================================================
00002524                            
00002524                            		include	"_inc\Palette Pointers.asm"
00002524                            ; ---------------------------------------------------------------------------
00002524                            ; Palette pointers
00002524                            ; ---------------------------------------------------------------------------
00002524                            
00002524                            palp:	macro paladdress,ramaddress,colors
00002524                            	dc.l paladdress
00002524                            	dc.w ramaddress, (colors>>1)-1
00002524                            	endm
00002524                            
00002524                            PalPointers:
00002524                            
00002524                            ; palette address, RAM address, colors
00002524                            
00002524 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000252C 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002534 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000253C 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002544                            Pal_Levels:
00002544 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
0000254C 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002554 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
0000255C 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002564 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
0000256C 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002574 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000257C 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002584 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000258C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002594 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000259C 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025AC 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B4 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025BC 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C4 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025CC 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D4 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025DC 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E4 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025EC 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F4 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025FC 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002604 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
0000260C 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002614 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
0000261C 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002624 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
0000262C 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002634 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
0000263C 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002644 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
0000264C 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002654 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
0000265C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002664 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
0000266C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002674 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
0000267C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002684 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
0000268C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002694 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
0000269C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A4                            			even
000026A4                            
000026A4                            PalPointers2:
000026A4                            
000026A4                            ; palette address, RAM address, colors
000026A4                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A4 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026AC 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B4 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026BC 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C4                            Pal_Levels_2:
000026C4 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026CC 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D4 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026DC 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E4 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026EC 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F4 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026FC 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002704 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000270C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002714 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000271C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002724 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
0000272C 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002734 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
0000273C 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002744 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
0000274C 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002754 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
0000275C 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002764 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
0000276C 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002774 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
0000277C 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002784 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000278C 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002794 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000279C 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A4 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027AC 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B4 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027BC 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C4 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027CC 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D4 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002804 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000280C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002814 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000281C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002824                            			even
00002824                            			
00002824                            PalPointers3:
00002824                            			
00002824                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002824 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000282C 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002834 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000283C 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002844                            Pal_Levels_3:
00002844 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
0000284C 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002854 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
0000285C 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002864 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
0000286C 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002874 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000287C 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002884 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000288C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002894 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000289C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028AC 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B4 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028BC 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C4 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028CC 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D4 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028DC 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E4 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028EC 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F4 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028FC 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002904 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000290C 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002914 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000291C 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002924 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
0000292C 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002934 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
0000293C 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002944 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
0000294C 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002954 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
0000295C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002964 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
0000296C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002974 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
0000297C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002984 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000298C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002994 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000299C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A4                            			even
000029A4                            
000029A4                            
000029A4 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A4 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A4 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A4 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A4 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A4 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A4 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A4 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A4 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A4 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A4 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A4 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A4 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A4 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A4 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A4 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A4 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A4 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A4 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A4 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A4 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A4 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A4 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A4 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A4 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A4 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A4 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A4 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A4 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A4 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A4 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A4 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A4 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A4 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A4 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A4 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A4 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A4 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A4 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A4 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A4 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A4 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A4 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A4 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A4 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers2.asm"
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers3.asm"
000029A4                            		
000029A4                            
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            ; Palette data
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A24                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA4                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B24                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B44                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA4                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C04                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C64                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC4                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D24                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D84                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E04                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E84                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F04                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F64                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC4                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003024                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003084                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E4                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003144                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A4                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003204                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003264                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C4                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003324                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A4                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003404                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003484                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A4                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C4                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E4                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003564                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A4                            Pal_Ending:	incbin	"palette\Ending.bin"
00003624                            Pal_Options:	incbin	"palette\Options.bin"
000036A4                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C4                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E4                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003704                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003724                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003744                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003764                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003784                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A4                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C4                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E4                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003804                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003824                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003844                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003864                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003884                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A4                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C4                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E4                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003904                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003924                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003944                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003964                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003984                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A4                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C4                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E4                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            ; Subroutine to	wait for VBlank routines to complete
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            
00003A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A04                            
00003A04                            
00003A04                            WaitForVBla:
00003A04 46FC 2300                  		enable_ints
00003A08                            
00003A08                            	@wait:
00003A08 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A0C 66FA                       		bne.s	@wait		; if not, branch
00003A0E 4E75                       		rts	
00003A10                            ; End of function WaitForVBla
00003A10                            
00003A10                            		include	"_incObj\sub RandomNumber.asm"
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            ; Subroutine to	generate a pseudo-random number	in d0
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            RandomNumber:
00003A10 2238 F636                  		move.l	(v_random).w,d1
00003A14 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A16 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A1C                            
00003A1C                            	@scramble:
00003A1C 2001                       		move.l	d1,d0
00003A1E E581                       		asl.l	#2,d1
00003A20 D280                       		add.l	d0,d1
00003A22 E781                       		asl.l	#3,d1
00003A24 D280                       		add.l	d0,d1
00003A26 3001                       		move.w	d1,d0
00003A28 4841                       		swap	d1
00003A2A D041                       		add.w	d1,d0
00003A2C 3200                       		move.w	d0,d1
00003A2E 4841                       		swap	d1
00003A30 21C1 F636                  		move.l	d1,(v_random).w
00003A34 4E75                       		rts	
00003A34 4E75                       		rts	
00003A36                            		include	"_incObj\sub CalcSine.asm"
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            ; Subroutine calculate a sine
00003A36                            
00003A36                            ; input:
00003A36                            ;	d0 = angle
00003A36                            
00003A36                            ; output:
00003A36                            ;	d0 = sine
00003A36                            ;	d1 = cosine
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            
00003A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A36                            
00003A36                            
00003A36                            CalcSine:
00003A36 0240 00FF                          andi.w  #$FF,d0
00003A3A 5040                               addq.w  #8,d0
00003A3C D040                               add.w   d0,d0
00003A3E 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A42 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A46 4E75                               rts
00003A48                            ; End of function CalcSine
00003A48                            
00003A48                            ; ===========================================================================
00003A48                            
00003A48                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC8                            
00003CC8                            ; ===========================================================================
00003CC8                            ; ===========================================================================
00003CC8                            		include	"_incObj\sub CalcAngle.asm"
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            ; Subroutine calculate an angle
00003CC8                            
00003CC8                            ; input:
00003CC8                            ;	d1 = x-axis distance
00003CC8                            ;	d2 = y-axis distance
00003CC8                            
00003CC8                            ; output:
00003CC8                            ;	d0 = angle
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            
00003CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC8                            
00003CC8                            
00003CC8                            CalcAngle:
00003CC8 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CCC 7600                       		moveq	#0,d3
00003CCE 7800                       		moveq	#0,d4
00003CD0 3601                       		move.w	d1,d3
00003CD2 3802                       		move.w	d2,d4
00003CD4 8843                       		or.w	d3,d4
00003CD6 6700                       		beq.s	loc_2D04
00003CD8 3802                       		move.w	d2,d4
00003CDA 4A43                       		tst.w	d3
00003CDC 6A00 0000                  		bpl.w	loc_2CC2
00003CE0 4443                       		neg.w	d3
00003CE2                            
00003CE2                            loc_2CC2:
00003CE2 4A44                       		tst.w	d4
00003CE4 6A00 0000                  		bpl.w	loc_2CCA
00003CE8 4444                       		neg.w	d4
00003CEA                            
00003CEA                            loc_2CCA:
00003CEA B843                       		cmp.w	d3,d4
00003CEC 6400 0000                  		bcc.w	loc_2CDC
00003CF0 E18C                       		lsl.l	#8,d4
00003CF2 88C3                       		divu.w	d3,d4
00003CF4 7000                       		moveq	#0,d0
00003CF6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CFA 6000                       		bra.s	loc_2CE6
00003CFC                            ; ===========================================================================
00003CFC                            
00003CFC                            loc_2CDC:
00003CFC E18B                       		lsl.l	#8,d3
00003CFE 86C4                       		divu.w	d4,d3
00003D00 7040                       		moveq	#$40,d0
00003D02 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D06                            
00003D06                            loc_2CE6:
00003D06 4A41                       		tst.w	d1
00003D08 6A00 0000                  		bpl.w	loc_2CF2
00003D0C 4440                       		neg.w	d0
00003D0E 0640 0080                  		addi.w	#$80,d0
00003D12                            
00003D12                            loc_2CF2:
00003D12 4A42                       		tst.w	d2
00003D14 6A00 0000                  		bpl.w	loc_2CFE
00003D18 4440                       		neg.w	d0
00003D1A 0640 0100                  		addi.w	#$100,d0
00003D1E                            
00003D1E                            loc_2CFE:
00003D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D22 4E75                       		rts	
00003D24                            ; ===========================================================================
00003D24                            
00003D24                            loc_2D04:
00003D24 303C 0040                  		move.w	#$40,d0
00003D28 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D2C 4E75                       		rts	
00003D2E                            ; End of function CalcAngle
00003D2E                            
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            Angle_Data:	incbin	"misc\angles.bin"
00003E30                            
00003E30                            ; ===========================================================================
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            ; Sega screen
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            
00003E30                            GM_Sega:
00003E38 6100 D912                  		bsr.w	ClearPLC
00003E3C 6100 E348                  		bsr.w	PaletteFadeOut
00003E40 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E46 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E4A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E52 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E56 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E5A 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5E 46FC 2700                  		disable_ints
00003E62 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E66 0200 00BF                  		andi.b	#$BF,d0
00003E6A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E70 6100 D312                  		bsr.w	ClearScreen
00003E7E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E84 6100 D47C                  		bsr.w	NemDec
00003E88 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E94 303C 0000                  		move.w	#0,d0
00003E98 6100 D9F2                  		bsr.w	EniDec
00003E9C                            
00003E9C 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EB0 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC4                            
00003EC4 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC8 6B00                       			bmi.s   @loadpal
00003ECA 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDE                            
00003EDE                            	@loadpal:
00003EDE 7000                       		moveq	#palid_SegaBG,d0
00003EE0 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE4 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EEA 7E3F                               moveq    #$3F,d7
00003EEC                             
00003EEC                                .loop:
00003EEC 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EF0 51CF FFFA                          dbf        d7,.loop
00003EF4 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF8 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFE 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F04 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F0A 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F10 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F14 0000 0040                  		ori.b	#$40,d0
00003F18 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1E                            
00003F1E                            Sega_WaitPal:
00003F1E 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F24 6100 FADE                  		bsr.w	WaitForVBla
00003F28 6100 E414                  		bsr.w	PalCycle_Sega
00003F2C 66F0                       		bne.s	Sega_WaitPal
00003F2E                            
00003F36 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F3C 6100 FAC6                  		bsr.w	WaitForVBla
00003F40 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F46                            
00003F46                            Sega_WaitEnd:
00003F46 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F4C 6100 FAB6                  		bsr.w	WaitForVBla
00003F50 4A78 F614                  		tst.w	(v_demolength).w
00003F54 6700                       		beq.s	Sega_GotoTitle
00003F56 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F5C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5E                            
00003F5E                            Sega_GotoTitle:
00003F5E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F64 4E75                       		rts	
00003F66                            ; ===========================================================================
00003F66                            
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            ; Title	screen
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            
00003F66                            GM_Title:
00003F6E 6100 D7DC                  		bsr.w	ClearPLC
00003F72 6100 E212                  		bsr.w	PaletteFadeOut
00003F76 46FC 2700                  		disable_ints
00003F7A 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F84 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F88 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F8C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F90 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F94 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F98 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F9C 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003FA0 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA4 6100 D1DE                  		bsr.w	ClearScreen
00003FA8 4EB9 0000 0000             		jsr		SHC2022 
00003FAE                            
00003FAE 43F8 D000                  		lea	(v_objspace).w,a1
00003FB2 7000                       		moveq	#0,d0
00003FB4 323C 07FF                  		move.w	#$7FF,d1
00003FB8                            
00003FB8                            	Tit_ClrObj1:
00003FB8 22C0                       		move.l	d0,(a1)+
00003FBA 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBE                            
00003FC8 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCE 6100 D332                  		bsr.w	NemDec
00003FDC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FE2 6100 D31E                  		bsr.w	NemDec
00003FE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FEC 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FF2 303C 0000                  		move.w	#0,d0
00003FF6 6100 D894                  		bsr.w	EniDec
00003FFA                            
00003FFA 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400E                            
0000400E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004012 7000                       		moveq	#cBlack,d0
00004014 323C 001F                  		move.w	#$1F,d1
00004018                            
00004018                            	Tit_ClrPal:
00004018 22C0                       		move.l	d0,(a1)+
0000401A 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401E                            
0000401E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004024 6100 E40A                  		bsr.w	PalLoad1
00004028 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004034 4EB9 0000 0000             		jsr	(BuildSprites).l
0000403A 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403E 46FC 2700                  		disable_ints
0000404C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004052 6100 D2AE                  		bsr.w	NemDec
00004060 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004066 6100 D29A                  		bsr.w	NemDec
00004074 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000407A 6100 D286                  		bsr.w 	NemDec
0000407E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000408C 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
00004092 323C 028F                  		move.w	#$28F,d1
00004096                            
00004096                            	Tit_LoadText:
00004096 3C9D                       		move.w	(a5)+,(a6)
00004098 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000409C                            
0000409C 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000040A2 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040A8 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040AE 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000040B4 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040BA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040C0 6100 0000                  		bsr.w	LevelSizeLoad
000040C4 6100 0000                  		bsr.w	DeformLayers
000040C8 43F8 B000                  		lea	(v_16x16).w,a1
000040CC 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040D2 303C 0000                  		move.w	#0,d0
000040D6 6100 D7B4                  		bsr.w	EniDec
000040DA 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040E0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040E6 6100 D922                  		bsr.w	KosDec
000040EA 6100 0000                  		bsr.w	LevelLayoutLoad
000040EE 6100 E096                  		bsr.w	PaletteFadeOut
000040F2 46FC 2700                  		disable_ints
000040F6 6100 D08C                  		bsr.w	ClearScreen
000040FA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004100 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004106 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000410A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000410E 343C 6000                  		move.w	#$6000,d2
00004112 6100 0000                  		bsr.w	DrawChunks
00004116 43F9 00FF 0000             		lea	($FF0000).l,a1
0000411C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004122 303C 0000                  		move.w	#0,d0
00004126 6100 D764                  		bsr.w	EniDec
0000412A                            
0000412A 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000413E                            
00004148 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000414E 6100 D1B2                  		bsr.w	NemDec
00004152 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004154 6100 E2DA                  		bsr.w	PalLoad1
00004160 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004166 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000416C 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004170 7000                       		moveq	#0,d0
00004172 323C 0007                  		move.w	#7,d1
00004176                            
00004176                            	Tit_ClrObj2:
00004176 22C0                       		move.l	d0,(a1)+
00004178 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000417C                            
0000417C 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004182 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004188 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000418C                            
0000418C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004190 6A00                       			bpl.s   @isjap		; if yes, branch
00004192                            
00004192 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004198 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000419E                            	@isjap:
0000419E 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041A4 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041AA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041B0 6100 0000                  		bsr.w	DeformLayers
000041B4 4EB9 0000 0000             		jsr	(BuildSprites).l
000041BA 7000                       		moveq	#plcid_Main,d0
000041BC 6100 D562                  		bsr.w	NewPLC
000041C0 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041C6 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041CC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041D0 0000 0040                  		ori.b	#$40,d0
000041D4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041DA 6100 DF04                  		bsr.w	PaletteFadeIn
000041DE                            
000041DE                            Tit_MainLoop:
000041DE 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041E4 6100 F81E                  		bsr.w	WaitForVBla
000041E8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041EE 6100 0000                  		bsr.w	DeformLayers
000041F2 4EB9 0000 0000             		jsr	(BuildSprites).l
000041F8 6100 DAF8                  		bsr.w	PCycle_Title
000041FC 6100 D55C                  		bsr.w	RunPLC
00004200 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004204 5440                       		addq.w	#2,d0
00004206 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000420A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000420E 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004210                            
00004210 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            Tit_ChkRegion:
00004218 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000421C 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000421E                            
0000421E 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004224 6000                       		bra.s	Tit_EnterCheat
00004226                            
00004226                            	Tit_RegionJap:
00004226 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000422C                            
0000422C                            Tit_EnterCheat:
0000422C 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004230 D0C0                       		adda.w	d0,a0
00004232 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004236 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000423A B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000423C 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000423E 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004242 4A00                       		tst.b	d0
00004244 6600                       		bne.s	Tit_CountC
00004246 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000424A 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000424E E249                       		lsr.w	#1,d1
00004250 0241 0003                  		andi.w	#3,d1
00004254 6700                       		beq.s	Tit_PlayRing
00004256 4A38 FFF8                  		tst.b	(v_megadrive).w
0000425A 6A00                       		bpl.s	Tit_PlayRing
0000425C 7201                       		moveq	#1,d1
0000425E 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004262                            
00004262                            	Tit_PlayRing:
00004262 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004270 6000                       		bra.s	Tit_CountC
00004272                            ; ===========================================================================
00004272                            
00004272                            Tit_ResetCheat:
00004272 4A00                       		tst.b	d0
00004274 6700                       		beq.s	Tit_CountC
00004276 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000427C 6700                       		beq.s	Tit_CountC
0000427E 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004284                            
00004284                            Tit_CountC:
00004284 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004288 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000428C                            
0000428C                            loc_3230:
0000428C 4A78 F614                  		tst.w	(v_demolength).w
00004290 6700 0000                  		beq.w	GotoDemo
00004294 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000429A 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
0000429E                            
0000429E                            Tit_ChkLevSel:
0000429E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000042A2 6700 0000                  		beq.w	@cont	; if not, play level
000042A6 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042AC 6700 0000                  		beq.w	@cont	; if not, play level
000042B0 6000 0000                  		bra.w	Tit_LevelSelect
000042B4                            
000042B4                            	@cont:		
000042B4 7400                       		moveq   #0,d2
000042B6 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
000042BA D442                       		add.w   d2,d2            ; multiply by 2
000042BC 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
000042C0 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000042C4                            
000042C4                            ; ===========================================================================
000042C4                            Tit_Menu_Choice:
000042C4 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000042C6 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            Menu_Options:
000042C8 4EF9 0000 0000             	jmp	MenuScreen ; => OptionsMenu
000042CE 4E75                       	rts
000042D0                            
000042D0                            Tit_LevelSelect:	
000042D0 7002                       		moveq	#palid_LevelSel,d0
000042D2 6100 E198                  		bsr.w	PalLoad2	; load level select palette
000042D6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042DA 7000                       		moveq	#0,d0
000042DC 323C 00DF                  		move.w	#$DF,d1
000042E0                            
000042E0                            	Tit_ClrScroll1:
000042E0 22C0                       		move.l	d0,(a1)+
000042E2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042E6                            
000042E6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042EA 46FC 2700                  		disable_ints
000042EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FE 323C 03FF                  		move.w	#$3FF,d1
00004302                            
00004302                            	Tit_ClrScroll2:
00004302 2C80                       		move.l	d0,(a6)
00004304 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004308                            
00004308 6100 0000                  		bsr.w	LevSelTextLoad
0000430C                            
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            ; Level	Select
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            
0000430C                            LevelSelect:
0000430C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004312 6100 F6F0                  		bsr.w	WaitForVBla
00004316 6100 0000                  		bsr.w	LevSelControls
0000431A 6100 D43E                  		bsr.w	RunPLC
0000431E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004322 66E8                       		bne.s	LevelSelect
00004324 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000432A 67E0                       		beq.s	LevelSelect	; if not, branch
0000432C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004330 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004334 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004336 3038 FF84                  		move.w	(v_levselsound).w,d0
0000433A 0640 0080                  		addi.w	#$80,d0
0000433E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004342 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004344 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004348 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000434A                            
0000434A                            LevSel_PlaySnd:
0000434A 6100 CF08                  		bsr.w	PlaySound_Special
0000434E 60BC                       		bra.s	LevelSelect
00004350                            ; ===========================================================================
00004350                            
00004350                            LevSel_Ending:
00004350 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004356 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000435C 4E75                       		rts	
0000435E                            ; ===========================================================================
0000435E                            
0000435E                            LevSel_Credits:
0000435E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000436C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004372 4E75                       		rts	
00004374                            ; ===========================================================================
00004374                            
00004374                            LevSel_Level_SS:
00004374 D040                       		add.w	d0,d0
00004376 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000437A 6B00 FF90                  		bmi.w	LevelSelect
0000437E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004382 6600                       		bne.s	LevSel_Level	; if not, branch
00004384 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000438A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000438E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004394 7000                       		moveq	#0,d0
00004396 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000439A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043A2 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043AA 4E75                       		rts	
000043AC                            ; ===========================================================================
000043AC                            
000043AC                            LevSel_Level:
000043AC 0240 3FFF                  		andi.w	#$3FFF,d0
000043B0 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000043B4                            
000043B4                            PlayLevel:
000043B4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000043BA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043C0 7000                       		moveq	#0,d0
000043C2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043C6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043CA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043CE 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043D2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043D6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043DA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043DE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043E4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043F4 4E75                       		rts	
000043F6                            ; ===========================================================================
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            ; Level	select - level pointers
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            		; correct level order
000043F6 0000                       		dc.b id_GHZ, 0
000043F8 0001                       		dc.b id_GHZ, 1
000043FA 0002                       		dc.b id_GHZ, 2
000043FC 0200                       		dc.b id_MZ, 0
000043FE 0201                       		dc.b id_MZ, 1
00004400 0202                       		dc.b id_MZ, 2
00004402 0400                       		dc.b id_SYZ, 0
00004404 0401                       		dc.b id_SYZ, 1
00004406 0402                       		dc.b id_SYZ, 2
00004408 0100                       		dc.b id_LZ, 0
0000440A 0101                       		dc.b id_LZ, 1
0000440C 0102                       		dc.b id_LZ, 2
0000440E 0300                       		dc.b id_SLZ, 0
00004410 0301                       		dc.b id_SLZ, 1
00004412 0302                       		dc.b id_SLZ, 2
00004414 0500                       		dc.b id_SBZ, 0
00004416 0501                       		dc.b id_SBZ, 1
00004418 0103                       		dc.b id_LZ, 3
0000441A 0502                       		dc.b id_SBZ, 2
0000441C 0700                       		dc.b id_SS, 0		; Special Stage
0000441E 8000                       		dc.w $8000		; Sound Test
00004420                            		even
00004420                            ; ---------------------------------------------------------------------------
00004420                            ; Level	select codes
00004420                            ; ---------------------------------------------------------------------------
00004420 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004428                            		even
00004428                            
00004428 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000442E                            		even
0000442E                            ; ===========================================================================
0000442E                            
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            ; Demo mode
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            
0000442E                            GotoDemo:
0000442E 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004434                            
00004434                            loc_33B6:
00004434 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000443A 6100 F5C8                  		bsr.w	WaitForVBla
0000443E 6100 0000                  		bsr.w	DeformLayers
00004442 6100 D88E                  		bsr.w	PaletteCycle
00004446 6100 D312                  		bsr.w	RunPLC
0000444A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000444E 5440                       		addq.w	#2,d0
00004450 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004454 0C40 1C00                  		cmpi.w	#$1C00,d0
00004458 6500                       		blo.s	loc_33E4
0000445A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004460 4E75                       		rts	
00004462                            ; ===========================================================================
00004462                            
00004462                            loc_33E4:
00004462 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004468 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000446C 4A78 F614                  		tst.w	(v_demolength).w
00004470 6600 FFC2                  		bne.w	loc_33B6
0000447C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004480 0240 0007                  		andi.w	#7,d0
00004484 D040                       		add.w	d0,d0
00004486 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000448A 31C0 FE10                  		move.w	d0,(v_zone).w
0000448E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004492 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004498 6500                       		blo.s	loc_3422	; if yes, branch
0000449A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000044A0                            
000044A0                            loc_3422:
000044A0 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000044A6 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000044AC 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000044B0 6600                       		bne.s	Demo_Level	; if not, branch
000044B2 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000044B8 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000044BC 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000044C0                            
000044C0                            Demo_Level:
000044C0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044C6 7000                       		moveq	#0,d0
000044C8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044CC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044D0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044DC 4E75                       		rts	
000044DE                            ; ===========================================================================
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            ; Levels used in demos
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044E6                            		even
000044E6                            
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            ; Subroutine to	change what you're selecting in the level select
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            
000044E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E6                            
000044E6                            
000044E6                            LevSelControls:
000044E6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044EA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044EE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044F0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044F4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044F6                            
000044F6                            LevSel_UpDown:
000044F6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044FC 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004500 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004504 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004506 3038 FF82                  		move.w	(v_levselitem).w,d0
0000450A 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
0000450E 6700                       		beq.s	LevSel_Down	; if not, branch
00004510 5340                       		subq.w	#1,d0		; move up 1 selection
00004512 6400                       		bhs.s	LevSel_Down
00004514 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004516                            
00004516                            LevSel_Down:
00004516 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000451A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000451C 5240                       		addq.w	#1,d0		; move down 1 selection
0000451E 0C40 0015                  		cmpi.w	#$15,d0
00004522 6500                       		blo.s	LevSel_Refresh
00004524 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004526                            
00004526                            LevSel_Refresh:
00004526 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000452A 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000452E 4E75                       		rts	
00004530                            ; ===========================================================================
00004530                            
00004530                            LevSel_SndTest:
00004530 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004536 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004538 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000453C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004540 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004542 3038 FF84                  		move.w	(v_levselsound).w,d0
00004546 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000454A 6700                       		beq.s	LevSel_Right	; if not, branch
0000454C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000454E 6400                       		bhs.s	LevSel_Right
00004550 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
00004552                            
00004552                            LevSel_Right:
00004552 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004556 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004558 5240                       		addq.w	#1,d0		; add 1	to sound test
0000455A 0C40 0050                  		cmpi.w	#$50,d0
0000455E 6500                       		blo.s	LevSel_Refresh2
00004560 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004562                            
00004562                            LevSel_Refresh2:
00004562 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004566 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000456A                            
0000456A                            LevSel_NoMove:
0000456A 4E75                       		rts	
0000456C                            ; End of function LevSelControls
0000456C                            
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            ; Subroutine to load level select text
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            
0000456C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000456C                            
0000456C                            
0000456C                            LevSelTextLoad:
0000456C                            
0000456C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000456C                            					; $E210 is a VRAM address
0000456C                            
0000456C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004572 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004578 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000457E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004582 7214                       		moveq	#$14,d1		; number of lines of text
00004584                            
00004584                            	LevSel_DrawAll:
00004584 2D44 0004                  		move.l	d4,4(a6)
00004588 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000458C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004592 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004596                            
00004596 7000                       		moveq	#0,d0
00004598 3038 FF82                  		move.w	(v_levselitem).w,d0
0000459C 3200                       		move.w	d0,d1
0000459E 283C 6210 0003             		move.l	#textpos,d4
000045A4 EF48                       		lsl.w	#7,d0
000045A6 4840                       		swap	d0
000045A8 D880                       		add.l	d0,d4
000045AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045B0 E749                       		lsl.w	#3,d1
000045B2 3001                       		move.w	d1,d0
000045B4 D241                       		add.w	d1,d1
000045B6 D240                       		add.w	d0,d1
000045B8 D2C1                       		adda.w	d1,a1
000045BA 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000045BE 2D44 0004                  		move.l	d4,4(a6)
000045C2 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000045C6 363C E680                  		move.w	#$E680,d3
000045CA 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045D0 6600                       		bne.s	LevSel_DrawSnd
000045D2 363C C680                  		move.w	#$C680,d3
000045D6                            
000045D6                            LevSel_DrawSnd:
000045E0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045E4 0640 0080                  		addi.w	#$80,d0
000045E8 1400                       		move.b	d0,d2
000045EA E808                       		lsr.b	#4,d0
000045EC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045F0 1002                       		move.b	d2,d0
000045F2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045F6 4E75                       		rts	
000045F8                            ; End of function LevSelTextLoad
000045F8                            
000045F8                            
000045F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F8                            
000045F8                            
000045F8                            LevSel_ChgSnd:
000045F8 0240 000F                  		andi.w	#$F,d0
000045FC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004600 6500                       		blo.s	LevSel_Numb	; if not, branch
00004602 5E00                       		addi.b	#7,d0		; use alpha characters
00004604                            
00004604                            	LevSel_Numb:
00004604 D043                       		add.w	d3,d0
00004606 3C80                       		move.w	d0,(a6)
00004608 4E75                       		rts	
0000460A                            ; End of function LevSel_ChgSnd
0000460A                            
0000460A                            
0000460A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000460A                            
0000460A                            
0000460A                            LevSel_ChgLine:
0000460A 7417                       		moveq	#$17,d2		; number of characters per line
0000460C                            
0000460C                            	LevSel_LineLoop:
0000460C 7000                       		moveq	#0,d0
0000460E 1019                       		move.b	(a1)+,d0	; get character
00004610 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004612 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004616 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000461A 4E75                       		rts	
0000461C                            
0000461C                            
0000461C                            	LevSel_CharOk:
0000461C D043                       		add.w	d3,d0		; combine char with VRAM setting
0000461E 3C80                       		move.w	d0,(a6)		; send to VRAM
00004620 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004624 4E75                       		rts	
00004626                            ; End of function LevSel_ChgLine
00004626                            
00004626                            ; ===========================================================================
00004626                            ; ---------------------------------------------------------------------------
00004626                            ; Level	select menu text
00004626                            ; ---------------------------------------------------------------------------
00004626                            		incbin	"misc\Level Select Text (JP1).bin"
0000481E                            		even
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            ; Music	playlist
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            MusicList:
0000481E 00                         			dc.b bgm_GHZ    ; GHZ1
0000481F 00                                 	dc.b bgm_LZ    ; GHZ2
00004820 00                                 	dc.b bgm_Seaside   ; GHZ3
00004821 00                                 	dc.b bgm_LZ    ; GHZ4
00004822 00                                 	dc.b bgm_Stop    ; LZ1
00004823 00                                 	dc.b bgm_Stop   ; LZ2
00004824 00                                 	dc.b bgm_Stop    ; LZ3
00004825 00                                 	dc.b bgm_SBZ3    ; LZ4
00004826 00                                 	dc.b bgm_MZ    ; MZ1
00004827 00                                 	dc.b bgm_SBZ    ; MZ2
00004828 00                                 	dc.b bgm_MZ    ; MZ3
00004829 00                                 	dc.b bgm_SBZ    ; MZ4
0000482A 00                                 	dc.b bgm_LZ    ; SLZ1
0000482B 00                                 	dc.b bgm_LZ    ; SLZ2
0000482C 00                                 	dc.b bgm_LZ    ; SLZ3
0000482D 00                                 	dc.b bgm_LZ    ; SLZ4
0000482E 00                                 	dc.b bgm_SYZ    ; SYZ1
0000482F 00                                 	dc.b bgm_SLZ    ; SYZ2
00004830 00                                 	dc.b bgm_SLZ    ; SYZ3
00004831 00                                 	dc.b bgm_SLZ    ; SYZ4
00004832 00                                 	dc.b bgm_SBZ    ; SBZ1
00004833 00                                 	dc.b bgm_SBZ    ; SBZ2
00004834 00                                 	dc.b bgm_FZ		; SBZ3
00004835 00                                 	dc.b bgm_SBZ    ; SBZ4
00004836 00                                 	dc.b bgm_GHZ    ; GHZ1
00004837 00                                 	dc.b bgm_GHZ    ; GHZ1
00004838 00                                 	dc.b bgm_GHZ    ; GHZ1
00004839 00                                 	dc.b bgm_GHZ    ; GHZ1
0000483A                                    	even
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Level
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            GM_Level:
0000483A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004840 4A78 FFF0                  		tst.w	(f_demo).w
00004844 6B00                       		bmi.s	Level_NoMusicFade
0000484E                            
0000484E                            	Level_NoMusicFade:
0000484E 6100 CEFC                  		bsr.w	ClearPLC
00004852 6100 D932                  		bsr.w	PaletteFadeOut
00004856 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000485A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000485C 46FC 2700                  		disable_ints
0000486A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004870 6100 CA90                  		bsr.w	NemDec
00004874 46FC 2300                  		enable_ints
00004878 7000                       		moveq	#0,d0
0000487A 1038 FE10                  		move.b	(v_zone).w,d0
0000487E E948                       		lsl.w	#4,d0
00004880 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004886 45F2 0000                  		lea	(a2,d0.w),a2
0000488A 7000                       		moveq	#0,d0
0000488C 1012                       		move.b	(a2),d0
0000488E 6700                       		beq.s	loc_37FC
00004890 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
00004894                            
00004894                            loc_37FC:
00004894 7000                       		moveq	#plcid_Main2,d0
00004896 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
0000489A                            
0000489A                            Level_ClrRam:
0000489A 43F8 D000                  		lea	(v_objspace).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 07FF                  		move.w	#$7FF,d1
000048A4                            
000048A4                            	Level_ClrObjRam:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000048AA                            
000048AA 43F8 F628                  		lea	($FFFFF628).w,a1
000048AE 7000                       		moveq	#0,d0
000048B0 323C 0015                  		move.w	#$15,d1
000048B4                            
000048B4                            	Level_ClrVars1:
000048B4 22C0                       		move.l	d0,(a1)+
000048B6 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000048BA                            
000048BA 43F8 F700                  		lea	(v_screenposx).w,a1
000048BE 7000                       		moveq	#0,d0
000048C0 323C 003F                  		move.w	#$3F,d1
000048C4                            
000048C4                            	Level_ClrVars2:
000048C4 22C0                       		move.l	d0,(a1)+
000048C6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000048CA                            
000048CA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000048CE 7000                       		moveq	#0,d0
000048D0 323C 0047                  		move.w	#$47,d1
000048D4                            
000048D4                            	Level_ClrVars3:
000048D4 22C0                       		move.l	d0,(a1)+
000048D6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048DA                            
000048DA 46FC 2700                  		disable_ints
000048DE 6100 C8A4                  		bsr.w	ClearScreen
000048E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048E8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048F4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048F8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048FC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004900 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004904 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000490A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000490E 31FC C800 C8FC             		ResetDMAQueue	
00004914 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
0000491A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000491C                            
0000491C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004920 7000                       		moveq	#0,d0
00004922 1038 FE11                  		move.b	(v_act).w,d0
00004926 D040                       		add.w	d0,d0
00004928 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000492E 3031 0000                  		move.w	(a1,d0.w),d0
00004932 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004936 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000493A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000493E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004942 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004946 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000494C                            
0000494C                            Level_LoadPal:
0000494C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004952 46FC 2300                  		move	#$2300,sr
00004956 4EB9 0000 0000             		jsr		LoadPlayerPal
0000495C 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004960 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004966 6600                       		bne.s	Level_GetBgm	; if not, branch
00004968 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000496E 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004972 4A38 FE30                  		tst.b	($FFFFFE30).w
00004976 6700                       		beq.s	Level_GetBgm
00004978 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000497E                            
0000497E                            	Level_GetBgm:
0000497E 4A78 FFF0                  		tst.w	(f_demo).w
00004982 6B00                               	bmi.s	Level_SkipTtlCard
00004984 7000                               	moveq	#0,d0
00004986 3038 FE10                  		move.w	(v_zone).w,d0
0000498A E418                       		ror.b	#2,d0
0000498C EC48                       		lsr.w   #6,d0
0000498E 43F9 0000 481E                     	lea	(MusicList).l,a1 ; load    music playlist
00004994 1031 0000                          	move.b	(a1,d0.w),d0
00004998 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000499C 6100 C8B0                          	bsr.w	PlaySound    ; play music
000049A0 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
000049A6                            
000049A6                            
000049A6                            Level_TtlCardLoop:
000049A6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000049AC 6100 F056                  		bsr.w	WaitForVBla
000049B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049B6 4EB9 0000 0000             		jsr	(BuildSprites).l
000049BC 6100 CD9C                  		bsr.w	RunPLC
000049C0 3038 D108                  		move.w	(v_objspace+$108).w,d0
000049C4 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
000049C8 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
000049CA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
000049CE 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049D0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049D6                            
000049D6                            	Level_SkipTtlCard:
000049D6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049DC 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
000049E0 6100 0000                  		bsr.w	LevelSizeLoad
000049E4 6100 0000                  		bsr.w	DeformLayers
000049E8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049EE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049F2 6100 0000                  		bsr.w	LoadTilesFromStart
000049F6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049FC 6100 0000                  		bsr.w	ColIndexLoad
00004A00 6100 0000                  		bsr.w	LZWaterFeatures
00004A04 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A0A 4A78 FFF0                  		tst.w	(f_demo).w
00004A0E 6B00                       		bmi.s	Level_ChkDebug
00004A10 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A16                            
00004A16                            Level_ChkDebug:
00004A16 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A1A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A1C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A22 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A24 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A2A                            
00004A2A                            Level_ChkWater:
00004A2A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A30 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A3C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A3E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A44 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A4A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A50 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A56                            
00004A56                            Level_LoadObj:
00004A56 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A5C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A62 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A68 7000                       		moveq	#0,d0
00004A6A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A6E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A70 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A74 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A78 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A7C                            
00004A7C                            	Level_SkipClr:
00004A7C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A80 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A84 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A88 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A8C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A90 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A94 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A98 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A9C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004AA0 31C0 FE02                  		move.w	d0,(f_restart).w
00004AA4 31C0 FE04                  		move.w	d0,(v_framecount).w
00004AA8 6100 0000                  		bsr.w	OscillateNumInit
00004AAC 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004AB2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004AB8 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004ABE 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004AC4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004ACA 7000                       		moveq	#0,d0
00004ACC 1038 FE10                  		move.b	(v_zone).w,d0
00004AD0 E548                       		lsl.w	#2,d0
00004AD2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AD6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004ADA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004ADC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AE2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AE6 5340                       		subq.w	#1,d0
00004AE8 E548                       		lsl.w	#2,d0
00004AEA 2271 0000                  		movea.l	(a1,d0.w),a1
00004AEE                            
00004AEE                            Level_Demo:
00004AEE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AF4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AF8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004AFE 4A78 FFF0                  		tst.w	(f_demo).w
00004B02 6A00                       		bpl.s	Level_ChkWaterPal
00004B04 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B0A 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B10 6600                       		bne.s	Level_ChkWaterPal
00004B12 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B18                            
00004B18                            Level_ChkWaterPal:
00004B18 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B1E 6600                       		bne.s	Level_Delay	; if not, branch
00004B20 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B22 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B28 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B2A 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B2C                            
00004B2C                            	Level_WtrNotSbz:
00004B2C 6100 D9BA                  		bsr.w	PalLoad4_Water
00004B30                            
00004B30                            Level_Delay:
00004B30 323C 0003                  		move.w	#3,d1
00004B34                            
00004B34                            	Level_DelayLoop:
00004B34 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B3A 6100 EEC8                  		bsr.w	WaitForVBla
00004B3E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B42                            
00004B42 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B48 6100 D59C                  		bsr.w	PalFadeIn_Alt
00004B4C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B50 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B52 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B56 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B5A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B5E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B62 6000                       		bra.s	Level_StartGame
00004B64                            ; ===========================================================================
00004B64                            
00004B64                            Level_ClrCardArt:
00004B64 7000                       		moveq	#plcid_Explode,d0
00004B66 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion gfx
00004B6C 7000                       		moveq	#0,d0
00004B6E 1038 FE10                  		move.b	(v_zone).w,d0
00004B72 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B76 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B7C                            
00004B7C                            Level_StartGame:
00004B7C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B82                            
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            ; Main level loop (when	all title card and loading sequences are finished)
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            
00004B82                            Level_MainLoop:
00004B82 6100 C6DC                  		bsr.w	PauseGame
00004B86 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B8C 6100 EE76                  		bsr.w	WaitForVBla
00004B90 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B94 6100 0000                  		bsr.w	MoveSonicInDemo
00004B98 6100 0000                  		bsr.w	LZWaterFeatures
00004B9C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BA2 4A78 FE02                  			tst.w   (f_restart).w
00004BA6 6600 FC92                  			bne     GM_Level
00004BAA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004BAE 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004BB0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004BB6 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004BB8                            
00004BB8                            	Level_DoScroll:
00004BB8 6100 0000                  		bsr.w	DeformLayers
00004BBC                            
00004BBC                            	Level_SkipScroll:
00004BBC 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BC2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004BC8 6100 D108                  		bsr.w	PaletteCycle
00004BCC 6100 CB8C                  		bsr.w	RunPLC
00004BD0 6100 0000                  		bsr.w	OscillateNumDo
00004BD4 6100 0000                  		bsr.w	SynchroAnimate
00004BD8 6100 0000                  		bsr.w	SignpostArtLoad
00004BDC                            
00004BDC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BE4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BEA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BEE 4E75                       		rts	
00004BF0                            ; ===========================================================================
00004BF0                            
00004BF0                            Level_ChkDemo:
00004BF0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BF4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BF6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BFA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BFC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C02 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C06 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C0C 4E75                       		rts	
00004C0E                            ; ===========================================================================
00004C0E                            
00004C0E                            Level_EndDemo:
00004C0E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C14 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C1C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C20 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C22 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C28                            
00004C28                            Level_FadeDemo:
00004C28 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C2E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C34 4278 F794                  		clr.w	(v_palchgspeed).w
00004C38                            
00004C38                            	Level_FDLoop:
00004C38 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C3E 6100 EDC4                  		bsr.w	WaitForVBla
00004C42 6100 0000                  		bsr.w	MoveSonicInDemo
00004C46 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C4C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C52 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C58 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C5C 6A00                       		bpl.s	loc_3BC8
00004C5E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C64 6100 D540                  		bsr.w	FadeOut_ToBlack
00004C68                            
00004C68                            loc_3BC8:
00004C68 4A78 F614                  		tst.w	(v_demolength).w
00004C6C 66CA                       		bne.s	Level_FDLoop
00004C6E 4E75                       		rts	
00004C70                            ; ===========================================================================
00004C70                            
00004C70                            		include	"_inc\LZWaterFeatures.asm"
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            
00004C70                            LZWaterFeatures:
00004C70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C76 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C78 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C7C 6600                       			bne.s	@setheight
00004C7E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C84 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C86                            
00004C86 6100 0000                  		bsr.w	LZWindTunnels
00004C8A 6100 0000                  		bsr.w	LZWaterSlides
00004C8E 6100 0000                  		bsr.w	LZDynamicWater
00004C92                            
00004C92                            @setheight:
00004C92 4238 F64E                  		clr.b	(f_wtr_state).w
00004C96 7000                       		moveq	#0,d0
00004C98 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C9C E248                       		lsr.w	#1,d0
00004C9E D078 F648                  		add.w	(v_waterpos2).w,d0
00004CA2 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004CA6 3038 F646                  		move.w	(v_waterpos1).w,d0
00004CAA 9078 F704                  		sub.w	(v_screenposy).w,d0
00004CAE 6400                       		bcc.s	@isbelow
00004CB0 4A40                       		tst.w	d0
00004CB2 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004CB4                            
00004CB4 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004CBA 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004CC0                            
00004CC0                            	@isbelow:
00004CC0 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004CC4 6500                       		bcs.s	@isvisible	; if yes, branch
00004CC6 303C 00DF                  		move.w	#223,d0
00004CCA                            
00004CCA                            	@isvisible:
00004CCA 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004CCE                            
00004CCE                            @notlabyrinth:
00004CCE 4E75                       		rts	
00004CD0                            ; ===========================================================================
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0                            ; Initial water heights
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CD2 0328                       		dc.w $328	; Labyrinth 2
00004CD4 0900                       		dc.w $900	; Labyrinth 3
00004CD6 0228                       		dc.w $228	; Scrap Brain 3
00004CD8                            		even
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Labyrinth dynamic water routines
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            LZDynamicWater:
00004CD8 7000                       		moveq	#0,d0
00004CDA 1038 FE11                  		move.b	(v_act).w,d0
00004CDE D040                       		add.w	d0,d0
00004CE0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CE4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CE8 7200                       		moveq	#0,d1
00004CEA 1238 F64C                  		move.b	(f_water).w,d1
00004CEE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CF2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CF6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CF8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CFA 4441                       		neg.w	d1		; set water to move up instead
00004CFC                            
00004CFC                            	@movewater:
00004CFC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004D00                            
00004D00                            	@exit:
00004D00 4E75                       		rts	
00004D02                            ; ===========================================================================
00004D02 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D04 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D06 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D08 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            DynWater_LZ1:
00004D0A 4E75                       		rts	
00004D0C                            ; ===========================================================================
00004D0C                            
00004D0C                            DynWater_LZ2:
00004D0C 3038 F700                  		move.w	(v_screenposx).w,d0
00004D10 323C 0328                  		move.w	#$328,d1
00004D14 0C40 0500                  		cmpi.w	#$500,d0
00004D18 6500                       		bcs.s	@setwater
00004D1A 323C 03C8                  		move.w	#$3C8,d1
00004D1E 0C40 0B00                  		cmpi.w	#$B00,d0
00004D22 6500                       		bcs.s	@setwater
00004D24 323C 0428                  		move.w	#$428,d1
00004D28                            
00004D28                            	@setwater:
00004D28 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D2C 4E75                       		rts	
00004D2E                            ; ===========================================================================
00004D2E                            
00004D2E                            DynWater_LZ3:
00004D2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004D32 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D36 6600                       		bne.s	@routine2
00004D38                            
00004D38 323C 0900                  		move.w	#$900,d1
00004D3C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D40 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D42 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D48 6500                       		bcs.s	@setwaterlz3
00004D4A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D50 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D52                            
00004D52 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D56 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D5C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D6A                            
00004D6A                            	@setwaterlz3:
00004D6A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D6E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D72 4E75                       		rts	
00004D74                            ; ===========================================================================
00004D74                            
00004D74                            @routine2:
00004D74 5302                       		subq.b	#1,d2
00004D76 6600                       		bne.s	@routine3
00004D78 323C 04C8                  		move.w	#$4C8,d1
00004D7C 0C40 0770                  		cmpi.w	#$770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 323C 0308                  		move.w	#$308,d1
00004D86 0C40 1400                  		cmpi.w	#$1400,d0
00004D8A 6500                       		bcs.s	@setwater2
00004D8C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D92 6700                       		beq.s	@sonicislow
00004D94 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D9A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D9C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004DA2 6400                       		bcc.s	@setwater2
00004DA4                            
00004DA4                            @sonicislow:
00004DA4 323C 0508                  		move.w	#$508,d1
00004DA8 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DAC 0C40 1770                  		cmpi.w	#$1770,d0
00004DB0 6500                       		bcs.s	@setwater2
00004DB2 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004DB8                            
00004DB8                            	@setwater2:
00004DB8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DBC 4E75                       		rts	
00004DBE                            ; ===========================================================================
00004DBE                            
00004DBE                            @routine3:
00004DBE 5302                       		subq.b	#1,d2
00004DC0 6600                       		bne.s	@routine4
00004DC2 323C 0508                  		move.w	#$508,d1
00004DC6 0C40 1860                  		cmpi.w	#$1860,d0
00004DCA 6500                       		bcs.s	@setwater3
00004DCC 323C 0188                  		move.w	#$188,d1
00004DD0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DD4 6400                       		bcc.s	@loc_3DC6
00004DD6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DDA 6600                       		bne.s	@setwater3
00004DDC                            
00004DDC                            	@loc_3DC6:
00004DDC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DE2                            
00004DE2                            	@setwater3:
00004DE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DE6 4E75                       		rts	
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            @routine4:
00004DE8 5302                       		subq.b	#1,d2
00004DEA 6600                       		bne.s	@routine5
00004DEC 323C 0188                  		move.w	#$188,d1
00004DF0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DF4 6500                       		bcs.s	@setwater4
00004DF6 323C 0900                  		move.w	#$900,d1
00004DFA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DFE 6500                       		bcs.s	@setwater4
00004E00 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E06 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E0C 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E12 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E18 4E75                       		rts	
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            @setwater4:
00004E1A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E1E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E22 4E75                       		rts	
00004E24                            ; ===========================================================================
00004E24                            
00004E24                            @routine5:
00004E24 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E28 6500                       		bcs.s	@dontset	; if not, branch
00004E2A 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E30                            
00004E30                            	@dontset:
00004E30 4E75                       		rts	
00004E32                            ; ===========================================================================
00004E32                            
00004E32                            DynWater_SBZ3:
00004E32 323C 0228                  		move.w	#$228,d1
00004E36 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E3C 6500                       		bcs.s	@setwater
00004E3E 323C 04C8                  		move.w	#$4C8,d1
00004E42                            
00004E42                            	@setwater:
00004E42 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E46 4E75                       		rts
00004E48                            
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            
00004E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E48                            
00004E48                            
00004E48                            LZWindTunnels:
00004E48 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E4C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E50 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E56 7000                       		moveq	#0,d0
00004E58 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E5C E748                       		lsl.w	#3,d0		; multiply by 8
00004E5E D4C0                       		adda.w	d0,a2		; add to address for data
00004E60 7200                       		moveq	#0,d1
00004E62 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E66 6600                       		bne.s	@notact1	; if not, branch
00004E68 7201                       		moveq	#1,d1
00004E6A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E6C                            
00004E6C                            	@notact1:
00004E6C 43F8 D000                  		lea	(v_player).w,a1
00004E70                            
00004E70                            @chksonic:
00004E70 3029 0008                  		move.w	obX(a1),d0
00004E74 B052                       		cmp.w	(a2),d0
00004E76 6500 0000                  		bcs.w	@chknext
00004E7A B06A 0004                  		cmp.w	4(a2),d0
00004E7E 6400 0000                  		bcc.w	@chknext
00004E82 3429 000C                  		move.w	obY(a1),d2
00004E86 B46A 0002                  		cmp.w	2(a2),d2
00004E8A 6500                       		bcs.s	@chknext
00004E8C B46A 0006                  		cmp.w	6(a2),d2
00004E90 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E92 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E96 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E9A 6600                       		bne.s	@skipsound	; if not, branch
00004EA6                            
00004EA6                            	@skipsound:
00004EA6 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004EAA 6600 0000                  		bne.w	@quit	; if yes, branch
00004EAE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004EB4 6400                       		bcc.s	@clrquit	; if yes, branch
00004EB6 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004EBC 0440 0080                  		subi.w	#$80,d0
00004EC0 B052                       		cmp.w	(a2),d0
00004EC2 6400                       		bcc.s	@movesonic
00004EC4 7002                       		moveq	#2,d0
00004EC6 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004ECC 6600                       		bne.s	@notact2	; if not, branch
00004ECE 4440                       		neg.w	d0
00004ED0                            
00004ED0                            	@notact2:
00004ED0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004ED4                            
00004ED4                            @movesonic:
00004ED4 5869 0008                  		addq.w	#4,obX(a1)
00004ED8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EDE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EE4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EF0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EF6 6700                       		beq.s	@down		; if not, branch
00004EF8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004EFC                            
00004EFC                            	@down:
00004EFC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004F02 6700                       		beq.s	@end		; if not, branch
00004F04 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F08                            
00004F08                            	@end:
00004F08 4E75                       		rts	
00004F0A                            ; ===========================================================================
00004F0A                            
00004F0A                            @chknext:
00004F0A 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F0C 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F10 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F14 6700                       		beq.s	@quit		; if yes, branch
00004F16 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F1C                            
00004F1C                            @clrquit:
00004F1C 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F20                            
00004F20                            @quit:
00004F20 4E75                       		rts	
00004F22                            ; End of function LZWindTunnels
00004F22                            
00004F22                            ; ===========================================================================
00004F22                            
00004F22                            		;    left, top,  right, bottom boundaries
00004F22 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F2A 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F32 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F3A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F42 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F4A                            		even
00004F4A                            
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            ; Labyrinth Zone water slide subroutine
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            
00004F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F4A                            
00004F4A                            
00004F4A                            LZWaterSlides:
00004F4A 43F8 D000                  		lea	(v_player).w,a1
00004F4E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F54 6600                       		bne.s	loc_3F6A	; if not, branch
00004F56 3029 000C                  		move.w	obY(a1),d0
00004F5A E248                       		lsr.w	#1,d0
00004F5C 0240 0380                  		andi.w	#$380,d0
00004F60 1229 0008                  		move.b	obX(a1),d1
00004F64 0241 007F                  		andi.w	#$7F,d1
00004F68 D041                       		add.w	d1,d0
00004F6A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F6E 1032 0000                  		move.b	(a2,d0.w),d0
00004F72 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F76 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F78                            
00004F78                            loc_3F62:
00004F78 B022                       		cmp.b	-(a2),d0
00004F7A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F7E 6700                       		beq.s	LZSlide_Move
00004F80                            
00004F80                            loc_3F6A:
00004F80 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F84 6700                       		beq.s	locret_3F7A
00004F86 337C 0005 003E             		move.w	#5,$3E(a1)
00004F8C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F90                            
00004F90                            locret_3F7A:
00004F90 4E75                       		rts	
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            LZSlide_Move:
00004F92 0C41 0003                  		cmpi.w	#3,d1
00004F96 6400                       		bcc.s	loc_3F84
00004F98 4E71                       		nop	
00004F9A                            
00004F9A                            loc_3F84:
00004F9A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004FA0 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004FA4 1340 0020                  		move.b	d0,obInertia(a1)
00004FA8 6A00                       		bpl.s	loc_3F9A
00004FAA 08E9 0000 0022             		bset	#0,obStatus(a1)
00004FB0                            
00004FB0                            loc_3F9A:
00004FB0 4229 0021                  		clr.b	obInertia+1(a1)
00004FB4 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004FBA 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004FC0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004FC4 0200 001F                  		andi.b	#$1F,d0
00004FC8 6600                       		bne.s	locret_3FBE
00004FD4                            
00004FD4                            locret_3FBE:
00004FD4 4E75                       		rts	
00004FD6                            ; End of function LZWaterSlides
00004FD6                            
00004FD6                            ; ===========================================================================
00004FD6                            ; byte_3FC0:
00004FD6                            Slide_Speeds:
00004FD6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FDE 00                         		even
00004FDE                            
00004FDE                            Slide_Chunks:
00004FDE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FDF                            ; byte_3FCF
00004FDF                            Slide_Chunks_End
00004FE0 00                         		even
00004FE0 00                         		even
00004FE0                            		include	"_inc\MoveSonicInDemo.asm"
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            ; Subroutine to	move Sonic in demo mode
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            
00004FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FE0                            
00004FE0                            
00004FE0                            MoveSonicInDemo:
00004FE0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FE4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FE6 4E75                       		rts	
00004FE8                            ; ===========================================================================
00004FE8                            
00004FE8                            ; This is an unused subroutine for recording a demo
00004FE8                            
00004FE8                            DemoRecorder:
00004FE8 43F9 0008 0000             		lea	($80000).l,a1
00004FEE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FF2 D2C0                       		adda.w	d0,a1
00004FF4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FF8 B011                       		cmp.b	(a1),d0
00004FFA 6600                       		bne.s	@next
00004FFC 5229 0001                  		addq.b	#1,1(a1)
00005000 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005006 6700                       		beq.s	@next
00005008 4E75                       		rts	
0000500A                            
0000500A                            	@next:
0000500A 1340 0002                  		move.b	d0,2(a1)
0000500E 137C 0000 0003             		move.b	#0,3(a1)
00005014 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005018 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000501E 4E75                       		rts	
00005020                            ; ===========================================================================
00005020                            
00005020                            MDemo_On:
00005020 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005024 6A00                       		bpl.s	@dontquit	; if not, branch
00005026 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000502A 6B00                       		bmi.s	@dontquit	; if yes, branch
0000502C 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005032                            
00005032                            	@dontquit:
00005032 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005038 7000                       		moveq	#0,d0
0000503A 1038 FE10                  		move.b	(v_zone).w,d0
0000503E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005044 6600                       		bne.s	@notspecial	; if not, branch
00005046 7006                       		moveq	#6,d0		; use demo #6
00005048                            
00005048                            	@notspecial:
00005048 E548                       		lsl.w	#2,d0
0000504A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000504E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005052 6A00                       		bpl.s	@notcredits	; if not, branch
00005054 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000505A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000505E 5340                       		subq.w	#1,d0
00005060 E548                       		lsl.w	#2,d0
00005062 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005066                            
00005066                            	@notcredits:
00005066 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000506A D2C0                       		adda.w	d0,a1
0000506C 1011                       		move.b	(a1),d0
0000506E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005072 1200                       		move.b	d0,d1
00005074 7400                       			moveq	#0,d2
00005076 B500                       		eor.b	d2,d0
00005078 10C1                       		move.b	d1,(a0)+
0000507A C001                       		and.b	d1,d0
0000507C 10C0                       		move.b	d0,(a0)+
0000507E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005082 6400                       		bcc.s	@end
00005084 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000508A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000508E                            
0000508E                            	@end:
0000508E 4E75                       		rts	
00005090                            ; End of function MoveSonicInDemo
00005090                            
00005090                            ; ===========================================================================
00005090                            ; ---------------------------------------------------------------------------
00005090                            ; Demo sequence	pointers
00005090                            ; ---------------------------------------------------------------------------
00005090 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005094 0000 0000                  		dc.l Demo_GHZ
00005098 0000 0000                  		dc.l Demo_MZ
0000509C 0000 0000                  		dc.l Demo_MZ
000050A0 0000 0000                  		dc.l Demo_SYZ
000050A4 0000 0000                  		dc.l Demo_SYZ
000050A8 0000 0000                  		dc.l Demo_SS
000050AC 0000 0000                  		dc.l Demo_SS
000050B0                            
000050B0 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000050B4 0000 0000                  		dc.l Demo_EndMZ
000050B8 0000 0000                  		dc.l Demo_EndSYZ
000050BC 0000 0000                  		dc.l Demo_EndLZ
000050C0 0000 0000                  		dc.l Demo_EndSLZ
000050C4 0000 0000                  		dc.l Demo_EndSBZ1
000050C8 0000 0000                  		dc.l Demo_EndSBZ2
000050CC 0000 0000                  		dc.l Demo_EndGHZ2
000050D0                            
000050D0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050E0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050F0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005100                            		even
00005100                            		even
00005100                            
00005100                            ; ---------------------------------------------------------------------------
00005100                            ; Collision index pointer loading subroutine
00005100                            ; ---------------------------------------------------------------------------
00005100                            
00005100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005100                            
00005100                            
00005100                            ColIndexLoad:
00005100 7000                       		moveq	#0,d0
00005102 1038 FE10                  		move.b	(v_zone).w,d0
00005106 E548                       		lsl.w	#2,d0
00005108 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000510E 4E75                       		rts	
00005110                            ; End of function ColIndexLoad
00005110                            
00005110                            ; ===========================================================================
00005110                            ; ---------------------------------------------------------------------------
00005110                            ; Collision index pointers
00005110                            ; ---------------------------------------------------------------------------
00005110 0000 0000                  ColPointers:	dc.l Col_GHZ
00005114 0000 0000                  		dc.l Col_LZ
00005118 0000 0000                  		dc.l Col_MZ
0000511C 0000 0000                  		dc.l Col_SLZ
00005120 0000 0000                  		dc.l Col_SYZ
00005124 0000 0000                  		dc.l Col_SBZ
00005128                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005128                            
00005128                            		include	"_inc\Oscillatory Routines.asm"
00005128                            ; ---------------------------------------------------------------------------
00005128                            ; Oscillating number subroutines
00005128                            ; ---------------------------------------------------------------------------
00005128                            
00005128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005128                            
00005128                            ; Initialise the values
00005128                            
00005128                            OscillateNumInit:
00005128 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000512C 45F9 0000 0000             		lea	(@baselines).l,a2
00005132 7220                       		moveq	#$20,d1
00005134                            
00005134                            	@loop:
00005134 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005136 51C9 FFFC                  		dbf	d1,@loop
0000513A 4E75                       		rts	
0000513C                            
0000513C                            
0000513C                            ; ===========================================================================
0000513C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000513E 0080 0000                  		dc.w $80, 0
00005142 0080 0000                  		dc.w $80, 0
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E 0080 0000                  		dc.w $80, 0
00005152 0080 0000                  		dc.w $80, 0
00005156 0080 0000                  		dc.w $80, 0
0000515A 0080 0000                  		dc.w $80, 0
0000515E 0080 0000                  		dc.w $80, 0
00005162 50F0 011E                  		dc.w $50F0, $11E
00005166 2080 00B4                  		dc.w $2080, $B4
0000516A 3080 010E                  		dc.w $3080, $10E
0000516E 5080 01C2                  		dc.w $5080, $1C2
00005172 7080 0276                  		dc.w $7080, $276
00005176 0080 0000                  		dc.w $80, 0
0000517A 0080 0000                  		dc.w $80, 0
0000517E                            		even
0000517E                            
0000517E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000517E                            
0000517E                            ; Oscillate values
0000517E                            
0000517E                            OscillateNumDo:
0000517E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005184 6400                       		bcc.s	@end		; if yes, branch
00005186 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000518A 45F9 0000 0000             		lea	(@settings).l,a2
00005190 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005192 720F                       		moveq	#$F,d1
00005194                            
00005194                            @loop:
00005194 341A                       		move.w	(a2)+,d2	; get frequency
00005196 381A                       		move.w	(a2)+,d4	; get amplitude
00005198 0303                       		btst	d1,d3		; check oscillation direction
0000519A 6600                       		bne.s	@down		; branch if 1
0000519C                            
0000519C                            	@up:
0000519C 3029 0002                  		move.w	2(a1),d0	; get current rate
000051A0 D042                       		add.w	d2,d0		; add frequency
000051A2 3340 0002                  		move.w	d0,2(a1)
000051A6 D151                       		add.w	d0,0(a1)	; add rate to value
000051A8 B811                       		cmp.b	0(a1),d4
000051AA 6200                       		bhi.s	@next
000051AC 03C3                       		bset	d1,d3
000051AE 6000                       		bra.s	@next
000051B0                            
000051B0                            	@down:
000051B0 3029 0002                  		move.w	2(a1),d0
000051B4 9042                       		sub.w	d2,d0
000051B6 3340 0002                  		move.w	d0,2(a1)
000051BA D151                       		add.w	d0,0(a1)
000051BC B811                       		cmp.b	0(a1),d4
000051BE 6300                       		bls.s	@next
000051C0 0383                       		bclr	d1,d3
000051C2                            
000051C2                            	@next:
000051C2 5849                       		addq.w	#4,a1
000051C4 51C9 FFCE                  		dbf	d1,@loop
000051C8 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000051CC                            
000051CC                            @end:
000051CC 4E75                       		rts	
000051CE                            ; End of function OscillateNumDo
000051CE                            
000051CE                            ; ===========================================================================
000051CE 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051D2 0002 0018                  		dc.w 2,	$18
000051D6 0002 0020                  		dc.w 2,	$20
000051DA 0002 0030                  		dc.w 2,	$30
000051DE 0004 0020                  		dc.w 4,	$20
000051E2 0008 0008                  		dc.w 8,	8
000051E6 0008 0040                  		dc.w 8,	$40
000051EA 0004 0040                  		dc.w 4,	$40
000051EE 0002 0050                  		dc.w 2,	$50
000051F2 0002 0050                  		dc.w 2,	$50
000051F6 0002 0020                  		dc.w 2,	$20
000051FA 0003 0030                  		dc.w 3,	$30
000051FE 0005 0050                  		dc.w 5,	$50
00005202 0007 0070                  		dc.w 7,	$70
00005206 0002 0010                  		dc.w 2,	$10
0000520A 0002 0010                  		dc.w 2,	$10
0000520E                            		even
0000520E                            		even
0000520E                            
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            
0000520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520E                            
0000520E                            
0000520E                            SynchroAnimate:
0000520E                            
0000520E                            ; Used for GHZ spiked log
0000520E                            Sync1:
0000520E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005212 6A00                       		bpl.s	Sync2		; if not, branch
00005214 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000521A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000521E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005224                            
00005224                            ; Used for rings and giant rings
00005224                            Sync2:
00005224 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005228 6A00                       		bpl.s	Sync3
0000522A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005230 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005234 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000523A                            
0000523A                            ; Used for nothing
0000523A                            Sync3:
0000523A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000523E 6A00                       		bpl.s	Sync4
00005240 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005246 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000524A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005250 6500                       		blo.s	Sync4
00005252 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005258                            
00005258                            ; Used for bouncing rings
00005258                            Sync4:
00005258 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000525C 6700                       		beq.s	SyncEnd
0000525E 7000                       		moveq	#0,d0
00005260 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005264 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005268 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000526C EF58                       		rol.w	#7,d0
0000526E 0240 0003                  		andi.w	#3,d0
00005272 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005276 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000527A                            
0000527A                            SyncEnd:
0000527A 4E75                       		rts	
0000527C                            ; End of function SynchroAnimate
0000527C                            
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            ; End-of-act signpost pattern loading subroutine
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            
0000527C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527C                            
0000527C                            
0000527C                            SignpostArtLoad:
0000527C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005280 6600 0000                  		bne.w	@exit		; if yes, branch
00005284 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000528A 6700                       		beq.s	@exit		; if yes, branch
0000528C                            
0000528C 3038 F700                  		move.w	(v_screenposx).w,d0
00005290 3238 F72A                  		move.w	(v_limitright2).w,d1
00005294 0441 0100                  		subi.w	#$100,d1
00005298 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000529A 6D00                       		blt.s	@exit		; if not, branch
0000529C 4A38 FE1E                  		tst.b	(f_timecount).w
000052A0 6700                       		beq.s	@exit
000052A2 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000052A6 6700                       		beq.s	@exit
000052A8 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000052AC 7000                       		moveq	#plcid_Signpost,d0
000052AE 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
000052B2                            
000052B2                            	@exit:
000052B2 4E75                       		rts	
000052B4                            ; End of function SignpostArtLoad
000052B4                            
000052B4                            ; ===========================================================================
000052B4                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005334                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005464                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054E4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055E4                            ; ===========================================================================
000055E4                            
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            ; Special Stage
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            
000055E4                            GM_Special:
000055EC 6100 CCC2                  		bsr.w	PaletteWhiteOut
000055F0 46FC 2700                  		disable_ints
000055F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055FA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055FE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005602 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005608 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000560C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005610 0200 00BF                  		andi.b	#$BF,d0
00005614 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000561A 6100 BB68                  		bsr.w	ClearScreen
0000561E 46FC 2300                  		enable_ints
00005622 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005644                            
00005644                            	SS_WaitForDMA:
00005644 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005646 0801 0001                  		btst	#1,d1		; is DMA running?
0000564A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000564C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005650 6100 0000                  		bsr.w	SS_BGLoad
00005654 7000                       		moveq	#plcid_SpecialStage,d0
00005656 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
0000565A                            
0000565A 43F8 D000                  		lea	(v_objspace).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 07FF                  		move.w	#$7FF,d1
00005664                            	SS_ClrObjRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000566A                            
0000566A 43F8 F700                  		lea	(v_screenposx).w,a1
0000566E 7000                       		moveq	#0,d0
00005670 323C 003F                  		move.w	#$3F,d1
00005674                            	SS_ClrRam1:
00005674 22C0                       		move.l	d0,(a1)+
00005676 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000567A                            
0000567A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000567E 7000                       		moveq	#0,d0
00005680 323C 0027                  		move.w	#$27,d1
00005684                            	SS_ClrRam2:
00005684 22C0                       		move.l	d0,(a1)+
00005686 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000568A                            
0000568A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000568E 7000                       		moveq	#0,d0
00005690 323C 007F                  		move.w	#$7F,d1
00005694                            	SS_ClrNemRam:
00005694 22C0                       		move.l	d0,(a1)+
00005696 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000569A                            
0000569A 4238 F64E                  		clr.b	(f_wtr_state).w
0000569E 4278 FE02                  		clr.w	(f_restart).w
000056A2 700A                       		moveq	#palid_Special,d0
000056A4 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
000056A8 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000056AE 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000056B6 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000056BE 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000056C4 6100 0000                  		bsr.w	PalCycle_SS
000056C8 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000056CC 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056DA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056E0 43F9 0000 5090             		lea	(DemoDataPtr).l,a1
000056E6 7006                       		moveq	#6,d0
000056E8 E548                       		lsl.w	#2,d0
000056EA 2271 0000                  		movea.l	(a1,d0.w),a1
000056EE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056F4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056F8 4278 FE20                  		clr.w	(v_rings).w
000056FC 4238 FE1B                  		clr.b	(v_lifecount).w
00005700 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005706 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000570C 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005710 6700                       		beq.s	SS_NoDebug	; if not, branch
00005712 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005718 6700                       		beq.s	SS_NoDebug	; if not, branch
0000571A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005720                            
00005720                            	SS_NoDebug:
00005720 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005724 0000 0040                  		ori.b	#$40,d0
00005728 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000572E 6100 CAD4                  		bsr.w	PaletteWhiteIn
00005732                            
00005732                            ; ---------------------------------------------------------------------------
00005732                            ; Main Special Stage loop
00005732                            ; ---------------------------------------------------------------------------
00005732                            
00005732                            SS_MainLoop:
00005732 6100 BB2C                  		bsr.w	PauseGame
00005736 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000573C 6100 E2C6                  		bsr.w	WaitForVBla
00005740 6100 F89E                  		bsr.w	MoveSonicInDemo
00005744 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000574A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005750 4EB9 0000 0000             		jsr	(BuildSprites).l
00005756 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000575C 6100 0000                  		bsr.w	SS_BGAnimate
00005760 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005764 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005766 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000576A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000576E                            
0000576E                            	SS_ChkEnd:
0000576E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005774 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005778                            
00005778 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000577C 6600 0000                  		bne.w	SS_ToLevel
00005780 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005786 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000578C 6500                       		blo.s	SS_Finish	; if not, branch
0000578E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005792                            
00005792                            SS_Finish:
00005792 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005798 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000579E 4278 F794                  		clr.w	(v_palchgspeed).w
000057A2                            
000057A2                            	SS_FinLoop:
000057A2 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000057A8 6100 E25A                  		bsr.w	WaitForVBla
000057AC 6100 F832                  		bsr.w	MoveSonicInDemo
000057B0 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000057B6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057BC 4EB9 0000 0000             		jsr	(BuildSprites).l
000057C2 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057C8 6100 0000                  		bsr.w	SS_BGAnimate
000057CC 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057D0 6A00                       		bpl.s	loc_47D4
000057D2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057D8 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
000057DC                            
000057DC                            loc_47D4:
000057DC 4A78 F614                  		tst.w	(v_demolength).w
000057E0 66C0                       		bne.s	SS_FinLoop
000057E2                            
000057E2 46FC 2700                  		disable_ints
000057E6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057F4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057F8 6100 B98A                  		bsr.w	ClearScreen
00005806 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000580C 6100 BAF4                  		bsr.w	NemDec
00005810 4EB9 0000 0000             		jsr	(Hud_Base).l
00005816 31FC C800 C8FC             		ResetDMAQueue	
0000581C 46FC 2300                  		enable_ints
00005820 7011                       		moveq	#palid_SSResult,d0
00005822 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
00005826 7000                       		moveq	#plcid_Main,d0
00005828 6100 BEF6                  		bsr.w	NewPLC
0000582C 7000                       		moveq	#plcid_SSResult,d0
0000582E 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
00005832 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005838 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000583E 3038 FE20                  		move.w	(v_rings).w,d0
00005842 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005846 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005854                            
00005854 43F8 D000                  		lea	(v_objspace).w,a1
00005858 7000                       		moveq	#0,d0
0000585A 323C 07FF                  		move.w	#$7FF,d1
0000585E                            	SS_EndClrObjRam:
0000585E 22C0                       		move.l	d0,(a1)+
00005860 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005864                            
00005864 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000586A                            
0000586A                            SS_NormalExit:
0000586A 6100 B9F4                  		bsr.w	PauseGame
0000586E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005874 6100 E18E                  		bsr.w	WaitForVBla
00005878 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000587E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005884 6100 BED4                  		bsr.w	RunPLC
00005888 4A78 FE02                  		tst.w	(f_restart).w
0000588C 67DC                       		beq.s	SS_NormalExit
0000588E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005892 66D6                       		bne.s	SS_NormalExit
0000589C 6100 CA12                  		bsr.w	PaletteWhiteOut
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            SS_ToSegaScreen:
000058A2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000058A8 4E75                       		rts
000058AA                            
000058AA 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000058B0 67F0                       		beq.s	SS_ToSegaScreen
000058B2 4E75                       		rts
000058B4                            
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            ; Special stage	background loading subroutine
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            
000058B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058B4                            
000058B4                            
000058B4                            SS_BGLoad:
000058B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058BA 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000058C0 303C 4051                  		move.w	#$4051,d0
000058C4 6100 BFC6                  		bsr.w	EniDec
000058C8 263C 5000 0001             		move.l	#$50000001,d3
000058CE 45F9 00FF 0080             		lea	($FF0080).l,a2
000058D4 7E06                       		moveq	#6,d7
000058D6                            
000058D6                            loc_48BE:
000058D6 2003                       		move.l	d3,d0
000058D8 7C03                       		moveq	#3,d6
000058DA 7800                       		moveq	#0,d4
000058DC 0C47 0003                  		cmpi.w	#3,d7
000058E0 6400                       		bhs.s	loc_48CC
000058E2 7801                       		moveq	#1,d4
000058E4                            
000058E4                            loc_48CC:
000058E4 7A07                       		moveq	#7,d5
000058E6                            
000058E6                            loc_48CE:
000058E6 224A                       		movea.l	a2,a1
000058E8 0A04 0001                  		eori.b	#1,d4
000058EC 6600                       		bne.s	loc_48E2
000058EE 0C47 0006                  		cmpi.w	#6,d7
000058F2 6600                       		bne.s	loc_48F2
000058F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058FA                            
000058FA                            loc_48E2:
000058FA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058FE 7207                       		moveq	#7,d1
00005900 7407                       		moveq	#7,d2
00005902 6100 B9D4                  		bsr.w	TilemapToVRAM
00005906 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000590A                            
0000590A                            loc_48F2:
0000590A 0680 0010 0000             		addi.l	#$100000,d0
00005910 51CD FFD4                  		dbf	d5,loc_48CE
00005914 0680 0380 0000             		addi.l	#$3800000,d0
0000591A 0A04 0001                  		eori.b	#1,d4
0000591E 51CE FFC4                  		dbf	d6,loc_48CC
00005922 0683 1000 0000             		addi.l	#$10000000,d3
00005928 6A00                       		bpl.s	loc_491C
0000592A 4843                       		swap	d3
0000592C 0683 0000 C000             		addi.l	#$C000,d3
00005932 4843                       		swap	d3
00005934                            
00005934                            loc_491C:
00005934 D4FC 0080                  		adda.w	#$80,a2
00005938 51CF FF9C                  		dbf	d7,loc_48BE
0000593C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005942 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005948 303C 4000                  		move.w	#$4000,d0
0000594C 6100 BF3E                  		bsr.w	EniDec
00005950 43F9 00FF 0000             		lea	($FF0000).l,a1
00005956 203C 4000 0003             		move.l	#$40000003,d0
0000595C 723F                       		moveq	#$3F,d1
0000595E 741F                       		moveq	#$1F,d2
00005960 6100 B976                  		bsr.w	TilemapToVRAM
00005964 43F9 00FF 0000             		lea	($FF0000).l,a1
0000596A 203C 5000 0003             		move.l	#$50000003,d0
00005970 723F                       		moveq	#$3F,d1
00005972 743F                       		moveq	#$3F,d2
00005974 6100 B962                  		bsr.w	TilemapToVRAM
00005978 4E75                       		rts	
0000597A                            ; End of function SS_BGLoad
0000597A                            
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            ; Palette cycling routine - special stage
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            
0000597A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000597A                            
0000597A                            
0000597A                            PalCycle_SS:
0000597A 4A78 F63A                  		tst.w	(f_pause).w
0000597E 6600                       		bne.s	locret_49E6
00005980 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005984 6A00                       		bpl.s	locret_49E6
00005986 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000598C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005990 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005994 0240 001F                  		andi.w	#$1F,d0
00005998 E548                       		lsl.w	#2,d0
0000599A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059A0 D0C0                       		adda.w	d0,a0
000059A2 1018                       		move.b	(a0)+,d0
000059A4 6A00                       		bpl.s	loc_4992
000059A6 303C 01FF                  		move.w	#$1FF,d0
000059AA                            
000059AA                            loc_4992:
000059AA 31C0 F79C                  		move.w	d0,(v_palss_time).w
000059AE 7000                       		moveq	#0,d0
000059B0 1018                       		move.b	(a0)+,d0
000059B2 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000059B6 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000059BC 43F1 0000                  		lea	(a1,d0.w),a1
000059C0 303C 8200                  		move.w	#-$7E00,d0
000059C4 1019                       		move.b	(a1)+,d0
000059C6 3C80                       		move.w	d0,(a6)
000059C8 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
000059CC 303C 8400                  		move.w	#-$7C00,d0
000059D0 1018                       		move.b	(a0)+,d0
000059D2 3C80                       		move.w	d0,(a6)
000059D4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059DE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059E6 7000                       		moveq	#0,d0
000059E8 1018                       		move.b	(a0)+,d0
000059EA 6B00                       		bmi.s	loc_49E8
000059EC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059F2 D2C0                       		adda.w	d0,a1
000059F4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059F8 24D9                       		move.l	(a1)+,(a2)+
000059FA 24D9                       		move.l	(a1)+,(a2)+
000059FC 24D9                       		move.l	(a1)+,(a2)+
000059FE                            
000059FE                            locret_49E6:
000059FE 4E75                       		rts	
00005A00                            ; ===========================================================================
00005A00                            
00005A00                            loc_49E8:
00005A00 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A04 0C40 008A                  		cmpi.w	#$8A,d0
00005A08 6500                       		blo.s	loc_49F4
00005A0A 5241                       		addq.w	#1,d1
00005A0C                            
00005A0C                            loc_49F4:
00005A0C C2FC 002A                  		mulu.w	#$2A,d1
00005A10 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A16 D2C1                       		adda.w	d1,a1
00005A18 0240 007F                  		andi.w	#$7F,d0
00005A1C 0880 0000                  		bclr	#0,d0
00005A20 6700                       		beq.s	loc_4A18
00005A22 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A26 24D1                       		move.l	(a1),(a2)+
00005A28 24E9 0004                  		move.l	4(a1),(a2)+
00005A2C 24E9 0008                  		move.l	8(a1),(a2)+
00005A30                            
00005A30                            loc_4A18:
00005A30 D2FC 000C                  		adda.w	#$C,a1
00005A34 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A38 0C40 000A                  		cmpi.w	#$A,d0
00005A3C 6500                       		blo.s	loc_4A2E
00005A3E 0440 000A                  		subi.w	#$A,d0
00005A42 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A46                            
00005A46                            loc_4A2E:
00005A46 3200                       		move.w	d0,d1
00005A48 D040                       		add.w	d0,d0
00005A4A D041                       		add.w	d1,d0
00005A4C D2C0                       		adda.w	d0,a1
00005A4E 24D9                       		move.l	(a1)+,(a2)+
00005A50 34D9                       		move.w	(a1)+,(a2)+
00005A52 4E75                       		rts	
00005A54                            ; End of function PalCycle_SS
00005A54                            
00005A54                            ; ===========================================================================
00005A54 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A64                            
00005A64 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A74 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A84 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A94 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005AA4 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005AB4 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005AC4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AD4                            		even
00005AD4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AE2                            		even
00005AE2                            
00005AE2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B2A                            		even
00005B2A                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BFC                            		even
00005BFC                            
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            ; Subroutine to	make the special stage background animated
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            
00005BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BFC                            
00005BFC                            
00005BFC                            SS_BGAnimate:
00005BFC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C00 6600                       		bne.s	loc_4BF6
00005C02 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C08 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C0E                            
00005C0E                            loc_4BF6:
00005C0E 0C40 0008                  		cmpi.w	#8,d0
00005C12 6400                       		bhs.s	loc_4C4E
00005C14 0C40 0006                  		cmpi.w	#6,d0
00005C18 6600                       		bne.s	loc_4C10
00005C1A 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C1E 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C22 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C28                            
00005C28                            loc_4C10:
00005C28 7000                       		moveq	#0,d0
00005C2A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C2E 4440                       		neg.w	d0
00005C30 4840                       		swap	d0
00005C32 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C38 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C3C 7609                       		moveq	#9,d3
00005C3E                            
00005C3E                            loc_4C26:
00005C3E 302B 0002                  		move.w	2(a3),d0
00005C42 6100 DDF2                  		bsr.w	CalcSine
00005C46 7400                       		moveq	#0,d2
00005C48 1419                       		move.b	(a1)+,d2
00005C4A C1C2                       		muls.w	d2,d0
00005C4C E080                       		asr.l	#8,d0
00005C4E 36C0                       		move.w	d0,(a3)+
00005C50 1419                       		move.b	(a1)+,d2
00005C52 4882                       		ext.w	d2
00005C54 D55B                       		add.w	d2,(a3)+
00005C56 51CB FFE6                  		dbf	d3,loc_4C26
00005C5A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C5E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C64 6000                       		bra.s	loc_4C7E
00005C66                            ; ===========================================================================
00005C66                            
00005C66                            loc_4C4E:
00005C66 0C40 000C                  		cmpi.w	#$C,d0
00005C6A 6600                       		bne.s	loc_4C74
00005C6C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C70 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C74 243C 0001 8000             		move.l	#$18000,d2
00005C7A 7206                       		moveq	#6,d1
00005C7C                            
00005C7C                            loc_4C64:
00005C7C 2013                       		move.l	(a3),d0
00005C7E 9082                       		sub.l	d2,d0
00005C80 26C0                       		move.l	d0,(a3)+
00005C82 0482 0000 2000             		subi.l	#$2000,d2
00005C88 51C9 FFF2                  		dbf	d1,loc_4C64
00005C8C                            
00005C8C                            loc_4C74:
00005C8C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C90 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C96                            
00005C96                            loc_4C7E:
00005C96 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C9A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C9E 4440                       		neg.w	d0
00005CA0 4840                       		swap	d0
00005CA2 7600                       		moveq	#0,d3
00005CA4 161A                       		move.b	(a2)+,d3
00005CA6 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005CAA 4442                       		neg.w	d2
00005CAC 0242 00FF                  		andi.w	#$FF,d2
00005CB0 E54A                       		lsl.w	#2,d2
00005CB2                            
00005CB2                            loc_4C9A:
00005CB2 301B                       		move.w	(a3)+,d0
00005CB4 544B                       		addq.w	#2,a3
00005CB6 7200                       		moveq	#0,d1
00005CB8 121A                       		move.b	(a2)+,d1
00005CBA 5341                       		subq.w	#1,d1
00005CBC                            
00005CBC                            loc_4CA4:
00005CBC 2380 2000                  		move.l	d0,(a1,d2.w)
00005CC0 5842                       		addq.w	#4,d2
00005CC2 0242 03FC                  		andi.w	#$3FC,d2
00005CC6 51C9 FFF4                  		dbf	d1,loc_4CA4
00005CCA 51CB FFE6                  		dbf	d3,loc_4C9A
00005CCE 4E75                       		rts	
00005CD0                            ; End of function SS_BGAnimate
00005CD0                            
00005CD0                            ; ===========================================================================
00005CD0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CDC                            		even
00005CDC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CE4                            		even
00005CE4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CF8                            		even
00005CF8                            
00005CF8                            ; ===========================================================================
00005CF8                            
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Continue screen
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            GM_Continue:
00005CF8 6100 C48C                  		bsr.w	PaletteFadeOut
00005CFC 46FC 2700                  		disable_ints
00005D00 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D04 0200 00BF                  		andi.b	#$BF,d0
00005D08 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D0E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D14 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D18 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D1C 6100 B466                  		bsr.w	ClearScreen
00005D20 31FC C800 C8FC             		ResetDMAQueue
00005D26 4EB8 10A6                  		jsr		ReadJoypads
00005D2A 43F8 D000                  		lea	(v_objspace).w,a1
00005D2E 7000                       		moveq	#0,d0
00005D30 323C 07FF                  		move.w	#$7FF,d1
00005D34                            	Cont_ClrObjRam:
00005D34 22C0                       		move.l	d0,(a1)+
00005D36 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D3A                            
00005D44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D4A 6100 B5B6                  		bsr.w	NemDec
00005D58 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D5E 6100 B5A2                  		bsr.w	NemDec
00005D6C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D72 6100 B58E                  		bsr.w	NemDec
00005D76 720A                       		moveq	#10,d1
00005D78 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D7E 7012                       		moveq	#palid_Continue,d0
00005D80 6100 C6AE                  		bsr.w	PalLoad1	; load continue	screen palette
00005D8C 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D92 42B8 F700                  		clr.l	(v_screenposx).w
00005D96 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D9E 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005DA4 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005DAA 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005DB0 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005DB6 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005DBC 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005DC2 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005DC8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DCE 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DD4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005DD8 0000 0040                  		ori.b	#$40,d0
00005DDC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DE2 6100 C2FC                  		bsr.w	PaletteFadeIn
00005DE6                            
00005DE6                            ; ---------------------------------------------------------------------------
00005DE6                            ; Continue screen main loop
00005DE6                            ; ---------------------------------------------------------------------------
00005DE6                            
00005DE6                            Cont_MainLoop:
00005DE6 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DEC 6100 DC16                  		bsr.w	WaitForVBla
00005DF0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF6 6400                       		bhs.s	loc_4DF2
00005DF8 46FC 2700                  		disable_ints
00005DFC 3238 F614                  		move.w	(v_demolength).w,d1
00005E00 82FC 003C                  		divu.w	#$3C,d1
00005E04 0281 0000 000F             		andi.l	#$F,d1
00005E0A 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E10 46FC 2300                  		enable_ints
00005E14                            
00005E14                            loc_4DF2:
00005E14 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E1A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E20 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E26 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E28 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E2E 64B6                       		bhs.s	Cont_MainLoop
00005E30 4A78 F614                  		tst.w	(v_demolength).w
00005E34 6600 FFB0                  		bne.w	Cont_MainLoop
00005E38 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E3E 4E75                       		rts	
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            Cont_GotoLevel:
00005E40 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E46 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E4C 7000                       		moveq	#0,d0
00005E4E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E52 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E56 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E5A 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E5E 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E62 4E75                       		rts	
00005E64                            ; ===========================================================================
00005E64                            
00005E64                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E64                            ; ---------------------------------------------------------------------------
00005E64                            ; Object 80 - Continue screen elements
00005E64                            ; ---------------------------------------------------------------------------
00005E64                            
00005E64                            ContScrItem:
00005E64 7000                       		moveq	#0,d0
00005E66 1028 0024                  		move.b	$24(a0),d0
00005E6A 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E6E 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E72                            ; ===========================================================================
00005E72 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E74 0000                       		dc.w CSI_Display-CSI_Index
00005E76 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E78 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E7A                            ; ===========================================================================
00005E7A                            
00005E7A                            CSI_Main:	; Routine 0
00005E7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E7E 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E86 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E8C 117C 0000 0001             		move.b	#0,obRender(a0)
00005E92 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E98 317C 0120 0008             		move.w	#$120,obX(a0)
00005E9E 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005EA4 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005EAA                            
00005EAA                            CSI_Display:	; Routine 2
00005EAA 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005EB0                            ; ===========================================================================
00005EB0                            
00005EB0                            	CSI_MiniSonicPos:
00005EB0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005EC2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005ECE                            
00005ECE                            CSI_MakeMiniSonic:
00005ECE                            		; Routine 4
00005ECE 2248                       		movea.l	a0,a1
00005ED0 45F9 0000 5EB0             		lea	(CSI_MiniSonicPos).l,a2
00005ED6 7200                       		moveq	#0,d1
00005ED8 1238 FE18                  		move.b	(v_continues).w,d1
00005EDC 5501                       		subq.b	#2,d1
00005EDE 6400                       		bcc.s	CSI_MoreThan1
00005EE0 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EE6                            
00005EE6                            	CSI_MoreThan1:
00005EE6 7601                       		moveq	#1,d3
00005EE8 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EEC 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EEE                            
00005EEE 7600                       		moveq	#0,d3
00005EF0 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EF2                            
00005EF2                            	CSI_FewerThan16:
00005EF2 1401                       		move.b	d1,d2
00005EF4 0202 0001                  		andi.b	#1,d2
00005EF8                            
00005EF8                            CSI_MiniSonicLoop:
00005EF8 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EFC 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005F00 4A02                       		tst.b	d2		; do you have an even number of continues?
00005F02 6700                       		beq.s	CSI_Even	; if yes, branch
00005F04 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005F0A                            
00005F0A                            	CSI_Even:
00005F0A 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F10 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F16 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F1C 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F24 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F2A 137C 0000 0001             		move.b	#0,obRender(a1)
00005F30 43E9 0040                  		lea	$40(a1),a1
00005F34 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F38                            
00005F38 43E9 FFC0                  		lea	-$40(a1),a1
00005F3C 1343 0028                  		move.b	d3,obSubtype(a1)
00005F40                            
00005F40                            CSI_ChkDel:	; Routine 6
00005F40 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F44 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F46 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F4C 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F4E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F52 0200 0001                  		andi.b	#1,d0
00005F56 6600                       		bne.s	CSI_Animate
00005F58 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F5C 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F5E 4E75                       		rts	
00005F60                            
00005F60                            CSI_Animate:
00005F60 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F64 0200 000F                  		andi.b	#$F,d0
00005F68 6600                       		bne.s	CSI_Display2
00005F6A 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F70                            
00005F70                            	CSI_Display2:
00005F70 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F76                            ; ===========================================================================
00005F76                            
00005F76                            CSI_Delete:
00005F76 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F76 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F7C                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            ; Object 81 - Sonic on the continue screen
00005F7C                            ; ---------------------------------------------------------------------------
00005F7C                            
00005F7C                            ContSonic:
00005F7C 7000                       		moveq	#0,d0
00005F7E 1028 0024                  		move.b	obRoutine(a0),d0
00005F82 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F86 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F8A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F90                            ; ===========================================================================
00005F90 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F92 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F94 0000                       		dc.w CSon_Animate-CSon_Index
00005F96 0000                       		dc.w CSon_Run-CSon_Index
00005F98                            ; ===========================================================================
00005F98                            
00005F98                            CSon_Main:	; Routine 0
00005F98 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F9C 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005FA2 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005FA8 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FB0 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FB6 117C 0004 0001             		move.b	#4,obRender(a0)
00005FBC 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005FC2 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005FC8 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005FCE                            
00005FCE                            CSon_ChkLand:	; Routine 2
00005FCE 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005FD4 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005FD6                            
00005FD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FDA 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FDE 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FE6 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FEC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FF2 6000                       		bra.s	CSon_Animate
00005FF4                            
00005FF4                            CSon_ShowFall:
00005FF4 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FFA 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006000 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006006                            ; ===========================================================================
00006006                            
00006006                            CSon_Animate:	; Routine 4
00006006 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
0000600A 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
0000600C 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006012 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006018                            
00006018                            CSon_GetUp:
00006018 5428 0024                  		addq.b	#2,obRoutine(a0)
0000601C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006024 317C 0780 0002             		move.w	#$780,obGfx(a0)
0000602A 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006030 4268 0020                  		clr.w	obInertia(a0)
00006034 5168 000C                  		subq.w	#8,obY(a0)
00006040                            
00006040                            CSon_Run:	; Routine 6
00006040 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006046 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006048 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
0000604E 6000                       		bra.s	CSon_ShowRun
00006050                            
00006050                            CSon_AddInertia:
00006050 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006056                            
00006056                            CSon_ShowRun:
00006056 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000605C 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006062 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006062 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006068                            		include	"_anim\Continue Screen Sonic.asm"
00006068                            ; ---------------------------------------------------------------------------
00006068                            ; Animation script - Sonic on the continue screen
00006068                            ; ---------------------------------------------------------------------------
00006068 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
0000606A 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
00006076 00                         		even
00006076 00                         		even
00006076                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006076                            ; ---------------------------------------------------------------------------
00006076                            ; Sprite mappings - Continue screen
00006076                            ; ---------------------------------------------------------------------------
00006076                            Map_ContScr_internal:
00006076 0000                       		dc.w M_Cont_text-Map_ContScr_internal
00006078 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
0000607A 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
0000607C 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
0000607E 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006080 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006082 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006084 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
00006086 0B                         M_Cont_text:	dc.b $B
00006087 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000608C F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006091 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00006096 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000609B F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000060A0 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000060A5 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000060AA F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000060AF 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000060B4 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000060B9 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000060BE 03                         M_Cont_Sonic1:	dc.b 3
000060BF 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000060C4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060C9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060CE 03                         M_Cont_Sonic2:	dc.b 3
000060CF 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000060D4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060D9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060DE 03                         M_Cont_Sonic3:	dc.b 3
000060DF 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060E4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060E9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060EE 02                         M_Cont_oval:	dc.b 2
000060EF 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060F4 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060F9 01                         M_Cont_Mini1:	dc.b 1
000060FA 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060FF 01                         M_Cont_Mini2:	dc.b 1
00006100 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00006106 00                         		even
00006106 00                         		even
00006106                            
00006106                            ; ===========================================================================
00006106                            ; ---------------------------------------------------------------------------
00006106                            ; Ending sequence in Green Hill	Zone
00006106                            ; ---------------------------------------------------------------------------
00006106                            
00006106                            GM_Ending:
0000610E 6100 C076                  		bsr.w	PaletteFadeOut
00006112                            
00006112 43F8 D000                  		lea	(v_objspace).w,a1
00006116 7000                       		moveq	#0,d0
00006118 323C 07FF                  		move.w	#$7FF,d1
0000611C                            	End_ClrObjRam:
0000611C 22C0                       		move.l	d0,(a1)+
0000611E 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006122                            
00006122 43F8 F628                  		lea	($FFFFF628).w,a1
00006126 7000                       		moveq	#0,d0
00006128 323C 0015                  		move.w	#$15,d1
0000612C                            	End_ClrRam1:
0000612C 22C0                       		move.l	d0,(a1)+
0000612E 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006132                            
00006132 43F8 F700                  		lea	(v_screenposx).w,a1
00006136 7000                       		moveq	#0,d0
00006138 323C 003F                  		move.w	#$3F,d1
0000613C                            	End_ClrRam2:
0000613C 22C0                       		move.l	d0,(a1)+
0000613E 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006142                            
00006142 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006146 7000                       		moveq	#0,d0
00006148 323C 0047                  		move.w	#$47,d1
0000614C                            	End_ClrRam3:
0000614C 22C0                       		move.l	d0,(a1)+
0000614E 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006152                            
00006152 46FC 2700                  		disable_ints
00006156 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000615A 0200 00BF                  		andi.b	#$BF,d0
0000615E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006164 6100 B01E                  		bsr.w	ClearScreen
00006168 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000616E 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006172 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006176 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000617A 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000617E 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006182 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006186 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000618A 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006190 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006194 31FC 001E FE14             		move.w	#30,(v_air).w
0000619A 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000061A0 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000061A6 6700                       		beq.s	End_LoadData	; if yes, branch
000061A8 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000061AE                            
000061AE                            End_LoadData:
000061AE 7000                       		moveq	#plcid_Ending,d0
000061B0 6100 B6A8                  		bsr.w	QuickPLC	; load ending sequence patterns
000061B4 4EB9 0000 0000             		jsr	(Hud_Base).l
000061BA 6100 0000                  		bsr.w	LevelSizeLoad
000061BE 6100 0000                  		bsr.w	DeformLayers
000061C2 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000061C8 6100 0000                  		bsr.w	LevelDataLoad
000061CC 6100 0000                  		bsr.w	LoadTilesFromStart
000061D0 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000061D8 46FC 2300                  		enable_ints
000061DC 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061E2 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061E6 6100 B822                  		bsr.w	KosDec
000061EA 4EB9 0000 0000             		jsr		LoadPlayerPal
000061F0 6100 C23E                  		bsr.w	PalLoad1	; load Sonic's palette
000061FC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00006202 6700                       		beq.s	End_LoadSonic	; if not, branch
00006204 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000620A                            
0000620A                            End_LoadSonic:
0000620A 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006210 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006216 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000621C 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006222 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
00006228 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000622E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006234 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000623A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006240 7000                       		moveq	#0,d0
00006242 31C0 FE20                  		move.w	d0,(v_rings).w
00006246 21C0 FE22                  		move.l	d0,(v_time).w
0000624A 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000624E 11C0 FE2C                  		move.b	d0,(v_shield).w
00006252 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006256 11C0 FE2E                  		move.b	d0,(v_shoes).w
0000625A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000625E 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006262 31C0 FE02                  		move.w	d0,(f_restart).w
00006266 31C0 FE04                  		move.w	d0,(v_framecount).w
0000626A 6100 EEBC                  		bsr.w	OscillateNumInit
0000626E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006274 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
0000627A 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006280 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006286 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000628C 6100 D776                  		bsr.w	WaitForVBla
00006290 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006294 0000 0040                  		ori.b	#$40,d0
00006298 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000629E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062A4 6100 BE3A                  		bsr.w	PaletteFadeIn
000062A8                            
000062A8                            ; ---------------------------------------------------------------------------
000062A8                            ; Main ending sequence loop
000062A8                            ; ---------------------------------------------------------------------------
000062A8                            
000062A8                            End_MainLoop:
000062A8 6100 AFB6                  		bsr.w	PauseGame
000062AC 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062B2 6100 D750                  		bsr.w	WaitForVBla
000062B6 5278 FE04                  		addq.w	#1,(v_framecount).w
000062BA 6100 0000                  		bsr.w	End_MoveSonic
000062BE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062C4 6100 0000                  		bsr.w	DeformLayers
000062C8 4EB9 0000 0000             		jsr	(BuildSprites).l
000062CE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000062D4 6100 B9FC                  		bsr.w	PaletteCycle
000062D8 6100 EEA4                  		bsr.w	OscillateNumDo
000062DC 6100 EF30                  		bsr.w	SynchroAnimate
000062E0 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062E6 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062E8                            
000062E8 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062F6 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062FC 4E75                       		rts	
000062FE                            ; ===========================================================================
000062FE                            
000062FE                            End_ChkEmerald:
000062FE 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
00006302 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00006306                            
00006306 4278 FE02                  		clr.w	(f_restart).w
0000630A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006310 4278 F794                  		clr.w	(v_palchgspeed).w
00006314                            
00006314                            	End_AllEmlds:
00006314 6100 AF4A                  		bsr.w	PauseGame
00006318 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000631E 6100 D6E4                  		bsr.w	WaitForVBla
00006322 5278 FE04                  		addq.w	#1,(v_framecount).w
00006326 6100 0000                  		bsr.w	End_MoveSonic
0000632A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006330 6100 0000                  		bsr.w	DeformLayers
00006334 4EB9 0000 0000             		jsr	(BuildSprites).l
0000633A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006340 6100 EE3C                  		bsr.w	OscillateNumDo
00006344 6100 EEC8                  		bsr.w	SynchroAnimate
00006348 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000634C 6A00                       		bpl.s	End_SlowFade
0000634E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006354 6100 BF7A                  		bsr.w	WhiteOut_ToWhite
00006358                            
00006358                            	End_SlowFade:
00006358 4A78 FE02                  		tst.w	(f_restart).w
0000635C 6700 FFB6                  		beq.w	End_AllEmlds
00006360 4278 FE02                  		clr.w	(f_restart).w
00006364 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000636A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006370 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006376 47F8 F700                  		lea	(v_screenposx).w,a3
0000637A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000637E 343C 4000                  		move.w	#$4000,d2
00006382 6100 0000                  		bsr.w	DrawChunks
00006386 7013                       		moveq	#palid_Ending,d0
00006388 6100 C0A6                  		bsr.w	PalLoad1	; load ending palette
0000638C 6100 BE76                  		bsr.w	PaletteWhiteIn
00006390 6000 FF16                  		bra.w	End_MainLoop
00006394                            
00006394                            ; ---------------------------------------------------------------------------
00006394                            ; Subroutine controlling Sonic on the ending sequence
00006394                            ; ---------------------------------------------------------------------------
00006394                            
00006394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006394                            
00006394                            
00006394                            End_MoveSonic:
00006394 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006398 6600                       		bne.s	End_MoveSon2
0000639A 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000063A0 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000063A2                            
000063A2 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063A6 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000063AC 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000063B2 4E75                       		rts	
000063B4                            ; ===========================================================================
000063B4                            
000063B4                            End_MoveSon2:
000063B4 5500                       		subq.b	#2,d0
000063B6 6600                       		bne.s	End_MoveSon3
000063B8 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000063BE 6500                       		blo.s	End_MoveSonExit	; if not, branch
000063C0                            
000063C0 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063C4 7000                       		moveq	#0,d0
000063C6 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000063CA 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000063CE 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000063D2 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000063D8 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063DE 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063E4 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063EA 4E75                       		rts	
000063EC                            ; ===========================================================================
000063EC                            
000063EC                            End_MoveSon3:
000063EC 5500                       		subq.b	#2,d0
000063EE 6600                       		bne.s	End_MoveSonExit
000063F0 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063F4 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063FA 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
00006400 4278 D024                  		clr.w	(v_player+obRoutine).w
00006404                            
00006404                            End_MoveSonExit:
00006404 4E75                       		rts	
00006406                            ; End of function End_MoveSonic
00006406                            
00006406                            ; ===========================================================================
00006406                            
00006406                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006406                            ; ---------------------------------------------------------------------------
00006406                            ; Object 87 - Sonic on ending sequence
00006406                            ; ---------------------------------------------------------------------------
00006406                            
00006406                            EndSonic:
00006406 7000                       		moveq	#0,d0
00006408 1028 0025                  		move.b	ob2ndRout(a0),d0
0000640C 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006410 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006414 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000641A                            ; ===========================================================================
0000641A 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
0000641E 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006422 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006426 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000642A 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
0000642E                            
0000642E =00000030                  eson_time:	equ $30	; time to wait between events
0000642E                            ; ===========================================================================
0000642E                            
0000642E                            ESon_Main:	; Routine 0
0000642E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006434 6700                       		beq.s	ESon_Main2	; if yes, branch
00006436 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
0000643C 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006442 4E75                       		rts	
00006444                            ; ===========================================================================
00006444                            
00006444                            ESon_Main2:
00006444 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006448 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006450 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006456 117C 0004 0001             		move.b	#4,obRender(a0)
0000645C 4228 0022                  		clr.b	obStatus(a0)
00006460 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006466 117C 0000 001A             		move.b	#0,obFrame(a0)
0000646C 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006472                            
00006472                            ESon_MakeEmeralds:
00006472                            		; Routine 2
00006472 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
00006476 6600                       		bne.s	ESon_Wait
00006478 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000647C 317C 0001 001C             		move.w	#1,obAnim(a0)
00006482 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
00006488                            
00006488                            	ESon_Wait:
00006488 4E75                       		rts	
0000648A                            ; ===========================================================================
0000648A                            
0000648A                            Obj87_LookUp:	; Routine 6
0000648A 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006492 6600                       		bne.s	locret_5480
00006494 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000649A 317C 005A 0030             		move.w	#90,eson_time(a0)
000064A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A4                            
000064A4                            locret_5480:
000064A4 4E75                       		rts	
000064A6                            ; ===========================================================================
000064A6                            
000064A6                            Obj87_ClrObjRam:
000064A6                            		; Routine 8
000064A6 5368 0030                  		subq.w	#1,eson_time(a0)
000064AA 6600                       		bne.s	ESon_Wait2
000064AC 43F8 D400                  		lea	(v_objspace+$400).w,a1
000064B0 323C 00FF                  		move.w	#$FF,d1
000064B4                            
000064B4                            Obj87_ClrLoop:
000064B4 4299                       		clr.l	(a1)+
000064B6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000064BA 31FC 0001 FE02             		move.w	#1,(f_restart).w
000064C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064C4 117C 0001 001C             		move.b	#1,obAnim(a0)
000064CA 317C 003C 0030             		move.w	#60,eson_time(a0)
000064D0                            
000064D0                            ESon_Wait2:
000064D0 4E75                       		rts	
000064D2                            ; ===========================================================================
000064D2                            
000064D2                            Obj87_MakeLogo:	; Routine $C
000064D2 5368 0030                  		subq.w	#1,eson_time(a0)
000064D6 6600                       		bne.s	ESon_Wait3
000064D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064DC 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064E2 117C 0002 001C             		move.b	#2,obAnim(a0)
000064E8 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064EE                            
000064EE                            ESon_Wait3:
000064EE 4E75                       		rts	
000064F0                            ; ===========================================================================
000064F0                            
000064F0                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064F0 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064F6 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064FC                            ; ===========================================================================
000064FC                            
000064FC                            Obj87_Leap:	; Routine $10
000064FC 5368 0030                  		subq.w	#1,eson_time(a0)
00006500 6600                       		bne.s	ESon_Wait4
00006502 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006506 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
0000650E 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006514 117C 0004 0001             		move.b	#4,obRender(a0)
0000651A 4228 0022                  		clr.b	obStatus(a0)
0000651E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006524 117C 0005 001A             		move.b	#5,obFrame(a0)
0000652A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006530 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006536 60B8                       		bra.s	Obj87_Animate
00006538                            ; ===========================================================================
00006538                            
00006538                            ESon_Wait4:
00006538 4E75                       		rts	
00006538 4E75                       		rts	
0000653A                            		include "_anim\Ending Sequence Sonic.asm"
0000653A                            ; ---------------------------------------------------------------------------
0000653A                            ; Animation script - Sonic on the ending sequence
0000653A                            ; ---------------------------------------------------------------------------
0000653A 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
0000653C 0000                       		dc.w byte_552A-AniScript_ESon
0000653E 0000                       		dc.w byte_5534-AniScript_ESon
00006540 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000654E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006558 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006560                            		even
00006560                            		even
00006560                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006560                            ; ---------------------------------------------------------------------------
00006560                            ; Object 88 - chaos emeralds on	the ending sequence
00006560                            ; ---------------------------------------------------------------------------
00006560                            
00006560                            EndChaos:
00006560 7000                       		moveq	#0,d0
00006562 1028 0024                  		move.b	obRoutine(a0),d0
00006566 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000656A 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
0000656E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006574                            ; ===========================================================================
00006574 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
00006576 0000                       		dc.w ECha_Move-ECha_Index
00006578                            
00006578 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
00006578 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
00006578 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
00006578 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
00006578                            ; ===========================================================================
00006578                            
00006578                            ECha_Main:	; Routine 0
00006578 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
0000657E 6700                       		beq.s	ECha_CreateEms
00006580 588F                       		addq.l	#4,sp
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            ECha_CreateEms:
00006584 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000658A 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006590 2248                       		movea.l	a0,a1
00006592 7600                       		moveq	#0,d3
00006594 7401                       		moveq	#1,d2
00006596 7205                       		moveq	#5,d1
00006598                            
00006598                            	ECha_LoadLoop:
00006598 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
0000659C 5429 0024                  		addq.b	#2,obRoutine(a1)
000065A0 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
000065A8 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000065AE 137C 0004 0001             		move.b	#4,obRender(a1)
000065B4 337C 0080 0018             		move.w	#$80,obPriority(a1)
000065BA 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000065C0 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000065C6 1342 001C                  		move.b	d2,obAnim(a1)
000065CA 1342 001A                  		move.b	d2,obFrame(a1)
000065CE 5202                       		addq.b	#1,d2
000065D0 1343 0026                  		move.b	d3,obAngle(a1)
000065D4 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000065D8 43E9 0040                  		lea	$40(a1),a1
000065DC 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065E0                            
000065E0                            ECha_Move:	; Routine 2
000065E0 3028 003E                  		move.w	echa_angle(a0),d0
000065E4 D168 0026                  		add.w	d0,obAngle(a0)
000065E8 1028 0026                  		move.b	obAngle(a0),d0
000065EC 4EB9 0000 3A36             		jsr	(CalcSine).l
000065F2 7800                       		moveq	#0,d4
000065F4 1828 003C                  		move.b	echa_radius(a0),d4
000065F8 C3C4                       		muls.w	d4,d1
000065FA E081                       		asr.l	#8,d1
000065FC C1C4                       		muls.w	d4,d0
000065FE E080                       		asr.l	#8,d0
00006600 D268 0038                  		add.w	echa_origX(a0),d1
00006604 D068 003A                  		add.w	echa_origY(a0),d0
00006608 3141 0008                  		move.w	d1,obX(a0)
0000660C 3140 000C                  		move.w	d0,obY(a0)
00006610                            
00006610                            	ECha_Expand:
00006610 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006616 6700                       		beq.s	ECha_Rotate
00006618 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
0000661E                            
0000661E                            	ECha_Rotate:
0000661E 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006624 6700                       		beq.s	ECha_Rise
00006626 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
0000662C                            
0000662C                            	ECha_Rise:
0000662C 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006632 6700                       		beq.s	ECha_End
00006634 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
00006638                            
00006638                            ECha_End:
00006638 4E75                       		rts	
00006638 4E75                       		rts	
0000663A                            		include	"_incObj\89 Ending Sequence STH.asm"
0000663A                            ; ---------------------------------------------------------------------------
0000663A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000663A                            ; ---------------------------------------------------------------------------
0000663A                            
0000663A                            EndSTH:
0000663A 7000                       		moveq	#0,d0
0000663C 1028 0024                  		move.b	$24(a0),d0
00006640 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006644 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
00006648 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000664E                            ; ===========================================================================
0000664E 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006650 0000                       		dc.w ESth_Move-ESth_Index
00006652 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006654                            
00006654 =00000030                  esth_time:	equ $30		; time until exit
00006654                            ; ===========================================================================
00006654                            
00006654                            ESth_Main:	; Routine 0
00006654 5428 0024                  		addq.b	#2,obRoutine(a0)
00006658 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
0000665E 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006664 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
0000666C 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006672 117C 0000 0001             		move.b	#0,obRender(a0)
00006678 317C 0000 0018             		move.w	#0,obPriority(a0)
0000667E                            
0000667E                            ESth_Move:	; Routine 2
0000667E 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006684 6700                       		beq.s	ESth_Delay	; if yes, branch
00006686 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
0000668C 4E75                       		rts
0000668E                            
0000668E                            ESth_Delay:
0000668E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006692 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006698                            
00006698                            ESth_GotoCredits:
00006698                            		; Routine 4
00006698 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
0000669C 6A00                       		bpl.s	ESth_Wait
0000669E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
000066A4                            
000066A4                            	ESth_Wait:
000066A4 4E75                       		rts
000066A6                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
000066A6                            ; ---------------------------------------------------------------------------
000066A6                            ; Sprite mappings - Sonic on the ending	sequence
000066A6                            ; ---------------------------------------------------------------------------
000066A6                            Map_ESon_internal:
000066A6 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
000066A8 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
000066AA 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000066AC 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000066AE 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000066B0 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000066B2 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000066B4 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000066B6 02                         M_ESon_Hold1:	dc.b 2
000066B7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000066BC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066C1 03                         M_ESon_Hold2:	dc.b 3
000066C2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000066C7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000066CC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066D1 02                         M_ESon_Up:	dc.b 2
000066D2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000066D7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066DC 02                         M_ESon_Conf1:	dc.b 2
000066DD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066E2 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066E7 02                         M_ESon_Conf2:	dc.b 2
000066E8 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066ED FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066F2 03                         M_ESon_Leap1:	dc.b 3
000066F3 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066F8 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066FD 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006702 07                         M_ESon_Leap2:	dc.b 7
00006703 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006708 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000670D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006712 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006717 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000671C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006721 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006726 18                         M_ESon_Leap3:	dc.b $18
00006727 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000672C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006731 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006736 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000673B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006740 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006745 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000674A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000674F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006754 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006759 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000675E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006763 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006768 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000676D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006772 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006777 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000677C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006781 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006786 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000678B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006790 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006795 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000679A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000067A0 00                         		even
000067A0 00                         		even
000067A0                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000067A0                            ; --------------------------------------------------------------------------------
000067A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000067A0                            ; --------------------------------------------------------------------------------
000067A0                            
000067A0                            SME_0ZTmS:	
000067A0 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
000067A4 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
000067A8 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000067AC 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000067AE 01                         SME_0ZTmS_E:	dc.b 1	
000067AF F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000067B4 01                         SME_0ZTmS_14:	dc.b 1	
000067B5 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000067BA 01                         SME_0ZTmS_1A:	dc.b 1	
000067BB F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000067C0 01                         SME_0ZTmS_20:	dc.b 1	
000067C1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000067C6 01                         SME_0ZTmS_26:	dc.b 1	
000067C7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000067CC 01                         SME_0ZTmS_2C:	dc.b 1	
000067CD F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000067D2 01                         SME_0ZTmS_32:	dc.b 1	
000067D3 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000067D8                            		even
000067D8                            		even
000067D8                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000067D8                            ; ---------------------------------------------------------------------------
000067D8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000067D8                            ; ---------------------------------------------------------------------------
000067D8                            Map_ESth_internal:
000067D8 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067DA 03                         M_ESth_1:	dc.b 3
000067DB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067E0 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067E5 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067EA                            		even
000067EA                            		even
000067EA                            
000067EA                            ; ===========================================================================
000067EA                            ; ---------------------------------------------------------------------------
000067EA                            ; Credits ending sequence
000067EA                            ; ---------------------------------------------------------------------------
000067EA                            
000067EA                            GM_Credits:
000067EA                            		
000067EA 6100 AF60                  		bsr.w	ClearPLC
000067EE 6100 B996                  		bsr.w	PaletteFadeOut
000067F2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067F8 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067FC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006800 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006804 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006808 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000680C 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006810 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006814 4238 F64E                  		clr.b	(f_wtr_state).w
00006818 6100 A96A                  		bsr.w	ClearScreen
0000681C                            
0000681C 43F8 D000                  		lea	(v_objspace).w,a1
00006820 7000                       		moveq	#0,d0
00006822 323C 07FF                  		move.w	#$7FF,d1
00006826                            	TryAg_ClrObjRam:
00006826 22C0                       		move.l	d0,(a1)+
00006828 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000682C                            
0000682C 7000                       		moveq	#plcid_TryAgain,d0
0000682E 6100 B02A                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006832                            
00006832 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006836 7000                       		moveq	#0,d0
00006838 323C 001F                  		move.w	#$1F,d1
0000683C                            	TryAg_ClrPal:
0000683C 22C0                       		move.l	d0,(a1)+
0000683E 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006842                            
00006842 7013                       		moveq	#palid_Ending,d0
00006844 6100 BBEA                  		bsr.w	PalLoad1	; load ending palette
00006848 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
0000684C 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006852 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006858 4EB9 0000 0000             		jsr	(BuildSprites).l
0000685E 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
00006864 6100 B87A                  		bsr.w	PaletteFadeIn
00006868                            
00006868                            ; ---------------------------------------------------------------------------
00006868                            ; "TRY AGAIN" and "END"	screen main loop
00006868                            ; ---------------------------------------------------------------------------
00006868                            TryAg_MainLoop:
00006868 6100 A9F6                  		bsr.w	PauseGame
0000686C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006872 6100 D190                  		bsr.w	WaitForVBla
00006876 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000687C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006882 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00006888 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000688A 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
0000688E 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006890 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006896 67D0                       		beq.s	TryAg_MainLoop
00006898                            
00006898                            TryAg_Exit:
00006898 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
0000689E 4E75                       		rts	
000068A0                            
000068A0                            ; ===========================================================================
000068A0                            
000068A0                            		include	"_incObj\8B Try Again & End Eggman.asm"
000068A0                            ; ---------------------------------------------------------------------------
000068A0                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000068A0                            ; ---------------------------------------------------------------------------
000068A0                            
000068A0                            EndEggman:
000068A0 7000                       		moveq	#0,d0
000068A2 1028 0024                  		move.b	obRoutine(a0),d0
000068A6 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
000068AA 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000068AE 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068B4                            ; ===========================================================================
000068B4 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000068B6 0000                       		dc.w EEgg_Animate-EEgg_Index
000068B8 0000                       		dc.w EEgg_Juggle-EEgg_Index
000068BA 0000                       		dc.w EEgg_Wait-EEgg_Index
000068BC                            
000068BC =00000030                  eegg_time:	equ $30		; time between juggle motions
000068BC                            ; ===========================================================================
000068BC                            
000068BC                            EEgg_Main:	; Routine 0
000068BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000068C0 317C 0120 0008             		move.w	#$120,obX(a0)
000068C6 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000068CC 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000068D4 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068DA 117C 0000 0001             		move.b	#0,obRender(a0)
000068E0 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068E6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068EC 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068F2 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068F4                            
000068F4 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068FA 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00006900 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006906 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
0000690C                            
0000690C                            EEgg_Animate:	; Routine 2
0000690C 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006912 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006918                            ; ===========================================================================
00006918                            
00006918                            EEgg_Juggle:	; Routine 4
00006918 5428 0024                  		addq.b	#2,obRoutine(a0)
0000691C 7002                       		moveq	#2,d0
0000691E 0828 0000 001C             		btst	#0,obAnim(a0)
00006924 6700                       		beq.s	@noflip
00006926 4440                       		neg.w	d0
00006928                            
00006928                            	@noflip:
00006928 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
0000692C 7205                       		moveq	#5,d1
0000692E                            
0000692E                            @emeraldloop:
0000692E 1340 003E                  		move.b	d0,$3E(a1)
00006932 3400                       		move.w	d0,d2
00006934 E742                       		asl.w	#3,d2
00006936 D529 0026                  		add.b	d2,obAngle(a1)
0000693A 43E9 0040                  		lea	$40(a1),a1
0000693E 51C9 FFEE                  		dbf	d1,@emeraldloop
00006942 5228 001A                  		addq.b	#1,obFrame(a0)
00006946 317C 0070 0030             		move.w	#112,eegg_time(a0)
0000694C                            
0000694C                            EEgg_Wait:	; Routine 6
0000694C 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006950 6A00                       		bpl.s	@nochg		; branch if time remains
00006952 0868 0000 001C             		bchg	#0,obAnim(a0)
00006958 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
0000695E                            
0000695E                            	@nochg:
0000695E 4E75                       		rts	
0000695E 4E75                       		rts	
00006960                            		include "_anim\Try Again & End Eggman.asm"
00006960                            ; ---------------------------------------------------------------------------
00006960                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006960                            ; ---------------------------------------------------------------------------
00006960 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006962 0000                       		dc.w @tryagain2-Ani_EEgg
00006964 0000                       		dc.w @end-Ani_EEgg
00006966 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
0000696A 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
0000696E 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006980                            		even
00006980                            		even
00006980                            		include	"_incObj\8C Try Again Emeralds.asm"
00006980                            ; ---------------------------------------------------------------------------
00006980                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006980                            ; ---------------------------------------------------------------------------
00006980                            
00006980                            TryChaos:
00006980 7000                       		moveq	#0,d0
00006982 1028 0024                  		move.b	obRoutine(a0),d0
00006986 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
0000698A 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
0000698E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006994                            ; ===========================================================================
00006994 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006996 0000                       		dc.w TCha_Move-TCha_Index
00006998                            ; ===========================================================================
00006998                            
00006998                            TCha_Main:	; Routine 0
00006998 2248                       		movea.l	a0,a1
0000699A 7400                       		moveq	#0,d2
0000699C 7600                       		moveq	#0,d3
0000699E 7205                       		moveq	#5,d1
000069A0 9238 FE57                  		sub.b	(v_emeralds).w,d1
000069A4                            
000069A4                            @makeemerald:
000069A4 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
000069A8 5429 0024                  		addq.b	#2,obRoutine(a1)
000069AC 237C 0000 67A0 0004        		move.l	#Map_ECha,obMap(a1)
000069B4 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000069BA 137C 0000 0001             		move.b	#0,obRender(a1)
000069C0 337C 0080 0018             		move.w	#$80,obPriority(a1)
000069C6 337C 0104 0008             		move.w	#$104,obX(a1)
000069CC 337C 0120 0038             		move.w	#$120,$38(a1)
000069D2 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
000069D8 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069DE 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069E4 47F8 FE58                  		lea	(v_emldlist).w,a3
000069E8                            
000069E8                            	@chkemerald:
000069E8 7000                       		moveq	#0,d0
000069EA 1038 FE57                  		move.b	(v_emeralds).w,d0
000069EE 5340                       		subq.w	#1,d0
000069F0 6500                       		bcs.s	@loc_5B42
000069F2                            
000069F2                            	@chkloop:
000069F2 B433 0000                  		cmp.b	(a3,d0.w),d2
000069F6 6600                       		bne.s	@notgot
000069F8 5202                       		addq.b	#1,d2
000069FA 60EC                       		bra.s	@chkemerald
000069FC                            ; ===========================================================================
000069FC                            
000069FC                            	@notgot:
000069FC 51C8 FFF4                  		dbf	d0,@chkloop
00006A00                            
00006A00                            @loc_5B42:
00006A00 1342 001A                  		move.b	d2,obFrame(a1)
00006A04 5229 001A                  		addq.b	#1,obFrame(a1)
00006A08 5202                       		addq.b	#1,d2
00006A0A 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A10 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A14 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A18 0643 000A                  		addi.w	#10,d3
00006A1C 43E9 0040                  		lea	$40(a1),a1
00006A20 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A24                            
00006A24                            TCha_Move:	; Routine 2
00006A24 4A68 003E                  		tst.w	$3E(a0)
00006A28 6700                       		beq.s	locret_5BBA
00006A2A 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A2E 6700                       		beq.s	loc_5B78
00006A30 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A34 6600                       		bne.s	loc_5B80
00006A36                            
00006A36                            loc_5B78:
00006A36 3028 003E                  		move.w	$3E(a0),d0
00006A3A D168 0026                  		add.w	d0,obAngle(a0)
00006A3E                            
00006A3E                            loc_5B80:
00006A3E 1028 0026                  		move.b	obAngle(a0),d0
00006A42 6700                       		beq.s	loc_5B8C
00006A44 0C00 0080                  		cmpi.b	#$80,d0
00006A48 6600                       		bne.s	loc_5B96
00006A4A                            
00006A4A                            loc_5B8C:
00006A4A 4268 003E                  		clr.w	$3E(a0)
00006A4E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A54                            
00006A54                            loc_5B96:
00006A54 4EB9 0000 3A36             		jsr	(CalcSine).l
00006A5A 7800                       		moveq	#0,d4
00006A5C 1828 003C                  		move.b	$3C(a0),d4
00006A60 C3C4                       		muls.w	d4,d1
00006A62 E081                       		asr.l	#8,d1
00006A64 C1C4                       		muls.w	d4,d0
00006A66 E080                       		asr.l	#8,d0
00006A68 D268 0038                  		add.w	$38(a0),d1
00006A6C D068 003A                  		add.w	$3A(a0),d0
00006A70 3141 0008                  		move.w	d1,obX(a0)
00006A74 3140 000A                  		move.w	d0,obScreenY(a0)
00006A78                            
00006A78                            locret_5BBA:
00006A78 4E75                       		rts	
00006A78 4E75                       		rts	
00006A7A                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A7A                            ; ---------------------------------------------------------------------------
00006A7A                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A7A                            ; ---------------------------------------------------------------------------
00006A7A                            Map_EEgg_internal:
00006A7A 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A7C 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A7E 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A80 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A82 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A84 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A86 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A88 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A8A 08                         M_EEgg_Try1:	dc.b 8
00006A8B E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A90 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A95 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A9A F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A9F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AA4 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AA9 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AAE 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AB3 08                         M_EEgg_Try2:	dc.b 8
00006AB4 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006AB9 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006ABE E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006AC3 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006AC8 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006ACD 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AD2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AD7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006ADC 08                         M_EEgg_Try3:	dc.b 8
00006ADD E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AE2 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AE7 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AEC F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AF1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AF6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AFB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B00 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B05 08                         M_EEgg_Try4:	dc.b 8
00006B06 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006B0B F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B10 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B15 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B1A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B1F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B24 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B29 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B2E 0C                         M_EEgg_End1:	dc.b $C
00006B2F ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B34 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B39 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B3E 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B43 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B48 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B4D 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B52 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B57 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B5C 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B61 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B66 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B6B 0A                         M_EEgg_End2:	dc.b $A
00006B6C D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B71 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B76 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B7B D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B80 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B85 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B8A 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B8F 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B94 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B99 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B9E 0A                         M_EEgg_End3:	dc.b $A
00006B9F C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006BA4 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006BA9 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006BAE C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006BB3 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006BB8 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006BBD 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BC2 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BC7 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006BCC 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006BD1 0C                         M_EEgg_End4:	dc.b $C
00006BD2 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006BD7 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BDC 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BE1 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BE6 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BEB FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BF0 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BF5 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BFA 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BFF 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006C04 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C09 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C0E                            		even
00006C0E                            		even
00006C0E                            
00006C0E                            ; ---------------------------------------------------------------------------
00006C0E                            ; Ending sequence demos
00006C0E                            ; ---------------------------------------------------------------------------
00006C0E                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C3C                            		even
00006C3C                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C7C                            		even
00006C7C                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006CAC                            		even
00006CAC                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CDC                            		even
00006CDC                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CFC                            		even
00006CFC                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D1C                            		even
00006D1C                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D4C                            		even
00006D4C                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D7C                            		even
00006D7C                            
00006D7C                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            ; Subroutine to	load level boundaries and start	locations
00006D7C                            ; ---------------------------------------------------------------------------
00006D7C                            
00006D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D7C                            
00006D7C                            
00006D7C                            LevelSizeLoad:
00006D7C 7000                       		moveq	#0,d0
00006D7E 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D82 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D86 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D8A 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D8E 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D92 3038 FE10                  		move.w	(v_zone).w,d0
00006D96 ED08                       		lsl.b	#6,d0
00006D98 E848                       		lsr.w	#4,d0
00006D9A 3200                       		move.w	d0,d1
00006D9C D040                       		add.w	d0,d0
00006D9E D041                       		add.w	d1,d0
00006DA0 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006DA4 3018                       		move.w	(a0)+,d0
00006DA6 31C0 F730                  		move.w	d0,($FFFFF730).w
00006DAA 2018                       		move.l	(a0)+,d0
00006DAC 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006DB0 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006DB4 2018                       		move.l	(a0)+,d0
00006DB6 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006DBA 21C0 F724                  		move.l	d0,(v_limittop1).w
00006DBE 3038 F728                  		move.w	(v_limitleft2).w,d0
00006DC2 0640 0240                  		addi.w	#$240,d0
00006DC6 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006DCA 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006DD0 3018                       		move.w	(a0)+,d0
00006DD2 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006DD6 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DDC 6000 0000                  		bra.w	LevSz_ChkLamp
00006DE0                            
00006DE0                            ; ===========================================================================
00006DE0                            ; ---------------------------------------------------------------------------
00006DE0                            ; Level size array
00006DE0                            ; ---------------------------------------------------------------------------
00006DE0                            LevelSizeArray:
00006DE0                            		; GHZ
00006DE0 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DEC 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DF8 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006E04 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E10                            		; LZ
00006E10 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E1C 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E28 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E34 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E40                            		; MZ
00006E40 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E4C 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006E58 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E64 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E70                            		; SLZ
00006E70 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E7C 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E88 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E94 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EA0                            		; SYZ
00006EA0 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006EAC 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006EB8 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006EC4 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006ED0                            		; SBZ
00006ED0 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006EDC 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EE8 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EF4 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F00                            		; Ending
00006F00 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006F0C 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F18 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F24 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F30                            
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            ; Ending start location array
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            EndingStLocArray:
00006F30                            		include	"_inc\Start Location Array - Ending.asm"
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            ; Ending start location array
00006F30                            ; ---------------------------------------------------------------------------
00006F30                            
00006F30                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F34                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F38                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F3C                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F40                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F44                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F48                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F4C                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F50                            		even
00006F50                            		even
00006F50                            
00006F50                            ; ===========================================================================
00006F50                            
00006F50                            LevSz_ChkLamp:
00006F50 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F54 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F56                            
00006F56 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F5C 3238 D008                  		move.w	(v_player+obX).w,d1
00006F60 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F64 6000                       		bra.s	LevSz_SkipStartPos
00006F66                            ; ===========================================================================
00006F66                            
00006F66                            LevSz_StartLoc:
00006F66 3038 FE10                  		move.w	(v_zone).w,d0
00006F6A ED08                       		lsl.b	#6,d0
00006F6C E848                       		lsr.w	#4,d0
00006F6E 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F72 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F76 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F78                            
00006F78 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F7C 5340                       		subq.w	#1,d0
00006F7E E548                       		lsl.w	#2,d0
00006F80 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F84                            
00006F84                            LevSz_SonicPos:
00006F84 7200                       		moveq	#0,d1
00006F86 3219                       		move.w	(a1)+,d1
00006F88 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F8C 7000                       		moveq	#0,d0
00006F8E 3011                       		move.w	(a1),d0
00006F90 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F94                            
00006F94                            SetScreen:
00006F94                            	LevSz_SkipStartPos:
00006F94 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F98 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006F9C 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006F9E                            @looppoint: 
00006F9E 34C1                       		move.w d1,(a2)+ ; fill in X 
00006FA0 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006FA2 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006FA6 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006FAA 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006FAC 7200                       		moveq	#0,d1
00006FAE                            
00006FAE                            	SetScr_WithinLeft:
00006FAE 3438 F72A                  		move.w	(v_limitright2).w,d2
00006FB2 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006FB4 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006FB6 3202                       		move.w	d2,d1
00006FB8                            
00006FB8                            	SetScr_WithinRight:
00006FB8 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006FBC                            
00006FBC 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006FC0 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006FC2 7000                       		moveq	#0,d0
00006FC4                            
00006FC4                            	SetScr_WithinTop:
00006FC4 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006FC8 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006FCA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006FCE                            
00006FCE                            	SetScr_WithinBottom:
00006FCE 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006FD2 6100 0000                  		bsr.w	BgScrollSpeed
00006FD6 7000                       		moveq	#0,d0
00006FD8 1038 FE10                  		move.b	(v_zone).w,d0
00006FDC E508                       		lsl.b	#2,d0
00006FDE 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FE4 4E75                       		rts
00006FE6                            ; ===========================================================================
00006FE6                            ; ---------------------------------------------------------------------------
00006FE6                            ; Sonic start location array
00006FE6                            ; ---------------------------------------------------------------------------
00006FE6                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FE6                            ; ---------------------------------------------------------------------------
00006FE6                            ; Sonic start location array
00006FE6                            ; ---------------------------------------------------------------------------
00006FE6                            
00006FE6                            		incbin	"startpos\ghz1.bin"
00006FEA                            		incbin	"startpos\ghz2.bin"
00006FEE                            		incbin	"startpos\ghz3.bin"
00006FF2 0080 00A8                  		dc.w	$80,$A8
00006FF6                            
00006FF6                            		incbin	"startpos\lz1.bin"
00006FFA                            		incbin	"startpos\lz2.bin"
00006FFE                            		incbin	"startpos\lz3.bin"
00007002                            		incbin	"startpos\sbz3.bin"
00007006                            
00007006                            		incbin	"startpos\mz1.bin"
0000700A                            		incbin	"startpos\mz2.bin"
0000700E                            		incbin	"startpos\mz3.bin"
00007012 0080 00A8                  		dc.w	$80,$A8
00007016                            
00007016                            		incbin	"startpos\slz1.bin"
0000701A                            		incbin	"startpos\slz2.bin"
0000701E                            		incbin	"startpos\slz3.bin"
00007022 0080 00A8                  		dc.w	$80,$A8
00007026                            
00007026                            		incbin	"startpos\syz1.bin"
0000702A                            		incbin	"startpos\syz2.bin"
0000702E                            		incbin	"startpos\syz3.bin"
00007032 0080 00A8                  		dc.w	$80,$A8
00007036                            
00007036                            		incbin	"startpos\sbz1.bin"
0000703A                            		incbin	"startpos\sbz2.bin"
0000703E                            		incbin	"startpos\fz.bin"
00007042 0080 00A8                  		dc.w	$80,$A8
00007046                            
00007046                            
00007046                            		incbin	"startpos\end1.bin"
0000704A                            		incbin	"startpos\end2.bin"
0000704E 0080 00A8                  		dc.w	$80,$A8
00007052 0080 00A8                  		dc.w	$80,$A8
00007056                            
00007056                            		even
00007056                            		even
00007056                            
00007056                            ; ---------------------------------------------------------------------------
00007056                            ; Which	256x256	tiles contain loops or roll-tunnels
00007056                            ; ---------------------------------------------------------------------------
00007056                            
00007056                            LoopTileNums:
00007056                            
00007056                            ; 		loop	loop	tunnel	tunnel
00007056                            
00007056 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000705A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
0000705E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007062 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007066 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000706A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
0000706E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007072                            
00007072                            		even
00007072                            
00007072                            ; ---------------------------------------------------------------------------
00007072                            ; Subroutine to	set scroll speed of some backgrounds
00007072                            ; ---------------------------------------------------------------------------
00007072                            
00007072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007072                            
00007072                            
00007072                            BgScrollSpeed:
00007072 4A38 FE30                  		tst.b	(v_lastlamp).w
00007076 6600                       		bne.s	loc_6206
00007078 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000707C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007080 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007084 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
00007088 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000708C                            
0000708C                            loc_6206:
0000708C 7400                       		moveq	#0,d2
0000708E 1438 FE10                  		move.b	(v_zone).w,d2
00007092 D442                       		add.w	d2,d2
00007094 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00007098 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000709C                            ; End of function BgScrollSpeed
0000709C                            
0000709C                            ; ===========================================================================
0000709C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000070A0 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000070A4 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000070A8 0000                       		dc.w BgScroll_End-BgScroll_Index
000070AA                            ; ===========================================================================
000070AA                            
000070AA                            BgScroll_GHZ:
000070AA 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070AE 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070B2 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070B6 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070BA 45F8 A800                  		lea	($FFFFA800).w,a2
000070BE 429A                       		clr.l	(a2)+
000070C0 429A                       		clr.l	(a2)+
000070C2 429A                       		clr.l	(a2)+
000070C4 4E75                       		rts
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            BgScroll_LZ:
000070C6 E280                       		asr.l	#1,d0
000070C8 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070CC 4E75                       		rts	
000070CE                            ; ===========================================================================
000070CE                            
000070CE                            BgScroll_MZ:
000070CE 4E75                       		rts	
000070D0                            ; ===========================================================================
000070D0                            
000070D0                            BgScroll_SLZ:
000070D0 E280                       		asr.l	#1,d0
000070D2 0640 00C0                  		addi.w	#$C0,d0
000070D6 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070DA 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070DE 4E75                       		rts	
000070E0                            ; ===========================================================================
000070E0                            
000070E0                            BgScroll_SYZ:
000070E0 E980                       		asl.l	#4,d0
000070E2 2400                       		move.l	d0,d2
000070E4 E380                       		asl.l	#1,d0
000070E6 D082                       		add.l	d2,d0
000070E8 E080                       		asr.l	#8,d0
000070EA 5240                       		addq.w	#1,d0
000070EC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070F0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            BgScroll_SBZ:
000070F6 0240 07F8                  		andi.w	#$7F8,d0
000070FA E640                       		asr.w	#3,d0
000070FC 5240                       		addq.w	#1,d0
000070FE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            BgScroll_End:
00007104 3038 F700                  		move.w	(v_screenposx).w,d0
00007108 E240                       		asr.w	#1,d0
0000710A 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
0000710E 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007112 E440                       		asr.w	#2,d0
00007114 3200                       		move.w	d0,d1
00007116 D040                       		add.w	d0,d0
00007118 D041                       		add.w	d1,d0
0000711A 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
0000711E 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007122 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007126 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000712A 45F8 A800                  		lea	($FFFFA800).w,a2
0000712E 429A                       		clr.l	(a2)+
00007130 429A                       		clr.l	(a2)+
00007132 429A                       		clr.l	(a2)+
00007134 4E75                       		rts
00007134 4E75                       		rts
00007136                            		include	"_inc\DeformLayers (JP1).asm"
00007136                            ; ---------------------------------------------------------------------------
00007136                            ; Background layer deformation subroutines
00007136                            ; ---------------------------------------------------------------------------
00007136                            
00007136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007136                            
00007136                            
00007136                            DeformLayers:
00007136 4A38 F744                  		tst.b	(f_nobgscroll).w
0000713A 6700                       		beq.s	@bgscroll
0000713C 4E75                       		rts	
0000713E                            ; ===========================================================================
0000713E                            
0000713E                            	@bgscroll:
0000713E 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007142 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007146 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000714A 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
0000714E 6100 0000                  		bsr.w	ScrollHoriz
00007152 6100 0000                  		bsr.w	ScrollVertical
00007156 6100 0000                  		bsr.w	DynamicLevelEvents
0000715A 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007160 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007166 7000                       		moveq	#0,d0
00007168 1038 FE10                  		move.b	(v_zone).w,d0
0000716C D040                       		add.w	d0,d0
0000716E 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007172 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007176                            ; End of function DeformLayers
00007176                            
00007176                            ; ===========================================================================
00007176                            ; ---------------------------------------------------------------------------
00007176                            ; Offset index for background layer deformation	code
00007176                            ; ---------------------------------------------------------------------------
00007176 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000717A 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000717E 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007182 0000                       		dc.w Deform_GHZ-Deform_Index
00007184                            ; ---------------------------------------------------------------------------
00007184                            ; Green	Hill Zone background layer deformation code
00007184                            ; ---------------------------------------------------------------------------
00007184                            
00007184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007184                            
00007184                            
00007184                            Deform_GHZ:
00007184                            	;cmpi.b    #id_Title,(v_gamemode).w
00007184                            	;beq.w    Deform_Title
00007184                            
00007184                            ;Deform_GHZ_Stage:
00007184                            	; block 3 - distant mountains
00007184 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007188 48C4                       		ext.l	d4
0000718A EB84                       		asl.l	#5,d4
0000718C 2204                       		move.l	d4,d1
0000718E E384                       		asl.l	#1,d4
00007190 D881                       		add.l	d1,d4
00007192 7C00                       		moveq	#0,d6
00007194 6100 0000                  		bsr.w	BGScroll_Block3
00007198                            	; block 2 - hills & waterfalls
00007198 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000719C 48C4                       		ext.l	d4
0000719E EF84                       		asl.l	#7,d4
000071A0 7C00                       		moveq	#0,d6
000071A2 6100 0000                  		bsr.w	BGScroll_Block2
000071A6                            	; calculate Y position
000071A6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000071AA 3038 F704                  		move.w	(v_screenposy).w,d0
000071AE 0240 07FF                  		andi.w	#$7FF,d0
000071B2 EA48                       		lsr.w	#5,d0
000071B4 4440                       		neg.w	d0
000071B6 0640 0020                  		addi.w	#$20,d0
000071BA 6A00                       		bpl.s	@limitY
000071BC 7000                       		moveq	#0,d0
000071BE                            	@limitY:
000071BE 3800                       		move.w	d0,d4
000071C0 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000071C4 3038 F700                  		move.w	(v_screenposx).w,d0
000071C8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000071CE 6600                       		bne.s	@notTitle
000071D0 7000                       		moveq	#0,d0	; reset foreground position in title screen
000071D2                            	@notTitle:
000071D2 4440                       		neg.w	d0
000071D4 4840                       		swap	d0
000071D6                            	; auto-scroll clouds
000071D6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071DA 069A 0001 0000             		addi.l	#$10000,(a2)+
000071E0 069A 0000 C000             		addi.l	#$C000,(a2)+
000071E6 069A 0000 8000             		addi.l	#$8000,(a2)+
000071EC                            	; calculate background scroll	
000071EC 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071F0 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071F4 4440                       		neg.w	d0
000071F6 323C 001F                  		move.w	#$1F,d1
000071FA 9244                       		sub.w	d4,d1
000071FC 6500                       		bcs.s	@gotoCloud2
000071FE                            	@cloudLoop1:		; upper cloud (32px)
000071FE 22C0                       		move.l	d0,(a1)+
00007200 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007204                            
00007204                            	@gotoCloud2:
00007204 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007208 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000720C 4440                       		neg.w	d0
0000720E 323C 000F                  		move.w	#$F,d1
00007212                            	@cloudLoop2:		; middle cloud (16px)
00007212 22C0                       		move.l	d0,(a1)+
00007214 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007218                            
00007218 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000721C D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007220 4440                       		neg.w	d0
00007222 323C 000F                  		move.w	#$F,d1
00007226                            	@cloudLoop3:		; lower cloud (16px)
00007226 22C0                       		move.l	d0,(a1)+
00007228 51C9 FFFC                  		dbf	d1,@cloudLoop3
0000722C                            
0000722C 323C 002F                  		move.w	#$2F,d1
00007230 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007234 4440                       		neg.w	d0
00007236                            	@mountainLoop:		; distant mountains (48px)
00007236 22C0                       		move.l	d0,(a1)+
00007238 51C9 FFFC                  		dbf	d1,@mountainLoop
0000723C                            
0000723C 323C 0027                  		move.w	#$27,d1
00007240 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007244 4440                       		neg.w	d0
00007246                            	@hillLoop:			; hills & waterfalls (40px)
00007246 22C0                       		move.l	d0,(a1)+
00007248 51C9 FFFC                  		dbf	d1,@hillLoop
0000724C                            
0000724C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007250 3438 F700                  		move.w	(v_screenposx).w,d2
00007254 9440                       		sub.w	d0,d2
00007256 48C2                       		ext.l	d2
00007258 E182                       		asl.l	#8,d2
0000725A 85FC 0068                  		divs.w	#$68,d2
0000725E 48C2                       		ext.l	d2
00007260 E182                       		asl.l	#8,d2
00007262 7600                       		moveq	#0,d3
00007264 3600                       		move.w	d0,d3
00007266 323C 0047                  		move.w	#$47,d1
0000726A D244                       		add.w	d4,d1
0000726C                            	@waterLoop:			; water deformation
0000726C 3003                       		move.w	d3,d0
0000726E 4440                       		neg.w	d0
00007270 22C0                       		move.l	d0,(a1)+
00007272 4843                       		swap	d3
00007274 D682                       		add.l	d2,d3
00007276 4843                       		swap	d3
00007278 51C9 FFF2                  		dbf	d1,@waterLoop
0000727C 4E75                       		rts
0000727E                            ; End of function Deform_GHZ
0000727E                            
0000727E                            Deform_Title:
0000727E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007282 48C4                       		ext.l	d4
00007284 EB84                       		asl.l	#5,d4
00007286 2204                       		move.l	d4,d1
00007288 E384                       		asl.l	#1,d4
0000728A D881                       		add.l	d1,d4
0000728C 7A00                       		moveq	#0,d5
0000728E 6100 0000                  		bsr.w	BGScroll_Block1
00007292 6100 0000                  		bsr.w	BGScroll_Block3
00007296 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000729A 3038 F704                  		move.w	(v_screenposy).w,d0
0000729E 0240 07FF                  		andi.w	#$7FF,d0
000072A2 EA48                       		lsr.w	#5,d0
000072A4 4440                       		neg.w	d0
000072A6 0640 0026                  		addi.w	#$26,d0
000072AA 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000072AE 3800                       		move.w	d0,d4
000072B0 6100 0000                  		bsr.w	BGScroll_Block3
000072B4 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000072BA 323C 006F                  		move.w	#$6F,d1
000072BE 9244                       		sub.w	d4,d1
000072C0 3038 F700                  		move.w	(v_screenposx).w,d0
000072C4 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072CA 6600                       		bne.s	loc_633C
000072CC 7000                       		moveq	#0,d0
000072CE                            
000072CE                            loc_633C:
000072CE 4440                       		neg.w	d0
000072D0 4840                       		swap	d0
000072D2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000072D6 4440                       		neg.w	d0
000072D8                            
000072D8                            loc_6346:
000072D8 22C0                       		move.l	d0,(a1)+
000072DA 51C9 FFFC                  		dbf	d1,loc_6346
000072DE 323C 0027                  		move.w	#$27,d1
000072E2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072E6 4440                       		neg.w	d0
000072E8                            
000072E8                            loc_6356:
000072E8 22C0                       		move.l	d0,(a1)+
000072EA 51C9 FFFC                  		dbf	d1,loc_6356
000072EE 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072F2 0640 0000                  		addi.w	#0,d0
000072F6 3438 F700                  		move.w	(v_screenposx).w,d2
000072FA 0642 FE00                  		addi.w	#-$200,d2
000072FE 9440                       		sub.w	d0,d2
00007300 48C2                       		ext.l	d2
00007302 E182                       		asl.l	#8,d2
00007304 85FC 0068                  		divs.w	#$68,d2
00007308 48C2                       		ext.l	d2
0000730A E182                       		asl.l	#8,d2
0000730C 7600                       		moveq	#0,d3
0000730E 3600                       		move.w	d0,d3
00007310 323C 0047                  		move.w	#$47,d1
00007314 D244                       		add.w	d4,d1
00007316                            
00007316                            loc_6384:
00007316 3003                       		move.w	d3,d0
00007318 4440                       		neg.w	d0
0000731A 22C0                       		move.l	d0,(a1)+
0000731C 4843                       		swap	d3
0000731E D682                       		add.l	d2,d3
00007320 4843                       		swap	d3
00007322 51C9 FFF2                  		dbf	d1,loc_6384
00007326 4E75                       		rts	
00007328                            
00007328                            ; ===========================================================================
00007328                            ; ---------------------------------------------------------------------------
00007328                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00007328                            ; ---------------------------------------------------------------------------
00007328                             
00007328                            Deform_LZ:
00007328 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000732A 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
0000732E 48C4                       		ext.l	d4					; extend to long-word signed
00007330 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00007332 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
00007336 48C5                       		ext.l	d5					; extend to long-word signed
00007338 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000733A 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
0000733E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
00007344 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
00007348 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
0000734C 4440                       		neg.w	d0					; reverse
0000734E 4840                       		swap	d0					; send to upper word
00007350 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
00007354 4440                       		neg.w	d0					; reverse
00007356 7600                       		moveq	#$00,d3					; clear d3
00007358 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
0000735C 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007362 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
00007366 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
0000736A 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
0000736E 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007370 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007372 6F00                       		ble.s	DLZ_NoWater				; if not, branch
00007374 3202                       		move.w	d2,d1					; set at maximum
00007376                             
00007376                            DLZ_NoWater:
00007376 9441                       		sub.w	d1,d2					; subtract from water-line count
00007378 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000737A 5301                       		subq.b	#$01,d1					; decrease above water count
0000737C 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000737E                             
0000737E                            DLZ_Above:
0000737E 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007380 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
00007384                             
00007384                            DLZ_Water:
00007384 5302                       		subq.b	#$01,d2					; decrease below water count
00007386 6500                       		bcs.s	DLZ_Finish				; if finished, branch
00007388 3200                       		move.w	d0,d1					; copy BG position back to d1
0000738A 4840                       		swap	d0					; move FG position back to lower word in d0
0000738C 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000738E D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007392 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
00007396 D643                       		add.w	d3,d3					; multiply by word size (2)
00007398 D844                       		add.w	d4,d4					; ''
0000739A 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000073A0 D6C4                       		adda.w	d4,a3					; advance to correct starting point
000073A2 1813                       		move.b	(a3),d4					; get current position byte
000073A4 E404                       		asr.b	#$02,d4					; get only the position bits
000073A6 4884                       		ext.w	d4					; extend to word
000073A8 D244                       		add.w	d4,d1					; adjust BG's current position
000073AA 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000073AE 1812                       		move.b	(a2),d4					; get current position byte
000073B0 E404                       		asr.b	#$02,d4					; get only the position bits
000073B2 4884                       		ext.w	d4					; extend to word
000073B4 D044                       		add.w	d4,d0					; adjust FG's current position
000073B6                             
000073B6                            DLZ_Below:
000073B6 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000073B8 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000073BA D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000073BC 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000073BE 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000073C2                             
000073C2                            DLZ_Finish:
000073C2 4E75                       		rts						; return
000073C4                             
000073C4                            ; ---------------------------------------------------------------------------
000073C4                            ; Scroll data for the FG
000073C4                            ; ---------------------------------------------------------------------------
000073C4                             
000073C4                            DLZ_WaveFG:
000073C4                            		rept	$02
000073C4                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073C4 0001 0400 0401 0800 0801+  		endr
000077C4                             
000077C4                            ; ---------------------------------------------------------------------------
000077C4                            ; Scroll data for the BG
000077C4                            ; ---------------------------------------------------------------------------
000077C4                             
000077C4                            DLZ_WaveBG:	rept	$04
000077C4                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
000077C4                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
000077C4                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
000077C4                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
000077C4                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
000077C4                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
000077C4                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
000077C4                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
000077C4 FC01 0000 0000 0000 0000+  		endr
00007BC4                             
00007BC4                            ; ===========================================================================
00007BC4                            ; End of function Deform_LZ
00007BC4                            
00007BC4                            ; ---------------------------------------------------------------------------
00007BC4                            ; Marble Zone background layer deformation code
00007BC4                            ; ---------------------------------------------------------------------------
00007BC4                            
00007BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC4                            
00007BC4                            
00007BC4                            Deform_MZ:
00007BC4                            	; block 1 - dungeon interior
00007BC4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BC8 48C4                       		ext.l	d4
00007BCA ED84                       		asl.l	#6,d4
00007BCC 2204                       		move.l	d4,d1
00007BCE E384                       		asl.l	#1,d4
00007BD0 D881                       		add.l	d1,d4
00007BD2 7C02                       		moveq	#2,d6
00007BD4 6100 0000                  		bsr.w	BGScroll_Block1
00007BD8                            	; block 3 - mountains
00007BD8 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BDC 48C4                       		ext.l	d4
00007BDE ED84                       		asl.l	#6,d4
00007BE0 7C06                       		moveq	#6,d6
00007BE2 6100 0000                  		bsr.w	BGScroll_Block3
00007BE6                            	; block 2 - bushes & antique buildings
00007BE6 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BEA 48C4                       		ext.l	d4
00007BEC EF84                       		asl.l	#7,d4
00007BEE 7C04                       		moveq	#4,d6
00007BF0 6100 0000                  		bsr.w	BGScroll_Block2
00007BF4                            	; calculate y-position of background
00007BF4 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BF8 3238 F704                  		move.w	(v_screenposy).w,d1
00007BFC 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007C00 6500                       		bcs.s	@noYscroll
00007C02 3401                       		move.w	d1,d2
00007C04 D241                       		add.w	d1,d1
00007C06 D242                       		add.w	d2,d1
00007C08 E441                       		asr.w	#2,d1
00007C0A D041                       		add.w	d1,d0
00007C0C                            	@noYscroll:
00007C0C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C10 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C14 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C18 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C1E                            	; do something with redraw flags
00007C1E 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C22 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C26 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C2A 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C2E 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C32                            	; calculate background scroll buffer
00007C32 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C36 3438 F700                  		move.w	(v_screenposx).w,d2
00007C3A 4442                       		neg.w	d2
00007C3C 3002                       		move.w	d2,d0
00007C3E E440                       		asr.w	#2,d0
00007C40 9042                       		sub.w	d2,d0
00007C42 48C0                       		ext.l	d0
00007C44 E780                       		asl.l	#3,d0
00007C46 81FC 0005                  		divs.w	#5,d0
00007C4A 48C0                       		ext.l	d0
00007C4C E980                       		asl.l	#4,d0
00007C4E E180                       		asl.l	#8,d0
00007C50 7600                       		moveq	#0,d3
00007C52 3602                       		move.w	d2,d3
00007C54 E243                       		asr.w	#1,d3
00007C56 323C 0004                  		move.w	#4,d1
00007C5A                            	@cloudLoop:		
00007C5A 32C3                       		move.w	d3,(a1)+
00007C5C 4843                       		swap	d3
00007C5E D680                       		add.l	d0,d3
00007C60 4843                       		swap	d3
00007C62 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C66                            
00007C66 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C6A 4440                       		neg.w	d0
00007C6C 323C 0001                  		move.w	#1,d1
00007C70                            	@mountainLoop:		
00007C70 32C0                       		move.w	d0,(a1)+
00007C72 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C76                            
00007C76 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C7A 4440                       		neg.w	d0
00007C7C 323C 0008                  		move.w	#8,d1
00007C80                            	@bushLoop:		
00007C80 32C0                       		move.w	d0,(a1)+
00007C82 51C9 FFFC                  		dbf	d1,@bushLoop
00007C86                            
00007C86 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C8A 4440                       		neg.w	d0
00007C8C 323C 000F                  		move.w	#$F,d1
00007C90                            	@interiorLoop:		
00007C90 32C0                       		move.w	d0,(a1)+
00007C92 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C96                            
00007C96 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C9A 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C9E 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007CA2 3400                       		move.w	d0,d2
00007CA4 0C40 0100                  		cmpi.w	#$100,d0
00007CA8 6500                       		bcs.s	@limitY
00007CAA 303C 0100                  		move.w	#$100,d0
00007CAE                            	@limitY:
00007CAE 0240 01F0                  		andi.w	#$1F0,d0
00007CB2 E648                       		lsr.w	#3,d0
00007CB4 45F2 0000                  		lea	(a2,d0),a2
00007CB8 6000 0000                  		bra.w	Bg_Scroll_X
00007CBC                            ; End of function Deform_MZ
00007CBC                            
00007CBC                            ; ---------------------------------------------------------------------------
00007CBC                            ; Star Light Zone background layer deformation code
00007CBC                            ; ---------------------------------------------------------------------------
00007CBC                            
00007CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBC                            
00007CBC                            
00007CBC                            Deform_SLZ:
00007CBC                            	; vertical scrolling
00007CBC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007CC0 48C5                       		ext.l	d5
00007CC2 EF85                       		asl.l	#7,d5
00007CC4 6100 0000                  		bsr.w	Bg_Scroll_Y
00007CC8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007CCE                            	; calculate background scroll buffer
00007CCE 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007CD2 3438 F700                  		move.w	(v_screenposx).w,d2
00007CD6 4442                       		neg.w	d2
00007CD8 3002                       		move.w	d2,d0
00007CDA E640                       		asr.w	#3,d0
00007CDC 9042                       		sub.w	d2,d0
00007CDE 48C0                       		ext.l	d0
00007CE0 E980                       		asl.l	#4,d0
00007CE2 81FC 001C                  		divs.w	#$1C,d0
00007CE6 48C0                       		ext.l	d0
00007CE8 E980                       		asl.l	#4,d0
00007CEA E180                       		asl.l	#8,d0
00007CEC 7600                       		moveq	#0,d3
00007CEE 3602                       		move.w	d2,d3
00007CF0 323C 001B                  		move.w	#$1B,d1
00007CF4                            	@starLoop:		
00007CF4 32C3                       		move.w	d3,(a1)+
00007CF6 4843                       		swap	d3
00007CF8 D680                       		add.l	d0,d3
00007CFA 4843                       		swap	d3
00007CFC 51C9 FFF6                  		dbf	d1,@starLoop
00007D00                            
00007D00 3002                       		move.w	d2,d0
00007D02 E640                       		asr.w	#3,d0
00007D04 3200                       		move.w	d0,d1
00007D06 E241                       		asr.w	#1,d1
00007D08 D041                       		add.w	d1,d0
00007D0A 323C 0004                  		move.w	#4,d1
00007D0E                            	@buildingLoop1:		; distant black buildings
00007D0E 32C0                       		move.w	d0,(a1)+
00007D10 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D14                            
00007D14 3002                       		move.w	d2,d0
00007D16 E440                       		asr.w	#2,d0
00007D18 323C 0004                  		move.w	#4,d1
00007D1C                            	@buildingLoop2:		; closer buildings
00007D1C 32C0                       		move.w	d0,(a1)+
00007D1E 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D22                            
00007D22 3002                       		move.w	d2,d0
00007D24 E240                       		asr.w	#1,d0
00007D26 323C 001D                  		move.w	#$1D,d1
00007D2A                            	@bottomLoop:		; bottom part of background
00007D2A 32C0                       		move.w	d0,(a1)+
00007D2C 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D30                            
00007D30 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D34 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D38 3400                       		move.w	d0,d2
00007D3A 0440 00C0                  		subi.w	#$C0,d0
00007D3E 0240 03F0                  		andi.w	#$3F0,d0
00007D42 E648                       		lsr.w	#3,d0
00007D44 45F2 0000                  		lea	(a2,d0),a2
00007D48                            ;-------------------------------------------------------------------------------
00007D48                            ;-------------------------------------------------------------------------------
00007D48                            Bg_Scroll_X:
00007D48 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D4C 323C 000E                  		move.w	#$E,d1
00007D50 3038 F700                  		move.w	(v_screenposx).w,d0
00007D54 4440                       		neg.w	d0
00007D56 4840                       		swap	d0
00007D58 0242 000F                  		andi.w	#$F,d2
00007D5C D442                       		add.w	d2,d2
00007D5E 301A                       		move.w	(a2)+,d0
00007D60 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D64                            	@blockLoop:
00007D64 301A                       		move.w	(a2)+,d0
00007D66                            	@pixelJump:		
00007D66 22C0                       		move.l	d0,(a1)+
00007D68 22C0                       		move.l	d0,(a1)+
00007D6A 22C0                       		move.l	d0,(a1)+
00007D6C 22C0                       		move.l	d0,(a1)+
00007D6E 22C0                       		move.l	d0,(a1)+
00007D70 22C0                       		move.l	d0,(a1)+
00007D72 22C0                       		move.l	d0,(a1)+
00007D74 22C0                       		move.l	d0,(a1)+
00007D76 22C0                       		move.l	d0,(a1)+
00007D78 22C0                       		move.l	d0,(a1)+
00007D7A 22C0                       		move.l	d0,(a1)+
00007D7C 22C0                       		move.l	d0,(a1)+
00007D7E 22C0                       		move.l	d0,(a1)+
00007D80 22C0                       		move.l	d0,(a1)+
00007D82 22C0                       		move.l	d0,(a1)+
00007D84 22C0                       		move.l	d0,(a1)+
00007D86 51C9 FFDC                  		dbf	d1,@blockLoop
00007D8A 4E75                       		rts
00007D8C                            
00007D8C                            ; ---------------------------------------------------------------------------
00007D8C                            ; Spring Yard Zone background layer deformation	code
00007D8C                            ; ---------------------------------------------------------------------------
00007D8C                            
00007D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D8C                            
00007D8C                            
00007D8C                            Deform_SYZ:
00007D8C                            	; vertical scrolling
00007D8C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D90 48C5                       		ext.l	d5
00007D92 E985                       		asl.l	#4,d5
00007D94 2205                       		move.l	d5,d1
00007D96 E385                       		asl.l	#1,d5
00007D98 DA81                       		add.l	d1,d5
00007D9A 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D9E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007DA4                            	; calculate background scroll buffer
00007DA4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007DA8 3438 F700                  		move.w	(v_screenposx).w,d2
00007DAC 4442                       		neg.w	d2
00007DAE 3002                       		move.w	d2,d0
00007DB0 E640                       		asr.w	#3,d0
00007DB2 9042                       		sub.w	d2,d0
00007DB4 48C0                       		ext.l	d0
00007DB6 E780                       		asl.l	#3,d0
00007DB8 81FC 0008                  		divs.w	#8,d0
00007DBC 48C0                       		ext.l	d0
00007DBE E980                       		asl.l	#4,d0
00007DC0 E180                       		asl.l	#8,d0
00007DC2 7600                       		moveq	#0,d3
00007DC4 3602                       		move.w	d2,d3
00007DC6 E243                       		asr.w	#1,d3
00007DC8 323C 0007                  		move.w	#7,d1
00007DCC                            	@cloudLoop:		
00007DCC 32C3                       		move.w	d3,(a1)+
00007DCE 4843                       		swap	d3
00007DD0 D680                       		add.l	d0,d3
00007DD2 4843                       		swap	d3
00007DD4 51C9 FFF6                  		dbf	d1,@cloudLoop
00007DD8                            
00007DD8 3002                       		move.w	d2,d0
00007DDA E640                       		asr.w	#3,d0
00007DDC 323C 0004                  		move.w	#4,d1
00007DE0                            	@mountainLoop:		
00007DE0 32C0                       		move.w	d0,(a1)+
00007DE2 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DE6                            
00007DE6 3002                       		move.w	d2,d0
00007DE8 E440                       		asr.w	#2,d0
00007DEA 323C 0005                  		move.w	#5,d1
00007DEE                            	@buildingLoop:		
00007DEE 32C0                       		move.w	d0,(a1)+
00007DF0 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DF4                            
00007DF4 3002                       		move.w	d2,d0
00007DF6 3202                       		move.w	d2,d1
00007DF8 E241                       		asr.w	#1,d1
00007DFA 9041                       		sub.w	d1,d0
00007DFC 48C0                       		ext.l	d0
00007DFE E980                       		asl.l	#4,d0
00007E00 81FC 000E                  		divs.w	#$E,d0
00007E04 48C0                       		ext.l	d0
00007E06 E980                       		asl.l	#4,d0
00007E08 E180                       		asl.l	#8,d0
00007E0A 7600                       		moveq	#0,d3
00007E0C 3602                       		move.w	d2,d3
00007E0E E243                       		asr.w	#1,d3
00007E10 323C 000D                  		move.w	#$D,d1
00007E14                            	@bushLoop:		
00007E14 32C3                       		move.w	d3,(a1)+
00007E16 4843                       		swap	d3
00007E18 D680                       		add.l	d0,d3
00007E1A 4843                       		swap	d3
00007E1C 51C9 FFF6                  		dbf	d1,@bushLoop
00007E20                            
00007E20 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E24 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E28 3400                       		move.w	d0,d2
00007E2A 0240 01F0                  		andi.w	#$1F0,d0
00007E2E E648                       		lsr.w	#3,d0
00007E30 45F2 0000                  		lea	(a2,d0),a2
00007E34 6000 FF12                  		bra.w	Bg_Scroll_X
00007E38                            ; End of function Deform_SYZ
00007E38                            
00007E38                            ; ---------------------------------------------------------------------------
00007E38                            ; Scrap	Brain Zone background layer deformation	code
00007E38                            ; ---------------------------------------------------------------------------
00007E38                            
00007E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E38                            
00007E38                            
00007E38                            Deform_SBZ:
00007E38 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E3C 48C4                       		ext.l	d4
00007E3E ED84                       		asl.l	#6,d4
00007E40 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E44 48C5                       		ext.l	d5
00007E46 E985                       		asl.l	#4,d5
00007E48 E385                       		asl.l	#1,d5
00007E4A 6100 0000                  		bsr.w	BGScroll_XY
00007E4E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E54 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E58 323C 00DF                  		move.w	#223,d1
00007E5C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E60 4440                       		neg.w	d0
00007E62 4840                       		swap	d0
00007E64 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E68 4440                       		neg.w	d0
00007E6A                            
00007E6A                            loc_6576:
00007E6A 22C0                       		move.l	d0,(a1)+
00007E6C 51C9 FFFC                  		dbf	d1,loc_6576
00007E70 4E75                       		rts	
00007E72                            ;-------------------------------------------------------------------------------
00007E72                            Deform_SBZ2:;loc_68A2:
00007E72 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E76 48C4                       		ext.l	d4
00007E78 ED84                       		asl.l	#6,d4
00007E7A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E7E 48C5                       		ext.l	d5
00007E80 E985                       		asl.l	#4,d5
00007E82 E385                       		asl.l	#1,d5
00007E84 6100 0000                  		bsr.w	BGScroll_XY
00007E88 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E8E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E92 323C 00DF                  		move.w	#223,d1
00007E96 3038 F700                  		move.w	(v_screenposx).w,d0
00007E9A 4440                       		neg.w	d0
00007E9C 4840                       		swap	d0
00007E9E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EA2 4440                       		neg.w	d0
00007EA4                            
00007EA4                            loc_6577:
00007EA4 22C0                       		move.l	d0,(a1)+
00007EA6 51C9 FFFC                  		dbf	d1,loc_6577
00007EAA 4E75                       		rts	
00007EAC                            
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007EAC                            ; ---------------------------------------------------------------------------
00007EAC                            
00007EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EAC                            
00007EAC                            
00007EAC                            ScrollHoriz:
00007EAC 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007EB0 6100                       		bsr.s	MoveScreenHoriz
00007EB2 3038 F700                  		move.w	(v_screenposx).w,d0
00007EB6 0240 0010                  		andi.w	#$10,d0
00007EBA 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007EBE B300                       		eor.b	d1,d0
00007EC0 6600                       		bne.s	@return
00007EC2 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007EC8 3038 F700                  		move.w	(v_screenposx).w,d0
00007ECC 9044                       		sub.w	d4,d0		; compare new with old screen position
00007ECE 6A00                       		bpl.s	@scrollRight
00007ED0                            
00007ED0 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007ED6 4E75                       		rts	
00007ED8                            
00007ED8                            	@scrollRight:
00007ED8 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007EDE                            
00007EDE                            	@return:
00007EDE 4E75                       		rts	
00007EE0                            ; End of function ScrollHoriz
00007EE0                            
00007EE0                            
00007EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EE0                            
00007EE0                            MoveScreenHoriz:
00007EE0 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007EE4 6700 0000                  		beq.w	@cont		
00007EE8 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EEE                            		
00007EEE                            	@cont:		
00007EEE 3238 C904                  		move.w	($FFFFC904).w,d1
00007EF2 6700                       		beq.s	@cont1
00007EF4 0441 0100                  		sub.w	#$100,d1
00007EF8 31C1 C904                  		move.w	d1,($FFFFC904).w
00007EFC 7200                       		moveq	#0,d1
00007EFE 1238 C904                  		move.b	($FFFFC904).w,d1
00007F02 E509                       		lsl.b	#2,d1
00007F04 5801                       		addq.b	#4,d1
00007F06 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F0A 9001                       		sub.b	d1,d0
00007F0C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F10 3031 0000                  		move.w	(a1,d0.w),d0
00007F14 0240 3FFF                  		and.w	#$3FFF,d0
00007F18 6000                       		bra.s	@cont2
00007F1A                            		
00007F1A                            @cont1:
00007F1A 3038 D008                  		move.w	($FFFFD008).w,d0
00007F1E                            		
00007F1E                            @cont2:
00007F1E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F22 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F26 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F28 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F2C 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F2E 4278 F73A                          clr.w    (v_scrshiftx).w
00007F32 4E75                               rts 
00007F34                            ; ===========================================================================
00007F34                            
00007F34                            SH_AheadOfMid:
00007F34 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F38 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F3A 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F3E                            
00007F3E                                SH_Ahead16:
00007F3E D078 F700                          add.w    (v_screenposx).w,d0
00007F42 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F46 6D00                               blt.s    SH_SetScreen
00007F48 3038 F72A                          move.w    (v_limitright2).w,d0
00007F4C                            
00007F4C                            SH_SetScreen:
00007F4C 3200                               move.w    d0,d1
00007F4E 9278 F700                          sub.w    (v_screenposx).w,d1
00007F52 E141                               asl.w    #8,d1
00007F54 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F58 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F5C 4E75                               rts 
00007F5E                            ; ===========================================================================
00007F5E                            
00007F5E                            SH_BehindMid:
00007F5E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F62 6400                       		bcc.s	@cont
00007F64 303C FFF0                  		move.w	#-$10,d0	
00007F68                            
00007F68                            @cont:
00007F68 D078 F700                  		add.w	(v_screenposx).w,d0
00007F6C B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007F70 6EDA                       		bgt.s	SH_SetScreen
00007F72 3038 F728                  		move.w	(v_limitleft2).w,d0
00007F76 60D4                       		bra.s	SH_SetScreen
00007F78                            ; End of function MoveScreenHoriz
00007F78                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F78                            
00007F78                            MoveScreenHorizEXT:
00007F78 3238 C904                  		move.w	($FFFFC904).w,d1
00007F7C 6700                       		beq.s	@cont1
00007F7E 0441 0100                  		sub.w	#$100,d1
00007F82 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F86 7200                       		moveq	#0,d1
00007F88 1238 C904                  		move.b	($FFFFC904).w,d1
00007F8C E509                       		lsl.b	#2,d1
00007F8E 5801                       		addq.b	#4,d1
00007F90 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F94 9001                       		sub.b	d1,d0
00007F96 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F9A 3031 0000                  		move.w	(a1,d0.w),d0
00007F9E 0240 3FFF                  		and.w	#$3FFF,d0
00007FA2 6000                       		bra.s	@cont2
00007FA4                            		
00007FA4                            @cont1:
00007FA4 3038 D008                  		move.w	($FFFFD008).w,d0
00007FA8                            		
00007FA8                            @cont2:
00007FA8 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FAC 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007FB0 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007FB2 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007FB4 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007FB6                            ; ===========================================================================
00007FB6                            
00007FB6                            SHEXT_ProperlyFramed:
00007FB6 4278 F73A                          clr.w    (v_scrshiftx).w
00007FBA 4E75                               rts 
00007FBC                            ; ===========================================================================
00007FBC                            
00007FBC                            SHEXT_AheadOfMid:
00007FBC 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007FC0 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007FC2 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007FC6                            
00007FC6                            SHEXT_Ahead16:
00007FC6 D078 F700                          add.w    (v_screenposx).w,d0
00007FCA B078 F72A                          cmp.w    (v_limitright2).w,d0
00007FCE 6D00                               blt.s    SHEXT_SetScreen
00007FD0 3038 F72A                          move.w    (v_limitright2).w,d0
00007FD4                            
00007FD4                            SHEXT_SetScreen:
00007FD4 3200                               move.w    d0,d1
00007FD6 9278 F700                          sub.w    (v_screenposx).w,d1
00007FDA E141                               asl.w    #8,d1
00007FDC 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FE0 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FE4 4E75                               rts
00007FE6                            
00007FE6                            ; ===========================================================================
00007FE6                            
00007FE6                            SHEXT_BehindMid:
00007FE6 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FEA 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FEC 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FF0                            
00007FF0                            SHEXT_Behind16:
00007FF0 D078 F700                          add.w    (v_screenposx).w,d0
00007FF4 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FF8 6EDA                               bgt.s    SHEXT_SetScreen
00007FFA 3038 F728                          move.w    (v_limitleft2).w,d0
00007FFE 60D4                               bra.s    SHEXT_SetScreen
00008000                                  
00008000                            ; End of function MoveScreenHoriz
00008000                            
00008000                            
00008000                            ; ---------------------------------------------------------------------------
00008000                            ; Subroutine to	scroll the level vertically as Sonic moves
00008000                            ; ---------------------------------------------------------------------------
00008000                            
00008000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008000                            
00008000                            
00008000                            ScrollVertical:
00008000 7200                       		moveq	#0,d1
00008002 3038 D00C                  		move.w	(v_player+obY).w,d0
00008006 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
0000800A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00008010 6700                       		beq.s	SV_NotRolling	; if not, branch
00008012 5B40                       		subq.w	#5,d0
00008014                            
00008014                            	SV_NotRolling:
00008014 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
0000801A 6700                       		beq.s	loc_664A	; if not, branch
0000801C                            
0000801C 0640 0020                  		addi.w	#32,d0
00008020 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008024 6500                       		bcs.s	loc_6696
00008026 0440 0040                  		subi.w	#64,d0
0000802A 6400                       		bcc.s	loc_6696
0000802C 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008030 6600                       		bne.s	loc_66A8
00008032 6000                       		bra.s	loc_6656
00008034                            ; ===========================================================================
00008034                            
00008034                            loc_664A:
00008034 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008038 6600                       		bne.s	loc_665C
0000803A 4A38 F75C                  		tst.b	(f_bgscrollvert).w
0000803E 6600                       		bne.s	loc_66A8
00008040                            
00008040                            loc_6656:
00008040 4278 F73C                  		clr.w	(v_scrshifty).w
00008044 4E75                       		rts	
00008046                            ; ===========================================================================
00008046                            
00008046                            loc_665C:
00008046 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
0000804C 6600                       		bne.s	loc_6684
0000804E 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008052 6A00                       		bpl.s	loc_666C
00008054 4441                       		neg.w	d1
00008056                            
00008056                            loc_666C:
00008056 0C41 0800                  		cmpi.w	#$800,d1
0000805A 6400                       		bcc.s	loc_6696
0000805C 323C 0600                  		move.w	#$600,d1
00008060 0C40 0006                  		cmpi.w	#6,d0
00008064 6E00                       		bgt.s	loc_66F6
00008066 0C40 FFFA                  		cmpi.w	#-6,d0
0000806A 6D00                       		blt.s	loc_66C0
0000806C 6000                       		bra.s	loc_66AE
0000806E                            ; ===========================================================================
0000806E                            
0000806E                            loc_6684:
0000806E 323C 0200                  		move.w	#$200,d1
00008072 0C40 0002                  		cmpi.w	#2,d0
00008076 6E00                       		bgt.s	loc_66F6
00008078 0C40 FFFE                  		cmpi.w	#-2,d0
0000807C 6D00                       		blt.s	loc_66C0
0000807E 6000                       		bra.s	loc_66AE
00008080                            ; ===========================================================================
00008080                            
00008080                            loc_6696:
00008080 323C 1000                  		move.w	#$1000,d1
00008084 0C40 0010                  		cmpi.w	#$10,d0
00008088 6E00                       		bgt.s	loc_66F6
0000808A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000808E 6D00                       		blt.s	loc_66C0
00008090 6000                       		bra.s	loc_66AE
00008092                            ; ===========================================================================
00008092                            
00008092                            loc_66A8:
00008092 7000                       		moveq	#0,d0
00008094 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00008098                            
00008098                            loc_66AE:
00008098 7200                       		moveq	#0,d1
0000809A 3200                       		move.w	d0,d1
0000809C D278 F704                  		add.w	(v_screenposy).w,d1
000080A0 4A40                       		tst.w	d0
000080A2 6A00 0000                  		bpl.w	loc_6700
000080A6 6000 0000                  		bra.w	loc_66CC
000080AA                            ; ===========================================================================
000080AA                            
000080AA                            loc_66C0:
000080AA 4441                       		neg.w	d1
000080AC 48C1                       		ext.l	d1
000080AE E181                       		asl.l	#8,d1
000080B0 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080B4 4841                       		swap	d1
000080B6                            
000080B6                            loc_66CC:
000080B6 B278 F72C                  		cmp.w	(v_limittop2).w,d1
000080BA 6E00                       		bgt.s	loc_6724
000080BC 0C41 FF00                  		cmpi.w	#-$100,d1
000080C0 6E00                       		bgt.s	loc_66F0
000080C2 0241 07FF                  		andi.w	#$7FF,d1
000080C6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080CC 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000080D2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080D8 6000                       		bra.s	loc_6724
000080DA                            ; ===========================================================================
000080DA                            
000080DA                            loc_66F0:
000080DA 3238 F72C                  		move.w	(v_limittop2).w,d1
000080DE 6000                       		bra.s	loc_6724
000080E0                            ; ===========================================================================
000080E0                            
000080E0                            loc_66F6:
000080E0 48C1                       		ext.l	d1
000080E2 E181                       		asl.l	#8,d1
000080E4 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080E8 4841                       		swap	d1
000080EA                            
000080EA                            loc_6700:
000080EA B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080EE 6D00                       		blt.s	loc_6724
000080F0 0441 0800                  		subi.w	#$800,d1
000080F4 6500                       		bcs.s	loc_6720
000080F6 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080FC 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00008102 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00008108 6000                       		bra.s	loc_6724
0000810A                            ; ===========================================================================
0000810A                            
0000810A                            loc_6720:
0000810A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
0000810E                            
0000810E                            loc_6724:
0000810E 3838 F704                  		move.w	(v_screenposy).w,d4
00008112 4841                       		swap	d1
00008114 2601                       		move.l	d1,d3
00008116 96B8 F704                  		sub.l	(v_screenposy).w,d3
0000811A E09B                       		ror.l	#8,d3
0000811C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008120 21C1 F704                  		move.l	d1,(v_screenposy).w
00008124 3038 F704                  		move.w	(v_screenposy).w,d0
00008128 0240 0010                  		andi.w	#$10,d0
0000812C 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008130 B300                       		eor.b	d1,d0
00008132 6600                       		bne.s	@return
00008134 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
0000813A 3038 F704                  		move.w	(v_screenposy).w,d0
0000813E 9044                       		sub.w	d4,d0
00008140 6A00                       		bpl.s	@scrollBottom
00008142 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00008148 4E75                       		rts	
0000814A                            ; ===========================================================================
0000814A                            
0000814A                            	@scrollBottom:
0000814A 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008150                            
00008150                            	@return:
00008150 4E75                       		rts	
00008152                            ; End of function ScrollVertical
00008152                            
00008152                            
00008152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008152                            ; Scrolls background and sets redraw flags.
00008152                            ; d4 - background x offset * $10000
00008152                            ; d5 - background y offset * $10000
00008152                            
00008152                            BGScroll_XY:
00008152 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008156 2002                       		move.l	d2,d0
00008158 D084                       		add.l	d4,d0
0000815A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
0000815E 2200                       		move.l	d0,d1
00008160 4841                       		swap	d1
00008162 0241 0010                  		andi.w	#$10,d1
00008166 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000816A B701                       		eor.b	d3,d1
0000816C 6600                       		bne.s	BGScroll_YRelative	; no change in Y
0000816E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008174 9082                       		sub.l	d2,d0	; new - old
00008176 6A00                       		bpl.s	@scrollRight
00008178 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
0000817E 6000                       		bra.s	BGScroll_YRelative
00008180                            	@scrollRight:
00008180 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00008186                            BGScroll_YRelative:
00008186 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
0000818A 2003                       		move.l	d3,d0
0000818C D085                       		add.l	d5,d0
0000818E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008192 2200                       		move.l	d0,d1
00008194 4841                       		swap	d1
00008196 0241 0010                  		andi.w	#$10,d1
0000819A 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
0000819E B501                       		eor.b	d2,d1
000081A0 6600                       		bne.s	@return
000081A2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081A8 9083                       		sub.l	d3,d0
000081AA 6A00                       		bpl.s	@scrollBottom
000081AC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081B2 4E75                       		rts
000081B4                            	@scrollBottom:
000081B4 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081BA                            	@return:
000081BA 4E75                       		rts
000081BC                            ; End of function BGScroll_XY
000081BC                            
000081BC                            Bg_Scroll_Y:
000081BC 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081C0 2003                       		move.l	d3,d0
000081C2 D085                       		add.l	d5,d0
000081C4 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081C8 2200                       		move.l	d0,d1
000081CA 4841                       		swap	d1
000081CC 0241 0010                  		andi.w	#$10,d1
000081D0 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081D4 B501                       		eor.b	d2,d1
000081D6 6600                       		bne.s	@return
000081D8 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081DE 9083                       		sub.l	d3,d0
000081E0 6A00                       		bpl.s	@scrollBottom
000081E2 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081E8 4E75                       		rts
000081EA                            	@scrollBottom:
000081EA 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081F0                            	@return:
000081F0 4E75                       		rts
000081F2                            
000081F2                            
000081F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F2                            
000081F2                            
000081F2                            BGScroll_YAbsolute:
000081F2 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081F6 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081FA 3200                       		move.w	d0,d1
000081FC 0241 0010                  		andi.w	#$10,d1
00008200 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008204 B501                       		eor.b	d2,d1
00008206 6600                       		bne.s	@return
00008208 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000820E 9043                       		sub.w	d3,d0
00008210 6A00                       		bpl.s	@scrollBottom
00008212 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008218 4E75                       		rts
0000821A                            	@scrollBottom:
0000821A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008220                            	@return:
00008220 4E75                       		rts
00008222                            ; End of function BGScroll_YAbsolute
00008222                            
00008222                            
00008222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008222                            ; d6 - bit to set for redraw
00008222                            
00008222                            BGScroll_Block1:
00008222 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008226 2002                       		move.l	d2,d0
00008228 D084                       		add.l	d4,d0
0000822A 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
0000822E 2200                       		move.l	d0,d1
00008230 4841                       		swap	d1
00008232 0241 0010                  		andi.w	#$10,d1
00008236 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
0000823A B701                       		eor.b	d3,d1
0000823C 6600                       		bne.s	@return
0000823E 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00008244 9082                       		sub.l	d2,d0
00008246 6A00                       		bpl.s	@scrollRight
00008248 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000824C 6000                       		bra.s	@return
0000824E                            	@scrollRight:
0000824E 5206                       		addq.b	#1,d6
00008250 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008254                            	@return:
00008254 4E75                       		rts
00008256                            ; End of function BGScroll_Block1
00008256                            
00008256                            
00008256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008256                            
00008256                            
00008256                            BGScroll_Block2:
00008256 2438 F710                  		move.l	(v_bg2screenposx).w,d2
0000825A 2002                       		move.l	d2,d0
0000825C D084                       		add.l	d4,d0
0000825E 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008262 2200                       		move.l	d0,d1
00008264 4841                       		swap	d1
00008266 0241 0010                  		andi.w	#$10,d1
0000826A 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
0000826E B701                       		eor.b	d3,d1
00008270 6600                       		bne.s	@return
00008272 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00008278 9082                       		sub.l	d2,d0
0000827A 6A00                       		bpl.s	@scrollRight
0000827C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008280 6000                       		bra.s	@return
00008282                            	@scrollRight:
00008282 5206                       		addq.b	#1,d6
00008284 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008288                            	@return:
00008288 4E75                       		rts
0000828A                            ;-------------------------------------------------------------------------------
0000828A                            BGScroll_Block3:
0000828A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
0000828E 2002                       		move.l	d2,d0
00008290 D084                       		add.l	d4,d0
00008292 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00008296 2200                       		move.l	d0,d1
00008298 4841                       		swap	d1
0000829A 0241 0010                  		andi.w	#$10,d1
0000829E 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000082A2 B701                       		eor.b	d3,d1
000082A4 6600                       		bne.s	@return
000082A6 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000082AC 9082                       		sub.l	d2,d0
000082AE 6A00                       		bpl.s	@scrollRight
000082B0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082B4 6000                       		bra.s	@return
000082B6                            	@scrollRight:
000082B6 5206                       		addq.b	#1,d6
000082B8 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082BC                            	@return:
000082BC 4E75                       		rts
000082BC 4E75                       		rts
000082BE                            
000082BE                            
000082BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082BE                            
000082BE                            ; sub_6886:
000082BE                            LoadTilesAsYouMove_BGOnly:
000082BE 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082C4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082CA 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
000082CE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000082D2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082D6 343C 6000                  		move.w	#$6000,d2
000082DA 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082DE 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082E2 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082E6 6000 0000                  		bra.w	DrawBGScrollBlock2
000082EA                            ; End of function sub_6886
000082EA                            
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            ; Subroutine to	display	correct	tiles as you move
000082EA                            ; ---------------------------------------------------------------------------
000082EA                            
000082EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082EA                            
000082EA                            
000082EA                            LoadTilesAsYouMove:
000082EA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082F0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082F6                            		; First, update the background
000082F6 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082FA 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
000082FE 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008302 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00008306 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000830A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
0000830E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008312 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008316                            		; REV01 added a third scroll block, though, technically,
00008316                            		; the RAM for it was already there in REV00
00008316 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
0000831A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
0000831E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008322                            		; Then, update the foreground
00008322 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008326 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
0000832A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000832E 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008332                            		; The FG's update function is inlined here
00008332 4A12                       		tst.b	(a2)
00008334 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008336 0892 0000                  		bclr	#0,(a2)
0000833A 6700                       		beq.s	loc_6908
0000833C                            		; Draw new tiles at the top
0000833C 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
0000833E 7AF0                       		moveq	#-16,d5 ; X coordinate
00008340 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008344 78F0                       		moveq	#-16,d4 ; Y coordinate
00008346 7AF0                       		moveq	#-16,d5 ; X coordinate
00008348 6100 0000                  		bsr.w	DrawBlocks_LR
0000834C                            
0000834C                            loc_6908:
0000834C 0892 0001                  		bclr	#1,(a2)
00008350 6700                       		beq.s	loc_6922
00008352                            		; Draw new tiles at the bottom
00008352 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00008356 7AF0                       		moveq	#-16,d5
00008358 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000835C 383C 00E0                  		move.w	#224,d4
00008360 7AF0                       		moveq	#-16,d5
00008362 6100 0000                  		bsr.w	DrawBlocks_LR
00008366                            
00008366                            loc_6922:
00008366 0892 0002                  		bclr	#2,(a2)
0000836A 6700                       		beq.s	loc_6938
0000836C                            		; Draw new tiles on the left
0000836C 78F0                       		moveq	#-16,d4
0000836E 7AF0                       		moveq	#-16,d5
00008370 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008374 78F0                       		moveq	#-16,d4
00008376 7AF0                       		moveq	#-16,d5
00008378 6100 0000                  		bsr.w	DrawBlocks_TB
0000837C                            
0000837C                            loc_6938:
0000837C 0892 0003                  		bclr	#3,(a2)
00008380 6700                       		beq.s	locret_6952
00008382                            		; Draw new tiles on the right
00008382 78F0                       		moveq	#-16,d4
00008384 3A3C 0140                  		move.w	#320,d5
00008388 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000838C 78F0                       		moveq	#-16,d4
0000838E 3A3C 0140                  		move.w	#320,d5
00008392 6100 0000                  		bsr.w	DrawBlocks_TB
00008396                            
00008396                            locret_6952:
00008396 4E75                       		rts	
00008398                            ; End of function LoadTilesAsYouMove
00008398                            
00008398                            
00008398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008398                            
00008398                            ; sub_6954:
00008398                            DrawBGScrollBlock1:
00008398 4A12                       		tst.b	(a2)
0000839A 6700 0000                  		beq.w	locret_69F2
0000839E 0892 0000                  		bclr	#0,(a2)
000083A2 6700                       		beq.s	loc_6972
000083A4                            		; Draw new tiles at the top
000083A4 78F0                       		moveq	#-16,d4
000083A6 7AF0                       		moveq	#-16,d5
000083A8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083AC 78F0                       		moveq	#-16,d4
000083AE 7AF0                       		moveq	#-16,d5
000083B0 6100 0000                  			bsr.w	DrawBlocks_LR
000083B4                            
000083B4                            loc_6972:
000083B4 0892 0001                  		bclr	#1,(a2)
000083B8 6700                       		beq.s	loc_698E
000083BA                            		; Draw new tiles at the top
000083BA 383C 00E0                  		move.w	#224,d4
000083BE 7AF0                       		moveq	#-16,d5
000083C0 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083C4 383C 00E0                  		move.w	#224,d4
000083C8 7AF0                       		moveq	#-16,d5
000083CA 6100 0000                  			bsr.w	DrawBlocks_LR
000083CE                            
000083CE                            loc_698E:
000083CE 0892 0002                  		bclr	#2,(a2)
000083D2                            
000083D2                            
000083D2 6700                       			beq.s	locj_6D56
000083D4                            			; Draw new tiles on the left
000083D4 78F0                       			moveq	#-16,d4
000083D6 7AF0                       			moveq	#-16,d5
000083D8 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083DC 78F0                       			moveq	#-16,d4
000083DE 7AF0                       			moveq	#-16,d5
000083E0 6100 0000                  			bsr.w	DrawBlocks_TB
000083E4                            	locj_6D56:
000083E4                            
000083E4 0892 0003                  			bclr	#3,(a2)
000083E8 6700                       			beq.s	locj_6D70
000083EA                            			; Draw new tiles on the right
000083EA 78F0                       			moveq	#-16,d4
000083EC 3A3C 0140                  			move.w	#320,d5
000083F0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083F4 78F0                       			moveq	#-16,d4
000083F6 3A3C 0140                  			move.w	#320,d5
000083FA 6100 0000                  			bsr.w	DrawBlocks_TB
000083FE                            	locj_6D70:
000083FE                            
000083FE 0892 0004                  			bclr	#4,(a2)
00008402 6700                       			beq.s	locj_6D88
00008404                            			; Draw entire row at the top
00008404 78F0                       			moveq	#-16,d4
00008406 7A00                       			moveq	#0,d5
00008408 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000840C 78F0                       			moveq	#-16,d4
0000840E 7A00                       			moveq	#0,d5
00008410 7C1F                       			moveq	#(512/16)-1,d6
00008412 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008416                            	locj_6D88:
00008416                            
00008416 0892 0005                  			bclr	#5,(a2)
0000841A 6700                       			beq.s	locret_69F2
0000841C                            			; Draw entire row at the bottom
0000841C 383C 00E0                  			move.w	#224,d4
00008420 7A00                       			moveq	#0,d5
00008422 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008426 383C 00E0                  			move.w	#224,d4
0000842A 7A00                       			moveq	#0,d5
0000842C 7C1F                       			moveq	#(512/16)-1,d6
0000842E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008432                            
00008432                            locret_69F2:
00008432 4E75                       		rts	
00008434                            ; End of function DrawBGScrollBlock1
00008434                            
00008434                            
00008434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008434                            
00008434                            ; Essentially, this draws everything that isn't scroll block 1
00008434                            ; sub_69F4:
00008434                            DrawBGScrollBlock2:
00008434                            
00008434 4A12                       			tst.b	(a2)
00008436 6700 0000                  			beq.w	locj_6DF2
0000843A 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008440 6700 0000                  			beq.w	Draw_SBz
00008444 0892 0000                  			bclr	#0,(a2)
00008448 6700                       			beq.s	locj_6DD2
0000844A                            			; Draw new tiles on the left
0000844A 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
0000844E 7AF0                       			moveq	#-16,d5
00008450 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008454 383C 0070                  			move.w	#224/2,d4
00008458 7AF0                       			moveq	#-16,d5
0000845A 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
0000845C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008460                            	locj_6DD2:
00008460 0892 0001                  			bclr	#1,(a2)
00008464 6700                       			beq.s	locj_6DF2
00008466                            			; Draw new tiles on the right
00008466 383C 0070                  			move.w	#224/2,d4
0000846A 3A3C 0140                  			move.w	#320,d5
0000846E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008472 383C 0070                  			move.w	#224/2,d4
00008476 3A3C 0140                  			move.w	#320,d5
0000847A 7C02                       			moveq	#3-1,d6
0000847C 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008480                            	locj_6DF2:
00008480 4E75                       			rts
00008482                            ;===============================================================================
00008482                            	locj_6DF4:
00008482 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008492 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084A2 0200                       			dc.b $02,$00						
000084A4                            ;===============================================================================
000084A4                            	Draw_SBz:
000084A4 78F0                       			moveq	#-16,d4
000084A6 0892 0000                  			bclr	#0,(a2)
000084AA 6600                       			bne.s	locj_6E28
000084AC 0892 0001                  			bclr	#1,(a2)
000084B0 6700                       			beq.s	locj_6E72
000084B2 383C 00E0                  			move.w	#224,d4
000084B6                            	locj_6E28:
000084B6 41F9 0000 8483             			lea	(locj_6DF4+1).l,a0
000084BC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084C0 D044                       			add.w	d4,d0
000084C2 0240 01F0                  			andi.w	#$1F0,d0
000084C6 E848                       			lsr.w	#4,d0
000084C8 1030 0000                  			move.b	(a0,d0.w),d0
000084CC 47F9 0000 0000             			lea	(locj_6FE4).l,a3
000084D2 3673 0000                  			movea.w	(a3,d0.w),a3
000084D6 6700                       			beq.s	locj_6E5E
000084D8 7AF0                       			moveq	#-16,d5
000084DA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084DE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084E2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084E6 6100 0000                  			bsr.w	DrawBlocks_LR
000084EA 6000                       			bra.s	locj_6E72
000084EC                            ;===============================================================================
000084EC                            	locj_6E5E:
000084EC 7A00                       			moveq	#0,d5
000084EE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084F2 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084F6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084FA 7C1F                       			moveq	#(512/16)-1,d6
000084FC 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008500                            	locj_6E72:
00008500 4A12                       			tst.b	(a2)
00008502 6600                       			bne.s	locj_6E78
00008504 4E75                       			rts
00008506                            ;===============================================================================			
00008506                            	locj_6E78:
00008506 78F0                       			moveq	#-16,d4
00008508 7AF0                       			moveq	#-16,d5
0000850A 1012                       			move.b	(a2),d0
0000850C 0200 00A8                  			andi.b	#$A8,d0
00008510 6700                       			beq.s	locj_6E8C
00008512 E208                       			lsr.b	#1,d0
00008514 1480                       			move.b	d0,(a2)
00008516 3A3C 0140                  			move.w	#320,d5
0000851A                            	locj_6E8C:
0000851A 41F9 0000 8482             			lea	(locj_6DF4).l,a0
00008520 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008524 0240 01F0                  			andi.w	#$1F0,d0
00008528 E848                       			lsr.w	#4,d0
0000852A 41F0 0000                  			lea	(a0,d0.w),a0
0000852E 6000 0000                  			bra.w	locj_6FEC						
00008532                            ;===============================================================================
00008532                            
00008532                            
00008532                            	; locj_6EA4:
00008532                            	DrawBGScrollBlock3:
00008532 4A12                       			tst.b	(a2)
00008534 6700 0000                  			beq.w	locj_6EF0
00008538 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000853E 6700 0000                  			beq.w	Draw_Mz
00008542 0892 0000                  			bclr	#0,(a2)
00008546 6700                       			beq.s	locj_6ED0
00008548                            			; Draw new tiles on the left
00008548 383C 0040                  			move.w	#$40,d4
0000854C 7AF0                       			moveq	#-16,d5
0000854E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008552 383C 0040                  			move.w	#$40,d4
00008556 7AF0                       			moveq	#-16,d5
00008558 7C02                       			moveq	#3-1,d6
0000855A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000855E                            	locj_6ED0:
0000855E 0892 0001                  			bclr	#1,(a2)
00008562 6700                       			beq.s	locj_6EF0
00008564                            			; Draw new tiles on the right
00008564 383C 0040                  			move.w	#$40,d4
00008568 3A3C 0140                  			move.w	#320,d5
0000856C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008570 383C 0040                  			move.w	#$40,d4
00008574 3A3C 0140                  			move.w	#320,d5
00008578 7C02                       			moveq	#3-1,d6
0000857A 6100 0000                  			bsr.w	DrawBlocks_TB_2
0000857E                            	locj_6EF0:
0000857E 4E75                       			rts
00008580                            	locj_6EF2:
00008580 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008590 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085B0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085C0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085D0 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085E0 0200                       			dc.b $02,$00
000085E2                            ;===============================================================================
000085E2                            	Draw_Mz:
000085E2 78F0                       			moveq	#-16,d4
000085E4 0892 0000                  			bclr	#0,(a2)
000085E8 6600                       			bne.s	locj_6F66
000085EA 0892 0001                  			bclr	#1,(a2)
000085EE 6700                       			beq.s	locj_6FAE
000085F0 383C 00E0                  			move.w	#224,d4
000085F4                            	locj_6F66:
000085F4 41F9 0000 8581             			lea	(locj_6EF2+1).l,a0
000085FA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085FE 0440 0200                  			subi.w	#$200,d0
00008602 D044                       			add.w	d4,d0
00008604 0240 07F0                  			andi.w	#$7F0,d0
00008608 E848                       			lsr.w	#4,d0
0000860A 1030 0000                  			move.b	(a0,d0.w),d0
0000860E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008612 6700                       			beq.s	locj_6F9A
00008614 7AF0                       			moveq	#-16,d5
00008616 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000861A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000861E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008622 6100 0000                  			bsr.w	DrawBlocks_LR
00008626 6000                       			bra.s	locj_6FAE
00008628                            ;===============================================================================
00008628                            	locj_6F9A:
00008628 7A00                       			moveq	#0,d5
0000862A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000862E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008632 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008636 7C1F                       			moveq	#(512/16)-1,d6
00008638 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000863C                            	locj_6FAE:
0000863C 4A12                       			tst.b	(a2)
0000863E 6600                       			bne.s	locj_6FB4
00008640 4E75                       			rts
00008642                            ;===============================================================================			
00008642                            	locj_6FB4:
00008642 78F0                       			moveq	#-16,d4
00008644 7AF0                       			moveq	#-16,d5
00008646 1012                       			move.b	(a2),d0
00008648 0200 00A8                  			andi.b	#$A8,d0
0000864C 6700                       			beq.s	locj_6FC8
0000864E E208                       			lsr.b	#1,d0
00008650 1480                       			move.b	d0,(a2)
00008652 3A3C 0140                  			move.w	#320,d5
00008656                            	locj_6FC8:
00008656 41F9 0000 8580             			lea	(locj_6EF2).l,a0
0000865C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008660 0440 0200                  			subi.w	#$200,d0
00008664 0240 07F0                  			andi.w	#$7F0,d0
00008668 E848                       			lsr.w	#4,d0
0000866A 41F0 0000                  			lea	(a0,d0.w),a0
0000866E 6000 0000                  			bra.w	locj_6FEC
00008672                            ;===============================================================================			
00008672                            	locj_6FE4:
00008672 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
0000867A                            	locj_6FEC:
0000867A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000867C 2E3C 0080 0000             			move.l	#$800000,d7
00008682                            	locj_6FF4:			
00008682 7000                       			moveq	#0,d0
00008684 1018                       			move.b	(a0)+,d0
00008686 0112                       			btst	d0,(a2)
00008688 6700                       			beq.s	locj_701C
0000868A 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
0000868E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008692 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008696 6100 0000                  			bsr.w	GetBlockData
0000869A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000869E 6100 0000                  			bsr.w	Calc_VRAM_Pos
000086A2 6100 0000                  			bsr.w	DrawBlock
000086A6 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000086AA                            	locj_701C:
000086AA 0644 0010                  			addi.w	#16,d4
000086AE 51CE FFD2                  			dbf	d6,locj_6FF4
000086B2 4212                       			clr.b	(a2)
000086B4 4E75                       			rts			
000086B6                            
000086B6                            
000086B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B6                            
000086B6                            ; Don't be fooled by the name: this function's for drawing from left to right
000086B6                            ; when the camera's moving up or down
000086B6                            ; DrawTiles_LR:
000086B6                            DrawBlocks_LR:
000086B6 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000086B8                            ; DrawTiles_LR_2:
000086B8                            DrawBlocks_LR_2:
000086B8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086BE 2200                       		move.l	d0,d1
000086C0                            
000086C0                            	@loop:
000086C0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086C4 6100 0000                  		bsr.w	GetBlockData
000086C8 2001                       		move.l	d1,d0
000086CA 6100 0000                  		bsr.w	DrawBlock
000086CE 5801                       		addq.b	#4,d1		; Two tiles ahead
000086D0 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000086D4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086D8 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086DC 51CE FFE2                  		dbf	d6,@loop
000086E0 4E75                       		rts
000086E2                            ; End of function DrawBlocks_LR
000086E2                            
000086E2                            ; DrawTiles_LR_3:
000086E2                            DrawBlocks_LR_3:
000086E2 2E3C 0080 0000             		move.l	#$800000,d7
000086E8 2200                       		move.l	d0,d1
000086EA                            
000086EA                            	@loop:
000086EA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086EE 6100 0000                  		bsr.w	GetBlockData_2
000086F2 2001                       		move.l	d1,d0
000086F4 6100 0000                  		bsr.w	DrawBlock
000086F8 5801                       		addq.b	#4,d1
000086FA 0201 007F                  		andi.b	#$7F,d1
000086FE 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008702 0645 0010                  		addi.w	#16,d5
00008706 51CE FFE2                  		dbf	d6,@loop
0000870A 4E75                       		rts	
0000870C                            ; End of function DrawBlocks_LR_3
0000870C                            
0000870C                            
0000870C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000870C                            
0000870C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000870C                            ; when the camera's moving left or right
0000870C                            ; DrawTiles_TB:
0000870C                            DrawBlocks_TB:
0000870C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000870E                            ; DrawTiles_TB_2:
0000870E                            DrawBlocks_TB_2:
0000870E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008714 2200                       		move.l	d0,d1
00008716                            
00008716                            	@loop:
00008716 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000871A 6100 0000                  		bsr.w	GetBlockData
0000871E 2001                       		move.l	d1,d0
00008720 6100 0000                  		bsr.w	DrawBlock
00008724 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008728 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
0000872C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008730 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008734 51CE FFE0                  		dbf	d6,@loop
00008738 4E75                       		rts	
0000873A                            ; End of function DrawBlocks_TB_2
0000873A                            
0000873A                            
0000873A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000873A                            
0000873A                            ; Draws a block's worth of tiles
0000873A                            ; Parameters:
0000873A                            ; a0 = Pointer to block metadata (block index and X/Y flip)
0000873A                            ; a1 = Pointer to block
0000873A                            ; a5 = Pointer to VDP command port
0000873A                            ; a6 = Pointer to VDP data port
0000873A                            ; d0 = VRAM command to access plane
0000873A                            ; d2 = VRAM plane A/B specifier
0000873A                            ; d7 = Plane row delta
0000873A                            ; DrawTiles:
0000873A                            DrawBlock:
0000873A 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
0000873C 4840                       		swap	d0
0000873E 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008742 6600                       		bne.s	DrawFlipY
00008744 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008748 6600                       		bne.s	DrawFlipX
0000874A 2A80                       		move.l	d0,(a5)
0000874C 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
0000874E D087                       		add.l	d7,d0		; Next row
00008750 2A80                       		move.l	d0,(a5)
00008752 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
00008754 4E75                       		rts	
00008756                            ; ===========================================================================
00008756                            
00008756                            DrawFlipX:
00008756 2A80                       		move.l	d0,(a5)
00008758 2819                       		move.l	(a1)+,d4
0000875A 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008760 4844                       		swap	d4		; Swap the tiles around
00008762 2C84                       		move.l	d4,(a6)		; Write top two tiles
00008764 D087                       		add.l	d7,d0		; Next row
00008766 2A80                       		move.l	d0,(a5)
00008768 2819                       		move.l	(a1)+,d4
0000876A 0A84 0800 0800             		eori.l	#$8000800,d4
00008770 4844                       		swap	d4
00008772 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
00008774 4E75                       		rts	
00008776                            ; ===========================================================================
00008776                            
00008776                            DrawFlipY:
00008776 0810 0003                  		btst	#3,(a0)
0000877A 6600                       		bne.s	DrawFlipXY
0000877C 2A80                       		move.l	d0,(a5)
0000877E 2A19                       		move.l	(a1)+,d5
00008780 2819                       		move.l	(a1)+,d4
00008782 0A84 1000 1000             		eori.l	#$10001000,d4
00008788 2C84                       		move.l	d4,(a6)
0000878A D087                       		add.l	d7,d0
0000878C 2A80                       		move.l	d0,(a5)
0000878E 0A85 1000 1000             		eori.l	#$10001000,d5
00008794 2C85                       		move.l	d5,(a6)
00008796 4E75                       		rts	
00008798                            ; ===========================================================================
00008798                            
00008798                            DrawFlipXY:
00008798 2A80                       		move.l	d0,(a5)
0000879A 2A19                       		move.l	(a1)+,d5
0000879C 2819                       		move.l	(a1)+,d4
0000879E 0A84 1800 1800             		eori.l	#$18001800,d4
000087A4 4844                       		swap	d4
000087A6 2C84                       		move.l	d4,(a6)
000087A8 D087                       		add.l	d7,d0
000087AA 2A80                       		move.l	d0,(a5)
000087AC 0A85 1800 1800             		eori.l	#$18001800,d5
000087B2 4845                       		swap	d5
000087B4 2C85                       		move.l	d5,(a6)
000087B6 4E75                       		rts	
000087B8                            ; End of function DrawBlocks
000087B8                            
000087B8                            ; ===========================================================================
000087B8                            ; unused garbage
000087B8                            
000087B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087B8                            
000087B8                            ; Gets address of block at a certain coordinate
000087B8                            ; Parameters:
000087B8                            ; a4 = Pointer to level layout
000087B8                            ; d4 = Relative Y coordinate
000087B8                            ; d5 = Relative X coordinate
000087B8                            ; Returns:
000087B8                            ; a0 = Address of block metadata
000087B8                            ; a1 = Address of block
000087B8                            ; DrawBlocks:
000087B8                            GetBlockData:
000087B8 DA53                       			add.w	(a3),d5
000087BA                            	GetBlockData_2:
000087BA D86B 0004                  			add.w	4(a3),d4
000087BE 43F8 B000                  			lea	(v_16x16).w,a1
000087C2                            		; Turn Y coordinate into index into level layout
000087C2 3604                       		move.w	d4,d3
000087C4 E24B                       		lsr.w	#1,d3
000087C6 0243 0380                  		andi.w	#$380,d3
000087CA                            		; Turn X coordinate into index into level layout
000087CA E64D                       		lsr.w	#3,d5
000087CC 3005                       		move.w	d5,d0
000087CE EA48                       		lsr.w	#5,d0
000087D0 0240 007F                  		andi.w	#$7F,d0
000087D4                            		; Get chunk from level layout
000087D4 D043                       		add.w	d3,d0
000087D6 76FF                       		moveq	#-1,d3
000087D8 1634 0000                  		move.b	(a4,d0.w),d3
000087DC 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087DE                            		; Turn chunk ID into index into chunk table
000087DE 5303                       		subq.b	#1,d3
000087E0 0243 007F                  		andi.w	#$7F,d3
000087E4 EE5B                       		ror.w	#7,d3
000087E6                            		; Turn Y coordinate into index into chunk
000087E6 D844                       		add.w	d4,d4
000087E8 0244 01E0                  		andi.w	#$1E0,d4
000087EC                            		; Turn X coordinate into index into chunk
000087EC 0245 001E                  		andi.w	#$1E,d5
000087F0                            		; Get block metadata from chunk
000087F0 D644                       		add.w	d4,d3
000087F2 D645                       		add.w	d5,d3
000087F4 2043                       		movea.l	d3,a0
000087F6 3610                       		move.w	(a0),d3
000087F8                            		; Turn block ID into address
000087F8 0243 03FF                  		andi.w	#$3FF,d3
000087FC E74B                       		lsl.w	#3,d3
000087FE D2C3                       		adda.w	d3,a1
00008800                            
00008800                            locret_6C1E:
00008800 4E75                       		rts	
00008802                            ; End of function GetBlockData
00008802                            
00008802                            
00008802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008802                            
00008802                            ; Produces a VRAM plane access command from coordinates
00008802                            ; Parameters:
00008802                            ; d4 = Relative Y coordinate
00008802                            ; d5 = Relative X coordinate
00008802                            ; Returns VDP command in d0
00008802                            Calc_VRAM_Pos:
00008802 DA53                       			add.w	(a3),d5
00008804                            	Calc_VRAM_Pos_2:
00008804 D86B 0004                  			add.w	4(a3),d4
00008808                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008808                            		; Also note that this wraps the value to the size of the plane:
00008808                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008808 0244 00F0                  		andi.w	#$F0,d4
0000880C 0245 01F0                  		andi.w	#$1F0,d5
00008810                            		; Transform the adjusted coordinates into a VDP command
00008810 E94C                       		lsl.w	#4,d4
00008812 E44D                       		lsr.w	#2,d5
00008814 D845                       		add.w	d5,d4
00008816 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008818 4840                       		swap	d0
0000881A 3004                       		move.w	d4,d0
0000881C 4E75                       		rts	
0000881E                            ; End of function Calc_VRAM_Pos
0000881E                            
0000881E                            
0000881E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000881E                            ; not used
0000881E                            
0000881E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000881E                            ; VRAM layout: the only difference is the high bits of the
0000881E                            ; plane's VRAM address, which are 10 instead of 11.
0000881E                            ; Both the foreground and background are at $C000 and $E000
0000881E                            ; respectively, so this one starting at $8000 makes no sense.
0000881E                            ; sub_6C3C:
0000881E                            Calc_VRAM_Pos_Unknown:
0000881E D86B 0004                  		add.w	4(a3),d4
00008822 DA53                       		add.w	(a3),d5
00008824 0244 00F0                  		andi.w	#$F0,d4
00008828 0245 01F0                  		andi.w	#$1F0,d5
0000882C E94C                       		lsl.w	#4,d4
0000882E E44D                       		lsr.w	#2,d5
00008830 D845                       		add.w	d5,d4
00008832 7002                       		moveq	#2,d0
00008834 4840                       		swap	d0
00008836 3004                       		move.w	d4,d0
00008838 4E75                       		rts	
0000883A                            ; End of function Calc_VRAM_Pos_Unknown
0000883A                            
0000883A                            ; ---------------------------------------------------------------------------
0000883A                            ; Subroutine to	load tiles as soon as the level	appears
0000883A                            ; ---------------------------------------------------------------------------
0000883A                            
0000883A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000883A                            
0000883A                            
0000883A                            LoadTilesFromStart:
0000883A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008840 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008846 47F8 F700                  		lea	(v_screenposx).w,a3
0000884A 49F8 A400                  		lea	(v_lvllayout).w,a4
0000884E 343C 4000                  		move.w	#$4000,d2
00008852 6100                       		bsr.s	DrawChunks
00008854 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008858 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000885C 343C 6000                  		move.w	#$6000,d2
00008860 4A38 FE10                  			tst.b	(v_zone).w
00008864 6700 0000                  			beq.w	Draw_GHz_Bg
00008868 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000886E 6700 0000                  			beq.w	Draw_Mz_Bg
00008872 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008878 6700 0000                  			beq.w	Draw_SBz_Bg
0000887C 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008882 6700 0000                  			beq.w	Draw_GHz_Bg
00008886                            ; End of function LoadTilesFromStart
00008886                            
00008886                            
00008886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008886                            
00008886                            
00008886                            DrawChunks:
00008886 78F0                       		moveq	#-16,d4
00008888 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000888A                            
0000888A                            	@loop:
0000888A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000888E 7A00                       		moveq	#0,d5
00008890 3204                       		move.w	d4,d1
00008892 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00008896 3801                       		move.w	d1,d4
00008898 7A00                       		moveq	#0,d5
0000889A 7C1F                       		moveq	#(512/16)-1,d6
0000889C 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000088A0 4CDF 0070                  		movem.l	(sp)+,d4-d6
000088A4 0644 0010                  		addi.w	#16,d4
000088A8 51CE FFE0                  		dbf	d6,@loop
000088AC 4E75                       		rts	
000088AE                            ; End of function DrawChunks
000088AE                            
000088AE                            	Draw_GHz_Bg:
000088AE 7800                       			moveq	#0,d4
000088B0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088B2                            	locj_7224:			
000088B2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088B6 41F9 0000 0000             			lea	(locj_724a),a0
000088BC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088C0 D044                       			add.w	d4,d0
000088C2 0240 00F0                  			andi.w	#$F0,d0
000088C6 6100 0000                  			bsr.w	locj_72Ba
000088CA 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088CE 0644 0010                  			addi.w	#16,d4
000088D2 51CE FFDE                  			dbf	d6,locj_7224
000088D6 4E75                       			rts
000088D8                            	locj_724a:
000088D8 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088E8                            ;-------------------------------------------------------------------------------
000088E8                            	Draw_Mz_Bg:;locj_725a:
000088E8 78F0                       			moveq	#-16,d4
000088EA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088EC                            	locj_725E:			
000088EC 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088F0 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088F4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088F8 0440 0200                  			subi.w	#$200,d0
000088FC D044                       			add.w	d4,d0
000088FE 0240 07F0                  			andi.w	#$7F0,d0
00008902 6100 0000                  			bsr.w	locj_72Ba
00008906 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000890A 0644 0010                  			addi.w	#16,d4
0000890E 51CE FFDC                  			dbf	d6,locj_725E
00008912 4E75                       			rts
00008914                            ;-------------------------------------------------------------------------------
00008914                            	Draw_SBz_Bg:;locj_7288:
00008914 78F0                       			moveq	#-16,d4
00008916 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008918                            	locj_728C:			
00008918 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000891C 41FA FB65                  			lea	(locj_6DF4+1),a0
00008920 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008924 D044                       			add.w	d4,d0
00008926 0240 01F0                  			andi.w	#$1F0,d0
0000892A 6100 0000                  			bsr.w	locj_72Ba
0000892E 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008932 0644 0010                  			addi.w	#16,d4
00008936 51CE FFE0                  			dbf	d6,locj_728C
0000893A 4E75                       			rts
0000893C                            ;-------------------------------------------------------------------------------
0000893C                            	locj_72B2:
0000893C F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
00008944                            	locj_72Ba:
00008944 E848                       			lsr.w	#4,d0
00008946 1030 0000                  			move.b	(a0,d0.w),d0
0000894A 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
0000894E 6700                       			beq.s	locj_72da
00008950 7AF0                       			moveq	#-16,d5
00008952 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008956 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
0000895A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000895E 6100 FD56                  			bsr.w	DrawBlocks_LR
00008962 6000                       			bra.s	locj_72EE
00008964                            	locj_72da:
00008964 7A00                       			moveq	#0,d5
00008966 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000896A 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
0000896E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008972 7C1F                       			moveq	#(512/16)-1,d6
00008974 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008978                            	locj_72EE:
00008978 4E75                       			rts
0000897A                            
0000897A                            ; ---------------------------------------------------------------------------
0000897A                            ; Subroutine to load basic level data
0000897A                            ; ---------------------------------------------------------------------------
0000897A                            
0000897A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000897A                            
0000897A                            
0000897A                            LevelDataLoad:
0000897A 7000                       		moveq	#0,d0
0000897C 1038 FE10                  		move.b	(v_zone).w,d0
00008980 E948                       		lsl.w	#4,d0
00008982 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008988 45F2 0000                  		lea	(a2,d0.w),a2
0000898C 2F0A                       		move.l	a2,-(sp)
0000898E 588A                       		addq.l	#4,a2
00008990 205A                       		movea.l	(a2)+,a0
00008992 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
00008996 303C 0000                  		move.w	#0,d0
0000899A 6100 8EF0                  		bsr.w	EniDec
0000899E 205A                       		movea.l	(a2)+,a0
000089A0 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
000089A6 6100 9062                  		bsr.w	KosDec
000089AA 6100 0000                  		bsr.w	LevelLayoutLoad
000089AE 301A                       		move.w	(a2)+,d0
000089B0 3012                       		move.w	(a2),d0
000089B2 0240 00FF                  		andi.w	#$FF,d0
000089B6 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000089BC 6600                       		bne.s	@notSBZ3	; if not, branch
000089BE 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000089C0                            
000089C0                            	@notSBZ3:
000089C0 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000089C6 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000089C8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000089CE 6600                       		bne.s	@normalpal	; if not, branch
000089D0                            
000089D0                            	@isSBZorFZ:
000089D0 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000089D2                            
000089D2                            	@normalpal:
000089D2 6100 9A5C                  		bsr.w	PalLoad1	; load palette (based on d0)
000089D6 245F                       		movea.l	(sp)+,a2
000089D8 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089DA 7000                       		moveq	#0,d0
000089DC 1012                       		move.b	(a2),d0
000089DE 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089E0 6100 8D0C                  		bsr.w	AddPLC		; load pattern load cues
000089E4                            
000089E4                            	@skipPLC:
000089E4 4E75                       		rts	
000089E6                            ; End of function LevelDataLoad
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Level	layout loading subroutine
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            
000089E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089E6                            
000089E6                            
000089E6                            LevelLayoutLoad:
000089E6 47F8 A400                  		lea	(v_lvllayout).w,a3
000089EA 323C 01FF                  		move.w	#$1FF,d1
000089EE 7000                       		moveq	#0,d0
000089F0                            
000089F0                            LevLoad_ClrRam:
000089F0 26C0                       		move.l	d0,(a3)+
000089F2 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089F6                            
000089F6 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089FA 7200                       		moveq	#0,d1
000089FC 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008A00 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008A04 7202                       		moveq	#2,d1
00008A06                            ; End of function LevelLayoutLoad
00008A06                            
00008A06                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008A06                            
00008A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A06                            
00008A06                            
00008A06                            LevelLayoutLoad2:
00008A06 3038 FE10                  		move.w	(v_zone).w,d0
00008A0A ED08                       		lsl.b	#6,d0
00008A0C EA48                       		lsr.w	#5,d0
00008A0E 3400                       		move.w	d0,d2
00008A10 D040                       		add.w	d0,d0
00008A12 D042                       		add.w	d2,d0
00008A14 D041                       		add.w	d1,d0
00008A16 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A1C 3031 0000                  		move.w	(a1,d0.w),d0
00008A20 43F1 0000                  		lea	(a1,d0.w),a1
00008A24 7200                       		moveq	#0,d1
00008A26 3401                       		move.w	d1,d2
00008A28 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A2A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A2C                            
00008A2C                            LevLoad_NumRows:
00008A2C 3001                       		move.w	d1,d0
00008A2E 204B                       		movea.l	a3,a0
00008A30                            
00008A30                            LevLoad_Row:
00008A30 10D9                       		move.b	(a1)+,(a0)+
00008A32 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A36 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A3A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A3E 4E75                       		rts	
00008A40                            ; End of function LevelLayoutLoad2
00008A40                            
00008A40                            		include	"_inc\DynamicLevelEvents.asm"
00008A40                            ; ---------------------------------------------------------------------------
00008A40                            ; Dynamic level events
00008A40                            ; ---------------------------------------------------------------------------
00008A40                            
00008A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A40                            
00008A40                            
00008A40                            DynamicLevelEvents:
00008A40 7000                       		moveq	#0,d0
00008A42 1038 FE10                  		move.b	(v_zone).w,d0
00008A46 D040                       		add.w	d0,d0
00008A48 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A4C 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A50 7202                       		moveq	#2,d1
00008A52 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A56 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A5A 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A5C 6400                       		bcc.s	loc_6DAC
00008A5E                            
00008A5E 4441                       		neg.w	d1
00008A60 3038 F704                  		move.w	(v_screenposy).w,d0
00008A64 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A68 6300                       		bls.s	loc_6DA0
00008A6A 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A6E 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A74                            
00008A74                            loc_6DA0:
00008A74 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A78 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A7E                            
00008A7E                            DLE_NoChg:
00008A7E 4E75                       		rts	
00008A80                            ; ===========================================================================
00008A80                            
00008A80                            loc_6DAC:
00008A80 3038 F704                  		move.w	(v_screenposy).w,d0
00008A84 5040                       		addq.w	#8,d0
00008A86 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A8A 6500                       		bcs.s	loc_6DC4
00008A8C 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A92 6700                       		beq.s	loc_6DC4
00008A94 D241                       		add.w	d1,d1
00008A96 D241                       		add.w	d1,d1
00008A98                            
00008A98                            loc_6DC4:
00008A98 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A9C 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008AA2 4E75                       		rts	
00008AA4                            ; End of function DynamicLevelEvents
00008AA4                            
00008AA4                            ; ===========================================================================
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            ; Offset index for dynamic level events
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008AA8 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008AAC 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008AB0 0000                       		dc.w DLE_Ending-DLE_Index
00008AB2                            ; ===========================================================================
00008AB2                            ; ---------------------------------------------------------------------------
00008AB2                            ; Green	Hill Zone dynamic level events
00008AB2                            ; ---------------------------------------------------------------------------
00008AB2                            
00008AB2                            DLE_GHZ:
00008AB2 7000                       		moveq	#0,d0
00008AB4 1038 FE11                  		move.b	(v_act).w,d0
00008AB8 D040                       		add.w	d0,d0
00008ABA 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008ABE 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008AC2                            ; ===========================================================================
00008AC2 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008AC4 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008AC6 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008AC8                            ; ===========================================================================
00008AC8                            
00008AC8                            DLE_GHZ1:
00008AC8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008ACE 6600                       		bne.s	gohere
00008AD0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AD6 4E75                       		rts
00008AD8                            gohere:
00008AD8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008ADE 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008AE4 6500                       		bcs.s	locret_6E08	; if not, branch
00008AE6 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008AEC                            
00008AEC                            locret_6E08:
00008AEC 4E75                       		rts	
00008AEE                            ; ===========================================================================
00008AEE                            
00008AEE                            DLE_GHZ2:
00008AEE 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AF4 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AFA 6500                       		bcs.s	locret_6E3A
00008AFC 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008B02 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B08 6500                       		bcs.s	locret_6E3A
00008B0A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B10 6500                       		bcs.s	loc_6E9A
00008B12 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B18 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B1E 6400                       		bcc.s	loc_6E8F
00008B20 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B26 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B2C                            
00008B2C                            loc_6E8F:
00008B2C 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B32 6400                       		bcc.s	loc_6E9A
00008B34                            
00008B34                            locret_6E3A:
00008B34 4E75                       		rts	
00008B36                            ; ===========================================================================
00008B36                            
00008B36                            loc_6E9A:
00008B36 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B3C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B40 4E75                       		rts		
00008B42                            ; ===========================================================================
00008B42                            
00008B42                            DLE_GHZ3:
00008B42 7000                       		moveq	#0,d0
00008B44 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B48 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B4C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B50                            ; ===========================================================================
00008B50 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B52 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B54 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B56                            ; ===========================================================================
00008B56                            
00008B56                            DLE_GHZ3main:
00008B56 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B5C 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B62 6500                       		bcs.s	locret_6E96
00008B64 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B6A 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B70 6500                       		bcs.s	locret_6E96
00008B72 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B78 6500                       		bcs.s	loc_6E98
00008B7A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B80 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B86 6400                       		bcc.s	loc_6E8E
00008B88 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B8E 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B94                            
00008B94                            loc_6E8E:
00008B94 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B9A 6400                       		bcc.s	loc_6E98
00008B9C                            
00008B9C                            locret_6E96:
00008B9C 4E75                       		rts	
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            loc_6E98:
00008B9E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008BA4 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BA8 4E75                       		rts	
00008BAA                            ; ===========================================================================
00008BAA                            
00008BAA                            DLE_GHZ3boss:
00008BAA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008BB0 6400                       		bcc.s	loc_6EB0
00008BB2 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008BB6                            
00008BB6                            loc_6EB0:
00008BB6 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008BBC 6500                       		bcs.s	locret_6EE8
00008BBE 6100 0000                  		bsr.w	FindFreeObj
00008BC2 6600                       		bne.s	loc_6ED0
00008BC4 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008BC8 337C 1460 0008             		move.w	#$1460,obX(a1)
00008BCE 337C 0280 000C             		move.w	#$280,obY(a1)
00008BD4                            
00008BD4                            loc_6ED0:
00008BDC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BE2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BE6 7000                       		moveq	#plcid_Egg,d0
00008BE8 6000 8B04                  		bra.w	AddPLC		; load boss patterns
00008BEC                            		
00008BEC                            ; ===========================================================================
00008BEC                            
00008BEC                            locret_6EE8:
00008BEC 4E75                       		rts	
00008BEE                            ; ===========================================================================
00008BEE                            
00008BEE                            DLE_GHZ3end:
00008BEE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BF4 337C 0280 000C             		move.w	#$280,obY(a1)
00008BFA 4E75                       		rts	
00008BFC                            ; ===========================================================================
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            ; Labyrinth Zone dynamic level events
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            
00008BFC                            DLE_LZ:
00008BFC 7000                       		moveq	#0,d0
00008BFE 1038 FE11                  		move.b	(v_act).w,d0
00008C02 D040                       		add.w	d0,d0
00008C04 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008C08 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008C0C                            ; ===========================================================================
00008C0C 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C0E 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C10 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C12 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C14                            ; ===========================================================================
00008C14                            
00008C14                            DLE_LZ12:
00008C14 4E75                       		rts	
00008C16                            ; ===========================================================================
00008C16                            
00008C16                            DLE_LZ3:
00008C16 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C1A 6700                       		beq.s	loc_6F28	; if not, branch
00008C1C 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C20 0C11 0007                  		cmpi.b	#7,(a1)
00008C24 6700                       		beq.s	loc_6F28
00008C26 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C32                            
00008C32                            loc_6F28:
00008C32 4A38 F742                  		tst.b	(v_dle_routine).w
00008C36 6600                       		bne.s	locret_6F64
00008C38 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C3E 6500                       		bcs.s	locret_6F62
00008C40 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C46 6400                       		bcc.s	locret_6F62
00008C48 6100 0000                  		bsr.w	FindFreeObj
00008C4C 6600                       		bne.s	loc_6F4A
00008C4E 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C52                            
00008C52                            loc_6F4A:
00008C5A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C60 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C64 7000                       		moveq	#plcid_Boss,d0
00008C66 6000 8A86                  		bra.w	AddPLC		; load boss patterns
00008C6A                            ; ===========================================================================
00008C6A                            
00008C6A                            locret_6F62:
00008C6A 4E75                       		rts	
00008C6C                            ; ===========================================================================
00008C6C                            
00008C6C                            locret_6F64:
00008C6C 4E75                       		rts	
00008C6E                            ; ===========================================================================
00008C6E                            
00008C6E                            DLE_SBZ3:
00008C6E 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C74 6500                       		bcs.s	locret_6F8C
00008C76 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C7C 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C7E 4238 FE30                  		clr.b	(v_lastlamp).w
00008C82 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C88 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C8E 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C94                            
00008C94                            locret_6F8C:
00008C94 4E75                       		rts	
00008C96                            ; ===========================================================================
00008C96                            ; ---------------------------------------------------------------------------
00008C96                            ; Marble Zone dynamic level events
00008C96                            ; ---------------------------------------------------------------------------
00008C96                            
00008C96                            DLE_MZ:
00008C96 7000                       		moveq	#0,d0
00008C98 1038 FE11                  		move.b	(v_act).w,d0
00008C9C D040                       		add.w	d0,d0
00008C9E 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008CA2 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008CA6                            ; ===========================================================================
00008CA6 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008CA8 0000                       		dc.w DLE_MZ2-DLE_MZx
00008CAA 0000                       		dc.w DLE_MZ3-DLE_MZx
00008CAC                            ; ===========================================================================
00008CAC                            
00008CAC                            DLE_MZ1:
00008CAC 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CB2 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008CB8 6500                       		bcs.s	locret_6FE8
00008CBA 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008CC0                            
00008CC0                            locret_6FE8:
00008CC0 4E75                       		rts	
00008CC2                            
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            DLE_MZ2:
00008CC2 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CC8 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008CCE 6500                       		bcs.s	locret_6FE9
00008CD0 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008CD6                            		
00008CD6                            locret_6FE9:
00008CD6 4E75                       		rts	
00008CD8                            ; ===========================================================================
00008CD8                            
00008CD8                            DLE_MZ3:
00008CD8 7000                       		moveq	#0,d0
00008CDA 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CDE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CE2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CE6                            ; ===========================================================================
00008CE6 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CE8 0000                       		dc.w DLE_MZ3end-off_7098
00008CEA                            ; ===========================================================================
00008CEA                            
00008CEA                            DLE_MZ3boss:
00008CEA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CF0 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CF6 6500                       		bcs.s	locret_70E8
00008CF8 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CFE 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008D04 6500                       		bcs.s	locret_70E8
00008D06 6100 0000                  		bsr.w	FindFreeObj
00008D0A 6600                       		bne.s	loc_70D0
00008D0C 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D10 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D16 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D1C                            
00008D1C                            loc_70D0:
00008D24 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D2A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D2E 7000                       		moveq	#plcid_Boss,d0
00008D30 6000 89BC                  		bra.w	AddPLC		; load boss patterns
00008D34                            ; ===========================================================================
00008D34                            
00008D34                            locret_70E8:
00008D34 4E75                       		rts	
00008D36                            ; ===========================================================================
00008D36                            
00008D36                            DLE_MZ3end:
00008D36 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D3C 4E75                       		rts	
00008D3E                            		
00008D3E                            ; ===========================================================================
00008D3E                            ; ---------------------------------------------------------------------------
00008D3E                            ; Star Light Zone dynamic level events
00008D3E                            ; ---------------------------------------------------------------------------
00008D3E                            
00008D3E                            DLE_SLZ:
00008D3E 7000                       		moveq	#0,d0
00008D40 1038 FE11                  		move.b	(v_act).w,d0
00008D44 D040                       		add.w	d0,d0
00008D46 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D4A 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D4E                            ; ===========================================================================
00008D4E 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D50 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D52 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D54                            ; ===========================================================================
00008D54                            
00008D54                            DLE_SLZ12:
00008D54 4E75                       		rts	
00008D56                            ; ===========================================================================
00008D56                            
00008D56                            DLE_SLZ3:
00008D56 7000                       		moveq	#0,d0
00008D58 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D5C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D60 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D64                            ; ===========================================================================
00008D64 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D66 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D68 0000                       		dc.w DLE_SLZ3end-off_7118
00008D6A                            ; ===========================================================================
00008D6A                            
00008D6A                            DLE_SLZ3main:
00008D6A 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D70 6500                       		bcs.s	locret_7130
00008D72 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D78 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D7C                            
00008D7C                            locret_7130:
00008D7C 4E75                       		rts	
00008D7E                            ; ===========================================================================
00008D7E                            
00008D7E                            DLE_SLZ3boss:
00008D7E 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D84 6500                       		bcs.s	locret_715C
00008D86 6100 0000                  		bsr.w	FindFreeObj
00008D8A 6600                       		bne.s	loc_7144
00008D8C 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D90                            
00008D90                            loc_7144:
00008D98 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D9E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DA2 7000                       		moveq	#plcid_Boss,d0
00008DA4 6000 8948                  		bra.w	AddPLC		; load boss patterns
00008DA8                            ; ===========================================================================
00008DA8                            
00008DA8                            locret_715C:
00008DA8 4E75                       		rts	
00008DAA                            ; ===========================================================================
00008DAA                            
00008DAA                            DLE_SLZ3end:
00008DAA 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DB0 4E75                       		rts
00008DB2 4E75                       		rts
00008DB4                            ; ===========================================================================
00008DB4                            ; ---------------------------------------------------------------------------
00008DB4                            ; Spring Yard Zone dynamic level events
00008DB4                            ; ---------------------------------------------------------------------------
00008DB4                            
00008DB4                            DLE_SYZ:
00008DB4 7000                       		moveq	#0,d0
00008DB6 1038 FE11                  		move.b	(v_act).w,d0
00008DBA D040                       		add.w	d0,d0
00008DBC 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008DC0 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008DC4                            ; ===========================================================================
00008DC4 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008DC6 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008DC8 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008DCA                            ; ===========================================================================
00008DCA                            
00008DCA                            DLE_SYZ1:
00008DCA 4E75                       		rts	
00008DCC                            ; ===========================================================================
00008DCC                            
00008DCC                            DLE_SYZ2:
00008DCC 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DD2 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008DD8 6500                       		bcs.s	locret_71A2
00008DDA 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DE0 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DE6 6500                       		bcs.s	locret_71A2
00008DE8 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DEE                            
00008DEE                            locret_71A2:
00008DEE 4E75                       		rts	
00008DF0                            ; ===========================================================================
00008DF0                            
00008DF0                            DLE_SYZ3:
00008DF0 7000                       		moveq	#0,d0
00008DF2 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DF6 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DFA 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008DFE                            ; ===========================================================================
00008DFE 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008E00 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008E02 0000                       		dc.w DLE_SYZ3end-off_71B2
00008E04                            ; ===========================================================================
00008E04                            
00008E04                            DLE_SYZ3main:
00008E04 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008E0A 6500                       		bcs.s	locret_71CE
00008E0C 6100 0000                  		bsr.w	FindFreeObj
00008E10 6600                       		bne.s	locret_71CE
00008E12 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008E16 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E1A                            
00008E1A                            locret_71CE:
00008E1A 4E75                       		rts	
00008E1C                            ; ===========================================================================
00008E1C                            
00008E1C                            DLE_SYZ3boss:
00008E1C 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008E22 6500                       		bcs.s	locret_7200
00008E24 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008E2A 6100 0000                  		bsr.w	FindFreeObj
00008E2E 6600                       		bne.s	loc_71EC
00008E30 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008E34 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E38                            
00008E38                            loc_71EC:
00008E40 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E46 7000                       		moveq	#plcid_Boss,d0
00008E48 6000 88A4                  		bra.w	AddPLC		; load boss patterns
00008E4C                            ; ===========================================================================
00008E4C                            
00008E4C                            locret_7200:
00008E4C 4E75                       		rts	
00008E4E                            ; ===========================================================================
00008E4E                            
00008E4E                            DLE_SYZ3end:
00008E4E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E54 4E75                       		rts	
00008E56                            ; ===========================================================================
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Scrap	Brain Zone dynamic level events
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            
00008E56                            DLE_SBZ:
00008E56 7000                       		moveq	#0,d0
00008E58 1038 FE11                  		move.b	(v_act).w,d0
00008E5C D040                       		add.w	d0,d0
00008E5E 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E62 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E66                            ; ===========================================================================
00008E66 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E68 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E6A 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            DLE_SBZ1:
00008E6C 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E72 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E78 6500                       		bcs.s	locret_7242
00008E7A 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E80 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E86 6500                       		bcs.s	locret_7242
00008E88 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E8E                            
00008E8E                            locret_7242:
00008E8E 4E75                       		rts	
00008E90                            ; ===========================================================================
00008E90                            
00008E90                            DLE_SBZ2:
00008E90 7000                       		moveq	#0,d0
00008E92 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E96 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E9A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008E9E                            ; ===========================================================================
00008E9E 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008EA0 0000                       		dc.w DLE_SBZ2boss-off_7252
00008EA2 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008EA4 0000                       		dc.w DLE_SBZ2end-off_7252
00008EA6                            ; ===========================================================================
00008EA6                            
00008EA6                            DLE_SBZ2main:
00008EA6 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008EAC 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008EB2 6500                       		bcs.s	locret_727A
00008EB4 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008EBA 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008EC0 6500                       		bcs.s	locret_727A
00008EC2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EC6                            
00008EC6                            locret_727A:
00008EC6 4E75                       		rts	
00008EC8                            ; ===========================================================================
00008EC8                            
00008EC8                            DLE_SBZ2boss:
00008EC8 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008ECE 6500                       		bcs.s	locret_7298
00008ED0 6100 0000                  		bsr.w	FindFreeObj
00008ED4 6600                       		bne.s	locret_7298
00008ED6 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008EDA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EDE 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008EE0 6000 880C                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008EE4                            ; ===========================================================================
00008EE4                            
00008EE4                            locret_7298:
00008EE4 4E75                       		rts	
00008EE6                            ; ===========================================================================
00008EE6                            
00008EE6                            DLE_SBZ2boss2:
00008EE6 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EEC 6500                       		bcs.s	loc_72B6
00008EEE 6100 0000                  		bsr.w	FindFreeObj
00008EF2 6600                       		bne.s	loc_72B0
00008EF4 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EF8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EFC                            
00008EFC                            loc_72B0:
00008EFC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F02                            
00008F02                            loc_72B6:
00008F02 6000                       		bra.s	loc_72C2
00008F04                            ; ===========================================================================
00008F04                            
00008F04                            DLE_SBZ2end:
00008F04 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008F0A 6500                       		bcs.s	loc_72C2
00008F0C 4E75                       		rts	
00008F0E                            ; ===========================================================================
00008F0E                            
00008F0E                            loc_72C2:
00008F0E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008F14 4E75                       		rts	
00008F16                            ; ===========================================================================
00008F16                            
00008F16                            DLE_FZ:
00008F16 7000                       		moveq	#0,d0
00008F18 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F1C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008F20 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008F24                            ; ===========================================================================
00008F24 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008F28 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008F2C 0000                       		dc.w DLE_FZend2-off_72D8
00008F2E                            ; ===========================================================================
00008F2E                            
00008F2E                            DLE_FZmain:
00008F2E 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008F34 6500                       		bcs.s	loc_72F4
00008F36 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F3A 7000                       		moveq	#plcid_FZBoss,d0
00008F3C 6100 87B0                  		bsr.w	AddPLC		; load FZ boss patterns
00008F40                            
00008F40                            loc_72F4:
00008F40 60CC                       		bra.s	loc_72C2
00008F42                            ; ===========================================================================
00008F42                            
00008F42                            DLE_FZboss:
00008F42 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F48 6500                       		bcs.s	loc_7312
00008F4A 6100 0000                  		bsr.w	FindFreeObj
00008F4E 6600                       		bne.s	loc_7312
00008F50 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F54 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F58 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F5E                            
00008F5E                            loc_7312:
00008F5E 60AE                       		bra.s	loc_72C2
00008F60                            ; ===========================================================================
00008F60                            
00008F60                            DLE_FZend:
00008F60 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F66 6500                       		bcs.s	loc_7320
00008F68 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F6C                            
00008F6C                            loc_7320:
00008F6C 60A0                       		bra.s	loc_72C2
00008F6E                            ; ===========================================================================
00008F6E                            
00008F6E                            locret_7322:
00008F6E 4E75                       		rts	
00008F70                            ; ===========================================================================
00008F70                            
00008F70                            DLE_FZend2:
00008F70 609C                       		bra.s	loc_72C2
00008F72                            ; ===========================================================================
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            ; Ending sequence dynamic level events (empty)
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            
00008F72                            DLE_Ending:
00008F72 4E75                       		rts	
00008F72 4E75                       		rts	
00008F74                            
00008F74                            		include	"_incObj\11 Bridge (part 1).asm"
00008F74                            ; ---------------------------------------------------------------------------
00008F74                            ; Object 11 - GHZ bridge
00008F74                            ; ---------------------------------------------------------------------------
00008F74                            
00008F74                            Bridge:
00008F74 7000                       		moveq	#0,d0
00008F76 1028 0024                  		move.b	obRoutine(a0),d0
00008F7A 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F7E 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F82                            ; ===========================================================================
00008F82 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F86 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F8A 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            Bri_Main:	; Routine 0
00008F8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F92 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F9A 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008FA0 117C 0004 0001             		move.b	#4,obRender(a0)
00008FA6 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008FAC 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008FB2 3428 000C                  		move.w	obY(a0),d2
00008FB6 3628 0008                  		move.w	obX(a0),d3
00008FBA 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008FBC 45E8 0028                  		lea	obSubtype(a0),a2
00008FC0 7200                       		moveq	#0,d1
00008FC2 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008FC4 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008FC8 3001                       		move.w	d1,d0
00008FCA E248                       		lsr.w	#1,d0
00008FCC E948                       		lsl.w	#4,d0
00008FCE 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008FD0 5501                       		subq.b	#2,d1
00008FD2 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008FD4                            
00008FD4                            @buildloop:
00008FD4 6100 0000                  		bsr.w	FindFreeObj
00008FD8 6600                       		bne.s	Bri_Action
00008FDA 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FDE B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FE2 6600                       		bne.s	@notleftmost	; if not, branch
00008FE4                            
00008FE4 0643 0010                  		addi.w	#$10,d3
00008FE8 3142 000C                  		move.w	d2,obY(a0)
00008FEC 3142 003C                  		move.w	d2,$3C(a0)
00008FF0 3A08                       		move.w	a0,d5
00008FF2 0445 D000                  		subi.w	#$D000,d5
00008FF6 EC4D                       		lsr.w	#6,d5
00008FF8 0245 007F                  		andi.w	#$7F,d5
00008FFC 14C5                       		move.b	d5,(a2)+
00008FFE 5228 0028                  		addq.b	#1,obSubtype(a0)
00009002                            
00009002                            	@notleftmost:
00009002 3A09                       		move.w	a1,d5
00009004 0445 D000                  		subi.w	#$D000,d5
00009008 EC4D                       		lsr.w	#6,d5
0000900A 0245 007F                  		andi.w	#$7F,d5
0000900E 14C5                       		move.b	d5,(a2)+
00009010 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00009016 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00009018 3342 000C                  		move.w	d2,obY(a1)
0000901C 3342 003C                  		move.w	d2,$3C(a1)
00009020 3343 0008                  		move.w	d3,obX(a1)
00009024 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
0000902C 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00009032 137C 0004 0001             		move.b	#4,obRender(a1)
00009038 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000903E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009044 0643 0010                  		addi.w	#$10,d3
00009048 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
0000904C                            
0000904C                            Bri_Action:	; Routine 2
0000904C 6100                       		bsr.s	Bri_Solid
0000904E 4A28 003E                  		tst.b	$3E(a0)
00009052 6700                       		beq.s	@display
00009054 5928 003E                  		subq.b	#4,$3E(a0)
00009058 6100 0000                  		bsr.w	Bri_Bend
0000905C                            
0000905C                            	@display:
0000905C 6100 0000                  		bsr.w	DisplaySprite
00009060 6000 0000                  		bra.w	Bri_ChkDel
00009064                            
00009064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009064                            
00009064                            
00009064                            Bri_Solid:
00009064 7200                       		moveq	#0,d1
00009066 1228 0028                  		move.b	obSubtype(a0),d1
0000906A E749                       		lsl.w	#3,d1
0000906C 3401                       		move.w	d1,d2
0000906E 5041                       		addq.w	#8,d1
00009070 D442                       		add.w	d2,d2
00009072 43F8 D000                  		lea	(v_player).w,a1
00009076 4A69 0012                  		tst.w	obVelY(a1)
0000907A 6B00 0000                  		bmi.w	Plat_Exit
0000907E 3029 0008                  		move.w	obX(a1),d0
00009082 9068 0008                  		sub.w	obX(a0),d0
00009086 D041                       		add.w	d1,d0
00009088 6B00 0000                  		bmi.w	Plat_Exit
0000908C B042                       		cmp.w	d2,d0
0000908E 6400 0000                  		bcc.w	Plat_Exit
00009092 6000                       		bra.s	Plat_NoXCheck
00009094                            ; End of function Bri_Solid
00009094                            ; End of function Bri_Solid
00009094                            
00009094                            ; ---------------------------------------------------------------------------
00009094                            ; Platform subroutine
00009094                            ; ---------------------------------------------------------------------------
00009094                            
00009094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009094                            
00009094                            PlatformObject:
00009094 43F8 D000                  		lea	(v_player).w,a1
00009098 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
0000909C 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
000090A0                            
000090A0                            ;		perform x-axis range check
000090A0 3029 0008                  		move.w	obX(a1),d0
000090A4 9068 0008                  		sub.w	obX(a0),d0
000090A8 D041                       		add.w	d1,d0
000090AA 6B00 0000                  		bmi.w	Plat_Exit
000090AE D241                       		add.w	d1,d1
000090B0 B041                       		cmp.w	d1,d0
000090B2 6400 0000                  		bhs.w	Plat_Exit
000090B6                            
000090B6                            	Plat_NoXCheck:
000090B6 3028 000C                  		move.w	obY(a0),d0
000090BA 5140                       		subq.w	#8,d0
000090BC                            
000090BC                            Platform3:
000090BC                            ;		perform y-axis range check
000090BC 3429 000C                  		move.w	obY(a1),d2
000090C0 1229 0016                  		move.b	obHeight(a1),d1
000090C4 4881                       		ext.w	d1
000090C6 D242                       		add.w	d2,d1
000090C8 5841                       		addq.w	#4,d1
000090CA 9041                       		sub.w	d1,d0
000090CC 6200 0000                  		bhi.w	Plat_Exit
000090D0 0C40 FFF0                  		cmpi.w	#-$10,d0
000090D4 6500 0000                  		blo.w	Plat_Exit
000090D8                            
000090D8 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090DC 6B00 0000                  		bmi.w	Plat_Exit
000090E0 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090E6 6400 0000                  		bhs.w	Plat_Exit
000090EA D440                       		add.w	d0,d2
000090EC 5642                       		addq.w	#3,d2
000090EE 3342 000C                  		move.w	d2,obY(a1)
000090F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000090F6                            
000090F6                            loc_74AE:
000090F6 0829 0003 0022             		btst	#3,obStatus(a1)
000090FC 6700                       		beq.s	loc_74DC
000090FE 7000                       		moveq	#0,d0
00009100 1029 003D                  		move.b	$3D(a1),d0
00009104 ED48                       		lsl.w	#6,d0
00009106 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000910C 2440                       		movea.l	d0,a2
0000910E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00009114 422A 0025                  		clr.b	ob2ndRout(a2)
00009118 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
0000911E 6600                       		bne.s	loc_74DC
00009120 552A 0024                  		subq.b	#2,obRoutine(a2)
00009124                            
00009124                            loc_74DC:
00009124 3008                       		move.w	a0,d0
00009126 0440 D000                  		subi.w	#-$3000,d0
0000912A EC48                       		lsr.w	#6,d0
0000912C 0240 007F                  		andi.w	#$7F,d0
00009130 1340 003D                  		move.b	d0,$3D(a1)
00009134 137C 0000 0026             		move.b	#0,obAngle(a1)
0000913A 337C 0000 0012             		move.w	#0,obVelY(a1)
00009140 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00009146 0829 0001 0022             		btst	#1,obStatus(a1)
0000914C 6700                       		beq.s	loc_7512
0000914E 2F08                       		move.l	a0,-(sp)
00009150 2049                       		movea.l	a1,a0
00009152 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00009158 205F                       		movea.l	(sp)+,a0
0000915A                            
0000915A                            loc_7512:
0000915A 08E9 0003 0022             		bset	#3,obStatus(a1)
00009160 08E8 0003 0022             		bset	#3,obStatus(a0)
00009166                            
00009166                            Plat_Exit:
00009166 4E75                       		rts	
00009168                            ; End of function PlatformObject
00009168                            
00009168                            ; ---------------------------------------------------------------------------
00009168                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00009168                            ; ---------------------------------------------------------------------------
00009168                            
00009168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009168                            
00009168                            
00009168                            SlopeObject:
00009168 43F8 D000                  		lea	(v_player).w,a1
0000916C 4A69 0012                  		tst.w	obVelY(a1)
00009170 6B00 FFF4                  		bmi.w	Plat_Exit
00009174 3029 0008                  		move.w	obX(a1),d0
00009178 9068 0008                  		sub.w	obX(a0),d0
0000917C D041                       		add.w	d1,d0
0000917E 6BE6                       		bmi.s	Plat_Exit
00009180 D241                       		add.w	d1,d1
00009182 B041                       		cmp.w	d1,d0
00009184 64E0                       		bhs.s	Plat_Exit
00009186 0828 0000 0001             		btst	#0,obRender(a0)
0000918C 6700                       		beq.s	loc_754A
0000918E 4640                       		not.w	d0
00009190 D041                       		add.w	d1,d0
00009192                            
00009192                            loc_754A:
00009192 E248                       		lsr.w	#1,d0
00009194 7600                       		moveq	#0,d3
00009196 1632 0000                  		move.b	(a2,d0.w),d3
0000919A 3028 000C                  		move.w	obY(a0),d0
0000919E 9043                       		sub.w	d3,d0
000091A0 6000 FF1A                  		bra.w	Platform3
000091A4                            ; End of function SlopeObject
000091A4                            
000091A4                            
000091A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091A4                            
000091A4                            
000091A4                            Swing_Solid:
000091A4 43F8 D000                  		lea	(v_player).w,a1
000091A8 4A69 0012                  		tst.w	obVelY(a1)
000091AC 6B00 FFB8                  		bmi.w	Plat_Exit
000091B0 3029 0008                  		move.w	obX(a1),d0
000091B4 9068 0008                  		sub.w	obX(a0),d0
000091B8 D041                       		add.w	d1,d0
000091BA 6B00 FFAA                  		bmi.w	Plat_Exit
000091BE D241                       		add.w	d1,d1
000091C0 B041                       		cmp.w	d1,d0
000091C2 6400 FFA2                  		bhs.w	Plat_Exit
000091C6 3028 000C                  		move.w	obY(a0),d0
000091CA 9043                       		sub.w	d3,d0
000091CC 6000 FEEE                  		bra.w	Platform3
000091D0                            ; End of function Obj15_Solid
000091D0                            
000091D0                            ; ===========================================================================
000091D0                            
000091D0                            		include	"_incObj\11 Bridge (part 2).asm"
000091D0                            
000091D0                            Bri_Platform:	; Routine 4
000091D0 6100                       		bsr.s	Bri_WalkOff
000091D2 6100 0000                  		bsr.w	DisplaySprite
000091D6 6000 0000                  		bra.w	Bri_ChkDel
000091DA                            
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            ; Subroutine allowing Sonic to walk off a bridge
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            
000091DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091DA                            
000091DA                            
000091DA                            Bri_WalkOff:
000091DA 7200                       		moveq	#0,d1
000091DC 1228 0028                  		move.b	obSubtype(a0),d1
000091E0 E749                       		lsl.w	#3,d1
000091E2 3401                       		move.w	d1,d2
000091E4 5041                       		addq.w	#8,d1
000091E6 6100                       		bsr.s	ExitPlatform2
000091E8 6400                       		bcc.s	locret_75BE
000091EA E848                       		lsr.w	#4,d0
000091EC 1140 003F                  		move.b	d0,$3F(a0)
000091F0 1028 003E                  		move.b	$3E(a0),d0
000091F4 0C00 0040                  		cmpi.b	#$40,d0
000091F8 6700                       		beq.s	loc_75B6
000091FA 5828 003E                  		addq.b	#4,$3E(a0)
000091FE                            
000091FE                            loc_75B6:
000091FE 6100 0000                  		bsr.w	Bri_Bend
00009202 6100 0000                  		bsr.w	Bri_MoveSonic
00009206                            
00009206                            locret_75BE:
00009206 4E75                       		rts	
00009208                            ; End of function Bri_WalkOff
00009208                            ; End of function Bri_WalkOff
00009208                            
00009208                            ; ---------------------------------------------------------------------------
00009208                            ; Subroutine allowing Sonic to walk or jump off	a platform
00009208                            ; ---------------------------------------------------------------------------
00009208                            
00009208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009208                            
00009208                            
00009208                            ExitPlatform:
00009208 3401                       		move.w	d1,d2
0000920A                            
0000920A                            ExitPlatform2:
0000920A D442                       		add.w	d2,d2
0000920C 43F8 D000                  		lea	(v_player).w,a1
00009210 0829 0001 0022             		btst	#1,obStatus(a1)
00009216 6600                       		bne.s	loc_75E0
00009218 3029 0008                  		move.w	obX(a1),d0
0000921C 9068 0008                  		sub.w	obX(a0),d0
00009220 D041                       		add.w	d1,d0
00009222 6B00                       		bmi.s	loc_75E0
00009224 B042                       		cmp.w	d2,d0
00009226 6500                       		blo.s	locret_75F2
00009228                            
00009228                            loc_75E0:
00009228 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000922E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00009234 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000923A                            
0000923A                            locret_75F2:
0000923A 4E75                       		rts	
0000923C                            ; End of function ExitPlatform
0000923C                            
0000923C                            		include	"_incObj\11 Bridge (part 3).asm"
0000923C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000923C                            
0000923C                            
0000923C                            Bri_MoveSonic:
0000923C 7000                       		moveq	#0,d0
0000923E 1028 003F                  		move.b	$3F(a0),d0
00009242 1030 0029                  		move.b	$29(a0,d0.w),d0
00009246 ED48                       		lsl.w	#6,d0
00009248 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000924E 2440                       		movea.l	d0,a2
00009250 43F8 D000                  		lea	(v_player).w,a1
00009254 302A 000C                  		move.w	obY(a2),d0
00009258 5140                       		subq.w	#8,d0
0000925A 7200                       		moveq	#0,d1
0000925C 1229 0016                  		move.b	obHeight(a1),d1
00009260 9041                       		sub.w	d1,d0
00009262 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00009266 4E75                       		rts	
00009268                            ; End of function Bri_MoveSonic
00009268                            
00009268                            
00009268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009268                            
00009268                            
00009268                            Bri_Bend:
00009268 1028 003E                  		move.b	$3E(a0),d0
0000926C 6100 A7C8                  		bsr.w	CalcSine
00009270 3800                       		move.w	d0,d4
00009272 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00009278 7000                       		moveq	#0,d0
0000927A 1028 0028                  		move.b	obSubtype(a0),d0
0000927E E948                       		lsl.w	#4,d0
00009280 7600                       		moveq	#0,d3
00009282 1628 003F                  		move.b	$3F(a0),d3
00009286 3403                       		move.w	d3,d2
00009288 D640                       		add.w	d0,d3
0000928A 7A00                       		moveq	#0,d5
0000928C 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009292 1A35 3000                  		move.b	(a5,d3.w),d5
00009296 0243 000F                  		andi.w	#$F,d3
0000929A E94B                       		lsl.w	#4,d3
0000929C 47F4 3000                  		lea	(a4,d3.w),a3
000092A0 45E8 0029                  		lea	$29(a0),a2
000092A4                            
000092A4                            loc_765C:
000092A4 7000                       		moveq	#0,d0
000092A6 101A                       		move.b	(a2)+,d0
000092A8 ED48                       		lsl.w	#6,d0
000092AA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092B0 2240                       		movea.l	d0,a1
000092B2 7000                       		moveq	#0,d0
000092B4 101B                       		move.b	(a3)+,d0
000092B6 5240                       		addq.w	#1,d0
000092B8 C0C5                       		mulu.w	d5,d0
000092BA C0C4                       		mulu.w	d4,d0
000092BC 4840                       		swap	d0
000092BE D069 003C                  		add.w	$3C(a1),d0
000092C2 3340 000C                  		move.w	d0,obY(a1)
000092C6 51CA FFDC                  		dbf	d2,loc_765C
000092CA 7000                       		moveq	#0,d0
000092CC 1028 0028                  		move.b	obSubtype(a0),d0
000092D0 7600                       		moveq	#0,d3
000092D2 1628 003F                  		move.b	$3F(a0),d3
000092D6 5203                       		addq.b	#1,d3
000092D8 9600                       		sub.b	d0,d3
000092DA 4403                       		neg.b	d3
000092DC 6B00                       		bmi.s	locret_76CA
000092DE 3403                       		move.w	d3,d2
000092E0 E94B                       		lsl.w	#4,d3
000092E2 47F4 3000                  		lea	(a4,d3.w),a3
000092E6 D6C2                       		adda.w	d2,a3
000092E8 5342                       		subq.w	#1,d2
000092EA 6500                       		bcs.s	locret_76CA
000092EC                            
000092EC                            loc_76A4:
000092EC 7000                       		moveq	#0,d0
000092EE 101A                       		move.b	(a2)+,d0
000092F0 ED48                       		lsl.w	#6,d0
000092F2 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092F8 2240                       		movea.l	d0,a1
000092FA 7000                       		moveq	#0,d0
000092FC 1023                       		move.b	-(a3),d0
000092FE 5240                       		addq.w	#1,d0
00009300 C0C5                       		mulu.w	d5,d0
00009302 C0C4                       		mulu.w	d4,d0
00009304 4840                       		swap	d0
00009306 D069 003C                  		add.w	$3C(a1),d0
0000930A 3340 000C                  		move.w	d0,obY(a1)
0000930E 51CA FFDC                  		dbf	d2,loc_76A4
00009312                            
00009312                            locret_76CA:
00009312 4E75                       		rts	
00009314                            ; End of function Bri_Bend
00009314                            
00009314                            ; ===========================================================================
00009314                            ; ---------------------------------------------------------------------------
00009314                            ; GHZ bridge-bending data
00009314                            ; (Defines how the bridge bends	when Sonic walks across	it)
00009314                            ; ---------------------------------------------------------------------------
00009314                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00009424                            		even
00009424                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00009524                            		even
00009524                            
00009524                            ; ===========================================================================
00009524                            
00009524                            Bri_ChkDel:
00009542 4E75                       		rts	
00009544                            ; ===========================================================================
00009544                            
00009544                            @deletebridge:
00009544 7400                       		moveq	#0,d2
00009546 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
0000954A 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000954C 5302                       		subq.b	#1,d2		; subtract 1
0000954E 6500                       		bcs.s	@delparent
00009550                            
00009550                            	@loop:
00009550 7000                       		moveq	#0,d0
00009552 101A                       		move.b	(a2)+,d0
00009554 ED48                       		lsl.w	#6,d0
00009556 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000955C 2240                       		movea.l	d0,a1
0000955E B048                       		cmp.w	a0,d0
00009560 6700                       		beq.s	@skipdel
00009562 6100 0000                  		bsr.w	DeleteChild
00009566                            
00009566                            	@skipdel:
00009566 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000956A                            
0000956A                            @delparent:
0000956A 6100 0000                  		bsr.w	DeleteObject
0000956E 4E75                       		rts	
00009570                            ; ===========================================================================
00009570                            
00009570                            Bri_Delete:	; Routine 6, 8
00009570 6100 0000                  		bsr.w	DeleteObject
00009574 4E75                       		rts	
00009576                            ; ===========================================================================
00009576                            
00009576                            Bri_Display:	; Routine $A
00009576 6100 0000                  		bsr.w	DisplaySprite
0000957A 4E75                       		rts	
0000957A 4E75                       		rts	
0000957C                            Map_Bri:	include	"_maps\Bridge.asm"
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            ; Sprite mappings - GHZ	bridge
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            Map_Bri_internal:
0000957C 0000                       		dc.w M_Bri_Log-Map_Bri_internal
0000957E 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009580 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009582 01                         M_Bri_Log:	dc.b 1
00009583 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00009588 02                         M_Bri_Stump:	dc.b 2
00009589 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
0000958E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009593 01                         M_Bri_Rope:	dc.b 1
00009594 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000959A 00                         		even
0000959A 00                         		even
0000959A                            
0000959A                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000959A                            ; ---------------------------------------------------------------------------
0000959A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000959A                            ;	    - spiked ball on a chain (SBZ)
0000959A                            ; ---------------------------------------------------------------------------
0000959A                            
0000959A                            SwingingPlatform:
0000959A 7000                       		moveq	#0,d0
0000959C 1028 0024                  		move.b	obRoutine(a0),d0
000095A0 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
000095A4 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
000095A8                            ; ===========================================================================
000095A8 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000095AC 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000095B0 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000095B4 0000                       		dc.w Swing_Action-Swing_Index
000095B6                            
000095B6 =0000003A                  swing_origX:	equ $3A		; original x-axis position
000095B6 =00000038                  swing_origY:	equ $38		; original y-axis position
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            Swing_Main:	; Routine 0
000095B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000095BA 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000095C2 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000095C8 117C 0004 0001             		move.b	#4,obRender(a0)
000095CE 317C 0180 0018             		move.w	#$180,obPriority(a0)
000095D4 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095DA 117C 0008 0016             		move.b	#8,obHeight(a0)
000095E0 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095E6 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095EC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095F2 6600                       		bne.s	@notSLZ
000095F4                            
000095F4 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000095FC 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009602 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009608 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000960E 117C 0099 0020             		move.b	#$99,obColType(a0)
00009614                            
00009614                            	@notSLZ:
00009614 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000961A 6600                       		bne.s	@length
0000961C                            
0000961C 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009624 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000962A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009630 117C 0018 0016             		move.b	#$18,obHeight(a0)
00009636 117C 0086 0020             		move.b	#$86,obColType(a0)
0000963C 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009642                            
00009642                            @length:
00009642 1810                       		move.b	0(a0),d4
00009644 7200                       		moveq	#0,d1
00009646 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000964A 1212                       		move.b	(a2),d1		; move a2 to d1
0000964C 3F01                       		move.w	d1,-(sp)
0000964E 0241 000F                  		andi.w	#$F,d1
00009652 14FC 0000                  		move.b	#0,(a2)+
00009656 3601                       		move.w	d1,d3
00009658 E94B                       		lsl.w	#4,d3
0000965A 5003                       		addq.b	#8,d3
0000965C 1143 003C                  		move.b	d3,$3C(a0)
00009660 5103                       		subq.b	#8,d3
00009662 4A28 001A                  		tst.b	obFrame(a0)
00009666 6700                       		beq.s	@makechain
00009668 5003                       		addq.b	#8,d3
0000966A 5341                       		subq.w	#1,d1
0000966C                            
0000966C                            @makechain:
0000966C 6100 0000                  		bsr.w	FindFreeObj
00009670 6600                       		bne.s	@fail
00009672 5228 0028                  		addq.b	#1,obSubtype(a0)
00009676 3A09                       		move.w	a1,d5
00009678 0445 D000                  		subi.w	#$D000,d5
0000967C EC4D                       		lsr.w	#6,d5
0000967E 0245 007F                  		andi.w	#$7F,d5
00009682 14C5                       		move.b	d5,(a2)+
00009684 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000968A 1284                       		move.b	d4,0(a1)	; load swinging	object
0000968C 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009692 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009698 08A9 0006 0002             		bclr	#6,obGfx(a1)
0000969E 137C 0004 0001             		move.b	#4,obRender(a1)
000096A4 337C 0200 0018             		move.w	#$200,obPriority(a1)
000096AA 137C 0008 0014             		move.b	#8,obActWid(a1)
000096B0 137C 0001 001A             		move.b	#1,obFrame(a1)
000096B6 1343 003C                  		move.b	d3,$3C(a1)
000096BA 0403 0010                  		subi.b	#$10,d3
000096BE 6400                       		bcc.s	@notanchor
000096C0 137C 0002 001A             		move.b	#2,obFrame(a1)
000096C6 337C 0180 0018             		move.w	#$180,obPriority(a1)
000096CC 08E9 0006 0002             		bset	#6,obGfx(a1)
000096D2                            
000096D2                            	@notanchor:
000096D2 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000096D6                            
000096D6                            	@fail:
000096D6 3A08                       		move.w	a0,d5
000096D8 0445 D000                  		subi.w	#$D000,d5
000096DC EC4D                       		lsr.w	#6,d5
000096DE 0245 007F                  		andi.w	#$7F,d5
000096E2 14C5                       		move.b	d5,(a2)+
000096E4 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096EA 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096F0 321F                       		move.w	(sp)+,d1
000096F2 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096F6 6700                       		beq.s	@not1X	; if not, branch
000096F8 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009700 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009706 117C 0001 001A             		move.b	#1,obFrame(a0)
0000970C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009712 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009718                            
00009718                            	@not1X:
00009718 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
0000971E 6700                       		beq.s	Swing_Action	; if yes, branch
00009720                            
00009720                            Swing_SetSolid:	; Routine 2
00009720 7200                       		moveq	#0,d1
00009722 1228 0014                  		move.b	obActWid(a0),d1
00009726 7600                       		moveq	#0,d3
00009728 1628 0016                  		move.b	obHeight(a0),d3
0000972C 6100 FA76                  		bsr.w	Swing_Solid
00009730                            
00009730                            Swing_Action:	; Routine $C
00009730 6100 0000                  		bsr.w	Swing_Move
00009734 6100 0000                  		bsr.w	DisplaySprite
00009738 6000 0000                  		bra.w	Swing_ChkDel
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            Swing_Action2:	; Routine 4
0000973C 7200                       		moveq	#0,d1
0000973E 1228 0014                  		move.b	obActWid(a0),d1
00009742 6100 FAC4                  		bsr.w	ExitPlatform
00009746 3F28 0008                  		move.w	obX(a0),-(sp)
0000974A 6100 0000                  		bsr.w	Swing_Move
0000974E 341F                       		move.w	(sp)+,d2
00009750 7600                       		moveq	#0,d3
00009752 1628 0016                  		move.b	obHeight(a0),d3
00009756 5203                       		addq.b	#1,d3
00009758 6100 0000                  		bsr.w	MvSonicOnPtfm
0000975C 6100 0000                  		bsr.w	DisplaySprite
00009760 6000 0000                  		bra.w	Swing_ChkDel
00009764                            
00009764 4E75                       		rts
00009764 4E75                       		rts
00009766                            
00009766                            ; ---------------------------------------------------------------------------
00009766                            ; Subroutine to	change Sonic's position with a platform
00009766                            ; ---------------------------------------------------------------------------
00009766                            
00009766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009766                            
00009766                            
00009766                            MvSonicOnPtfm:
00009766 43F8 D000                  		lea	(v_player).w,a1
0000976A 3028 000C                  		move.w	obY(a0),d0
0000976E 9043                       		sub.w	d3,d0
00009770 6000                       		bra.s	MvSonic2
00009772                            ; End of function MvSonicOnPtfm
00009772                            
00009772                            ; ---------------------------------------------------------------------------
00009772                            ; Subroutine to	change Sonic's position with a platform
00009772                            ; ---------------------------------------------------------------------------
00009772                            
00009772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009772                            
00009772                            
00009772                            MvSonicOnPtfm2:
00009772 43F8 D000                  		lea	(v_player).w,a1
00009776 3028 000C                  		move.w	obY(a0),d0
0000977A 0440 0009                  		subi.w	#9,d0
0000977E                            
0000977E                            MvSonic2:
0000977E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009782 6B00                       		bmi.s	locret_7B62
00009784 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000978A 6400                       		bhs.s	locret_7B62
0000978C 4A78 FE08                  		tst.w	(v_debuguse).w
00009790 6600                       		bne.s	locret_7B62
00009792 7200                       		moveq	#0,d1
00009794 1229 0016                  		move.b	obHeight(a1),d1
00009798 9041                       		sub.w	d1,d0
0000979A 3340 000C                  		move.w	d0,obY(a1)
0000979E 9468 0008                  		sub.w	obX(a0),d2
000097A2 9569 0008                  		sub.w	d2,obX(a1)
000097A6                            
000097A6                            locret_7B62:
000097A6 4E75                       		rts	
000097A8                            ; End of function MvSonicOnPtfm2
000097A8                            
000097A8                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000097A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097A8                            
000097A8                            
000097A8                            Swing_Move:
000097A8 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000097AC 323C 0080                  		move.w	#$80,d1
000097B0 0828 0000 0022             		btst	#0,obStatus(a0)
000097B6 6700                       		beq.s	loc_7B78
000097B8 4440                       		neg.w	d0
000097BA D041                       		add.w	d1,d0
000097BC                            
000097BC                            loc_7B78:
000097BC 6000                       		bra.s	Swing_Move2
000097BE                            ; End of function Swing_Move
000097BE                            
000097BE                            
000097BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097BE                            
000097BE                            
000097BE                            Obj48_Move:
000097BE 4A28 003D                  		tst.b	$3D(a0)
000097C2 6600                       		bne.s	loc_7B9C
000097C4 3028 003E                  		move.w	$3E(a0),d0
000097C8 5040                       		addq.w	#8,d0
000097CA 3140 003E                  		move.w	d0,$3E(a0)
000097CE D168 0026                  		add.w	d0,obAngle(a0)
000097D2 0C40 0200                  		cmpi.w	#$200,d0
000097D6 6600                       		bne.s	loc_7BB6
000097D8 117C 0001 003D             		move.b	#1,$3D(a0)
000097DE 6000                       		bra.s	loc_7BB6
000097E0                            ; ===========================================================================
000097E0                            
000097E0                            loc_7B9C:
000097E0 3028 003E                  		move.w	$3E(a0),d0
000097E4 5140                       		subq.w	#8,d0
000097E6 3140 003E                  		move.w	d0,$3E(a0)
000097EA D168 0026                  		add.w	d0,obAngle(a0)
000097EE 0C40 FE00                  		cmpi.w	#-$200,d0
000097F2 6600                       		bne.s	loc_7BB6
000097F4 117C 0000 003D             		move.b	#0,$3D(a0)
000097FA                            
000097FA                            loc_7BB6:
000097FA 1028 0026                  		move.b	obAngle(a0),d0
000097FE                            ; End of function Obj48_Move
000097FE                            
000097FE                            
000097FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097FE                            
000097FE                            
000097FE                            Swing_Move2:
000097FE 6100 A236                  		bsr.w	CalcSine
00009802 3428 0038                  		move.w	$38(a0),d2
00009806 3628 003A                  		move.w	$3A(a0),d3
0000980A 45E8 0028                  		lea	obSubtype(a0),a2
0000980E 7C00                       		moveq	#0,d6
00009810 1C1A                       		move.b	(a2)+,d6
00009812                            
00009812                            loc_7BCE:
00009812 7800                       		moveq	#0,d4
00009814 181A                       		move.b	(a2)+,d4
00009816 ED4C                       		lsl.w	#6,d4
00009818 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0000981E 2244                       		movea.l	d4,a1
00009820 7800                       		moveq	#0,d4
00009822 1829 003C                  		move.b	$3C(a1),d4
00009826 2A04                       		move.l	d4,d5
00009828 C9C0                       		muls.w	d0,d4
0000982A E084                       		asr.l	#8,d4
0000982C CBC1                       		muls.w	d1,d5
0000982E E085                       		asr.l	#8,d5
00009830 D842                       		add.w	d2,d4
00009832 DA43                       		add.w	d3,d5
00009834 3344 000C                  		move.w	d4,obY(a1)
00009838 3345 0008                  		move.w	d5,obX(a1)
0000983C 51CE FFD4                  		dbf	d6,loc_7BCE
00009840 4E75                       		rts	
00009842                            ; End of function Swing_Move2
00009842                            
00009842                            ; ===========================================================================
00009842                            
00009842                            Swing_ChkDel:
00009860 4E75                       		rts	
00009862                            ; ===========================================================================
00009862                            
00009862                            Swing_DelAll:
00009862 7400                       		moveq	#0,d2
00009864 45E8 0028                  		lea	obSubtype(a0),a2
00009868 141A                       		move.b	(a2)+,d2
0000986A                            
0000986A                            Swing_DelLoop:
0000986A 7000                       		moveq	#0,d0
0000986C 101A                       		move.b	(a2)+,d0
0000986E ED48                       		lsl.w	#6,d0
00009870 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009876 2240                       		movea.l	d0,a1
00009878 6100 0000                  		bsr.w	DeleteChild
0000987C 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009880 4E75                       		rts	
00009882                            ; ===========================================================================
00009882                            
00009882                            Swing_Delete:	; Routine 6, 8
00009882 6100 0000                  		bsr.w	DeleteObject
00009886 4E75                       		rts	
00009888                            ; ===========================================================================
00009888                            
00009888                            Swing_Display:	; Routine $A
00009888 6000 0000                  		bra.w	DisplaySprite
00009888 6000 0000                  		bra.w	DisplaySprite
0000988C                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000988C                            ; ---------------------------------------------------------------------------
0000988C                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000988C                            ; ---------------------------------------------------------------------------
0000988C                            Map_Swing_GHZ_internal:
0000988C 0000                       		dc.w @block-Map_Swing_GHZ_internal
0000988E 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009890 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009892 02                         @block:		dc.b 2
00009893 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009898 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000989D 01                         @chain:		dc.b 1
0000989E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000098A3 01                         @anchor:	dc.b 1
000098A4 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000098AA 00                         		even
000098AA 00                         		even
000098AA                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000098AA                            ; ---------------------------------------------------------------------------
000098AA                            ; Sprite mappings - SLZ	swinging platforms
000098AA                            ; ---------------------------------------------------------------------------
000098AA                            Map_Swing_SLZ_internal:
000098AA 0000                       		dc.w @block-Map_Swing_SLZ_internal
000098AC 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000098AE 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000098B0 08                         @block:		dc.b 8
000098B1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000098B6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000098BB F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000098C0 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000098C5 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000098CA 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000098CF 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000098D4 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000098D9 01                         @chain:		dc.b 1
000098DA F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098DF 01                         @anchor:	dc.b 1
000098E0 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098E6 00                         		even
000098E6 00                         		even
000098E6                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098E6                            ; ---------------------------------------------------------------------------
000098E6                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098E6                            ; ---------------------------------------------------------------------------
000098E6                            
000098E6                            Helix:
000098E6 7000                       		moveq	#0,d0
000098E8 1028 0024                  		move.b	obRoutine(a0),d0
000098EC 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098F0 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098F4                            ; ===========================================================================
000098F4 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098F6 0000                       		dc.w Hel_Action-Hel_Index
000098F8 0000                       		dc.w Hel_Action-Hel_Index
000098FA 0000                       		dc.w Hel_Delete-Hel_Index
000098FC 0000                       		dc.w Hel_Display-Hel_Index
000098FE                            
000098FE =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000098FE                            
000098FE                            ;		$29-38 are used for child object addresses
000098FE                            ; ===========================================================================
000098FE                            
000098FE                            Hel_Main:	; Routine 0
000098FE 5428 0024                  		addq.b	#2,obRoutine(a0)
00009902 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000990A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009910 117C 0007 0022             		move.b	#7,obStatus(a0)
00009916 117C 0004 0001             		move.b	#4,obRender(a0)
0000991C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009922 117C 0008 0014             		move.b	#8,obActWid(a0)
00009928 3428 000C                  		move.w	obY(a0),d2
0000992C 3628 0008                  		move.w	obX(a0),d3
00009930 1810                       		move.b	0(a0),d4
00009932 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009936 7200                       		moveq	#0,d1
00009938 1212                       		move.b	(a2),d1		; move helix length to d1
0000993A 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
0000993E 3001                       		move.w	d1,d0
00009940 E248                       		lsr.w	#1,d0
00009942 E948                       		lsl.w	#4,d0
00009944 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009946 5501                       		subq.b	#2,d1
00009948 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000994A 7C00                       		moveq	#0,d6
0000994C                            
0000994C                            Hel_Build:
0000994C 6100 0000                  		bsr.w	FindFreeObj
00009950 6600                       		bne.s	Hel_Action
00009952 5228 0028                  		addq.b	#1,obSubtype(a0)
00009956 3A09                       		move.w	a1,d5
00009958 0445 D000                  		subi.w	#$D000,d5
0000995C EC4D                       		lsr.w	#6,d5
0000995E 0245 007F                  		andi.w	#$7F,d5
00009962 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009964 137C 0008 0024             		move.b	#8,obRoutine(a1)
0000996A 1284                       		move.b	d4,0(a1)
0000996C 3342 000C                  		move.w	d2,ObY(a1)
00009970 3343 0008                  		move.w	d3,obX(a1)
00009974 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0000997A 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009980 137C 0004 0001             		move.b	#4,obRender(a1)
00009986 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000998C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009992 1346 003E                  		move.b	d6,hel_frame(a1)
00009996 5206                       		addq.b	#1,d6
00009998 0206 0007                  		andi.b	#7,d6
0000999C 0643 0010                  		addi.w	#$10,d3
000099A0 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000099A4 6600                       		bne.s	Hel_NotCentre	; if not, branch
000099A6                            
000099A6 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000099AA 5206                       		addq.b	#1,d6
000099AC 0206 0007                  		andi.b	#7,d6
000099B0 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000099B4 5228 0028                  		addq.b	#1,obSubtype(a0)
000099B8                            
000099B8                            	Hel_NotCentre:
000099B8 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000099BC                            
000099BC                            Hel_Action:	; Routine 2, 4
000099BC 6100 0000                  		bsr.w	Hel_RotateSpikes
000099C0 6100 0000                  		bsr.w	DisplaySprite
000099C4 6000 0000                  		bra.w	Hel_ChkDel
000099C8                            
000099C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099C8                            
000099C8                            
000099C8                            Hel_RotateSpikes:
000099C8 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000099CC 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000099D2 D028 003E                  		add.b	hel_frame(a0),d0
000099D6 0200 0007                  		andi.b	#7,d0
000099DA 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099DE 6600                       		bne.s	locret_7DA6
000099E0 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099E6                            
000099E6                            locret_7DA6:
000099E6 4E75                       		rts	
000099E8                            ; End of function Hel_RotateSpikes
000099E8                            
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Hel_ChkDel:
00009A06 4E75                       		rts	
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Hel_DelAll:
00009A08 7400                       		moveq	#0,d2
00009A0A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009A0E 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009A10 5502                       		subq.b	#2,d2
00009A12 6500                       		bcs.s	Hel_Delete
00009A14                            
00009A14                            	Hel_DelLoop:
00009A14 7000                       		moveq	#0,d0
00009A16 101A                       		move.b	(a2)+,d0
00009A18 ED48                       		lsl.w	#6,d0
00009A1A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009A20 2240                       		movea.l	d0,a1		; get child address
00009A22 6100 0000                  		bsr.w	DeleteChild	; delete object
00009A26 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009A2A                            
00009A2A                            Hel_Delete:	; Routine 6
00009A2A 6100 0000                  		bsr.w	DeleteObject
00009A2E 4E75                       		rts	
00009A30                            ; ===========================================================================
00009A30                            
00009A30                            Hel_Display:	; Routine 8
00009A30 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009A34 6000 0000                  		bra.w	DisplaySprite
00009A34 6000 0000                  		bra.w	DisplaySprite
00009A38                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            Map_Hel_internal:
00009A38 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A3A 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A3C 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A3E 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A40 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A42 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A44 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A46 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A48 01                         byte_7E08:	dc.b 1
00009A49 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A4E 01                         byte_7E0E:	dc.b 1
00009A4F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A54 01                         byte_7E14:	dc.b 1
00009A55 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A5A 01                         byte_7E1A:	dc.b 1
00009A5B FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A60 01                         byte_7E20:	dc.b 1
00009A61 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A66 01                         byte_7E26:	dc.b 1
00009A67 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A6C 01                         byte_7E2C:	dc.b 1
00009A6D F4                         		dc.b $F4
00009A6E                            byte_7E2E:	; reads the 0 below	; not visible
00009A6E 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A72                            		even
00009A72                            		even
00009A72                            		include	"_incObj\18 Platforms.asm"
00009A72                            ; ---------------------------------------------------------------------------
00009A72                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A72                            ; ---------------------------------------------------------------------------
00009A72                            
00009A72                            BasicPlatform:
00009A72 7000                       		moveq	#0,d0
00009A74 1028 0024                  		move.b	obRoutine(a0),d0
00009A78 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A7C 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A80                            ; ===========================================================================
00009A80 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A82 0000                       		dc.w Plat_Solid-Plat_Index
00009A84 0000                       		dc.w Plat_Action2-Plat_Index
00009A86 0000                       		dc.w Plat_Delete-Plat_Index
00009A88 0000                       		dc.w Plat_Action-Plat_Index
00009A8A                            ; ===========================================================================
00009A8A                            
00009A8A                            Plat_Main:	; Routine 0
00009A8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A8E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A94 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009A9C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AA2 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009AA8 6600                       		bne.s	@notSYZ
00009AAA                            
00009AAA 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009AB2 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AB8                            
00009AB8                            	@notSYZ:
00009AB8 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009ABE 6600                       		bne.s	@notSLZ
00009AC0 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009AC8 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009ACE 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009AD4 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009ADA                            
00009ADA                            	@notSLZ:
00009ADA 117C 0004 0001             		move.b	#4,obRender(a0)
00009AE0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009AE6 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009AEC 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AF2 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009AF8 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009AFE 7200                       		moveq	#0,d1
00009B00 1028 0028                  		move.b	obSubtype(a0),d0
00009B04 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009B08 6600                       		bne.s	@setframe	; if not, branch
00009B0A 5201                       		addq.b	#1,d1		; use frame #1
00009B0C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009B12                            
00009B12                            	@setframe:
00009B12 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009B16                            
00009B16                            Plat_Solid:	; Routine 2
00009B16 4A28 0038                  		tst.b	$38(a0)
00009B1A 6700                       		beq.s	loc_7EE0
00009B1C 5928 0038                  		subq.b	#4,$38(a0)
00009B20                            
00009B20                            	loc_7EE0:
00009B20 7200                       		moveq	#0,d1
00009B22 1228 0014                  		move.b	obActWid(a0),d1
00009B26 6100 F56C                  		bsr.w	PlatformObject
00009B2A                            
00009B2A                            Plat_Action:	; Routine 8
00009B2A 6100 0000                  		bsr.w	Plat_Move
00009B2E 6100 0000                  		bsr.w	Plat_Nudge
00009B32 6100 0000                  		bsr.w	DisplaySprite
00009B36 6000 0000                  		bra.w	Plat_ChkDel
00009B3A                            ; ===========================================================================
00009B3A                            
00009B3A                            Plat_Action2:	; Routine 4
00009B3A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B40 6700                       		beq.s	loc_7F06
00009B42 5828 0038                  		addq.b	#4,$38(a0)
00009B46                            
00009B46                            	loc_7F06:
00009B46 7200                       		moveq	#0,d1
00009B48 1228 0014                  		move.b	obActWid(a0),d1
00009B4C 6100 F6BA                  		bsr.w	ExitPlatform
00009B50 3F28 0008                  		move.w	obX(a0),-(sp)
00009B54 6100 0000                  		bsr.w	Plat_Move
00009B58 6100 0000                  		bsr.w	Plat_Nudge
00009B5C 341F                       		move.w	(sp)+,d2
00009B5E 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B62 6100 0000                  		bsr.w	DisplaySprite
00009B66 6000 0000                  		bra.w	Plat_ChkDel
00009B6A                            
00009B6A 4E75                       		rts
00009B6C                            
00009B6C                            ; ---------------------------------------------------------------------------
00009B6C                            ; Subroutine to	move platform slightly when you	stand on it
00009B6C                            ; ---------------------------------------------------------------------------
00009B6C                            
00009B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B6C                            
00009B6C                            
00009B6C                            Plat_Nudge:
00009B6C 1028 0038                  		move.b	$38(a0),d0
00009B70 6100 9EC4                  		bsr.w	CalcSine
00009B74 323C 0400                  		move.w	#$400,d1
00009B78 C1C1                       		muls.w	d1,d0
00009B7A 4840                       		swap	d0
00009B7C D068 002C                  		add.w	$2C(a0),d0
00009B80 3140 000C                  		move.w	d0,obY(a0)
00009B84 4E75                       		rts	
00009B86                            ; End of function Plat_Nudge
00009B86                            
00009B86                            ; ---------------------------------------------------------------------------
00009B86                            ; Subroutine to	move platforms
00009B86                            ; ---------------------------------------------------------------------------
00009B86                            
00009B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B86                            
00009B86                            
00009B86                            Plat_Move:
00009B86 7000                       		moveq	#0,d0
00009B88 1028 0028                  		move.b	obSubtype(a0),d0
00009B8C 0240 000F                  		andi.w	#$F,d0
00009B90 D040                       		add.w	d0,d0
00009B92 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B96 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B9A                            ; End of function Plat_Move
00009B9A                            
00009B9A                            ; ===========================================================================
00009B9A 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009B9E 0000 0000                  		dc.w @type02-@index, @type03-@index
00009BA2 0000 0000                  		dc.w @type04-@index, @type05-@index
00009BA6 0000 0000                  		dc.w @type06-@index, @type07-@index
00009BAA 0000 0000                  		dc.w @type08-@index, @type00-@index
00009BAE 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009BB2 0000                       		dc.w @type0C-@index
00009BB4                            ; ===========================================================================
00009BB4                            
00009BB4                            @type00:
00009BB4 4E75                       		rts			; platform 00 doesn't move
00009BB6                            ; ===========================================================================
00009BB6                            
00009BB6                            @type05:
00009BB6 3028 0032                  		move.w	$32(a0),d0
00009BBA 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BBE 4401                       		neg.b	d1		; reverse platform-motion
00009BC0 0601 0040                  		addi.b	#$40,d1
00009BC4 6000                       		bra.s	@type01_move
00009BC6                            ; ===========================================================================
00009BC6                            
00009BC6                            @type01:
00009BC6 3028 0032                  		move.w	$32(a0),d0
00009BCA 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BCE 0401 0040                  		subi.b	#$40,d1
00009BD2                            
00009BD2                            	@type01_move:
00009BD2 4881                       		ext.w	d1
00009BD4 D041                       		add.w	d1,d0
00009BD6 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BDA 6000 0000                  		bra.w	@chgmotion
00009BDE                            ; ===========================================================================
00009BDE                            
00009BDE                            @type0C:
00009BDE 3028 0034                  		move.w	$34(a0),d0
00009BE2 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BE6 4401                       		neg.b	d1		; reverse platform-motion
00009BE8 0601 0030                  		addi.b	#$30,d1
00009BEC 6000                       		bra.s	@type02_move
00009BEE                            ; ===========================================================================
00009BEE                            
00009BEE                            @type0B:
00009BEE 3028 0034                  		move.w	$34(a0),d0
00009BF2 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BF6 0401 0030                  		subi.b	#$30,d1
00009BFA 6000                       		bra.s	@type02_move
00009BFC                            ; ===========================================================================
00009BFC                            
00009BFC                            @type06:
00009BFC 3028 0034                  		move.w	$34(a0),d0
00009C00 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C04 4401                       		neg.b	d1		; reverse platform-motion
00009C06 0601 0040                  		addi.b	#$40,d1
00009C0A 6000                       		bra.s	@type02_move
00009C0C                            ; ===========================================================================
00009C0C                            
00009C0C                            @type02:
00009C0C 3028 0034                  		move.w	$34(a0),d0
00009C10 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C14 0401 0040                  		subi.b	#$40,d1
00009C18                            
00009C18                            	@type02_move:
00009C18 4881                       		ext.w	d1
00009C1A D041                       		add.w	d1,d0
00009C1C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C20 6000 0000                  		bra.w	@chgmotion
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            @type03:
00009C24 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C28 6600                       		bne.s	@type03_wait	; if yes, branch
00009C2A 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009C30 6700                       		beq.s	@type03_nomove	; if not, branch
00009C32 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009C38                            
00009C38                            	@type03_nomove:
00009C38 4E75                       		rts	
00009C3A                            
00009C3A                            	@type03_wait:
00009C3A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C3E 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C40 317C 0020 003A             		move.w	#32,$3A(a0)
00009C46 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C4A 4E75                       		rts	
00009C4C                            ; ===========================================================================
00009C4C                            
00009C4C                            @type04:
00009C4C 4A68 003A                  		tst.w	$3A(a0)
00009C50 6700                       		beq.s	@loc_8048
00009C52 5368 003A                  		subq.w	#1,$3A(a0)
00009C56 6600                       		bne.s	@loc_8048
00009C58 0828 0003 0022             		btst	#3,obStatus(a0)
00009C5E 6700                       		beq.s	@loc_8042
00009C60 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C66 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C6C 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C72 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C78 4228 0025                  		clr.b	$25(a0)
00009C7C 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C82                            
00009C82                            	@loc_8042:
00009C82 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C88                            
00009C88                            	@loc_8048:
00009C88 2628 002C                  		move.l	$2C(a0),d3
00009C8C 3028 0012                  		move.w	obVelY(a0),d0
00009C90 48C0                       		ext.l	d0
00009C92 E180                       		asl.l	#8,d0
00009C94 D680                       		add.l	d0,d3
00009C96 2143 002C                  		move.l	d3,$2C(a0)
00009C9A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009CA0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009CA4 0640 00E0                  		addi.w	#$E0,d0
00009CA8 B068 002C                  		cmp.w	$2C(a0),d0
00009CAC 6400                       		bcc.s	@locret_8074
00009CAE 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009CB4                            
00009CB4                            	@locret_8074:
00009CB4 4E75                       		rts	
00009CB6                            ; ===========================================================================
00009CB6                            
00009CB6                            @type07:
00009CB6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CBA 6600                       		bne.s	@type07_wait	; if yes, branch
00009CBC 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009CC0 7000                       		moveq	#0,d0
00009CC2 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009CC6 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009CC8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009CCC 6700                       		beq.s	@type07_nomove	; if not, branch
00009CCE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009CD4                            
00009CD4                            	@type07_nomove:
00009CD4 4E75                       		rts	
00009CD6                            
00009CD6                            	@type07_wait:
00009CD6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CDA 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CDC 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CE0 4E75                       		rts	
00009CE2                            ; ===========================================================================
00009CE2                            
00009CE2                            @type08:
00009CE2 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CE6 3028 0034                  		move.w	$34(a0),d0
00009CEA 0440 0200                  		subi.w	#$200,d0
00009CEE B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CF2 6600                       		bne.s	@type08_nostop	; if not, branch
00009CF4 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CF8                            
00009CF8                            	@type08_nostop:
00009CF8 4E75                       		rts	
00009CFA                            ; ===========================================================================
00009CFA                            
00009CFA                            @type0A:
00009CFA 3028 0034                  		move.w	$34(a0),d0
00009CFE 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009D02 0401 0040                  		subi.b	#$40,d1
00009D06 4881                       		ext.w	d1
00009D08 E241                       		asr.w	#1,d1
00009D0A D041                       		add.w	d1,d0
00009D0C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009D10                            
00009D10                            @chgmotion:
00009D10 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009D16 4E75                       		rts	
00009D18                            ; ===========================================================================
00009D18                            
00009D18                            Plat_ChkDel:
00009D34 4E75                       		rts	
00009D36                            ; ===========================================================================
00009D36                            
00009D36                            Plat_Delete:	; Routine 6
00009D36 6000 0000                  		bra.w	DeleteObject
00009D36 6000 0000                  		bra.w	DeleteObject
00009D3A                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D3A                            ; ---------------------------------------------------------------------------
00009D3A                            ; Sprite mappings - unused
00009D3A                            ; ---------------------------------------------------------------------------
00009D3A                            Map_Plat_Unused_internal:
00009D3A 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D3C 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D3E 02                         @small:		dc.b 2
00009D3F F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D44 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D49 0A                         @large:		dc.b $A
00009D4A F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D4F 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D54 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D59 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D5E 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D63 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D68 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D6D 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D72 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D77 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D7C                            		even
00009D7C                            		even
00009D7C                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D7C                            ; ---------------------------------------------------------------------------
00009D7C                            ; Sprite mappings - GHZ	platforms
00009D7C                            ; ---------------------------------------------------------------------------
00009D7C                            Map_Plat_GHZ_internal:
00009D7C 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D7E 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D80 04                         @small:		dc.b 4
00009D81 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D86 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D8B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D90 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D95 0A                         @large:		dc.b $A
00009D96 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D9B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009DA0 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009DA5 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009DAA 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009DAF F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009DB4 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009DB9 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009DBE 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009DC3 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009DC8                            		even
00009DC8                            		even
00009DC8                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            ; Sprite mappings - SYZ	platforms
00009DC8                            ; ---------------------------------------------------------------------------
00009DC8                            Map_Plat_SYZ_internal:
00009DC8 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009DCA 03                         @platform:	dc.b 3
00009DCB F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009DD0 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009DD5 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DDA                            		even
00009DDA                            		even
00009DDA                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            ; Sprite mappings - SLZ	platforms
00009DDA                            ; ---------------------------------------------------------------------------
00009DDA                            Map_Plat_SLZ_internal:
00009DDA 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DDC 02                         @platform:	dc.b 2
00009DDD F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DE2 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DE8 00                         		even
00009DE8 00                         		even
00009DE8                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DE8                            ; ---------------------------------------------------------------------------
00009DE8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DE8                            ; ---------------------------------------------------------------------------
00009DE8                            Map_GBall_internal:
00009DE8 0000                       		dc.w @shiny-Map_GBall_internal
00009DEA 0000                       		dc.w @check1-Map_GBall_internal
00009DEC 0000                       		dc.w @check2-Map_GBall_internal
00009DEE 0000                       		dc.w @check3-Map_GBall_internal
00009DF0 06                         @shiny:		dc.b 6
00009DF1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DF6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DFB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009E00 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009E05 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009E0A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009E0F 04                         @check1:	dc.b 4
00009E10 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009E15 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009E1A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009E1F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009E24 04                         @check2:	dc.b 4
00009E25 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009E2A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009E2F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009E34 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009E39 04                         @check3:	dc.b 4
00009E3A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E3F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E44 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E49 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E4E                            		even
00009E4E                            		even
00009E4E                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E                            ; Object 1A - GHZ collapsing ledge
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E                            
00009E4E                            CollapseLedge:
00009E4E 7000                       		moveq	#0,d0
00009E50 1028 0024                  		move.b	obRoutine(a0),d0
00009E54 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E58 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E5C                            ; ===========================================================================
00009E5C 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E60 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E64 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E68                            
00009E68 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E68 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E68                            ; ===========================================================================
00009E68                            
00009E68                            Ledge_Main:	; Routine 0
00009E68 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E6C 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E74 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E7A 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E80 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E86 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E8C 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E92 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E98 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009E9E 08E8 0004 0001             		bset	#4,obRender(a0)
00009EA4                            
00009EA4                            Ledge_Touch:	; Routine 2
00009EA4 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EA8 6700                       		beq.s	@slope		; if not, branch
00009EAA 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009EAE 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009EB2 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009EB6                            
00009EB6                            	@slope:
00009EB6 323C 0030                  		move.w	#$30,d1
00009EBA 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EC0 6100 F2A6                  		bsr.w	SlopeObject
00009EC4 6000 0000                  		bra.w	RememberState
00009EC8                            ; ===========================================================================
00009EC8                            
00009EC8                            Ledge_Collapse:	; Routine 4
00009EC8 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009ECC 6700 0000                  		beq.w	loc_847A
00009ED0 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009ED6 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009EDA                            
00009EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EDA                            
00009EDA                            
00009EDA                            Ledge_WalkOff:	; Routine $A
00009EDA 323C 0030                  		move.w	#$30,d1
00009EDE 6100 F328                  		bsr.w	ExitPlatform
00009EE2 323C 0030                  		move.w	#$30,d1
00009EE6 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EEC 3428 0008                  		move.w	obX(a0),d2
00009EF0 6100 0000                  		bsr.w	SlopeObject2
00009EF4 6000 0000                  		bra.w	RememberState
00009EF8                            ; End of function Ledge_WalkOff
00009EF8                            
00009EF8                            ; ===========================================================================
00009EF8                            
00009EF8                            Ledge_Display:	; Routine 6
00009EF8 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009EFC 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009EFE 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009F02 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009F06 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009F0A 6000 0000                  		bra.w	DisplaySprite
00009F0E                            ; ===========================================================================
00009F0E                            
00009F0E                            loc_82D0:
00009F0E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F12 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009F16 43F8 D000                  		lea	(v_player).w,a1
00009F1A 0829 0003 0022             		btst	#3,obStatus(a1)
00009F20 6700                       		beq.s	loc_82FC
00009F22 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F26 6600                       		bne.s	locret_8308
00009F28 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009F2E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009F34 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F3A                            
00009F3A                            loc_82FC:
00009F3A 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F40 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F46                            
00009F46                            locret_8308:
00009F46 4E75                       		rts	
00009F48                            ; ===========================================================================
00009F48                            
00009F48                            Ledge_TimeZero:
00009F48 6100 0000                  		bsr.w	ObjectFall
00009F4C 6100 0000                  		bsr.w	DisplaySprite
00009F50 4A28 0001                  		tst.b	obRender(a0)
00009F54 6A00                       		bpl.s	Ledge_Delete
00009F56 4E75                       		rts	
00009F58                            ; ===========================================================================
00009F58                            
00009F58                            Ledge_Delete:	; Routine 8
00009F58 6100 0000                  		bsr.w	DeleteObject
00009F5C 4E75                       		rts	
00009F5C 4E75                       		rts	
00009F5E                            		include	"_incObj\53 Collapsing Floors.asm"
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            
00009F5E                            CollapseFloor:
00009F5E 7000                       		moveq	#0,d0
00009F60 1028 0024                  		move.b	obRoutine(a0),d0
00009F64 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F68 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F6C                            ; ===========================================================================
00009F6C 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F70 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F74 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F78                            
00009F78 =00000038                  cflo_timedelay:		equ $38
00009F78 =0000003A                  cflo_collapse_flag:	equ $3A
00009F78                            ; ===========================================================================
00009F78                            
00009F78                            CFlo_Main:	; Routine 0
00009F78 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F7C 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F84 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F8A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F90 6600                       		bne.s	@notSLZ
00009F92                            
00009F92 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F98 5428 001A                  		addq.b	#2,obFrame(a0)
00009F9C                            
00009F9C                            	@notSLZ:
00009F9C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009FA2 6600                       		bne.s	@notSBZ
00009FA4 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009FAA                            
00009FAA                            	@notSBZ:
00009FAA 0028 0004 0001             		ori.b	#4,obRender(a0)
00009FB0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009FB6 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009FBC 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009FC2                            
00009FC2                            CFlo_Touch:	; Routine 2
00009FC2 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FC6 6700                       		beq.s	@solid		; if not, branch
00009FC8 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FCC 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009FD0 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009FD4                            
00009FD4                            	@solid:
00009FD4 323C 0020                  		move.w	#$20,d1
00009FD8 6100 F0BA                  		bsr.w	PlatformObject
00009FDC 4A28 0028                  		tst.b	obSubtype(a0)
00009FE0 6A00                       		bpl.s	@remstate
00009FE2 0829 0003 0022             		btst	#3,obStatus(a1)
00009FE8 6700                       		beq.s	@remstate
00009FEA 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FF0 3029 0008                  		move.w	obX(a1),d0
00009FF4 9068 0008                  		sub.w	obX(a0),d0
00009FF8 6400                       		bcc.s	@remstate
00009FFA 08E8 0000 0001             		bset	#0,obRender(a0)
0000A000                            
0000A000                            	@remstate:
0000A000 6000 0000                  		bra.w	RememberState
0000A004                            ; ===========================================================================
0000A004                            
0000A004                            CFlo_Collapse:	; Routine 4
0000A004 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A008 6700 0000                  		beq.w	loc_8458
0000A00C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A012 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A016                            
0000A016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A016                            
0000A016                            
0000A016                            CFlo_WalkOff:	; Routine $A
0000A016 323C 0020                  		move.w	#$20,d1
0000A01A 6100 F1EC                  		bsr.w	ExitPlatform
0000A01E 3428 0008                  		move.w	obX(a0),d2
0000A022 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A026 6000 0000                  		bra.w	RememberState
0000A02A                            ; End of function CFlo_WalkOff
0000A02A                            
0000A02A                            ; ===========================================================================
0000A02A                            
0000A02A                            CFlo_Display:	; Routine 6
0000A02A 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A02E 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A030 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A034 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A038 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A03C 6000 0000                  		bra.w	DisplaySprite
0000A040                            ; ===========================================================================
0000A040                            
0000A040                            loc_8402:
0000A040 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A044 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A048 43F8 D000                  		lea	(v_player).w,a1
0000A04C 0829 0003 0022             		btst	#3,obStatus(a1)
0000A052 6700                       		beq.s	loc_842E
0000A054 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A058 6600                       		bne.s	locret_843A
0000A05A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A060 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A066 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A06C                            
0000A06C                            loc_842E:
0000A06C 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A072 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A078                            
0000A078                            locret_843A:
0000A078 4E75                       		rts	
0000A07A                            ; ===========================================================================
0000A07A                            
0000A07A                            CFlo_TimeZero:
0000A07A 6100 0000                  		bsr.w	ObjectFall
0000A07E 6100 0000                  		bsr.w	DisplaySprite
0000A082 4A28 0001                  		tst.b	obRender(a0)
0000A086 6A00                       		bpl.s	CFlo_Delete
0000A088 4E75                       		rts	
0000A08A                            ; ===========================================================================
0000A08A                            
0000A08A                            CFlo_Delete:	; Routine 8
0000A08A 6100 0000                  		bsr.w	DeleteObject
0000A08E 4E75                       		rts	
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            CFlo_Fragment:
0000A090 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A096                            
0000A096                            loc_8458:
0000A096 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A09C 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A0A2 6700                       		beq.s	loc_846C
0000A0A4 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A0AA                            
0000A0AA                            loc_846C:
0000A0AA 7207                       		moveq	#7,d1
0000A0AC 5228 001A                  		addq.b	#1,obFrame(a0)
0000A0B0 6000                       		bra.s	loc_8486
0000A0B0 6000                       		bra.s	loc_8486
0000A0B2                            
0000A0B2                            ; ===========================================================================
0000A0B2                            
0000A0B2                            Ledge_Fragment:
0000A0B2 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A0B8                            
0000A0B8                            loc_847A:
0000A0B8 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A0BE 7218                       		moveq	#$18,d1
0000A0C0 5428 001A                  		addq.b	#2,obFrame(a0)
0000A0C4                            
0000A0C4                            loc_8486:
0000A0C4 7000                       		moveq	#0,d0
0000A0C6 1028 001A                  		move.b	obFrame(a0),d0
0000A0CA D040                       		add.w	d0,d0
0000A0CC 2668 0004                  		movea.l	obMap(a0),a3
0000A0D0 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A0D4 524B                       		addq.w	#1,a3
0000A0D6 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0DC 1810                       		move.b	0(a0),d4
0000A0DE 1A28 0001                  		move.b	obRender(a0),d5
0000A0E2 2248                       		movea.l	a0,a1
0000A0E4 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0EA 1284                       		move.b	d4,0(a1)
0000A0EC 234B 0004                  		move.l	a3,obMap(a1)
0000A0F0 1345 0001                  		move.b	d5,obRender(a1)
0000A0F4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A100 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A106 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A10C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A112 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A116 5341                       		subq.w	#1,d1
0000A118 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A11C 303C 005F                  		move.w	#$5F,d0
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            loc_84AA:
0000A120 4A11                       		tst.b	(a1)
0000A122 6700                       		beq.s	@cont		
0000A124 43E9 0040                  		lea		$40(a1),a1
0000A128 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A12C 6600                       		bne.s	loc_84F2	
0000A12E                            	@cont:
0000A12E 5A4B                       		addq.w	#5,a3
0000A130                            
0000A130                            loc_84B2:
0000A130 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A136 1284                       		move.b	d4,0(a1)
0000A138 234B 0004                  		move.l	a3,obMap(a1)
0000A13C 1345 0001                  		move.b	d5,obRender(a1)
0000A140 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A146 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A14C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A152 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A158 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A15E 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A162 6100 0000                  		bsr.w	DisplaySprite1
0000A166                            
0000A166                            loc_84EE:
0000A166 51C9 FFB8                  		dbf	d1,loc_84AA
0000A16A                            
0000A16A                            loc_84F2:
0000A16A 6100 0000                  		bsr.w	DisplaySprite
0000A178                            ; ===========================================================================
0000A178                            ; ---------------------------------------------------------------------------
0000A178                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A178                            ; ---------------------------------------------------------------------------
0000A178 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A188 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A192 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A19A 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A1A2                            
0000A1A2                            ; ---------------------------------------------------------------------------
0000A1A2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A1A2                            ; ---------------------------------------------------------------------------
0000A1A2                            
0000A1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1A2                            
0000A1A2                            
0000A1A2                            SlopeObject2:
0000A1A2 43F8 D000                  		lea	(v_player).w,a1
0000A1A6 0829 0003 0022             		btst	#3,obStatus(a1)
0000A1AC 6700                       		beq.s	locret_856E
0000A1AE 3029 0008                  		move.w	obX(a1),d0
0000A1B2 9068 0008                  		sub.w	obX(a0),d0
0000A1B6 D041                       		add.w	d1,d0
0000A1B8 E248                       		lsr.w	#1,d0
0000A1BA 0828 0000 0001             		btst	#0,obRender(a0)
0000A1C0 6700                       		beq.s	loc_854E
0000A1C2 4640                       		not.w	d0
0000A1C4 D041                       		add.w	d1,d0
0000A1C6                            
0000A1C6                            loc_854E:
0000A1C6 7200                       		moveq	#0,d1
0000A1C8 1232 0000                  		move.b	(a2,d0.w),d1
0000A1CC 3028 000C                  		move.w	obY(a0),d0
0000A1D0 9041                       		sub.w	d1,d0
0000A1D2 7200                       		moveq	#0,d1
0000A1D4 1229 0016                  		move.b	obHeight(a1),d1
0000A1D8 9041                       		sub.w	d1,d0
0000A1DA 3340 000C                  		move.w	d0,obY(a1)
0000A1DE 9468 0008                  		sub.w	obX(a0),d2
0000A1E2 9569 0008                  		sub.w	d2,obX(a1)
0000A1E6                            
0000A1E6                            locret_856E:
0000A1E6 4E75                       		rts	
0000A1E8                            ; End of function SlopeObject2
0000A1E8                            
0000A1E8                            ; ===========================================================================
0000A1E8                            ; ---------------------------------------------------------------------------
0000A1E8                            ; Collision data for GHZ collapsing ledge
0000A1E8                            ; ---------------------------------------------------------------------------
0000A1E8                            Ledge_SlopeData:
0000A1E8                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A218                            		even
0000A218                            
0000A218                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A218                            ; ---------------------------------------------------------------------------
0000A218                            ; Sprite mappings - GHZ	collapsing ledge
0000A218                            ; ---------------------------------------------------------------------------
0000A218                            Map_Ledge_internal:
0000A218 0000                       		dc.w @left-Map_Ledge_internal
0000A21A 0000                       		dc.w @right-Map_Ledge_internal
0000A21C 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A21E 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A220 10                         @left:		dc.b $10
0000A221 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A226 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A22B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A230 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A235 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A23A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A23F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A244 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A249 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A24E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A253 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A258 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A25D 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A262 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A267 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A26C 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A271 10                         @right:		dc.b $10
0000A272 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A277 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A27C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A281 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A286 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A28B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A290 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A295 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A29A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A29F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A2A4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A2A9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2AE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A2B3 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2B8 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A2BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2C2 19                         @leftsmash:	dc.b $19
0000A2C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A2C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A2CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A2D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A2D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2F0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A2FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A304 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A309 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A30E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A313 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A318 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A31D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A322 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A327 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A32C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A331 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A336 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A33B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A340 19                         @rightsmash:	dc.b $19
0000A341 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A346 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A34B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A350 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A355 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A35A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A35F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A364 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A369 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A36E D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A373 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A378 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A37D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A382 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A387 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A38C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A391 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A396 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A39B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A3A0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A3A5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A3AA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A3AF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3B4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3B9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3BE                            		even
0000A3BE                            		even
0000A3BE                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A3BE                            ; ---------------------------------------------------------------------------
0000A3BE                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A3BE                            ; ---------------------------------------------------------------------------
0000A3BE                            Map_CFlo_internal:
0000A3BE 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A3C0 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A3C2 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A3C4 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A3C6 04                         byte_874E:	dc.b 4
0000A3C7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A3CC 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A3D1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3D6 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3DB 08                         byte_8763:	dc.b 8
0000A3DC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3E1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3E6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3EB F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3F0 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3F5 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3FA 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A3FF 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A404 04                         byte_878C:	dc.b 4
0000A405 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A40A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A40F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A414 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A419 08                         byte_87A1:	dc.b 8
0000A41A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A41F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A424 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A429 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A42E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A433 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A438 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A43D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A442                            		even
0000A442                            		even
0000A442                            
0000A442                            		include	"_incObj\1C Scenery.asm"
0000A442                            ; ---------------------------------------------------------------------------
0000A442                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A442                            ; ---------------------------------------------------------------------------
0000A442                            
0000A442                            Scenery:
0000A442 7000                       		moveq	#0,d0
0000A444 1028 0024                  		move.b	obRoutine(a0),d0
0000A448 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A44C 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A450                            ; ===========================================================================
0000A450 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A452 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A454                            ; ===========================================================================
0000A454                            
0000A454                            Scen_Main:	; Routine 0
0000A454 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A458 7000                       		moveq	#0,d0
0000A45A 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A45E C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A462 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A466 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A46A 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A46E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A474 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A478 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A47C 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A480 3028 0018                  		move.w obPriority(a0),d0 
0000A484 E248                       		lsr.w #1,d0 
0000A486 0240 0380                  		andi.w #$380,d0 
0000A48A 3140 0018                  		move.w d0,obPriority(a0)		
0000A48E 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A492                            
0000A492                            Scen_ChkDel:	; Routine 2
0000A4B0 6000 0000                  		bra.w	DisplaySprite
0000A4B4                            ; ===========================================================================
0000A4B4                            ; ---------------------------------------------------------------------------
0000A4B4                            ; Variables for	object $1C are stored in an array
0000A4B4                            ; ---------------------------------------------------------------------------
0000A4B4 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A4B8 44D8                       		dc.w $44D8		; VRAM setting
0000A4BA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A4BE 0000 0000                  		dc.l Map_Scen
0000A4C2 44D8                       		dc.w $44D8
0000A4C4 0008 0200                  		dc.b 0,	8, 2, 0
0000A4C8 0000 0000                  		dc.l Map_Scen
0000A4CC 44D8                       		dc.w $44D8
0000A4CE 0008 0200                  		dc.b 0,	8, 2, 0
0000A4D2 0000 957C                  		dc.l Map_Bri
0000A4D6 438E                       		dc.w $438E
0000A4D8 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4DC                            		even
0000A4DC                            		even
0000A4DC                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC                            ; Sprite mappings - SLZ	lava thrower
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC                            Map_Scen_internal:
0000A4DC 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4DE 01                         byte_8858:	dc.b 1
0000A4DF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4E4                            		even
0000A4E4                            		even
0000A4E4                            
0000A4E4                            		include	"_incObj\1D Unused Switch.asm"
0000A4E4                            ; ---------------------------------------------------------------------------
0000A4E4                            ; Object 1D - switch that activates when Sonic touches it
0000A4E4                            ; (this	is not used anywhere in	the game)
0000A4E4                            ; ---------------------------------------------------------------------------
0000A4E4                            
0000A4E4                            MagicSwitch:
0000A4E4 7000                       		moveq	#0,d0
0000A4E6 1028 0024                  		move.b	obRoutine(a0),d0
0000A4EA 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4EE 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4F2                            ; ===========================================================================
0000A4F2 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4F4 0000                       		dc.w Swi_Action-Swi_Index
0000A4F6 0000                       		dc.w Swi_Delete-Swi_Index
0000A4F8                            
0000A4F8 =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4F8                            ; ===========================================================================
0000A4F8                            
0000A4F8                            Swi_Main:	; Routine 0
0000A4F8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4FC 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A504 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A50A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A510 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A516 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A51C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A522                            
0000A522                            Swi_Action:	; Routine 2
0000A522 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A528 323C 0010                  		move.w	#$10,d1
0000A52C 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A530 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A532                            
0000A532 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A536 7001                       		moveq	#1,d0
0000A538 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A53C                            
0000A53C                            Swi_ChkDel:
0000A53C 6100 0000                  		bsr.w	DisplaySprite
0000A55E 4E75                       		rts	
0000A560                            ; ===========================================================================
0000A560                            
0000A560                            Swi_Delete:	; Routine 4
0000A560 6100 0000                  		bsr.w	DeleteObject
0000A564 4E75                       		rts	
0000A566                            
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Subroutine to	check if Sonic touches the object
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A566                            
0000A566                            
0000A566                            Swi_ChkTouch:
0000A566 43F8 D000                  		lea	(v_player).w,a1
0000A56A 3029 0008                  		move.w	obX(a1),d0
0000A56E 9068 0008                  		sub.w	obX(a0),d0
0000A572 D041                       		add.w	d1,d0
0000A574 6B00                       		bmi.s	Swi_NoTouch
0000A576 D241                       		add.w	d1,d1
0000A578 B041                       		cmp.w	d1,d0
0000A57A 6400                       		bcc.s	Swi_NoTouch
0000A57C 3429 000C                  		move.w	obY(a1),d2
0000A580 1229 0016                  		move.b	obHeight(a1),d1
0000A584 4881                       		ext.w	d1
0000A586 D242                       		add.w	d2,d1
0000A588 3028 000C                  		move.w	obY(a0),d0
0000A58C 0440 0010                  		subi.w	#$10,d0
0000A590 9041                       		sub.w	d1,d0
0000A592 6200                       		bhi.s	Swi_NoTouch
0000A594 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A598 6500                       		bcs.s	Swi_NoTouch
0000A59A 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A59C 4E75                       		rts	
0000A59E                            ; ===========================================================================
0000A59E                            
0000A59E                            Swi_NoTouch:
0000A59E 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A5A0 4E75                       		rts	
0000A5A2                            ; End of function Swi_ChkTouch
0000A5A2                            ; End of function Swi_ChkTouch
0000A5A2                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2                            ; Sprite mappings - Unused switch thingy
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2                            Map_Swi_internal:
0000A5A2 0000                       		dc.w byte_891E-Map_Swi_internal
0000A5A4 04                         byte_891E:	dc.b 4
0000A5A5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A5AA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A5AF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A5B4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A5BA 00                         		even
0000A5BA 00                         		even
0000A5BA                            
0000A5BA                            		include	"_incObj\2A SBZ Small Door.asm"
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA                            ; Object 2A - small vertical door (SBZ)
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA                            
0000A5BA                            AutoDoor:
0000A5BA 7000                       		moveq	#0,d0
0000A5BC 1028 0024                  		move.b	obRoutine(a0),d0
0000A5C0 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A5C4 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A5C8                            ; ===========================================================================
0000A5C8 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A5CA 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A5CC                            ; ===========================================================================
0000A5CC                            
0000A5CC                            ADoor_Main:	; Routine 0
0000A5CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5D0 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A5D8 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5DE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5E4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5EA                            		;move.b	#4,obPriority(a0)
0000A5EA                            
0000A5EA                            ADoor_OpenShut:	; Routine 2
0000A5EA 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5EE 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5F2 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5F6 D041                       		add.w	d1,d0
0000A5F8 B068 0008                  		cmp.w	obX(a0),d0
0000A5FC 6500                       		bcs.s	ADoor_Animate
0000A5FE 9041                       		sub.w	d1,d0
0000A600 9041                       		sub.w	d1,d0
0000A602 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A606 6400                       		bcc.s	ADoor_Animate	; close door
0000A608 D041                       		add.w	d1,d0
0000A60A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A60E 6400                       		bcc.s	loc_899A	; if yes, branch
0000A610 0828 0000 0022             		btst	#0,obStatus(a0)
0000A616 6600                       		bne.s	ADoor_Animate
0000A618 6000                       		bra.s	ADoor_Open
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            loc_899A:
0000A61A 0828 0000 0022             		btst	#0,obStatus(a0)
0000A620 6700                       		beq.s	ADoor_Animate
0000A622                            
0000A622                            ADoor_Open:
0000A622 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A628                            
0000A628                            ADoor_Animate:
0000A628 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A62E 6100 0000                  		bsr.w	AnimateSprite
0000A632 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A636 6600                       		bne.s	@remember	; if yes, branch
0000A638 323C 0011                  		move.w	#$11,d1
0000A63C 343C 0020                  		move.w	#$20,d2
0000A640 3602                       		move.w	d2,d3
0000A642 5243                       		addq.w	#1,d3
0000A644 3828 0008                  		move.w	obX(a0),d4
0000A648 6100 0000                  		bsr.w	SolidObject
0000A64C                            
0000A64C                            	@remember:
0000A64C 6000 0000                  		bra.w	RememberState
0000A64C 6000 0000                  		bra.w	RememberState
0000A650                            		include	"_anim\SBZ Small Door.asm"
0000A650                            ; ---------------------------------------------------------------------------
0000A650                            ; Animation script - doors (SBZ)
0000A650                            ; ---------------------------------------------------------------------------
0000A650 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A652 0000                       		dc.w @open-Ani_ADoor
0000A654 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A660 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A66C                            		even
0000A66C                            		even
0000A66C                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A66C                            ; --------------------------------------------------------------------------------
0000A66C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A66C                            ; --------------------------------------------------------------------------------
0000A66C                            
0000A66C                            SME_YnmwF:	
0000A66C 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A670 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A674 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A678 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A67C 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A67E 02                         SME_YnmwF_12:	dc.b 2	
0000A67F E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A684 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A689 02                         SME_YnmwF_1D:	dc.b 2	
0000A68A DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A68F 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A694 02                         SME_YnmwF_28:	dc.b 2	
0000A695 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A69A 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A69F 02                         SME_YnmwF_33:	dc.b 2	
0000A6A0 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A6A5 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A6AA 02                         SME_YnmwF_3E:	dc.b 2	
0000A6AB D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A6B0 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A6B5 02                         SME_YnmwF_49:	dc.b 2	
0000A6B6 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A6BB 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A6C0 02                         SME_YnmwF_54:	dc.b 2	
0000A6C1 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A6C6 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A6CB 02                         SME_YnmwF_5F:	dc.b 2	
0000A6CC C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A6D1 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A6D6 02                         SME_YnmwF_6A:	dc.b 2	
0000A6D7 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6DC 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6E2 00                         		even
0000A6E2 00                         		even
0000A6E2                            
0000A6E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6E2                            
0000A6E2                            
0000A6E2                            Obj44_SolidWall:
0000A6E2 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6E6 6700                       		beq.s	loc_8AA8
0000A6E8 6B00 0000                  		bmi.w	loc_8AC4
0000A6EC 4A40                       		tst.w	d0
0000A6EE 6700 0000                  		beq.w	loc_8A92
0000A6F2 6B00                       		bmi.s	loc_8A7C
0000A6F4 4A69 0010                  		tst.w	obVelX(a1)
0000A6F8 6B00                       		bmi.s	loc_8A92
0000A6FA 6000                       		bra.s	loc_8A82
0000A6FC                            ; ===========================================================================
0000A6FC                            
0000A6FC                            loc_8A7C:
0000A6FC 4A69 0010                  		tst.w	obVelX(a1)
0000A700 6A00                       		bpl.s	loc_8A92
0000A702                            
0000A702                            loc_8A82:
0000A702 9169 0008                  		sub.w	d0,obX(a1)
0000A706 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A70C 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A712                            
0000A712                            loc_8A92:
0000A712 0829 0001 0022             		btst	#1,obStatus(a1)
0000A718 6600                       		bne.s	loc_8AB6
0000A71A 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A720 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A726 4E75                       		rts	
0000A728                            ; ===========================================================================
0000A728                            
0000A728                            loc_8AA8:
0000A728 0828 0005 0022             		btst	#5,obStatus(a0)
0000A72E 6700                       		beq.s	locret_8AC2
0000A730 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A736                            
0000A736                            loc_8AB6:
0000A736 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A73C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A742                            
0000A742                            locret_8AC2:
0000A742 4E75                       		rts	
0000A744                            ; ===========================================================================
0000A744                            
0000A744                            loc_8AC4:
0000A744 4A69 0012                  		tst.w	obVelY(a1)
0000A748 6A00                       		bpl.s	locret_8AD8
0000A74A 4A43                       		tst.w	d3
0000A74C 6A00                       		bpl.s	locret_8AD8
0000A74E 9769 000C                  		sub.w	d3,obY(a1)
0000A752 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A758                            
0000A758                            locret_8AD8:
0000A758 4E75                       		rts	
0000A75A                            ; End of function Obj44_SolidWall
0000A75A                            
0000A75A                            
0000A75A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A75A                            
0000A75A                            
0000A75A                            Obj44_SolidWall2:
0000A75A 43F8 D000                  		lea	(v_player).w,a1
0000A75E 3029 0008                  		move.w	obX(a1),d0
0000A762 9068 0008                  		sub.w	obX(a0),d0
0000A766 D041                       		add.w	d1,d0
0000A768 6B00                       		bmi.s	loc_8B48
0000A76A 3601                       		move.w	d1,d3
0000A76C D643                       		add.w	d3,d3
0000A76E B043                       		cmp.w	d3,d0
0000A770 6200                       		bhi.s	loc_8B48
0000A772 1629 0016                  		move.b	obHeight(a1),d3
0000A776 4883                       		ext.w	d3
0000A778 D443                       		add.w	d3,d2
0000A77A 3629 000C                  		move.w	obY(a1),d3
0000A77E 9668 000C                  		sub.w	obY(a0),d3
0000A782 D642                       		add.w	d2,d3
0000A784 6B00                       		bmi.s	loc_8B48
0000A786 3802                       		move.w	d2,d4
0000A788 D844                       		add.w	d4,d4
0000A78A B644                       		cmp.w	d4,d3
0000A78C 6400                       		bhs.s	loc_8B48
0000A78E 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A792 6B00                       		bmi.s	loc_8B48
0000A794 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A79A 6400                       		bhs.s	loc_8B48
0000A79C 4A78 FE08                  		tst.w	(v_debuguse).w
0000A7A0 6600                       		bne.s	loc_8B48
0000A7A2 3A00                       		move.w	d0,d5
0000A7A4 B240                       		cmp.w	d0,d1
0000A7A6 6400                       		bhs.s	loc_8B30
0000A7A8 D241                       		add.w	d1,d1
0000A7AA 9041                       		sub.w	d1,d0
0000A7AC 3A00                       		move.w	d0,d5
0000A7AE 4445                       		neg.w	d5
0000A7B0                            
0000A7B0                            loc_8B30:
0000A7B0 3203                       		move.w	d3,d1
0000A7B2 B443                       		cmp.w	d3,d2
0000A7B4 6400                       		bhs.s	loc_8B3C
0000A7B6 9644                       		sub.w	d4,d3
0000A7B8 3203                       		move.w	d3,d1
0000A7BA 4441                       		neg.w	d1
0000A7BC                            
0000A7BC                            loc_8B3C:
0000A7BC BA41                       		cmp.w	d1,d5
0000A7BE 6200                       		bhi.s	loc_8B44
0000A7C0 7801                       		moveq	#1,d4
0000A7C2 4E75                       		rts	
0000A7C4                            ; ===========================================================================
0000A7C4                            
0000A7C4                            loc_8B44:
0000A7C4 78FF                       		moveq	#-1,d4
0000A7C6 4E75                       		rts	
0000A7C8                            ; ===========================================================================
0000A7C8                            
0000A7C8                            loc_8B48:
0000A7C8 7800                       		moveq	#0,d4
0000A7CA 4E75                       		rts	
0000A7CC                            ; End of function Obj44_SolidWall2
0000A7CC                            
0000A7CC                            ; ===========================================================================
0000A7CC                            
0000A7CC                            		include	"_incObj\1E Ball Hog.asm"
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            ; Object 1E - Ball Hog enemy (SBZ)
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            
0000A7CC                            BallHog:
0000A7CC 7000                       		moveq	#0,d0
0000A7CE 1028 0024                  		move.b	obRoutine(a0),d0
0000A7D2 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A7D6 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7DA                            ; ===========================================================================
0000A7DA 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7DC 0000                       		dc.w Hog_Action-Hog_Index
0000A7DE                            
0000A7DE =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7DE                            ; ===========================================================================
0000A7DE                            
0000A7DE                            Hog_Main:	; Routine 0
0000A7DE 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7E4 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7EA 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7F2 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7F8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7FE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A804 117C 0005 0020             		move.b	#5,obColType(a0)
0000A80A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A810 6100 0000                  		bsr.w	ObjectFall
0000A814 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A81A 4A41                       		tst.w	d1
0000A81C 6A00                       		bpl.s	@floornotfound
0000A81E D368 000C                  		add.w	d1,obY(a0)
0000A822 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A828 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A82C                            
0000A82C                            	@floornotfound:
0000A82C 4E75                       		rts	
0000A82E                            ; ===========================================================================
0000A82E                            
0000A82E                            Hog_Action:	; Routine 2
0000A82E 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A834 6100 0000                  		bsr.w	AnimateSprite
0000A838 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A83E 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A840 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A844 6700                       		beq.s	@makeball	; if yes, branch
0000A846 6000                       		bra.s	@remember
0000A848                            ; ===========================================================================
0000A848                            
0000A848                            @setlaunchflag:
0000A848 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A84C                            
0000A84C                            @remember:
0000A84C 6000 0000                  		bra.w	RememberState
0000A850                            ; ===========================================================================
0000A850                            
0000A850                            @makeball:
0000A850 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A856 6100 0000                  		bsr.w	FindFreeObj
0000A85A 6600                       		bne.s	@fail
0000A85C 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A860 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A866 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A86C 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A872 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A878 70FC                       		moveq	#-4,d0
0000A87A 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A880 6700                       		beq.s	@noflip		; if not, branch
0000A882 4440                       		neg.w	d0
0000A884 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A888                            
0000A888                            	@noflip:
0000A888 D169 0008                  		add.w	d0,obX(a1)
0000A88C 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A892 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A898                            
0000A898                            	@fail:
0000A898 60B2                       		bra.s	@remember
0000A898 60B2                       		bra.s	@remember
0000A89A                            		include	"_incObj\20 Cannonball.asm"
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            
0000A89A                            Cannonball:
0000A89A 7000                       		moveq	#0,d0
0000A89C 1028 0024                  		move.b	obRoutine(a0),d0
0000A8A0 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A8A4 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A8A8                            ; ===========================================================================
0000A8A8 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A8AA 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A8AC                            
0000A8AC =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A8AC                            ; ===========================================================================
0000A8AC                            
0000A8AC                            Cbal_Main:	; Routine 0
0000A8AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8B0 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A8B6 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8BE 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A8C4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8CA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A8D0 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A8D6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8DC 7000                       		moveq	#0,d0
0000A8DE 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8E2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8E6 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8EA 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8F0                            
0000A8F0                            Cbal_Bounce:	; Routine 2
0000A8F0 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8F6 4A68 0012                  		tst.w	obVelY(a0)
0000A8FA 6B00                       		bmi.s	Cbal_ChkExplode
0000A8FC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A902 4A41                       		tst.w	d1		; has ball hit the floor?
0000A904 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A906                            
0000A906 D368 000C                  		add.w	d1,obY(a0)
0000A90A 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A910 4A03                       		tst.b	d3
0000A912 6700                       		beq.s	Cbal_ChkExplode
0000A914 6B00                       		bmi.s	loc_8CA4
0000A916 4A68 0010                  		tst.w	obVelX(a0)
0000A91A 6A00                       		bpl.s	Cbal_ChkExplode
0000A91C 4468 0010                  		neg.w	obVelX(a0)
0000A920 6000                       		bra.s	Cbal_ChkExplode
0000A922                            ; ===========================================================================
0000A922                            
0000A922                            loc_8CA4:
0000A922 4A68 0010                  		tst.w	obVelX(a0)
0000A926 6B00                       		bmi.s	Cbal_ChkExplode
0000A928 4468 0010                  		neg.w	obVelX(a0)
0000A92C                            
0000A92C                            Cbal_ChkExplode:
0000A92C 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A930 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A932                            
0000A932                            	Cbal_Explode:
0000A932 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A936 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A93A 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A940 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            Cbal_Animate:
0000A944 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A948 6A00                       		bpl.s	Cbal_Display
0000A94A 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A950 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A956                            
0000A956                            Cbal_Display:
0000A956 6100 0000                  		bsr.w	DisplaySprite
0000A95A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A95E 0640 00E0                  		addi.w	#$E0,d0
0000A962 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A966 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A96A 4E75                       		rts	
0000A96A 4E75                       		rts	
0000A96C                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            
0000A96C                            MissileDissolve:
0000A96C 7000                       		moveq	#0,d0
0000A96E 1028 0024                  		move.b	obRoutine(a0),d0
0000A972 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A976 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A97A                            ; ===========================================================================
0000A97A 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A97C 0000                       		dc.w MDis_Animate-MDis_Index
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            MDis_Main:	; Routine 0
0000A97E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A982 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A98A 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A990 117C 0004 0001             		move.b	#4,obRender(a0)
0000A996 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A99C 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9A2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A9A8 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A9AE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9BE                            
0000A9BE                            MDis_Animate:	; Routine 2
0000A9BE 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9C2 6A00                       		bpl.s	@display
0000A9C4 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A9CA 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A9CE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A9D4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A9D8                            
0000A9D8                            	@display:
0000A9D8 6000 0000                  		bra.w	DisplaySprite
0000A9DC                            ; ===========================================================================
0000A9DC                            
0000A9DC                            ; ---------------------------------------------------------------------------
0000A9DC                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9DC                            ; ---------------------------------------------------------------------------
0000A9DC                            
0000A9DC                            ExplosionItem:
0000A9DC 7000                       		moveq	#0,d0
0000A9DE 1028 0024                  		move.b	obRoutine(a0),d0
0000A9E2 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9E6 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9EA                            ; ===========================================================================
0000A9EA 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9EC 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9EE 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9F0                            ; ===========================================================================
0000A9F0                            
0000A9F0                            ExItem_Animal:	; Routine 0
0000A9F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9F4 6100 0000                  		bsr.w	FindFreeObj
0000A9F8 6600                       		bne.s	ExItem_Main
0000A9FA 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A9FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AA04 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AA0A 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AA10                            
0000AA10                            ExItem_Main:	; Routine 2
0000AA10 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA14 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AA1C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA22 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA28 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA2E 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA34 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA3A 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA40 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA50                            
0000AA50                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA50 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA54 6A00                       		bpl.s	@display
0000AA56 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA5C 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA60 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA66 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA6A                            
0000AA6A                            	@display:
0000AA6A 6000 0000                  		bra.w	DisplaySprite
0000AA6E                            ; ===========================================================================
0000AA6E                            ; ---------------------------------------------------------------------------
0000AA6E                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA6E                            ; ---------------------------------------------------------------------------
0000AA6E                            
0000AA6E                            ExplosionBomb:
0000AA6E 7000                       		moveq	#0,d0
0000AA70 1028 0024                  		move.b	obRoutine(a0),d0
0000AA74 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA78 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA7C                            ; ===========================================================================
0000AA7C 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA7E FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA80                            ; ===========================================================================
0000AA80                            
0000AA80                            ExBom_Main:	; Routine 0
0000AA80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA84 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA8C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA92 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA98 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA9E 117C 0000 0020             		move.b	#0,obColType(a0)
0000AAA4 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AAAA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAB0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAC0                            		include	"_anim\Ball Hog.asm"
0000AAC0                            ; ---------------------------------------------------------------------------
0000AAC0                            ; Animation script - doors (SBZ)
0000AAC0                            ; ---------------------------------------------------------------------------
0000AAC0 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AAC2 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AADA 00                         		even
0000AADA 00                         		even
0000AADA                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AADA                            ; --------------------------------------------------------------------------------
0000AADA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AADA                            ; --------------------------------------------------------------------------------
0000AADA                            
0000AADA                            SME_ZER01:	
0000AADA 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AADE 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAE2 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AAE6 02                         SME_ZER01_C:	dc.b 2	
0000AAE7 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAEC FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAF1 02                         SME_ZER01_17:	dc.b 2	
0000AAF2 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAF7 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AAFC 02                         SME_ZER01_22:	dc.b 2	
0000AAFD F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AB02 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AB07 02                         SME_ZER01_2D:	dc.b 2	
0000AB08 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AB0D F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AB12 01                         SME_ZER01_38:	dc.b 1	
0000AB13 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AB18 01                         SME_ZER01_3E:	dc.b 1	
0000AB19 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AB1E                            		even
0000AB1E                            		even
0000AB1E                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AB1E                            ; ---------------------------------------------------------------------------
0000AB1E                            ; Sprite mappings - buzz bomber missile vanishing
0000AB1E                            ; ---------------------------------------------------------------------------
0000AB1E                            Map_MisDissolve_internal:
0000AB1E 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AB20 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AB22 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AB24 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AB26 01                         byte_8EAE:	dc.b 1
0000AB27 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AB2C 01                         byte_8EB4:	dc.b 1
0000AB2D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AB32 01                         byte_8EBA:	dc.b 1
0000AB33 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AB38 01                         byte_8EC0:	dc.b 1
0000AB39 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB3E                            		even
0000AB3E                            		even
0000AB3E                            		include	"_maps\Explosions.asm"
0000AB3E                            ; ---------------------------------------------------------------------------
0000AB3E                            ; Sprite mappings - explosion from a badnik or monitor
0000AB3E                            ; ---------------------------------------------------------------------------
0000AB3E 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB42 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB46 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB48 01                         byte_8ED0:	dc.b 1
0000AB49 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB4E 01                         byte_8ED6:	dc.b 1
0000AB4F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB54 01                         byte_8EDC:	dc.b 1
0000AB55 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB5A 04                         byte_8EE2:	dc.b 4
0000AB5B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB60 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB65 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB6A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB6F 04                         byte_8EF7:	dc.b 4
0000AB70 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB75 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB7A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB7F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB84                            		even
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB84                            ; ---------------------------------------------------------------------------
0000AB84 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB86 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB88 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB8A FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB8C FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB8E 01                         byte_8F16:	dc.b 1
0000AB8F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB94 01                         byte_8F1C:	dc.b 1
0000AB95 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB9A                            		even
0000AB9A                            		even
0000AB9A                            
0000AB9A                            		include	"_incObj\28 Animals.asm"
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            ; Object 28 - animals
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            
0000AB9A                            Animals:
0000AB9A 7000                       		moveq	#0,d0
0000AB9C 1028 0024                  		move.b	obRoutine(a0),d0
0000ABA0 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000ABA4 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000ABA8                            ; ===========================================================================
0000ABA8 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000ABAC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABB0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000ABB4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABB8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000ABBC 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000ABC0 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000ABC4 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABC8 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABCC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000ABD0 0000                       		dc.w loc_92D6-Anml_Index
0000ABD2                            
0000ABD2 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABDE                            
0000ABDE FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABE2 0000 0000                  		dc.l Map_Animal1
0000ABE6 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABEA 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABEE FE80 FD00                  		dc.w $FE80, $FD00
0000ABF2 0000 0000                  		dc.l Map_Animal1
0000ABF6 FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABFA 0000 0000                  		dc.l Map_Animal2
0000ABFE FE40 FD00                  		dc.w $FE40, $FD00
0000AC02 0000 0000                  		dc.l Map_Animal3
0000AC06 FD00 FC00                  		dc.w $FD00, $FC00
0000AC0A 0000 0000                  		dc.l Map_Animal2
0000AC0E FD80 FC80                  		dc.w $FD80, $FC80
0000AC12 0000 0000                  		dc.l Map_Animal3
0000AC16                            
0000AC16 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AC26 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AC36 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC42                            
0000AC42 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC56 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC6A 0000 0000                  		dc.l Map_Animal3
0000AC6E                            
0000AC6E 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC80 0565 05B3                  		dc.w $565, $5B3
0000AC84                            ; ===========================================================================
0000AC84                            
0000AC84                            Anml_Ending:	; Routine 0
0000AC84 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC88 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC8C 7000                       		moveq	#0,d0
0000AC8E 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC92 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC94 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC98 0440 0014                  		subi.w	#$14,d0
0000AC9C 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000ACA2 D040                       		add.w	d0,d0
0000ACA4 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000ACAA 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ACAE 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ACB4 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ACBA 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ACC0 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ACC6 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ACCC 117C 0004 0001             		move.b	#4,obRender(a0)
0000ACD2 08E8 0000 0001             		bset	#0,obRender(a0)
0000ACD8 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACDE 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACE4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACEA 6000 0000                  		bra.w	DisplaySprite
0000ACEE                            ; ===========================================================================
0000ACEE                            
0000ACEE                            Anml_FromEnemy:
0000ACEE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACF2 6100 8D1C                  		bsr.w	RandomNumber
0000ACF6 0240 0001                  		andi.w	#1,d0
0000ACFA 7200                       		moveq	#0,d1
0000ACFC 1238 FE10                  		move.b	(v_zone).w,d1
0000AD00 D241                       		add.w	d1,d1
0000AD02 D240                       		add.w	d0,d1
0000AD04 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000AD08 1031 1000                  		move.b	(a1,d1.w),d0
0000AD0C 1140 0030                  		move.b	d0,$30(a0)
0000AD10 E748                       		lsl.w	#3,d0
0000AD12 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AD16 D2C0                       		adda.w	d0,a1
0000AD18 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AD1C 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AD20 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AD24 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AD2A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AD30 6700                       		beq.s	loc_90C0	; if yes, branch
0000AD32 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AD38                            
0000AD38                            loc_90C0:
0000AD38 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD3E 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD44 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD4A 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD50 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD56 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD5C 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD62 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD68 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD6C 6600                       		bne.s	loc_911C
0000AD6E 6100 0000                  		bsr.w	FindFreeObj
0000AD72 6600                       		bne.s	Anml_Display
0000AD74 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD78 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD7E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD84 3028 003E                  		move.w	$3E(a0),d0
0000AD88 E248                       		lsr.w	#1,d0
0000AD8A 1340 001A                  		move.b	d0,obFrame(a1)
0000AD8E                            
0000AD8E                            Anml_Display:
0000AD8E 6000 0000                  		bra.w	DisplaySprite
0000AD92                            ; ===========================================================================
0000AD92                            
0000AD92                            loc_911C:
0000AD92 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD98 4268 0010                  		clr.w	obVelX(a0)
0000AD9C 6000 0000                  		bra.w	DisplaySprite
0000ADA0                            ; ===========================================================================
0000ADA0                            
0000ADA0                            loc_912A:
0000ADA0 4A28 0001                  		tst.b	obRender(a0)
0000ADA4 6A00 0000                  		bpl.w	DeleteObject
0000ADA8 6100 0000                  		bsr.w	ObjectFall
0000ADAC 4A68 0012                  		tst.w	obVelY(a0)
0000ADB0 6B00                       		bmi.s	loc_9180
0000ADB2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADB8 4A41                       		tst.w	d1
0000ADBA 6A00                       		bpl.s	loc_9180
0000ADBC D368 000C                  		add.w	d1,obY(a0)
0000ADC0 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADC6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADCC 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADD2 1028 0030                  		move.b	$30(a0),d0
0000ADD6 D000                       		add.b	d0,d0
0000ADD8 5800                       		addq.b	#4,d0
0000ADDA 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADDE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADE2 6700                       		beq.s	loc_9180
0000ADE4 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADEA 6700                       		beq.s	loc_9180
0000ADEC 4468 0010                  		neg.w	obVelX(a0)
0000ADF0 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADF6                            
0000ADF6                            loc_9180:
0000ADF6 6000 0000                  		bra.w	DisplaySprite
0000ADFA                            ; ===========================================================================
0000ADFA                            
0000ADFA                            loc_9184:
0000ADFA 6100 0000                  		bsr.w	ObjectFall
0000ADFE 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE04 4A68 0012                  		tst.w	obVelY(a0)
0000AE08 6B00                       		bmi.s	loc_91AE
0000AE0A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE10 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE16 4A41                       		tst.w	d1
0000AE18 6A00                       		bpl.s	loc_91AE
0000AE1A D368 000C                  		add.w	d1,obY(a0)
0000AE1E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE24                            
0000AE24                            loc_91AE:
0000AE24 4A28 0028                  		tst.b	obSubtype(a0)
0000AE28 6600                       		bne.s	loc_9224
0000AE2A 4A28 0001                  		tst.b	obRender(a0)
0000AE2E 6A00 0000                  		bpl.w	DeleteObject
0000AE32 6000 0000                  		bra.w	DisplaySprite
0000AE36                            ; ===========================================================================
0000AE36                            
0000AE36                            loc_91C0:
0000AE36 6100 0000                  		bsr.w	SpeedToPos
0000AE3A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE40 4A68 0012                  		tst.w	obVelY(a0)
0000AE44 6B00                       		bmi.s	loc_91FC
0000AE46 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE4C 4A41                       		tst.w	d1
0000AE4E 6A00                       		bpl.s	loc_91FC
0000AE50 D368 000C                  		add.w	d1,obY(a0)
0000AE54 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE5A 4A28 0028                  		tst.b	obSubtype(a0)
0000AE5E 6700                       		beq.s	loc_91FC
0000AE60 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE66 6700                       		beq.s	loc_91FC
0000AE68 4468 0010                  		neg.w	obVelX(a0)
0000AE6C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE72                            
0000AE72                            loc_91FC:
0000AE72 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE76 6A00                       		bpl.s	loc_9212
0000AE78 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE7E 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE82 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE88                            
0000AE88                            loc_9212:
0000AE88 4A28 0028                  		tst.b	obSubtype(a0)
0000AE8C 6600                       		bne.s	loc_9224
0000AE8E 4A28 0001                  		tst.b	obRender(a0)
0000AE92 6A00 0000                  		bpl.w	DeleteObject
0000AE96 6000 0000                  		bra.w	DisplaySprite
0000AE9A                            ; ===========================================================================
0000AE9A                            
0000AE9A                            loc_9224:
0000AE9A 3028 0008                  		move.w	obX(a0),d0
0000AE9E 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AEA2 6500                       		bcs.s	loc_923C
0000AEA4 0440 0180                  		subi.w	#$180,d0
0000AEA8 6A00                       		bpl.s	loc_923C
0000AEAA 4A28 0001                  		tst.b	obRender(a0)
0000AEAE 6A00 0000                  		bpl.w	DeleteObject
0000AEB2                            
0000AEB2                            loc_923C:
0000AEB2 6000 0000                  		bra.w	DisplaySprite
0000AEB6                            ; ===========================================================================
0000AEB6                            
0000AEB6                            loc_9240:
0000AEB6 4A28 0001                  		tst.b	obRender(a0)
0000AEBA 6A00 0000                  		bpl.w	DeleteObject
0000AEBE 5368 0036                  		subq.w	#1,$36(a0)
0000AEC2 6600 0000                  		bne.w	loc_925C
0000AEC6 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AECC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AED2                            
0000AED2                            loc_925C:
0000AED2 6000 0000                  		bra.w	DisplaySprite
0000AED6                            ; ===========================================================================
0000AED6                            
0000AED6                            loc_9260:
0000AED6 6100 0000                  		bsr.w	sub_9404
0000AEDA 6400                       		bcc.s	loc_927C
0000AEDC 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AEE2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEE8 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEEE 6000 FF46                  		bra.w	loc_91C0
0000AEF2                            ; ===========================================================================
0000AEF2                            
0000AEF2                            loc_927C:
0000AEF2 6000 FFA6                  		bra.w	loc_9224
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            loc_9280:
0000AEF6 6100 0000                  		bsr.w	sub_9404
0000AEFA 6A00                       		bpl.s	loc_92B6
0000AEFC 4268 0010                  		clr.w	obVelX(a0)
0000AF00 4268 0032                  		clr.w	$32(a0)
0000AF04 6100 0000                  		bsr.w	SpeedToPos
0000AF08 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF0E 6100 0000                  		bsr.w	loc_93C4
0000AF12 6100 0000                  		bsr.w	loc_93EC
0000AF16 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF1A 6A00                       		bpl.s	loc_92B6
0000AF1C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF22 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF26 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF2C                            
0000AF2C                            loc_92B6:
0000AF2C 6000 FF6C                  		bra.w	loc_9224
0000AF30                            ; ===========================================================================
0000AF30                            
0000AF30                            loc_92BA:
0000AF30 6100 0000                  		bsr.w	sub_9404
0000AF34 6A00                       		bpl.s	loc_9310
0000AF36 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF3C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF42 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF48 6000 FEB0                  		bra.w	loc_9184
0000AF4C                            ; ===========================================================================
0000AF4C                            
0000AF4C                            loc_92D6:
0000AF4C 6100 0000                  		bsr.w	ObjectFall
0000AF50 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF56 4A68 0012                  		tst.w	obVelY(a0)
0000AF5A 6B00                       		bmi.s	loc_9310
0000AF5C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF62 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF68 4A41                       		tst.w	d1
0000AF6A 6A00                       		bpl.s	loc_9310
0000AF6C 4628 0029                  		not.b	$29(a0)
0000AF70 6600                       		bne.s	loc_9306
0000AF72 4468 0010                  		neg.w	obVelX(a0)
0000AF76 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF7C                            
0000AF7C                            loc_9306:
0000AF7C D368 000C                  		add.w	d1,obY(a0)
0000AF80 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF86                            
0000AF86                            loc_9310:
0000AF86 6000 FF12                  		bra.w	loc_9224
0000AF8A                            ; ===========================================================================
0000AF8A                            
0000AF8A                            loc_9314:
0000AF8A 6100 0000                  		bsr.w	sub_9404
0000AF8E 6A00                       		bpl.s	loc_932E
0000AF90 4268 0010                  		clr.w	obVelX(a0)
0000AF94 4268 0032                  		clr.w	$32(a0)
0000AF98 6100 0000                  		bsr.w	ObjectFall
0000AF9C 6100 0000                  		bsr.w	loc_93C4
0000AFA0 6100 0000                  		bsr.w	loc_93EC
0000AFA4                            
0000AFA4                            loc_932E:
0000AFA4 6000 FEF4                  		bra.w	loc_9224
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            loc_9332:
0000AFA8 6100 0000                  		bsr.w	sub_9404
0000AFAC 6A00                       		bpl.s	loc_936C
0000AFAE 6100 0000                  		bsr.w	ObjectFall
0000AFB2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AFB8 4A68 0012                  		tst.w	obVelY(a0)
0000AFBC 6B00                       		bmi.s	loc_936C
0000AFBE 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AFC4 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFCA 4A41                       		tst.w	d1
0000AFCC 6A00                       		bpl.s	loc_936C
0000AFCE 4468 0010                  		neg.w	obVelX(a0)
0000AFD2 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFD8 D368 000C                  		add.w	d1,obY(a0)
0000AFDC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFE2                            
0000AFE2                            loc_936C:
0000AFE2 6000 FEB6                  		bra.w	loc_9224
0000AFE6                            ; ===========================================================================
0000AFE6                            
0000AFE6                            loc_9370:
0000AFE6 6100 0000                  		bsr.w	sub_9404
0000AFEA 6A00                       		bpl.s	loc_93C0
0000AFEC 6100 0000                  		bsr.w	SpeedToPos
0000AFF0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFF6 4A68 0012                  		tst.w	obVelY(a0)
0000AFFA 6B00                       		bmi.s	loc_93AA
0000AFFC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B002 4A41                       		tst.w	d1
0000B004 6A00                       		bpl.s	loc_93AA
0000B006 4628 0029                  		not.b	$29(a0)
0000B00A 6600                       		bne.s	loc_93A0
0000B00C 4468 0010                  		neg.w	obVelX(a0)
0000B010 0868 0000 0001             		bchg	#0,obRender(a0)
0000B016                            
0000B016                            loc_93A0:
0000B016 D368 000C                  		add.w	d1,obY(a0)
0000B01A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B020                            
0000B020                            loc_93AA:
0000B020 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B024 6A00                       		bpl.s	loc_93C0
0000B026 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B02C 5228 001A                  		addq.b	#1,obFrame(a0)
0000B030 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B036                            
0000B036                            loc_93C0:
0000B036 6000 FE62                  		bra.w	loc_9224
0000B03A                            ; ===========================================================================
0000B03A                            
0000B03A                            loc_93C4:
0000B03A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B040 4A68 0012                  		tst.w	obVelY(a0)
0000B044 6B00                       		bmi.s	locret_93EA
0000B046 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B04C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B052 4A41                       		tst.w	d1
0000B054 6A00                       		bpl.s	locret_93EA
0000B056 D368 000C                  		add.w	d1,obY(a0)
0000B05A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B060                            
0000B060                            locret_93EA:
0000B060 4E75                       		rts	
0000B062                            ; ===========================================================================
0000B062                            
0000B062                            loc_93EC:
0000B062 08E8 0000 0001             		bset	#0,obRender(a0)
0000B068 3028 0008                  		move.w	obX(a0),d0
0000B06C 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B070 6400                       		bcc.s	locret_9402
0000B072 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B078                            
0000B078                            locret_9402:
0000B078 4E75                       		rts	
0000B07A                            
0000B07A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B07A                            
0000B07A                            
0000B07A                            sub_9404:
0000B07A 3038 D008                  		move.w	(v_player+obX).w,d0
0000B07E 9068 0008                  		sub.w	obX(a0),d0
0000B082 0440 00B8                  		subi.w	#$B8,d0
0000B086 4E75                       		rts	
0000B088                            ; End of function sub_9404
0000B088                            ; End of function sub_9404
0000B088                            		include	"_incObj\29 Points.asm"
0000B088                            ; ---------------------------------------------------------------------------
0000B088                            ; Object 29 - points that appear when you destroy something
0000B088                            ; ---------------------------------------------------------------------------
0000B088                            
0000B088                            Points:
0000B088 7000                       		moveq	#0,d0
0000B08A 1028 0024                  		move.b	obRoutine(a0),d0
0000B08E 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B092 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B096 6000 0000                  		bra.w	DisplaySprite
0000B09A                            ; ===========================================================================
0000B09A 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B09C 0000                       		dc.w Poi_Slower-Poi_Index
0000B09E                            ; ===========================================================================
0000B09E                            
0000B09E                            Poi_Main:	; Routine 0
0000B09E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B0A2 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B0AA 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B0B0 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0B6 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B0BC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0C2 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B0C8                            
0000B0C8                            Poi_Slower:	; Routine 2
0000B0C8 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B0CC 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B0D0 6100 0000                  		bsr.w	SpeedToPos
0000B0D4 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0DA 4E75                       		rts	
0000B0DA 4E75                       		rts	
0000B0DC                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC                            ; Sprite mappings - animals
0000B0DC                            ; ---------------------------------------------------------------------------
0000B0DC                            Map_Animal1_internal:
0000B0DC 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0DE 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0E0 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0E2 01                         byte_946C:	dc.b 1
0000B0E3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0E8 01                         byte_9472:	dc.b 1
0000B0E9 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0EE 01                         byte_9478:	dc.b 1
0000B0EF F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0F4                            		even
0000B0F4                            		even
0000B0F4                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0F4                            ; ---------------------------------------------------------------------------
0000B0F4                            ; Sprite mappings - animals
0000B0F4                            ; ---------------------------------------------------------------------------
0000B0F4                            Map_Animal2_internal:
0000B0F4 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0F6 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0F8 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0FA 01                         byte_9484:	dc.b 1
0000B0FB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B100 01                         byte_948A:	dc.b 1
0000B101 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B106 01                         byte_9490:	dc.b 1
0000B107 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B10C                            		even
0000B10C                            		even
0000B10C                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B10C                            ; ---------------------------------------------------------------------------
0000B10C                            ; Sprite mappings - animals
0000B10C                            ; ---------------------------------------------------------------------------
0000B10C                            Map_Animal3_internal:
0000B10C 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B10E 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B110 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B112 01                         byte_949C:	dc.b 1
0000B113 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B118 01                         byte_94A2:	dc.b 1
0000B119 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B11E 01                         byte_94A8:	dc.b 1
0000B11F FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B124                            		even
0000B124                            		even
0000B124                            Map_Poi:	include	"_maps\Points.asm"
0000B124                            ; --------------------------------------------------------------------------------
0000B124                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B124                            ; --------------------------------------------------------------------------------
0000B124                            
0000B124                            SME_qLvsg:	
0000B124 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B128 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B12C 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B130 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B132 01                         SME_qLvsg_E:	dc.b 1	
0000B133 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B138 01                         SME_qLvsg_14:	dc.b 1	
0000B139 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B13E 01                         SME_qLvsg_1A:	dc.b 1	
0000B13F FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B144 01                         SME_qLvsg_20:	dc.b 1	
0000B145 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B14A 01                         SME_qLvsg_26:	dc.b 1	
0000B14B FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B150 02                         SME_qLvsg_2C:	dc.b 2	
0000B151 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B156 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B15B 02                         SME_qLvsg_37:	dc.b 2	
0000B15C FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B161 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B166                            		even
0000B166                            		even
0000B166                            
0000B166                            		include	"_incObj\1F Crabmeat.asm"
0000B166                            ; ---------------------------------------------------------------------------
0000B166                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B166                            ; ---------------------------------------------------------------------------
0000B166                            
0000B166                            Crabmeat:
0000B166 7000                       		moveq	#0,d0
0000B168 1028 0024                  		move.b	obRoutine(a0),d0
0000B16C 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B170 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B174                            ; ===========================================================================
0000B174                            Crab_Index:
0000B174 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B176 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B178 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B17A 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B17C 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B17E                            
0000B17E =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B17E =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B17E =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B17E =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B17E =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B17E                            
0000B17E =00000030                  crab_timedelay:	equ $30
0000B17E =00000032                  crab_mode:	equ $32
0000B17E                            ; ===========================================================================
0000B17E                            
0000B17E                            Crab_Main:	; Routine 0
0000B17E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B184 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B18A 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B192 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B198 117C 0004 0001             		move.b	#4,obRender(a0)
0000B19E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B1A4 117C 0006 0020             		move.b	#6,obColType(a0)
0000B1AA 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B1B0 6100 0000                  		bsr.w	ObjectFall
0000B1B4 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B1BA 4A41                       		tst.w	d1
0000B1BC 6A00                       		bpl.s	@floornotfound
0000B1BE D368 000C                  		add.w	d1,obY(a0)
0000B1C2 1143 0026                  		move.b	d3,obAngle(a0)
0000B1C6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B1CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1D0                            
0000B1D0                            	@floornotfound:
0000B1D0 4E75                       		rts	
0000B1D2                            ; ===========================================================================
0000B1D2                            
0000B1D2                            Crab_Action:	; Routine 2
0000B1D2 7000                       		moveq	#0,d0
0000B1D4 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B1D8 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1DC 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1E0 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1E6 6100 0000                  		bsr.w	AnimateSprite
0000B1EA 6000 0000                  		bra.w	RememberState
0000B1EE                            ; ===========================================================================
0000B1EE 0000                       @index:		dc.w @waittofire-@index
0000B1F0 0000                       		dc.w @walkonfloor-@index
0000B1F2                            ; ===========================================================================
0000B1F2                            
0000B1F2                            @waittofire:
0000B1F2 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1F6 6A00                       		bpl.s	@dontmove
0000B1F8 4A28 0001                  		tst.b	obRender(a0)
0000B1FC 6A00                       		bpl.s	@movecrab
0000B1FE 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B204 6600                       		bne.s	@fire
0000B206                            
0000B206                            	@movecrab:
0000B206 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B20A 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B210 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B216 6100 0000                  		bsr.w	Crab_SetAni
0000B21A 5600                       		addq.b	#3,d0
0000B21C 1140 001C                  		move.b	d0,obAnim(a0)
0000B220 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B226 6600                       		bne.s	@noflip
0000B228 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B22C                            
0000B22C                            	@dontmove:
0000B22C                            	@noflip:
0000B22C 4E75                       		rts	
0000B22E                            ; ===========================================================================
0000B22E                            
0000B22E                            @fire:
0000B22E 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B234 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B23A 6100 0000                  		bsr.w	FindFreeObj
0000B23E 6600                       		bne.s	@failleft
0000B240 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B244 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B24A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B250 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B256 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B25C 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B262                            
0000B262                            	@failleft:
0000B262 6100 0000                  		bsr.w	FindFreeObj
0000B266 6600                       		bne.s	@failright
0000B268 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B26C 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B272 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B278 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B27E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B284 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B28A                            
0000B28A                            	@failright:
0000B28A 4E75                       		rts	
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            @walkonfloor:
0000B28C 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B290 6B00                       		bmi.s	loc_966E
0000B292 6100 0000                  		bsr.w	SpeedToPos
0000B296 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B29C 6600                       		bne.s	loc_9654
0000B29E 3628 0008                  		move.w	obX(a0),d3
0000B2A2 0643 0010                  		addi.w	#$10,d3
0000B2A6 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2AC 6700                       		beq.s	loc_9640
0000B2AE 0443 0020                  		subi.w	#$20,d3
0000B2B2                            
0000B2B2                            loc_9640:
0000B2B2 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B2B8 0C41 FFF8                  		cmpi.w	#-8,d1
0000B2BC 6D00                       		blt.s	loc_966E
0000B2BE 0C41 000C                  		cmpi.w	#$C,d1
0000B2C2 6C00                       		bge.s	loc_966E
0000B2C4 4E75                       		rts	
0000B2C6                            ; ===========================================================================
0000B2C6                            
0000B2C6                            loc_9654:
0000B2C6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B2CC D368 000C                  		add.w	d1,obY(a0)
0000B2D0 1143 0026                  		move.b	d3,obAngle(a0)
0000B2D4 6100 0000                  		bsr.w	Crab_SetAni
0000B2D8 5600                       		addq.b	#3,d0
0000B2DA 1140 001C                  		move.b	d0,obAnim(a0)
0000B2DE 4E75                       		rts	
0000B2E0                            ; ===========================================================================
0000B2E0                            
0000B2E0                            loc_966E:
0000B2E0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2E4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2EA 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2F0 6100 0000                  		bsr.w	Crab_SetAni
0000B2F4 1140 001C                  		move.b	d0,obAnim(a0)
0000B2F8 4E75                       		rts	
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2FA                            ; ---------------------------------------------------------------------------
0000B2FA                            
0000B2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2FA                            
0000B2FA                            
0000B2FA                            Crab_SetAni:
0000B2FA 7000                       		moveq	#0,d0
0000B2FC 1628 0026                  		move.b	obAngle(a0),d3
0000B300 6B00                       		bmi.s	loc_96A4
0000B302 0C03 0006                  		cmpi.b	#6,d3
0000B306 6500                       		bcs.s	locret_96A2
0000B308 7001                       		moveq	#1,d0
0000B30A 0828 0000 0022             		btst	#0,obStatus(a0)
0000B310 6600                       		bne.s	locret_96A2
0000B312 7002                       		moveq	#2,d0
0000B314                            
0000B314                            locret_96A2:
0000B314 4E75                       		rts	
0000B316                            ; ===========================================================================
0000B316                            
0000B316                            loc_96A4:
0000B316 0C03 00FA                  		cmpi.b	#-6,d3
0000B31A 6200                       		bhi.s	locret_96B6
0000B31C 7002                       		moveq	#2,d0
0000B31E 0828 0000 0022             		btst	#0,obStatus(a0)
0000B324 6600                       		bne.s	locret_96B6
0000B326 7001                       		moveq	#1,d0
0000B328                            
0000B328                            locret_96B6:
0000B328 4E75                       		rts	
0000B32A                            ; End of function Crab_SetAni
0000B32A                            
0000B32A                            ; ===========================================================================
0000B32A                            
0000B32A                            Crab_Delete:	; Routine 4
0000B32A 6100 0000                  		bsr.w	DeleteObject
0000B32E 4E75                       		rts	
0000B330                            ; ===========================================================================
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            ; Sub-object - missile that the	Crabmeat throws
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            
0000B330                            Crab_BallMain:	; Routine 6
0000B330 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B334 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B33C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B342 117C 0004 0001             		move.b	#4,obRender(a0)
0000B348 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B34E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B354 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B35A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B360 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B366                            
0000B366                            Crab_BallMove:	; Routine 8
0000B366 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B36C 6100 0000                  		bsr.w	AnimateSprite
0000B370 6100 0000                  		bsr.w	ObjectFall
0000B374 6100 0000                  		bsr.w	DisplaySprite
0000B378 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B37C 0640 00E0                  		addi.w	#$E0,d0
0000B380 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B384 6500                       		bcs.s	@delete		; if yes, branch
0000B386 4E75                       		rts	
0000B388                            
0000B388                            	@delete:
0000B388 6000 0000                  		bra.w	DeleteObject
0000B388 6000 0000                  		bra.w	DeleteObject
0000B38C                            		include	"_anim\Crabmeat.asm"
0000B38C                            ; ---------------------------------------------------------------------------
0000B38C                            ; Animation script - Crabmeat enemy
0000B38C                            ; ---------------------------------------------------------------------------
0000B38C 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B392 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B398 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B39C 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B3A0 00                         		even
0000B3A0 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B3A4 00                         		even
0000B3A4 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B3A8 00                         		even
0000B3A8 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B3AE 00                         		even
0000B3AE 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B3B4 00                         		even
0000B3B4 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B3BA 00                         		even
0000B3BA 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B3BE 00                         		even
0000B3BE 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B3C2                            		even
0000B3C2                            		even
0000B3C2                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B3C2                            ; ---------------------------------------------------------------------------
0000B3C2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B3C2                            ; ---------------------------------------------------------------------------
0000B3C2                            Map_Crab_internal:
0000B3C2 0000                       		dc.w @stand-Map_Crab_internal
0000B3C4 0000                       		dc.w @walk-Map_Crab_internal
0000B3C6 0000                       		dc.w @slope1-Map_Crab_internal
0000B3C8 0000                       		dc.w @slope2-Map_Crab_internal
0000B3CA 0000                       		dc.w @firing-Map_Crab_internal
0000B3CC 0000                       		dc.w @ball1-Map_Crab_internal
0000B3CE 0000                       		dc.w @ball2-Map_Crab_internal
0000B3D0 04                         @stand:		dc.b 4
0000B3D1 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B3D6 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3DB 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3E0 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3E5 04                         @walk:		dc.b 4
0000B3E6 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3EB F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3F0 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3F5 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3FA 04                         @slope1:	dc.b 4
0000B3FB EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B400 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B405 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B40A FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B40F 04                         @slope2:	dc.b 4
0000B410 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B415 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B41A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B41F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B424 06                         @firing:	dc.b 6
0000B425 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B42A F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B42F F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B434 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B439 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B43E 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B443 01                         @ball1:		dc.b 1
0000B444 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B449 01                         @ball2:		dc.b 1
0000B44A F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B450 00                         		even
0000B450 00                         		even
0000B450                            		include	"_incObj\06 Mozzietron.asm"
0000B450                            ; ===========================================================================
0000B450                            ; ---------------------------------------------------------------------------
0000B450                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B450                            ; ---------------------------------------------------------------------------
0000B450                            
0000B450                            Mozzietron:					; XREF: Obj_Index
0000B450 7000                       		moveq	#0,d0
0000B452 1028 0024                  		move.b	$24(a0),d0
0000B456 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B45A 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B45E                            ; ===========================================================================
0000B45E 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B460 0000                       		dc.w MozAction-MozIndex
0000B462 0000                       		dc.w MozDelete-MozIndex
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            MozMain:				; XREF: MozIndex
0000B464 5428 0024                  		addq.b	#2,$24(a0)
0000B468 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B470 317C 0444 0002             		move.w	#$444,2(a0)
0000B476 117C 0004 0001             		move.b	#4,1(a0)
0000B47C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B482 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B488 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B48E                            MozAction:				; XREF: MozIndex
0000B48E 7000                       		moveq	#0,d0
0000B490 1028 0025                  		move.b	$25(a0),d0
0000B494 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B498 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B49C 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B4A2 6100 0000                  		bsr.w	AnimateSprite
0000B4A6 6000 0000                  		bra.w	RememberState
0000B4AA                            ; ===========================================================================
0000B4AA 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B4AC 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B4AE 0000                       		dc.w MozPinned-MozIndex2
0000B4B0                            ; ===========================================================================
0000B4B0                            
0000B4B0                            MozMove:				; XREF: MozIndex2
0000B4B0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4B4 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B4B6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B4BC 6600                       		bne.s	MozFire	; if yes, branch
0000B4BE 5428 0025                  		addq.b	#2,$25(a0)
0000B4C2 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B4C8 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B4CE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B4D4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4DA 6600                       		bne.s	locret_986C	; if not, branch
0000B4DC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4E0                            
0000B4E0                            locret_986C:
0000B4E0 4E75                       		rts	
0000B4E2                            ; ===========================================================================
0000B4E2                            
0000B4E2                            MozFire:				; XREF: MozMove
0000B4E2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4E8 6100 0000                  		bsr.w	ObjectFall
0000B4EC 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4F2 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4F4 6A00                       		bpl.s   @return ; if yes, branch 
0000B4F6 303C 00B6                  		move.w    #$B6,d0
0000B4FA 4EB9 0000 1254             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B500 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B506 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B50A 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B50E 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B512                            		@return:
0000B512 4E75                       	    		rts
0000B514                            		
0000B514                            
0000B514                            ; ===========================================================================
0000B514                            
0000B514                            MozPinned:
0000B514 4E75                               rts
0000B516                                    
0000B516                            ; ===========================================================================
0000B516                            
0000B516                            MozChkDel:				; XREF: Obj55_DropFly
0000B516 4A28 0001                  		tst.b	1(a0)
0000B51A 6A00 0000                  		bpl.w	DeleteObject
0000B51E 4E75                       		rts	
0000B520                            ; ===========================================================================
0000B520                            
0000B520                            MozChkNrSonic:			; XREF: MozIndex2
0000B520                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B520 6B00                       		bmi.s	MozChgDir
0000B522 6100 0000                  		bsr.w	SpeedToPos
0000B526 4A28 0034                  		tst.b	$34(a0)
0000B52A 6600                       		bne.s	locret_992A
0000B52C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B530 9068 0008                  		sub.w	8(a0),d0
0000B534 6A00                       		bpl.s	MozSetNrSonic
0000B536 4440                       		neg.w	d0
0000B538                            
0000B538                            MozSetNrSonic:
0000B538 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B53C 6400                       		bcc.s	locret_992A	; if not, branch
0000B53E 4A28 0001                  		tst.b	1(a0)
0000B542 6A00                       		bpl.s	locret_992A
0000B544 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B54A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B550 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B556 6000                       		bra.s	MozStop
0000B558                            ; ===========================================================================
0000B558                            
0000B558                            MozChgDir:				; XREF: MozChkNrSonic
0000B558 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B55E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B564 317C 003B 0032             		move.w	#59,$32(a0)
0000B56A                            
0000B56A                            MozStop:				; XREF: MozSetNrSonic
0000B56A 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B56E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B574 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B57A                            
0000B57A                            locret_992A:
0000B57A 4E75                       		rts	
0000B57C                            ; ===========================================================================
0000B57C                            
0000B57C                            MozDelete:				; XREF: MozIndex
0000B57C 6100 0000                  		bsr.w	DeleteObject
0000B580 4E75                       		rts	
0000B580 4E75                       		rts	
0000B582                            		include	"_incObj\22 Buzz Bomber.asm"
0000B582                            ; ===========================================================================
0000B582                            ; ---------------------------------------------------------------------------
0000B582                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B582                            ; ---------------------------------------------------------------------------
0000B582                            
0000B582                            BuzzBomber:
0000B582 7000                       		moveq	#0,d0
0000B584 1028 0024                  		move.b	obRoutine(a0),d0
0000B588 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B58C 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B590                            ; ===========================================================================
0000B590 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B592 0000                       		dc.w Buzz_Action-Buzz_Index
0000B594 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B596                            
0000B596 =00000032                  buzz_timedelay:	equ $32
0000B596 =00000034                  buzz_buzzstatus:	equ $34
0000B596 =0000003C                  buzz_parent:	equ $3C
0000B596                            ; ===========================================================================
0000B596                            
0000B596                            Buzz_Main:	; Routine 0
0000B596 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B59A 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B5A2 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B5A8 117C 0004 0001             		move.b	#4,obRender(a0)
0000B5AE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B5B4 117C 0008 0020             		move.b	#8,obColType(a0)
0000B5BA 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B5C0                            
0000B5C0                            Buzz_Action:	; Routine 2
0000B5C0 7000                       		moveq	#0,d0
0000B5C2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B5C6 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B5CA 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B5CE 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B5D4 6100 0000                  		bsr.w	AnimateSprite
0000B5D8 6000 0000                  		bra.w	RememberState
0000B5DC                            ; ===========================================================================
0000B5DC 0000                       @index:		dc.w @move-@index
0000B5DE 0000                       		dc.w @chknearsonic-@index
0000B5E0                            ; ===========================================================================
0000B5E0                            
0000B5E0                            @move:
0000B5E0 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5E4 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5E6 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5EC 6600                       		bne.s	@fire		; if yes, branch
0000B5EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5F2 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5F8 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B5FE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B604 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B60A 6600                       		bne.s	@noflip		; if not, branch
0000B60C 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B610                            
0000B610                            	@noflip:
0000B610 4E75                       		rts	
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            	@fire:
0000B612 6100 0000                  		bsr.w	FindFreeObj
0000B616 6600                       		bne.s	@fail
0000B618 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B61C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B622 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B628 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B62E 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B634 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B63A 303C 0018                  		move.w	#$18,d0
0000B63E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B644 6600                       		bne.s	@noflip2	; if not, branch
0000B646 4440                       		neg.w	d0
0000B648 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B64C                            
0000B64C                            	@noflip2:
0000B64C D169 0008                  		add.w	d0,obX(a1)
0000B650 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B656 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B65C 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B660 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B666 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B66C 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B672                            
0000B672                            	@fail:
0000B672 4E75                       		rts	
0000B674                            ; ===========================================================================
0000B674                            
0000B674                            @chknearsonic:
0000B674 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B678 6B00                       		bmi.s	@chgdirection
0000B67A 6100 0000                  		bsr.w	SpeedToPos
0000B67E 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B682 6600                       		bne.s	@keepgoing
0000B684 3038 D008                  		move.w	(v_player+obX).w,d0
0000B688 9068 0008                  		sub.w	obX(a0),d0
0000B68C 6A00                       		bpl.s	@isleft
0000B68E 4440                       		neg.w	d0
0000B690                            
0000B690                            	@isleft:
0000B690 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B694 6400                       		bcc.s	@keepgoing	; if not, branch
0000B696 4A28 0001                  		tst.b	obRender(a0)
0000B69A 6A00                       		bpl.s	@keepgoing
0000B69C 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B6A2 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B6A8 6000                       		bra.s	@stop
0000B6AA                            ; ===========================================================================
0000B6AA                            
0000B6AA                            	@chgdirection:
0000B6AA 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B6B0 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B6B6 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B6BC                            
0000B6BC                            	@stop:
0000B6BC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B6C0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B6C6 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B6CC                            
0000B6CC                            @keepgoing:
0000B6CC 4E75                       		rts	
0000B6CE                            ; ===========================================================================
0000B6CE                            
0000B6CE                            Buzz_Delete:	; Routine 4
0000B6CE 6100 0000                  		bsr.w	DeleteObject
0000B6D2 4E75                       		rts	
0000B6D2 4E75                       		rts	
0000B6D4                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            ; Object 23 - missile that Buzz	Bomber throws
0000B6D4                            ; ---------------------------------------------------------------------------
0000B6D4                            
0000B6D4                            Missile:
0000B6D4 7000                       		moveq	#0,d0
0000B6D6 1028 0024                  		move.b	obRoutine(a0),d0
0000B6DA 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6DE 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6E2                            ; ===========================================================================
0000B6E2 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6E4 0000                       		dc.w Msl_Animate-Msl_Index
0000B6E6 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6E8 0000                       		dc.w Msl_Delete-Msl_Index
0000B6EA 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6EC                            
0000B6EC =0000003C                  msl_parent:	equ $3C
0000B6EC                            ; ===========================================================================
0000B6EC                            
0000B6EC                            Msl_Main:	; Routine 0
0000B6EC 5368 0032                  		subq.w	#1,$32(a0)
0000B6F0 6A00                       		bpl.s	Msl_ChkCancel
0000B6F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6F6 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B6FE 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B704 117C 0004 0001             		move.b	#4,obRender(a0)
0000B70A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B710 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B716 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B71C 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B720 6700                       		beq.s	Msl_Animate	; if not, branch
0000B722                            
0000B722 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B728 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B72E 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B734 6000                       		bra.s	Msl_Animate2
0000B736                            ; ===========================================================================
0000B736                            
0000B736                            Msl_Animate:	; Routine 2
0000B736 6100                       		bsr.s	Msl_ChkCancel
0000B738 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B73E 6100 0000                  		bsr.w	AnimateSprite
0000B742 6000 0000                  		bra.w	DisplaySprite
0000B746                            
0000B746                            ; ---------------------------------------------------------------------------
0000B746                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B746                            ; destroyed, and if it has, then cancel	the missile
0000B746                            ; ---------------------------------------------------------------------------
0000B746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B746                            
0000B746                            
0000B746                            Msl_ChkCancel:
0000B746 2268 003C                  		movea.l	msl_parent(a0),a1
0000B74A 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B74E 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B750 4E75                       		rts	
0000B752                            ; End of function Msl_ChkCancel
0000B752                            
0000B752                            ; ===========================================================================
0000B752                            
0000B752                            Msl_FromBuzz:	; Routine 4
0000B752 0828 0007 0022             		btst	#7,obStatus(a0)
0000B758 6600                       		bne.s	@explode
0000B75A 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B760 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B766 6100 0000                  		bsr.w	SpeedToPos
0000B76A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B770 6100 0000                  		bsr.w	AnimateSprite
0000B774 6100 0000                  		bsr.w	DisplaySprite
0000B778 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B77C 0640 00E0                  		addi.w	#$E0,d0
0000B780 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B784 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B786 4E75                       		rts	
0000B788                            ; ===========================================================================
0000B788                            
0000B788                            	@explode:
0000B788 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B78C 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B792 6000 F1D8                  		bra.w	MissileDissolve
0000B796                            ; ===========================================================================
0000B796                            
0000B796                            Msl_Delete:	; Routine 6
0000B796 6100 0000                  		bsr.w	DeleteObject
0000B79A 4E75                       		rts	
0000B79C                            ; ===========================================================================
0000B79C                            
0000B79C                            Msl_FromNewt:	; Routine 8
0000B79C 4A28 0001                  		tst.b	obRender(a0)
0000B7A0 6AF4                       		bpl.s	Msl_Delete
0000B7A2 6100 0000                  		bsr.w	SpeedToPos
0000B7A6                            
0000B7A6                            Msl_Animate2:
0000B7A6 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B7AC 6100 0000                  		bsr.w	AnimateSprite
0000B7B0 6100 0000                  		bsr.w	DisplaySprite
0000B7B4 4E75                       		rts	
0000B7B4 4E75                       		rts	
0000B7B6                            		include	"_anim\Mozzietron.asm"
0000B7B6                            ; ---------------------------------------------------------------------------
0000B7B6                            ; Animation script - Buzz Bomber enemy
0000B7B6                            ; ---------------------------------------------------------------------------
0000B7B6 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B7B8 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B7BA 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B7BC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B7C0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B7C4 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B7CC 00                         		even
0000B7CC 00                         		even
0000B7CC                            		include	"_anim\Buzz Bomber.asm"
0000B7CC                            ; ---------------------------------------------------------------------------
0000B7CC                            ; Animation script - Buzz Bomber enemy
0000B7CC                            ; ---------------------------------------------------------------------------
0000B7CC 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B7CE 0000                       		dc.w @fly2-Ani_Buzz
0000B7D0 0000                       		dc.w @fires-Ani_Buzz
0000B7D2 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B7D6 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7DA 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7DE                            		even
0000B7DE                            		even
0000B7DE                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            ; Animation script - missile that Buzz Bomber throws
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7E0 0000                       		dc.w @missile-Ani_Missile
0000B7E2 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7E6 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7EA                            		even
0000B7EA                            		even
0000B7EA                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7EA                            ; --------------------------------------------------------------------------------
0000B7EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7EA                            ; --------------------------------------------------------------------------------
0000B7EA                            
0000B7EA                            SME_qvHIs:	
0000B7EA 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7EE 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7F2 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7F6 02                         SME_qvHIs_C:	dc.b 2	
0000B7F7 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B7FC ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B801 01                         SME_qvHIs_17:	dc.b 1	
0000B802 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B807 02                         SME_qvHIs_1D:	dc.b 2	
0000B808 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B80D F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B812 03                         SME_qvHIs_28:	dc.b 3	
0000B813 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B818 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B81D FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B822 04                         SME_qvHIs_38:	dc.b 4	
0000B823 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B828 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B82D F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B832 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B837 04                         SME_qvHIs_4D:	dc.b 4	
0000B838 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B83D F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B842 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B847 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B84C                            		even
0000B84C                            		even
0000B84C                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B84C                            ; --------------------------------------------------------------------------------
0000B84C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B84C                            ; --------------------------------------------------------------------------------
0000B84C                            
0000B84C                            SME_yccqJ:	
0000B84C 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B850 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B854 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B858 06                         SME_yccqJ_C:	dc.b 6	
0000B859 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B85E F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B863 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B868 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B86D EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B872 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B877 06                         SME_yccqJ_2B:	dc.b 6	
0000B878 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B87D F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B882 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B887 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B88C F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B891 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B896 06                         SME_yccqJ_4A:	dc.b 6	
0000B897 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B89C F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8A1 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8A6 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8AB EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B8B0 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B8B5 06                         SME_yccqJ_69:	dc.b 6	
0000B8B6 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B8BB F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8C0 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8C5 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8CA F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B8CF F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B8D4 07                         SME_yccqJ_88:	dc.b 7	
0000B8D5 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8DA 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8DF 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8E4 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8E9 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8EE 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8F3 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8F8 04                         SME_yccqJ_AC:	dc.b 4	
0000B8F9 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8FE 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B903 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B908 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B90E 00                         		even
0000B90E 00                         		even
0000B90E                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B90E                            ; ---------------------------------------------------------------------------
0000B90E                            ; Sprite mappings - missile that Buzz Bomber throws
0000B90E                            ; ---------------------------------------------------------------------------
0000B90E                            Map_Missile_internal:
0000B90E 0000                       		dc.w @Flare1-Map_Missile_internal
0000B910 0000                       		dc.w @Flare2-Map_Missile_internal
0000B912 0000                       		dc.w @Ball1-Map_Missile_internal
0000B914 0000                       		dc.w @Ball2-Map_Missile_internal
0000B916 01                         @Flare1:	dc.b 1
0000B917 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B91C 01                         @Flare2:	dc.b 1
0000B91D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B922 01                         @Ball1:		dc.b 1
0000B923 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B928 01                         @Ball2:		dc.b 1
0000B929 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B92E                            		even
0000B92E                            		even
0000B92E                            
0000B92E                            		include	"_incObj\25 & 37 Rings.asm"
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            ; Object 25 - rings
0000B92E                            ; ---------------------------------------------------------------------------
0000B92E                            
0000B92E                            Rings:
0000B92E 7000                       		moveq	#0,d0
0000B930 1028 0024                  		move.b	obRoutine(a0),d0
0000B934 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B938 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B93C                            ; ===========================================================================
0000B93C                            Ring_Index:
0000B93C 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B93E 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B940 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B942 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B944 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B946 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B948 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B94A 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B94C 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B94E                            
0000B94E =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B94E =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B94E =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B94E =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B94E =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B94E =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B94E =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B94E =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B94E =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E                            ; Distances between rings (format: horizontal, vertical)
0000B94E                            ; ---------------------------------------------------------------------------
0000B94E 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B950 1800                       		dc.b $18, 0		; horizontal normal
0000B952 2000                       		dc.b $20, 0		; horizontal wide
0000B954 0010                       		dc.b 0,	$10		; vertical tight
0000B956 0018                       		dc.b 0,	$18		; vertical normal
0000B958 0020                       		dc.b 0,	$20		; vertical wide
0000B95A 1010                       		dc.b $10, $10		; diagonal
0000B95C 1818                       		dc.b $18, $18
0000B95E 2020                       		dc.b $20, $20
0000B960 F010                       		dc.b $F0, $10
0000B962 E818                       		dc.b $E8, $18
0000B964 E020                       		dc.b $E0, $20
0000B966 1008                       		dc.b $10, 8
0000B968 1810                       		dc.b $18, $10
0000B96A F008                       		dc.b $F0, 8
0000B96C E810                       		dc.b $E8, $10
0000B96E                            ; ===========================================================================
0000B96E                            
0000B96E                            Ring_Main:	; Routine 0
0000B96E 45F8 FC00                  		lea	(v_objstate).w,a2
0000B972 7000                       		moveq	#0,d0
0000B974 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B978 45F2 0002                  		lea	2(a2,d0.w),a2
0000B97C 1812                       		move.b	(a2),d4
0000B97E 1228 0028                  		move.b	obSubtype(a0),d1
0000B982 1001                       		move.b	d1,d0
0000B984 0241 0007                  		andi.w	#7,d1
0000B988 0C41 0007                  		cmpi.w	#7,d1
0000B98C 6600                       		bne.s	loc_9B80
0000B98E 7206                       		moveq	#6,d1
0000B990                            
0000B990                            	loc_9B80:
0000B990 4841                       		swap	d1
0000B992 323C 0000                  		move.w	#0,d1
0000B996 E808                       		lsr.b	#4,d0
0000B998 D040                       		add.w	d0,d0
0000B99A 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B99E 4885                       		ext.w	d5
0000B9A0 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B9A4 4886                       		ext.w	d6
0000B9A6 2248                       		movea.l	a0,a1
0000B9A8 3428 0008                  		move.w	obX(a0),d2
0000B9AC 3628 000C                  		move.w	obY(a0),d3
0000B9B0 E20C                       		lsr.b	#1,d4
0000B9B2 6500                       		bcs.s	loc_9C02
0000B9B4 0892 0007                  		bclr	#7,(a2)
0000B9B8 6000                       		bra.s	loc_9BBA
0000B9BA                            ; ===========================================================================
0000B9BA                            
0000B9BA                            Ring_MakeRings:
0000B9BA 4841                       		swap	d1
0000B9BC E20C                       		lsr.b	#1,d4
0000B9BE 6500                       		bcs.s	loc_9C02
0000B9C0 0892 0007                  		bclr	#7,(a2)
0000B9C4 6100 0000                  		bsr.w	FindFreeObj
0000B9C8 6600                       		bne.s	loc_9C0E
0000B9CA                            
0000B9CA                            loc_9BBA:
0000B9CA 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B9CE 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9D2 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B9D6 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9DC 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9E0 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9E8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9EE 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9F4 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9FA 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BA00 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BA06 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000BA0C 1341 0034                  		move.b	d1,$34(a1)
0000BA10                            
0000BA10                            loc_9C02:
0000BA10 5241                       		addq.w	#1,d1
0000BA12 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BA14 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BA16 4841                       		swap	d1
0000BA18 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BA1C                            
0000BA1C                            loc_9C0E:
0000BA1C 0812 0000                  		btst	#0,(a2)
0000BA20 6600 0000                  		bne.w	DeleteObject
0000BA24                            
0000BA24                            Ring_Animate:	; Routine 2
0000BA24 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA28 6700                       		beq.s	@skip
0000BA2A 4A28 0001                  		tst.b	obRender(a0)
0000BA2E 6A00                       		bpl.s	@skip
0000BA30                            		
0000BA30 43F8 D000                  		lea (v_player).w,a1
0000BA34                            		
0000BA34 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA38 9068 0008                  		sub.w	obX(a0),d0
0000BA3C 6A00                       		bpl.s	@a1
0000BA3E 4440                       		neg.w	d0
0000BA40                            		
0000BA40                            	@a1:
0000BA40 0C40 0040                  		cmpi.w	#$40,d0
0000BA44 6200                       		bhi.s	@skip
0000BA46                            		
0000BA46 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA4A 9068 000C                  		sub.w	obY(a0),d0
0000BA4E 6A00                       		bpl.s	@a2
0000BA50 4440                       		neg.w	d0
0000BA52                            		
0000BA52                            	@a2:
0000BA52 0C40 0040                  		cmpi.w	#$40,d0
0000BA56 6200                       		bhi.s	@skip
0000BA58                            		
0000BA58 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA5E 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA62 7000                       		moveq	#0,d0
0000BA64 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA68 1228 0034                  		move.b	$34(a0),d1
0000BA6C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA70                            		
0000BA70                            	@skip:
0000BA70 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA76 6100 0000                  		bsr.w	DisplaySprite
0000BA96 4E75                       		rts	
0000BA98                            ; ===========================================================================
0000BA98                            
0000BA98                            Ring_Collect:	; Routine 4
0000BA98 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA9C 117C 0000 0020             		move.b	#0,obColType(a0)
0000BAA2 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BAA8 6100 0000                  		bsr.w	CollectRing
0000BAAC 45F8 FC00                  		lea	(v_objstate).w,a2
0000BAB0 7000                       		moveq	#0,d0
0000BAB2 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BAB6 1228 0034                  		move.b	$34(a0),d1
0000BABA 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BABE                            
0000BABE                            Ring_Sparkle:	; Routine 6
0000BABE 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BAC4 6100 0000                  		bsr.w	AnimateSprite
0000BAC8 6000 0000                  		bra.w	DisplaySprite
0000BACC                            ; ===========================================================================
0000BACC                            
0000BACC                            Ring_Delete:	; Routine 8
0000BACC 6000 0000                  		bra.w	DeleteObject
0000BAD0                            
0000BAD0                            Ring_Attract:	; Routine $A
0000BAD0 4A38 F5C9                  		tst.b	(v_gshield).w
0000BAD4 6600                       		bne.s	@skip
0000BAD6 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BADA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAE0 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BAE6 6000                       		bra.s	@display
0000BAE8                            		
0000BAE8                            	@skip:
0000BAE8 323C 0030                  		move.w	#$30,d1	; horizontal
0000BAEC 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAF0 B068 0008                  		cmp.w	obX(a0),d0
0000BAF4 6400                       		bcc.s	@a1
0000BAF6 4441                       		neg.w	d1
0000BAF8 4A68 0010                  		tst.w	obVelX(a0)
0000BAFC 6B00                       		bmi.s	@a2
0000BAFE D241                       		add.w	d1,d1
0000BB00 D241                       		add.w	d1,d1
0000BB02 6000                       		bra.s	@a2
0000BB04                            
0000BB04                            	@a1:
0000BB04 4A68 0010                  		tst.w	obVelX(a0)
0000BB08 6A00                       		bpl.s	@a2
0000BB0A D241                       		add.w	d1,d1
0000BB0C D241                       		add.w	d1,d1
0000BB0E                            
0000BB0E                            	@a2:
0000BB0E D368 0010                  		add.w	d1,obVelX(a0)
0000BB12 323C 0030                  		move.w	#$30,d1	; vertical
0000BB16 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BB1A B068 000C                  		cmp.w	obY(a0),d0
0000BB1E 6400                       		bcc.s	@a3
0000BB20 4441                       		neg.w	d1
0000BB22 4A68 0012                  		tst.w	obVelY(a0)
0000BB26 6B00                       		bmi.s	@a4
0000BB28 D241                       		add.w	d1,d1
0000BB2A D241                       		add.w	d1,d1
0000BB2C 6000                       		bra.s	@a4
0000BB2E                            
0000BB2E                            	@a3:
0000BB2E 4A68 0012                  		tst.w	obVelY(a0)
0000BB32 6A00                       		bpl.s	@a4
0000BB34 D241                       		add.w	d1,d1
0000BB36 D241                       		add.w	d1,d1
0000BB38                            
0000BB38                            	@a4:
0000BB38 D368 0012                  		add.w	d1,obVelY(a0)
0000BB3C 6100 0000                  		bsr.w	SpeedToPos
0000BB40                            		
0000BB40                            	@display:
0000BB40 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB46 6000 0000                  		bra.w	DisplaySprite
0000BB4A                            
0000BB4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB4A                            
0000BB4A                            
0000BB4A                            CollectRing:
0000BB4A 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB4E 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB54 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB58 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB5E 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB60 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB66 6700                       		beq.s	@got100
0000BB68 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB6E 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB70 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB76 6600                       		bne.s	@playsnd
0000BB78                            
0000BB78                            	@got100:
0000BB78 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB7C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB80 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB84                            		
0000BB84                            
0000BB84                            	@playsnd:
0000BB84 4EF9 0000 1254             		jmp	(PlaySound_Special).l
0000BB8A                            ; End of function CollectRing
0000BB8A                            
0000BB8A                            ; ===========================================================================
0000BB8A                            ; ---------------------------------------------------------------------------
0000BB8A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB8A                            ; ---------------------------------------------------------------------------
0000BB8A                            
0000BB8A                            RingLoss:
0000BB8A 7000                       		moveq	#0,d0
0000BB8C 1028 0024                  		move.b	obRoutine(a0),d0
0000BB90 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB94 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB98                            ; ===========================================================================
0000BB98 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB9A 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BB9C 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BB9E 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BBA0 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BBA2                            ; ===========================================================================
0000BBA2                            
0000BBA2                            RLoss_Count:	; Routine 0
0000BBA2 2248                       		movea.l	a0,a1
0000BBA4 7A00                       		moveq	#0,d5
0000BBA6 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BBAA 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BBB0 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BBB2 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BBB6 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BBBC 6700                               beq.s   @cont                       ; if not, branch
0000BBBE 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BBC4 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BBC6                            @cont:
0000BBC6 BA40                               cmp.w   d0,d5
0000BBC8 6500                               bcs.s   @belowmax
0000BBCA 3A00                               move.w  d0,d5
0000BBCC                            
0000BBCC                            @belowmax:
0000BBCC 5345                               subq.w  #1,d5
0000BBCE 383C 0288                          move.w  #$288,d4
0000BBD2 6000                       		bra.s	@makerings
0000BBD4                            ; ===========================================================================
0000BBD4                            
0000BBD4                            	@loop:
0000BBD4 6100 0000                  		bsr.w	FindFreeObj
0000BBD8 6600 0000                  		bne.w	@resetcounter
0000BBDC                            
0000BBDC                            @makerings:
0000BBDC 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBE0 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBE4 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBEA 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBF0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBF6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BBFC 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BC04 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BC0A 137C 0004 0001             		move.b	#4,obRender(a1)
0000BC10 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BC16 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BC1C 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC20 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BC22 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC26 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC2A 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BC2C E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BC2E E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BC30                            @skiphalvingvel:
0000BC30 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BC34 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BC38 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC3C                            
0000BC3C                            @resetcounter:
0000BC3C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC42 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC48 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC4E 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC50 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC54 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC62                            
0000BC62                            RLoss_Bounce:	; Routine 2
0000BC62 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC68 6100 0000                  		bsr.w	SpeedToPos
0000BC6C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC72 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC76 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC78 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC7C BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC80 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC82 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC88                            	@skipbounceslow:
0000BC88 6B00                       		bmi.s	@chkdel
0000BC8A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC8E D007                       		add.b	d7,d0
0000BC90 0200 0003                  		andi.b	#3,d0
0000BC94 6600                       		bne.s	@chkdel
0000BC96 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC9C 4A41                       		tst.w	d1
0000BC9E 6A00                       		bpl.s	@chkdel
0000BCA0 D368 000C                  		add.w	d1,obY(a0)
0000BCA4 3028 0012                  		move.w	obVelY(a0),d0
0000BCA8 E440                       		asr.w	#2,d0
0000BCAA 9168 0012                  		sub.w	d0,obVelY(a0)
0000BCAE 4468 0012                  		neg.w	obVelY(a0)
0000BCB2                            
0000BCB2                            	@chkdel:
0000BCB2 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BCB6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BCBA 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BCBE 0640 00E0                  		addi.w	#$E0,d0
0000BCC2 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BCC6 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BCCA 4A38 F5C9                  		tst.b	(v_gshield).w
0000BCCE 6700                       		beq.s	@skip
0000BCD0 4A28 0001                  		tst.b	obRender(a0)
0000BCD4 6A00                       		bpl.s	@skip
0000BCD6                            		
0000BCD6 43F8 D000                  		lea (v_player).w,a1
0000BCDA                            		
0000BCDA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCDE 9068 0008                  		sub.w	obX(a0),d0
0000BCE2 6A00                       		bpl.s	@a1
0000BCE4 4440                       		neg.w	d0
0000BCE6                            		
0000BCE6                            	@a1:
0000BCE6 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCEA 6200                       		bhi.s	@skip
0000BCEC                            		
0000BCEC 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCF0 9068 000C                  		sub.w	obY(a0),d0
0000BCF4 6A00                       		bpl.s	@a2
0000BCF6 4440                       		neg.w	d0
0000BCF8                            		
0000BCF8                            	@a2:
0000BCF8 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCFC 6200                       		bhi.s	@skip
0000BCFE                            		
0000BCFE 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BD04 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BD08                            		
0000BD08                            	@skip:		
0000BD08 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BD0C D2FC 0080                          adda.w  #$80,a1
0000BD10 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD14 6400                               bcc.s   @cont
0000BD16 5451                               addq.w  #2,(a1)
0000BD18 D2D1                               adda.w  (a1),a1
0000BD1A 3288                               move.w  a0,(a1)
0000BD1C                            		
0000BD1C                            	@cont:
0000BD1C 4E75                               rts		
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            RLoss_Collect:	; Routine 4
0000BD1E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD22 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD28 6100 FE20                  		bsr.w	CollectRing
0000BD2C                            
0000BD2C                            RLoss_Sparkle:	; Routine 6
0000BD2C 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BD32 6100 0000                  		bsr.w	AnimateSprite
0000BD36 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD3A 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD3E 6400                               bcc.s   @cont
0000BD40 5451                               addq.w  #2,(a1)
0000BD42 D2D1                               adda.w  (a1),a1
0000BD44 3288                               move.w  a0,(a1)
0000BD46                            			
0000BD46                            	@cont:
0000BD46 4E75                               rts
0000BD48                            ; ===========================================================================
0000BD48                            
0000BD48                            RLoss_Delete:	; Routine 8
0000BD48 6000 0000                  		bra.w	DeleteObject
0000BD4C                            
0000BD4C                            ; ----------------------------------------------------------------------------------------------
0000BD4C                            ; Ring Spawn Array 
0000BD4C                            ; ----------------------------------------------------------------------------------------------
0000BD4C                            
0000BD4C FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD5C FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD6C FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD7C FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD8C FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BD9C FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BDAC FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BDBC FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BDCC                                            even
0000BDCC                            ; ===========================================================================
0000BDCC                            ; -------------------------------------------------------------------------------------
0000BDCC                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BDCC                            ; -------------------------------------------------------------------------------------
0000BDCC                            
0000BDCC                            SpillRingData_Water:
0000BDCC FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDDC FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDEC FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BDFC FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BE0C FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BE1C FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BE2C FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE3C FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE4C                                            even
0000BE4C                            ; ===========================================================================				
0000BE4C                            ; ===========================================================================				
0000BE4C                            		include	"_incObj\4B Giant Ring.asm"
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            ; Object 4B - giant ring for entry to special stage
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            
0000BE4C                            GiantRing:
0000BE4C 7000                       		moveq	#0,d0
0000BE4E 1028 0024                  		move.b	obRoutine(a0),d0
0000BE52 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE56 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE5A                            ; ===========================================================================
0000BE5A 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE5C 0000                       		dc.w GRing_Animate-GRing_Index
0000BE5E 0000                       		dc.w GRing_Collect-GRing_Index
0000BE60 0000                       		dc.w GRing_Delete-GRing_Index
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            GRing_Main:    ; Routine 0
0000BE62 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE6A 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE70 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE76 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE7C 4A28 0001                  		tst.b	obRender(a0)
0000BE80 6A00                       		bpl.s	GRing_Animate
0000BE82 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE88 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE8C 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE92 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE94                            
0000BE94 4E75                       		rts    
0000BE96                            ; ===========================================================================
0000BE96                            
0000BE96                            GRing_Okay:
0000BE96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE9A 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BEA0 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BEA6 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BEAC                            
0000BEAC                            GRing_Animate:	; Routine 2
0000BEAC 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BED0 6000 0000                  		bra.w	DisplaySprite
0000BED4                            ; ===========================================================================
0000BED4                            
0000BED4                            GRing_Collect:	; Routine 4
0000BED4 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BED8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BEDE 6100 0000                  		bsr.w	FindFreeObj
0000BEE2 6600 0000                  		bne.w	GRing_PlaySnd
0000BEE6 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEEA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEF0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEF6 2348 003C                  		move.l	a0,$3C(a1)
0000BEFA 3038 D008                  		move.w	(v_player+obX).w,d0
0000BEFE B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BF02 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BF04 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BF0A 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BF10 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BF16                            		
0000BF16                            GRing_PlaySnd:
0000BF20 608A                       		bra.s	GRing_Animate
0000BF22                            ; ===========================================================================
0000BF22                            
0000BF22                            GRing_Delete:	; Routine 6
0000BF22 6000 0000                  		bra.w	DeleteObject
0000BF22 6000 0000                  		bra.w	DeleteObject
0000BF26                            		include	"_incObj\7C Ring Flash.asm"
0000BF26                            ; ---------------------------------------------------------------------------
0000BF26                            ; Object 7C - flash effect when	you collect the	giant ring
0000BF26                            ; ---------------------------------------------------------------------------
0000BF26                            
0000BF26                            RingFlash:
0000BF26 7000                       		moveq	#0,d0
0000BF28 1028 0024                  		move.b	obRoutine(a0),d0
0000BF2C 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BF30 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BF34                            ; ===========================================================================
0000BF34 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BF36 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BF38 0000                       		dc.w Flash_Delete-Flash_Index
0000BF3A                            ; ===========================================================================
0000BF3A                            
0000BF3A                            Flash_Main:	; Routine 0
0000BF3A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF3E 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF46 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF4C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF52 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF58 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF5E 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF64                            
0000BF64                            Flash_ChkDel:	; Routine 2
0000BF64 6100                       		bsr.s	Flash_Collect
0000BF84 6000 0000                  		bra.w	DisplaySprite
0000BF88                            
0000BF88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF88                            
0000BF88                            
0000BF88                            Flash_Collect:
0000BF88 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF8C 6A00                       		bpl.s	locret_9F76
0000BF8E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF94 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF98 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BF9E 6400                       		bcc.s	Flash_End	; if yes, branch
0000BFA0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BFA6 6600                       		bne.s	locret_9F76	; if not, branch
0000BFA8 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BFAC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BFB2 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BFB8 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BFBE 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BFC2 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BFC6                            
0000BFC6                            locret_9F76:
0000BFC6 4E75                       		rts	
0000BFC8                            ; ===========================================================================
0000BFC8                            
0000BFC8                            Flash_End:
0000BFC8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFCC 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BFD2 588F                       		addq.l	#4,sp
0000BFD4 4E75                       		rts	
0000BFD6                            ; End of function Flash_Collect
0000BFD6                            
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            Flash_Delete:	; Routine 4
0000BFD6 6000 0000                  		bra.w	DeleteObject
0000BFD6 6000 0000                  		bra.w	DeleteObject
0000BFDA                            
0000BFDA                            		include	"_anim\Rings.asm"
0000BFDA                            ; ---------------------------------------------------------------------------
0000BFDA                            ; Animation script - ring
0000BFDA                            ; ---------------------------------------------------------------------------
0000BFDA 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFDC 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFE2                            		even
0000BFE2                            		even
0000BFE2                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFE2                            ; --------------------------------------------------------------------------------
0000BFE2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFE2                            ; --------------------------------------------------------------------------------
0000BFE2                            
0000BFE2                            SME_aSMQh:	
0000BFE2 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFE6 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFEA 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFEE 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFF2 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFF6 01                         SME_aSMQh_14:	dc.b 1	
0000BFF7 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BFFC 01                         SME_aSMQh_1A:	dc.b 1	
0000BFFD F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C002 01                         SME_aSMQh_20:	dc.b 1	
0000C003 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000C008 01                         SME_aSMQh_26:	dc.b 1	
0000C009 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C00E 01                         SME_aSMQh_2C:	dc.b 1	
0000C00F F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C014 01                         SME_aSMQh_32:	dc.b 1	
0000C015 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C01A 01                         SME_aSMQh_38:	dc.b 1	
0000C01B F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C020 01                         SME_aSMQh_3E:	dc.b 1	
0000C021 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C026 01                         SME_aSMQh_44:	dc.b 1	
0000C027 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C02C 01                         SME_aSMQh_4A:	dc.b 1	
0000C02D F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C032                            		even
0000C032                            		even
0000C032                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C032                            ; ---------------------------------------------------------------------------
0000C032                            ; Sprite mappings - giant ring
0000C032                            ; ---------------------------------------------------------------------------
0000C032                            Map_GRing_internal:
0000C032 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C034 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C036 0000                       		dc.w byte_A036-Map_GRing_internal
0000C038 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C03A 0A                         byte_9FDA:	dc.b $A
0000C03B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C040 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C045 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C04A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C04F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C054 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C059 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C05E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C063 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C068 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C06D 08                         byte_A00D:	dc.b 8
0000C06E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C073 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C078 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C07D F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C082 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C087 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C08C 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C091 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C096 04                         byte_A036:	dc.b 4
0000C097 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C09C E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C0A1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C0A6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C0AB 08                         byte_A04B:	dc.b 8
0000C0AC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C0B1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C0B6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C0BB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C0C0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C0C5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C0CA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C0CF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C0D4                            		even
0000C0D4                            		even
0000C0D4                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C0D4                            ; ---------------------------------------------------------------------------
0000C0D4                            ; Sprite mappings - flash effect when you collect the giant ring
0000C0D4                            ; ---------------------------------------------------------------------------
0000C0D4                            Map_Flash_internal:
0000C0D4 0000                       		dc.w byte_A084-Map_Flash_internal
0000C0D6 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C0D8 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0DA 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0DC 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0DE 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0E0 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0E2 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0E4 02                         byte_A084:	dc.b 2
0000C0E5 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0EA 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0EF 04                         byte_A08F:	dc.b 4
0000C0F0 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0F5 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0FA 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C0FF 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C104 04                         byte_A0A4:	dc.b 4
0000C105 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C10A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C10F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C114 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C119 04                         byte_A0B9:	dc.b 4
0000C11A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C11F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C124 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C129 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C12E 04                         byte_A0CE:	dc.b 4
0000C12F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C134 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C139 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C13E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C143 04                         byte_A0E3:	dc.b 4
0000C144 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C149 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C14E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C153 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C158 02                         byte_A0F8:	dc.b 2
0000C159 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C15E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C163 04                         byte_A103:	dc.b 4
0000C164 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C169 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C16E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C173 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C178                            		even
0000C178                            		even
0000C178                            		include	"_incObj\26 Monitor.asm"
0000C178                            ; ---------------------------------------------------------------------------
0000C178                            ; Object 26 - monitors
0000C178                            ; ---------------------------------------------------------------------------
0000C178                            
0000C178                            Monitor:
0000C178 7000                       		moveq	#0,d0
0000C17A 1028 0024                  		move.b	obRoutine(a0),d0
0000C17E 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C182 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C186                            ; ===========================================================================
0000C186 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C188 0000                       		dc.w Mon_Solid-Mon_Index
0000C18A 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C18C 0000                       		dc.w Mon_Animate-Mon_Index
0000C18E 0000                       		dc.w Mon_Display-Mon_Index
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            Mon_Main:	; Routine 0
0000C190 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C194 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C19A 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C1A0 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C1A8 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C1AE 117C 0004 0001             		move.b	#4,obRender(a0)
0000C1B4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C1BA 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C1C0 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1C4 7000                       		moveq	#0,d0
0000C1C6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1CA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C1D0 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C1D6 6700                       		beq.s	@notbroken	; if not, branch
0000C1D8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1DE 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1E4 4E75                       		rts	
0000C1E6                            ; ===========================================================================
0000C1E6                            
0000C1E6                            	@notbroken:
0000C1E6 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1EC 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1F2                            
0000C1F2                            Mon_Solid:	; Routine 2
0000C1F2 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1F6 6700                       		beq.s	@normal		; if not, branch
0000C1F8 5500                       		subq.b	#2,d0
0000C1FA 6600                       		bne.s	@fall
0000C1FC                            
0000C1FC                            		; 2nd Routine 2
0000C1FC 7200                       		moveq	#0,d1
0000C1FE 1228 0014                  		move.b	obActWid(a0),d1
0000C202 0641 000B                  		addi.w	#$B,d1
0000C206 6100 D000                  		bsr.w	ExitPlatform
0000C20A 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C210 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C214 4228 0025                  		clr.b	ob2ndRout(a0)
0000C218 6000 0000                  		bra.w	Mon_Animate
0000C21C                            ; ===========================================================================
0000C21C                            
0000C21C                            	@ontop:
0000C21C 363C 0010                  		move.w	#$10,d3
0000C220 3428 0008                  		move.w	obX(a0),d2
0000C224 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C228 6000 0000                  		bra.w	Mon_Animate
0000C22C                            ; ===========================================================================
0000C22C                            
0000C22C                            @fall:		; 2nd Routine 4
0000C22C 6100 0000                  		bsr.w	ObjectFall
0000C230 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C236 4A41                       		tst.w	d1
0000C238 6A00 0000                  		bpl.w	Mon_Animate
0000C23C D368 000C                  		add.w	d1,obY(a0)
0000C240 4268 0012                  		clr.w	obVelY(a0)
0000C244 4228 0025                  		clr.b	ob2ndRout(a0)
0000C248 6000 0000                  		bra.w	Mon_Animate
0000C24C                            ; ===========================================================================
0000C24C                            
0000C24C                            @normal:	; 2nd Routine 0
0000C24C 323C 001A                  		move.w	#$1A,d1
0000C250 343C 000F                  		move.w	#$F,d2
0000C254 6100 0000                  		bsr.w	Mon_SolidSides
0000C258 6700 0000                  		beq.w	loc_A25C
0000C25C 4A69 0012                  		tst.w	obVelY(a1)
0000C260 6B00                       		bmi.s	loc_A20A
0000C262 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C268 6700                       		beq.s	loc_A25C	; if yes, branch
0000C26A 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C270 6700                       		beq.s	loc_A25C	; if yes, branch
0000C272 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C278 6700                       		beq.s	loc_A25C	; if yes, branch
0000C27A                            
0000C27A                            loc_A20A:
0000C27A 4A41                       		tst.w	d1
0000C27C 6A00                       		bpl.s	loc_A220
0000C27E 9769 000C                  		sub.w	d3,obY(a1)
0000C282 6100 CE72                  		bsr.w	loc_74AE
0000C286 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C28C 6000 0000                  		bra.w	Mon_Animate
0000C290                            ; ===========================================================================
0000C290                            
0000C290                            loc_A220:
0000C290 4A40                       		tst.w	d0
0000C292 6700 0000                  		beq.w	loc_A246
0000C296 6B00                       		bmi.s	loc_A230
0000C298 4A69 0010                  		tst.w	obVelX(a1)
0000C29C 6B00                       		bmi.s	loc_A246
0000C29E 6000                       		bra.s	loc_A236
0000C2A0                            ; ===========================================================================
0000C2A0                            
0000C2A0                            loc_A230:
0000C2A0 4A69 0010                  		tst.w	obVelX(a1)
0000C2A4 6A00                       		bpl.s	loc_A246
0000C2A6                            
0000C2A6                            loc_A236:
0000C2A6 9169 0008                  		sub.w	d0,obX(a1)
0000C2AA 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C2B0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C2B6                            
0000C2B6                            loc_A246:
0000C2B6 0829 0001 0022             		btst	#1,obStatus(a1)
0000C2BC 6600                       		bne.s	loc_A26A
0000C2BE 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C2C4 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C2CA 6000                       		bra.s	Mon_Animate
0000C2CC                            ; ===========================================================================
0000C2CC                            
0000C2CC                            loc_A25C:
0000C2CC 0828 0005 0022             		btst	#5,obStatus(a0)
0000C2D2 6700                       		beq.s	Mon_Animate
0000C2D4 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2DA 6700                       		beq.s	loc_A26A	; if so, branch
0000C2DC 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2E2                            
0000C2E2                            loc_A26A:
0000C2E2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2E8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2EE                            
0000C2EE                            Mon_Animate:	; Routine 6
0000C2EE 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2F4 6100 0000                  		bsr.w	AnimateSprite
0000C2F8                            
0000C2F8                            Mon_Display:	; Routine 8
0000C2F8 6100 0000                  		bsr.w	DisplaySprite
0000C31A 4E75                       		rts	
0000C31C                            ; ===========================================================================
0000C31C                            
0000C31C                            Mon_BreakOpen:	; Routine 4
0000C31C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C320 117C 0000 0020             		move.b	#0,obColType(a0)
0000C326 6100 0000                  		bsr.w	FindFreeObj
0000C32A 6600                       		bne.s	Mon_Explode
0000C32C 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C330 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C336 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C33C 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C342                            
0000C342                            Mon_Explode:
0000C342 6100 0000                  		bsr.w	FindFreeObj
0000C346 6600                       		bne.s	@fail
0000C348 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C34C 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C350 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C356 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C35C                            
0000C35C                            	@fail:
0000C35C 45F8 FC00                  		lea	(v_objstate).w,a2
0000C360 7000                       		moveq	#0,d0
0000C362 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C366 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C36C 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C372 6000 0000                  		bra.w	DisplaySprite
0000C372 6000 0000                  		bra.w	DisplaySprite
0000C376                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C376                            ; ---------------------------------------------------------------------------
0000C376                            ; Object 2E - contents of monitors
0000C376                            ; ---------------------------------------------------------------------------
0000C376                            
0000C376                            PowerUp:
0000C376 7000                       		moveq	#0,d0
0000C378 1028 0024                  		move.b	obRoutine(a0),d0
0000C37C 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C380 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C384 6000 0000                  		bra.w	DisplaySprite
0000C388                            ; ===========================================================================
0000C388 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C38A 0000                       		dc.w Pow_Move-Pow_Index
0000C38C 0000                       		dc.w Pow_Delete-Pow_Index
0000C38E                            ; ===========================================================================
0000C38E                            
0000C38E                            Pow_Main:	; Routine 0
0000C38E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C392 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C398 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C39E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C3A4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C3AA 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C3B0 7000                       		moveq	#0,d0
0000C3B2 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C3B6 5400                       		addq.b	#2,d0
0000C3B8 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C3BC 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C3C2 D000                       		add.b	d0,d0
0000C3C4 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C3C8 5249                       		addq.w	#1,a1
0000C3CA 2149 0004                  		move.l	a1,obMap(a0)
0000C3CE                            
0000C3CE                            Pow_Move:	; Routine 2
0000C3CE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C3D2 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C3D6 6100 0000                  		bsr.w	SpeedToPos
0000C3DA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3E0 4E75                       		rts	
0000C3E2                            ; ===========================================================================
0000C3E2                            
0000C3E2                            Pow_Checks:
0000C3E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3E6 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3EC                            
0000C3EC                            Pow_ChkEggman:
0000C3EC 1028 001C                  		move.b	obAnim(a0),d0
0000C3F0 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3F4 6600                       		bne.s	Pow_ChkSonic
0000C3F6                            		
0000C3F6 4EF9 0000 0000             		jmp	Spik_Hurt
0000C3FC                            		
0000C3FC 4E75                       		rts
0000C3FE                            ; ===========================================================================
0000C3FE                            
0000C3FE                            Pow_ChkSonic:
0000C3FE 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C402 6600                       		bne.s	Pow_ChkShoes
0000C404                            
0000C404                            	ExtraLife:
0000C404 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C408 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C416                            
0000C416                            ; ===========================================================================
0000C416                            
0000C416                            Pow_ChkShoes:
0000C416 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C41A 6600                       		bne.s	Pow_ChkShield
0000C41C                            
0000C41C 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C422 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C428 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C42E 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C434 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C43A 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C43E 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C440 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C446 6300                       			bls.s	Pow_NoMus
0000C452                            ; ===========================================================================
0000C452                            
0000C452                            Pow_NoMus:
0000C452 4E75                       		rts	
0000C454                            ; ===========================================================================
0000C454                            
0000C454                            Pow_ChkShield:
0000C454 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C458 6600                       		bne.s	Pow_ChkInvinc
0000C45A                            
0000C45A 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C460 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C466 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C46C 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C472 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C482                            ; ===========================================================================
0000C482                            
0000C482                            Pow_ChkInvinc:
0000C482 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C486 6600                       		bne.s	Pow_ChkRings
0000C488                            
0000C488 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C48E 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C494 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C49A 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C4A0 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C4A6 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C4AC 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C4B2 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C4B8 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C4BE 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C4C4 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4C8 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C4CA 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4D0 6300                       			bls.s	Pow_NoMusic
0000C4DC                            ; ===========================================================================
0000C4DC                            
0000C4DC                            Pow_NoMusic:
0000C4DC 4E75                       		rts	
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            Pow_ChkRings:
0000C4DE 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4E2 6600                       		bne.s	Pow_ChkS
0000C4E4                            
0000C4E4 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4EA 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4F0 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4F6 6500                       		bcs.s	Pow_RingSound
0000C4F8 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4FE 6700 FF04                  		beq.w	ExtraLife
0000C502 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C508 6500                       		bcs.s	Pow_RingSound
0000C50A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C510 6700 FEF2                  		beq.w	ExtraLife
0000C514                            
0000C514                            	Pow_RingSound:
0000C51E                            ; ===========================================================================
0000C51E                            
0000C51E                            Pow_ChkS:
0000C51E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C522 6600                       		bne.s	Pow_ChkSRing
0000C524                            		
0000C524 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C52A 6700                       		beq.s	PowS2	; if yes, branch
0000C52C 0404 003B                  		subi.b	#$3B,d4
0000C530 7000                       		moveq	#0,d0
0000C532 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C538 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C53E 6000                       		bra.s	PowSPlay
0000C540                            
0000C540                            PowS2:
0000C540 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C546 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C54C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C552 6500                       		bcs.s	PowSPlay
0000C554 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C55A 6700 FEA8                  		beq.w	ExtraLife
0000C55E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C564 6500                       		bcs.s	PowSPlay
0000C566 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C56C 6700 FE96                  		beq.w	ExtraLife	
0000C570                            
0000C570                            PowSPlay:
0000C57A                            
0000C57A                            		
0000C57A                            
0000C57A                            
0000C57A                            Pow_ChkSRing:
0000C57A 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C57E 6600                       		bne.s	Pow_ChkRShield
0000C580                            
0000C580                            		
0000C580 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C586 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C58C 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C592 6500                       		bcs.s	Pow_ChkSRingSound
0000C594 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C59A 6700 FE68                  		beq.w	ExtraLife
0000C59E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C5A4 6500                       		bcs.s	Pow_ChkSRingSound
0000C5A6 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5AC 6700 FE56                  		beq.w	ExtraLife	
0000C5B0                            
0000C5B0                            Pow_ChkSRingSound:
0000C5BA                            
0000C5BA                            
0000C5BA                            Pow_ChkRShield:
0000C5BA 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C5BE 6600                       		bne.s	Pow_ChkGShield
0000C5C0                            
0000C5C0 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5C6 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C5CC 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5D2 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C5D8 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5E8                            
0000C5E8                            Pow_ChkGShield:
0000C5E8 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5EC 6600                       		bne.s	Pow_ChkSpShield
0000C5EE                            
0000C5EE                            
0000C5EE 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5F4 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5FA 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C600 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C606 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C60C                            		
0000C60C 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C612 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C618 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C61E 6500                       		bcs.s	Pow_ChkGSound
0000C620 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C626 6700 FDDC                  		beq.w	ExtraLife
0000C62A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C630 6500                       		bcs.s	Pow_ChkGSound
0000C632 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C638 6700 FDCA                  		beq.w	ExtraLife	
0000C63C                            
0000C63C                            Pow_ChkGSound:		
0000C646                            
0000C646                            Pow_ChkSpShield:
0000C646 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C64A 6600                       		bne.s	Pow_ChkEnd
0000C64C                            
0000C64C 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C652 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C658 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C65E 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C664 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C674 4E71                       		nop
0000C676                            
0000C676                            Pow_ChkEnd:
0000C676 4E75                       		rts
0000C678                            ; ===========================================================================
0000C678                            
0000C678                            Pow_Delete:	; Routine 4
0000C678 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C67C 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C680 4E75                       		rts	
0000C680 4E75                       		rts	
0000C682                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C682                            ; ---------------------------------------------------------------------------
0000C682                            ; Subroutine to	make the sides of a monitor solid
0000C682                            ; ---------------------------------------------------------------------------
0000C682                            
0000C682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C682                            
0000C682                            
0000C682                            Mon_SolidSides:
0000C682 43F8 D000                  		lea	(v_player).w,a1
0000C686 3029 0008                  		move.w	obX(a1),d0
0000C68A 9068 0008                  		sub.w	obX(a0),d0
0000C68E D041                       		add.w	d1,d0
0000C690 6B00                       		bmi.s	loc_A4E6
0000C692 3601                       		move.w	d1,d3
0000C694 D643                       		add.w	d3,d3
0000C696 B043                       		cmp.w	d3,d0
0000C698 6200                       		bhi.s	loc_A4E6
0000C69A 1629 0016                  		move.b	obHeight(a1),d3
0000C69E 4883                       		ext.w	d3
0000C6A0 D443                       		add.w	d3,d2
0000C6A2 3629 000C                  		move.w	obY(a1),d3
0000C6A6 9668 000C                  		sub.w	obY(a0),d3
0000C6AA D642                       		add.w	d2,d3
0000C6AC 6B00                       		bmi.s	loc_A4E6
0000C6AE D442                       		add.w	d2,d2
0000C6B0 B642                       		cmp.w	d2,d3
0000C6B2 6400                       		bcc.s	loc_A4E6
0000C6B4 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C6B8 6B00                       		bmi.s	loc_A4E6
0000C6BA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C6C0 6400                       		bcc.s	loc_A4E6
0000C6C2 4A78 FE08                  		tst.w	(v_debuguse).w
0000C6C6 6600                       		bne.s	loc_A4E6
0000C6C8 B240                       		cmp.w	d0,d1
0000C6CA 6400                       		bcc.s	loc_A4DC
0000C6CC D241                       		add.w	d1,d1
0000C6CE 9041                       		sub.w	d1,d0
0000C6D0                            
0000C6D0                            loc_A4DC:
0000C6D0 0C43 0010                  		cmpi.w	#$10,d3
0000C6D4 6500                       		bcs.s	loc_A4EA
0000C6D6                            
0000C6D6                            loc_A4E2:
0000C6D6 7201                       		moveq	#1,d1
0000C6D8 4E75                       		rts	
0000C6DA                            ; ===========================================================================
0000C6DA                            
0000C6DA                            loc_A4E6:
0000C6DA 7200                       		moveq	#0,d1
0000C6DC 4E75                       		rts	
0000C6DE                            ; ===========================================================================
0000C6DE                            
0000C6DE                            loc_A4EA:
0000C6DE 7200                       		moveq	#0,d1
0000C6E0 1228 0014                  		move.b	obActWid(a0),d1
0000C6E4 5841                       		addq.w	#4,d1
0000C6E6 3401                       		move.w	d1,d2
0000C6E8 D442                       		add.w	d2,d2
0000C6EA D269 0008                  		add.w	obX(a1),d1
0000C6EE 9268 0008                  		sub.w	obX(a0),d1
0000C6F2 6BE2                       		bmi.s	loc_A4E2
0000C6F4 B242                       		cmp.w	d2,d1
0000C6F6 64DE                       		bcc.s	loc_A4E2
0000C6F8 72FF                       		moveq	#-1,d1
0000C6FA 4E75                       		rts	
0000C6FC                            ; End of function Obj26_SolidSides
0000C6FC                            ; End of function Obj26_SolidSides
0000C6FC                            		include	"_anim\Monitor.asm"
0000C6FC                            ; ---------------------------------------------------------------------------
0000C6FC                            ; Animation script - monitors
0000C6FC                            ; ---------------------------------------------------------------------------
0000C6FC 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C702 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C708 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C70E 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C714 0000                       		dc.w @spshield-Ani_Monitor
0000C716                            		
0000C716 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C71C 00                         		even
0000C71C 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C728 00                         		even
0000C728 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C734 00                         		even
0000C734 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C740 00                         		even
0000C740 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C74C 00                         		even
0000C74C 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C758 00                         		even
0000C758 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C764 00                         		even
0000C764 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C770 00                         		even
0000C770 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C77C 00                         		even
0000C77C 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C784 00                         		even
0000C784 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C790 00                         		even
0000C790 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C79C 00                         		even
0000C79C 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C7A8 00                         		even
0000C7A8 00                         		even
0000C7A8                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C7A8                            ; --------------------------------------------------------------------------------
0000C7A8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C7A8                            ; --------------------------------------------------------------------------------
0000C7A8                            
0000C7A8                            SME_YYb7z:	
0000C7A8 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C7AC 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C7B0 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C7B4 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C7B8 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C7BC 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C7C0 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C7C4 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C7C6 01                         SME_YYb7z_1E:	dc.b 1	
0000C7C7 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7CC 02                         SME_YYb7z_24:	dc.b 2	
0000C7CD F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C7D2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7D7 02                         SME_YYb7z_2F:	dc.b 2	
0000C7D8 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C7DD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7E2 02                         SME_YYb7z_3A:	dc.b 2	
0000C7E3 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C7E8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7ED 02                         SME_YYb7z_45:	dc.b 2	
0000C7EE F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C7F3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F8 02                         SME_YYb7z_50:	dc.b 2	
0000C7F9 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C7FE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C803 02                         SME_YYb7z_5B:	dc.b 2	
0000C804 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C809 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C80E 02                         SME_YYb7z_66:	dc.b 2	
0000C80F F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C814 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C819 02                         SME_YYb7z_71:	dc.b 2	
0000C81A F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C81F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C824 02                         SME_YYb7z_7C:	dc.b 2	
0000C825 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C82A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C82F 02                         SME_YYb7z_87:	dc.b 2	
0000C830 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C835 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C83A 05                         SME_YYb7z_92:	dc.b 5	
0000C83B 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C840 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C845 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C84A 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C84F 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C854 02                         SME_YYb7z_AC:	dc.b 2	
0000C855 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C85A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C85F 02                         SME_YYb7z_B7:	dc.b 2	
0000C860 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C865 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C86A 02                         SME_YYb7z_C2:	dc.b 2	
0000C86B F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C870 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C876 00                         		even
0000C876 00                         		even
0000C876                            
0000C876                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            ; Object 0E - Sonic on the title screen
0000C876                            ; ---------------------------------------------------------------------------
0000C876                            
0000C876                            TitleSonic:
0000C876 7000                       		moveq	#0,d0
0000C878 1028 0024                  		move.b	obRoutine(a0),d0
0000C87C 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C880 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C884                            ; ===========================================================================
0000C884 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C886 0000                       		dc.w TSon_Delay-TSon_Index
0000C888 0000                       		dc.w TSon_Move-TSon_Index
0000C88A 0000                       		dc.w TSon_Animate-TSon_Index
0000C88C                            ; ===========================================================================
0000C88C                            
0000C88C                            TSon_Main:	; Routine 0
0000C88C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C890 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C896 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C89C 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C8A4 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C8AA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C8B0 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C8B6 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8BC 6100 0000                  		bsr.w	AnimateSprite
0000C8C0                            
0000C8C0                            TSon_Delay:	;Routine 2
0000C8C0 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C8C4 6A00                       		bpl.s	@wait		; if time remains, branch
0000C8C6 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C8CA 6000 0000                  		bra.w	DisplaySprite
0000C8CE                            
0000C8CE                            	@wait:
0000C8CE 4E75                       		rts	
0000C8D0                            ; ===========================================================================
0000C8D0                            
0000C8D0                            TSon_Move:	; Routine 4
0000C8D0 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C8D4 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C8DA 6600                       		bne.s	@display	; if not, branch
0000C8DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8E0                            
0000C8E0                            	@display:
0000C8E0 6000 0000                  		bra.w	DisplaySprite
0000C8E4                            
0000C8E4 4E75                       		rts	
0000C8E6                            ; ===========================================================================
0000C8E6                            
0000C8E6                            TSon_Animate:	; Routine 6
0000C8E6 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8EC 6100 0000                  		bsr.w	AnimateSprite
0000C8F0 6000 0000                  		bra.w	DisplaySprite
0000C8F4                            
0000C8F4 4E75                       		rts	
0000C8F4 4E75                       		rts	
0000C8F6                            		include	"_incObj\0F Press Start and TM.asm"
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C8F6                            ; ---------------------------------------------------------------------------
0000C8F6                            
0000C8F6                            PSBTM:
0000C8F6 7000                       		moveq	#0,d0
0000C8F8 1028 0024                  		move.b	obRoutine(a0),d0
0000C8FC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C900 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C904 6000 0000                  		bra.w	DisplaySprite
0000C908                            ; ===========================================================================
0000C908 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C90A 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C90C 0000                       		dc.w MENURTS-Obj0F_Index	
0000C90E                            ; ===========================================================================
0000C90E                            Obj0F_Init:
0000C90E 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C912 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C91A 317C 0101 0008                 move.w   #$101,8(a0)
0000C920 317C 0151 000A                 move.w   #$151,$A(a0)
0000C926 317C 056F 0002             	move.w	#$56F,2(a0)
0000C92C 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C932 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C938                            
0000C938                            
0000C938                            Obj0F_Main:
0000C938 7400                             moveq   #0,d2
0000C93A 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C93E 1038 F605                        move.b   ($FFFFF605).w,d0
0000C942 0800 0000                        btst   #0,d0
0000C946 6700                             beq.s   MAIN2
0000C948 5302                             subq.b   #1,d2
0000C94A 6400                             bcc.s   MAIN2
0000C94C 143C 0001                        move.b   #1,d2
0000C950                            
0000C950                            MAIN2:
0000C950 0800 0001                        btst   #1,d0
0000C954 6700                             beq.s   MAIN3
0000C956 5202                             addq.b   #1,d2
0000C958 0C02 0002                        cmpi.b   #2,d2
0000C95C 6500                             blo.s   MAIN3
0000C95E 7400                             moveq   #0,d2
0000C960                            
0000C960                            MAIN3:
0000C960 1142 001A                        move.b   d2,$1A(a0)
0000C964 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C968 0200 0003                        andi.b   #3,d0
0000C96C 6700                             beq.s   MENURTS   ; rts
0000C96E 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C972 4EB8 1254                        jsr   PlaySound_Special
0000C976                            
0000C976                            MENURTS:
0000C976 4E75                             rts															 
0000C978                            ; ===========================================================================
0000C978                            
0000C978                            Map_TitleMenu:
0000C978                            		include "_maps\Title Screen Menu.asm"		
0000C978                            ; --------------------------------------------------------------------------------
0000C978                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C978                            ; --------------------------------------------------------------------------------
0000C978                            
0000C978                            SME_g2Qfx:	
0000C978 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C97C 10                         SME_g2Qfx_6:	dc.b $10	
0000C97D E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C982 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C987 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C98C E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C991 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C996 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C99B E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9A0 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9A5 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9AA F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9AF F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9B4 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C9B9 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C9BE F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C9C3 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C9C8 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C9CD 10                         SME_g2Qfx_6B:	dc.b $10	
0000C9CE E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C9D3 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C9D8 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C9DD E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C9E2 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C9E7 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C9EC E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9F1 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9F6 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9FB F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CA00 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CA05 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CA0A F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CA0F F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CA14 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CA19 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CA1E                            		even
0000CA1E                            		even
0000CA1E                            		even
0000CA1E                            
0000CA1E                            		include	"_anim\Title Screen Sonic.asm"
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E                            ; Animation script - Sonic on the title screen
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CA20 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CA2C 00                         		even
0000CA2C 00                         		even
0000CA2C                            		include	"_anim\Press Start and TM.asm"
0000CA2C                            ; ---------------------------------------------------------------------------
0000CA2C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CA2C                            ; ---------------------------------------------------------------------------
0000CA2C 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CA2E 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CA32                            		even
0000CA32                            		even
0000CA32                            
0000CA32                            		include	"_incObj\sub AnimateSprite.asm"
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32                            ; Subroutine to	animate	a sprite using an animation script
0000CA32                            ; ---------------------------------------------------------------------------
0000CA32                            
0000CA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA32                            
0000CA32                            
0000CA32                            AnimateSprite:
0000CA32 7000                       		moveq	#0,d0
0000CA34 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CA38 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CA3C 6700                       		beq.s	Anim_Run	; if not, branch
0000CA3E                            
0000CA3E 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CA42 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CA48 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CA4E                            
0000CA4E                            Anim_Run:
0000CA4E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CA52 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CA54 D040                       		add.w	d0,d0
0000CA56 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CA5A 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CA5E 7200                       		moveq	#0,d1
0000CA60 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CA64 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CA68 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CA6A                            
0000CA6A                            Anim_Next:
0000CA6A 1200                       		move.b	d0,d1
0000CA6C 0200 001F                  		andi.b	#$1F,d0
0000CA70 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CA74 1028 0022                  		move.b	obStatus(a0),d0
0000CA78 E719                       		rol.b	#3,d1
0000CA7A B101                       		eor.b	d0,d1
0000CA7C 0201 0003                  		andi.b	#3,d1
0000CA80 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CA86 8328 0001                  		or.b	d1,obRender(a0)
0000CA8A 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CA8E                            
0000CA8E                            Anim_Wait:
0000CA8E 4E75                       		rts	
0000CA90                            ; ===========================================================================
0000CA90                            
0000CA90                            Anim_End_FF:
0000CA90 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CA92 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CA94 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CA9A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CA9E 60CA                       		bra.s	Anim_Next
0000CAA0                            ; ===========================================================================
0000CAA0                            
0000CAA0                            Anim_End_FE:
0000CAA0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CAA2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CAA4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CAA8 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CAAC 9200                       		sub.b	d0,d1
0000CAAE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CAB2 60B6                       		bra.s	Anim_Next
0000CAB4                            ; ===========================================================================
0000CAB4                            
0000CAB4                            Anim_End_FD:
0000CAB4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CAB6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CAB8 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CABE                            
0000CABE                            Anim_End_FC:
0000CABE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CAC0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CAC2 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CAC6                            
0000CAC6                            Anim_End_FB:
0000CAC6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CAC8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CACA 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CAD0 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CAD4                            
0000CAD4                            Anim_End_FA:
0000CAD4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CAD6 6600                       		bne.s	Anim_End	; if not, branch
0000CAD8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CADC                            
0000CADC                            Anim_End:
0000CADC 4E75                       		rts	
0000CADE                            ; End of function AnimateSprite
0000CADE                            ; End of function AnimateSprite
0000CADE                            
0000CADE                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CADE                            ; ---------------------------------------------------------------------------
0000CADE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CADE                            ; ---------------------------------------------------------------------------
0000CADE                            Map_PSB_internal:
0000CADE 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CAE0 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CAE2 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CAE4 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CAE6 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CAE7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CAEC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CAF1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CAF6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CAFB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CB00 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CB05 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CB06 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB0B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB10 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB15 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB24 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB29 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB2E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB33 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB38 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB3D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB42 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB47 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB4C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB51 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB56 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB5B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB60 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB65 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB6A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB6F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB74 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB79 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB7E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB83 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB88 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB8D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB92 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB97 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB9C 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CB9D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CBA2                            		even
0000CBA2                            		even
0000CBA2                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CBA2                            ; ---------------------------------------------------------------------------
0000CBA2                            ; Sprite mappings - Sonic on the title screen
0000CBA2                            ; ---------------------------------------------------------------------------
0000CBA2                            Map_TSon_internal:
0000CBA2 0000                       		dc.w byte_A898-Map_TSon_internal
0000CBA4 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CBA6 0000                       		dc.w byte_A917-Map_TSon_internal
0000CBA8 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CBAA 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CBAC 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CBAE 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CBB0 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CBB2 0A                         byte_A898:	dc.b $A
0000CBB3 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CBB8 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CBBD 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CBC2 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CBC7 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CBCC 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CBD1 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CBD6 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CBDB 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CBE0 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CBE5 0F                         byte_A8CB:	dc.b $F
0000CBE6 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CBEB 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CBF0 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CBF5 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CBFA 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CBFF 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC04 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC09 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC0E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC13 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC18 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC1D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC22 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC27 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC2C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC31 11                         byte_A917:	dc.b $11
0000CC32 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CC37 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CC3C 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CC41 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CC46 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CC4B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CC50 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CC55 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC5A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC5F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC64 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC69 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC6E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC73 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC78 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC7D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC82 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC87 0D                         byte_A96D:	dc.b $D
0000CC88 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CC8D 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CC92 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CC97 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CC9C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CCA1 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CCA6 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CCAB 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CCB0 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CCB5 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CCBA 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CCBF 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CCC4 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CCC9 0B                         byte_A9AF:	dc.b $B
0000CCCA 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CCCF 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CCD4 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CCD9 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CCDE 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CCE3 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CCE8 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CCED 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CCF2 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CCF7 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CCFC 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CD01 13                         byte_A9E7:	dc.b $13
0000CD02 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD07 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD0C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD11 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD16 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD1B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD20 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD25 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD2A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD2F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD34 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD39 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD3E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD43 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CD48 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD4D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD52 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD57 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD5C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD61 15                         byte_AA47:	dc.b $15
0000CD62 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD67 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD6C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD71 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD76 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CD7B 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CD80 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD85 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD8A 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD8F 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD94 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD99 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD9E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CDA3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CDA8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CDAD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CDB2 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CDB7 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CDBC 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CDC1 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CDC6 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CDCB 16                         byte_AAB1:	dc.b $16
0000CDCC 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CDD1 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CDD6 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CDDB 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CDE0 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CDE5 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CDEA 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CDEF 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CDF4 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CDF9 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CDFE 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CE03 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CE08 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CE0D 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE12 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE17 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE1C 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE21 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE26 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE2B 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE30 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE35 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE3A                            		even
0000CE3A                            		even
0000CE3A                            
0000CE3A                            		include	"_incObj\2B Chopper.asm"
0000CE3A                            ; ---------------------------------------------------------------------------
0000CE3A                            ; Object 2B - Chopper enemy (GHZ)
0000CE3A                            ; ---------------------------------------------------------------------------
0000CE3A                            
0000CE3A                            Chopper:
0000CE3A 7000                       		moveq	#0,d0
0000CE3C 1028 0024                  		move.b	obRoutine(a0),d0
0000CE40 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CE44 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CE48 6000 0000                  		bra.w	RememberState
0000CE4C                            ; ===========================================================================
0000CE4C 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CE4E 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CE50                            
0000CE50 =00000030                  chop_origY:	equ $30
0000CE50                            ; ===========================================================================
0000CE50                            
0000CE50                            Chop_Main:	; Routine 0
0000CE50 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE54 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CE5C 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CE62 117C 0004 0001             		move.b	#4,obRender(a0)
0000CE68 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE6E 117C 0009 0020             		move.b	#9,obColType(a0)
0000CE74 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE7A 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CE80 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CE86                            
0000CE86                            Chop_ChgSpeed:	; Routine 2
0000CE86 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CE8C 6100 FBA4                  		bsr.w	AnimateSprite
0000CE90 6100 0000                  		bsr.w	SpeedToPos
0000CE94 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CE9A 3028 0030                  		move.w	chop_origY(a0),d0
0000CE9E B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CEA2 6400                       		bcc.s	@chganimation	; if not, branch
0000CEA4 3140 000C                  		move.w	d0,obY(a0)
0000CEA8 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CEAE                            
0000CEAE                            	@chganimation:
0000CEAE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CEB4 0440 00C0                  		subi.w	#$C0,d0
0000CEB8 B068 000C                  		cmp.w	obY(a0),d0
0000CEBC 6400                       		bcc.s	@nochg
0000CEBE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CEC4 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CEC8 6B00                       		bmi.s	@nochg		; if not, branch
0000CECA 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CED0                            
0000CED0                            	@nochg:
0000CED0 4E75                       		rts	
0000CED0 4E75                       		rts	
0000CED2                            		include	"_anim\Chopper.asm"
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2                            ; Animation script - Chopper enemy
0000CED2                            ; ---------------------------------------------------------------------------
0000CED2 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CED4 0000                       		dc.w @fast-Ani_Chop
0000CED6 0000                       		dc.w @still-Ani_Chop
0000CED8 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CEDC 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CEE0 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CEE4 00                         		even
0000CEE4 00                         		even
0000CEE4                            Map_Chop:	include	"_maps\Chopper.asm"
0000CEE4                            ; ---------------------------------------------------------------------------
0000CEE4                            ; Sprite mappings - Chopper enemy (GHZ)
0000CEE4                            ; ---------------------------------------------------------------------------
0000CEE4                            Map_Chop_internal:
0000CEE4 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CEE6 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CEE8 01                         @mouthshut:	dc.b 1
0000CEE9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CEEE 01                         @mouthopen:	dc.b 1
0000CEEF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CEF4                            		even
0000CEF4                            		even
0000CEF4                            		include	"_incObj\2C Jaws.asm"
0000CEF4                            ; ---------------------------------------------------------------------------
0000CEF4                            ; Object 2C - Jaws enemy (LZ)
0000CEF4                            ; ---------------------------------------------------------------------------
0000CEF4                            
0000CEF4                            Jaws:
0000CEF4 7000                       		moveq	#0,d0
0000CEF6 1028 0024                  		move.b	obRoutine(a0),d0
0000CEFA 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CEFE 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CF02                            ; ===========================================================================
0000CF02 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CF04 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CF06                            
0000CF06 =00000030                  jaws_timecount:	equ $30
0000CF06 =00000032                  jaws_timedelay:	equ $32
0000CF06                            ; ===========================================================================
0000CF06                            
0000CF06                            Jaws_Main:	; Routine 0
0000CF06 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF0A 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CF12 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CF18 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CF1E 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CF24 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF2A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF30 7000                       		moveq	#0,d0
0000CF32 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CF36 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CF38 5340                       		subq.w	#1,d0
0000CF3A 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CF3E 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CF42 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CF48 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CF4E 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CF50 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CF54                            
0000CF54                            Jaws_Turn:	; Routine 2
0000CF54 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CF58 6A00                       		bpl.s	@animate	; if time remains, branch
0000CF5A 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CF60 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CF64 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CF6A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CF70                            
0000CF70                            	@animate:
0000CF70 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CF76 6100 FABA                  		bsr.w	AnimateSprite
0000CF7A 6100 0000                  		bsr.w	SpeedToPos
0000CF7E 6000 0000                  		bra.w	RememberState
0000CF7E 6000 0000                  		bra.w	RememberState
0000CF82                            		include	"_anim\Jaws.asm"
0000CF82                            ; ---------------------------------------------------------------------------
0000CF82                            ; Animation script - Jaws enemy
0000CF82                            ; ---------------------------------------------------------------------------
0000CF82 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CF84 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CF8A                            		even
0000CF8A                            		even
0000CF8A                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CF8A                            ; --------------------------------------------------------------------------------
0000CF8A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF8A                            ; --------------------------------------------------------------------------------
0000CF8A                            
0000CF8A                            SME_O5C0c:	
0000CF8A 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CF8E 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CF92 02                         SME_O5C0c_8:	dc.b 2	
0000CF93 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CF98 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CF9D 02                         SME_O5C0c_13:	dc.b 2	
0000CF9E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFA3 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFA8 02                         SME_O5C0c_1E:	dc.b 2	
0000CFA9 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CFAE F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CFB3 02                         SME_O5C0c_29:	dc.b 2	
0000CFB4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFB9 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFBE                            		even
0000CFBE                            		even
0000CFBE                            		include	"_incObj\2D Burrobot.asm"
0000CFBE                            ; ---------------------------------------------------------------------------
0000CFBE                            ; Object 2D - Burrobot enemy (LZ)
0000CFBE                            ; ---------------------------------------------------------------------------
0000CFBE                            
0000CFBE                            Burrobot:
0000CFBE 7000                       		moveq	#0,d0
0000CFC0 1028 0024                  		move.b	obRoutine(a0),d0
0000CFC4 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CFC8 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CFCC                            ; ===========================================================================
0000CFCC 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CFCE 0000                       		dc.w Burro_Action-Burro_Index
0000CFD0                            
0000CFD0 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CFD0                            ; ===========================================================================
0000CFD0                            
0000CFD0                            Burro_Main:	; Routine 0
0000CFD0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFD4 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CFDA 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CFE0 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CFE8 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CFEE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CFF4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFFA 117C 0005 0020             		move.b	#5,obColType(a0)
0000D000 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000D006 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000D00A 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D010                            
0000D010                            Burro_Action:	; Routine 2
0000D010 7000                       		moveq	#0,d0
0000D012 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D016 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D01A 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D01E 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D024 6100 FA0C                  		bsr.w	AnimateSprite
0000D028 6000 0000                  		bra.w	RememberState
0000D02C                            ; ===========================================================================
0000D02C 0000                       @index:		dc.w @changedir-@index
0000D02E 0000                       		dc.w Burro_Move-@index
0000D030 0000                       		dc.w Burro_Jump-@index
0000D032 0000                       		dc.w Burro_ChkSonic-@index
0000D034                            ; ===========================================================================
0000D034                            
0000D034                            @changedir:
0000D034 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D038 6A00                       		bpl.s	@nochg
0000D03A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D03E 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D044 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D04A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D050 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D056 6700                       		beq.s	@nochg
0000D058 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D05C                            
0000D05C                            	@nochg:
0000D05C 4E75                       		rts	
0000D05E                            ; ===========================================================================
0000D05E                            
0000D05E                            Burro_Move:
0000D05E 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D062 6B00                       		bmi.s	loc_AD84
0000D064 6100 0000                  		bsr.w	SpeedToPos
0000D068 0868 0000 0032             		bchg	#0,$32(a0)
0000D06E 6600                       		bne.s	loc_AD78
0000D070 3628 0008                  		move.w	obX(a0),d3
0000D074 0643 000C                  		addi.w	#$C,d3
0000D078 0828 0000 0022             		btst	#0,obStatus(a0)
0000D07E 6600                       		bne.s	loc_AD6A
0000D080 0443 0018                  		subi.w	#$18,d3
0000D084                            
0000D084                            loc_AD6A:
0000D084 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D08A 0C41 000C                  		cmpi.w	#$C,d1
0000D08E 6C00                       		bge.s	loc_AD84
0000D090 4E75                       		rts	
0000D092                            ; ===========================================================================
0000D092                            
0000D092                            loc_AD78:
0000D092 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D098 D368 000C                  		add.w	d1,obY(a0)
0000D09C 4E75                       		rts	
0000D09E                            ; ===========================================================================
0000D09E                            
0000D09E                            loc_AD84:
0000D09E 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D0A4 6700                       		beq.s	loc_ADA4
0000D0A6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D0AA 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D0B0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D0B6 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D0BC 4E75                       		rts	
0000D0BE                            ; ===========================================================================
0000D0BE                            
0000D0BE                            loc_ADA4:
0000D0BE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D0C2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D0C8 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D0CE 4E75                       		rts	
0000D0D0                            ; ===========================================================================
0000D0D0                            
0000D0D0                            Burro_Jump:
0000D0D0 6100 0000                  		bsr.w	SpeedToPos
0000D0D4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D0DA 6B00                       		bmi.s	locret_ADF0
0000D0DC 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D0E2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D0E8 4A41                       		tst.w	d1
0000D0EA 6A00                       		bpl.s	locret_ADF0
0000D0EC D368 000C                  		add.w	d1,obY(a0)
0000D0F0 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D0F6 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D0FC 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D102 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D106 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D10A                            
0000D10A                            locret_ADF0:
0000D10A 4E75                       		rts	
0000D10C                            ; ===========================================================================
0000D10C                            
0000D10C                            Burro_ChkSonic:
0000D10C 343C 0060                  		move.w	#$60,d2
0000D110 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D114 6400                       		bcc.s	locret_AE20
0000D116 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D11A 9068 000C                  		sub.w	obY(a0),d0
0000D11E 6400                       		bcc.s	locret_AE20
0000D120 0C40 FF80                  		cmpi.w	#-$80,d0
0000D124 6500                       		bcs.s	locret_AE20
0000D126 4A78 FE08                  		tst.w	(v_debuguse).w
0000D12A 6600                       		bne.s	locret_AE20
0000D12C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D130 3141 0010                  		move.w	d1,obVelX(a0)
0000D134 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D13A                            
0000D13A                            locret_AE20:
0000D13A 4E75                       		rts	
0000D13C                            
0000D13C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D13C                            
0000D13C                            
0000D13C                            Burro_ChkSonic2:
0000D13C 323C 0080                  		move.w	#$80,d1
0000D140 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D146 3038 D008                  		move.w	(v_player+obX).w,d0
0000D14A 9068 0008                  		sub.w	obX(a0),d0
0000D14E 6400                       		bcc.s	loc_AE40
0000D150 4440                       		neg.w	d0
0000D152 4441                       		neg.w	d1
0000D154 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D15A                            
0000D15A                            loc_AE40:
0000D15A B042                       		cmp.w	d2,d0
0000D15C 4E75                       		rts	
0000D15E                            ; End of function Burro_ChkSonic2
0000D15E                            ; End of function Burro_ChkSonic2
0000D15E                            		include	"_anim\Burrobot.asm"
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E                            ; Animation script - Burrobot enemy
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D160 0000                       		dc.w @walk2-Ani_Burro
0000D162 0000                       		dc.w @digging-Ani_Burro
0000D164 0000                       		dc.w @fall-Ani_Burro
0000D166 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D16A 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D16E 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D172 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D176 00                         		even
0000D176 00                         		even
0000D176                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D176                            ; --------------------------------------------------------------------------------
0000D176                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D176                            ; --------------------------------------------------------------------------------
0000D176                            
0000D176                            SME_Ag_86:	
0000D176 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D17A 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D17E 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D182 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D184 02                         SME_Ag_86_E:	dc.b 2	
0000D185 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D18A 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D18F 02                         SME_Ag_86_19:	dc.b 2	
0000D190 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D195 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D19A 02                         SME_Ag_86_24:	dc.b 2	
0000D19B E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D1A0 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D1A5 02                         SME_Ag_86_2F:	dc.b 2	
0000D1A6 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D1AB 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D1B0 02                         SME_Ag_86_3A:	dc.b 2	
0000D1B1 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D1B6 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D1BB 02                         SME_Ag_86_45:	dc.b 2	
0000D1BC F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D1C1 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D1C6 02                         SME_Ag_86_50:	dc.b 2	
0000D1C7 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D1CC 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D1D2 00                         		even
0000D1D2 00                         		even
0000D1D2                            
0000D1D2                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D1D2                            ; ---------------------------------------------------------------------------
0000D1D2                            ; Object 2F - large grass-covered platforms (MZ)
0000D1D2                            ; ---------------------------------------------------------------------------
0000D1D2                            
0000D1D2                            LargeGrass:
0000D1D2 7000                       		moveq	#0,d0
0000D1D4 1028 0024                  		move.b	obRoutine(a0),d0
0000D1D8 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D1DC 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D1E0                            ; ===========================================================================
0000D1E0 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D1E2 0000                       		dc.w LGrass_Action-LGrass_Index
0000D1E4                            
0000D1E4 =0000002A                  lgrass_origX:	equ $2A
0000D1E4 =0000002C                  lgrass_origY:	equ $2C
0000D1E4                            
0000D1E4 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D1E6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D1E8 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D1EA 0140                       		dc.b 1,	$40
0000D1EC 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D1EE 0220                       		dc.b 2,	$20
0000D1F0                            ; ===========================================================================
0000D1F0                            
0000D1F0                            LGrass_Main:	; Routine 0
0000D1F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D1F4 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D1FC 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D202 117C 0004 0001             		move.b	#4,obRender(a0)
0000D208 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D20E 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D214 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D21A 7000                       		moveq	#0,d0
0000D21C 1028 0028                  		move.b	obSubtype(a0),d0
0000D220 E448                       		lsr.w	#2,d0
0000D222 0240 001C                  		andi.w	#$1C,d0
0000D226 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D22A 3019                       		move.w	(a1)+,d0
0000D22C 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D230 214A 0030                  		move.l	a2,$30(a0)
0000D234 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D238 1151 0014                  		move.b	(a1),obActWid(a0)
0000D23C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D242 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D248 08E8 0004 0001             		bset	#4,1(a0)
0000D24E                            
0000D24E                            LGrass_Action:	; Routine 2
0000D24E 6100 0000                  		bsr.w	LGrass_Types
0000D252 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D256 6700                       		beq.s	LGrass_Solid
0000D258 7200                       		moveq	#0,d1
0000D25A 1228 0014                  		move.b	obActWid(a0),d1
0000D25E 0641 000B                  		addi.w	#$B,d1
0000D262 6100 BFA4                  		bsr.w	ExitPlatform
0000D266 0829 0003 0022             		btst	#3,obStatus(a1)
0000D26C 6600 0000                  		bne.w	LGrass_Slope
0000D270 4228 0025                  		clr.b	ob2ndRout(a0)
0000D274 6000                       		bra.s	LGrass_Display
0000D276                            ; ===========================================================================
0000D276                            
0000D276                            LGrass_Slope:
0000D276 7200                       		moveq	#0,d1
0000D278 1228 0014                  		move.b	obActWid(a0),d1
0000D27C 0641 000B                  		addi.w	#$B,d1
0000D280 2468 0030                  		movea.l	$30(a0),a2
0000D284 3428 0008                  		move.w	obX(a0),d2
0000D288 6100 CF18                  		bsr.w	SlopeObject2
0000D28C 6000                       		bra.s	LGrass_Display
0000D28E                            ; ===========================================================================
0000D28E                            
0000D28E                            LGrass_Solid:
0000D28E 7200                       		moveq	#0,d1
0000D290 1228 0014                  		move.b	obActWid(a0),d1
0000D294 0641 000B                  		addi.w	#$B,d1
0000D298 343C 0020                  		move.w	#$20,d2
0000D29C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D2A2 6600                       		bne.s	loc_AF8E
0000D2A4 343C 0030                  		move.w	#$30,d2
0000D2A8                            
0000D2A8                            loc_AF8E:
0000D2A8 2468 0030                  		movea.l	$30(a0),a2
0000D2AC 6100 0000                  		bsr.w	SolidObject2F
0000D2B0                            
0000D2B0                            LGrass_Display:
0000D2B0 6100 0000                  		bsr.w	DisplaySprite
0000D2B4 6000 0000                  		bra.w	LGrass_ChkDel
0000D2B8                            
0000D2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2B8                            
0000D2B8                            
0000D2B8                            LGrass_Types:
0000D2B8 7000                       		moveq	#0,d0
0000D2BA 1028 0028                  		move.b	obSubtype(a0),d0
0000D2BE 0240 0007                  		andi.w	#7,d0
0000D2C2 D040                       		add.w	d0,d0
0000D2C4 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D2C8 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D2CC                            ; End of function LGrass_Types
0000D2CC                            
0000D2CC                            ; ===========================================================================
0000D2CC 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D2CE 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D2D0 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D2D2 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D2D4 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D2D6 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D2D8                            ; ===========================================================================
0000D2D8                            
0000D2D8                            LGrass_Type00:
0000D2D8 4E75                       		rts			; type 00 platform doesn't move
0000D2DA                            ; ===========================================================================
0000D2DA                            
0000D2DA                            LGrass_Type01:
0000D2DA 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D2DE 323C 0020                  		move.w	#$20,d1
0000D2E2 6000                       		bra.s	LGrass_Move
0000D2E4                            ; ===========================================================================
0000D2E4                            
0000D2E4                            LGrass_Type02:
0000D2E4 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D2E8 323C 0030                  		move.w	#$30,d1
0000D2EC 6000                       		bra.s	LGrass_Move
0000D2EE                            ; ===========================================================================
0000D2EE                            
0000D2EE                            LGrass_Type03:
0000D2EE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D2F2 323C 0040                  		move.w	#$40,d1
0000D2F6 6000                       		bra.s	LGrass_Move
0000D2F8                            ; ===========================================================================
0000D2F8                            
0000D2F8                            LGrass_Type04:
0000D2F8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D2FC 323C 0060                  		move.w	#$60,d1
0000D300                            
0000D300                            LGrass_Move:
0000D300 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D306 6700                       		beq.s	loc_AFF2
0000D308 4440                       		neg.w	d0
0000D30A D041                       		add.w	d1,d0
0000D30C                            
0000D30C                            loc_AFF2:
0000D30C 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D310 9240                       		sub.w	d0,d1
0000D312 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D316 4E75                       		rts	
0000D318                            ; ===========================================================================
0000D318                            
0000D318                            LGrass_Type05:
0000D318 1028 0034                  		move.b	$34(a0),d0
0000D31C 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D320 6600                       		bne.s	loc_B010
0000D322 5500                       		subq.b	#2,d0
0000D324 6400                       		bcc.s	loc_B01C
0000D326 7000                       		moveq	#0,d0
0000D328 6000                       		bra.s	loc_B01C
0000D32A                            ; ===========================================================================
0000D32A                            
0000D32A                            loc_B010:
0000D32A 5800                       		addq.b	#4,d0
0000D32C 0C00 0040                  		cmpi.b	#$40,d0
0000D330 6500                       		bcs.s	loc_B01C
0000D332 103C 0040                  		move.b	#$40,d0
0000D336                            
0000D336                            loc_B01C:
0000D336 1140 0034                  		move.b	d0,$34(a0)
0000D33A 4EB9 0000 3A36             		jsr	(CalcSine).l
0000D340 E848                       		lsr.w	#4,d0
0000D342 3200                       		move.w	d0,d1
0000D344 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D348 3140 000C                  		move.w	d0,obY(a0)
0000D34C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D352 6600                       		bne.s	loc_B07A
0000D354 4A28 0035                  		tst.b	$35(a0)
0000D358 6600                       		bne.s	loc_B07A
0000D35A 117C 0001 0035             		move.b	#1,$35(a0)
0000D360 6100 0000                  		bsr.w	FindNextFreeObj
0000D364 6600                       		bne.s	loc_B07A
0000D366 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D36A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D370 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D376 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D37A 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D37E 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D384 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D38A 2348 0038                  		move.l	a0,$38(a1)
0000D38E 2448                       		movea.l	a0,a2
0000D390 6100                       		bsr.s	sub_B09C
0000D392                            
0000D392                            loc_B07A:
0000D392 7400                       		moveq	#0,d2
0000D394 45E8 0036                  		lea	$36(a0),a2
0000D398 141A                       		move.b	(a2)+,d2
0000D39A 5302                       		subq.b	#1,d2
0000D39C 6500                       		bcs.s	locret_B09A
0000D39E                            
0000D39E                            loc_B086:
0000D39E 7000                       		moveq	#0,d0
0000D3A0 101A                       		move.b	(a2)+,d0
0000D3A2 ED48                       		lsl.w	#6,d0
0000D3A4 0640 D000                  		addi.w	#$D000,d0
0000D3A8 3240                       		movea.w	d0,a1
0000D3AA 3341 003C                  		move.w	d1,$3C(a1)
0000D3AE 51CA FFEE                  		dbf	d2,loc_B086
0000D3B2                            
0000D3B2                            locret_B09A:
0000D3B2 4E75                       		rts	
0000D3B4                            
0000D3B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3B4                            
0000D3B4                            
0000D3B4                            sub_B09C:
0000D3B4 45EA 0036                  		lea	$36(a2),a2
0000D3B8 7000                       		moveq	#0,d0
0000D3BA 1012                       		move.b	(a2),d0
0000D3BC 5212                       		addq.b	#1,(a2)
0000D3BE 45F2 0001                  		lea	1(a2,d0.w),a2
0000D3C2 3009                       		move.w	a1,d0
0000D3C4 0440 D000                  		subi.w	#$D000,d0
0000D3C8 EC48                       		lsr.w	#6,d0
0000D3CA 0240 007F                  		andi.w	#$7F,d0
0000D3CE 1480                       		move.b	d0,(a2)
0000D3D0 4E75                       		rts	
0000D3D2                            ; End of function sub_B09C
0000D3D2                            
0000D3D2                            ; ===========================================================================
0000D3D2                            
0000D3D2                            LGrass_ChkDel:
0000D3D2 4A28 0035                  		tst.b	$35(a0)
0000D3D6 6700                       		beq.s	loc_B0C6
0000D3D8 4A28 0001                  		tst.b	obRender(a0)
0000D3DC 6A00                       		bpl.s	LGrass_DelFlames
0000D3DE                            
0000D3DE                            loc_B0C6:
0000D3FC 4E75                       		rts	
0000D3FE                            ; ===========================================================================
0000D3FE                            
0000D3FE                            LGrass_DelFlames:
0000D3FE 7400                       		moveq	#0,d2
0000D400                            
0000D400                            loc_B0E8:
0000D400 45E8 0036                  		lea	$36(a0),a2
0000D404 1412                       		move.b	(a2),d2
0000D406 421A                       		clr.b	(a2)+
0000D408 5302                       		subq.b	#1,d2
0000D40A 6500                       		bcs.s	locret_B116
0000D40C                            
0000D40C                            loc_B0F4:
0000D40C 7000                       		moveq	#0,d0
0000D40E 1012                       		move.b	(a2),d0
0000D410 421A                       		clr.b	(a2)+
0000D412 ED48                       		lsl.w	#6,d0
0000D414 0640 D000                  		addi.w	#$D000,d0
0000D418 3240                       		movea.w	d0,a1
0000D41A 6100 0000                  		bsr.w	DeleteChild
0000D41E 51CA FFEC                  		dbf	d2,loc_B0F4
0000D422 117C 0000 0035             		move.b	#0,$35(a0)
0000D428 117C 0000 0034             		move.b	#0,$34(a0)
0000D42E                            
0000D42E                            locret_B116:
0000D42E 4E75                       		rts	
0000D430                            ; ===========================================================================
0000D430                            ; ---------------------------------------------------------------------------
0000D430                            ; Collision data for large moving platforms (MZ)
0000D430                            ; ---------------------------------------------------------------------------
0000D430                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D47C                            		even
0000D47C                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D4A8                            		even
0000D4A8                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D4F4                            		even
0000D4F4                            		even
0000D4F4                            		include	"_incObj\35 Burning Grass.asm"
0000D4F4                            ; ---------------------------------------------------------------------------
0000D4F4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D4F4                            ; (appears when	you walk on sinking platforms)
0000D4F4                            ; ---------------------------------------------------------------------------
0000D4F4                            
0000D4F4                            GrassFire:
0000D4F4 7000                       		moveq	#0,d0
0000D4F6 1028 0024                  		move.b	obRoutine(a0),d0
0000D4FA 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D4FE 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D502                            ; ===========================================================================
0000D502 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D504 0000                       		dc.w loc_B238-GFire_Index
0000D506 0000                       		dc.w GFire_Move-GFire_Index
0000D508                            
0000D508 =0000002A                  gfire_origX:	equ $2A
0000D508                            ; ===========================================================================
0000D508                            
0000D508                            GFire_Main:	; Routine 0
0000D508 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D50C 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D514 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D51A 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D520 117C 0004 0001             		move.b	#4,obRender(a0)
0000D526 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D52C 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D532 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D542 4A28 0028                  		tst.b	obSubtype(a0)
0000D546 6700                       		beq.s	loc_B238
0000D548 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D54C 6000 0000                  		bra.w	GFire_Move
0000D550                            ; ===========================================================================
0000D550                            
0000D550                            loc_B238:	; Routine 2
0000D550 2268 0030                  		movea.l	$30(a0),a1
0000D554 3228 0008                  		move.w	obX(a0),d1
0000D558 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D55C 0641 000C                  		addi.w	#$C,d1
0000D560 3001                       		move.w	d1,d0
0000D562 E248                       		lsr.w	#1,d0
0000D564 1031 0000                  		move.b	(a1,d0.w),d0
0000D568 4440                       		neg.w	d0
0000D56A D068 002C                  		add.w	$2C(a0),d0
0000D56E 3400                       		move.w	d0,d2
0000D570 D068 003C                  		add.w	$3C(a0),d0
0000D574 3140 000C                  		move.w	d0,obY(a0)
0000D578 0C41 0084                  		cmpi.w	#$84,d1
0000D57C 6400                       		bcc.s	loc_B2B0
0000D57E 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D586 0C41 0080                  		cmpi.w	#$80,d1
0000D58A 6400                       		bcc.s	loc_B2B0
0000D58C 2028 0008                  		move.l	obX(a0),d0
0000D590 0680 0008 0000             		addi.l	#$80000,d0
0000D596 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D59C 6600                       		bne.s	loc_B2B0
0000D59E 6100 0000                  		bsr.w	FindNextFreeObj
0000D5A2 6600                       		bne.s	loc_B2B0
0000D5A4 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D5A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D5AE 3342 002C                  		move.w	d2,$2C(a1)
0000D5B2 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D5B8 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D5BE 2468 0038                  		movea.l	$38(a0),a2
0000D5C2 6100 FDF0                  		bsr.w	sub_B09C
0000D5C6                            
0000D5C6                            loc_B2B0:
0000D5C6 6000                       		bra.s	GFire_Animate
0000D5C8                            ; ===========================================================================
0000D5C8                            
0000D5C8                            GFire_Move:	; Routine 4
0000D5C8 3028 002C                  		move.w	$2C(a0),d0
0000D5CC D068 003C                  		add.w	$3C(a0),d0
0000D5D0 3140 000C                  		move.w	d0,obY(a0)
0000D5D4                            
0000D5D4                            GFire_Animate:
0000D5D4 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D5DA 6100 F456                  		bsr.w	AnimateSprite
0000D5DE 6000 0000                  		bra.w	DisplaySprite
0000D5DE 6000 0000                  		bra.w	DisplaySprite
0000D5E2                            		include	"_anim\Burning Grass.asm"
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2                            ; Animation script - burning grass that sits on the floor (MZ)
0000D5E2                            ; ---------------------------------------------------------------------------
0000D5E2 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D5E4 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D5EA                            		even
0000D5EA                            		even
0000D5EA                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            Map_LGrass_internal:
0000D5EA 0000                       		dc.w @wide-Map_LGrass_internal
0000D5EC 0000                       		dc.w @sloped-Map_LGrass_internal
0000D5EE 0000                       		dc.w @narrow-Map_LGrass_internal
0000D5F0 0D                         @wide:		dc.b $D
0000D5F1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D5F6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D5FB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D600 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D605 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D60A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D60F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D614 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D619 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D61E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D623 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D628 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D62D F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D632 0A                         @sloped:	dc.b $A
0000D633 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D638 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D63D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D642 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D647 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D64C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D651 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D656 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D65B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D660 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D665 06                         @narrow:	dc.b 6
0000D666 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D66B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D670 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D675 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D67A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D67F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D684                            		even
0000D684                            		even
0000D684                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D684                            ; --------------------------------------------------------------------------------
0000D684                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D684                            ; --------------------------------------------------------------------------------
0000D684                            
0000D684                            SME_gyvTV:	
0000D684 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D688 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D68C 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D690 01                         SME_gyvTV_C:	dc.b 1	
0000D691 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D696 01                         SME_gyvTV_12:	dc.b 1	
0000D697 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D69C 01                         SME_gyvTV_18:	dc.b 1	
0000D69D F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D6A2 01                         SME_gyvTV_1E:	dc.b 1	
0000D6A3 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D6A8 01                         SME_gyvTV_24:	dc.b 1	
0000D6A9 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D6AE 01                         SME_gyvTV_2A:	dc.b 1	
0000D6AF F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D6B4                            		even
0000D6B4                            		even
0000D6B4                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D6B4                            ; ---------------------------------------------------------------------------
0000D6B4                            ; Object 30 - large green glass blocks (MZ)
0000D6B4                            ; ---------------------------------------------------------------------------
0000D6B4                            
0000D6B4                            GlassBlock:
0000D6B4 7000                       		moveq	#0,d0
0000D6B6 1028 0024                  		move.b	obRoutine(a0),d0
0000D6BA 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D6BE 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D6E0 6000 0000                  		bra.w	DisplaySprite
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Glass_Delete:
0000D6E4 6000 0000                  		bra.w	DeleteObject
0000D6E8                            ; ===========================================================================
0000D6E8 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D6EA 0000                       		dc.w Glass_Block012-Glass_Index
0000D6EC 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D6EE 0000                       		dc.w Glass_Block34-Glass_Index
0000D6F0 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D6F2                            
0000D6F2 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D6F2 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D6F2                            
0000D6F2 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D6F5 0400 01                    		dc.b 4,	0, 1
0000D6F8 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D6FB 0800 01                    		dc.b 8,	0, 1
0000D6FE                            ; ===========================================================================
0000D6FE                            
0000D6FE                            Glass_Main:	; Routine 0
0000D6FE 45F9 0000 D6F2             		lea	(Glass_Vars1).l,a2
0000D704 7201                       		moveq	#1,d1
0000D706 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D70C 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D712 6500                       		bcs.s	@IsType012	; if yes, branch
0000D714                            
0000D714 45F9 0000 D6F8             		lea	(Glass_Vars2).l,a2
0000D71A 7201                       		moveq	#1,d1
0000D71C 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D722                            
0000D722                            	@IsType012:
0000D722 2248                       		movea.l	a0,a1
0000D724 6000                       		bra.s	@Load		; load main object
0000D726                            ; ===========================================================================
0000D726                            
0000D726                            	@Repeat:
0000D726 6100 0000                  		bsr.w	FindNextFreeObj
0000D72A 6600                       		bne.s	@Fail
0000D72C                            
0000D72C                            @Load:
0000D72C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D730 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D734 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D73A 101A                       		move.b	(a2)+,d0
0000D73C 4880                       		ext.w	d0
0000D73E D068 000C                  		add.w	obY(a0),d0
0000D742 3340 000C                  		move.w	d0,obY(a1)
0000D746 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D74E 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D754 137C 0004 0001             		move.b	#4,obRender(a1)
0000D75A 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D760 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D766 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D76C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D772 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D776 2348 003C                  		move.l	a0,glass_parent(a1)
0000D77A 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D77E                            
0000D77E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D784 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D78A 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D78E 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D794                            
0000D794                            	@Fail:
0000D794 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D79A 08E8 0004 0001             		bset	#4,obRender(a0)
0000D7A0                            
0000D7A0                            Glass_Block012:	; Routine 2
0000D7A0 6100 0000                  		bsr.w	Glass_Types
0000D7A4 323C 002B                  		move.w	#$2B,d1
0000D7A8 343C 0048                  		move.w	#$48,d2
0000D7AC 363C 0049                  		move.w	#$49,d3
0000D7B0 3828 0008                  		move.w	obX(a0),d4
0000D7B4 6000 0000                  		bra.w	SolidObject
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            Glass_Reflect012:
0000D7B8                            		; Routine 4
0000D7B8 2268 003C                  		movea.l	$3C(a0),a1
0000D7BC 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7C2 6000 0000                  		bra.w	Glass_Types
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            Glass_Block34:	; Routine 6
0000D7C6 6100 0000                  		bsr.w	Glass_Types
0000D7CA 323C 002B                  		move.w	#$2B,d1
0000D7CE 343C 0038                  		move.w	#$38,d2
0000D7D2 363C 0039                  		move.w	#$39,d3
0000D7D6 3828 0008                  		move.w	obX(a0),d4
0000D7DA 6000 0000                  		bra.w	SolidObject
0000D7DE                            ; ===========================================================================
0000D7DE                            
0000D7DE                            Glass_Reflect34:
0000D7DE                            		; Routine 8
0000D7DE 2268 003C                  		movea.l	$3C(a0),a1
0000D7E2 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7E8 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D7EE 6000 0000                  		bra.w	Glass_Types
0000D7F2                            
0000D7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7F2                            
0000D7F2                            
0000D7F2                            Glass_Types:
0000D7F2 7000                       		moveq	#0,d0
0000D7F4 1028 0028                  		move.b	obSubtype(a0),d0
0000D7F8 0240 0007                  		andi.w	#7,d0
0000D7FC D040                       		add.w	d0,d0
0000D7FE 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D802 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D806                            ; End of function Glass_Types
0000D806                            
0000D806                            ; ===========================================================================
0000D806 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D808 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D80A 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D80C 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D80E 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D810                            ; ===========================================================================
0000D810                            
0000D810                            Glass_Type00:
0000D810 4E75                       		rts	
0000D812                            ; ===========================================================================
0000D812                            
0000D812                            Glass_Type01:
0000D812 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D816 323C 0040                  		move.w	#$40,d1
0000D81A 6000                       		bra.s	loc_B514
0000D81C                            ; ===========================================================================
0000D81C                            
0000D81C                            Glass_Type02:
0000D81C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D820 323C 0040                  		move.w	#$40,d1
0000D824 4440                       		neg.w	d0
0000D826 D041                       		add.w	d1,d0
0000D828                            
0000D828                            loc_B514:
0000D828 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D82E 6700                       		beq.s	loc_B526
0000D830 4440                       		neg.w	d0
0000D832 D041                       		add.w	d1,d0
0000D834 E208                       		lsr.b	#1,d0
0000D836 0640 0020                  		addi.w	#$20,d0
0000D83A                            
0000D83A                            loc_B526:
0000D83A 6000 0000                  		bra.w	loc_B5EE
0000D83E                            ; ===========================================================================
0000D83E                            
0000D83E                            Glass_Type03:
0000D83E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D844 6700                       		beq.s	loc_B53E
0000D846 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D84A 0440 0010                  		subi.w	#$10,d0
0000D84E 6000 0000                  		bra.w	loc_B5EE
0000D852                            ; ===========================================================================
0000D852                            
0000D852                            loc_B53E:
0000D852 0828 0003 0022             		btst	#3,obStatus(a0)
0000D858 6600                       		bne.s	loc_B54E
0000D85A 08A8 0000 0034             		bclr	#0,$34(a0)
0000D860 6000                       		bra.s	loc_B582
0000D862                            ; ===========================================================================
0000D862                            
0000D862                            loc_B54E:
0000D862 4A28 0034                  		tst.b	$34(a0)
0000D866 6600                       		bne.s	loc_B582
0000D868 117C 0001 0034             		move.b	#1,$34(a0)
0000D86E 08E8 0000 0035             		bset	#0,$35(a0)
0000D874 6700                       		beq.s	loc_B582
0000D876 08E8 0007 0034             		bset	#7,$34(a0)
0000D87C 317C 0010 0036             		move.w	#$10,$36(a0)
0000D882 117C 000A 0038             		move.b	#$A,$38(a0)
0000D888 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D88E 6600                       		bne.s	loc_B582
0000D890 317C 0040 0036             		move.w	#$40,$36(a0)
0000D896                            
0000D896                            loc_B582:
0000D896 4A28 0034                  		tst.b	$34(a0)
0000D89A 6A00                       		bpl.s	loc_B5AA
0000D89C 4A28 0038                  		tst.b	$38(a0)
0000D8A0 6700                       		beq.s	loc_B594
0000D8A2 5328 0038                  		subq.b	#1,$38(a0)
0000D8A6 6600                       		bne.s	loc_B5AA
0000D8A8                            
0000D8A8                            loc_B594:
0000D8A8 4A68 0032                  		tst.w	glass_dist(a0)
0000D8AC 6700                       		beq.s	loc_B5A4
0000D8AE 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D8B2 5368 0036                  		subq.w	#1,$36(a0)
0000D8B6 6600                       		bne.s	loc_B5AA
0000D8B8                            
0000D8B8                            loc_B5A4:
0000D8B8 08A8 0007 0034             		bclr	#7,$34(a0)
0000D8BE                            
0000D8BE                            loc_B5AA:
0000D8BE 3028 0032                  		move.w	glass_dist(a0),d0
0000D8C2 6000                       		bra.s	loc_B5EE
0000D8C4                            ; ===========================================================================
0000D8C4                            
0000D8C4                            Glass_Type04:
0000D8C4 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8CA 6700                       		beq.s	Glass_ChkSwitch
0000D8CC 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8D0 0440 0010                  		subi.w	#$10,d0
0000D8D4 6000                       		bra.s	loc_B5EE
0000D8D6                            ; ===========================================================================
0000D8D6                            
0000D8D6                            Glass_ChkSwitch:
0000D8D6 4A28 0034                  		tst.b	$34(a0)
0000D8DA 6600                       		bne.s	loc_B5E0
0000D8DC 45F8 F7E0                  		lea	(f_switch).w,a2
0000D8E0 7000                       		moveq	#0,d0
0000D8E2 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D8E6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D8E8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D8EC 6700                       		beq.s	loc_B5EA	; if not, branch
0000D8EE 117C 0001 0034             		move.b	#1,$34(a0)
0000D8F4                            
0000D8F4                            loc_B5E0:
0000D8F4 4A68 0032                  		tst.w	glass_dist(a0)
0000D8F8 6700                       		beq.s	loc_B5EA
0000D8FA 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D8FE                            
0000D8FE                            loc_B5EA:
0000D8FE 3028 0032                  		move.w	glass_dist(a0),d0
0000D902                            
0000D902                            loc_B5EE:
0000D902 3228 0030                  		move.w	$30(a0),d1
0000D906 9240                       		sub.w	d0,d1
0000D908 3141 000C                  		move.w	d1,obY(a0)
0000D90C 4E75                       		rts	
0000D90C 4E75                       		rts	
0000D90E                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D90E                            ; --------------------------------------------------------------------------------
0000D90E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D90E                            ; --------------------------------------------------------------------------------
0000D90E                            
0000D90E                            SME_NEyTf:	
0000D90E 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D912 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D914 0C                         SME_NEyTf_6:	dc.b $C	
0000D915 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D91A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D91F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D924 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D929 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D92E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D933 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D938 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D93D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D942 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D947 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D94C 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D951 02                         SME_NEyTf_43:	dc.b 2	
0000D952 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D957 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D95C 0A                         SME_NEyTf_4E:	dc.b $A	
0000D95D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D962 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D967 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D96C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D971 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D976 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D97B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D980 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D985 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D98A 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D990 00                         		even
0000D990 00                         		even
0000D990                            		include	"_incObj\31 Chained Stompers.asm"
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            
0000D990                            ChainStomp:
0000D990 7000                       		moveq	#0,d0
0000D992 1028 0024                  		move.b	obRoutine(a0),d0
0000D996 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D99A 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D99E                            ; ===========================================================================
0000D99E 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D9A0 0000                       		dc.w loc_B798-CStom_Index
0000D9A2 0000                       		dc.w loc_B7FE-CStom_Index
0000D9A4 0000                       		dc.w CStom_Display2-CStom_Index
0000D9A6 0000                       		dc.w loc_B7E2-CStom_Index
0000D9A8                            
0000D9A8 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D9A8                            
0000D9A8 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D9AA 0100                       		dc.b 1,	0
0000D9AC                            
0000D9AC 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D9AF 041C 01                    		dc.b 4,	$1C, 1
0000D9B2 08CC 03                    		dc.b 8,	$CC, 3
0000D9B5 06F0 02                    		dc.b 6,	$F0, 2
0000D9B8                            
0000D9B8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D9BC 5000 7800                  		dc.w $5000, $7800
0000D9C0 3800 5800                  		dc.w $3800, $5800
0000D9C4 B800                       		dc.w $B800
0000D9C6                            ; ===========================================================================
0000D9C6                            
0000D9C6                            CStom_Main:	; Routine 0
0000D9C6 7000                       		moveq	#0,d0
0000D9C8 1028 0028                  		move.b	obSubtype(a0),d0
0000D9CC 6A00                       		bpl.s	loc_B6CE
0000D9CE 0240 007F                  		andi.w	#$7F,d0
0000D9D2 D040                       		add.w	d0,d0
0000D9D4 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D9D8 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D9DC 101A                       		move.b	(a2)+,d0
0000D9DE 1140 0028                  		move.b	d0,obSubtype(a0)
0000D9E2                            
0000D9E2                            loc_B6CE:
0000D9E2 0200 000F                  		andi.b	#$F,d0
0000D9E6 D040                       		add.w	d0,d0
0000D9E8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D9EC 4A40                       		tst.w	d0
0000D9EE 6600                       		bne.s	loc_B6E0
0000D9F0 3142 0032                  		move.w	d2,$32(a0)
0000D9F4                            
0000D9F4                            loc_B6E0:
0000D9F4 45F9 0000 D9AC             		lea	(CStom_Var).l,a2
0000D9FA 2248                       		movea.l	a0,a1
0000D9FC 7203                       		moveq	#3,d1
0000D9FE 6000                       		bra.s	CStom_MakeStomper
0000DA00                            ; ===========================================================================
0000DA00                            
0000DA00                            CStom_Loop:
0000DA00 6100 0000                  		bsr.w	FindNextFreeObj
0000DA04 6600 0000                  		bne.w	CStom_SetSize
0000DA08                            
0000DA08                            CStom_MakeStomper:
0000DA08 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DA0C 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DA10 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DA16 101A                       		move.b	(a2)+,d0
0000DA18 4880                       		ext.w	d0
0000DA1A D068 000C                  		add.w	obY(a0),d0
0000DA1E 3340 000C                  		move.w	d0,obY(a1)
0000DA22 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DA2A 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA30 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA36 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DA3C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DA42 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DA48 3342 0034                  		move.w	d2,$34(a1)
0000DA4C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DA52 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DA56 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DA5C 6600                       		bne.s	loc_B76A
0000DA5E 5341                       		subq.w	#1,d1
0000DA60 1028 0028                  		move.b	obSubtype(a0),d0
0000DA64 0240 00F0                  		andi.w	#$F0,d0
0000DA68 0C40 0020                  		cmpi.w	#$20,d0
0000DA6C 679A                       		beq.s	CStom_MakeStomper
0000DA6E 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DA74 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DA7A 5241                       		addq.w	#1,d1
0000DA7C                            
0000DA7C                            loc_B76A:
0000DA7C 2348 003C                  		move.l	a0,$3C(a1)
0000DA80 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DA84                            
0000DA84 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DA8A                            
0000DA8A                            CStom_SetSize:
0000DA8A 7000                       		moveq	#0,d0
0000DA8C 1028 0028                  		move.b	obSubtype(a0),d0
0000DA90 E648                       		lsr.w	#3,d0
0000DA92 0200 000E                  		andi.b	#$E,d0
0000DA96 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DA9A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DA9E 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DAA2 6000                       		bra.s	loc_B798
0000DAA4                            ; ===========================================================================
0000DAA4 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DAA6 3009                       		dc.b $30, 9
0000DAA8 100A                       		dc.b $10, $A
0000DAAA                            ; ===========================================================================
0000DAAA                            
0000DAAA                            loc_B798:	; Routine 2
0000DAAA 6100 0000                  		bsr.w	CStom_Types
0000DAAE 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DAB4 7200                       		moveq	#0,d1
0000DAB6 1228 0014                  		move.b	obActWid(a0),d1
0000DABA 0641 000B                  		addi.w	#$B,d1
0000DABE 343C 000C                  		move.w	#$C,d2
0000DAC2 363C 000D                  		move.w	#$D,d3
0000DAC6 3828 0008                  		move.w	obX(a0),d4
0000DACA 6100 0000                  		bsr.w	SolidObject
0000DACE 0828 0003 0022             		btst	#3,obStatus(a0)
0000DAD4 6700                       		beq.s	CStom_Display
0000DAD6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DADC 6400                       		bcc.s	CStom_Display
0000DADE 2448                       		movea.l	a0,a2
0000DAE0 41F8 D000                  		lea	(v_player).w,a0
0000DAE4 4EB9 0000 0000             		jsr	(KillSonic).l
0000DAEA 204A                       		movea.l	a2,a0
0000DAEC                            
0000DAEC                            CStom_Display:
0000DAEC 6100 0000                  		bsr.w	DisplaySprite
0000DAF0 6000 0000                  		bra.w	CStom_ChkDel
0000DAF4                            ; ===========================================================================
0000DAF4                            
0000DAF4                            loc_B7E2:	; Routine 8
0000DAF4 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DAFA 08E8 0004 0001             		bset	#4,obRender(a0)
0000DB00 2268 003C                  		movea.l	$3C(a0),a1
0000DB04 1029 0032                  		move.b	$32(a1),d0
0000DB08 EA08                       		lsr.b	#5,d0
0000DB0A 5600                       		addq.b	#3,d0
0000DB0C 1140 001A                  		move.b	d0,obFrame(a0)
0000DB10                            
0000DB10                            loc_B7FE:	; Routine 4
0000DB10 2268 003C                  		movea.l	$3C(a0),a1
0000DB14 7000                       		moveq	#0,d0
0000DB16 1029 0032                  		move.b	$32(a1),d0
0000DB1A D068 0030                  		add.w	$30(a0),d0
0000DB1E 3140 000C                  		move.w	d0,obY(a0)
0000DB22                            
0000DB22                            CStom_Display2:	; Routine 6
0000DB22 6100 0000                  		bsr.w	DisplaySprite
0000DB26                            
0000DB26                            CStom_ChkDel:
0000DB44 4E75                       		rts	
0000DB46                            ; ===========================================================================
0000DB46                            
0000DB46                            CStom_Types:
0000DB46 1028 0028                  		move.b	obSubtype(a0),d0
0000DB4A 0240 000F                  		andi.w	#$F,d0
0000DB4E D040                       		add.w	d0,d0
0000DB50 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DB54 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DB58                            ; ===========================================================================
0000DB58 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DB5A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB5C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB5E 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB60 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB62 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB64 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB66                            ; ===========================================================================
0000DB66                            
0000DB66                            CStom_Type00:
0000DB66 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DB6A 7000                       		moveq	#0,d0
0000DB6C 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DB70 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DB74 6700                       		beq.s	loc_B8A8	; if not, branch
0000DB76 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DB7A 6A00                       		bpl.s	loc_B872
0000DB7C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DB82 6700                       		beq.s	loc_B8A0
0000DB84                            
0000DB84                            loc_B872:
0000DB84 4A68 0032                  		tst.w	$32(a0)
0000DB88 6700                       		beq.s	loc_B8A0
0000DB8A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DB8E 0200 000F                  		andi.b	#$F,d0
0000DB92 6600                       		bne.s	loc_B892
0000DB94 4A28 0001                  		tst.b	1(a0)
0000DB98 6A00                       		bpl.s	loc_B892
0000DBA4                            
0000DBA4                            loc_B892:
0000DBA4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DBAA 6400                       		bcc.s	CStom_Restart
0000DBAC 317C 0000 0032             		move.w	#0,$32(a0)
0000DBB2                            
0000DBB2                            loc_B8A0:
0000DBB2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DBB8 6000                       		bra.s	CStom_Restart
0000DBBA                            ; ===========================================================================
0000DBBA                            
0000DBBA                            loc_B8A8:
0000DBBA 3228 0034                  		move.w	$34(a0),d1
0000DBBE B268 0032                  		cmp.w	$32(a0),d1
0000DBC2 6700                       		beq.s	CStom_Restart
0000DBC4 3028 0012                  		move.w	obVelY(a0),d0
0000DBC8 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DBCE D168 0032                  		add.w	d0,$32(a0)
0000DBD2 B268 0032                  		cmp.w	$32(a0),d1
0000DBD6 6200                       		bhi.s	CStom_Restart
0000DBD8 3141 0032                  		move.w	d1,$32(a0)
0000DBDC 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DBE2 4A28 0001                  		tst.b	obRender(a0)
0000DBE6 6A00                       		bpl.s	CStom_Restart
0000DBF2                            
0000DBF2                            CStom_Restart:
0000DBF2 7000                       		moveq	#0,d0
0000DBF4 1028 0032                  		move.b	$32(a0),d0
0000DBF8 D068 0030                  		add.w	$30(a0),d0
0000DBFC 3140 000C                  		move.w	d0,obY(a0)
0000DC00 4E75                       		rts	
0000DC02                            ; ===========================================================================
0000DC02                            
0000DC02                            CStom_Type01:
0000DC02 4A68 0036                  		tst.w	$36(a0)
0000DC06 6700                       		beq.s	loc_B938
0000DC08 4A68 0038                  		tst.w	$38(a0)
0000DC0C 6700                       		beq.s	loc_B902
0000DC0E 5368 0038                  		subq.w	#1,$38(a0)
0000DC12 6000                       		bra.s	loc_B97C
0000DC14                            ; ===========================================================================
0000DC14                            
0000DC14                            loc_B902:
0000DC14 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DC18 0200 000F                  		andi.b	#$F,d0
0000DC1C 6600                       		bne.s	loc_B91C
0000DC1E 4A28 0001                  		tst.b	obRender(a0)
0000DC22 6A00                       		bpl.s	loc_B91C
0000DC2E                            
0000DC2E                            loc_B91C:
0000DC2E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC34 6400                       		bcc.s	loc_B97C
0000DC36 317C 0000 0032             		move.w	#0,$32(a0)
0000DC3C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DC42 317C 0000 0036             		move.w	#0,$36(a0)
0000DC48 6000                       		bra.s	loc_B97C
0000DC4A                            ; ===========================================================================
0000DC4A                            
0000DC4A                            loc_B938:
0000DC4A 3228 0034                  		move.w	$34(a0),d1
0000DC4E B268 0032                  		cmp.w	$32(a0),d1
0000DC52 6700                       		beq.s	loc_B97C
0000DC54 3028 0012                  		move.w	obVelY(a0),d0
0000DC58 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DC5E D168 0032                  		add.w	d0,$32(a0)
0000DC62 B268 0032                  		cmp.w	$32(a0),d1
0000DC66 6200                       		bhi.s	loc_B97C
0000DC68 3141 0032                  		move.w	d1,$32(a0)
0000DC6C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DC72 317C 0001 0036             		move.w	#1,$36(a0)
0000DC78 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC7E 4A28 0001                  		tst.b	obRender(a0)
0000DC82 6A00                       		bpl.s	loc_B97C
0000DC8E                            
0000DC8E                            loc_B97C:
0000DC8E 6000 FF62                  		bra.w	CStom_Restart
0000DC92                            ; ===========================================================================
0000DC92                            
0000DC92                            CStom_Type03:
0000DC92 3038 D008                  		move.w	(v_player+obX).w,d0
0000DC96 9068 0008                  		sub.w	obX(a0),d0
0000DC9A 6400                       		bcc.s	loc_B98C
0000DC9C 4440                       		neg.w	d0
0000DC9E                            
0000DC9E                            loc_B98C:
0000DC9E 0C40 0090                  		cmpi.w	#$90,d0
0000DCA2 6400                       		bcc.s	loc_B996
0000DCA4 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DCA8                            
0000DCA8                            loc_B996:
0000DCA8 6000 FF48                  		bra.w	CStom_Restart
0000DCA8 6000 FF48                  		bra.w	CStom_Restart
0000DCAC                            		include	"_incObj\45 Sideways Stomper.asm"
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            ; Object 45 - spiked metal block from beta version (MZ)
0000DCAC                            ; ---------------------------------------------------------------------------
0000DCAC                            
0000DCAC                            SideStomp:
0000DCAC 7000                       		moveq	#0,d0
0000DCAE 1028 0024                  		move.b	obRoutine(a0),d0
0000DCB2 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DCB6 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DCBA                            ; ===========================================================================
0000DCBA 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DCBC 0000                       		dc.w SStom_Solid-SStom_Index
0000DCBE 0000                       		dc.w loc_BA8E-SStom_Index
0000DCC0 0000                       		dc.w SStom_Display-SStom_Index
0000DCC2 0000                       		dc.w SStom_Pole-SStom_Index
0000DCC4                            
0000DCC4                            		;	routine		frame
0000DCC4                            		;		 xpos
0000DCC4 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DCC7 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DCCA 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DCCD 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DCD0                            
0000DCD0                            ;word_B9BE:	; Note that this indicates three subtypes
0000DCD0 3800                       SStom_Len:	dc.w $3800	; short
0000DCD2 A000                       		dc.w $A000	; long
0000DCD4 5000                       		dc.w $5000	; medium
0000DCD6                            ; ===========================================================================
0000DCD6                            
0000DCD6                            SStom_Main:	; Routine 0
0000DCD6 7000                       		moveq	#0,d0
0000DCD8 1028 0028                  		move.b	obSubtype(a0),d0
0000DCDC D040                       		add.w	d0,d0
0000DCDE 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DCE2 45F9 0000 DCC4             		lea	(SStom_Var).l,a2
0000DCE8 2248                       		movea.l	a0,a1
0000DCEA 7203                       		moveq	#3,d1
0000DCEC 6000                       		bra.s	@load
0000DCEE                            
0000DCEE                            	@loop:
0000DCEE 6100 0000                  		bsr.w	FindNextFreeObj
0000DCF2 6600                       		bne.s	@fail
0000DCF4                            
0000DCF4                            	@load:
0000DCF4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DCF8 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DCFC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DD02 101A                       		move.b	(a2)+,d0
0000DD04 4880                       		ext.w	d0
0000DD06 D068 0008                  		add.w	obX(a0),d0
0000DD0A 3340 0008                  		move.w	d0,obX(a1)
0000DD0E 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DD16 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DD1C 137C 0004 0001             		move.b	#4,obRender(a1)
0000DD22 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DD28 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DD2E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DD34 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DD3A 3342 0034                  		move.w	d2,$34(a1)
0000DD3E 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DD44 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DD48 6600                       		bne.s	@notspikes	; if not, branch
0000DD4A 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DD50                            
0000DD50                            	@notspikes:
0000DD50 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DD54 2348 003C                  		move.l	a0,$3C(a1)
0000DD58 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DD5C                            
0000DD5C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DD62                            
0000DD62                            	@fail:
0000DD62 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DD68                            
0000DD68                            SStom_Solid:	; Routine 2
0000DD68 3F28 0008                  		move.w	obX(a0),-(sp)
0000DD6C 6100 0000                  		bsr.w	SStom_Move
0000DD70 323C 0017                  		move.w	#$17,d1
0000DD74 343C 0020                  		move.w	#$20,d2
0000DD78 363C 0020                  		move.w	#$20,d3
0000DD7C 381F                       		move.w	(sp)+,d4
0000DD7E 6100 0000                  		bsr.w	SolidObject
0000DD82 6100 0000                  		bsr.w	DisplaySprite
0000DD86 6000 0000                  		bra.w	SStom_ChkDel
0000DD8A                            ; ===========================================================================
0000DD8A                            
0000DD8A                            SStom_Pole:	; Routine 8
0000DD8A 2268 003C                  		movea.l	$3C(a0),a1
0000DD8E 1029 0032                  		move.b	$32(a1),d0
0000DD92 0600 0010                  		addi.b	#$10,d0
0000DD96 EA08                       		lsr.b	#5,d0
0000DD98 5600                       		addq.b	#3,d0
0000DD9A 1140 001A                  		move.b	d0,obFrame(a0)
0000DD9E                            
0000DD9E                            loc_BA8E:	; Routine 4
0000DD9E 2268 003C                  		movea.l	$3C(a0),a1
0000DDA2 7000                       		moveq	#0,d0
0000DDA4 1029 0032                  		move.b	$32(a1),d0
0000DDA8 4440                       		neg.w	d0
0000DDAA D068 0030                  		add.w	$30(a0),d0
0000DDAE 3140 0008                  		move.w	d0,obX(a0)
0000DDB2                            
0000DDB2                            SStom_Display:	; Routine 6
0000DDB2 6100 0000                  		bsr.w	DisplaySprite
0000DDB6                            
0000DDB6                            SStom_ChkDel:
0000DDD4 4E75                       		rts	
0000DDD6                            
0000DDD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDD6                            
0000DDD6                            
0000DDD6                            SStom_Move:
0000DDD6 7000                       		moveq	#0,d0
0000DDD8 1028 0028                  		move.b	obSubtype(a0),d0
0000DDDC D040                       		add.w	d0,d0
0000DDDE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DDE2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DDE6                            ; End of function SStom_Move
0000DDE6                            
0000DDE6                            ; ===========================================================================
0000DDE6                            		; This indicates only two subtypes... that do the same thing
0000DDE6                            		; Compare to SStom_Len. This breaks subtype 02
0000DDE6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DDE8 0000                       		dc.w loc_BADA-off_BAD6
0000DDEA                            ; ===========================================================================
0000DDEA                            
0000DDEA                            loc_BADA:
0000DDEA 4A68 0036                  		tst.w	$36(a0)
0000DDEE 6700                       		beq.s	loc_BB08
0000DDF0 4A68 0038                  		tst.w	$38(a0)
0000DDF4 6700                       		beq.s	loc_BAEC
0000DDF6 5368 0038                  		subq.w	#1,$38(a0)
0000DDFA 6000                       		bra.s	loc_BB3C
0000DDFC                            ; ===========================================================================
0000DDFC                            
0000DDFC                            loc_BAEC:
0000DDFC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DE02 6400                       		bcc.s	loc_BB3C
0000DE04 317C 0000 0032             		move.w	#0,$32(a0)
0000DE0A 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE10 317C 0000 0036             		move.w	#0,$36(a0)
0000DE16 6000                       		bra.s	loc_BB3C
0000DE18                            ; ===========================================================================
0000DE18                            
0000DE18                            loc_BB08:
0000DE18 3228 0034                  		move.w	$34(a0),d1
0000DE1C B268 0032                  		cmp.w	$32(a0),d1
0000DE20 6700                       		beq.s	loc_BB3C
0000DE22 3028 0010                  		move.w	obVelX(a0),d0
0000DE26 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DE2C D168 0032                  		add.w	d0,$32(a0)
0000DE30 B268 0032                  		cmp.w	$32(a0),d1
0000DE34 6200                       		bhi.s	loc_BB3C
0000DE36 3141 0032                  		move.w	d1,$32(a0)
0000DE3A 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE40 317C 0001 0036             		move.w	#1,$36(a0)
0000DE46 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DE4C                            
0000DE4C                            loc_BB3C:
0000DE4C 7000                       		moveq	#0,d0
0000DE4E 1028 0032                  		move.b	$32(a0),d0
0000DE52 4440                       		neg.w	d0
0000DE54 D068 0030                  		add.w	$30(a0),d0
0000DE58 3140 0008                  		move.w	d0,obX(a0)
0000DE5C 4E75                       		rts	
0000DE5C 4E75                       		rts	
0000DE5E                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DE5E                            ; ---------------------------------------------------------------------------
0000DE5E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DE5E                            ; ---------------------------------------------------------------------------
0000DE5E                            Map_CStom_internal:
0000DE5E 0000                       		dc.w @wideblock-Map_CStom_internal
0000DE60 0000                       		dc.w @spikes-Map_CStom_internal
0000DE62 0000                       		dc.w @ceiling-Map_CStom_internal
0000DE64 0000                       		dc.w @chain1-Map_CStom_internal
0000DE66 0000                       		dc.w @chain2-Map_CStom_internal
0000DE68 0000                       		dc.w @chain3-Map_CStom_internal
0000DE6A 0000                       		dc.w @chain4-Map_CStom_internal
0000DE6C 0000                       		dc.w @chain5-Map_CStom_internal
0000DE6E 0000                       		dc.w @chain5-Map_CStom_internal
0000DE70 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DE72 0000                       		dc.w @smallblock-Map_CStom_internal
0000DE74 05                         @wideblock:	dc.b 5
0000DE75 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DE7A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DE7F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE84 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DE89 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DE8E 05                         @spikes:	dc.b 5
0000DE8F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DE94 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DE99 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DE9E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DEA3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DEA8 01                         @ceiling:	dc.b 1
0000DEA9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DEAE 02                         @chain1:	dc.b 2
0000DEAF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEB4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEB9 04                         @chain2:	dc.b 4
0000DEBA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEBF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEC4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEC9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DECE 06                         @chain3:	dc.b 6
0000DECF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DED4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DED9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEDE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEE3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEE8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEED 08                         @chain4:	dc.b 8
0000DEEE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DEF3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DEF8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DEFD D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF02 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF07 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF0C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF11 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF16 0A                         @chain5:	dc.b $A
0000DF17 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DF1C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DF21 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DF26 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DF2B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF30 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF35 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF3A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF3F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF44 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF49 05                         @mediumblock:	dc.b 5
0000DF4A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DF4F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DF54 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DF59 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DF5E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DF63 01                         @smallblock:	dc.b 1
0000DF64 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DF6A 00                         		even
0000DF6A 00                         		even
0000DF6A                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DF6A                            ; ---------------------------------------------------------------------------
0000DF6A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DF6A                            ; ---------------------------------------------------------------------------
0000DF6A                            Map_SStom_internal:
0000DF6A 0000                       		dc.w @block-Map_SStom_internal
0000DF6C 0000                       		dc.w @spikes-Map_SStom_internal
0000DF6E 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DF70 0000                       		dc.w @pole1-Map_SStom_internal
0000DF72 0000                       		dc.w @pole2-Map_SStom_internal
0000DF74 0000                       		dc.w @pole3-Map_SStom_internal
0000DF76 0000                       		dc.w @pole4-Map_SStom_internal
0000DF78 0000                       		dc.w @pole5-Map_SStom_internal
0000DF7A 0000                       		dc.w @pole5-Map_SStom_internal
0000DF7C 03                         @block:		dc.b 3
0000DF7D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DF82 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DF87 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DF8C 03                         @spikes:	dc.b 3
0000DF8D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DF92 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DF97 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DF9C 01                         @wallbracket:	dc.b 1
0000DF9D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DFA2 02                         @pole1:		dc.b 2
0000DFA3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DFA8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFAD 04                         @pole2:		dc.b 4
0000DFAE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFB3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFB8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFBD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFC2 06                         @pole3:		dc.b 6
0000DFC3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFC8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFCD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFD2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFD7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFDC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFE1 08                         @pole4:		dc.b 8
0000DFE2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFE7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFEC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFF1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFF6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFFB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E000 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E005 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E00A 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000E00B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E010 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E015 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E01A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E01F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E024 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E029 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E02E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E033 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E038 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E03D                            		; @pole6 should be here, but it isn't...
0000E03E 00                         		even
0000E03E 00                         		even
0000E03E                            
0000E03E                            		include	"_incObj\32 Button.asm"
0000E03E                            ; ---------------------------------------------------------------------------
0000E03E                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E03E                            ; ---------------------------------------------------------------------------
0000E03E                            
0000E03E                            Button:
0000E03E 7000                       		moveq	#0,d0
0000E040 1028 0024                  		move.b	obRoutine(a0),d0
0000E044 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E048 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E04C                            ; ===========================================================================
0000E04C 0000                       But_Index:	dc.w But_Main-But_Index
0000E04E 0000                       		dc.w But_Pressed-But_Index
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            But_Main:	; Routine 0
0000E050 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E054 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E05C 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E062 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E068 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E06A                            
0000E06A 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E070                            
0000E070                            	But_IsMZ:
0000E070 117C 0004 0001             		move.b	#4,obRender(a0)
0000E076 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E07C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E082 5668 000C                  		addq.w	#3,obY(a0)
0000E086                            
0000E086                            But_Pressed:	; Routine 2
0000E086 4A28 0001                  		tst.b	obRender(a0)
0000E08A 6A00                       		bpl.s	But_Display
0000E08C 323C 001B                  		move.w	#$1B,d1
0000E090 343C 0005                  		move.w	#5,d2
0000E094 363C 0005                  		move.w	#5,d3
0000E098 3828 0008                  		move.w	obX(a0),d4
0000E09C 6100 0000                  		bsr.w	SolidObject
0000E0A0 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E0A6 1028 0028                  		move.b	obSubtype(a0),d0
0000E0AA 0240 000F                  		andi.w	#$F,d0
0000E0AE 47F8 F7E0                  		lea	(f_switch).w,a3
0000E0B2 47F3 0000                  		lea	(a3,d0.w),a3
0000E0B6 7600                       		moveq	#0,d3
0000E0B8 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E0BE 6700                       		beq.s	loc_BDB2
0000E0C0 7607                       		moveq	#7,d3
0000E0C2                            
0000E0C2                            loc_BDB2:
0000E0C2 4A28 0028                  		tst.b	obSubtype(a0)
0000E0C6 6A00                       		bpl.s	loc_BDBE
0000E0C8 6100 0000                  		bsr.w	But_MZBlock
0000E0CC 6600                       		bne.s	loc_BDC8
0000E0CE                            
0000E0CE                            loc_BDBE:
0000E0CE 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E0D2 6600                       		bne.s	loc_BDC8
0000E0D4 0793                       		bclr	d3,(a3)
0000E0D6 6000                       		bra.s	loc_BDDE
0000E0D8                            ; ===========================================================================
0000E0D8                            
0000E0D8                            loc_BDC8:
0000E0D8 4A13                       		tst.b	(a3)
0000E0DA 6600                       		bne.s	loc_BDD6
0000E0E6                            
0000E0E6                            loc_BDD6:
0000E0E6 07D3                       		bset	d3,(a3)
0000E0E8 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E0EE                            
0000E0EE                            loc_BDDE:
0000E0EE 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E0F4 6700                       		beq.s	But_Display
0000E0F6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E0FA 6A00                       		bpl.s	But_Display
0000E0FC 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E102 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E108                            
0000E108                            But_Display:
0000E108 6100 0000                  		bsr.w	DisplaySprite
0000E12A 4E75                       		rts	
0000E12C                            ; ===========================================================================
0000E12C                            
0000E12C                            But_Delete:
0000E12C 6100 0000                  		bsr.w	DeleteObject
0000E130 4E75                       		rts	
0000E132                            
0000E132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E132                            
0000E132                            
0000E132                            But_MZBlock:
0000E132 3F03                       		move.w	d3,-(sp)
0000E134 3428 0008                  		move.w	obX(a0),d2
0000E138 3628 000C                  		move.w	obY(a0),d3
0000E13C 0442 0010                  		subi.w	#$10,d2
0000E140 5143                       		subq.w	#8,d3
0000E142 383C 0020                  		move.w	#$20,d4
0000E146 3A3C 0010                  		move.w	#$10,d5
0000E14A 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E14E 3C3C 005F                  		move.w	#$5F,d6
0000E152                            
0000E152                            But_MZLoop:
0000E152 4A29 0001                  		tst.b	obRender(a1)
0000E156 6A00                       		bpl.s	loc_BE4E
0000E158 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E15C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E15E                            
0000E15E                            loc_BE4E:
0000E15E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E162 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E166                            
0000E166 361F                       		move.w	(sp)+,d3
0000E168 7000                       		moveq	#0,d0
0000E16A                            
0000E16A                            locret_BE5A:
0000E16A 4E75                       		rts	
0000E16C                            ; ===========================================================================
0000E16C 1010                       But_MZData:	dc.b $10, $10
0000E16E                            ; ===========================================================================
0000E16E                            
0000E16E                            loc_BE5E:
0000E16E 7001                       		moveq	#1,d0
0000E170 0240 003F                  		andi.w	#$3F,d0
0000E174 D040                       		add.w	d0,d0
0000E176 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E17A 121A                       		move.b	(a2)+,d1
0000E17C 4881                       		ext.w	d1
0000E17E 3029 0008                  		move.w	obX(a1),d0
0000E182 9041                       		sub.w	d1,d0
0000E184 9042                       		sub.w	d2,d0
0000E186 6400                       		bcc.s	loc_BE80
0000E188 D241                       		add.w	d1,d1
0000E18A D041                       		add.w	d1,d0
0000E18C 6500                       		bcs.s	loc_BE84
0000E18E 60CE                       		bra.s	loc_BE4E
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            loc_BE80:
0000E190 B044                       		cmp.w	d4,d0
0000E192 62CA                       		bhi.s	loc_BE4E
0000E194                            
0000E194                            loc_BE84:
0000E194 121A                       		move.b	(a2)+,d1
0000E196 4881                       		ext.w	d1
0000E198 3029 000C                  		move.w	obY(a1),d0
0000E19C 9041                       		sub.w	d1,d0
0000E19E 9043                       		sub.w	d3,d0
0000E1A0 6400                       		bcc.s	loc_BE9A
0000E1A2 D241                       		add.w	d1,d1
0000E1A4 D041                       		add.w	d1,d0
0000E1A6 6500                       		bcs.s	loc_BE9E
0000E1A8 60B4                       		bra.s	loc_BE4E
0000E1AA                            ; ===========================================================================
0000E1AA                            
0000E1AA                            loc_BE9A:
0000E1AA B045                       		cmp.w	d5,d0
0000E1AC 62B0                       		bhi.s	loc_BE4E
0000E1AE                            
0000E1AE                            loc_BE9E:
0000E1AE 361F                       		move.w	(sp)+,d3
0000E1B0 7001                       		moveq	#1,d0
0000E1B2 4E75                       		rts	
0000E1B4                            ; End of function But_MZBlock
0000E1B4                            ; End of function But_MZBlock
0000E1B4                            Map_But:	include	"_maps\Button.asm"
0000E1B4                            ; ---------------------------------------------------------------------------
0000E1B4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E1B4                            ; ---------------------------------------------------------------------------
0000E1B4                            Map_But_internal:
0000E1B4 0000                       		dc.w byte_BEAC-Map_But_internal
0000E1B6 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1B8 0000                       		dc.w byte_BEC2-Map_But_internal
0000E1BA 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1BC 02                         byte_BEAC:	dc.b 2
0000E1BD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E1C2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E1C7 02                         byte_BEB7:	dc.b 2
0000E1C8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E1CD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E1D2 02                         byte_BEC2:	dc.b 2
0000E1D3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E1D8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E1DD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E1E2                            		even
0000E1E2                            		even
0000E1E2                            
0000E1E2                            		include	"_incObj\33 Pushable Blocks.asm"
0000E1E2                            ; ---------------------------------------------------------------------------
0000E1E2                            ; Object 33 - pushable blocks (MZ, LZ)
0000E1E2                            ; ---------------------------------------------------------------------------
0000E1E2                            
0000E1E2                            PushBlock:
0000E1E2 7000                       		moveq	#0,d0
0000E1E4 1028 0024                  		move.b	obRoutine(a0),d0
0000E1E8 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E1EC 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E1F0                            ; ===========================================================================
0000E1F0 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E1F2 0000                       		dc.w loc_BF6E-PushB_Index
0000E1F4 0000                       		dc.w loc_C02C-PushB_Index
0000E1F6                            
0000E1F6 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E1F8 4001                       		dc.b $40, 1
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            PushB_Main:	; Routine 0
0000E1FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E1FE 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E204 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E20A 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E212 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E218 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E21E 6600                       		bne.s	@notLZ
0000E220 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E226                            
0000E226                            	@notLZ:
0000E226 117C 0004 0001             		move.b	#4,obRender(a0)
0000E22C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E232 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E238 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E23E 7000                       		moveq	#0,d0
0000E240 1028 0028                  		move.b	obSubtype(a0),d0
0000E244 D040                       		add.w	d0,d0
0000E246 0240 000E                  		andi.w	#$E,d0
0000E24A 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E24E 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E252 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E256 4A28 0028                  		tst.b	obSubtype(a0)
0000E25A 6700                       		beq.s	@chkgone
0000E25C 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E262                            
0000E262                            	@chkgone:
0000E262 45F8 FC00                  		lea	(v_objstate).w,a2
0000E266 7000                       		moveq	#0,d0
0000E268 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E26C 6700                       		beq.s	loc_BF6E
0000E26E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E274 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E27A 6600 0000                  		bne.w	DeleteObject
0000E27E                            
0000E27E                            loc_BF6E:	; Routine 2
0000E27E 4A28 0032                  		tst.b	$32(a0)
0000E282 6600 0000                  		bne.w	loc_C046
0000E286 7200                       		moveq	#0,d1
0000E288 1228 0014                  		move.b	obActWid(a0),d1
0000E28C 0641 000B                  		addi.w	#$B,d1
0000E290 343C 0010                  		move.w	#$10,d2
0000E294 363C 0011                  		move.w	#$11,d3
0000E298 3828 0008                  		move.w	obX(a0),d4
0000E29C 6100 0000                  		bsr.w	loc_C186
0000E2A0 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E2A6 6600                       		bne.s	loc_BFC6	; if not, branch
0000E2A8 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E2AE 3028 0008                  		move.w	obX(a0),d0
0000E2B2 0C40 0A20                  		cmpi.w	#$A20,d0
0000E2B6 6500                       		bcs.s	loc_BFC6
0000E2B8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E2BC 6400                       		bcc.s	loc_BFC6
0000E2BE 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E2C2 0440 001C                  		subi.w	#$1C,d0
0000E2C6 3140 000C                  		move.w	d0,obY(a0)
0000E2CA 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E2D0 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E2D6                            
0000E2D6                            	loc_BFC6:
0000E2F2 6000 0000                  		bra.w	DisplaySprite
0000E2F6                            ; ===========================================================================
0000E2F6                            
0000E2F6                            loc_ppppp:
0000E312 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E318 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E31E 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E324 6000                       		bra.s	loc_C02C
0000E326                            ; ===========================================================================
0000E326                            
0000E326                            loc_C016:
0000E326 45F8 FC00                  		lea	(v_objstate).w,a2
0000E32A 7000                       		moveq	#0,d0
0000E32C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E330 6700                       		beq.s	loc_C028
0000E332 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E338                            
0000E338                            loc_C028:
0000E338 6000 0000                  		bra.w	DeleteObject
0000E33C                            ; ===========================================================================
0000E33C                            
0000E33C                            loc_C02C:	; Routine 4
0000E33C 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E340 6700                       		beq.s	locret_C044
0000E342 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E348 4228 0032                  		clr.b	$32(a0)
0000E34C 4268 0010                  		clr.w	obVelX(a0)
0000E350 4268 0012                  		clr.w	obVelY(a0)
0000E354                            
0000E354                            locret_C044:
0000E354 4E75                       		rts	
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            loc_C046:
0000E356 3F28 0008                  		move.w	obX(a0),-(sp)
0000E35A 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E360 6400                       		bcc.s	loc_C056
0000E362 6100 0000                  		bsr.w	SpeedToPos
0000E366                            
0000E366                            loc_C056:
0000E366 0828 0001 0022             		btst	#1,obStatus(a0)
0000E36C 6700                       		beq.s	loc_C0A0
0000E36E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E374 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E37A 4A41                       		tst.w	d1
0000E37C 6A00 0000                  		bpl.w	loc_C09E
0000E380 D368 000C                  		add.w	d1,obY(a0)
0000E384 4268 0012                  		clr.w	obVelY(a0)
0000E388 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E38E 3011                       		move.w	(a1),d0
0000E390 0240 03FF                  		andi.w	#$3FF,d0
0000E394 0C40 016A                  		cmpi.w	#$16A,d0
0000E398 6500                       		bcs.s	loc_C09E
0000E39A 3028 0030                  		move.w	$30(a0),d0
0000E39E E640                       		asr.w	#3,d0
0000E3A0 3140 0010                  		move.w	d0,obVelX(a0)
0000E3A4 117C 0001 0032             		move.b	#1,$32(a0)
0000E3AA 4268 000E                  		clr.w	$E(a0)
0000E3AE                            
0000E3AE                            loc_C09E:
0000E3AE 6000                       		bra.s	loc_C0E6
0000E3B0                            ; ===========================================================================
0000E3B0                            
0000E3B0                            loc_C0A0:
0000E3B0 4A68 0010                  		tst.w	obVelX(a0)
0000E3B4 6700 0000                  		beq.w	loc_C0D6
0000E3B8 6B00                       		bmi.s	loc_C0BC
0000E3BA 7600                       		moveq	#0,d3
0000E3BC 1628 0014                  		move.b	obActWid(a0),d3
0000E3C0 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E3C6 4A41                       		tst.w	d1		; has block touched a wall?
0000E3C8 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3CA 6000                       		bra.s	loc_C0E6
0000E3CC                            ; ===========================================================================
0000E3CC                            
0000E3CC                            loc_C0BC:
0000E3CC 7600                       		moveq	#0,d3
0000E3CE 1628 0014                  		move.b	obActWid(a0),d3
0000E3D2 4643                       		not.w	d3
0000E3D4 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3DA 4A41                       		tst.w	d1		; has block touched a wall?
0000E3DC 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3DE 6000                       		bra.s	loc_C0E6
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            PushB_StopPush:
0000E3E0 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E3E4 6000                       		bra.s	loc_C0E6
0000E3E6                            ; ===========================================================================
0000E3E6                            
0000E3E6                            loc_C0D6:
0000E3E6 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E3EE 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E3F4 6400                       		bcc.s	loc_C104
0000E3F6                            
0000E3F6                            loc_C0E6:
0000E3F6 7200                       		moveq	#0,d1
0000E3F8 1228 0014                  		move.b	obActWid(a0),d1
0000E3FC 0641 000B                  		addi.w	#$B,d1
0000E400 343C 0010                  		move.w	#$10,d2
0000E404 363C 0011                  		move.w	#$11,d3
0000E408 381F                       		move.w	(sp)+,d4
0000E40A 6100 0000                  		bsr.w	loc_C186
0000E40E 6100                       		bsr.s	PushB_ChkLava
0000E410 6000 FEC4                  		bra.w	loc_BFC6
0000E414                            ; ===========================================================================
0000E414                            
0000E414                            loc_C104:
0000E414 381F                       		move.w	(sp)+,d4
0000E416 43F8 D000                  		lea	(v_player).w,a1
0000E41A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E420 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E426 6000 FECE                  		bra.w	loc_ppppp
0000E42A                            ; ===========================================================================
0000E42A                            
0000E42A                            PushB_ChkLava:
0000E42A 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E430 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E432 343C FFE0                  		move.w	#-$20,d2
0000E436 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E43C 6700                       		beq.s	PushB_LoadLava
0000E43E 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E444 6700                       		beq.s	PushB_LoadLava
0000E446 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E44C 6700                       		beq.s	PushB_LoadLava
0000E44E 4E75                       		rts	
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            PushB_ChkLava2:
0000E450 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E456 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E458 343C 0020                  		move.w	#$20,d2
0000E45C 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E462 6700                       		beq.s	PushB_LoadLava
0000E464 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E46A 6700                       		beq.s	PushB_LoadLava
0000E46C                            
0000E46C                            PushB_NoLava:
0000E46C 4E75                       		rts	
0000E46E                            ; ===========================================================================
0000E46E                            
0000E46E                            PushB_LoadLava:
0000E46E 6100 0000                  		bsr.w	FindFreeObj
0000E472 6600                       		bne.s	locret_C184
0000E474 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E478 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E47E D569 0008                  		add.w	d2,obX(a1)
0000E482 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E488 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E48E 2348 003C                  		move.l	a0,$3C(a1)
0000E492                            
0000E492                            locret_C184:
0000E492 4E75                       		rts	
0000E494                            ; ===========================================================================
0000E494                            
0000E494                            loc_C186:
0000E494 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E498 6700 0000                  		beq.w	loc_C218
0000E49C 5500                       		subq.b	#2,d0
0000E49E 6600                       		bne.s	loc_C1AA
0000E4A0 6100 AD66                  		bsr.w	ExitPlatform
0000E4A4 0829 0003 0022             		btst	#3,obStatus(a1)
0000E4AA 6600                       		bne.s	loc_C1A4
0000E4AC 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4B0 4E75                       		rts	
0000E4B2                            ; ===========================================================================
0000E4B2                            
0000E4B2                            loc_C1A4:
0000E4B2 3404                       		move.w	d4,d2
0000E4B4 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E4B8                            ; ===========================================================================
0000E4B8                            
0000E4B8                            loc_C1AA:
0000E4B8 5500                       		subq.b	#2,d0
0000E4BA 6600                       		bne.s	loc_C1F2
0000E4BC 6100 0000                  		bsr.w	SpeedToPos
0000E4C0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E4C6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4CC 4A41                       		tst.w	d1
0000E4CE 6A00 0000                  		bpl.w	locret_C1F0
0000E4D2 D368 000C                  		add.w	d1,obY(a0)
0000E4D6 4268 0012                  		clr.w	obVelY(a0)
0000E4DA 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4DE 3011                       		move.w	(a1),d0
0000E4E0 0240 03FF                  		andi.w	#$3FF,d0
0000E4E4 0C40 016A                  		cmpi.w	#$16A,d0
0000E4E8 6500                       		bcs.s	locret_C1F0
0000E4EA 3028 0030                  		move.w	$30(a0),d0
0000E4EE E640                       		asr.w	#3,d0
0000E4F0 3140 0010                  		move.w	d0,obVelX(a0)
0000E4F4 117C 0001 0032             		move.b	#1,$32(a0)
0000E4FA 4268 000E                  		clr.w	obY+2(a0)
0000E4FE                            
0000E4FE                            locret_C1F0:
0000E4FE 4E75                       		rts	
0000E500                            ; ===========================================================================
0000E500                            
0000E500                            loc_C1F2:
0000E500 6100 0000                  		bsr.w	SpeedToPos
0000E504 3028 0008                  		move.w	obX(a0),d0
0000E508 0240 000C                  		andi.w	#$C,d0
0000E50C 6600 0000                  		bne.w	locret_C2E4
0000E510 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E516 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E51C 4268 0010                  		clr.w	obVelX(a0)
0000E520 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E524 4E75                       		rts	
0000E526                            ; ===========================================================================
0000E526                            
0000E526                            loc_C218:
0000E526 6100 0000                  		bsr.w	Solid_ChkEnter
0000E52A 4A44                       		tst.w	d4
0000E52C 6700 0000                  		beq.w	locret_C2E4
0000E530 6B00 0000                  		bmi.w	locret_C2E4
0000E534 4A28 0032                  		tst.b	$32(a0)
0000E538 6700                       		beq.s	loc_C230
0000E53A 6000 0000                  		bra.w	locret_C2E4
0000E53E                            ; ===========================================================================
0000E53E                            
0000E53E                            loc_C230:
0000E53E 4A40                       		tst.w	d0
0000E540 6700 0000                  		beq.w	locret_C2E4
0000E544 6B00                       		bmi.s	loc_C268
0000E546 0829 0000 0022             		btst	#0,obStatus(a1)
0000E54C 6600 0000                  		bne.w	locret_C2E4
0000E550 3F00                       		move.w	d0,-(sp)
0000E552 7600                       		moveq	#0,d3
0000E554 1628 0014                  		move.b	obActWid(a0),d3
0000E558 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E55E 301F                       		move.w	(sp)+,d0
0000E560 4A41                       		tst.w	d1
0000E562 6B00 0000                  		bmi.w	locret_C2E4
0000E566 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E56E 7001                       		moveq	#1,d0
0000E570 323C 0040                  		move.w	#$40,d1
0000E574 6000                       		bra.s	loc_C294
0000E576                            ; ===========================================================================
0000E576                            
0000E576                            loc_C268:
0000E576 0829 0000 0022             		btst	#0,obStatus(a1)
0000E57C 6700                       		beq.s	locret_C2E4
0000E57E 3F00                       		move.w	d0,-(sp)
0000E580 7600                       		moveq	#0,d3
0000E582 1628 0014                  		move.b	obActWid(a0),d3
0000E586 4643                       		not.w	d3
0000E588 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E58E 301F                       		move.w	(sp)+,d0
0000E590 4A41                       		tst.w	d1
0000E592 6B00                       		bmi.s	locret_C2E4
0000E594 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E59C 70FF                       		moveq	#-1,d0
0000E59E 323C FFC0                  		move.w	#-$40,d1
0000E5A2                            
0000E5A2                            loc_C294:
0000E5A2 43F8 D000                  		lea	(v_player).w,a1
0000E5A6 D169 0008                  		add.w	d0,obX(a1)
0000E5AA 3341 0020                  		move.w	d1,obInertia(a1)
0000E5AE 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E5B4 3F00                       		move.w	d0,-(sp)
0000E5C0 301F                       		move.w	(sp)+,d0
0000E5C2 4A28 0028                  		tst.b	obSubtype(a0)
0000E5C6 6B00                       		bmi.s	locret_C2E4
0000E5C8 3F00                       		move.w	d0,-(sp)
0000E5CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E5D0 301F                       		move.w	(sp)+,d0
0000E5D2 0C41 0004                  		cmpi.w	#4,d1
0000E5D6 6F00                       		ble.s	loc_C2E0
0000E5D8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E5DE 4A40                       		tst.w	d0
0000E5E0 6A00                       		bpl.s	loc_C2D8
0000E5E2 4468 0010                  		neg.w	obVelX(a0)
0000E5E6                            
0000E5E6                            loc_C2D8:
0000E5E6 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E5EC 6000                       		bra.s	locret_C2E4
0000E5EE                            ; ===========================================================================
0000E5EE                            
0000E5EE                            loc_C2E0:
0000E5EE D368 000C                  		add.w	d1,obY(a0)
0000E5F2                            
0000E5F2                            locret_C2E4:
0000E5F2 4E75                       		rts	
0000E5F2 4E75                       		rts	
0000E5F4                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E5F4                            ; ---------------------------------------------------------------------------
0000E5F4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E5F4                            ; ---------------------------------------------------------------------------
0000E5F4                            Map_Push_internal:
0000E5F4 0000                       		dc.w @single-Map_Push_internal
0000E5F6 0000                       		dc.w @four-Map_Push_internal
0000E5F8 01                         @single:	dc.b 1
0000E5F9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E5FE 04                         @four:		dc.b 4
0000E5FF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E604 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E609 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E60E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E614 00                         		even
0000E614 00                         		even
0000E614                            
0000E614                            		include	"_incObj\34 Title Cards.asm"
0000E614                            ; ---------------------------------------------------------------------------
0000E614                            ; Object 34 - zone title cards
0000E614                            ; ---------------------------------------------------------------------------
0000E614                            
0000E614                            TitleCard:
0000E614 7000                       		moveq	#0,d0
0000E616 1028 0024                  		move.b	obRoutine(a0),d0
0000E61A 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E61E 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E622                            ; ===========================================================================
0000E622 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E624 0000                       		dc.w Card_ChkPos-Card_Index
0000E626 0000                       		dc.w Card_Wait-Card_Index
0000E628 0000                       		dc.w Card_Wait-Card_Index
0000E62A                            
0000E62A =00000030                  card_mainX:	equ $30		; position for card to display on
0000E62A =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E62A                            ; ===========================================================================
0000E62A                            
0000E62A                            Card_CheckSBZ3:	; Routine 0
0000E62A 2248                       		movea.l	a0,a1
0000E62C 7000                       		moveq	#0,d0
0000E62E 1038 FE10                  		move.b	(v_zone).w,d0
0000E632 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E638 6600                       		bne.s	Card_CheckFZ
0000E63A 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E63C                            
0000E63C                            	Card_CheckFZ:
0000E63C 3400                       		move.w	d0,d2
0000E63E 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E644 6600                       		bne.s	Card_LoadConfig
0000E646 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E648 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E64A                            
0000E64A                            	Card_LoadConfig:
0000E64A 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E650 E948                       		lsl.w	#4,d0
0000E652 D6C0                       		adda.w	d0,a3
0000E654 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E65A 7203                       		moveq	#3,d1
0000E65C                            
0000E65C                            Card_Loop:
0000E65C 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E660 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E664 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E668 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E66C 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E670 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E674 101A                       		move.b	(a2)+,d0
0000E676 6600                       		bne.s	Card_ActNumber
0000E678 1002                       		move.b	d2,d0
0000E67A                            
0000E67A                            	Card_ActNumber:
0000E67A 0C00 0007                  		cmpi.b	#7,d0
0000E67E 6600                       		bne.s	Card_MakeSprite
0000E680 D038 FE11                  		add.b	(v_act).w,d0
0000E684 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E68A 6600                       		bne.s	Card_MakeSprite
0000E68C 5300                       		subq.b	#1,d0
0000E68E                            
0000E68E                            	Card_MakeSprite:
0000E68E 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E692 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E69A 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E6A0 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E6A6 137C 0000 0001             		move.b	#0,obRender(a1)
0000E6AC 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E6B2 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E6B8 43E9 0040                  		lea	$40(a1),a1	; next object
0000E6BC 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E6C0                            
0000E6C0                            Card_ChkPos:	; Routine 2
0000E6C0 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6C2 3028 0030                  		move.w	card_mainX(a0),d0
0000E6C6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E6CA 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E6CC 6C00                       		bge.s	Card_Move
0000E6CE 4441                       		neg.w	d1
0000E6D0                            
0000E6D0                            Card_Move:
0000E6D0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6D4                            
0000E6D4                            Card_NoMove:
0000E6D4 3028 0008                  		move.w	obX(a0),d0
0000E6D8 6B00                       		bmi.s	locret_C3D8
0000E6DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6DE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E6E0 6000 0000                  		bra.w	DisplaySprite
0000E6E4                            ; ===========================================================================
0000E6E4                            
0000E6E4                            locret_C3D8:
0000E6E4 4E75                       		rts	
0000E6E6                            ; ===========================================================================
0000E6E6                            
0000E6E6                            Card_Wait:	; Routine 4/6
0000E6E6 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E6EA 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E6EC 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E6F0 6000 0000                  		bra.w	DisplaySprite
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            Card_ChkPos2:
0000E6F4 4A28 0001                  		tst.b	obRender(a0)
0000E6F8 6A00                       		bpl.s	Card_ChangeArt
0000E6FA 7220                       		moveq	#$20,d1
0000E6FC 3028 0032                  		move.w	card_finalX(a0),d0
0000E700 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E704 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E706 6C00                       		bge.s	Card_Move2
0000E708 4441                       		neg.w	d1
0000E70A                            
0000E70A                            Card_Move2:
0000E70A D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E70E 3028 0008                  		move.w	obX(a0),d0
0000E712 6B00                       		bmi.s	locret_C412
0000E714 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E718 6400                       		bcc.s	locret_C412	; if yes, branch
0000E71A 6000 0000                  		bra.w	DisplaySprite
0000E71E                            ; ===========================================================================
0000E71E                            
0000E71E                            locret_C412:
0000E71E 4E75                       		rts	
0000E720                            ; ===========================================================================
0000E720                            
0000E720                            Card_ChangeArt:
0000E720 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E726 6600                       		bne.s	Card_Delete
0000E728 7000                       		moveq	#plcid_Explode,d0
0000E72A 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion patterns
0000E730 7000                       		moveq	#0,d0
0000E732 1038 FE10                  		move.b	(v_zone).w,d0
0000E736 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E73A 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal patterns
0000E740                            
0000E740                            Card_Delete:
0000E740 6000 0000                  		bra.w	DeleteObject
0000E744                            ; ===========================================================================
0000E744 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E746 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E748 00E4                       		dc.w $E4
0000E74A 0206                       		dc.b 2,	6
0000E74C 00EA                       		dc.w $EA
0000E74E 0207                       		dc.b 2,	7
0000E750 00E0                       		dc.w $E0
0000E752 020A                       		dc.b 2,	$A
0000E754                            ; ---------------------------------------------------------------------------
0000E754                            ; Title	card configuration data
0000E754                            ; Format:
0000E754                            ; 4 bytes per item (YYYY XXXX)
0000E754                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E754                            ; ---------------------------------------------------------------------------
0000E754 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E764 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E774 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E784 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E794 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E7A4 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E7B4 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E7C4                            ; ===========================================================================
0000E7C4                            ; ===========================================================================
0000E7C4                            		include	"_incObj\39 Game Over.asm"
0000E7C4                            ; ---------------------------------------------------------------------------
0000E7C4                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E7C4                            ; ---------------------------------------------------------------------------
0000E7C4                            
0000E7C4                            GameOverCard:
0000E7C4 7000                       		moveq	#0,d0
0000E7C6 1028 0024                  		move.b	obRoutine(a0),d0
0000E7CA 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E7CE 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E7D2                            ; ===========================================================================
0000E7D2 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E7D4 0000                       		dc.w Over_Move-Over_Index
0000E7D6 0000                       		dc.w Over_Wait-Over_Index
0000E7D8                            ; ===========================================================================
0000E7D8                            
0000E7D8                            Over_ChkPLC:	; Routine 0
0000E7D8 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E7DC 6700                       		beq.s	Over_Main	; if yes, branch
0000E7DE 4E75                       		rts	
0000E7E0                            ; ===========================================================================
0000E7E0                            
0000E7E0                            Over_Main:
0000E7E0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7E4 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E7EA 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E7F0 6700                       		beq.s	Over_1stWord	; if not, branch
0000E7F2 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E7F8                            
0000E7F8                            	Over_1stWord:
0000E7F8 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E7FE 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E806 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E80C 117C 0000 0001             		move.b	#0,obRender(a0)
0000E812 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E818                            
0000E818                            Over_Move:	; Routine 2
0000E818 7210                       		moveq	#$10,d1		; set horizontal speed
0000E81A 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E820 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E822 6500                       		bcs.s	Over_UpdatePos
0000E824 4441                       		neg.w	d1
0000E826                            
0000E826                            	Over_UpdatePos:
0000E826 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E82A 6000 0000                  		bra.w	DisplaySprite
0000E82E                            ; ===========================================================================
0000E82E                            
0000E82E                            Over_SetWait:
0000E82E 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E834 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E838 4E75                       		rts	
0000E83A                            ; ===========================================================================
0000E83A                            
0000E83A                            Over_Wait:	; Routine 4
0000E83A 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E83E 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E842 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E844 0828 0000 001A             		btst	#0,obFrame(a0)
0000E84A 6600                       		bne.s	Over_Display
0000E84C 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E850 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E852 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E856 6000 0000                  		bra.w	DisplaySprite
0000E85A                            ; ===========================================================================
0000E85A                            
0000E85A                            Over_ChgMode:
0000E85A 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E85E 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E860 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E866 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E86A 6600                       		bne.s	Over_Display	; if yes, branch
0000E86C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E872 6000                       		bra.s	Over_Display
0000E874                            ; ===========================================================================
0000E874                            
0000E874                            Over_ResetLvl:
0000E874 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E878 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E87E                            
0000E87E                            Over_Display:
0000E87E 6000 0000                  		bra.w	DisplaySprite
0000E87E 6000 0000                  		bra.w	DisplaySprite
0000E882                            		include	"_incObj\3A Got Through Card.asm"
0000E882                            ; ---------------------------------------------------------------------------
0000E882                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E882                            ; ---------------------------------------------------------------------------
0000E882                            
0000E882                            GotThroughCard:
0000E882 7000                       		moveq	#0,d0
0000E884 1028 0024                  		move.b	obRoutine(a0),d0
0000E888 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E88C 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E890                            ; ===========================================================================
0000E890 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E892 0000                       		dc.w Got_Move-Got_Index
0000E894 0000                       		dc.w Got_Wait-Got_Index
0000E896 0000                       		dc.w Got_TimeBonus-Got_Index
0000E898 0000                       		dc.w Got_Wait-Got_Index
0000E89A 0000                       		dc.w Got_NextLevel-Got_Index
0000E89C 0000                       		dc.w Got_Wait-Got_Index
0000E89E 0000                       		dc.w Got_Move2-Got_Index
0000E8A0 0000                       		dc.w loc_C766-Got_Index
0000E8A2                            
0000E8A2 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E8A2 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E8A2                            ; ===========================================================================
0000E8A2                            
0000E8A2                            Got_ChkPLC:	; Routine 0
0000E8A2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E8A6 6700                       		beq.s	Got_Main	; if yes, branch
0000E8A8 4E75                       		rts	
0000E8AA                            ; ===========================================================================
0000E8AA                            
0000E8AA                            Got_Main:
0000E8AA 2248                       		movea.l	a0,a1
0000E8AC 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E8B2 7206                       		moveq	#6,d1
0000E8B4                            
0000E8B4                            Got_Loop:
0000E8B4 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E8B8 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E8BC 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E8C0 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E8C4 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8C8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8CC 101A                       		move.b	(a2)+,d0
0000E8CE 0C00 0006                  		cmpi.b	#6,d0
0000E8D2 6600                       		bne.s	loc_C5CA
0000E8D4 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E8D8                            
0000E8D8                            	loc_C5CA:
0000E8D8 1340 001A                  		move.b	d0,obFrame(a1)
0000E8DC 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E8E4 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8EA 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8F0 43E9 0040                  		lea	$40(a1),a1
0000E8F4 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E8F8                            
0000E8F8                            Got_Move:	; Routine 2
0000E8F8 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8FA 3028 0030                  		move.w	got_mainX(a0),d0
0000E8FE B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E902 6700                       		beq.s	loc_C61A	; if yes, branch
0000E904 6C00                       		bge.s	Got_ChgPos
0000E906 4441                       		neg.w	d1
0000E908                            
0000E908                            	Got_ChgPos:
0000E908 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E90C                            
0000E90C                            	loc_C5FE:
0000E90C 3028 0008                  		move.w	obX(a0),d0
0000E910 6B00                       		bmi.s	locret_C60E
0000E912 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E916 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E918 6000 0000                  		bra.w	DisplaySprite
0000E91C                            ; ===========================================================================
0000E91C                            
0000E91C                            locret_C60E:
0000E91C 4E75                       		rts	
0000E91E                            ; ===========================================================================
0000E91E                            
0000E91E                            loc_C610:
0000E91E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E924 6000 0000                  		bra.w	Got_Move2
0000E928                            ; ===========================================================================
0000E928                            
0000E928                            loc_C61A:
0000E928 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E92E 67EE                       		beq.s	loc_C610
0000E930 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E936 66D4                       		bne.s	loc_C5FE
0000E938 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E93C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E942                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E942                            
0000E942                            Got_Wait:	; Routine 4, 8, $C
0000E942 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E946 6600                       		bne.s	Got_Display
0000E948 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E94C                            
0000E94C                            Got_Display:
0000E94C 6000 0000                  		bra.w	DisplaySprite
0000E950                            ; ===========================================================================
0000E950                            
0000E950                            Got_TimeBonus:	; Routine 6
0000E950 6100 0000                  		bsr.w	DisplaySprite
0000E954 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E95A 7000                       		moveq	#0,d0
0000E95C 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E960 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E962 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E966 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E96C                            
0000E96C                            Got_RingBonus:
0000E96C 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E970 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E972 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E976 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E97C                            
0000E97C                            Got_ChkBonus:
0000E97C 4A40                       		tst.w	d0		; is there any bonus?
0000E97E 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E98A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E98E 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E994 6600                       		bne.s	Got_SetDelay
0000E996 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E99A                            
0000E99A                            Got_SetDelay:
0000E99A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E9A0                            
0000E9A0                            locret_C692:
0000E9A0 4E75                       		rts	
0000E9A2                            ; ===========================================================================
0000E9A2                            
0000E9A2                            Got_AddBonus:
0000E9A2 4EB9 0000 0000             		jsr	(AddPoints).l
0000E9A8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9AC 0200 0003                  		andi.b	#3,d0
0000E9B0 66EE                       		bne.s	locret_C692
0000E9BC                            ; ===========================================================================
0000E9BC                            
0000E9BC                            Got_NextLevel:	; Routine $A
0000E9BC 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E9C2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E9C8 1038 FE10                  		move.b	(v_zone).w,d0
0000E9CC 0240 0007                  		andi.w	#7,d0
0000E9D0 E748                       		lsl.w	#3,d0
0000E9D2 1238 FE11                  		move.b	(v_act).w,d1
0000E9D6 0241 0003                  		andi.w	#3,d1
0000E9DA D241                       		add.w	d1,d1
0000E9DC D041                       		add.w	d1,d0
0000E9DE 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E9E2 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E9E6 4A40                       		tst.w	d0
0000E9E8 6600                       		bne.s	Got_ChkSS
0000E9EA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E9F0 6000                       		bra.s	Got_Display2
0000E9F2                            ; ===========================================================================
0000E9F2                            
0000E9F2                            Got_ChkSS:	
0000E9F2 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E9F6 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E9FA 6700                       		beq.s	VBla_08A
0000E9FC 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000EA0A 6000                       		bra.s	Got_Display2
0000EA0C 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EA12                            		
0000EA12                            ; ===========================================================================
0000EA12                            
0000EA12                            VBla_08A:
0000EA12 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA18                            
0000EA18                            Got_Display2:
0000EA18 6000 0000                  		bra.w	DisplaySprite
0000EA1C                            ; ===========================================================================
0000EA1C                            ; ---------------------------------------------------------------------------
0000EA1C                            ; Level	order array
0000EA1C                            ; ---------------------------------------------------------------------------
0000EA1C                            LevelOrder:
0000EA1C                            		; Green Hill Zone
0000EA1C 0001                       		dc.b id_GHZ, 1	; Act 2
0000EA1E 0002                       		dc.b id_GHZ, 2	; Act 2
0000EA20 0200                       		dc.b id_MZ, 0	; Act 3
0000EA22 0000                       		dc.b 0, 0
0000EA24                            
0000EA24                            		; Labyrinth Zone
0000EA24 0101                       		dc.b id_LZ, 1	; Act 1
0000EA26 0102                       		dc.b id_LZ, 2	; Act 2
0000EA28 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EA2A 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EA2C                            
0000EA2C                            		; Marble Zone
0000EA2C 0201                       		dc.b id_MZ, 1	; Act 1
0000EA2E 0202                       		dc.b id_MZ, 2	; Act 2
0000EA30 0502                       		dc.b id_SBZ, 2	; Act 3
0000EA32 0000                       		dc.b 0, 0
0000EA34                            
0000EA34                            		; Star Light Zone
0000EA34 0301                       		dc.b id_SLZ, 1	; Act 1
0000EA36 0302                       		dc.b id_SLZ, 2	; Act 2
0000EA38 0500                       		dc.b id_SBZ, 0	; Act 3
0000EA3A 0000                       		dc.b 0, 0
0000EA3C                            
0000EA3C                            		; Spring Yard Zone
0000EA3C 0502                       		dc.b id_SBZ, 2	; Act 1
0000EA3E 0402                       		dc.b id_SYZ, 2	; Act 2
0000EA40 0200                       		dc.b id_MZ,	 0	; Act 3
0000EA42 0000                       		dc.b 0, 0
0000EA44                            
0000EA44                            		; Scrap Brain Zone
0000EA44 0501                       		dc.b id_SBZ, 1	; Act 1
0000EA46 0103                       		dc.b id_LZ, 3	; Act 2
0000EA48 0000                       		dc.b 0, 0	; Final Zone
0000EA4A 0000                       		dc.b 0, 0
0000EA4C                            		even
0000EA4C                            ; ===========================================================================
0000EA4C                            
0000EA4C                            Got_Move2:	; Routine $E
0000EA4C 7220                       		moveq	#$20,d1		; set horizontal speed
0000EA4E 3028 0032                  		move.w	got_finalX(a0),d0
0000EA52 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EA56 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EA58 6C00                       		bge.s	Got_ChgPos2
0000EA5A 4441                       		neg.w	d1
0000EA5C                            
0000EA5C                            	Got_ChgPos2:
0000EA5C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA60 3028 0008                  		move.w	obX(a0),d0
0000EA64 6B00                       		bmi.s	locret_C748
0000EA66 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA6A 6400                       		bcc.s	locret_C748	; if yes, branch
0000EA6C 6000 0000                  		bra.w	DisplaySprite
0000EA70                            ; ===========================================================================
0000EA70                            
0000EA70                            locret_C748:
0000EA70 4E75                       		rts	
0000EA72                            ; ===========================================================================
0000EA72                            
0000EA72                            Got_SBZ2:
0000EA72 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EA78 6600 0000                  		bne.w	DeleteObject
0000EA7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA80 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EA84 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EA94                            ; ===========================================================================
0000EA94                            
0000EA94                            loc_C766:	; Routine $10
0000EA94 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EA98 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EA9E 6700 0000                  		beq.w	DeleteObject
0000EAA2 4E75                       		rts	
0000EAA4                            ; ===========================================================================
0000EAA4                            		;    x-start,	x-main,	y-main,
0000EAA4                            		;				routine, frame number
0000EAA4                            
0000EAA4 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EAAA 0200                       		dc.b 				2,	0
0000EAAC                            
0000EAAC FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EAB2 0201                       		dc.b 				2,	1
0000EAB4                            
0000EAB4 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EABA 0206                       		dc.b 				2,	6
0000EABC                            
0000EABC 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EAC2 0202                       		dc.b 				2,	2
0000EAC4                            
0000EAC4 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EACA 0203                       		dc.b 				2,	3
0000EACC                            
0000EACC 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EAD2 0204                       		dc.b 				2,	4
0000EAD4                            
0000EAD4 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EADA 0205                       		dc.b 				2,	5
0000EADA 0205                       		dc.b 				2,	5
0000EADC                            		include	"_incObj\7E Special Stage Results.asm"
0000EADC                            ; ---------------------------------------------------------------------------
0000EADC                            ; Object 7E - special stage results screen
0000EADC                            ; ---------------------------------------------------------------------------
0000EADC                            
0000EADC                            SSResult:
0000EADC 7000                       		moveq	#0,d0
0000EADE 1028 0024                  		move.b	obRoutine(a0),d0
0000EAE2 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EAE6 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EAEA                            ; ===========================================================================
0000EAEA 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EAEC 0000                       		dc.w SSR_Move-SSR_Index
0000EAEE 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF0 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EAF2 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF4 0000                       		dc.w SSR_Exit-SSR_Index
0000EAF6 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF8 0000                       		dc.w SSR_Continue-SSR_Index
0000EAFA 0000                       		dc.w SSR_Wait-SSR_Index
0000EAFC 0000                       		dc.w SSR_Exit-SSR_Index
0000EAFE 0000                       		dc.w loc_C91A-SSR_Index
0000EB00                            
0000EB00 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EB00                            ; ===========================================================================
0000EB00                            
0000EB00                            SSR_ChkPLC:	; Routine 0
0000EB00 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EB04 6700                       		beq.s	SSR_Main	; if yes, branch
0000EB06 4E75                       		rts	
0000EB08                            ; ===========================================================================
0000EB08                            
0000EB08                            SSR_Main:
0000EB08 2248                       		movea.l	a0,a1
0000EB0A 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EB10 7203                       		moveq	#3,d1
0000EB12 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EB18 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EB1A 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EB1C                            
0000EB1C                            	SSR_Loop:
0000EB1C 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EB20 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EB24 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EB28 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EB2C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EB30 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EB34 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EB3C 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EB42 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB48 43E9 0040                  		lea	$40(a1),a1
0000EB4C 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EB50                            
0000EB50 7007                       		moveq	#7,d0
0000EB52 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EB56 6700                       		beq.s	loc_C842
0000EB58 7000                       		moveq	#0,d0
0000EB5A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EB5E 6600                       		bne.s	loc_C842	; if not, branch
0000EB60 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EB62 317C 0018 0008             		move.w	#$18,obX(a0)
0000EB68 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EB6E                            
0000EB6E                            loc_C842:
0000EB6E 1140 001A                  		move.b	d0,obFrame(a0)
0000EB72                            
0000EB72                            SSR_Move:	; Routine 2
0000EB72 7210                       		moveq	#$10,d1		; set horizontal speed
0000EB74 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EB78 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EB7C 6700                       		beq.s	loc_C86C	; if yes, branch
0000EB7E 6C00                       		bge.s	SSR_ChgPos
0000EB80 4441                       		neg.w	d1
0000EB82                            
0000EB82                            SSR_ChgPos:
0000EB82 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EB86                            
0000EB86                            loc_C85A:
0000EB86 3028 0008                  		move.w	obX(a0),d0
0000EB8A 6B00                       		bmi.s	locret_C86A
0000EB8C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB90 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EB92 6000 0000                  		bra.w	DisplaySprite
0000EB96                            ; ===========================================================================
0000EB96                            
0000EB96                            locret_C86A:
0000EB96 4E75                       		rts	
0000EB98                            ; ===========================================================================
0000EB98                            
0000EB98                            loc_C86C:
0000EB98 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EB9E 66E6                       		bne.s	loc_C85A
0000EBA0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBA4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EBAA 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EBB0                            
0000EBB0                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EBB0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EBB4 6600                       		bne.s	SSR_Display
0000EBB6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBBA                            
0000EBBA                            SSR_Display:
0000EBBA 6000 0000                  		bra.w	DisplaySprite
0000EBBE                            ; ===========================================================================
0000EBBE                            
0000EBBE                            SSR_RingBonus:	; Routine 6
0000EBBE 6100 0000                  		bsr.w	DisplaySprite
0000EBC2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EBC8 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EBCC 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EBCE 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EBD4 700A                       		moveq	#10,d0		; add 10 to score
0000EBD6 4EB9 0000 0000             		jsr	(AddPoints).l
0000EBDC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EBE0 0200 0003                  		andi.b	#3,d0
0000EBE4 6600                       		bne.s	locret_C8EA
0000EBF0                            ; ===========================================================================
0000EBF0                            
0000EBF0                            loc_C8C4:
0000EBFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBFE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EC04 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EC0A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EC0C 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EC12 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EC16                            
0000EC16                            locret_C8EA:
0000EC16 4E75                       		rts	
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            SSR_Exit:	; Routine $A, $12
0000EC18 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EC1E 6000 0000                  		bra.w	DisplaySprite
0000EC22                            ; ===========================================================================
0000EC22                            
0000EC22                            SSR_Continue:	; Routine $E
0000EC22 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EC28 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EC38 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC3C 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EC42 6000 0000                  		bra.w	DisplaySprite
0000EC46                            ; ===========================================================================
0000EC46                            
0000EC46                            loc_C91A:	; Routine $14
0000EC46 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EC4A 0200 000F                  		andi.b	#$F,d0
0000EC4E 6600                       		bne.s	SSR_Display2
0000EC50 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EC56                            
0000EC56                            SSR_Display2:
0000EC56 6000 0000                  		bra.w	DisplaySprite
0000EC5A                            ; ===========================================================================
0000EC5A 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EC60 0200                       		dc.b 2,	0		; rountine number, frame number
0000EC62 0320 0120 0118             		dc.w $320, $120, $118
0000EC68 0201                       		dc.b 2,	1
0000EC6A 0360 0120 0128             		dc.w $360, $120, $128
0000EC70 0202                       		dc.b 2,	2
0000EC72 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EC78 0203                       		dc.b 2,	3
0000EC7A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EC80 0206                       		dc.b 2,	6
0000EC80 0206                       		dc.b 2,	6
0000EC82                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EC82                            ; ---------------------------------------------------------------------------
0000EC82                            ; Object 7F - chaos emeralds from the special stage results screen
0000EC82                            ; ---------------------------------------------------------------------------
0000EC82                            
0000EC82                            SSRChaos:
0000EC82 7000                       		moveq	#0,d0
0000EC84 1028 0024                  		move.b	obRoutine(a0),d0
0000EC88 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EC8C 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EC90                            ; ===========================================================================
0000EC90 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EC92 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EC94                            
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94                            ; X-axis positions for chaos emeralds
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000ECA0                            ; ===========================================================================
0000ECA0                            
0000ECA0                            SSRC_Main:	; Routine 0
0000ECA0 2248                       		movea.l	a0,a1
0000ECA2 45F9 0000 EC94             		lea	(SSRC_PosData).l,a2
0000ECA8 7400                       		moveq	#0,d2
0000ECAA 7200                       		moveq	#0,d1
0000ECAC 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000ECB0 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000ECB2 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000ECB6                            
0000ECB6                            	SSRC_Loop:
0000ECB6 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000ECBA 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000ECBE 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000ECC4 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000ECC8 1633 2000                  		move.b	(a3,d2.w),d3
0000ECCC 1343 001A                  		move.b	d3,obFrame(a1)
0000ECD0 1343 001C                  		move.b	d3,obAnim(a1)
0000ECD4 5202                       		addq.b	#1,d2
0000ECD6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000ECDA 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000ECE2 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000ECE8 137C 0000 0001             		move.b	#0,obRender(a1)
0000ECEE 43E9 0040                  		lea	$40(a1),a1	; next object
0000ECF2 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000ECF6                            
0000ECF6                            SSRC_Flash:	; Routine 2
0000ECF6 1028 001A                  		move.b	obFrame(a0),d0
0000ECFA 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000ED00 0C00 0006                  		cmpi.b	#6,d0
0000ED04 6600                       		bne.s	SSRC_Display
0000ED06 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000ED0C                            
0000ED0C                            	SSRC_Display:
0000ED0C 6000 0000                  		bra.w	DisplaySprite
0000ED0C 6000 0000                  		bra.w	DisplaySprite
0000ED10                            
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10                            ; Sprite mappings - zone title cards
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000ED12 0000                       		dc.w M_Card_LZ-Map_Card
0000ED14 0000                       		dc.w M_Card_MZ-Map_Card
0000ED16 0000                       		dc.w M_Card_SLZ-Map_Card
0000ED18 0000                       		dc.w M_Card_SYZ-Map_Card
0000ED1A 0000                       		dc.w M_Card_SBZ-Map_Card
0000ED1C 0000                       		dc.w M_Card_Zone-Map_Card
0000ED1E 0000                       		dc.w M_Card_Act1-Map_Card
0000ED20 0000                       		dc.w M_Card_Act2-Map_Card
0000ED22 0000                       		dc.w M_Card_Act3-Map_Card
0000ED24 0000                       		dc.w M_Card_Oval-Map_Card
0000ED26 0000                       		dc.w M_Card_FZ-Map_Card
0000ED28 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000ED29 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000ED2E F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000ED33 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000ED38 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000ED3D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED42 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000ED47 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000ED4C F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000ED51 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000ED56                            		even
0000ED56 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000ED57 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000ED5C F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000ED61 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000ED66 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000ED6B F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000ED70 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000ED75 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000ED7A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000ED7F F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000ED84                            		even
0000ED84 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000ED85 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000ED8A F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000ED8F F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000ED94 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000ED99 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000ED9E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EDA3 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EDA8 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EDAD F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EDB2 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EDB7 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EDBC 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EDBD F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EDC2 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EDC7 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EDCC F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EDD1 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EDD6 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EDDB F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EDE0 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EDE5 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EDEA                            		even
0000EDEA 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EDEB F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EDF0 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EDF5 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EDFA F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EDFF F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EE04 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EE09 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EE0E F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EE13 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EE18 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EE1E 00                         		even
0000EE1E 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EE1F F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EE24 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EE29 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EE2E F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EE33 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EE38 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EE3D F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EE42 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EE47 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EE4C F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EE52 00                         		even
0000EE52 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EE53 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EE58 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EE5D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EE62 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE68 00                         		even
0000EE68 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EE69 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE6E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EE73 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EE74 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE79 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EE7E 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EE7F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE84 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EE89 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EE8A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EE8F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EE94 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EE99 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EE9E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EEA3 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EEA8 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EEAD FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EEB2 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EEB7 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EEBC FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EEC1 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EEC6 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EECC 00                         		even
0000EECC 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EECD F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EED2 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EED7 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EEDC F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EEE1 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EEE6                            		even
0000EEE6                            
0000EEE6                            Map_Over:	include	"_maps\Game Over.asm"
0000EEE6                            ; ---------------------------------------------------------------------------
0000EEE6                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EEE6                            ; ---------------------------------------------------------------------------
0000EEE6                            Map_Over_internal:
0000EEE6 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EEE8 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EEEA 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EEEC 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EEEE 02                         byte_CBAC:	dc.b 2			; GAME
0000EEEF F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EEF4 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EEF9 02                         byte_CBB7:	dc.b 2			; OVER
0000EEFA F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EEFF F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EF04 02                         byte_CBC2:	dc.b 2			; TIME
0000EF05 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EF0A F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EF0F 02                         byte_CBCD:	dc.b 2			; OVER
0000EF10 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EF15 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EF1A                            		even
0000EF1A                            		even
0000EF1A                            
0000EF1A                            ; ---------------------------------------------------------------------------
0000EF1A                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EF1A                            ; ---------------------------------------------------------------------------
0000EF1A 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EF1C 0000                       		dc.w M_Got_Passed-Map_Got
0000EF1E 0000                       		dc.w M_Got_Score-Map_Got
0000EF20 0000                       		dc.w M_Got_TBonus-Map_Got
0000EF22 0000                       		dc.w M_Got_RBonus-Map_Got
0000EF24 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EF26 FF4E                       		dc.w M_Card_Act1-Map_Got
0000EF28 FF59                       		dc.w M_Card_Act2-Map_Got
0000EF2A FF64                       		dc.w M_Card_Act3-Map_Got
0000EF2C 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EF2D F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EF32 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EF37 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EF3C F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EF41 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EF46 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EF4B F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EF50 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EF55 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EF56 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EF5B F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EF60 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EF65 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EF6A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF6F F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EF74 06                         M_Got_Score:	dc.b 6			; SCORE
0000EF75 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF7A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF7F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF84 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF89 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF8E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF93 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EF94 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EF99 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF9E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFA3 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFA8 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFAD F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EFB2 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFB7 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EFB8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EFBD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EFC2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFC7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFCC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFD1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EFD6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFDC 00                         		even
0000EFDC                            ; ---------------------------------------------------------------------------
0000EFDC                            ; Sprite mappings - special stage results screen
0000EFDC                            ; ---------------------------------------------------------------------------
0000EFDC 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EFDE 0000                       		dc.w M_SSR_Score-Map_SSR
0000EFE0 0000                       		dc.w byte_CD0D-Map_SSR
0000EFE2 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EFE4 0000                       		dc.w byte_CD31-Map_SSR
0000EFE6 0000                       		dc.w byte_CD46-Map_SSR
0000EFE8 0000                       		dc.w byte_CD5B-Map_SSR
0000EFEA 0000                       		dc.w byte_CD6B-Map_SSR
0000EFEC 0000                       		dc.w byte_CDA8-Map_SSR
0000EFEE 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EFEF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EFF4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EFF9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EFFE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000F003 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000F008 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000F00D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F012 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F017 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F01C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F021 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F026 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F02B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F030 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F031 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F036 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F03B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F040 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F045 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F04A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F04F 07                         byte_CD0D:	dc.b 7
0000F050 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F055 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F05A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F05F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F064 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F069 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F06E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F073 04                         byte_CD31:	dc.b 4
0000F074 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F079 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F07E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F083 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F088 04                         byte_CD46:	dc.b 4
0000F089 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F08E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F093 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F098 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F09D 03                         byte_CD5B:	dc.b 3
0000F09E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F0A3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F0A8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F0AD 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F0AE F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F0B3 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F0B8 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F0BD F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F0C2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F0C7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F0CC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F0D1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F0D6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F0DB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F0E0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F0E5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F0EA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F0EB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F0F0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F0F5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F0FA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F0FF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F104 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F109 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F10E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F113 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F118 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F11D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F122 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F127 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F12C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F131 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F136                            		even
0000F136                            
0000F136                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F136                            ; ---------------------------------------------------------------------------
0000F136                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F136                            ; ---------------------------------------------------------------------------
0000F136                            Map_SSRC_internal:
0000F136 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F138 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F13A 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F13C 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F13E 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F140 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F142 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F144 01                         byte_CE02:	dc.b 1
0000F145 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F14A 01                         byte_CE08:	dc.b 1
0000F14B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F150 01                         byte_CE0E:	dc.b 1
0000F151 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F156 01                         byte_CE14:	dc.b 1
0000F157 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F15C 01                         byte_CE1A:	dc.b 1
0000F15D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F162 01                         byte_CE20:	dc.b 1
0000F163 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F168 00                         byte_CE26:	dc.b 0			; Blank frame
0000F16A 00                         		even
0000F16A 00                         		even
0000F16A                            
0000F16A                            		include	"_incObj\36 Spikes.asm"
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            ; Object 36 - spikes
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            
0000F16A                            Spikes:
0000F16A 7000                       		moveq	#0,d0
0000F16C 1028 0024                  		move.b	obRoutine(a0),d0
0000F170 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F174 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F178                            ; ===========================================================================
0000F178 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F17A 0000                       		dc.w Spik_Solid-Spik_Index
0000F17C                            
0000F17C =00000030                  spik_origX:	equ $30		; start X position
0000F17C =00000032                  spik_origY:	equ $32		; start Y position
0000F17C                            
0000F17C 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F17E 0110                       		dc.b 1,	$10
0000F180 0204                       		dc.b 2,	4
0000F182 031C                       		dc.b 3,	$1C
0000F184 0440                       		dc.b 4,	$40
0000F186 0510                       		dc.b 5,	$10
0000F188                            ; ===========================================================================
0000F188                            
0000F188                            Spik_Main:	; Routine 0
0000F188 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F18C 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F194 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F19A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F1A0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F1A6 1028 0028                  		move.b	obSubtype(a0),d0
0000F1AA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F1B0 0240 00F0                  		andi.w	#$F0,d0
0000F1B4 43F9 0000 F17C             		lea	(Spik_Var).l,a1
0000F1BA E648                       		lsr.w	#3,d0
0000F1BC D2C0                       		adda.w	d0,a1
0000F1BE 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F1C2 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F1C6 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F1CC 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F1D2                            
0000F1D2                            Spik_Solid:	; Routine 2
0000F1D2 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F1D6 343C 0004                  		move.w	#4,d2
0000F1DA 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F1E0 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F1E2 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F1E8 6600                       		bne.s	Spik_Upright	; if not, branch
0000F1EA 343C 0014                  		move.w	#$14,d2
0000F1EE                            
0000F1EE                            ; Spikes types $1x and $5x face	sideways
0000F1EE                            
0000F1EE                            Spik_SideWays:
0000F1EE 323C 001B                  		move.w	#$1B,d1
0000F1F2 3602                       		move.w	d2,d3
0000F1F4 5243                       		addq.w	#1,d3
0000F1F6 3828 0008                  		move.w	obX(a0),d4
0000F1FA 6100 0000                  		bsr.w	SolidObject
0000F1FE 0828 0003 0022             		btst	#3,obStatus(a0)
0000F204 6600                       		bne.s	Spik_Display
0000F206 0C44 0001                  		cmpi.w	#1,d4
0000F20A 6700                       		beq.s	Spik_Hurt
0000F20C 6000                       		bra.s	Spik_Display
0000F20E                            ; ===========================================================================
0000F20E                            
0000F20E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F20E                            
0000F20E                            Spik_Upright:
0000F20E 7200                       		moveq	#0,d1
0000F210 1228 0014                  		move.b	obActWid(a0),d1
0000F214 0641 000B                  		addi.w	#$B,d1
0000F218 343C 0010                  		move.w	#$10,d2
0000F21C 363C 0011                  		move.w	#$11,d3
0000F220 3828 0008                  		move.w	obX(a0),d4
0000F224 6100 0000                  		bsr.w	SolidObject
0000F228 0828 0003 0022             		btst	#3,obStatus(a0)
0000F22E 6600                       		bne.s	Spik_Hurt
0000F230 4A44                       		tst.w	d4
0000F232 6A00                       		bpl.s	Spik_Display
0000F234                            
0000F234                            Spik_Hurt:
0000F234 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F238 6600                       		bne.s	Spik_Display	; if yes, branch
0000F23A 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F23E 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F240 2F08                       		move.l	a0,-(sp)
0000F242 2448                       		movea.l	a0,a2
0000F244 41F8 D000                  		lea	(v_player).w,a0
0000F248 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F24E 6400                       		bcc.s	loc_CF20
0000F250                            		; This fixes the infamous "spike bug"
0000F250 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F254 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F256 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F25C                            loc_D5A2:
0000F25C 9680                       		sub.l	d0,d3
0000F25E 2143 000C                  		move.l	d3,obY(a0)
0000F262 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F268                            
0000F268                            loc_CF20:
0000F268 205F                       		movea.l	(sp)+,a0
0000F26A                            
0000F26A                            Spik_Display:
0000F26A 6100 0000                  		bsr.w	DisplaySprite
0000F28C 4E75                       		rts	
0000F28E                            ; ===========================================================================
0000F28E                            
0000F28E                            Spik_Type0x:
0000F28E 7000                       		moveq	#0,d0
0000F290 1028 0028                  		move.b	obSubtype(a0),d0
0000F294 D040                       		add.w	d0,d0
0000F296 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F29A 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F29E                            ; ===========================================================================
0000F29E 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F2A0 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F2A2 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F2A4                            ; ===========================================================================
0000F2A4                            
0000F2A4                            Spik_Type00:
0000F2A4 4E75                       		rts			; don't move the object
0000F2A6                            ; ===========================================================================
0000F2A6                            
0000F2A6                            Spik_Type01:
0000F2A6 6100 0000                  		bsr.w	Spik_Wait
0000F2AA 7000                       		moveq	#0,d0
0000F2AC 1028 0034                  		move.b	$34(a0),d0
0000F2B0 D068 0032                  		add.w	spik_origY(a0),d0
0000F2B4 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F2B8 4E75                       		rts	
0000F2BA                            ; ===========================================================================
0000F2BA                            
0000F2BA                            Spik_Type02:
0000F2BA 6100 0000                  		bsr.w	Spik_Wait
0000F2BE 7000                       		moveq	#0,d0
0000F2C0 1028 0034                  		move.b	$34(a0),d0
0000F2C4 D068 0030                  		add.w	spik_origX(a0),d0
0000F2C8 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F2CC 4E75                       		rts	
0000F2CE                            ; ===========================================================================
0000F2CE                            
0000F2CE                            Spik_Wait:
0000F2CE 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F2D2 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F2D4 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F2D8 6600                       		bne.s	locret_CFE6
0000F2DA 4A28 0001                  		tst.b	obRender(a0)
0000F2DE 6A00                       		bpl.s	locret_CFE6
0000F2EA 6000                       		bra.s	locret_CFE6
0000F2EC                            ; ===========================================================================
0000F2EC                            
0000F2EC                            loc_CFA4:
0000F2EC 4A68 0036                  		tst.w	$36(a0)
0000F2F0 6700                       		beq.s	loc_CFC6
0000F2F2 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F2F8 6400                       		bcc.s	locret_CFE6
0000F2FA 317C 0000 0034             		move.w	#0,$34(a0)
0000F300 317C 0000 0036             		move.w	#0,$36(a0)
0000F306 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F30C 6000                       		bra.s	locret_CFE6
0000F30E                            ; ===========================================================================
0000F30E                            
0000F30E                            loc_CFC6:
0000F30E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F314 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F31A 6500                       		bcs.s	locret_CFE6
0000F31C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F322 317C 0001 0036             		move.w	#1,$36(a0)
0000F328 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F32E                            
0000F32E                            locret_CFE6:
0000F32E 4E75                       		rts	
0000F32E 4E75                       		rts	
0000F330                            Map_Spike:	include	"_maps\Spikes.asm"
0000F330                            ; --------------------------------------------------------------------------------
0000F330                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F330                            ; --------------------------------------------------------------------------------
0000F330                            
0000F330                            SME_XgeaQ:	
0000F330 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F334 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F338 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F33C 03                         SME_XgeaQ_C:	dc.b 3	
0000F33D F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F342 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F347 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F34C 03                         SME_XgeaQ_1C:	dc.b 3	
0000F34D EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F352 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F357 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F35C 01                         SME_XgeaQ_2C:	dc.b 1	
0000F35D F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F362 03                         SME_XgeaQ_32:	dc.b 3	
0000F363 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F368 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F36D F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F372 06                         SME_XgeaQ_42:	dc.b 6	
0000F373 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F378 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F37D F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F382 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F387 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F38C F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F391 01                         SME_XgeaQ_61:	dc.b 1	
0000F392 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F398 00                         		even
0000F398 00                         		even
0000F398                            		include	"_incObj\3B Purple Rock.asm"
0000F398                            ; ---------------------------------------------------------------------------
0000F398                            ; Object 3B - purple rock (GHZ)
0000F398                            ; ---------------------------------------------------------------------------
0000F398                            
0000F398                            PurpleRock:
0000F398 7000                       		moveq	#0,d0
0000F39A 1028 0024                  		move.b	obRoutine(a0),d0
0000F39E 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F3A2 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F3A6                            ; ===========================================================================
0000F3A6 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F3A8 0000                       		dc.w Rock_Solid-Rock_Index
0000F3AA                            ; ===========================================================================
0000F3AA                            
0000F3AA                            Rock_Main:	; Routine 0
0000F3AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F3AE 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F3B6 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F3BC 117C 0004 0001             		move.b	#4,obRender(a0)
0000F3C2 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F3C8 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F3CE                            
0000F3CE                            Rock_Solid:	; Routine 2
0000F3CE 323C 001B                  		move.w	#$1B,d1
0000F3D2 343C 0010                  		move.w	#$10,d2
0000F3D6 363C 0010                  		move.w	#$10,d3
0000F3DA 3828 0008                  		move.w	obX(a0),d4
0000F3DE 6100 0000                  		bsr.w	SolidObject
0000F3E2 6100 0000                  		bsr.w	DisplaySprite
0000F404 4E75                       		rts	
0000F404 4E75                       		rts	
0000F406                            		include	"_incObj\49 Waterfall Sound.asm"
0000F406                            ; ---------------------------------------------------------------------------
0000F406                            ; Object 49 - waterfall	sound effect (GHZ)
0000F406                            ; ---------------------------------------------------------------------------
0000F406                            
0000F406                            WaterSound:
0000F406 7000                       		moveq	#0,d0
0000F408 1028 0024                  		move.b	obRoutine(a0),d0
0000F40C 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F410 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F414                            ; ===========================================================================
0000F414 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F416 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F418                            ; ===========================================================================
0000F418                            
0000F418                            WSnd_Main:	; Routine 0
0000F418 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F41C 117C 0004 0001             		move.b	#4,obRender(a0)
0000F422                            
0000F422                            WSnd_PlaySnd:	; Routine 2
0000F422 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F426 0200 003F                  		andi.b	#$3F,d0
0000F42A 6600                       		bne.s	WSnd_ChkDel
0000F436                            
0000F436                            	WSnd_ChkDel:
0000F454 4E75                       		rts	
0000F454 4E75                       		rts	
0000F456                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            ; Sprite mappings - purple rock	(GHZ)
0000F456                            ; ---------------------------------------------------------------------------
0000F456                            Map_PRock_internal:
0000F456 0000                       		dc.w byte_D110-Map_PRock_internal
0000F458 02                         byte_D110:	dc.b 2
0000F459 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F45E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F464 00                         		even
0000F464 00                         		even
0000F464                            		include	"_incObj\3C Smashable Wall.asm"
0000F464                            ; ---------------------------------------------------------------------------
0000F464                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F464                            ; ---------------------------------------------------------------------------
0000F464                            
0000F464                            SmashWall:
0000F464 7000                       		moveq	#0,d0
0000F466 1028 0024                  		move.b	obRoutine(a0),d0
0000F46A 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F46E 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F472 6000 0000                  		bra.w	RememberState
0000F476                            ; ===========================================================================
0000F476 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F478 0000                       		dc.w Smash_Solid-Smash_Index
0000F47A 0000                       		dc.w Smash_FragMove-Smash_Index
0000F47C                            
0000F47C =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F47C                            ; ===========================================================================
0000F47C                            
0000F47C                            Smash_Main:	; Routine 0
0000F47C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F480 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F488 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F48E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F494 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F49A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F4A0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F4A6                            
0000F4A6                            Smash_Solid:	; Routine 2
0000F4A6 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F4AC 323C 001B                  		move.w	#$1B,d1
0000F4B0 343C 0020                  		move.w	#$20,d2
0000F4B4 363C 0020                  		move.w	#$20,d3
0000F4B8 3828 0008                  		move.w	obX(a0),d4
0000F4BC 6100 0000                  		bsr.w	SolidObject	
0000F4C0 4A04                       		tst.b	d4
0000F4C2 6E00 0000                  		bgt.w	@chkroll	
0000F4C6 6700 0000                  		beq.w	@donothing								
0000F4CA 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F4D0 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F4D4                            ; ===========================================================================
0000F4D4                            
0000F4D4                            @chkroll:
0000F4D4 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F4DA 6600                       		bne.s	@donothing	; if not, branch	
0000F4DC 3028 0030                  		move.w	smash_speed(a0),d0
0000F4E0 6A00                       		bpl.s	@chkspeed
0000F4E2 4440                       		neg.w	d0
0000F4E4                            
0000F4E4                            	@chkspeed:
0000F4E4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F4E8 6500                       		bcs.s	@donothing	; if not, branch	
0000F4EA                            		
0000F4EA                            	@continue:	
0000F4EA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F4F0 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F4F6 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F4FC 3028 0008                  		move.w	obX(a0),d0
0000F500 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F504 6500                       		bcs.s	@smash		; if yes, branch
0000F506 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F50C                            
0000F50C                            	@smash:
0000F50C 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F512 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F518 7206                       		moveq	#6,d1		; load 7 fragments
0000F51A 343C 0070                  		move.w	#$70,d2
0000F51E 6100                       		bsr.s	SmashObject
0000F520                            
0000F520                            @donothing:
0000F520 4E75                       		rts	
0000F522                            
0000F522                            Smash_FragMove:	; Routine 4
0000F522 588F                       		addq.l	#4,sp
0000F524 6100 0000                  		bsr.w	SpeedToPos
0000F528 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F52E 4A28 0001                  		tst.b	obRender(a0)
0000F532 6A00 0000                  		bpl.w	DeleteObject
0000F536 6000 0000                  		bra.w	DisplaySprite
0000F53A                            
0000F53A                            
0000F53A                            
0000F53A                            		include	"_incObj\sub SmashObject.asm"
0000F53A                            ; ---------------------------------------------------------------------------
0000F53A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F53A                            ; ---------------------------------------------------------------------------
0000F53A                            
0000F53A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F53A                            
0000F53A                            
0000F53A                            SmashObject:
0000F53A 7000                       		moveq	#0,d0
0000F53C 1028 001A                  		move.b	obFrame(a0),d0
0000F540 D040                       		add.w	d0,d0
0000F542 2668 0004                  		movea.l	obMap(a0),a3
0000F546 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F54A 524B                       		addq.w	#1,a3
0000F54C 08E8 0005 0001             		bset	#5,obRender(a0)
0000F552 1810                       		move.b	0(a0),d4
0000F554 1A28 0001                  		move.b	obRender(a0),d5
0000F558 2248                       		movea.l	a0,a1
0000F55A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F560 1284                       		move.b	d4,0(a1)
0000F562 234B 0004                  		move.l	a3,obMap(a1)
0000F566 1345 0001                  		move.b	d5,obRender(a1)
0000F56A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F570 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F576 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F57C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F582 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F588 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F58C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F590 5341                       		subq.w #1,d1
0000F592 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F596 303C 005F                  		move.w #$5F,d0
0000F59A                            ; ===========================================================================
0000F59A                            
0000F59A                            Smash_Loop:
0000F59A 4A11                       		tst.b	(a1)
0000F59C 6700                       		beq.s	@cont
0000F59E 43E9 0040                  		lea		$40(a1),a1
0000F5A2 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F5A6 6600                       		bne.s	Smash_PlaySnd
0000F5A8                            
0000F5A8                            	@cont:
0000F5A8 5A4B                       		addq.w #5,a3
0000F5AA                            
0000F5AA                            Smash_LoadFrag:				; XREF: SmashObject
0000F5AA 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F5B0 1284                       		move.b	d4,0(a1)
0000F5B2 234B 0004                  		move.l	a3,obMap(a1)
0000F5B6 1345 0001                  		move.b	d5,obRender(a1)
0000F5BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F5C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F5C6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F5CC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F5D2 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F5D8 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F5DC 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F5E0 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F5E4                            
0000F5E4                            Smash_PlaySnd:
0000F5E4 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F5E8 4EF9 0000 1254             		jmp	(PlaySound_Special).l ; play smashing sound
0000F5EE                            
0000F5EE                            ; End of function SmashObject
0000F5EE                            ; End of function SmashObject
0000F5EE                            
0000F5EE                            ; ===========================================================================
0000F5EE                            ; Smashed block	fragment speeds
0000F5EE                            ;
0000F5EE 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F5F2 0600 FF00                  		dc.w $600, -$100
0000F5F6 0600 0100                  		dc.w $600, $100
0000F5FA 0400 0500                  		dc.w $400, $500
0000F5FE 0600 FA00                  		dc.w $600, -$600
0000F602 0800 FE00                  		dc.w $800, -$200
0000F606 0800 0200                  		dc.w $800, $200
0000F60A 0600 0600                  		dc.w $600, $600
0000F60E                            
0000F60E FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F612 F800 FE00                  		dc.w -$800, -$200
0000F616 F800 0200                  		dc.w -$800, $200
0000F61A FA00 0600                  		dc.w -$600, $600
0000F61E FC00 FB00                  		dc.w -$400, -$500
0000F622 FA00 FF00                  		dc.w -$600, -$100
0000F626 FA00 0100                  		dc.w -$600, $100
0000F62A FC00 0500                  		dc.w -$400, $500
0000F62E                            
0000F62E                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F62E                            ; ---------------------------------------------------------------------------
0000F62E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F62E                            ; ---------------------------------------------------------------------------
0000F62E                            Map_Smash_internal:
0000F62E 0000                       		dc.w @left-Map_Smash_internal
0000F630 0000                       		dc.w @middle-Map_Smash_internal
0000F632 0000                       		dc.w @right-Map_Smash_internal
0000F634 08                         @left:		dc.b 8
0000F635 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F63A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F63F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F644 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F649 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F64E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F653 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F658 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F65D 08                         @middle:	dc.b 8
0000F65E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F663 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F668 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F66D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F672 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F677 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F67C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F681 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F686 08                         @right:		dc.b 8
0000F687 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F68C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F691 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F696 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F69B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F6A0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F6A5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F6AA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F6B0 00                         		even
0000F6B0 00                         		even
0000F6B0                            
0000F6B0                            ; ---------------------------------------------------------------------------
0000F6B0                            ; Object code execution subroutine
0000F6B0                            ; ---------------------------------------------------------------------------
0000F6B0                            
0000F6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6B0                            
0000F6B0                            
0000F6B0                            
0000F6B0                            ExecuteObjects: ; XREF: GM_Title; et al
0000F6B0 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F6B4 7E7F                       		moveq #$7F,d7
0000F6B6 7000                       		moveq #0,d0
0000F6B8 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F6BE 6400                       		bcc.s loc_D362
0000F6C0                            
0000F6C0                            loc_D348:
0000F6C0 1010                       		move.b (a0),d0 ; load object number from RAM
0000F6C2 6700                       		beq.s loc_D358
0000F6C4 D040                       		add.w d0,d0
0000F6C6 D040                       		add.w d0,d0
0000F6C8 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F6CC 4E91                       		jsr (a1) ; run the object's code
0000F6CE 7000                       		moveq #0,d0
0000F6D0                            
0000F6D0                            loc_D358:
0000F6D0 41E8 0040                  		lea $40(a0),a0 ; next object
0000F6D4 51CF FFEA                  		dbf d7,loc_D348
0000F6D8 4E75                       		rts
0000F6DA                            ; ===========================================================================
0000F6DA                            
0000F6DA                            loc_D362:
0000F6DA 7E1F                       		moveq #$1F,d7
0000F6DC 61E2                       		bsr.s loc_D348
0000F6DE 7E5F                       		moveq #$5F,d7
0000F6E0                            
0000F6E0                            loc_D368:
0000F6E0 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F6E2 1010                       		move.b (a0),d0 ; get the object's ID
0000F6E4 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F6E6 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F6EA 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F6EC 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F6F0 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F6F6 6700                       		beq.s loc_D378 ; if not, branch
0000F6F8 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F6FC                            
0000F6FC                            loc_D378:
0000F6FC 6100 0000                  		bsr.w DisplaySprite2
0000F700                            		
0000F700                            loc_D37C:
0000F700 41E8 0040                  		lea $40(a0),a0
0000F704 51CF FFDA                  		dbf d7,loc_D368
0000F708 4E75                       		rts
0000F70A                            ; End of function ExecuteObjects
0000F70A                            
0000F70A                            ; ===========================================================================
0000F70A                            ; ---------------------------------------------------------------------------
0000F70A                            ; Object pointers
0000F70A                            ; ---------------------------------------------------------------------------
0000F70A                            Obj_Index:
0000F70A                            		include	"_inc\Object Pointers.asm"
0000F70A                            ; ---------------------------------------------------------------------------
0000F70A                            ; Object pointers
0000F70A                            ; ---------------------------------------------------------------------------
0000F70A 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F70E 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F712 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F716 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F71A 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F71E 0000 B450                  ptr_Mozzietron:		dc.l Mozzietron
0000F722 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F726 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F72A 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F72E 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F732 0000 0000                  ptr_Pole:		dc.l Pole
0000F736 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F73A 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F73E 0000 C876                  ptr_TitleSonic:		dc.l TitleSonic
0000F742 0000 C8F6                  ptr_PSBTM:		dc.l PSBTM
0000F746 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F74A 0000 8F74                  ptr_Bridge:		dc.l Bridge
0000F74E 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F752 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F756 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F75A 0000 959A                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F75E 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F762 0000 98E6                  ptr_Helix:		dc.l Helix
0000F766 0000 9A72                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F76A 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F76E 0000 9E4E                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F772 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F776 0000 A442                  ptr_Scenery:		dc.l Scenery
0000F77A 0000 A4E4                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F77E 0000 A7CC                  ptr_BallHog:		dc.l BallHog
0000F782 0000 B166                  ptr_Crabmeat:		dc.l Crabmeat
0000F786 0000 A89A                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F78A 0000 0000                  ptr_HUD:		dc.l HUD
0000F78E 0000 B582                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F792 0000 B6D4                  ptr_Missile:		dc.l Missile
0000F796 0000 A96C                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F79A 0000 B92E                  ptr_Rings:		dc.l Rings
0000F79E 0000 C178                  ptr_Monitor:		dc.l Monitor
0000F7A2 0000 A9DC                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F7A6 0000 AB9A                  ptr_Animals:		dc.l Animals		; $28
0000F7AA 0000 B088                  ptr_Points:		dc.l Points
0000F7AE 0000 A5BA                  ptr_AutoDoor:		dc.l AutoDoor
0000F7B2 0000 CE3A                  ptr_Chopper:		dc.l Chopper
0000F7B6 0000 CEF4                  ptr_Jaws:		dc.l Jaws
0000F7BA 0000 CFBE                  ptr_Burrobot:		dc.l Burrobot
0000F7BE 0000 C376                  ptr_PowerUp:		dc.l PowerUp
0000F7C2 0000 D1D2                  ptr_LargeGrass:		dc.l LargeGrass
0000F7C6 0000 D6B4                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F7CA 0000 D990                  ptr_ChainStomp:		dc.l ChainStomp
0000F7CE 0000 E03E                  ptr_Button:		dc.l Button
0000F7D2 0000 E1E2                  ptr_PushBlock:		dc.l PushBlock
0000F7D6 0000 E614                  ptr_TitleCard:		dc.l TitleCard
0000F7DA 0000 D4F4                  ptr_GrassFire:		dc.l GrassFire
0000F7DE 0000 F16A                  ptr_Spikes:		dc.l Spikes
0000F7E2 0000 BB8A                  ptr_RingLoss:		dc.l RingLoss
0000F7E6 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F7EA 0000 E7C4                  ptr_GameOverCard:	dc.l GameOverCard
0000F7EE 0000 E882                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F7F2 0000 F398                  ptr_PurpleRock:		dc.l PurpleRock
0000F7F6 0000 F464                  ptr_SmashWall:		dc.l SmashWall
0000F7FA 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F7FE 0000 0000                  ptr_Prison:		dc.l Prison
0000F802 0000 AA6E                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F806 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F80A 0000 0000                  ptr_Springs:		dc.l Springs
0000F80E 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F812 0000 0000                  ptr_Roller:		dc.l Roller
0000F816 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F81A 0000 DCAC                  ptr_SideStomp:		dc.l SideStomp
0000F81E 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F822 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F826 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F82A 0000 F406                  ptr_WaterSound:		dc.l WaterSound
0000F82E 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F832 0000 BE4C                  ptr_GiantRing:		dc.l GiantRing
0000F836 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F83A 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F83E 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F842 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F846 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F84A 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F84E 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F852 0000 9F5E                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F856 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F85A 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F85E 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F862 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F866 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F86A 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F86E 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F872 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F876 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F87A 0000 0000                  ptr_Fan:		dc.l Fan
0000F87E 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F882 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F886 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F88A 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F88E 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F892 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F896 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F89A 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F89E 0000 0000                  ptr_Junction:		dc.l Junction
0000F8A2 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F8A6 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F8AA 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F8AE 0000 0000                  ptr_Saws:		dc.l Saws
0000F8B2 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F8B6 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F8BA 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F8BE 0000 0000                  ptr_Electro:		dc.l Electro
0000F8C2 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F8C6 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F8CA 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F8CE 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F8D2 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F8D6 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F8DA 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F8DE 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F8E2 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F8E6 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F8EA 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F8EE 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F8F2 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F8F6 0000 BF26                  ptr_RingFlash:		dc.l RingFlash
0000F8FA 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F8FE 0000 EADC                  ptr_SSResult:		dc.l SSResult
0000F902 0000 EC82                  ptr_SSRChaos:		dc.l SSRChaos
0000F906 0000 5E64                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F90A 0000 5F7C                  ptr_ContSonic:		dc.l ContSonic
0000F90E 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F912 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F916 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F91A 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F91E 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F922 0000 6406                  ptr_EndSonic:		dc.l EndSonic
0000F926 0000 6560                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F92A 0000 663A                  ptr_EndSTH:		dc.l EndSTH
0000F92E 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F932 0000 68A0                  ptr_EndEggman:		dc.l EndEggman
0000F936 0000 6980                  ptr_TryChaos:		dc.l TryChaos
0000F93A                            
0000F93A                            NullObject:
0000F93A                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F93A                            
0000F93A =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F93A =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F93A =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F93A =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F93A =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F93A =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F93A =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F93A =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F93A =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F93A =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F93A =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F93A =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F93A =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F93A =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F93A =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F93A =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F93A =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F93A =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F93A =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F93A =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F93A =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F93A =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F93A =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F93A =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F93A =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F93A =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F93A =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F93A =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F93A =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F93A =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F93A =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F93A =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F93A =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F93A =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F93A =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F93A =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F93A =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F93A =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F93A =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F93A =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F93A =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F93A =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F93A =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F93A =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F93A =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F93A =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F93A =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F93A =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F93A =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F93A =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F93A =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F93A =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F93A =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F93A =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F93A =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F93A =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F93A =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F93A =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F93A =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F93A =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F93A =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F93A =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F93A =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F93A =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F93A =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F93A =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F93A =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F93A =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F93A =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F93A =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F93A =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F93A =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F93A =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F93A =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F93A =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F93A =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F93A =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F93A =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F93A =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F93A =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F93A =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F93A =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F93A =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F93A =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F93A =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F93A =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F93A =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F93A =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F93A =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F93A =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F93A =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F93A =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F93A =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F93A =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F93A =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F93A =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F93A =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F93A =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F93A =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F93A =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F93A =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F93A =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F93A =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F93A =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F93A =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F93A =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F93A =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F93A =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F93A =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F93A =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F93A =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F93A =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F93A =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F93A =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F93A =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F93A =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F93A =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F93A =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F93A =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F93A =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F93A =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F93A =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F93A =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F93A =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F93A =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F93A =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F93A =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F93A =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F93A =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F93A =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F93A =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F93A =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F93A =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F93A =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F93A =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F93A =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F93A =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F93A =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F93A =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F93A =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F93A =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F93A                            
0000F93A                            		include	"_incObj\sub ObjectFall.asm"
0000F93A                            ; ---------------------------------------------------------------------------
0000F93A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F93A                            ; ---------------------------------------------------------------------------
0000F93A                            
0000F93A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F93A                            
0000F93A                            
0000F93A                            ObjectFall:
0000F93A 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F940 6700                       		beq.s	@donothing
0000F942 3028 0010                  		move.w	obVelX(a0),d0
0000F946 48C0                       		ext.l	d0
0000F948 E188                       		lsl.l	#8,d0
0000F94A D1A8 0008                  		add.l	d0,obX(a0)
0000F94E 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F954 6F00                               ble.s   @skipline       ; if yes, branch
0000F956 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F95C                                @skipline:		
0000F95C 3028 0012                  		move.w	obVelY(a0),d0
0000F960 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F966 48C0                       		ext.l	d0
0000F968 E188                       		lsl.l	#8,d0
0000F96A D1A8 000C                  		add.l	d0,obY(a0)
0000F96E 4E75                       		rts	
0000F970                            	
0000F970                            	@donothing:
0000F970 4E75                       		rts
0000F972                            
0000F972                            ; End of function ObjectFall
0000F972                            ; End of function ObjectFall
0000F972                            		include	"_incObj\sub SpeedToPos.asm"
0000F972                            ; ---------------------------------------------------------------------------
0000F972                            ; Subroutine translating object	speed to update	object position
0000F972                            ; ---------------------------------------------------------------------------
0000F972                            
0000F972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F972                            
0000F972                            
0000F972                            SpeedToPos:
0000F972 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F978 E188                       		lsl.l	#8,d0
0000F97A D1A8 0008                  		add.l	d0,obX(a0)
0000F97E E18A                       		lsl.l	#8,d2
0000F980 D5A8 000C                  		add.l	d2,obY(a0)
0000F984 4E75                       		rts
0000F986                            ; End of function SpeedToPos
0000F986                            ; End of function SpeedToPos
0000F986                            		include	"_incObj\sub DisplaySprite.asm"
0000F986                            ; ---------------------------------------------------------------------------
0000F986                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F986                            ; ---------------------------------------------------------------------------
0000F986                            
0000F986                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F986                            
0000F986                            
0000F986                            DisplaySprite:
0000F986 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F98A D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F98E 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F992 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F994 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F996 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F998 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F99A                            
0000F99A                                DSpr_Full:
0000F99A 4E75                               rts    
0000F99C                            
0000F99C                            ; End of function DisplaySprite
0000F99C                            
0000F99C                            
0000F99C                            ; ---------------------------------------------------------------------------
0000F99C                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F99C                            ; ---------------------------------------------------------------------------
0000F99C                            
0000F99C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F99C                            
0000F99C                            
0000F99C                            DisplaySprite1:
0000F99C 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F9A0 D4E9 0018                          adda.w  obpriority(a1),a2
0000F9A4 0C52 007E                          cmpi.w    #$7E,(a2)
0000F9A8 6400                               bcc.s    DSpr1_Full
0000F9AA 5452                               addq.w    #2,(a2)
0000F9AC D4D2                               adda.w    (a2),a2
0000F9AE 3489                               move.w    a1,(a2)
0000F9B0                            
0000F9B0                                DSpr1_Full:
0000F9B0 4E75                               rts    
0000F9B2                            
0000F9B2                            ; End of function DisplaySprite1
0000F9B2                            
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F9B2                            ; and d0 is already (priority/2)&$380
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            
0000F9B2                            ; loc_16530:
0000F9B2                            DisplaySprite2:
0000F9B2 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F9B6 D2C0                           adda.w    d0,a1
0000F9B8 0C51 007E                      cmpi.w    #$7E,(a1)
0000F9BC 6400                           bhs.s    return_16542
0000F9BE 5451                           addq.w    #2,(a1)
0000F9C0 D2D1                           adda.w    (a1),a1
0000F9C2 3288                           move.w    a0,(a1)
0000F9C4                            
0000F9C4                            return_16542:
0000F9C4 4E75                           rts
0000F9C4 4E75                           rts
0000F9C6                            		include	"_incObj\sub DeleteObject.asm"
0000F9C6                            ; ---------------------------------------------------------------------------
0000F9C6                            ; Subroutine to	delete an object
0000F9C6                            ; ---------------------------------------------------------------------------
0000F9C6                            
0000F9C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9C6                            
0000F9C6                            
0000F9C6                            DeleteObject:
0000F9C6 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F9C8                            
0000F9C8                            DeleteChild:				; child objects are already in (a1)
0000F9C8 7200                       		moveq	#0,d1
0000F9CA 700F                       		moveq	#$F,d0
0000F9CC                            
0000F9CC                            	DelObj_Loop:
0000F9CC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F9CE 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F9D2 4E75                       		rts	
0000F9D4                            
0000F9D4                            ; End of function DeleteObject
0000F9D4                            ; End of function DeleteObject
0000F9D4                            
0000F9D4                            ; ===========================================================================
0000F9D4 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F9D8 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F9DC 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F9E0 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F9E4                            ; ---------------------------------------------------------------------------
0000F9E4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F9E4                            ; ---------------------------------------------------------------------------
0000F9E4                            
0000F9E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9E4                            
0000F9E4                            
0000F9E4                            BuildSprites:
0000F9E4 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F9E8 7A00                       		moveq	#0,d5
0000F9EA 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F9EE 7E07                       		moveq	#7,d7
0000F9F0                            
0000F9F0                            	@priorityLoop:
0000F9F0 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F9F2 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F9F6 7C02                       		moveq	#2,d6
0000F9F8                            
0000F9F8                            	@objectLoop:
0000F9F8 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F9FC 4A10                       		tst.b	(a0)		; if null, branch
0000F9FE 6700 0000                  		beq.w	@skipObject
0000FA02 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000FA08                            
0000FA08 1028 0001                  		move.b	obRender(a0),d0
0000FA0C 1800                       		move.b	d0,d4
0000FA0E 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FA12 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FA14 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FA18                            	; check object bounds
0000FA18 7000                       		moveq	#0,d0
0000FA1A 1028 0014                  		move.b	obActWid(a0),d0
0000FA1E 3628 0008                  		move.w	obX(a0),d3
0000FA22 9651                       		sub.w	(a1),d3
0000FA24 3203                       		move.w	d3,d1
0000FA26 D240                       		add.w	d0,d1
0000FA28 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FA2C 3203                       		move.w	d3,d1
0000FA2E 9240                       		sub.w	d0,d1
0000FA30 0C41 0140                  		cmpi.w	#320,d1
0000FA34 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FA36 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FA3A                            
0000FA3A 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FA3E 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FA40 7000                       		moveq	#0,d0
0000FA42 1028 0016                  		move.b	obHeight(a0),d0
0000FA46 3428 000C                  		move.w	obY(a0),d2
0000FA4A 9469 0004                  		sub.w	4(a1),d2
0000FA4E 3202                       		move.w	d2,d1
0000FA50 D240                       		add.w	d0,d1
0000FA52 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FA54 3202                       		move.w	d2,d1
0000FA56 9240                       		sub.w	d0,d1
0000FA58 0C41 00E0                  		cmpi.w	#224,d1
0000FA5C 6C00                       		bge.s	@skipObject
0000FA5E 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FA62 6000                       		bra.s	@drawObject
0000FA64                            ; ===========================================================================
0000FA64                            
0000FA64                            	@screenCoords:
0000FA64 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FA68 3628 0008                  		move.w	obX(a0),d3
0000FA6C 6000                       		bra.s	@drawObject
0000FA6E                            ; ===========================================================================
0000FA6E                            
0000FA6E                            	@assumeHeight:
0000FA6E 3428 000C                  		move.w	obY(a0),d2
0000FA72 9469 0004                  		sub.w	obMap(a1),d2
0000FA76 0642 0080                  		addi.w	#$80,d2
0000FA7A 0C42 0060                  		cmpi.w	#$60,d2
0000FA7E 6500                       		blo.s	@skipObject
0000FA80 0C42 0180                  		cmpi.w	#$180,d2
0000FA84 6400                       		bhs.s	@skipObject
0000FA86                            
0000FA86                            	@drawObject:
0000FA86 2268 0004                  		movea.l	obMap(a0),a1
0000FA8A 7200                       		moveq	#0,d1
0000FA8C 0804 0005                  		btst	#5,d4
0000FA90 6600                       		bne.s	@drawFrame
0000FA92 1228 001A                  		move.b	$1A(a0),d1
0000FA96 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FA98 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FA9C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FA9E 1219                       		move.b	(a1)+,d1
0000FAA0 5301                       		subq.b	#1,d1
0000FAA2 6B00                       		bmi.s	@setVisible
0000FAA4                            
0000FAA4                            	@drawFrame:
0000FAA4 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FAA8                            
0000FAA8                            	@setVisible:
0000FAA8 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FAAE                            
0000FAAE                            	@skipObject:
0000FAAE 5446                       		addq.w	#2,d6
0000FAB0 5554                       		subq.w	#2,(a4)			; number of objects left
0000FAB2 6600 FF44                  		bne.w	@objectLoop
0000FAB6                            
0000FAB6                            	@nextPriority:
0000FAB6 49EC 0080                  		lea	$80(a4),a4
0000FABA 51CF FF34                  		dbf	d7,@priorityLoop
0000FABE 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FAC2 0C05 0050                  		cmpi.b	#$50,d5
0000FAC6 6700                       		beq.s	@spriteLimit
0000FAC8 24BC 0000 0000             		move.l	#0,(a2)
0000FACE 4E75                       		rts	
0000FAD0                            ; ===========================================================================
0000FAD0                            
0000FAD0                            	@spriteLimit:
0000FAD0 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FAD6 4E75                       		rts	
0000FAD8                            ; End of function BuildSprites
0000FAD8                            
0000FAD8                            
0000FAD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAD8                            
0000FAD8                            
0000FAD8                            BuildSpr_Draw:
0000FAD8 3668 0002                  		movea.w	obGfx(a0),a3
0000FADC 0804 0000                  		btst	#0,d4
0000FAE0 6600                       		bne.s	BuildSpr_FlipX
0000FAE2 0804 0001                  		btst	#1,d4
0000FAE6 6600 0000                  		bne.w	BuildSpr_FlipY
0000FAEA                            ; End of function BuildSpr_Draw
0000FAEA                            
0000FAEA                            
0000FAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAEA                            
0000FAEA                            
0000FAEA                            BuildSpr_Normal:
0000FAEA 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FAEE 6700                       		beq.s	@return
0000FAF0 1019                       		move.b	(a1)+,d0	; get y-offset
0000FAF2 4880                       		ext.w	d0
0000FAF4 D042                       		add.w	d2,d0		; add y-position
0000FAF6 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAF8 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FAFA 5205                       		addq.b	#1,d5		; increase sprite counter
0000FAFC 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FAFE 1019                       		move.b	(a1)+,d0	; get art tile
0000FB00 E148                       		lsl.w	#8,d0
0000FB02 1019                       		move.b	(a1)+,d0
0000FB04 D04B                       		add.w	a3,d0		; add art tile offset
0000FB06 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB08 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB0A 4880                       		ext.w	d0
0000FB0C D043                       		add.w	d3,d0		; add x-position
0000FB0E 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB12 6600                       		bne.s	@writeX
0000FB14 5240                       		addq.w	#1,d0
0000FB16                            
0000FB16                            	@writeX:
0000FB16 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB18 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FB1C                            
0000FB1C                            	@return:
0000FB1C 4E75                       		rts	
0000FB1E                            ; End of function BuildSpr_Normal
0000FB1E                            
0000FB1E                            ; ===========================================================================
0000FB1E                            
0000FB1E                            BuildSpr_FlipX:
0000FB1E 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FB22 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FB26                            
0000FB26                            	@loop:
0000FB26 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB2A 6700                       		beq.s	@return
0000FB2C 1019                       		move.b	(a1)+,d0	; y position
0000FB2E 4880                       		ext.w	d0
0000FB30 D042                       		add.w	d2,d0
0000FB32 34C0                       		move.w	d0,(a2)+
0000FB34 1819                       		move.b	(a1)+,d4	; size
0000FB36 14C4                       		move.b	d4,(a2)+	
0000FB38 5205                       		addq.b	#1,d5		; link
0000FB3A 14C5                       		move.b	d5,(a2)+
0000FB3C 1019                       		move.b	(a1)+,d0	; art tile
0000FB3E E148                       		lsl.w	#8,d0
0000FB40 1019                       		move.b	(a1)+,d0	
0000FB42 D04B                       		add.w	a3,d0
0000FB44 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FB48 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB4A 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB4C 4880                       		ext.w	d0
0000FB4E 4440                       		neg.w	d0			; negate it
0000FB50 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FB52 0244 0018                  		andi.w	#$18,d4
0000FB56 5044                       		addq.w	#8,d4
0000FB58 9044                       		sub.w	d4,d0
0000FB5A D043                       		add.w	d3,d0
0000FB5C 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB60 6600                       		bne.s	@writeX
0000FB62 5240                       		addq.w	#1,d0
0000FB64                            
0000FB64                            	@writeX:
0000FB64 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB66 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FB6A                            
0000FB6A                            	@return:
0000FB6A 4E75                       		rts	
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            BuildSpr_FlipY:
0000FB6C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB70 6700                       		beq.s	@return
0000FB72 1019                       		move.b	(a1)+,d0	; get y-offset
0000FB74 1811                       		move.b	(a1),d4		; get size
0000FB76 4880                       		ext.w	d0
0000FB78 4440                       		neg.w	d0		; negate y-offset
0000FB7A E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FB7C 0244 0018                  		andi.w	#$18,d4
0000FB80 5044                       		addq.w	#8,d4
0000FB82 9044                       		sub.w	d4,d0
0000FB84 D042                       		add.w	d2,d0	; add y-position
0000FB86 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB88 14D9                       		move.b	(a1)+,(a2)+	; size
0000FB8A 5205                       		addq.b	#1,d5
0000FB8C 14C5                       		move.b	d5,(a2)+	; link
0000FB8E 1019                       		move.b	(a1)+,d0	; art tile
0000FB90 E148                       		lsl.w	#8,d0
0000FB92 1019                       		move.b	(a1)+,d0
0000FB94 D04B                       		add.w	a3,d0
0000FB96 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FB9A 34C0                       		move.w	d0,(a2)+
0000FB9C 1019                       		move.b	(a1)+,d0	; x-position
0000FB9E 4880                       		ext.w	d0
0000FBA0 D043                       		add.w	d3,d0
0000FBA2 0240 01FF                  		andi.w	#$1FF,d0
0000FBA6 6600                       		bne.s	@writeX
0000FBA8 5240                       		addq.w	#1,d0
0000FBAA                            
0000FBAA                            	@writeX:
0000FBAA 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBAC 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FBB0                            
0000FBB0                            	@return:
0000FBB0 4E75                       		rts	
0000FBB2                            ; ===========================================================================
0000FBB2                            
0000FBB2                            BuildSpr_FlipXY:
0000FBB2 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBB6 6700                       		beq.s	@return
0000FBB8 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FBBA 1811                       		move.b	(a1),d4
0000FBBC 4880                       		ext.w	d0
0000FBBE 4440                       		neg.w	d0
0000FBC0 E70C                       		lsl.b	#3,d4
0000FBC2 0244 0018                  		andi.w	#$18,d4
0000FBC6 5044                       		addq.w	#8,d4
0000FBC8 9044                       		sub.w	d4,d0
0000FBCA D042                       		add.w	d2,d0
0000FBCC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBCE 1819                       		move.b	(a1)+,d4	; size
0000FBD0 14C4                       		move.b	d4,(a2)+	; link
0000FBD2 5205                       		addq.b	#1,d5
0000FBD4 14C5                       		move.b	d5,(a2)+	; art tile
0000FBD6 1019                       		move.b	(a1)+,d0
0000FBD8 E148                       		lsl.w	#8,d0
0000FBDA 1019                       		move.b	(a1)+,d0
0000FBDC D04B                       		add.w	a3,d0
0000FBDE 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FBE2 34C0                       		move.w	d0,(a2)+
0000FBE4 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FBE6 4880                       		ext.w	d0
0000FBE8 4440                       		neg.w	d0
0000FBEA D804                       		add.b	d4,d4
0000FBEC 0244 0018                  		andi.w	#$18,d4
0000FBF0 5044                       		addq.w	#8,d4
0000FBF2 9044                       		sub.w	d4,d0
0000FBF4 D043                       		add.w	d3,d0
0000FBF6 0240 01FF                  		andi.w	#$1FF,d0
0000FBFA 6600                       		bne.s	@writeX
0000FBFC 5240                       		addq.w	#1,d0
0000FBFE                            
0000FBFE                            	@writeX:
0000FBFE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC00 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FC04                            
0000FC04                            	@return:
0000FC04 4E75                       		rts	
0000FC06                            
0000FC06                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            ; Subroutine to	check if an object is off screen
0000FC06                            
0000FC06                            ; output:
0000FC06                            ;	d0 = flag set if object is off screen
0000FC06                            ; ---------------------------------------------------------------------------
0000FC06                            
0000FC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC06                            
0000FC06                            
0000FC06                            ChkObjectVisible:
0000FC06 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC0A 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC0E 6B00                       		bmi.s	@offscreen
0000FC10 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FC14 6C00                       		bge.s	@offscreen	; if not, branch
0000FC16                            
0000FC16 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FC1A 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FC1E 6B00                       		bmi.s	@offscreen
0000FC20 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FC24 6C00                       		bge.s	@offscreen	; if not, branch
0000FC26                            
0000FC26 7000                       		moveq	#0,d0		; set flag to 0
0000FC28 4E75                       		rts	
0000FC2A                            
0000FC2A                            	@offscreen:
0000FC2A 7001                       		moveq	#1,d0		; set flag to 1
0000FC2C 4E75                       		rts	
0000FC2E                            ; End of function ChkObjectVisible
0000FC2E                            
0000FC2E                            ; ---------------------------------------------------------------------------
0000FC2E                            ; Subroutine to	check if an object is off screen
0000FC2E                            ; More precise than above subroutine, taking width into account
0000FC2E                            
0000FC2E                            ; output:
0000FC2E                            ;	d0 = flag set if object is off screen
0000FC2E                            ; ---------------------------------------------------------------------------
0000FC2E                            
0000FC2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC2E                            
0000FC2E                            
0000FC2E                            ChkPartiallyVisible:
0000FC2E 7200                       		moveq	#0,d1
0000FC30 1228 0014                  		move.b	obActWid(a0),d1
0000FC34 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC38 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC3C D041                       		add.w	d1,d0		; add object width
0000FC3E 6B00                       		bmi.s	@offscreen2
0000FC40 D241                       		add.w	d1,d1
0000FC42 9041                       		sub.w	d1,d0
0000FC44 0C40 0140                  		cmpi.w	#320,d0
0000FC48 6C00                       		bge.s	@offscreen2
0000FC4A                            
0000FC4A 3228 000C                  		move.w	obY(a0),d1
0000FC4E 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC52 6B00                       		bmi.s	@offscreen2
0000FC54 0C41 00E0                  		cmpi.w	#224,d1
0000FC58 6C00                       		bge.s	@offscreen2
0000FC5A                            
0000FC5A 7000                       		moveq	#0,d0
0000FC5C 4E75                       		rts	
0000FC5E                            
0000FC5E                            	@offscreen2:
0000FC5E 7001                       		moveq	#1,d0
0000FC60 4E75                       		rts	
0000FC62                            ; End of function ChkPartiallyVisible
0000FC62                            ; End of function ChkPartiallyVisible
0000FC62                            
0000FC62                            ; ---------------------------------------------------------------------------
0000FC62                            ; Subroutine to	load a level's objects
0000FC62                            ; ---------------------------------------------------------------------------
0000FC62                            
0000FC62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC62                            
0000FC62                            
0000FC62                            ObjPosLoad:
0000FC62 7000                       		moveq	#0,d0
0000FC64 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC68 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC6C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC70                            ; End of function ObjPosLoad
0000FC70                            
0000FC70                            ; ===========================================================================
0000FC70 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC72 0000                       		dc.w OPL_Next-OPL_Index
0000FC74                            ; ===========================================================================
0000FC74                            
0000FC74                            OPL_Main:
0000FC74 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC78 3038 FE10                  		move.w	(v_zone).w,d0
0000FC7C ED08                       		lsl.b	#6,d0
0000FC7E E848                       		lsr.w	#4,d0
0000FC80 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC86 2248                       		movea.l	a0,a1
0000FC88 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC8C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC90 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC94 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC98 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FC9C 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FCA0 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCA4 34FC 0101                  		move.w	#$101,(a2)+
0000FCA8 303C 005E                  		move.w	#$5E,d0
0000FCAC                            
0000FCAC                            OPL_ClrList:
0000FCAC 429A                       		clr.l	(a2)+
0000FCAE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FCB2                            
0000FCB2 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCB6 7400                       		moveq	#0,d2
0000FCB8 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCBC 0446 0080                  		subi.w	#$80,d6
0000FCC0 6400                       		bhs.s	loc_D93C
0000FCC2 7C00                       		moveq	#0,d6
0000FCC4                            
0000FCC4                            loc_D93C:
0000FCC4 0246 FF80                  		andi.w	#$FF80,d6
0000FCC8 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCCC                            
0000FCCC                            loc_D944:
0000FCCC BC50                       		cmp.w	(a0),d6
0000FCCE 6300                       		bls.s	loc_D956
0000FCD0 4A28 0004                  		tst.b	4(a0)
0000FCD4 6A00                       		bpl.s	loc_D952
0000FCD6 1412                       		move.b	(a2),d2
0000FCD8 5212                       		addq.b	#1,(a2)
0000FCDA                            
0000FCDA                            loc_D952:
0000FCDA 5C48                       		addq.w	#6,a0
0000FCDC 60EE                       		bra.s	loc_D944
0000FCDE                            ; ===========================================================================
0000FCDE                            
0000FCDE                            loc_D956:
0000FCDE 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCE2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCE6 0446 0080                  		subi.w	#$80,d6
0000FCEA 6500                       		blo.s	loc_D976
0000FCEC                            
0000FCEC                            loc_D964:
0000FCEC BC50                       		cmp.w	(a0),d6
0000FCEE 6300                       		bls.s	loc_D976
0000FCF0 4A28 0004                  		tst.b	4(a0)
0000FCF4 6A00                       		bpl.s	loc_D972
0000FCF6 522A 0001                  		addq.b	#1,1(a2)
0000FCFA                            
0000FCFA                            loc_D972:
0000FCFA 5C48                       		addq.w	#6,a0
0000FCFC 60EE                       		bra.s	loc_D964
0000FCFE                            ; ===========================================================================
0000FCFE                            
0000FCFE                            loc_D976:
0000FCFE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD02 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FD08                            
0000FD08                            OPL_Next:
0000FD08 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD0C 7400                       		moveq	#0,d2
0000FD0E 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FD12 0246 FF80                  		andi.w	#$FF80,d6
0000FD16 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FD1A 6700 0000                  		beq.w	locret_DA3A
0000FD1E 6C00                       		bge.s	loc_D9F6
0000FD20 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD24 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD28 0446 0080                  		subi.w	#$80,d6
0000FD2C 6500                       		blo.s	loc_D9D2
0000FD2E                            
0000FD2E                            loc_D9A6:
0000FD2E BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD32 6C00                       		bge.s	loc_D9D2
0000FD34 5D48                       		subq.w	#6,a0
0000FD36 4A28 0004                  		tst.b	4(a0)
0000FD3A 6A00                       		bpl.s	loc_D9BC
0000FD3C 532A 0001                  		subq.b	#1,1(a2)
0000FD40 142A 0001                  		move.b	1(a2),d2
0000FD44                            
0000FD44                            loc_D9BC:
0000FD44 6100 0000                  		bsr.w	loc_DA3C
0000FD48 6600                       		bne.s	loc_D9C6
0000FD4A 5D48                       		subq.w	#6,a0
0000FD4C 60E0                       		bra.s	loc_D9A6
0000FD4E                            ; ===========================================================================
0000FD4E                            
0000FD4E                            loc_D9C6:
0000FD4E 4A28 0004                  		tst.b	4(a0)
0000FD52 6A00                       		bpl.s	loc_D9D0
0000FD54 522A 0001                  		addq.b	#1,1(a2)
0000FD58                            
0000FD58                            loc_D9D0:
0000FD58 5C48                       		addq.w	#6,a0
0000FD5A                            
0000FD5A                            loc_D9D2:
0000FD5A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD5E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD62 0646 0300                  		addi.w	#$300,d6
0000FD66                            
0000FD66                            loc_D9DE:
0000FD66 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD6A 6E00                       		bgt.s	loc_D9F0
0000FD6C 4A28 FFFE                  		tst.b	-2(a0)
0000FD70 6A00                       		bpl.s	loc_D9EC
0000FD72 5312                       		subq.b	#1,(a2)
0000FD74                            
0000FD74                            loc_D9EC:
0000FD74 5D48                       		subq.w	#6,a0
0000FD76 60EE                       		bra.s	loc_D9DE
0000FD78                            ; ===========================================================================
0000FD78                            
0000FD78                            loc_D9F0:
0000FD78 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD7C 4E75                       		rts	
0000FD7E                            ; ===========================================================================
0000FD7E                            
0000FD7E                            loc_D9F6:
0000FD7E 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD82 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD86 0646 0280                  		addi.w	#$280,d6
0000FD8A                            
0000FD8A                            loc_DA02:
0000FD8A BC50                       		cmp.w	(a0),d6
0000FD8C 6300                       		bls.s	loc_DA16
0000FD8E 4A28 0004                  		tst.b	4(a0)
0000FD92 6A00                       		bpl.s	loc_DA10
0000FD94 1412                       		move.b	(a2),d2
0000FD96 5212                       		addq.b	#1,(a2)
0000FD98                            
0000FD98                            loc_DA10:
0000FD98 6100 0000                  		bsr.w	loc_DA3C
0000FD9C 67EC                       		beq.s	loc_DA02
0000FD9E                            
0000FD9E                            loc_DA16:
0000FD9E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FDA2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FDA6 0446 0300                  		subi.w	#$300,d6
0000FDAA 6500                       		blo.s	loc_DA36
0000FDAC                            
0000FDAC                            loc_DA24:
0000FDAC BC50                       		cmp.w	(a0),d6
0000FDAE 6300                       		bls.s	loc_DA36
0000FDB0 4A28 0004                  		tst.b	4(a0)
0000FDB4 6A00                       		bpl.s	loc_DA32
0000FDB6 522A 0001                  		addq.b	#1,1(a2)
0000FDBA                            
0000FDBA                            loc_DA32:
0000FDBA 5C48                       		addq.w	#6,a0
0000FDBC 60EE                       		bra.s	loc_DA24
0000FDBE                            ; ===========================================================================
0000FDBE                            
0000FDBE                            loc_DA36:
0000FDBE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDC2                            
0000FDC2                            locret_DA3A:
0000FDC2 4E75                       		rts	
0000FDC4                            ; ===========================================================================
0000FDC4                            
0000FDC4                            loc_DA3C:
0000FDC4 4A28 0004                  		tst.b	4(a0)
0000FDC8 6A00                       		bpl.s	OPL_MakeItem
0000FDCA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FDD0 6700                       		beq.s	OPL_MakeItem
0000FDD2 5C48                       		addq.w	#6,a0
0000FDD4 7000                       		moveq	#0,d0
0000FDD6 4E75                       		rts	
0000FDD8                            ; ===========================================================================
0000FDD8                            
0000FDD8                            OPL_MakeItem:
0000FDD8 6100 0000                  		bsr.w	FindFreeObj
0000FDDC 6600                       		bne.s	locret_DA8A
0000FDDE 3358 0008                  		move.w	(a0)+,obX(a1)
0000FDE2 3018                       		move.w	(a0)+,d0
0000FDE4 3200                       		move.w	d0,d1
0000FDE6 0240 0FFF                  		andi.w	#$FFF,d0
0000FDEA 3340 000C                  		move.w	d0,obY(a1)
0000FDEE E559                       		rol.w	#2,d1
0000FDF0 0201 0003                  		andi.b	#3,d1
0000FDF4 1341 0001                  		move.b	d1,obRender(a1)
0000FDF8 1341 0022                  		move.b	d1,obStatus(a1)
0000FDFC 1018                       		move.b	(a0)+,d0
0000FDFE 6A00                       		bpl.s	loc_DA80
0000FE00 0200 007F                  		andi.b	#$7F,d0
0000FE04 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FE08                            
0000FE08                            loc_DA80:
0000FE08 1280                       		move.b	d0,0(a1)
0000FE0A 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FE0E 7000                       		moveq	#0,d0
0000FE10                            
0000FE10                            locret_DA8A:
0000FE10 4E75                       		rts	
0000FE12                            
0000FE12                            		include	"_incObj\sub FindFreeObj.asm"
0000FE12                            ; ---------------------------------------------------------------------------
0000FE12                            ; Subroutine to find a free object space
0000FE12                            
0000FE12                            ; output:
0000FE12                            ;	a1 = free position in object RAM
0000FE12                            ; ---------------------------------------------------------------------------
0000FE12                            
0000FE12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE12                            
0000FE12                            
0000FE12                            FindFreeObj:
0000FE12 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FE16 303C 005F                  		move.w	#$5F,d0
0000FE1A                            
0000FE1A                            	FFree_Loop:
0000FE1A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FE1C 6700                       		beq.s	FFree_Found	; if yes, branch
0000FE1E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FE22 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FE26                            
0000FE26                            	FFree_Found:
0000FE26 4E75                       		rts	
0000FE28                            
0000FE28                            ; End of function FindFreeObj
0000FE28                            
0000FE28                            
0000FE28                            ; ---------------------------------------------------------------------------
0000FE28                            ; Subroutine to find a free object space AFTER the current one
0000FE28                            
0000FE28                            ; output:
0000FE28                            ;	a1 = free position in object RAM
0000FE28                            ; ---------------------------------------------------------------------------
0000FE28                            
0000FE28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE28                            
0000FE28                            
0000FE28                            FindNextFreeObj:
0000FE28 2248                       		movea.l	a0,a1
0000FE2A 303C F000                  		move.w	#$F000,d0
0000FE2E 9048                       		sub.w	a0,d0
0000FE30 EC48                       		lsr.w	#6,d0
0000FE32 5340                       		subq.w	#1,d0
0000FE34 6500                       		bcs.s	NFree_Found
0000FE36                            
0000FE36                            	NFree_Loop:
0000FE36 4A11                       		tst.b	(a1)
0000FE38 6700                       		beq.s	NFree_Found
0000FE3A 43E9 0040                  		lea	$40(a1),a1
0000FE3E 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FE42                            
0000FE42                            	NFree_Found:
0000FE42 4E75                       		rts	
0000FE44                            
0000FE44                            ; End of function FindNextFreeObj
0000FE44                            ; End of function FindNextFreeObj
0000FE44                            		include	"_incObj\41 Springs.asm"
0000FE44                            ; ---------------------------------------------------------------------------
0000FE44                            ; Object 41 - springs
0000FE44                            ; ---------------------------------------------------------------------------
0000FE44                            
0000FE44                            Springs:
0000FE44 7000                       		moveq	#0,d0
0000FE46 1028 0024                  		move.b	obRoutine(a0),d0
0000FE4A 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE4E 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE52 6100 FB32                  		bsr.w	DisplaySprite
0000FE74 4E75                       		rts	
0000FE76                            ; ===========================================================================
0000FE76 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE78 0000                       		dc.w Spring_Up-Spring_Index
0000FE7A 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE7C 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE7E 0000                       		dc.w Spring_LR-Spring_Index
0000FE80 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE82 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE84 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE86 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE88 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE8A                            
0000FE8A =00000030                  spring_pow:	equ $30			; power of current spring
0000FE8A                            
0000FE8A F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE8C F600                       		dc.w -$A00		; power	of yellow spring
0000FE8E                            ; ===========================================================================
0000FE8E                            
0000FE8E                            Spring_Main:	; Routine 0
0000FE8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE92 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE9A 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FEA0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FEA6 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FEAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEB2 1028 0028                  		move.b	obSubtype(a0),d0
0000FEB6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FEBA 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FEBC                            
0000FEBC 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FEC2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEC8 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FECE 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FED4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FEDA                            
0000FEDA                            	Spring_NotLR:
0000FEDA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FEDE 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FEE0                            
0000FEE0 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FEE6 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FEEC                            
0000FEEC                            	Spring_NotDwn:
0000FEEC 0800 0001                  		btst	#1,d0
0000FEF0 6700                       		beq.s	loc_DB72
0000FEF2 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FEF8                            
0000FEF8                            loc_DB72:
0000FEF8 0240 000F                  		andi.w	#$F,d0
0000FEFC 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FF02 4E75                       		rts	
0000FF04                            ; ===========================================================================
0000FF04                            
0000FF04                            Spring_Up:	; Routine 2
0000FF04 323C 001B                  		move.w	#$1B,d1
0000FF08 343C 0008                  		move.w	#8,d2
0000FF0C 363C 0010                  		move.w	#$10,d3
0000FF10 3828 0008                  		move.w	obX(a0),d4
0000FF14 6100 0000                  		bsr.w	SolidObject
0000FF18 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FF1C 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FF1E 4E75                       		rts	
0000FF20                            ; ===========================================================================
0000FF20                            
0000FF20                            Spring_BounceUp:
0000FF20 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF24 5069 000C                  		addq.w	#8,obY(a1)
0000FF28 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FF2E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF34 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF3A 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FF40 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF46 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF4C 4228 0025                  		clr.b	obSolid(a0)
0000FF5A                            
0000FF5A                            Spring_AniUp:	; Routine 4
0000FF5A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF60 6000 CAD0                  		bra.w	AnimateSprite
0000FF64                            ; ===========================================================================
0000FF64                            
0000FF64                            Spring_ResetUp:	; Routine 6
0000FF64 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF6A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF6E 4E75                       		rts	
0000FF70                            ; ===========================================================================
0000FF70                            
0000FF70                            Spring_LR:	; Routine 8
0000FF70 323C 0013                  		move.w	#$13,d1
0000FF74 343C 000E                  		move.w	#$E,d2
0000FF78 363C 000F                  		move.w	#$F,d3
0000FF7C 3828 0008                  		move.w	obX(a0),d4
0000FF80 6100 0000                  		bsr.w	SolidObject
0000FF84 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF8A 6600                       		bne.s	loc_DC0C
0000FF8C 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF92                            
0000FF92                            loc_DC0C:
0000FF92 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF98 6600                       		bne.s	Spring_BounceLR
0000FF9A 4E75                       		rts	
0000FF9C                            ; ===========================================================================
0000FF9C                            
0000FF9C                            Spring_BounceLR:
0000FF9C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FFA0 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FFA6 5069 0008                  		addq.w	#8,obX(a1)
0000FFAA 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FFB0 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FFB2 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FFB8 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FFBC                            
0000FFBC                            	Spring_Flipped:
0000FFBC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FFC2 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FFC8 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FFCE 0829 0002 0022             		btst	#2,obStatus(a1)
0000FFD4 6600                       		bne.s	loc_DC56
0000FFD6 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FFDC                            
0000FFDC                            loc_DC56:
0000FFDC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FFE2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFF2                            
0000FFF2                            Spring_AniLR:	; Routine $A
0000FFF2 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFF6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFFC 6000 CA34                  		bra.w	AnimateSprite
00010000                            ; ===========================================================================
00010000                            
00010000                            Spring_ResetLR:	; Routine $C
00010000 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
00010006 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0001000A 4E75                       		rts	
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            Spring_Dwn:	; Routine $E
0001000C 323C 001B                  		move.w	#$1B,d1
00010010 343C 0008                  		move.w	#8,d2
00010014 363C 0010                  		move.w	#$10,d3
00010018 3828 0008                  		move.w	obX(a0),d4
0001001C 6100 0000                  		bsr.w	SolidObject
00010020 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00010026 6600                       		bne.s	loc_DCA4
00010028 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0001002E                            
0001002E                            loc_DCA4:
0001002E 4A28 0025                  		tst.b	obSolid(a0)
00010032 6600                       		bne.s	locret_DCAE
00010034 4A44                       		tst.w	d4
00010036 6B00                       		bmi.s	Spring_BounceDwn
00010038                            
00010038                            locret_DCAE:
00010038 4E75                       		rts	
0001003A                            ; ===========================================================================
0001003A                            
0001003A                            Spring_BounceDwn:
0001003A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001003E 5169 000C                  		subq.w	#8,obY(a1)
00010042 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
00010048 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0001004C 08E9 0001 0022             		bset	#1,obStatus(a1)
00010052 08A9 0003 0022             		bclr	#3,obStatus(a1)
00010058 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001005E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010064 4228 0025                  		clr.b	obSolid(a0)
00010072                            
00010072                            Spring_AniDwn:	; Routine $10
00010072 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010078 6000 C9B8                  		bra.w	AnimateSprite
0001007C                            ; ===========================================================================
0001007C                            
0001007C                            Spring_ResetDwn:
0001007C                            		; Routine $12
0001007C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010082 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
00010086 4E75                       		rts	
00010086 4E75                       		rts	
00010088                            		include	"_anim\Springs.asm"
00010088                            ; ---------------------------------------------------------------------------
00010088                            ; Animation script - springs
00010088                            ; ---------------------------------------------------------------------------
00010088 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0001008A 0000                       		dc.w byte_DD0E-Ani_Spring
0001008C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
00010098 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
000100A4                            		even
000100A4                            		even
000100A4                            Map_Spring:	include	"_maps\Springs.asm"
000100A4                            ; ---------------------------------------------------------------------------
000100A4                            ; Sprite mappings - springs
000100A4                            ; ---------------------------------------------------------------------------
000100A4                            Map_Spring_internal:
000100A4 0000                       		dc.w M_Spg_Up-Map_Spring_internal
000100A6 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
000100A8 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
000100AA 0000                       		dc.w M_Spg_Left-Map_Spring_internal
000100AC 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
000100AE 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
000100B0 02                         M_Spg_Up:	dc.b 2			; facing up
000100B1 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000100B6 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
000100BB 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
000100BC 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000100C1 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000100C2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000100C7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000100CC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000100D1 01                         M_Spg_Left:	dc.b 1			; facing left
000100D2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000100D7 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000100D8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000100DD 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000100DE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000100E3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000100E8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100ED 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100F2                            		even
000100F2                            		even
000100F2                            
000100F2                            		include	"_incObj\42 Newtron.asm"
000100F2                            ; ---------------------------------------------------------------------------
000100F2                            ; Object 42 - Newtron enemy (GHZ)
000100F2                            ; ---------------------------------------------------------------------------
000100F2                            
000100F2                            Newtron:
000100F2 7000                       		moveq	#0,d0
000100F4 1028 0024                  		move.b	obRoutine(a0),d0
000100F8 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
000100FC 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010100                            ; ===========================================================================
00010100 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010102 0000                       		dc.w Newt_Action-Newt_Index
00010104 0000                       		dc.w Newt_Delete-Newt_Index
00010106                            ; ===========================================================================
00010106                            
00010106                            Newt_Main:	; Routine 0
00010106 5428 0024                  		addq.b	#2,obRoutine(a0)
0001010A 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010112 317C 049B 0002             		move.w	#$49B,obGfx(a0)
00010118 117C 0004 0001             		move.b	#4,obRender(a0)
0001011E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010124 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001012A 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010130 117C 0008 0017             		move.b	#8,obWidth(a0)
00010136                            
00010136                            Newt_Action:	; Routine 2
00010136 7000                       		moveq	#0,d0
00010138 1028 0025                  		move.b	ob2ndRout(a0),d0
0001013C 323B 0000                  		move.w	@index(pc,d0.w),d1
00010140 4EBB 1000                  		jsr	@index(pc,d1.w)
00010144 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001014A 6100 C8E6                  		bsr.w	AnimateSprite
0001014E 6000 0000                  		bra.w	RememberState
00010152                            ; ===========================================================================
00010152 0000                       @index:		dc.w @chkdistance-@index
00010154 0000                       		dc.w @type00-@index
00010156 0000                       		dc.w @matchfloor-@index
00010158 0000                       		dc.w @speed-@index
0001015A 0000                       		dc.w @type01-@index
0001015C                            ; ===========================================================================
0001015C                            
0001015C                            @chkdistance:
0001015C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010162 3038 D008                  		move.w	(v_player+obX).w,d0
00010166 9068 0008                  		sub.w	obX(a0),d0
0001016A 6400                       		bcc.s	@sonicisright
0001016C 4440                       		neg.w	d0
0001016E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010174                            
00010174                            	@sonicisright:
00010174 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010178 6400                       		bcc.s	@outofrange	; if not, branch
0001017A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0001017E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010184 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
00010188 6700                       		beq.s	@istype00	; if type is 00, branch
0001018A                            
0001018A 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010190 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
00010196 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0001019C                            
0001019C                            	@outofrange:
0001019C                            	@istype00:
0001019C 4E75                       		rts	
0001019E                            ; ===========================================================================
0001019E                            
0001019E                            @type00:
0001019E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000101A4 6400                       		bcc.s	@fall		; is yes, branch
000101A6 08E8 0000 0022             		bset	#0,obStatus(a0)
000101AC 3038 D008                  		move.w	(v_player+obX).w,d0
000101B0 9068 0008                  		sub.w	obX(a0),d0
000101B4 6400                       		bcc.s	@sonicisright2
000101B6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000101BC                            
000101BC                            	@sonicisright2:
000101BC 4E75                       		rts	
000101BE                            ; ===========================================================================
000101BE                            
000101BE                            	@fall:
000101BE 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101C4 6600                       		bne.s	@loc_DE42
000101C6 117C 000C 0020             		move.b	#$C,obColType(a0)
000101CC                            
000101CC                            	@loc_DE42:
000101CC 6100 F76C                  		bsr.w	ObjectFall
000101D0 6100 0000                  		bsr.w	ObjFloorDist
000101D4 4A41                       		tst.w	d1		; has newtron hit the floor?
000101D6 6A00                       		bpl.s	@keepfalling	; if not, branch
000101D8                            
000101D8 D368 000C                  		add.w	d1,obY(a0)
000101DC 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000101E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101E6 117C 0002 001C             		move.b	#2,obAnim(a0)
000101EC 0828 0005 0002             		btst	#5,obGfx(a0)
000101F2 6700                       		beq.s	@pppppppp
000101F4 5228 001C                  		addq.b	#1,obAnim(a0)
000101F8                            
000101F8                            	@pppppppp:
000101F8 117C 000D 0020             		move.b	#$D,obColType(a0)
000101FE 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
00010204 0828 0000 0022             		btst	#0,obStatus(a0)
0001020A 6600                       		bne.s	@keepfalling
0001020C 4468 0010                  		neg.w	obVelX(a0)
00010210                            
00010210                            	@keepfalling:
00010210 4E75                       		rts	
00010212                            ; ===========================================================================
00010212                            
00010212                            @matchfloor:
00010212 6100 F75E                  		bsr.w	SpeedToPos
00010216 6100 0000                  		bsr.w	ObjFloorDist
0001021A 0C41 FFF8                  		cmpi.w	#-8,d1
0001021E 6D00                       		blt.s	@nextroutine
00010220 0C41 000C                  		cmpi.w	#$C,d1
00010224 6C00                       		bge.s	@nextroutine
00010226 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0001022A 4E75                       		rts	
0001022C                            ; ===========================================================================
0001022C                            
0001022C                            	@nextroutine:
0001022C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010230 4E75                       		rts	
00010232                            ; ===========================================================================
00010232                            
00010232                            @speed:
00010232 6100 F73E                  		bsr.w	SpeedToPos
00010236 4E75                       		rts	
00010238                            ; ===========================================================================
00010238                            
00010238                            @type01:
00010238 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0001023E 6600                       		bne.s	@firemissile
00010240 117C 000C 0020             		move.b	#$C,obColType(a0)
00010246                            
00010246                            	@firemissile:
00010246 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001024C 6600                       		bne.s	@fail
0001024E 4A28 0032                  		tst.b	$32(a0)
00010252 6600                       		bne.s	@fail
00010254 117C 0001 0032             		move.b	#1,$32(a0)
0001025A 6100 FBB6                  		bsr.w	FindFreeObj
0001025E 6600                       		bne.s	@fail
00010260 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010264 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001026A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010270 5169 000C                  		subq.w	#8,obY(a1)
00010274 337C 0200 0010             		move.w	#$200,obVelX(a1)
0001027A 303C 0014                  		move.w	#$14,d0
0001027E 0828 0000 0022             		btst	#0,obStatus(a0)
00010284 6600                       		bne.s	@noflip
00010286 4440                       		neg.w	d0
00010288 4469 0010                  		neg.w	obVelX(a1)
0001028C                            
0001028C                            	@noflip:
0001028C D169 0008                  		add.w	d0,obX(a1)
00010290 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010296 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001029C                            
0001029C                            	@fail:
0001029C 4E75                       		rts	
0001029E                            ; ===========================================================================
0001029E                            
0001029E                            Newt_Delete:	; Routine 4
0001029E 6000 F726                  		bra.w	DeleteObject
0001029E 6000 F726                  		bra.w	DeleteObject
000102A2                            		include	"_anim\Newtron.asm"
000102A2                            ; ---------------------------------------------------------------------------
000102A2                            ; Animation script - Newtron enemy
000102A2                            ; ---------------------------------------------------------------------------
000102A2 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000102A4 0000                       		dc.w A_Newt_Drop-Ani_Newt
000102A6 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000102A8 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000102AA 0000                       		dc.w A_Newt_Fires-Ani_Newt
000102AC 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000102B0 00                         		even
000102B0 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000102B8 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000102BC 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000102C0 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000102CA 00                         		even
000102CA 00                         		even
000102CA                            Map_Newt:	include	"_maps\Newtron.asm"
000102CA                            ; ---------------------------------------------------------------------------
000102CA                            ; Sprite mappings - Newtron enemy (GHZ)
000102CA                            ; ---------------------------------------------------------------------------
000102CA                            Map_Newt_internal:
000102CA 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000102CC 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000102CE 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000102D0 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000102D2 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000102D4 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000102D6 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000102D8 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000102DA 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000102DC 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000102DE 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000102E0 03                         M_Newt_Trans:	dc.b 3
000102E1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102E6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102EB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102F0 03                         M_Newt_Norm:	dc.b 3
000102F1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102F6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102FB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010300 03                         M_Newt_Fires:	dc.b 3
00010301 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
00010306 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001030B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010310 04                         M_Newt_Drop1:	dc.b 4
00010311 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
00010316 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001031B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010320 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00010325 03                         M_Newt_Drop2:	dc.b 3
00010326 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001032B FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010330 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00010335 02                         M_Newt_Drop3:	dc.b 2
00010336 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001033B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010340 03                         M_Newt_Fly1a:	dc.b 3
00010341 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010346 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001034B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010350 03                         M_Newt_Fly1b:	dc.b 3
00010351 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010356 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001035B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010360 03                         M_Newt_Fly2a:	dc.b 3
00010361 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010366 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001036B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010370 03                         M_Newt_Fly2b:	dc.b 3
00010371 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010376 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001037B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010380 00                         M_Newt_Blank:	dc.b 0
00010382 00                         		even
00010382 00                         		even
00010382                            		include	"_incObj\43 Roller.asm"
00010382                            ; ---------------------------------------------------------------------------
00010382                            ; Object 43 - Roller enemy (SYZ)
00010382                            ; ---------------------------------------------------------------------------
00010382                            
00010382                            Roller:
00010382 7000                       		moveq	#0,d0
00010384 1028 0024                  		move.b	obRoutine(a0),d0
00010388 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0001038C 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010390                            ; ===========================================================================
00010390 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010392 0000                       		dc.w Roll_Action-Roll_Index
00010394                            ; ===========================================================================
00010394                            
00010394                            Roll_Main:	; Routine 0
00010394 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001039A 117C 0008 0017             		move.b	#8,obWidth(a0)
000103A0 6100 F598                  		bsr.w	ObjectFall
000103A4 6100 0000                  		bsr.w	ObjFloorDist
000103A8 4A41                       		tst.w	d1
000103AA 6A00                       		bpl.s	locret_E052
000103AC D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000103B0 317C 0000 0012             		move.w	#0,obVelY(a0)
000103B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000103BA 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000103C2 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000103C8 117C 0004 0001             		move.b	#4,obRender(a0)
000103CE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000103D4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000103DA                            
000103DA                            	locret_E052:
000103DA 4E75                       		rts	
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            Roll_Action:	; Routine 2
000103DC 7000                       		moveq	#0,d0
000103DE 1028 0025                  		move.b	ob2ndRout(a0),d0
000103E2 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103E6 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103EA 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103F0 6100 C640                  		bsr.w	AnimateSprite
000103F4 3028 0008                  		move.w	obX(a0),d0
000103F8 0240 FF80                  		andi.w	#$FF80,d0
000103FC 3238 F700                  		move.w	(v_screenposx).w,d1
00010400 0441 0080                  		subi.w	#$80,d1
00010404 0241 FF80                  		andi.w	#$FF80,d1
00010408 9041                       		sub.w	d1,d0
0001040A 0C40 0280                  		cmpi.w	#$280,d0
0001040E 6E00 0000                  		bgt.w	Roll_ChkGone
00010412 6000 F572                  		bra.w	DisplaySprite
00010416                            ; ===========================================================================
00010416                            
00010416                            Roll_ChkGone:
00010416 45F8 FC00                  		lea	(v_objstate).w,a2
0001041A 7000                       		moveq	#0,d0
0001041C 1028 0023                  		move.b	obRespawnNo(a0),d0
00010420 6700                       		beq.s	Roll_Delete
00010422 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010428                            
00010428                            Roll_Delete:
00010428 6000 F59C                  		bra.w	DeleteObject
0001042C                            ; ===========================================================================
0001042C 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0001042E 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010430 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010432 0000                       		dc.w Roll_MatchFloor-Roll_Index2
00010434                            ; ===========================================================================
00010434                            
00010434                            Roll_RollChk:
00010434 3038 D008                  		move.w	(v_player+obX).w,d0
00010438 0440 0100                  		subi.w	#$100,d0
0001043C 6500                       		bcs.s	loc_E0D2
0001043E 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010442 6500                       		bcs.s	loc_E0D2
00010444 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010448 117C 0002 001C             		move.b	#2,obAnim(a0)
0001044E 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010454 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0001045A                            
0001045A                            loc_E0D2:
0001045A 588F                       		addq.l	#4,sp
0001045C 4E75                       		rts	
0001045E                            ; ===========================================================================
0001045E                            
0001045E                            Roll_RollNoChk:
0001045E 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010464 6700                       		beq.s	loc_E0F8
00010466 5368 0030                  		subq.w	#1,$30(a0)
0001046A 6A00                       		bpl.s	locret_E0F6
0001046C 117C 0001 001C             		move.b	#1,obAnim(a0)
00010472 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010478 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001047E                            
0001047E                            locret_E0F6:
0001047E 4E75                       		rts	
00010480                            ; ===========================================================================
00010480                            
00010480                            loc_E0F8:
00010480 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010484 4E75                       		rts	
00010486                            ; ===========================================================================
00010486                            
00010486                            Roll_ChkJump:
00010486 6100 0000                  		bsr.w	Roll_Stop
0001048A 6100 F4E6                  		bsr.w	SpeedToPos
0001048E 6100 0000                  		bsr.w	ObjFloorDist
00010492 0C41 FFF8                  		cmpi.w	#-8,d1
00010496 6D00                       		blt.s	Roll_Jump
00010498 0C41 000C                  		cmpi.w	#$C,d1
0001049C 6C00                       		bge.s	Roll_Jump
0001049E D368 000C                  		add.w	d1,obY(a0)
000104A2 4E75                       		rts	
000104A4                            ; ===========================================================================
000104A4                            
000104A4                            Roll_Jump:
000104A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000104A8 08E8 0000 0032             		bset	#0,$32(a0)
000104AE 6700                       		beq.s	locret_E12E
000104B0 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000104B6                            
000104B6                            locret_E12E:
000104B6 4E75                       		rts	
000104B8                            ; ===========================================================================
000104B8                            
000104B8                            Roll_MatchFloor:
000104B8 6100 F480                  		bsr.w	ObjectFall
000104BC 4A68 0012                  		tst.w	obVelY(a0)
000104C0 6B00                       		bmi.s	locret_E150
000104C2 6100 0000                  		bsr.w	ObjFloorDist
000104C6 4A41                       		tst.w	d1
000104C8 6A00                       		bpl.s	locret_E150
000104CA D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000104CE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000104D2 317C 0000 0012             		move.w	#0,obVelY(a0)
000104D8                            
000104D8                            locret_E150:
000104D8 4E75                       		rts	
000104DA                            
000104DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104DA                            
000104DA                            
000104DA                            Roll_Stop:
000104DA 4A28 0032                  		tst.b	$32(a0)
000104DE 6B00                       		bmi.s	locret_E188
000104E0 3038 D008                  		move.w	(v_player+obX).w,d0
000104E4 0440 0030                  		subi.w	#$30,d0
000104E8 9068 0008                  		sub.w	obX(a0),d0
000104EC 6400                       		bcc.s	locret_E188
000104EE 117C 0000 001C             		move.b	#0,obAnim(a0)
000104F4 117C 000E 0020             		move.b	#$E,obColType(a0)
000104FA 4268 0010                  		clr.w	obVelX(a0)
000104FE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00010504 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0001050A 08E8 0007 0032             		bset	#7,$32(a0)
00010510                            
00010510                            locret_E188:
00010510 4E75                       		rts	
00010512                            ; End of function Roll_Stop
00010512                            ; End of function Roll_Stop
00010512                            		include	"_anim\Roller.asm"
00010512                            ; ---------------------------------------------------------------------------
00010512                            ; Animation script - Roller enemy
00010512                            ; ---------------------------------------------------------------------------
00010512 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
00010514 0000                       		dc.w A_Roll_Fold-Ani_Roll
00010516 0000                       		dc.w A_Roll_Roll-Ani_Roll
00010518 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
0001051E 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
00010524 00                         		even
00010524 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0001052A 00                         		even
0001052A 00                         		even
0001052A                            Map_Roll:	include	"_maps\Roller.asm"
0001052A                            ; --------------------------------------------------------------------------------
0001052A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001052A                            ; --------------------------------------------------------------------------------
0001052A                            
0001052A                            SME_q3BmU:	
0001052A 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
0001052E 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010532 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
00010534 02                         SME_q3BmU_A:	dc.b 2	
00010535 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
0001053A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
0001053F 02                         SME_q3BmU_15:	dc.b 2	
00010540 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010545 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001054A 01                         SME_q3BmU_20:	dc.b 1	
0001054B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010550 01                         SME_q3BmU_26:	dc.b 1	
00010551 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010556 01                         SME_q3BmU_2C:	dc.b 1	
00010557 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001055C                            		even
0001055C                            		even
0001055C                            
0001055C                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            ; Object 44 - edge walls (GHZ)
0001055C                            ; ---------------------------------------------------------------------------
0001055C                            
0001055C                            EdgeWalls:
0001055C 7000                       		moveq	#0,d0
0001055E 1028 0024                  		move.b	obRoutine(a0),d0
00010562 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010566 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001056A                            ; ===========================================================================
0001056A 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001056C 0000                       		dc.w Edge_Solid-Edge_Index
0001056E 0000                       		dc.w Edge_Display-Edge_Index
00010570                            ; ===========================================================================
00010570                            
00010570                            Edge_Main:	; Routine 0
00010570 5428 0024                  		addq.b	#2,obRoutine(a0)
00010574 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001057C 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010582 0028 0004 0001             		ori.b	#4,obRender(a0)
00010588 117C 0008 0014             		move.b	#8,obActWid(a0)
0001058E 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010594 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001059A 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000105A0 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000105A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000105A6 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000105A8                            ; ===========================================================================
000105A8                            
000105A8                            Edge_Solid:	; Routine 2
000105A8 323C 0013                  		move.w	#$13,d1
000105AC 343C 0028                  		move.w	#$28,d2
000105B0 6100 A130                  		bsr.w	Obj44_SolidWall
000105B4                            
000105B4                            Edge_Display:	; Routine 4
000105B4 6100 F3D0                  		bsr.w	DisplaySprite
000105D6 4E75                       		rts	
000105D6 4E75                       		rts	
000105D8                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000105D8                            ; ---------------------------------------------------------------------------
000105D8                            ; Sprite mappings - walls (GHZ)
000105D8                            ; ---------------------------------------------------------------------------
000105D8                            Map_Edge_internal:
000105D8 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000105DA 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000105DC 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000105DE 04                         M_Edge_Shadow:	dc.b 4
000105DF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105E4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105E9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105EE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105F3 04                         M_Edge_Light:	dc.b 4
000105F4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105F9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105FE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010603 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00010608 04                         M_Edge_Dark:	dc.b 4
00010609 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
0001060E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010613 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
00010618 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0001061E 00                         		even
0001061E 00                         		even
0001061E                            
0001061E                            		include	"_incObj\13 Lava Ball Maker.asm"
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            ; Object 13 - lava ball	maker (MZ, SLZ)
0001061E                            ; ---------------------------------------------------------------------------
0001061E                            
0001061E                            LavaMaker:
0001061E 7000                       		moveq	#0,d0
00010620 1028 0024                  		move.b	obRoutine(a0),d0
00010624 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
00010628 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
0001062C 6000 0000                  		bra.w	LBall_ChkDel
00010630                            ; ===========================================================================
00010630 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010632 0000                       		dc.w LavaM_MakeLava-LavaM_Index
00010634                            ; ---------------------------------------------------------------------------
00010634                            ;
00010634                            ; Lava ball production rates
00010634                            ;
00010634 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
0001063A                            ; ===========================================================================
0001063A                            
0001063A                            LavaM_Main:	; Routine 0
0001063A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001063E 1028 0028                  		move.b	obSubtype(a0),d0
00010642 E848                       		lsr.w	#4,d0
00010644 0240 000F                  		andi.w	#$F,d0
00010648 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001064E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010654 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001065A                            
0001065A                            LavaM_MakeLava:	; Routine 2
0001065A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001065E 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010660 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010666 6100 F59E                  		bsr.w	ChkObjectVisible
0001066A 6600                       		bne.s	LavaM_Wait
0001066C 6100 F7A4                  		bsr.w	FindFreeObj
00010670 6600                       		bne.s	LavaM_Wait
00010672 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010676 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001067C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010682 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010688                            
00010688                            	LavaM_Wait:
00010688 4E75                       		rts	
00010688 4E75                       		rts	
0001068A                            		include	"_incObj\14 Lava Ball.asm"
0001068A                            ; ---------------------------------------------------------------------------
0001068A                            ; Object 14 - lava balls (MZ, SLZ)
0001068A                            ; ---------------------------------------------------------------------------
0001068A                            
0001068A                            LavaBall:
0001068A 7000                       		moveq	#0,d0
0001068C 1028 0024                  		move.b	obRoutine(a0),d0
00010690 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010694 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010698 6000 F2EC                  		bra.w	DisplaySprite
0001069C                            ; ===========================================================================
0001069C 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001069E 0000                       		dc.w LBall_Action-LBall_Index
000106A0 0000                       		dc.w LBall_Delete-LBall_Index
000106A2                            
000106A2 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000106AC 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            LBall_Main:	; Routine 0
000106B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000106B8 117C 0008 0016             		move.b	#8,obHeight(a0)
000106BE 117C 0008 0017             		move.b	#8,obWidth(a0)
000106C4 217C 0000 D684 0004        		move.l	#Map_Fire,obMap(a0)
000106CC 317C 0345 0002             		move.w	#$345,obGfx(a0)
000106D2 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000106D8 6600                       		bne.s	@notSLZ
000106DA 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106E0                            
000106E0                            	@notSLZ:
000106E0 117C 0004 0001             		move.b	#4,obRender(a0)
000106E6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106EC 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106F2 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106F8 4A28 0029                  		tst.b	$29(a0)
000106FC 6700                       		beq.s	@speed
000106FE 5428 0018                  		addq.b	#2,obPriority(a0)
00010702                            
00010702                            	@speed:
00010702 7000                       		moveq	#0,d0
00010704 1028 0028                  		move.b	obSubtype(a0),d0
00010708 D040                       		add.w	d0,d0
0001070A 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010710 117C 0008 0014             		move.b	#8,obActWid(a0)
00010716 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0001071C 6500                       		bcs.s	@sound		; if yes, branch
0001071E                            
0001071E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010724 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0001072A 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010730 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010736                            
00010736                            	@sound:
00010740                            
00010740                            LBall_Action:	; Routine 2
00010740 7000                       		moveq	#0,d0
00010742 1028 0028                  		move.b	obSubtype(a0),d0
00010746 D040                       		add.w	d0,d0
00010748 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001074C 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010750 6100 F220                  		bsr.w	SpeedToPos
00010754 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001075A 6100 C2D6                  		bsr.w	AnimateSprite
0001075E                            
0001075E                            LBall_ChkDel:
0001077C 4E75                       		rts	
0001077E                            ; ===========================================================================
0001077E 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010782 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010786 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001078A 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001078E 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010790                            ; ===========================================================================
00010790                            ; lavaball types 00-03 fly up and fall back down
00010790                            
00010790                            LBall_Type00:
00010790 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010796 3028 0030                  		move.w	$30(a0),d0
0001079A B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001079E 6400                       		bcc.s	loc_E41E	; if not, branch
000107A0 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000107A4                            
000107A4                            loc_E41E:
000107A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107AA 4A68 0012                  		tst.w	obVelY(a0)
000107AE 6A00                       		bpl.s	locret_E430
000107B0 08E8 0001 0022             		bset	#1,obStatus(a0)
000107B6                            
000107B6                            locret_E430:
000107B6 4E75                       		rts	
000107B8                            ; ===========================================================================
000107B8                            ; lavaball type	04 flies up until it hits the ceiling
000107B8                            
000107B8                            LBall_Type04:
000107B8 08E8 0001 0022             		bset	#1,obStatus(a0)
000107BE 6100 0000                  		bsr.w	ObjHitCeiling
000107C2 4A41                       		tst.w	d1
000107C4 6A00                       		bpl.s	locret_E452
000107C6 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107CC 117C 0001 001C             		move.b	#1,obAnim(a0)
000107D2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000107D8                            
000107D8                            locret_E452:
000107D8 4E75                       		rts	
000107DA                            ; ===========================================================================
000107DA                            ; lavaball type	05 falls down until it hits the	floor
000107DA                            
000107DA                            LBall_Type05:
000107DA 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107E0 6100 0000                  		bsr.w	ObjFloorDist
000107E4 4A41                       		tst.w	d1
000107E6 6A00                       		bpl.s	locret_E474
000107E8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107EE 117C 0001 001C             		move.b	#1,obAnim(a0)
000107F4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107FA                            
000107FA                            locret_E474:
000107FA 4E75                       		rts	
000107FC                            ; ===========================================================================
000107FC                            ; lavaball types 06-07 move sideways
000107FC                            
000107FC                            LBall_Type06:
000107FC 08E8 0000 0022             		bset	#0,obStatus(a0)
00010802 76F8                       		moveq	#-8,d3
00010804 6100 0000                  		bsr.w	ObjHitWallLeft
00010808 4A41                       		tst.w	d1
0001080A 6A00                       		bpl.s	locret_E498
0001080C 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010812 117C 0003 001C             		move.b	#3,obAnim(a0)
00010818 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001081E                            
0001081E                            locret_E498:
0001081E 4E75                       		rts	
00010820                            ; ===========================================================================
00010820                            
00010820                            LBall_Type07:
00010820 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010826 7608                       		moveq	#8,d3
00010828 6100 0000                  		bsr.w	ObjHitWallRight
0001082C 4A41                       		tst.w	d1
0001082E 6A00                       		bpl.s	locret_E4BC
00010830 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010836 117C 0003 001C             		move.b	#3,obAnim(a0)
0001083C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010842                            
00010842                            locret_E4BC:
00010842 4E75                       		rts	
00010844                            ; ===========================================================================
00010844                            
00010844                            LBall_Type08:
00010844 4E75                       		rts	
00010846                            ; ===========================================================================
00010846                            
00010846                            LBall_Delete:
00010846 6000 F17E                  		bra.w	DeleteObject
00010846 6000 F17E                  		bra.w	DeleteObject
0001084A                            		include	"_anim\Fireballs.asm"
0001084A                            ; ---------------------------------------------------------------------------
0001084A                            ; Animation script - lava balls
0001084A                            ; ---------------------------------------------------------------------------
0001084A 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001084C 0000                       		dc.w @vertcollide-Ani_Fire
0001084E 0000                       		dc.w @horizontal-Ani_Fire
00010850 0000                       		dc.w @horicollide-Ani_Fire
00010852 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010858 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001085C 00                         		even
0001085C 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010862 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010866 00                         		even
00010866 00                         		even
00010866                            
00010866                            		include	"_incObj\6D Flamethrower.asm"
00010866                            ; ---------------------------------------------------------------------------
00010866                            ; Object 6D - flame thrower (SBZ)
00010866                            ; ---------------------------------------------------------------------------
00010866                            
00010866                            Flamethrower:
00010866 7000                       		moveq	#0,d0
00010868 1028 0024                  		move.b	obRoutine(a0),d0
0001086C 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010870 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010874                            ; ===========================================================================
00010874 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010876 0000                       		dc.w Flame_Action-Flame_Index
00010878                            ; ===========================================================================
00010878                            
00010878                            Flame_Main:	; Routine 0
00010878 5428 0024                  		addq.b	#2,obRoutine(a0)
0001087C 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010884 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001088A 0028 0004 0001             		ori.b	#4,obRender(a0)
00010890 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010896 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001089C 117C 000C 0014             		move.b	#$C,obActWid(a0)
000108A2 1028 0028                  		move.b	obSubtype(a0),d0
000108A6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000108AA D040                       		add.w	d0,d0		; multiply by 2
000108AC 3140 0030                  		move.w	d0,$30(a0)
000108B0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000108B4 1028 0028                  		move.b	obSubtype(a0),d0
000108B8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000108BC EB48                       		lsl.w	#5,d0		; multiply by $20
000108BE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000108C2 117C 000A 0036             		move.b	#$A,$36(a0)
000108C8 0828 0001 0022             		btst	#1,obStatus(a0)
000108CE 6700                       		beq.s	Flame_Action
000108D0 117C 0002 001C             		move.b	#2,obAnim(a0)
000108D6 117C 0015 0036             		move.b	#$15,$36(a0)
000108DC                            
000108DC                            Flame_Action:	; Routine 2
000108DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108E0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108E2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108E8 0868 0000 001C             		bchg	#0,obAnim(a0)
000108EE 6700                       		beq.s	loc_E57A
000108F0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010900                            
00010900                            loc_E57A:
00010900 43F9 0000 0000             		lea	(Ani_Flame).l,a1
00010906 6100 C12A                  		bsr.w	AnimateSprite
0001090A 117C 0000 0020             		move.b	#0,obColType(a0)
00010910 1028 0036                  		move.b	$36(a0),d0
00010914 B028 001A                  		cmp.b	obFrame(a0),d0
00010918 6600                       		bne.s	Flame_ChkDel
0001091A 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010920                            
00010920                            Flame_ChkDel:
0001093E 6000 F046                  		bra.w	DisplaySprite
0001093E 6000 F046                  		bra.w	DisplaySprite
00010942                            		include	"_anim\Flamethrower.asm"
00010942                            ; ---------------------------------------------------------------------------
00010942                            ; Animation script - flamethrower (SBZ)
00010942                            ; ---------------------------------------------------------------------------
00010942 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010944 0000                       		dc.w @pipe2-Ani_Flame
00010946 0000                       		dc.w @valve1-Ani_Flame
00010948 0000                       		dc.w @valve2-Ani_Flame
0001094A 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010958 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010962 00                         		even
00010962 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010970 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001097A 00                         		even
0001097A 00                         		even
0001097A                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001097A                            ; ---------------------------------------------------------------------------
0001097A                            ; Sprite mappings - flame thrower (SBZ)
0001097A                            ; ---------------------------------------------------------------------------
0001097A                            Map_Flame_internal:
0001097A 0000                       		dc.w @pipe1-Map_Flame_internal
0001097C 0000                       		dc.w @pipe2-Map_Flame_internal
0001097E 0000                       		dc.w @pipe3-Map_Flame_internal
00010980 0000                       		dc.w @pipe4-Map_Flame_internal
00010982 0000                       		dc.w @pipe5-Map_Flame_internal
00010984 0000                       		dc.w @pipe6-Map_Flame_internal
00010986 0000                       		dc.w @pipe7-Map_Flame_internal
00010988 0000                       		dc.w @pipe8-Map_Flame_internal
0001098A 0000                       		dc.w @pipe9-Map_Flame_internal
0001098C 0000                       		dc.w @pipe10-Map_Flame_internal
0001098E 0000                       		dc.w @pipe11-Map_Flame_internal
00010990 0000                       		dc.w @valve1-Map_Flame_internal
00010992 0000                       		dc.w @valve2-Map_Flame_internal
00010994 0000                       		dc.w @valve3-Map_Flame_internal
00010996 0000                       		dc.w @valve4-Map_Flame_internal
00010998 0000                       		dc.w @valve5-Map_Flame_internal
0001099A 0000                       		dc.w @valve6-Map_Flame_internal
0001099C 0000                       		dc.w @valve7-Map_Flame_internal
0001099E 0000                       		dc.w @valve8-Map_Flame_internal
000109A0 0000                       		dc.w @valve9-Map_Flame_internal
000109A2 0000                       		dc.w @valve10-Map_Flame_internal
000109A4 0000                       		dc.w @valve11-Map_Flame_internal
000109A6 01                         @pipe1:		dc.b 1
000109A7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000109AC 02                         @pipe2:		dc.b 2
000109AD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109B2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109B7 02                         @pipe3:		dc.b 2
000109B8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109BD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C2 03                         @pipe4:		dc.b 3
000109C3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109C8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D2 03                         @pipe5:		dc.b 3
000109D3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109E2 04                         @pipe6:		dc.b 4
000109E3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109E8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109ED 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109F2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109F7 04                         @pipe7:		dc.b 4
000109F8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109FD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A02 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A07 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A0C 05                         @pipe8:		dc.b 5
00010A0D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A12 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A17 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A1C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A21 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A26 05                         @pipe9:		dc.b 5
00010A27 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A2C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A31 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A36 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A3B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A40 06                         @pipe10:	dc.b 6
00010A41 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A46 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A4B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A50 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A55 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A5A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A5F 06                         @pipe11:	dc.b 6
00010A60 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A65 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A6A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A6F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A74 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A79 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A7E 01                         @valve1:	dc.b 1
00010A7F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A84 02                         @valve2:	dc.b 2
00010A85 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A8A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A8F 02                         @valve3:	dc.b 2
00010A90 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A95 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A9A 03                         @valve4:	dc.b 3
00010A9B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AA0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AA5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AAA 03                         @valve5:	dc.b 3
00010AAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AB0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AB5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010ABA 04                         @valve6:	dc.b 4
00010ABB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AC0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AC5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ACA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010ACF 04                         @valve7:	dc.b 4
00010AD0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AD5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010ADA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010ADF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AE4 05                         @valve8:	dc.b 5
00010AE5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010AEA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AEF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AF4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AF9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AFE 05                         @valve9:	dc.b 5
00010AFF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B04 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010B09 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B0E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B13 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B18 06                         @valve10:	dc.b 6
00010B19 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B1E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B23 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B28 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B2D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B32 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B37 06                         @valve11:	dc.b 6
00010B38 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B42 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B4C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B51 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B56                            		even
00010B56                            		even
00010B56                            
00010B56                            		include	"_incObj\46 MZ Bricks.asm"
00010B56                            ; ---------------------------------------------------------------------------
00010B56                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B56                            ; ---------------------------------------------------------------------------
00010B56                            
00010B56                            MarbleBrick:
00010B56 7000                       		moveq	#0,d0
00010B58 1028 0024                  		move.b	obRoutine(a0),d0
00010B5C 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B60 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B64                            ; ===========================================================================
00010B64 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B66 0000                       		dc.w Brick_Action-Brick_Index
00010B68                            
00010B68 =00000030                  brick_origY:	equ $30
00010B68                            ; ===========================================================================
00010B68                            
00010B68                            Brick_Main:	; Routine 0
00010B68 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B6C 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B72 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B78 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B80 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B86 117C 0004 0001             		move.b	#4,obRender(a0)
00010B8C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B92 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B98 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B9E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010BA4                            
00010BA4                            Brick_Action:	; Routine 2
00010BA4 4A28 0001                  		tst.b	obRender(a0)
00010BA8 6A00                       		bpl.s	@chkdel
00010BAA 7000                       		moveq	#0,d0
00010BAC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010BB0 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010BB4 D040                       		add.w	d0,d0
00010BB6 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010BBA 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010BBE 323C 001B                  		move.w	#$1B,d1
00010BC2 343C 0010                  		move.w	#$10,d2
00010BC6 363C 0011                  		move.w	#$11,d3
00010BCA 3828 0008                  		move.w	obX(a0),d4
00010BCE 6100 0000                  		bsr.w	SolidObject
00010BD2                            
00010BD2                            	@chkdel:
00010BF0 6000 ED94                  			bra.w	DisplaySprite
00010BF4                            ; ===========================================================================
00010BF4 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BF6 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BF8 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BFA 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010BFC 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010BFE                            ; ===========================================================================
00010BFE                            
00010BFE                            Brick_Type00:
00010BFE 4E75                       		rts	
00010C00                            ; ===========================================================================
00010C00                            
00010C00                            Brick_Type02:
00010C00 3038 D008                  		move.w	(v_player+obX).w,d0
00010C04 9068 0008                  		sub.w	obX(a0),d0
00010C08 6400                       		bcc.s	loc_E888
00010C0A 4440                       		neg.w	d0
00010C0C                            
00010C0C                            loc_E888:
00010C0C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010C10 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010C12 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010C18                            
00010C18                            Brick_Type01:
00010C18 7000                       		moveq	#0,d0
00010C1A 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010C1E 0828 0003 0028             		btst	#3,obSubtype(a0)
00010C24 6700                       		beq.s	loc_E8A8
00010C26 4440                       		neg.w	d0
00010C28 0640 0010                  		addi.w	#$10,d0
00010C2C                            
00010C2C                            loc_E8A8:
00010C2C 3228 0030                  		move.w	brick_origY(a0),d1
00010C30 9240                       		sub.w	d0,d1
00010C32 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010C36 4E75                       		rts	
00010C38                            ; ===========================================================================
00010C38                            
00010C38                            Brick_Type03:
00010C38 6100 ED38                  		bsr.w	SpeedToPos
00010C3C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C42 6100 0000                  		bsr.w	ObjFloorDist
00010C46 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C48 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C4C D368 000C                  		add.w	d1,obY(a0)
00010C50 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C54 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C5A 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C60 3011                       		move.w	(a1),d0
00010C62 0240 03FF                  		andi.w	#$3FF,d0
00010C66 0C40 016A                  			cmpi.w	#$16A,d0
00010C6A 6400                       		bcc.s	locret_E8EE
00010C6C 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C72                            
00010C72                            locret_E8EE:
00010C72 4E75                       		rts	
00010C74                            ; ===========================================================================
00010C74                            
00010C74                            Brick_Type04:
00010C74 7000                       		moveq	#0,d0
00010C76 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C7A E648                       		lsr.w	#3,d0
00010C7C 3228 0030                  		move.w	brick_origY(a0),d1
00010C80 9240                       		sub.w	d0,d1
00010C82 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C86 4E75                       		rts	
00010C86 4E75                       		rts	
00010C88                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C88                            ; ---------------------------------------------------------------------------
00010C88                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C88                            ; ---------------------------------------------------------------------------
00010C88                            Map_Brick_internal:
00010C88 0000                       		dc.w @brick-Map_Brick_internal
00010C8A 01                         @brick:		dc.b 1
00010C8B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C90                            		even
00010C90                            		even
00010C90                            
00010C90                            		include	"_incObj\12 Light.asm"
00010C90                            ; ---------------------------------------------------------------------------
00010C90                            ; Object 12 - lamp (SYZ)
00010C90                            ; ---------------------------------------------------------------------------
00010C90                            
00010C90                            SpinningLight:
00010C90 7000                       		moveq	#0,d0
00010C92 1028 0024                  		move.b	obRoutine(a0),d0
00010C96 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C9A 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C9E                            ; ===========================================================================
00010C9E 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010CA0 0000                       		dc.w Light_Animate-Light_Index
00010CA2                            ; ===========================================================================
00010CA2                            
00010CA2                            Light_Main:	; Routine 0
00010CA2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010CA6 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010CAE 317C 0000 0002             		move.w	#0,obGfx(a0)
00010CB4 117C 0004 0001             		move.b	#4,obRender(a0)
00010CBA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CC0 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010CC6                            
00010CC6                            Light_Animate:	; Routine 2
00010CC6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010CCA 6A00                       		bpl.s	@chkdel
00010CCC 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010CD2 5228 001A                  		addq.b	#1,obFrame(a0)
00010CD6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CDC 6500                       		bcs.s	@chkdel
00010CDE 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CE4                            
00010CE4                            	@chkdel:
00010D02 6000 EC82                  		bra.w	DisplaySprite
00010D02 6000 EC82                  		bra.w	DisplaySprite
00010D06                            Map_Light	include	"_maps\Light.asm"
00010D06                            ; --------------------------------------------------------------------------------
00010D06                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010D06                            ; --------------------------------------------------------------------------------
00010D06                            
00010D06                            SME_FBl1X:	
00010D06 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010D0A 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010D0E 05                         SME_FBl1X_8:	dc.b 5	
00010D0F E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010D14 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010D19 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010D1E F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010D23 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D28 05                         SME_FBl1X_22:	dc.b 5	
00010D29 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010D2E E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010D33 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D38 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D3D F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D42 06                         SME_FBl1X_3C:	dc.b 6	
00010D43 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D48 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D4D E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D52 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D57 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D5C F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D61 05                         SME_FBl1X_5B:	dc.b 5	
00010D62 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D67 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D6C F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D71 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D76 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D7C 00                         		even
00010D7C 00                         		even
00010D7C                            		include	"_incObj\47 Bumper.asm"
00010D7C                            ; ---------------------------------------------------------------------------
00010D7C                            ; Object 47 - pinball bumper (SYZ)
00010D7C                            ; ---------------------------------------------------------------------------
00010D7C                            
00010D7C                            Bumper:
00010D7C 7000                       		moveq	#0,d0
00010D7E 1028 0024                  		move.b	obRoutine(a0),d0
00010D82 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D86 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D8A                            ; ===========================================================================
00010D8A 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D8C 0000                       		dc.w Bump_Hit-Bump_Index
00010D8E                            ; ===========================================================================
00010D8E                            
00010D8E                            Bump_Main:	; Routine 0
00010D8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D92 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D9A 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010DA0 117C 0004 0001             		move.b	#4,obRender(a0)
00010DA6 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010DAC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DB2 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010DB8                            
00010DB8                            Bump_Hit:	; Routine 2
00010DB8 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010DBC 6700 0000                  		beq.w	@display	; if not, branch
00010DC0 4228 0021                  		clr.b	obColProp(a0)
00010DC4 43F8 D000                  		lea	(v_player).w,a1
00010DC8 3228 0008                  		move.w	obX(a0),d1
00010DCC 3428 000C                  		move.w	obY(a0),d2
00010DD0 9269 0008                  		sub.w	obX(a1),d1
00010DD4 9469 000C                  		sub.w	obY(a1),d2
00010DD8 4EB9 0000 3CC8             		jsr	(CalcAngle).l
00010DDE 4EB9 0000 3A36             		jsr	(CalcSine).l
00010DE4 C3FC F900                  		muls.w	#-$700,d1
00010DE8 E081                       		asr.l	#8,d1
00010DEA 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DEE C1FC F900                  		muls.w	#-$700,d0
00010DF2 E080                       		asr.l	#8,d0
00010DF4 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DF8 08E9 0001 0022             		bset	#1,obStatus(a1)
00010DFE 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010E04 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010E0A 4229 003C                  		clr.b	$3C(a1)
00010E0E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010E1E 45F8 FC00                  		lea	(v_objstate).w,a2
00010E22 7000                       		moveq	#0,d0
00010E24 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E28 6700                       		beq.s	@addscore
00010E2A 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010E30 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010E32 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010E36                            
00010E36                            	@addscore:
00010E36 7001                       		moveq	#1,d0
00010E38 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E3E 6100 EFD2                  		bsr.w	FindFreeObj
00010E42 6600                       		bne.s	@display
00010E44 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E48 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E4E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E54 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E5A                            
00010E5A                            	@display:
00010E5A 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E60 6100 BBD0                  		bsr.w	AnimateSprite
00010E80 6000 EB04                  		bra.w	DisplaySprite
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            @resetcount:
00010E84 45F8 FC00                  		lea	(v_objstate).w,a2
00010E88 7000                       		moveq	#0,d0
00010E8A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E8E 6700                       		beq.s	@delete
00010E90 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E96                            
00010E96                            	@delete:
00010E96 6000 EB2E                  		bra.w	DeleteObject
00010E96 6000 EB2E                  		bra.w	DeleteObject
00010E9A                            		include	"_anim\Bumper.asm"
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A                            ; Animation script - flamethrower (SBZ)
00010E9A                            ; ---------------------------------------------------------------------------
00010E9A 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E9C 0000                       		dc.w byte_EAF8-Ani_Bump
00010E9E 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010EA2 00                         		even
00010EA2 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010EAA 00                         		even
00010EAA 00                         		even
00010EAA                            Map_Bump:	include	"_maps\Bumper.asm"
00010EAA                            ; ---------------------------------------------------------------------------
00010EAA                            ; Sprite mappings - pinball bumper (SYZ)
00010EAA                            ; ---------------------------------------------------------------------------
00010EAA                            Map_Bump_internal:
00010EAA 0000                       		dc.w @normal-Map_Bump_internal
00010EAC 0000                       		dc.w @bumped1-Map_Bump_internal
00010EAE 0000                       		dc.w @bumped2-Map_Bump_internal
00010EB0 02                         @normal:	dc.b 2
00010EB1 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010EB6 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010EBB 02                         @bumped1:	dc.b 2
00010EBC F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010EC1 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010EC6 02                         @bumped2:	dc.b 2
00010EC7 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010ECC F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010ED2 00                         		even
00010ED2 00                         		even
00010ED2                            
00010ED2                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2                            ; Object 0D - signpost at the end of a level
00010ED2                            ; ---------------------------------------------------------------------------
00010ED2                            
00010ED2                            Signpost:
00010ED2 7000                       		moveq	#0,d0
00010ED4 1028 0024                  		move.b	obRoutine(a0),d0
00010ED8 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010EDC 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010EE0 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010EE6 6100 BB4A                  		bsr.w	AnimateSprite
00010EEA 6100 EA9A                  		bsr.w	DisplaySprite
00010F0C 4E75                       		rts	
00010F0E                            ; ===========================================================================
00010F0E 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010F10 0000                       		dc.w Sign_Touch-Sign_Index
00010F12 0000                       		dc.w Sign_Spin-Sign_Index
00010F14 0000                       		dc.w Sign_SonicRun-Sign_Index
00010F16 0000                       		dc.w Sign_Exit-Sign_Index
00010F18                            
00010F18 =00000030                  spintime:	equ $30		; time for signpost to spin
00010F18 =00000032                  sparkletime:	equ $32		; time between sparkles
00010F18 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010F18                            ; ===========================================================================
00010F18                            
00010F18                            Sign_Main:	; Routine 0
00010F18 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F1C 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010F24 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010F2A 117C 0004 0001             		move.b	#4,obRender(a0)
00010F30 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010F36 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F3C                            
00010F3C                            Sign_Touch:	; Routine 2
00010F3C 3038 D008                  		move.w	(v_player+obX).w,d0
00010F40 9068 0008                  		sub.w	obX(a0),d0
00010F44 6500                       		bcs.s	@notouch
00010F46 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F4A 6400                       		bcc.s	@notouch	; if not, branch
00010F4C 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F5C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F60 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F66 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F6A 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F70                            
00010F70                            	@notouch:
00010F70 4E75                       		rts	
00010F72                            	
00010F72                            ; ===========================================================================
00010F72                            
00010F72                            Sign_Spin:	; Routine 4
00010F72 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F76 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F78 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F7E 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F82 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F88 6600                       		bne.s	@chksparkle	; if not, branch
00010F8A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F8E                            
00010F8E                            	@chksparkle:
00010F8E 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F92 6A00                       		bpl.s	@fail		; if time remains, branch
00010F94 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F9A 7000                       		moveq	#0,d0
00010F9C 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010FA0 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010FA4 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010FAA 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010FAE 6100 EE62                  		bsr.w	FindFreeObj
00010FB2 6600                       		bne.s	@fail
00010FB4 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FB8 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FBE 101A                       		move.b	(a2)+,d0
00010FC0 4880                       		ext.w	d0
00010FC2 D068 0008                  		add.w	obX(a0),d0
00010FC6 3340 0008                  		move.w	d0,obX(a1)
00010FCA 101A                       		move.b	(a2)+,d0
00010FCC 4880                       		ext.w	d0
00010FCE D068 000C                  		add.w	obY(a0),d0
00010FD2 3340 000C                  		move.w	d0,obY(a1)
00010FD6 237C 0000 BFE2 0004        		move.l	#Map_Ring,obMap(a1)
00010FDE 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FE4 137C 0004 0001             		move.b	#4,obRender(a1)
00010FEA 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010FF0 137C 0008 0014             		move.b	#8,obActWid(a1)
00010FF6                            
00010FF6                            	@fail:
00010FF6 4E75                       		rts	
00010FF8                            ; ===========================================================================
00010FF8 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010FFA 0808                       		dc.b	8,   8
00010FFC F000                       		dc.b -$10,   0
00010FFE 18F8                       		dc.b  $18,  -8
00011000 00F8                       		dc.b	0,  -8
00011002 1000                       		dc.b  $10,   0
00011004 E808                       		dc.b -$18,   8
00011006 1810                       		dc.b  $18, $10
00011008                            ; ===========================================================================
00011008                            
00011008                            Sign_SonicRun:	; Routine 6
00011008 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0001100C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011010 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00011016                            		
00011016                            
00011016                            	loc_EC86:
00011016 5428 0024                  		addq.b	#2,obRoutine(a0)
0001101A                            
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            ; Subroutine to	set up bonuses at the end of an	act
0001101A                            ; ---------------------------------------------------------------------------
0001101A                            
0001101A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001101A                            
0001101A                            
0001101A                            GotThroughAct:
0001101A 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
0001101E 6600                       		bne.s	locret_ECEE
00011020 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011026 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0001102A 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
0001102E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011032 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011038 7000                       		moveq	#plcid_TitleCard,d0
0001103A 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
00011040 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011046 7000                       		moveq	#0,d0
00011048 1038 FE23                  		move.b	(v_timemin).w,d0
0001104C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011050 7200                       		moveq	#0,d1
00011052 1238 FE24                  		move.b	(v_timesec).w,d1
00011056 D041                       		add.w	d1,d0		; add up your time
00011058 80FC 000F                  		divu.w	#15,d0		; divide by 15
0001105C 7214                       		moveq	#$14,d1
0001105E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011060 6500                       		bcs.s	hastimebonus	; if not, branch
00011062 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011064                            
00011064                            	hastimebonus:
00011064 D040                       		add.w	d0,d0
00011066 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
0001106C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011070 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011074 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011082 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011088                            
00011088                            locret_ECEE:
00011088 4E75                       		rts	
0001108A                            
0001108A                            ; End of function GotThroughAct
0001108A                            
0001108A                            ; ===========================================================================
0001108A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001109E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Sign_Exit:	; Routine 8
000110B4 4E75                       		rts	
000110B6                            
000110B6                            ; ---------------------------------------------------------------------------
000110B6                            ; Subroutine to	set up bonuses at the end of an	zone
000110B6                            ; ---------------------------------------------------------------------------
000110B6                            
000110B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110B6                            
000110B6                            
000110B6                            GotThroughAct1:
000110B6 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110BA 6600                       		bne.s	locret_ECEE1
000110BC 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110C2 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110C6 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110CA 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110CE 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110D4 7000                       		moveq	#plcid_TitleCard,d0
000110D6 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
000110DC 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110E2 7000                       		moveq	#0,d0
000110E4 1038 FE23                  		move.b	(v_timemin).w,d0
000110E8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110EC 7200                       		moveq	#0,d1
000110EE 1238 FE24                  		move.b	(v_timesec).w,d1
000110F2 D041                       		add.w	d1,d0		; add up your time
000110F4 80FC 000F                  		divu.w	#15,d0		; divide by 15
000110F8 7214                       		moveq	#$14,d1
000110FA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000110FC 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00011100 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00011102                            
00011102                            	hastimebonus2:
00011102 D040                       		add.w	d0,d0
00011104 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
0001110A 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
0001110E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011112 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011120 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011126                            
00011126                            locret_ECEE1:
00011126 4E75                       		rts	
00011128                            
00011128                            ; End of function GotThroughAct		
00011128                            
00011128 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001113C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001113C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011152                            		include	"_anim\Signpost.asm"
00011152                            ; ---------------------------------------------------------------------------
00011152                            ; Animation script - signpost
00011152                            ; ---------------------------------------------------------------------------
00011152 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011154 0000                       		dc.w @spin1-Ani_Sign
00011156 0000                       		dc.w @spin2-Ani_Sign
00011158 0000                       		dc.w @sonic-Ani_Sign
0001115A 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
0001115E 00                         		even
0001115E 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011164 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001116A 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
0001116E 00                         		even
0001116E 00                         		even
0001116E                            Map_Sign:	include	"_maps\Signpost.asm"
0001116E                            ; --------------------------------------------------------------------------------
0001116E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001116E                            ; --------------------------------------------------------------------------------
0001116E                            
0001116E                            SME_KvSue:	
0001116E 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011172 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011176 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00011178 04                         SME_KvSue_A:	dc.b 4	
00011179 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
0001117E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011183 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011188 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001118D 03                         SME_KvSue_1F:	dc.b 3	
0001118E F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011193 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011198 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001119D 03                         SME_KvSue_2F:	dc.b 3	
0001119E F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
000111A3 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111A8 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111AD 03                         SME_KvSue_3F:	dc.b 3	
000111AE F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000111B3 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111B8 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111BD 04                         SME_KvSue_4F:	dc.b 4	
000111BE F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111C3 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111C8 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111CD 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111D2                            		even
000111D2                            		even
000111D2                            
000111D2                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111D2                            ; ---------------------------------------------------------------------------
000111D2                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111D2                            ; ---------------------------------------------------------------------------
000111D2                            
000111D2                            GeyserMaker:
000111D2 7000                       		moveq	#0,d0
000111D4 1028 0024                  		move.b	obRoutine(a0),d0
000111D8 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111DC 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111E0 6000 0000                  		bra.w	Geyser_ChkDel
000111E4                            ; ===========================================================================
000111E4 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111E6 0000                       		dc.w GMake_Wait-GMake_Index
000111E8 0000                       		dc.w GMake_ChkType-GMake_Index
000111EA 0000                       		dc.w GMake_MakeLava-GMake_Index
000111EC 0000                       		dc.w GMake_Display-GMake_Index
000111EE 0000                       		dc.w GMake_Delete-GMake_Index
000111F0                            
000111F0 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000111F0 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000111F0 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000111F0                            ; ===========================================================================
000111F0                            
000111F0                            GMake_Main:	; Routine 0
000111F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000111F4 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000111FC 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00011202 117C 0004 0001             		move.b	#4,obRender(a0)
00011208 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001120E 117C 0038 0014             		move.b	#$38,obActWid(a0)
00011214 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0001121A                            
0001121A                            GMake_Wait:	; Routine 2
0001121A 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
0001121E 6A00                       		bpl.s	@cancel		; if time remains, branch
00011220                            
00011220 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00011226 3038 D00C                  		move.w	(v_player+obY).w,d0
0001122A 3228 000C                  		move.w	obY(a0),d1
0001122E B041                       		cmp.w	d1,d0
00011230 6400                       		bcc.s	@cancel
00011232 0441 0170                  		subi.w	#$170,d1
00011236 B041                       		cmp.w	d1,d0
00011238 6500                       		bcs.s	@cancel
0001123A 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
0001123E                            
0001123E                            	@cancel:
0001123E 4E75                       		rts	
00011240                            ; ===========================================================================
00011240                            
00011240                            GMake_MakeLava:	; Routine 6
00011240 5428 0024                  		addq.b	#2,obRoutine(a0)
00011244 6100 EBE2                  		bsr.w	FindNextFreeObj
00011248 6600                       		bne.s	@fail
0001124A 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
0001124E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011254 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001125A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011260 2348 003C                  		move.l	a0,gmake_parent(a1)
00011264                            
00011264                            	@fail:
00011264 117C 0001 001C             		move.b	#1,obAnim(a0)
0001126A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0001126E 6700                       		beq.s	@isgeyser	; if yes, branch
00011270 117C 0004 001C             		move.b	#4,obAnim(a0)
00011276 6000                       		bra.s	GMake_Display
00011278                            ; ===========================================================================
00011278                            
00011278                            	@isgeyser:
00011278 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001127C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011282 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011288 6000                       		bra.s	GMake_Display
0001128A                            ; ===========================================================================
0001128A                            
0001128A                            GMake_ChkType:	; Routine 4
0001128A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0001128E 6700                       		beq.s	GMake_Display	; if yes, branch
00011290 5428 0024                  		addq.b	#2,obRoutine(a0)
00011294 4E75                       		rts	
00011296                            ; ===========================================================================
00011296                            
00011296                            GMake_Display:	; Routine 8
00011296 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001129C 6100 B794                  		bsr.w	AnimateSprite
000112A0 6100 E6E4                  		bsr.w	DisplaySprite
000112A4 4E75                       		rts	
000112A6                            ; ===========================================================================
000112A6                            
000112A6                            GMake_Delete:	; Routine $A
000112A6 117C 0000 001C             		move.b	#0,obAnim(a0)
000112AC 117C 0002 0024             		move.b	#2,obRoutine(a0)
000112B2 4A28 0028                  		tst.b	obSubtype(a0)
000112B6 6700 E70E                  		beq.w	DeleteObject
000112BA 4E75                       		rts	
000112BC                            
000112BC                            
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            ; Object 4D - lava geyser / lavafall (MZ)
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            
000112BC                            LavaGeyser:
000112BC 7000                       		moveq	#0,d0
000112BE 1028 0024                  		move.b	obRoutine(a0),d0
000112C2 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112C6 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112CA 6000 E6BA                  		bra.w	DisplaySprite
000112CE                            ; ===========================================================================
000112CE 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112D0 0000                       		dc.w Geyser_Action-Geyser_Index
000112D2 0000                       		dc.w loc_EFFC-Geyser_Index
000112D4 0000                       		dc.w Geyser_Delete-Geyser_Index
000112D6                            
000112D6 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112DA                            ; ===========================================================================
000112DA                            
000112DA                            Geyser_Main:	; Routine 0
000112DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000112DE 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112E4 4A28 0028                  		tst.b	obSubtype(a0)
000112E8 6700                       		beq.s	@isgeyser
000112EA 0468 0250 000C             		subi.w	#$250,obY(a0)
000112F0                            
000112F0                            	@isgeyser:
000112F0 7000                       		moveq	#0,d0
000112F2 1028 0028                  		move.b	obSubtype(a0),d0
000112F6 D040                       		add.w	d0,d0
000112F8 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000112FE 2248                       		movea.l	a0,a1
00011300 7201                       		moveq	#1,d1
00011302 6100                       		bsr.s	@makelava
00011304 6000                       		bra.s	@activate
00011306                            ; ===========================================================================
00011306                            
00011306                            	@loop:
00011306 6100 EB20                  		bsr.w	FindNextFreeObj
0001130A 6600                       		bne.s	@fail
0001130C                            
0001130C                            @makelava:
0001130C 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011310 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00011318 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
0001131E 137C 0004 0001             		move.b	#4,obRender(a1)
00011324 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001132A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011330 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011336 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001133C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011342 137C 0005 001C             		move.b	#5,obAnim(a1)
00011348 4A28 0028                  		tst.b	obSubtype(a0)
0001134C 6700                       		beq.s	@fail
0001134E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011354                            
00011354                            	@fail:
00011354 51C9 FFB0                  		dbf	d1,@loop
00011358 4E75                       		rts	
0001135A                            ; ===========================================================================
0001135A                            
0001135A                            @activate:
0001135A 0669 0060 000C             		addi.w	#$60,obY(a1)
00011360 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011366 0669 0060 0030             		addi.w	#$60,$30(a1)
0001136C 137C 0093 0020             		move.b	#$93,obColType(a1)
00011372 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011378 08E9 0004 0001             		bset	#4,obRender(a1)
0001137E 5829 0024                  		addq.b	#4,obRoutine(a1)
00011382 2348 003C                  		move.l	a0,$3C(a1)
00011386 4A28 0028                  		tst.b	obSubtype(a0)
0001138A 6700                       		beq.s	@sound
0001138C 7200                       		moveq	#0,d1
0001138E 6100 FF76                  		bsr.w	@loop
00011392 5429 0024                  		addq.b	#2,obRoutine(a1)
00011396 08E9 0004 0002             		bset	#4,obGfx(a1)
0001139C 0669 0100 000C             		addi.w	#$100,obY(a1)
000113A2 337C 0000 0018             		move.w	#0,obPriority(a1)
000113A8 3368 0030 0030             		move.w	$30(a0),$30(a1)
000113AE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000113B4 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113BA                            
000113BA                            	@sound:
000113C4                            
000113C4                            Geyser_Action:	; Routine 2
000113C4 7000                       		moveq	#0,d0
000113C6 1028 0028                  		move.b	obSubtype(a0),d0
000113CA D040                       		add.w	d0,d0
000113CC 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113D0 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113D4 6100 E59C                  		bsr.w	SpeedToPos
000113D8 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113DE 6100 B652                  		bsr.w	AnimateSprite
000113E2                            
000113E2                            Geyser_ChkDel:
00011400 4E75                       		rts	
00011402                            ; ===========================================================================
00011402 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00011404 0000                       		dc.w Geyser_Type01-Geyser_Types
00011406                            ; ===========================================================================
00011406                            
00011406                            Geyser_Type00:
00011406 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001140C 3028 0030                  		move.w	$30(a0),d0
00011410 B068 000C                  		cmp.w	obY(a0),d0
00011414 6400                       		bcc.s	locret_EFDA
00011416 5828 0024                  		addq.b	#4,obRoutine(a0)
0001141A 2268 003C                  		movea.l	$3C(a0),a1
0001141E 137C 0003 001C             		move.b	#3,obAnim(a1)
00011424                            
00011424                            locret_EFDA:
00011424 4E75                       		rts	
00011426                            ; ===========================================================================
00011426                            
00011426                            Geyser_Type01:
00011426 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0001142C 3028 0030                  		move.w	$30(a0),d0
00011430 B068 000C                  		cmp.w	obY(a0),d0
00011434 6400                       		bcc.s	locret_EFFA
00011436 5828 0024                  		addq.b	#4,obRoutine(a0)
0001143A 2268 003C                  		movea.l	$3C(a0),a1
0001143E 137C 0001 001C             		move.b	#1,obAnim(a1)
00011444                            
00011444                            locret_EFFA:
00011444 4E75                       		rts	
00011446                            ; ===========================================================================
00011446                            
00011446                            loc_EFFC:	; Routine 4
00011446 2268 003C                  		movea.l	$3C(a0),a1
0001144A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011450 6700 0000                  		beq.w	Geyser_Delete
00011454 3029 000C                  		move.w	obY(a1),d0
00011458 0640 0060                  		addi.w	#$60,d0
0001145C 3140 000C                  		move.w	d0,obY(a0)
00011460 9068 0030                  		sub.w	$30(a0),d0
00011464 4440                       		neg.w	d0
00011466 7208                       		moveq	#8,d1
00011468 0C40 0040                  		cmpi.w	#$40,d0
0001146C 6C00                       		bge.s	loc_F026
0001146E 720B                       		moveq	#$B,d1
00011470                            
00011470                            loc_F026:
00011470 0C40 0080                  		cmpi.w	#$80,d0
00011474 6F00                       		ble.s	loc_F02E
00011476 720E                       		moveq	#$E,d1
00011478                            
00011478                            loc_F02E:
00011478 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001147C 6A00                       		bpl.s	loc_F04C
0001147E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011484 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011488 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001148E 6500                       		bcs.s	loc_F04C
00011490 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011496                            
00011496                            loc_F04C:
00011496 1028 001B                  		move.b	obAniFrame(a0),d0
0001149A D001                       		add.b	d1,d0
0001149C 1140 001A                  		move.b	d0,obFrame(a0)
000114A0 6000 FF40                  		bra.w	Geyser_ChkDel
000114A4                            ; ===========================================================================
000114A4                            
000114A4                            Geyser_Delete:	; Routine 6
000114A4 6000 E520                  		bra.w	DeleteObject
000114A4 6000 E520                  		bra.w	DeleteObject
000114A8                            		include	"_incObj\54 Lava Tag.asm"
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            ; Object 54 - invisible	lava tag (MZ)
000114A8                            ; ---------------------------------------------------------------------------
000114A8                            
000114A8                            LavaTag:
000114A8 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000114AE 6E00 0000                  		bgt	WaterTag	;TIS
000114B2 7000                       		moveq	#0,d0
000114B4 1028 0024                  		move.b	obRoutine(a0),d0
000114B8 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114BC 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114C0                            ; ===========================================================================
000114C0 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114C2 0000                       		dc.w LTag_ChkDel-LTag_Index
000114C4                            
000114C4 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114C8 00                         		even
000114C8                            ; ===========================================================================
000114C8                            
000114C8                            LTag_Main:	; Routine 0
000114C8 5428 0024                  		addq.b	#2,obRoutine(a0)
000114CC 7000                       		moveq	#0,d0
000114CE 1028 0028                  		move.b	obSubtype(a0),d0
000114D2 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114D8 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114E0 117C 0084 0001             		move.b	#$84,obRender(a0)
000114E6                            
000114E6                            LTag_ChkDel:	; Routine 2
000114E6 3028 0008                  		move.w	obX(a0),d0
000114EA 0240 FF80                  		andi.w	#$FF80,d0
000114EE 3238 F700                  		move.w	(v_screenposx).w,d1
000114F2 0441 0080                  		subi.w	#$80,d1
000114F6 0241 FF80                  		andi.w	#$FF80,d1
000114FA 9041                       		sub.w	d1,d0
000114FC 6B00 E4C8                  		bmi.w	DeleteObject
00011500 0C40 0280                  		cmpi.w	#$280,d0
00011504 6200 E4C0                  		bhi.w	DeleteObject
00011508 4E75                       		rts
0001150A                            
0001150A                            
0001150A                            ; ---------------------------------------------------------------------------
0001150A                            ; Object 54a - invisible	water tag (MZ) - TIS
0001150A                            ; ---------------------------------------------------------------------------
0001150A                            
0001150A                            WaterTag:	
0001150A 7000                       		moveq	#0,d0
0001150C 1028 0024                  		move.b	obRoutine(a0),d0
00011510 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
00011514 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
00011518                            ; ===========================================================================
00011518 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
0001151A 0000                       		dc.w WTag_ChkDel-WTag_Index
0001151C                            
0001151C 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011520 00                         		even
00011520                            ; ===========================================================================
00011520                            
00011520                            
00011520                            WTag_Main:	; Routine 0
00011520 5428 0024                  		addq.b	#2,obRoutine(a0)
00011524 7000                       		moveq	#0,d0
00011526                            		;move.b	obSubtype(a0),d0
00011526                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011526 0400 00F0                  		sub.b	#$F0,d0
0001152A 1178 0096 0020             		move.b	$96,obColType(a0)							
00011530                            		;move.l	#Map_LTag,obMap(a0)
00011530                            		;move.b	#$84,obRender(a0)
00011530                            
00011530                            WTag_ChkDel:	; Routine 2
00011530 3028 0008                  		move.w	obX(a0),d0
00011534 0240 FF80                  		andi.w	#$FF80,d0
00011538 3238 F700                  		move.w	(v_screenposx).w,d1
0001153C 0441 0080                  		subi.w	#$80,d1
00011540 0241 FF80                  		andi.w	#$FF80,d1
00011544 9041                       		sub.w	d1,d0
00011546 6B00 E47E                  		bmi.w	DeleteObject
0001154A 0C40 0280                  		cmpi.w	#$280,d0
0001154E 6200 E476                  		bhi.w	DeleteObject
00011552 4E75                       		rts
00011554                            
00011554                            
00011554                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011554                            ; ---------------------------------------------------------------------------
00011554                            ; Sprite mappings - invisible lava tag (MZ)
00011554                            ; ---------------------------------------------------------------------------
00011554                            Map_LTag_internal:
00011554 0000                       		dc.w @0-Map_LTag_internal
00011556 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011558 00                         		even
00011558 00                         		even
00011558                            		include	"_anim\Lava Geyser.asm"
00011558                            ; ---------------------------------------------------------------------------
00011558                            ; Animation script - geyser of lava (MZ)
00011558                            ; ---------------------------------------------------------------------------
00011558 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001155A 0000                       		dc.w @bubble2-Ani_Geyser
0001155C 0000                       		dc.w @end-Ani_Geyser
0001155E 0000                       		dc.w @bubble3-Ani_Geyser
00011560 0000                       		dc.w @blank-Ani_Geyser
00011562 0000                       		dc.w @bubble4-Ani_Geyser
00011564 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001156E 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011572 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011576 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001157E 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011582 00                         		even
00011582 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011586                            		even
00011586                            		even
00011586                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011586                            ; ---------------------------------------------------------------------------
00011586                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011586                            ; ---------------------------------------------------------------------------
00011586                            Map_Geyser_internal:
00011586 0000                       		dc.w @bubble1-Map_Geyser_internal
00011588 0000                       		dc.w @bubble2-Map_Geyser_internal
0001158A 0000                       		dc.w @bubble3-Map_Geyser_internal
0001158C 0000                       		dc.w @bubble4-Map_Geyser_internal
0001158E 0000                       		dc.w @bubble5-Map_Geyser_internal
00011590 0000                       		dc.w @bubble6-Map_Geyser_internal
00011592 0000                       		dc.w @end1-Map_Geyser_internal
00011594 0000                       		dc.w @end2-Map_Geyser_internal
00011596 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011598 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001159A 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001159C 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0001159E 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000115A0 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000115A2 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000115A4 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000115A6 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000115A8 0000                       		dc.w @bubble7-Map_Geyser_internal
000115AA 0000                       		dc.w @bubble8-Map_Geyser_internal
000115AC 0000                       		dc.w @blank-Map_Geyser_internal
000115AE 02                         @bubble1:	dc.b 2
000115AF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000115B4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000115B9 02                         @bubble2:	dc.b 2
000115BA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115BF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115C4 04                         @bubble3:	dc.b 4
000115C5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115CA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115CF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115D4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115D9 04                         @bubble4:	dc.b 4
000115DA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115DF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115E4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115E9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115EE 06                         @bubble5:	dc.b 6
000115EF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115F4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115F9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115FE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011603 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00011608 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001160D 06                         @bubble6:	dc.b 6
0001160E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011613 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011618 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001161D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011622 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011627 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001162C 02                         @end1:		dc.b 2
0001162D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011632 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011637 02                         @end2:		dc.b 2
00011638 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001163D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011642 0A                         @medcolumn1:	dc.b $A
00011643 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011648 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001164D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011652 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011657 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001165C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011661 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011666 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001166B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011670 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011675 0A                         @medcolumn2:	dc.b $A
00011676 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001167B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011680 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011685 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001168A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001168F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011694 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011699 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001169E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000116A3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000116A8 0A                         @medcolumn3:	dc.b $A
000116A9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116AE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116B3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116B8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116BD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116C2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116C7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116CC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116D1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116D6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116DB 06                         @shortcolumn1:	dc.b 6
000116DC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116E1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116E6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116EB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116F0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116F5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116FA 06                         @shortcolumn2:	dc.b 6
000116FB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011700 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011705 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001170A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001170F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011714 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011719 06                         @shortcolumn3:	dc.b 6
0001171A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001171F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011724 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011729 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001172E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011733 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011738 10                         @longcolumn1:	dc.b $10
00011739 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001173E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011743 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011748 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001174D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011752 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011757 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001175C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011761 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011766 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001176B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011770 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011775 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001177A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001177F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011784 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011789 10                         @longcolumn2:	dc.b $10
0001178A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001178F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011794 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011799 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001179E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000117A3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000117A8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000117AD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117B2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117B7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117BC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117C1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117C6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117CB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117D0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117D5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117DA 10                         @longcolumn3:	dc.b $10
000117DB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117E0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117E5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117EA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117EF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117F4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117F9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000117FE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011803 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011808 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001180D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011812 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011817 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001181C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011821 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011826 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001182B 06                         @bubble7:	dc.b 6
0001182C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011831 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011836 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001183B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011840 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011845 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001184A 06                         @bubble8:	dc.b 6
0001184B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011850 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011855 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001185A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001185F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011864 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011869 00                         @blank:	dc.b 0
0001186A                            		even
0001186A                            		even
0001186A                            
0001186A                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001186A                            ; ---------------------------------------------------------------------------
0001186A                            ; Object 40 - Moto Bug enemy (GHZ)
0001186A                            ; ---------------------------------------------------------------------------
0001186A                            
0001186A                            MotoBug:
0001186A 7000                       		moveq	#0,d0
0001186C 1028 0024                  		move.b	obRoutine(a0),d0
00011870 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011874 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011878                            ; ===========================================================================
00011878 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001187A 0000                       		dc.w Moto_Action-Moto_Index
0001187C 0000                       		dc.w Moto_Animate-Moto_Index
0001187E 0000                       		dc.w Moto_Delete-Moto_Index
00011880                            ; ===========================================================================
00011880                            
00011880                            Moto_Main:	; Routine 0
00011880 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011888 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001188E 117C 0004 0001             		move.b	#4,obRender(a0)
00011894 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001189A 117C 0014 0014             		move.b	#$14,obActWid(a0)
000118A0 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000118A4 6600                       		bne.s	@smoke		; if yes, branch
000118A6 117C 000E 0016             		move.b	#$E,obHeight(a0)
000118AC 117C 0008 0017             		move.b	#8,obWidth(a0)
000118B2 117C 000C 0020             		move.b	#$C,obColType(a0)
000118B8 6100 E080                  		bsr.w	ObjectFall
000118BC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118C2 4A41                       		tst.w	d1
000118C4 6A00                       		bpl.s	@notonfloor
000118C6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118CA 317C 0000 0012             		move.w	#0,obVelY(a0)
000118D0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118D4 0868 0000 0022             		bchg	#0,obStatus(a0)
000118DA                            
000118DA                            	@notonfloor:
000118DA 4E75                       		rts	
000118DC                            ; ===========================================================================
000118DC                            
000118DC                            @smoke:
000118DC 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118E0 6000 0000                  		bra.w	Moto_Animate
000118E4                            ; ===========================================================================
000118E4                            
000118E4                            Moto_Action:	; Routine 2
000118E4 7000                       		moveq	#0,d0
000118E6 1028 0025                  		move.b	ob2ndRout(a0),d0
000118EA 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118EE 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118F2 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118F8 6100 B138                  		bsr.w	AnimateSprite
000118FC                            
000118FC                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000118FC                            ; ---------------------------------------------------------------------------
000118FC                            ; Subroutine to remember whether an object is destroyed/collected
000118FC                            ; ---------------------------------------------------------------------------
000118FC                            
000118FC                            RememberState:
0001191A 6000 E06A                  		bra.w	DisplaySprite
0001191E                            
0001191E                            	@offscreen:
0001191E 45F8 FC00                  		lea	(v_objstate).w,a2
00011922 7000                       		moveq	#0,d0
00011924 1028 0023                  		move.b	obRespawnNo(a0),d0
00011928 6700                       		beq.s	@delete
0001192A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011930                            
00011930                            	@delete:
00011930 6000 E094                  		bra.w	DeleteObject
00011930 6000 E094                  		bra.w	DeleteObject
00011934                            
00011934                            ; ===========================================================================
00011934 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011936 0000                       		dc.w @findfloor-Moto_ActIndex
00011938                            
00011938 =00000030                  @time:		equ $30
00011938 =00000033                  @smokedelay:	equ $33
00011938                            ; ===========================================================================
00011938                            
00011938                            @move:
00011938 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0001193C 6A00                       		bpl.s	@wait		; if time remains, branch
0001193E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011942 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011948 117C 0001 001C             		move.b	#1,obAnim(a0)
0001194E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011954 6600                       		bne.s	@wait
00011956 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001195A                            
0001195A                            	@wait:
0001195A 4E75                       		rts	
0001195C                            ; ===========================================================================
0001195C                            
0001195C                            @findfloor:
0001195C 6100 E014                  		bsr.w	SpeedToPos
00011960 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011966 0C41 FFF8                  		cmpi.w	#-8,d1
0001196A 6D00                       		blt.s	@pause
0001196C 0C41 000C                  		cmpi.w	#$C,d1
00011970 6C00                       		bge.s	@pause
00011972 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011976 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001197A 6A00                       		bpl.s	@nosmoke
0001197C 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011982 6100 E48E                  		bsr.w	FindFreeObj
00011986 6600                       		bne.s	@nosmoke
00011988 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001198C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011992 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011998 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001199E 137C 0002 001C             		move.b	#2,obAnim(a1)
000119A4                            
000119A4                            	@nosmoke:
000119A4 4E75                       		rts	
000119A6                            
000119A6                            @pause:
000119A6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119AA 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000119B0 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000119B6 117C 0000 001C             		move.b	#0,obAnim(a0)
000119BC 4E75                       		rts	
000119BE                            ; ===========================================================================
000119BE                            
000119BE                            Moto_Animate:	; Routine 4
000119BE 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119C4 6100 B06C                  		bsr.w	AnimateSprite
000119C8 6000 DFBC                  		bra.w	DisplaySprite
000119CC                            ; ===========================================================================
000119CC                            
000119CC                            Moto_Delete:	; Routine 6
000119CC 6000 DFF8                  		bra.w	DeleteObject
000119CC 6000 DFF8                  		bra.w	DeleteObject
000119D0                            		include	"_anim\Moto Bug.asm"
000119D0                            ; ---------------------------------------------------------------------------
000119D0                            ; Animation script - Motobug enemy
000119D0                            ; ---------------------------------------------------------------------------
000119D0 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119D2 0000                       		dc.w @walk-Ani_Moto
000119D4 0000                       		dc.w @smoke-Ani_Moto
000119D6                            
000119D6 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119DA 00                         		even
000119DA 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119E0 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119EE 00                         		even
000119EE 00                         		even
000119EE                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119EE                            ; --------------------------------------------------------------------------------
000119EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119EE                            ; --------------------------------------------------------------------------------
000119EE                            
000119EE                            SME_TTY9T:	
000119EE 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119F2 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119F6 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119FA 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000119FC 04                         SME_TTY9T_E:	dc.b 4	
000119FD F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A02 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011A07 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A0C 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011A11 04                         SME_TTY9T_23:	dc.b 4	
00011A12 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011A17 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A1C F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A21 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A26 05                         SME_TTY9T_38:	dc.b 5	
00011A27 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A2C 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A31 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A36 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A3B 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A40 01                         SME_TTY9T_52:	dc.b 1	
00011A41 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A46 01                         SME_TTY9T_58:	dc.b 1	
00011A47 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A4C 01                         SME_TTY9T_5E:	dc.b 1	
00011A4D FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A52 00                         SME_TTY9T_64:	dc.b 0	
00011A54 00                         		even
00011A54 00                         		even
00011A54                            		include	"_incObj\4F.asm"
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            ; Object 4F - Splats
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            
00011A54                            Obj4F:
00011A54 7000                                       moveq   #0,d0
00011A56 1028 0024                                  move.b  $24(a0),d0
00011A5A 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A5E 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A62                            ; ---------------------------------------------------------------------------
00011A62 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A64 0000                                       dc.w loc_D246-ObjSplats_Index
00011A66 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A68 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A6A                            ; ---------------------------------------------------------------------------
00011A6A                            
00011A6A                            ObjSplats_Init:
00011A6A 5428 0024                                  addq.b  #2,$24(a0)
00011A6E 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A76 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A7C 117C 0004 0001                             move.b  #4,1(a0)
00011A82 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A88 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A8E 117C 0014 0016                             move.b  #$14,$16(a0)
00011A94 117C 0002 0020                             move.b  #2,$20(a0)
00011A9A 4A28 0028                                  tst.b   $28(a0)
00011A9E 6700                                       beq.s   loc_D246
00011AA0 343C 0300                                  move.w  #$300,d2
00011AA4 6000                                       bra.s   ObjSplats_FaceRight
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6                            
00011AA6                            loc_D246:
00011AA6 343C 00E0                                  move.w  #$E0,d2
00011AAA                            
00011AAA                            ObjSplats_FaceRight:
00011AAA 323C 0100                                  move.w  #$100,d1
00011AAE 08E8 0000 0001                             bset    #0,1(a0)
00011AB4 3038 D008                                  move.w  ($FFFFD008).w,d0
00011AB8 9068 0008                                  sub.w   8(a0),d0
00011ABC 6400                                       bcc.s   ObjSplats_Move
00011ABE 4440                                       neg.w   d0
00011AC0 4441                                       neg.w   d1
00011AC2 08A8 0000 0001                             bclr    #0,1(a0)
00011AC8                            
00011AC8                            ObjSplats_Move:
00011AC8 B042                                       cmp.w   d2,d0
00011ACA 6400                                       bcc.s   ObjSplats_Bounce
00011ACC 3141 0010                                  move.w  d1,$10(a0)
00011AD0 5428 0024                                  addq.b  #2,$24(a0)
00011AD4                            
00011AD4                            ObjSplats_Bounce:
00011AD4 6100 DE64                                  bsr.w   ObjectFall
00011AD8 117C 0001 001A                             move.b  #1,$1A(a0)
00011ADE 4A68 0012                                  tst.w   $12(a0)
00011AE2 6B00                                       bmi.s   ObjSplats_Turn
00011AE4 117C 0000 001A                             move.b  #0,$1A(a0)
00011AEA 6100 0000                                  bsr.w   ObjFloorDist
00011AEE 4A41                                       tst.w   d1
00011AF0 6A00                                       bpl.s   ObjSplats_Turn
00011AF2 3011                                       move.w  (a1),d0
00011AF4 0240 03FF                                  andi.w  #$3FF,d0
00011AF8 0C40 02D2                                  cmpi.w  #$2D2,d0
00011AFC 6500                                       bcs.s   ObjSplats_Fall
00011AFE 5428 0024                                  addq.b  #2,$24(a0)
00011B02 6000                                       bra.s   ObjSplats_Turn
00011B04                            ; ---------------------------------------------------------------------------
00011B04                            
00011B04                            ObjSplats_Fall:
00011B04 D368 000C                                  add.w   d1,$C(a0)
00011B08 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011B0E                            
00011B0E                            ObjSplats_Turn:
00011B0E 6100 0000                                  bsr.w   Yad_ChkWall
00011B12 6700                                       beq.s   loc_D2C4
00011B14 4468 0010                                  neg.w   $10(a0)
00011B18 0868 0000 0001                             bchg    #0,1(a0)
00011B1E 0868 0000 0022                             bchg    #0,$22(a0)
00011B24                            
00011B24                            loc_D2C4:
00011B24 6000 FDD6                                  bra.w   RememberState
00011B28                            ; ---------------------------------------------------------------------------
00011B28                            
00011B28                            loc_D2C8:
00011B28 6100 DE10                                  bsr.w   ObjectFall
00011B2C 6100 DE58                                  bsr.w   DisplaySprite
00011B30 4A28 0001                                  tst.b   1(a0)
00011B34 6A00 DE90                                  bpl.w   DeleteObject
00011B38 4E75                                       rts
00011B38 4E75                                       rts
00011B3A                            Map_Splats:	include	"_maps\Splats.asm"
00011B3A 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B3C 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B3E 02                         unk_D310:       dc.b   2
00011B3F EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B49 02                         unk_D31B:       dc.b   2
00011B4A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B4A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B54                            
00011B54                            		include	"_incObj\50 Yadrin.asm"
00011B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B54                            
00011B54                            
00011B54                            Yad_ChkWall:
00011B54 3038 FE04                  		move.w	(v_framecount).w,d0
00011B58 D047                       		add.w	d7,d0
00011B5A 0240 0003                  		andi.w	#3,d0
00011B5E 6600                       		bne.s	loc_F836
00011B60 7600                       		moveq	#0,d3
00011B62 1628 0014                  		move.b	obActWid(a0),d3
00011B66 4A68 0010                  		tst.w	obVelX(a0)
00011B6A 6B00                       		bmi.s	loc_F82C
00011B6C 6100 0000                  		bsr.w	ObjHitWallRight
00011B70 4A41                       		tst.w	d1
00011B72 6A00                       		bpl.s	loc_F836
00011B74                            
00011B74                            loc_F828:
00011B74 7001                       		moveq	#1,d0
00011B76 4E75                       		rts	
00011B78                            ; ===========================================================================
00011B78                            
00011B78                            loc_F82C:
00011B78 4643                       		not.w	d3
00011B7A 6100 0000                  		bsr.w	ObjHitWallLeft
00011B7E 4A41                       		tst.w	d1
00011B80 6BF2                       		bmi.s	loc_F828
00011B82                            
00011B82                            loc_F836:
00011B82 7000                       		moveq	#0,d0
00011B84 4E75                       		rts	
00011B86                            ; End of function Yad_ChkWall
00011B86                            
00011B86                            ; ===========================================================================
00011B86                            ; ---------------------------------------------------------------------------
00011B86                            ; Object 50 - Yadrin enemy (SYZ)
00011B86                            ; ---------------------------------------------------------------------------
00011B86                            
00011B86                            Yadrin:
00011B86 7000                       		moveq	#0,d0
00011B88 1028 0024                  		move.b	obRoutine(a0),d0
00011B8C 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B90 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B94                            ; ===========================================================================
00011B94 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B96 0000                       		dc.w Yad_Action-Yad_Index
00011B98                            
00011B98 =00000030                  yad_timedelay:	equ $30
00011B98                            ; ===========================================================================
00011B98                            
00011B98                            Yad_Main:	; Routine 0
00011B98 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011BA0 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011BA6 117C 0004 0001             		move.b	#4,obRender(a0)
00011BAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011BB2 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011BB8 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BBE 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BC4 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BCA 6100 DD6E                  		bsr.w	ObjectFall
00011BCE 6100 0000                  		bsr.w	ObjFloorDist
00011BD2 4A41                       		tst.w	d1
00011BD4 6A00                       		bpl.s	locret_F89E
00011BD6 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BDA 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BE4 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BEA                            
00011BEA                            	locret_F89E:
00011BEA 4E75                       		rts	
00011BEC                            ; ===========================================================================
00011BEC                            
00011BEC                            Yad_Action:	; Routine 2
00011BEC 7000                       		moveq	#0,d0
00011BEE 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BF2 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BF6 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BFA 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011C00 6100 AE30                  		bsr.w	AnimateSprite
00011C04 6000 FCF6                  		bra.w	RememberState
00011C08                            ; ===========================================================================
00011C08 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011C0A 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011C0C                            ; ===========================================================================
00011C0C                            
00011C0C                            Yad_Move:
00011C0C 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011C10 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011C12 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011C16 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C1C 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C22 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C28 6600                       		bne.s	locret_F8E2
00011C2A 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C2E                            
00011C2E                            	locret_F8E2:
00011C2E 4E75                       		rts	
00011C30                            ; ===========================================================================
00011C30                            
00011C30                            Yad_FixToFloor:
00011C30 6100 DD40                  		bsr.w	SpeedToPos
00011C34 6100 0000                  		bsr.w	ObjFloorDist
00011C38 0C41 FFF8                  		cmpi.w	#-8,d1
00011C3C 6D00                       		blt.s	Yad_Pause
00011C3E 0C41 000C                  		cmpi.w	#$C,d1
00011C42 6C00                       		bge.s	Yad_Pause
00011C44 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C48 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C4C 6600                       		bne.s	Yad_Pause
00011C4E 4E75                       		rts	
00011C50                            ; ===========================================================================
00011C50                            
00011C50                            Yad_Pause:
00011C50 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C54 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C5A 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C60 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C66 4E75                       		rts	
00011C66 4E75                       		rts	
00011C68                            		include	"_anim\Yadrin.asm"
00011C68                            ; ---------------------------------------------------------------------------
00011C68                            ; Animation script - Yadrin enemy
00011C68                            ; ---------------------------------------------------------------------------
00011C68 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C6A 0000                       		dc.w @walk-Ani_Yad
00011C6C                            
00011C6C 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C70 00                         		even
00011C70 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C7E                            		even
00011C7E                            		even
00011C7E                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C7E                            ; --------------------------------------------------------------------------------
00011C7E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C7E                            ; --------------------------------------------------------------------------------
00011C7E                            
00011C7E                            SME_4WhIu:	
00011C7E 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C82 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C86 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C8A 09                         SME_4WhIu_C:	dc.b 9	
00011C8B F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C90 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C95 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C9A FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C9F FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CA4 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CA9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CAE F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CB3 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CB8 09                         SME_4WhIu_3A:	dc.b 9	
00011CB9 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CBE FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CC3 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CC8 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CCD FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CD2 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CD7 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CDC EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CE1 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CE6 0C                         SME_4WhIu_68:	dc.b $C	
00011CE7 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CEC FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CF1 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CF6 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CFB FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D00 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011D05 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011D0A FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D0F FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D14 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D19 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D1E 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D23 0C                         SME_4WhIu_A5:	dc.b $C	
00011D24 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D29 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D2E FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D33 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D38 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D3D F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D42 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D47 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D4C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D51 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D56 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D5B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D60 05                         SME_4WhIu_E2:	dc.b 5	
00011D61 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D66 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D6B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D70 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D75 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D7A 05                         SME_4WhIu_FC:	dc.b 5	
00011D7B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D80 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D85 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D8A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D8F 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D94                            		even
00011D94                            		even
00011D94                            
00011D94                            		include	"_incObj\sub SolidObject.asm"
00011D94                            ; ---------------------------------------------------------------------------
00011D94                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D94                            ;
00011D94                            ; input:
00011D94                            ;	d1 = width
00011D94                            ;	d2 = height / 2 (when jumping)
00011D94                            ;	d3 = height / 2 (when walking)
00011D94                            ;	d4 = x-axis position
00011D94                            ; ---------------------------------------------------------------------------
00011D94                            
00011D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D94                            
00011D94                            
00011D94                            SolidObject:
00011D94 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D98 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D9C 3401                       		move.w	d1,d2
00011D9E D442                       		add.w	d2,d2
00011DA0 43F8 D000                  		lea	(v_player).w,a1
00011DA4 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DAA 6600                       		bne.s	@leave		; if yes, branch
00011DAC 3029 0008                  		move.w	obX(a1),d0
00011DB0 9068 0008                  		sub.w	obX(a0),d0
00011DB4 D041                       		add.w	d1,d0
00011DB6 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011DB8 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DBA 6500                       		bcs.s	@stand		; if not, branch
00011DBC                            
00011DBC                            	@leave:
00011DBC 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DC2 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DC8 4228 0025                  		clr.b	obSolid(a0)
00011DCC 7800                       		moveq	#0,d4
00011DCE 4E75                       		rts	
00011DD0                            
00011DD0                            	@stand:
00011DD0 3404                       		move.w	d4,d2
00011DD2 4EB9 0000 9766             		jsr	MvSonicOnPtfm
00011DD8 7800                       		moveq	#0,d4
00011DDA 4E75                       		rts	
00011DDC                            ; ===========================================================================
00011DDC                            
00011DDC                            SolidObject71:
00011DDC 4A28 0025                  		tst.b	obSolid(a0)
00011DE0 6700 0000                  		beq.w	loc_FAD0
00011DE4 3401                       		move.w	d1,d2
00011DE6 D442                       		add.w	d2,d2
00011DE8 43F8 D000                  		lea	(v_player).w,a1
00011DEC 0829 0001 0022             		btst	#1,obStatus(a1)
00011DF2 6600                       		bne.s	@leave
00011DF4 3029 0008                  		move.w	obX(a1),d0
00011DF8 9068 0008                  		sub.w	obX(a0),d0
00011DFC D041                       		add.w	d1,d0
00011DFE 6B00                       		bmi.s	@leave
00011E00 B042                       		cmp.w	d2,d0
00011E02 6500                       		bcs.s	@stand
00011E04                            
00011E04                            	@leave:
00011E04 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E0A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E10 4228 0025                  		clr.b	obSolid(a0)
00011E14 7800                       		moveq	#0,d4
00011E16 4E75                       		rts	
00011E18                            
00011E18                            	@stand:
00011E18 3404                       		move.w	d4,d2
00011E1A 4EB9 0000 9766             		jsr	MvSonicOnPtfm
00011E20 7800                       		moveq	#0,d4
00011E22 4E75                       		rts	
00011E24                            ; ===========================================================================
00011E24                            
00011E24                            SolidObject2F:
00011E24 43F8 D000                  		lea	(v_player).w,a1
00011E28 4A28 0001                  		tst.b	obRender(a0)
00011E2C 6A00 0000                  		bpl.w	Solid_Ignore
00011E30 3029 0008                  		move.w	obX(a1),d0
00011E34 9068 0008                  		sub.w	obX(a0),d0
00011E38 D041                       		add.w	d1,d0
00011E3A 6B00 0000                  		bmi.w	Solid_Ignore
00011E3E 3601                       		move.w	d1,d3
00011E40 D643                       		add.w	d3,d3
00011E42 B043                       		cmp.w	d3,d0
00011E44 6200 0000                  		bhi.w	Solid_Ignore
00011E48 3A00                       		move.w	d0,d5
00011E4A 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E50 6700                       		beq.s	@notflipped	; if not, branch
00011E52 4645                       		not.w	d5
00011E54 DA43                       		add.w	d3,d5
00011E56                            
00011E56                            	@notflipped:
00011E56 E24D                       		lsr.w	#1,d5
00011E58 7600                       		moveq	#0,d3
00011E5A 1632 5000                  		move.b	(a2,d5.w),d3
00011E5E 9612                       		sub.b	(a2),d3
00011E60 3A28 000C                  		move.w	obY(a0),d5
00011E64 9A43                       		sub.w	d3,d5
00011E66 1629 0016                  		move.b	obHeight(a1),d3
00011E6A 4883                       		ext.w	d3
00011E6C D443                       		add.w	d3,d2
00011E6E 3629 000C                  		move.w	obY(a1),d3
00011E72 9645                       		sub.w	d5,d3
00011E74 5843                       		addq.w	#4,d3
00011E76 D642                       		add.w	d2,d3
00011E78 6B00 0000                  		bmi.w	Solid_Ignore
00011E7C 3802                       		move.w	d2,d4
00011E7E D844                       		add.w	d4,d4
00011E80 B644                       		cmp.w	d4,d3
00011E82 6400 0000                  		bcc.w	Solid_Ignore
00011E86 6000 0000                  		bra.w	loc_FB0E
00011E8A                            ; ===========================================================================
00011E8A                            
00011E8A                            Solid_ChkEnter:
00011E8A 4A28 0001                  		tst.b	obRender(a0)
00011E8E 6A00 0000                  		bpl.w	Solid_Ignore
00011E92                            
00011E92                            loc_FAD0:
00011E92 43F8 D000                  		lea	(v_player).w,a1
00011E96 3029 0008                  		move.w	obX(a1),d0
00011E9A 9068 0008                  		sub.w	obX(a0),d0
00011E9E D041                       		add.w	d1,d0
00011EA0 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011EA4 3601                       		move.w	d1,d3
00011EA6 D643                       		add.w	d3,d3
00011EA8 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011EAA 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011EAE 1629 0016                  		move.b	obHeight(a1),d3
00011EB2 4883                       		ext.w	d3
00011EB4 D443                       		add.w	d3,d2
00011EB6 3629 000C                  		move.w	obY(a1),d3
00011EBA 9668 000C                  		sub.w	obY(a0),d3
00011EBE 5843                       		addq.w	#4,d3
00011EC0 D642                       		add.w	d2,d3
00011EC2 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011EC6 3802                       		move.w	d2,d4
00011EC8 D844                       		add.w	d4,d4
00011ECA B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011ECC 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011ED0                            
00011ED0                            loc_FB0E:
00011ED0 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011ED4 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011ED8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011EDE 6400 0000                  			bcc.w	Solid_Debug
00011EE2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011EE6 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EEA 3A00                       		move.w	d0,d5
00011EEC B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EEE 6400                       		bcc.s	@isright	; if yes, branch
00011EF0 D241                       		add.w	d1,d1
00011EF2 9041                       		sub.w	d1,d0
00011EF4 3A00                       		move.w	d0,d5
00011EF6 4445                       		neg.w	d5
00011EF8                            
00011EF8                            	@isright:
00011EF8 3203                       		move.w	d3,d1
00011EFA B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011EFC 6400                       		bcc.s	@isbelow	; if yes, branch
00011EFE                            
00011EFE 5943                       		subq.w	#4,d3
00011F00 9644                       		sub.w	d4,d3
00011F02 3203                       		move.w	d3,d1
00011F04 4441                       		neg.w	d1
00011F06                            
00011F06                            	@isbelow:
00011F06 BA41                       		cmp.w	d1,d5
00011F08 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011F0C 0C41 0004                  		cmpi.w	#4,d1
00011F10 6300                       		bls.s	Solid_SideAir
00011F12 4A40                       		tst.w	d0		; where is Sonic?
00011F14 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011F16 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011F18 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F1C 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F1E 6000                       		bra.s	Solid_Left
00011F20                            ; ===========================================================================
00011F20                            
00011F20                            Solid_Right:
00011F20 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F24 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F26                            
00011F26                            Solid_Left:
00011F26 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F2C 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F32                            
00011F32                            Solid_Centre:
00011F32 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F36 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F3C 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F3E 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F44 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F4A 7801                       		moveq	#1,d4		; return side collision
00011F4C 4E75                       		rts	
00011F4E                            ; ===========================================================================
00011F4E                            
00011F4E                            Solid_SideAir:
00011F4E 6100                       		bsr.s	Solid_NotPushing
00011F50 7801                       		moveq	#1,d4		; return side collision
00011F52 4E75                       		rts	
00011F54                            ; ===========================================================================
00011F54                            
00011F54                            Solid_Ignore:
00011F54 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F5A 6700                       		beq.s	Solid_Debug	; if not, branch
00011F5C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F62 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F64 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F6A 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F6C 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F72 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F74 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F7A                            
00011F7A                            
00011F7A                            Solid_NotPushing:
00011F7A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F80 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F86                            
00011F86                            Solid_Debug:
00011F86 7800                       		moveq	#0,d4		; return no collision
00011F88 4E75                       		rts	
00011F8A                            ; ===========================================================================
00011F8A                            
00011F8A                            Solid_TopBottom:
00011F8A 4A43                       		tst.w	d3		; is Sonic below the object?
00011F8C 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F8E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F92 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F94 60BE                       		bra.s	Solid_Ignore
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            Solid_Below:
00011F96 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F9A 6700                       		beq.s	Solid_Squash	; if not, branch
00011F9C 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F9E 4A43                       		tst.w	d3		; is Sonic above the object?
00011FA0 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011FA2 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FA6 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011FAC                            
00011FAC                            Solid_TopBtmAir:
00011FAC 78FF                       		moveq	#-1,d4
00011FAE 4E75                       		rts	
00011FB0                            ; ===========================================================================
00011FB0                            
00011FB0                            Solid_Squash:
00011FB0 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FB6 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011FB8 2F08                       		move.l	a0,-(sp)
00011FBA 2049                       		movea.l	a1,a0
00011FBC 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FC2 205F                       		movea.l	(sp)+,a0
00011FC4 78FF                       		moveq	#-1,d4
00011FC6 4E75                       		rts	
00011FC8                            ; ===========================================================================
00011FC8                            
00011FC8                            Solid_Landed:
00011FC8 5943                       		subq.w	#4,d3
00011FCA 7200                       		moveq	#0,d1
00011FCC 1228 0014                  		move.b	obActWid(a0),d1
00011FD0 3401                       		move.w	d1,d2
00011FD2 D442                       		add.w	d2,d2
00011FD4 D269 0008                  		add.w	obX(a1),d1
00011FD8 9268 0008                  		sub.w	obX(a0),d1
00011FDC 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FDE B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FE0 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FE2 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FE6 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FE8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FEC 5369 000C                  		subq.w	#1,obY(a1)
00011FF0 6100                       		bsr.s	Solid_ResetFloor
00011FF2 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FF8 08E8 0003 0022             		bset	#3,obStatus(a0)
00011FFE 78FF                       		moveq	#-1,d4		; return top/bottom collision
00012000 4E75                       		rts	
00012002                            ; ===========================================================================
00012002                            
00012002                            Solid_Miss:
00012002 7800                       		moveq	#0,d4
00012004 4E75                       		rts	
00012006                            ; End of function SolidObject
00012006                            
00012006                            
00012006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012006                            
00012006                            
00012006                            Solid_ResetFloor:
00012006 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
0001200C 6700                       		beq.s	@notonobj	; if not, branch
0001200E                            
0001200E 7000                       		moveq	#0,d0
00012010 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00012014 ED48                       		lsl.w	#6,d0
00012016 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
0001201C 2440                       		movea.l	d0,a2
0001201E 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00012024 422A 0025                  		clr.b	obSolid(a2)
00012028                            
00012028                            	@notonobj:
00012028 3008                       		move.w	a0,d0
0001202A 0440 D000                  		subi.w	#$D000,d0
0001202E EC48                       		lsr.w	#6,d0
00012030 0240 007F                  		andi.w	#$7F,d0
00012034 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00012038 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
0001203E 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00012044 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0001204A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012050 6700                       		beq.s	@notinair	; if not, branch
00012052 2F08                       		move.l	a0,-(sp)
00012054 2049                       		movea.l	a1,a0
00012056 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001205C 205F                       		movea.l	(sp)+,a0
0001205E                            
0001205E                            	@notinair:
0001205E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00012064 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001206A 4E75                       		rts	
0001206C                            ; End of function Solid_ResetFloor
0001206C                            ; End of function Solid_ResetFloor
0001206C                            
0001206C                            		include	"_incObj\51 Smashable Green Block.asm"
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Object 51 - smashable	green block (MZ)
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            
0001206C                            SmashBlock:
0001206C 7000                       		moveq	#0,d0
0001206E 1028 0024                  		move.b	obRoutine(a0),d0
00012072 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012076 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001207A 6000 F880                  		bra.w	RememberState
0001207E                            ; ===========================================================================
0001207E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012080 0000                       		dc.w Smab_Solid-Smab_Index
00012082 0000                       		dc.w Smab_Points-Smab_Index
00012084                            ; ===========================================================================
00012084                            
00012084                            Smab_Main:	; Routine 0
00012084 5428 0024                  		addq.b	#2,obRoutine(a0)
00012088 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012090 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012096 117C 0004 0001             		move.b	#4,obRender(a0)
0001209C 117C 0010 0014             		move.b	#$10,obActWid(a0)
000120A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000120A8 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000120AE                            
000120AE                            Smab_Solid:	; Routine 2
000120AE                            
000120AE =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000120AE =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000120AE                            
000120AE 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000120B4 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120BA 323C 001B                  		move.w	#$1B,d1
000120BE 343C 0010                  		move.w	#$10,d2
000120C2 363C 0011                  		move.w	#$11,d3
000120C6 3828 0008                  		move.w	obX(a0),d4
000120CA 6100 FCC8                  		bsr.w	SolidObject
000120CE 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120D4 6600                       		bne.s	@smash		; if yes, branch
000120D6                            
000120D6                            	@notspinning:
000120D6 4E75                       		rts	
000120D8                            ; ===========================================================================
000120D8                            
000120D8                            @smash:
000120D8 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120DE 66F6                       		bne.s	@notspinning	; if not, branch
000120E0 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120E6 08E9 0002 0022             		bset	#2,obStatus(a1)
000120EC 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120F2 137C 0007 0017             		move.b	#7,obWidth(a1)
000120F8 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000120FE 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00012104 08E9 0001 0022             		bset	#1,obStatus(a1)
0001210A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012110 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012116 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001211C 4228 0025                  		clr.b	obSolid(a0)
00012120 117C 0001 001A             		move.b	#1,obFrame(a0)
00012126 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
0001212C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001212E 343C 0038                  		move.w	#$38,d2
00012132 6100 D406                  		bsr.w	SmashObject
00012136 6100 DCDA                  		bsr.w	FindFreeObj
0001213A 6600                       		bne.s	Smab_Points
0001213C 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012140 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012146 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001214C 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012150 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012154 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012158 6500                       		bcs.s	@bonus		; if yes, branch
0001215A 7406                       		moveq	#6,d2		; set cap for points
0001215C                            
0001215C                            	@bonus:
0001215C 7000                       		moveq	#0,d0
0001215E 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012162 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012168 6500                       		bcs.s	@givepoints	; if not, branch
0001216A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001216E 740A                       		moveq	#10,d2
00012170                            
00012170                            	@givepoints:
00012170 4EB9 0000 0000             		jsr	(AddPoints).l
00012176 E24A                       		lsr.w	#1,d2
00012178 1342 001A                  		move.b	d2,obFrame(a1)
0001217C                            
0001217C                            Smab_Points:	; Routine 4
0001217C 6100 D7F4                  		bsr.w	SpeedToPos
00012180 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012186 6100 D7FE                  		bsr.w	DisplaySprite
0001218A 4A28 0001                  		tst.b	obRender(a0)
0001218E 6A00 D836                  		bpl.w	DeleteObject
00012192 4E75                       		rts	
00012194                            ; ===========================================================================
00012194 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00012198 FF00 FF00                  		dc.w -$100, -$100
0001219C 0200 FE00                  		dc.w $200, -$200
000121A0 0100 FF00                  		dc.w $100, -$100
000121A4                            
000121A4 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121A4 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121AC                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000121AC                            ; ---------------------------------------------------------------------------
000121AC                            ; Sprite mappings - smashable green block (MZ)
000121AC                            ; ---------------------------------------------------------------------------
000121AC                            Map_Smab_internal:
000121AC 0000                       		dc.w @two-Map_Smab_internal
000121AE 0000                       		dc.w @four-Map_Smab_internal
000121B0 02                         @two:		dc.b 2
000121B1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
000121B6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000121BB 04                         @four:		dc.b 4
000121BC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
000121C1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000121C6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000121CB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000121D0                            		even
000121D0                            		even
000121D0                            
000121D0                            		include	"_incObj\52 Moving Blocks.asm"
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121D0                            ; ---------------------------------------------------------------------------
000121D0                            
000121D0                            MovingBlock:
000121D0 7000                       		moveq	#0,d0
000121D2 1028 0024                  		move.b	obRoutine(a0),d0
000121D6 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121DA 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121DE                            ; ===========================================================================
000121DE 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121E0 0000                       		dc.w MBlock_Platform-MBlock_Index
000121E2 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121E4                            
000121E4 =00000030                  mblock_origX:	equ $30
000121E4 =00000032                  mblock_origY:	equ $32
000121E4                            
000121E4 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121E6 2001                       		dc.b $20, 1
000121E8 2002                       		dc.b $20, 2
000121EA 4003                       		dc.b $40, 3
000121EC 3004                       		dc.b $30, 4
000121EE                            ; ===========================================================================
000121EE                            
000121EE                            MBlock_Main:	; Routine 0
000121EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000121F2 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121FA 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012200 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012206 6600                       		bne.s	loc_FE44
00012208 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012210 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00012216 117C 0007 0016             		move.b	#7,obHeight(a0)
0001221C                            
0001221C                            loc_FE44:
0001221C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012222 6600                       		bne.s	loc_FE60
00012224 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
0001222A 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012230 6700                       		beq.s	loc_FE60	; if yes, branch
00012232 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00012238                            
00012238                            loc_FE60:
00012238 117C 0004 0001             		move.b	#4,obRender(a0)
0001223E 7000                       		moveq	#0,d0
00012240 1028 0028                  		move.b	obSubtype(a0),d0
00012244 E648                       		lsr.w	#3,d0
00012246 0240 001E                  		andi.w	#$1E,d0
0001224A 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001224E 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012252 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012256 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001225C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012262 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012268 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001226E                            
0001226E                            MBlock_Platform: ; Routine 2
0001226E 6100 0000                  		bsr.w	MBlock_Move
00012272 7200                       		moveq	#0,d1
00012274 1228 0014                  		move.b	obActWid(a0),d1
00012278 4EB9 0000 9094             		jsr	(PlatformObject).l
0001227E 6000                       		bra.s	MBlock_ChkDel
00012280                            ; ===========================================================================
00012280                            
00012280                            MBlock_StandOn:	; Routine 4
00012280 7200                       		moveq	#0,d1
00012282 1228 0014                  		move.b	obActWid(a0),d1
00012286 4EB9 0000 9208             		jsr	(ExitPlatform).l
0001228C 3F28 0008                  		move.w	obX(a0),-(sp)
00012290 6100 0000                  		bsr.w	MBlock_Move
00012294 341F                       		move.w	(sp)+,d2
00012296 4EB9 0000 9772             		jsr	(MvSonicOnPtfm2).l
0001229C                            
0001229C                            MBlock_ChkDel:
000122BA 6000 D6CA                  		bra.w	DisplaySprite
000122BE                            ; ===========================================================================
000122BE                            
000122BE                            MBlock_Move:
000122BE 7000                       		moveq	#0,d0
000122C0 1028 0028                  		move.b	obSubtype(a0),d0
000122C4 0240 000F                  		andi.w	#$F,d0
000122C8 D040                       		add.w	d0,d0
000122CA 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122CE 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122D2                            ; ===========================================================================
000122D2 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122D6 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122DA 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122DE 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122E2 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122E6 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122E8                            ; ===========================================================================
000122E8                            
000122E8                            MBlock_Type00:
000122E8 4E75                       		rts	
000122EA                            ; ===========================================================================
000122EA                            
000122EA                            MBlock_Type01:
000122EA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122EE 323C 0060                  		move.w	#$60,d1
000122F2 0828 0000 0022             		btst	#0,obStatus(a0)
000122F8 6700                       		beq.s	loc_FF26
000122FA 4440                       		neg.w	d0
000122FC D041                       		add.w	d1,d0
000122FE                            
000122FE                            loc_FF26:
000122FE 3228 0030                  		move.w	mblock_origX(a0),d1
00012302 9240                       		sub.w	d0,d1
00012304 3141 0008                  		move.w	d1,obX(a0)
00012308 4E75                       		rts	
0001230A                            ; ===========================================================================
0001230A                            
0001230A                            MBlock_Type02:
0001230A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012310 6600                       		bne.s	MBlock_02_Wait
00012312 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012316                            
00012316                            MBlock_02_Wait:
00012316 4E75                       		rts	
00012318                            ; ===========================================================================
00012318                            
00012318                            MBlock_Type03:
00012318 7600                       		moveq	#0,d3
0001231A 1628 0014                  		move.b	obActWid(a0),d3
0001231E 6100 0000                  		bsr.w	ObjHitWallRight
00012322 4A41                       		tst.w	d1		; has the platform hit a wall?
00012324 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00012326 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001232A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012330 4E75                       		rts	
00012332                            ; ===========================================================================
00012332                            
00012332                            MBlock_03_End:
00012332 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00012336 4E75                       		rts	
00012338                            ; ===========================================================================
00012338                            
00012338                            MBlock_Type05:
00012338 7600                       		moveq	#0,d3
0001233A 1628 0014                  		move.b	obActWid(a0),d3
0001233E 6100 0000                  		bsr.w	ObjHitWallRight
00012342 4A41                       		tst.w	d1		; has the platform hit a wall?
00012344 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012346 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001234A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012350 4E75                       		rts	
00012352                            ; ===========================================================================
00012352                            
00012352                            MBlock_05_End:
00012352 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012356 4E75                       		rts	
00012358                            ; ===========================================================================
00012358                            
00012358                            MBlock_Type06:
00012358 6100 D618                  		bsr.w	SpeedToPos
0001235C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012362 6100 0000                  		bsr.w	ObjFloorDist
00012366 4A41                       		tst.w	d1		; has platform hit the floor?
00012368 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001236C D368 000C                  		add.w	d1,obY(a0)
00012370 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012374 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012378                            
00012378                            locret_FFA0:
00012378 4E75                       		rts	
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            MBlock_Type07:
0001237A 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001237E 6700                       		beq.s	MBlock_07_ChkDel
00012380 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012384                            
00012384                            MBlock_07_ChkDel:
00012384 588F                       		addq.l	#4,sp
000123A4 4E75                       		rts	
000123A6                            ; ===========================================================================
000123A6                            
000123A6                            MBlock_Type08:
000123A6 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000123AA 323C 0080                  		move.w	#$80,d1
000123AE 0828 0000 0022             		btst	#0,obStatus(a0)
000123B4 6700                       		beq.s	loc_FFE2
000123B6 4440                       		neg.w	d0
000123B8 D041                       		add.w	d1,d0
000123BA                            
000123BA                            loc_FFE2:
000123BA 3228 0032                  		move.w	mblock_origY(a0),d1
000123BE 9240                       		sub.w	d0,d1
000123C0 3141 000C                  		move.w	d1,obY(a0)
000123C4 4E75                       		rts	
000123C6                            ; ===========================================================================
000123C6                            
000123C6                            MBlock_Type0A:
000123C6 7600                       		moveq	#0,d3
000123C8 1628 0014                  		move.b	obActWid(a0),d3
000123CC D643                       		add.w	d3,d3
000123CE 7208                       		moveq	#8,d1
000123D0 0828 0000 0022             		btst	#0,obStatus(a0)
000123D6 6700                       		beq.s	loc_10004
000123D8 4441                       		neg.w	d1
000123DA 4443                       		neg.w	d3
000123DC                            
000123DC                            loc_10004:
000123DC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123E0 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123E2 3028 0008                  		move.w	obX(a0),d0
000123E6 9068 0030                  		sub.w	mblock_origX(a0),d0
000123EA B043                       		cmp.w	d3,d0
000123EC 6700                       		beq.s	MBlock_0A_Wait
000123EE D368 0008                  		add.w	d1,obX(a0)	; move platform
000123F2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123F8 4E75                       		rts	
000123FA                            ; ===========================================================================
000123FA                            
000123FA                            MBlock_0A_Wait:
000123FA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000123FE 6600                       		bne.s	locret_1002E	; if time remains, branch
00012400 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00012406                            
00012406                            locret_1002E:
00012406 4E75                       		rts	
00012408                            ; ===========================================================================
00012408                            
00012408                            MBlock_0A_Back:
00012408 3028 0008                  		move.w	obX(a0),d0
0001240C 9068 0030                  		sub.w	mblock_origX(a0),d0
00012410 6700                       		beq.s	MBlock_0A_Reset
00012412 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00012416 4E75                       		rts	
00012418                            ; ===========================================================================
00012418                            
00012418                            MBlock_0A_Reset:
00012418 4268 0036                  		clr.w	$36(a0)
0001241C 5328 0028                  		subq.b	#1,obSubtype(a0)
00012420 4E75                       		rts	
00012420 4E75                       		rts	
00012422                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012422                            ; ---------------------------------------------------------------------------
00012422                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012422                            ; ---------------------------------------------------------------------------
00012422                            Map_MBlock_internal:
00012422 0000                       		dc.w @mz1-Map_MBlock_internal
00012424 0000                       		dc.w @mz2-Map_MBlock_internal
00012426 0000                       		dc.w @sbz-Map_MBlock_internal
00012428 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001242A 0000                       		dc.w @mz3-Map_MBlock_internal
0001242C 01                         @mz1:		dc.b 1
0001242D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012432 02                         @mz2:		dc.b 2
00012433 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012438 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001243D 04                         @sbz:		dc.b 4
0001243E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012443 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012448 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001244D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012452 04                         @sbzwide:	dc.b 4
00012453 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012458 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001245D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012462 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012467 03                         @mz3:		dc.b 3
00012468 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001246D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012472 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012478 00                         		even
00012478 00                         		even
00012478                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012478                            ; ---------------------------------------------------------------------------
00012478                            ; Sprite mappings - moving block (LZ)
00012478                            ; ---------------------------------------------------------------------------
00012478                            Map_MBlockLZ_internal:
00012478 0000                       		dc.w @0-Map_MBlockLZ_internal
0001247A 01                         @0:		dc.b 1
0001247B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012480                            		even
00012480                            		even
00012480                            
00012480                            		include	"_incObj\55 Basaran.asm"
00012480                            ; ---------------------------------------------------------------------------
00012480                            ; Object 55 - Basaran enemy (MZ)
00012480                            ; ---------------------------------------------------------------------------
00012480                            
00012480                            Basaran:
00012480 7000                       		moveq	#0,d0
00012482 1028 0024                  		move.b	obRoutine(a0),d0
00012486 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001248A 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001248E                            ; ===========================================================================
0001248E 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012490 0000                       		dc.w Bas_Action-Bas_Index
00012492                            ; ===========================================================================
00012492                            
00012492                            Bas_Main:	; Routine 0
00012492 5428 0024                  		addq.b	#2,obRoutine(a0)
00012496 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001249E 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000124A4 117C 0004 0001             		move.b	#4,obRender(a0)
000124AA 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124B0 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124B6 117C 000B 0020             		move.b	#$B,obColType(a0)
000124BC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124C2                            
000124C2                            Bas_Action:	; Routine 2
000124C2 7000                       		moveq	#0,d0
000124C4 1028 0025                  		move.b	ob2ndRout(a0),d0
000124C8 323B 0000                  		move.w	@index(pc,d0.w),d1
000124CC 4EBB 1000                  		jsr	@index(pc,d1.w)
000124D0 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124D6 6100 A55A                  		bsr.w	AnimateSprite
000124DA 6000 F420                  		bra.w	RememberState
000124DE                            ; ===========================================================================
000124DE 0000                       @index:		dc.w @dropcheck-@index
000124E0 0000                       		dc.w @dropfly-@index
000124E2 0000                       		dc.w @flapsound-@index
000124E4 0000                       		dc.w @flyup-@index
000124E6                            ; ===========================================================================
000124E6                            
000124E6                            @dropcheck:
000124E6 343C 0080                  		move.w	#$80,d2
000124EA 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124EE 6400                       		bcc.s	@nodrop		; if not, branch
000124F0 3038 D00C                  		move.w	(v_player+obY).w,d0
000124F4 3140 0036                  		move.w	d0,$36(a0)
000124F8 9068 000C                  		sub.w	obY(a0),d0
000124FC 6500                       		bcs.s	@nodrop
000124FE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
00012502 6400                       		bcc.s	@nodrop		; if not, branch
00012504 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012508 6600                       		bne.s	@nodrop		; if yes, branch
0001250A                            
0001250A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001250E D007                       		add.b	d7,d0
00012510 0200 0007                  		andi.b	#7,d0
00012514 6600                       		bne.s	@nodrop
00012516 117C 0001 001C             		move.b	#1,obAnim(a0)
0001251C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012520                            
00012520                            	@nodrop:
00012520 4E75                       		rts	
00012522                            ; ===========================================================================
00012522                            
00012522                            @dropfly:
00012522 6100 D44E                  		bsr.w	SpeedToPos
00012526 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
0001252C 343C 0080                  		move.w	#$80,d2
00012530 6100 0000                  		bsr.w	@chkdistance
00012534 3028 0036                  		move.w	$36(a0),d0
00012538 9068 000C                  		sub.w	obY(a0),d0
0001253C 6500                       		bcs.s	@chkdel
0001253E 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012542 6400                       		bcc.s	@dropmore	; if not, branch
00012544 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012548 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001254E 117C 0002 001C             		move.b	#2,obAnim(a0)
00012554 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012558                            
00012558                            	@dropmore:
00012558 4E75                       		rts	
0001255A                            
0001255A                            	@chkdel:
0001255A 4A28 0001                  		tst.b	obRender(a0)
0001255E 6A00 D466                  		bpl.w	DeleteObject
00012562 4E75                       		rts	
00012564                            ; ===========================================================================
00012564                            
00012564                            @flapsound:
00012564 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012568 0200 000F                  		andi.b	#$F,d0
0001256C 6600                       		bne.s	@nosound
00012578                            
00012578                            	@nosound:
00012578 6100 D3F8                  		bsr.w	SpeedToPos
0001257C 3038 D008                  		move.w	(v_player+obX).w,d0
00012580 9068 0008                  		sub.w	obX(a0),d0
00012584 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012586 4440                       		neg.w	d0
00012588                            
00012588                            	@isright:
00012588 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001258C 6500                       		bcs.s	@dontflyup	; if yes, branch
0001258E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012592 D007                       		add.b	d7,d0
00012594 0200 0007                  		andi.b	#7,d0
00012598 6600                       		bne.s	@dontflyup
0001259A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001259E                            
0001259E                            @dontflyup:
0001259E 4E75                       		rts	
000125A0                            ; ===========================================================================
000125A0                            
000125A0                            @flyup:
000125A0 6100 D3D0                  		bsr.w	SpeedToPos
000125A4 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000125AA 6100 0000                  		bsr.w	ObjHitCeiling
000125AE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125B0 6A00                       		bpl.s	@noceiling	; if not, branch
000125B2 9368 000C                  		sub.w	d1,obY(a0)
000125B6 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125BC 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125C0 4268 0012                  		clr.w	obVelY(a0)
000125C4 4228 001C                  		clr.b	obAnim(a0)
000125C8 4228 0025                  		clr.b	ob2ndRout(a0)
000125CC                            
000125CC                            	@noceiling:
000125CC 4E75                       		rts	
000125CE                            ; ===========================================================================
000125CE                            
000125CE                            ; Subroutine to check Sonic's distance from the basaran
000125CE                            
000125CE                            ; input:
000125CE                            ;	d2 = distance to compare
000125CE                            
000125CE                            ; output:
000125CE                            ;	d0 = distance between Sonic and basaran
000125CE                            ;	d1 = speed/direction for basaran to fly
000125CE                            
000125CE                            @chkdistance:
000125CE 323C 0100                  		move.w	#$100,d1
000125D2 08E8 0000 0022             		bset	#0,obStatus(a0)
000125D8 3038 D008                  		move.w	(v_player+obX).w,d0
000125DC 9068 0008                  		sub.w	obX(a0),d0
000125E0 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125E2 4440                       		neg.w	d0
000125E4 4441                       		neg.w	d1
000125E6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125EC                            
000125EC                            	@right:
000125EC B042                       		cmp.w	d2,d0
000125EE 4E75                       		rts	
000125F0                            ; ===========================================================================
000125F0                            ; unused crap
000125F0 6100 D380                  		bsr.w	SpeedToPos
000125F4 6100 D390                  		bsr.w	DisplaySprite
000125F8 4A28 0001                  		tst.b	obRender(a0)
000125FC 6A00 D3C8                  		bpl.w	DeleteObject
00012600 4E75                       		rts	
00012600 4E75                       		rts	
00012602                            		include	"_anim\Basaran.asm"
00012602                            ; ---------------------------------------------------------------------------
00012602                            ; Animation script - Basaran enemy
00012602                            ; ---------------------------------------------------------------------------
00012602 0000                       Ani_Bas:	dc.w @still-Ani_Bas
00012604 0000                       		dc.w @fall-Ani_Bas
00012606 0000                       		dc.w @fly-Ani_Bas
00012608 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001260C 00                         		even
0001260C 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012610 00                         		even
00012610 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
00012616                            		even
00012616                            		even
00012616                            Map_Bas:	include	"_maps\Basaran.asm"
00012616                            ; --------------------------------------------------------------------------------
00012616                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012616                            ; --------------------------------------------------------------------------------
00012616                            
00012616                            SME_RhYYA:	
00012616 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001261A 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
0001261E 01                         SME_RhYYA_8:	dc.b 1	
0001261F F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012624 03                         SME_RhYYA_E:	dc.b 3	
00012625 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001262A 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
0001262F 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012634 04                         SME_RhYYA_1E:	dc.b 4	
00012635 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
0001263A 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
0001263F 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012644 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012649 04                         SME_RhYYA_33:	dc.b 4	
0001264A F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001264F 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012654 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012659 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001265E                            		even
0001265E                            		even
0001265E                            
0001265E                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001265E                            ; ---------------------------------------------------------------------------
0001265E                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001265E                            ; ---------------------------------------------------------------------------
0001265E                            
0001265E                            FloatingBlock:
0001265E 7000                       		moveq	#0,d0
00012660 1028 0024                  		move.b	obRoutine(a0),d0
00012664 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012668 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001266C                            ; ===========================================================================
0001266C 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001266E 0000                       		dc.w FBlock_Action-FBlock_Index
00012670                            
00012670 =00000034                  fb_origX:	equ $34		; original x-axis position
00012670 =00000030                  fb_origY:	equ $30		; original y-axis position
00012670 =0000003A                  fb_height:	equ $3A		; total object height
00012670 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012670                            
00012670                            FBlock_Var:	; width/2, height/2
00012670 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012672 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012674 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012676 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012678 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001267A 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001267C 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001267E 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012680                            ; ===========================================================================
00012680                            
00012680                            FBlock_Main:	; Routine 0
00012680 5428 0024                  		addq.b	#2,obRoutine(a0)
00012684 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001268C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012692 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012698 6600                       		bne.s	@notLZ
0001269A 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000126A0                            
000126A0                            	@notLZ:
000126A0 117C 0004 0001             		move.b	#4,obRender(a0)
000126A6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000126AC 7000                       		moveq	#0,d0
000126AE 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126B2 E648                       		lsr.w	#3,d0
000126B4 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126B8 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126BC 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126C0 1152 0016                  		move.b	(a2),obHeight(a0)
000126C4 E248                       		lsr.w	#1,d0
000126C6 1140 001A                  		move.b	d0,obFrame(a0)
000126CA 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126D0 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126D6 7000                       		moveq	#0,d0
000126D8 1012                       		move.b	(a2),d0
000126DA D040                       		add.w	d0,d0
000126DC 3140 003A                  		move.w	d0,fb_height(a0)
000126E0 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126E6 6600                       			bne.s	@dontdelete
000126E8 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126EE 6600                       			bne.s	@notatpos
000126F0 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126F4 6700                       			beq.s	@dontdelete
000126F6 4EF9 0000 F9C6             			jmp	(DeleteObject).l
000126FC                            	@notatpos:
000126FC 4228 0028                  			clr.b	obSubtype(a0)
00012700 4A38 F7CE                  			tst.b	($FFFFF7CE).w
00012704 6600                       			bne.s	@dontdelete
00012706 4EF9 0000 F9C6             			jmp	(DeleteObject).l
0001270C                            	@dontdelete:
0001270C 7000                       		moveq	#0,d0
0001270E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012714 6700                       		beq.s	@stillnotLZ
00012716 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001271A 0240 000F                  		andi.w	#$F,d0
0001271E 5140                       		subq.w	#8,d0
00012720 6500                       		bcs.s	@stillnotLZ
00012722 E548                       		lsl.w	#2,d0
00012724 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012728 45F2 0000                  		lea	(a2,d0.w),a2
0001272C 4A52                       		tst.w	(a2)
0001272E 6A00                       		bpl.s	@stillnotLZ
00012730 0868 0000 0022             		bchg	#0,obStatus(a0)
00012736                            
00012736                            	@stillnotLZ:
00012736 1028 0028                  		move.b	obSubtype(a0),d0
0001273A 6A00                       		bpl.s	FBlock_Action
0001273C 0200 000F                  		andi.b	#$F,d0
00012740 1140 003C                  		move.b	d0,fb_type(a0)
00012744 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001274A 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012750 6600                       		bne.s	@chkstate
00012752 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012758 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001275E                            
0001275E                            @chkstate:
0001275E 45F8 FC00                  		lea	(v_objstate).w,a2
00012762 7000                       		moveq	#0,d0
00012764 1028 0023                  		move.b	obRespawnNo(a0),d0
00012768 6700                       		beq.s	FBlock_Action
0001276A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012770 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012776 6700                       		beq.s	FBlock_Action
00012778 5228 0028                  		addq.b	#1,obSubtype(a0)
0001277C 4268 003A                  		clr.w	fb_height(a0)
00012780                            
00012780                            FBlock_Action:	; Routine 2
00012780 3F28 0008                  		move.w	obX(a0),-(sp)
00012784 7000                       		moveq	#0,d0
00012786 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001278A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001278E D040                       		add.w	d0,d0
00012790 323B 0000                  		move.w	@index(pc,d0.w),d1
00012794 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012798 381F                       		move.w	(sp)+,d4
0001279A 4A28 0001                  		tst.b	obRender(a0)
0001279E 6A00                       		bpl.s	@chkdel
000127A0 7200                       		moveq	#0,d1
000127A2 1228 0014                  		move.b	obActWid(a0),d1
000127A6 0641 000B                  		addi.w	#$B,d1
000127AA 7400                       		moveq	#0,d2
000127AC 1428 0016                  		move.b	obHeight(a0),d2
000127B0 3602                       		move.w	d2,d3
000127B2 5243                       		addq.w	#1,d3
000127B4 6100 F5DE                  		bsr.w	SolidObject
000127B8                            
000127B8                            	@chkdel:
000127D4                            		@display:
000127D4 6000 D1B0                  			bra.w	DisplaySprite
000127D8                            		@chkdel2:
000127D8 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127DE 6600                       			bne.s	@delete
000127E0 4A28 0038                  			tst.b	$38(a0)
000127E4 66EE                       			bne.s	@display
000127E6                            		@delete:
000127E6 4EF9 0000 F9C6             			jmp	(DeleteObject).l
000127EC                            ; ===========================================================================
000127EC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127F0 0000 0000                  		dc.w @type02-@index, @type03-@index
000127F4 0000 0000                  		dc.w @type04-@index, @type05-@index
000127F8 0000 0000                  		dc.w @type06-@index, @type07-@index
000127FC 0000 0000                  		dc.w @type08-@index, @type09-@index
00012800 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00012804 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012808                            ; ===========================================================================
00012808                            
00012808                            @type00:
00012808                            ; doesn't move
00012808 4E75                       		rts	
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            @type01:
0001280A                            ; moves side-to-side
0001280A 323C 0040                  		move.w	#$40,d1		; set move distance
0001280E 7000                       		moveq	#0,d0
00012810 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012814 6000                       		bra.s	@moveLR
00012816                            ; ===========================================================================
00012816                            
00012816                            @type02:
00012816                            ; moves side-to-side
00012816 323C 0080                  		move.w	#$80,d1		; set move distance
0001281A 7000                       		moveq	#0,d0
0001281C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012820                            
00012820                            	@moveLR:
00012820 0828 0000 0022             		btst	#0,obStatus(a0)
00012826 6700                       		beq.s	@noflip
00012828 4440                       		neg.w	d0
0001282A D041                       		add.w	d1,d0
0001282C                            
0001282C                            	@noflip:
0001282C 3228 0034                  		move.w	fb_origX(a0),d1
00012830 9240                       		sub.w	d0,d1
00012832 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012836 4E75                       		rts	
00012838                            ; ===========================================================================
00012838                            
00012838                            @type03:
00012838                            ; moves up/down
00012838 323C 0040                  		move.w	#$40,d1		; set move distance
0001283C 7000                       		moveq	#0,d0
0001283E 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012842 6000                       		bra.s	@moveUD
00012844                            ; ===========================================================================
00012844                            
00012844                            @type04:
00012844                            ; moves up/down
00012844 323C 0080                  		move.w	#$80,d1		; set move distance
00012848 7000                       		moveq	#0,d0
0001284A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001284E                            
0001284E                            	@moveUD:
0001284E 0828 0000 0022             		btst	#0,obStatus(a0)
00012854 6700                       		beq.s	@noflip04
00012856 4440                       		neg.w	d0
00012858 D041                       		add.w	d1,d0
0001285A                            
0001285A                            	@noflip04:
0001285A 3228 0030                  		move.w	fb_origY(a0),d1
0001285E 9240                       		sub.w	d0,d1
00012860 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012864 4E75                       		rts	
00012866                            ; ===========================================================================
00012866                            
00012866                            @type05:
00012866                            ; moves up when a switch is pressed
00012866 4A28 0038                  		tst.b	$38(a0)
0001286A 6600                       		bne.s	@loc_104A4
0001286C 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012872 6600                       		bne.s	@aaa		; if not, branch
00012874 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001287A 6600                       		bne.s	@aaa
0001287C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012880 3038 D008                  		move.w	(v_player+obX).w,d0
00012884 B068 0008                  		cmp.w	obX(a0),d0
00012888 6400                       		bcc.s	@aaa
0001288A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012890                            
00012890                            	@aaa:
00012890 45F8 F7E0                  		lea	(f_switch).w,a2
00012894 7000                       		moveq	#0,d0
00012896 1028 003C                  		move.b	fb_type(a0),d0
0001289A 0832 0000 0000             		btst	#0,(a2,d0.w)
000128A0 6700                       		beq.s	@loc_104AE
000128A2 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000128A8 6600                       		bne.s	@loc_1049E	; if not, branch
000128AA 0C00 0003                  		cmpi.b	#3,d0
000128AE 6600                       		bne.s	@loc_1049E
000128B0 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128B4                            
000128B4                            @loc_1049E:
000128B4 117C 0001 0038             		move.b	#1,$38(a0)
000128BA                            
000128BA                            @loc_104A4:
000128BA 4A68 003A                  		tst.w	fb_height(a0)
000128BE 6700                       		beq.s	@loc_104C8
000128C0 5568 003A                  		subq.w	#2,fb_height(a0)
000128C4                            
000128C4                            @loc_104AE:
000128C4 3028 003A                  		move.w	fb_height(a0),d0
000128C8 0828 0000 0022             		btst	#0,$22(a0)
000128CE 6700                       		beq.s	@loc_104BC
000128D0 4440                       		neg.w	d0
000128D2                            
000128D2                            @loc_104BC:
000128D2 3228 0030                  		move.w	fb_origY(a0),d1
000128D6 D240                       		add.w	d0,d1
000128D8 3141 000C                  		move.w	d1,obY(a0)
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            @loc_104C8:
000128DE 5228 0028                  		addq.b	#1,$28(a0)
000128E2 4228 0038                  		clr.b	$38(a0)
000128E6 45F8 FC00                  		lea	(v_objstate).w,a2
000128EA 7000                       		moveq	#0,d0
000128EC 1028 0023                  		move.b	obRespawnNo(a0),d0
000128F0 67D2                       		beq.s	@loc_104AE
000128F2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128F8 60CA                       		bra.s	@loc_104AE
000128FA                            ; ===========================================================================
000128FA                            
000128FA                            @type06:
000128FA 4A28 0038                  		tst.b	$38(a0)
000128FE 6600                       		bne.s	@loc_10500
00012900 45F8 F7E0                  		lea	(f_switch).w,a2
00012904 7000                       		moveq	#0,d0
00012906 1028 003C                  		move.b	fb_type(a0),d0
0001290A 4A32 0000                  		tst.b	(a2,d0.w)
0001290E 6A00                       		bpl.s	@loc_10512
00012910 117C 0001 0038             		move.b	#1,$38(a0)
00012916                            
00012916                            @loc_10500:
00012916 7000                       		moveq	#0,d0
00012918 1028 0016                  		move.b	obHeight(a0),d0
0001291C D040                       		add.w	d0,d0
0001291E B068 003A                  		cmp.w	fb_height(a0),d0
00012922 6700                       		beq.s	@loc_1052C
00012924 5468 003A                  		addq.w	#2,fb_height(a0)
00012928                            
00012928                            @loc_10512:
00012928 3028 003A                  		move.w	fb_height(a0),d0
0001292C 0828 0000 0022             		btst	#0,obStatus(a0)
00012932 6700                       		beq.s	@loc_10520
00012934 4440                       		neg.w	d0
00012936                            
00012936                            @loc_10520:
00012936 3228 0030                  		move.w	fb_origY(a0),d1
0001293A D240                       		add.w	d0,d1
0001293C 3141 000C                  		move.w	d1,obY(a0)
00012940 4E75                       		rts	
00012942                            ; ===========================================================================
00012942                            
00012942                            @loc_1052C:
00012942 5328 0028                  		subq.b	#1,obSubtype(a0)
00012946 4228 0038                  		clr.b	$38(a0)
0001294A 45F8 FC00                  		lea	(v_objstate).w,a2
0001294E 7000                       		moveq	#0,d0
00012950 1028 0023                  		move.b	obRespawnNo(a0),d0
00012954 67D2                       		beq.s	@loc_10512
00012956 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001295C 60CA                       		bra.s	@loc_10512
0001295E                            ; ===========================================================================
0001295E                            
0001295E                            @type07:
0001295E 4A28 0038                  		tst.b	$38(a0)
00012962 6600                       		bne.s	@loc_1055E
00012964 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012968 6700                       		beq.s	@locret_10578
0001296A 117C 0001 0038             		move.b	#1,$38(a0)
00012970 4268 003A                  		clr.w	fb_height(a0)
00012974                            
00012974                            @loc_1055E:
00012974 5268 0008                  		addq.w	#1,obX(a0)
00012978 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001297E 5268 003A                  		addq.w	#1,fb_height(a0)
00012982 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012988 6600                       		bne.s	@locret_10578
0001298A 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012990 4228 0038                  			clr.b	$38(a0)
00012994 4228 0028                  		clr.b	obSubtype(a0)
00012998                            
00012998                            @locret_10578:
00012998 4E75                       		rts	
0001299A                            ; ===========================================================================
0001299A                            
0001299A                            @type0C:
0001299A 4A28 0038                  		tst.b	$38(a0)
0001299E 6600                       		bne.s	@loc_10598
000129A0 45F8 F7E0                  		lea	(f_switch).w,a2
000129A4 7000                       		moveq	#0,d0
000129A6 1028 003C                  		move.b	fb_type(a0),d0
000129AA 0832 0000 0000             		btst	#0,(a2,d0.w)
000129B0 6700                       		beq.s	@loc_105A2
000129B2 117C 0001 0038             		move.b	#1,$38(a0)
000129B8                            
000129B8                            @loc_10598:
000129B8 4A68 003A                  		tst.w	fb_height(a0)
000129BC 6700                       		beq.s	@loc_105C0
000129BE 5568 003A                  		subq.w	#2,fb_height(a0)
000129C2                            
000129C2                            @loc_105A2:
000129C2 3028 003A                  		move.w	fb_height(a0),d0
000129C6 0828 0000 0022             		btst	#0,obStatus(a0)
000129CC 6700                       		beq.s	@loc_105B4
000129CE 4440                       		neg.w	d0
000129D0 0640 0080                  		addi.w	#$80,d0
000129D4                            
000129D4                            @loc_105B4:
000129D4 3228 0034                  		move.w	fb_origX(a0),d1
000129D8 D240                       		add.w	d0,d1
000129DA 3141 0008                  		move.w	d1,obX(a0)
000129DE 4E75                       		rts	
000129E0                            ; ===========================================================================
000129E0                            
000129E0                            @loc_105C0:
000129E0 5228 0028                  		addq.b	#1,obSubtype(a0)
000129E4 4228 0038                  		clr.b	$38(a0)
000129E8 45F8 FC00                  		lea	(v_objstate).w,a2
000129EC 7000                       		moveq	#0,d0
000129EE 1028 0023                  		move.b	obRespawnNo(a0),d0
000129F2 67CE                       		beq.s	@loc_105A2
000129F4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129FA 60C6                       		bra.s	@loc_105A2
000129FC                            ; ===========================================================================
000129FC                            
000129FC                            @type0D:
000129FC 4A28 0038                  		tst.b	$38(a0)
00012A00 6600                       		bne.s	@loc_105F8
00012A02 45F8 F7E0                  		lea	(f_switch).w,a2
00012A06 7000                       		moveq	#0,d0
00012A08 1028 003C                  		move.b	fb_type(a0),d0
00012A0C 4A32 0000                  		tst.b	(a2,d0.w)
00012A10 6A00                       		bpl.s	@wtf
00012A12 117C 0001 0038             		move.b	#1,$38(a0)
00012A18                            
00012A18                            @loc_105F8:
00012A18 303C 0080                  		move.w	#$80,d0
00012A1C B068 003A                  		cmp.w	fb_height(a0),d0
00012A20 6700                       		beq.s	@loc_10624
00012A22 5468 003A                  		addq.w	#2,fb_height(a0)
00012A26                            
00012A26                            @wtf:
00012A26 3028 003A                  		move.w	fb_height(a0),d0
00012A2A 0828 0000 0022             		btst	#0,obStatus(a0)
00012A30 6700                       		beq.s	@loc_10618
00012A32 4440                       		neg.w	d0
00012A34 0640 0080                  		addi.w	#$80,d0
00012A38                            
00012A38                            @loc_10618:
00012A38 3228 0034                  		move.w	fb_origX(a0),d1
00012A3C D240                       		add.w	d0,d1
00012A3E 3141 0008                  		move.w	d1,obX(a0)
00012A42 4E75                       		rts	
00012A44                            ; ===========================================================================
00012A44                            
00012A44                            @loc_10624:
00012A44 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A48 4228 0038                  		clr.b	$38(a0)
00012A4C 45F8 FC00                  		lea	(v_objstate).w,a2
00012A50 7000                       		moveq	#0,d0
00012A52 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A56 67CE                       		beq.s	@wtf
00012A58 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A5E 60C6                       		bra.s	@wtf
00012A60                            ; ===========================================================================
00012A60                            
00012A60                            @type08:
00012A60 323C 0010                  		move.w	#$10,d1
00012A64 7000                       		moveq	#0,d0
00012A66 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A6A E248                       		lsr.w	#1,d0
00012A6C 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A70 6000                       		bra.s	@square
00012A72                            ; ===========================================================================
00012A72                            
00012A72                            @type09:
00012A72 323C 0030                  		move.w	#$30,d1
00012A76 7000                       		moveq	#0,d0
00012A78 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A7C 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A80 6000                       		bra.s	@square
00012A82                            ; ===========================================================================
00012A82                            
00012A82                            @type0A:
00012A82 323C 0050                  		move.w	#$50,d1
00012A86 7000                       		moveq	#0,d0
00012A88 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A8C 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A90 6000                       		bra.s	@square
00012A92                            ; ===========================================================================
00012A92                            
00012A92                            @type0B:
00012A92 323C 0070                  		move.w	#$70,d1
00012A96 7000                       		moveq	#0,d0
00012A98 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A9C 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012AA0                            
00012AA0                            @square:
00012AA0 4A43                       		tst.w	d3
00012AA2 6600                       		bne.s	@loc_1068E
00012AA4 5228 0022                  		addq.b	#1,obStatus(a0)
00012AA8 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012AAE                            
00012AAE                            @loc_1068E:
00012AAE 1428 0022                  		move.b	obStatus(a0),d2
00012AB2 0202 0003                  		andi.b	#3,d2
00012AB6 6600                       		bne.s	@loc_106AE
00012AB8 9041                       		sub.w	d1,d0
00012ABA D068 0034                  		add.w	fb_origX(a0),d0
00012ABE 3140 0008                  		move.w	d0,obX(a0)
00012AC2 4441                       		neg.w	d1
00012AC4 D268 0030                  		add.w	fb_origY(a0),d1
00012AC8 3141 000C                  		move.w	d1,obY(a0)
00012ACC 4E75                       		rts	
00012ACE                            ; ===========================================================================
00012ACE                            
00012ACE                            @loc_106AE:
00012ACE 5302                       		subq.b	#1,d2
00012AD0 6600                       		bne.s	@loc_106CC
00012AD2 5341                       		subq.w	#1,d1
00012AD4 9041                       		sub.w	d1,d0
00012AD6 4440                       		neg.w	d0
00012AD8 D068 0030                  		add.w	fb_origY(a0),d0
00012ADC 3140 000C                  		move.w	d0,obY(a0)
00012AE0 5241                       		addq.w	#1,d1
00012AE2 D268 0034                  		add.w	fb_origX(a0),d1
00012AE6 3141 0008                  		move.w	d1,obX(a0)
00012AEA 4E75                       		rts	
00012AEC                            ; ===========================================================================
00012AEC                            
00012AEC                            @loc_106CC:
00012AEC 5302                       		subq.b	#1,d2
00012AEE 6600                       		bne.s	@loc_106EA
00012AF0 5341                       		subq.w	#1,d1
00012AF2 9041                       		sub.w	d1,d0
00012AF4 4440                       		neg.w	d0
00012AF6 D068 0034                  		add.w	fb_origX(a0),d0
00012AFA 3140 0008                  		move.w	d0,obX(a0)
00012AFE 5241                       		addq.w	#1,d1
00012B00 D268 0030                  		add.w	fb_origY(a0),d1
00012B04 3141 000C                  		move.w	d1,obY(a0)
00012B08 4E75                       		rts	
00012B0A                            ; ===========================================================================
00012B0A                            
00012B0A                            @loc_106EA:
00012B0A 9041                       		sub.w	d1,d0
00012B0C D068 0030                  		add.w	fb_origY(a0),d0
00012B10 3140 000C                  		move.w	d0,obY(a0)
00012B14 4441                       		neg.w	d1
00012B16 D268 0034                  		add.w	fb_origX(a0),d1
00012B1A 3141 0008                  		move.w	d1,obX(a0)
00012B1E 4E75                       		rts	
00012B1E 4E75                       		rts	
00012B20                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B20                            ; ---------------------------------------------------------------------------
00012B20                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B20                            ; ---------------------------------------------------------------------------
00012B20                            Map_FBlock_internal:
00012B20 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B22 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B24 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B26 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B28 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B2A 0000                       		dc.w @slz-Map_FBlock_internal
00012B2C 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B2E 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B30 01                         @syz1x1:	dc.b 1
00012B31 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B36 04                         @syz2x2:	dc.b 4
00012B37 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B3C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B41 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B46 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B4B 02                         @syz1x2:	dc.b 2
00012B4C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B51 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B56 04                         @syzrect2x2:	dc.b 4
00012B57 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B5C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B61 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B66 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B6B 03                         @syzrect1x3:	dc.b 3
00012B6C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B71 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B76 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B7B 01                         @slz:		dc.b 1
00012B7C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B81 02                         @lzvert:	dc.b 2
00012B82 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B87 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B8C 04                         @lzhoriz:	dc.b 4
00012B8D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B92 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B97 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B9C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012BA2 00                         		even
00012BA2 00                         		even
00012BA2                            
00012BA2                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012BA2                            ; ---------------------------------------------------------------------------
00012BA2                            ; Object 57 - spiked balls (SYZ, LZ)
00012BA2                            ; ---------------------------------------------------------------------------
00012BA2                            
00012BA2                            SpikeBall:
00012BA2 7000                       		moveq	#0,d0
00012BA4 1028 0024                  		move.b	obRoutine(a0),d0
00012BA8 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012BAC 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BB0                            ; ===========================================================================
00012BB0 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BB2 0000                       		dc.w SBall_Move-SBall_Index
00012BB4 0000                       		dc.w SBall_Display-SBall_Index
00012BB6                            
00012BB6 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BB6                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BB6 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BB6 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BB6 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BB6 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BB6                            ; ===========================================================================
00012BB6                            
00012BB6                            SBall_Main:	; Routine 0
00012BB6 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BBA 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BC2 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BC8 117C 0004 0001             		move.b	#4,obRender(a0)
00012BCE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BD4 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BDA 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BE0 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BE6 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BEC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BF2 6600                       		bne.s	@notlz
00012BF4                            
00012BF4 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BFA 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012C00 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012C08                            
00012C08                            	@notlz:
00012C08 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C0C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C10 4881                       		ext.w	d1
00012C12 E741                       		asl.w	#3,d1		; multiply by 8
00012C14 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C18 1028 0022                  		move.b	obStatus(a0),d0
00012C1C E418                       		ror.b	#2,d0
00012C1E 0200 00C0                  		andi.b	#$C0,d0
00012C22 1140 0026                  		move.b	d0,obAngle(a0)
00012C26 45E8 0029                  		lea	sball_childs(a0),a2
00012C2A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C2E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C32 14FC 0000                  		move.b	#0,(a2)+
00012C36 3601                       		move.w	d1,d3
00012C38 E94B                       		lsl.w	#4,d3
00012C3A 1143 003C                  		move.b	d3,sball_radius(a0)
00012C3E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C40 6500                       		bcs.s	@fail
00012C42 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C48 6700                       		beq.s	@makechain
00012C4A 5341                       		subq.w	#1,d1
00012C4C 6500                       		bcs.s	@fail
00012C4E                            
00012C4E                            @makechain:
00012C4E 6100 D1C2                  		bsr.w	FindFreeObj
00012C52 6600                       		bne.s	@fail
00012C54 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C58 3A09                       		move.w	a1,d5		; get child object RAM address
00012C5A 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C5E EC4D                       		lsr.w	#6,d5		; divide by $40
00012C60 0245 007F                  		andi.w	#$7F,d5
00012C64 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C66 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C6C 1290                       		move.b	0(a0),0(a1)
00012C6E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C74 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C7A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C80 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C86 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C8C 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C92 0403 0010                  		subi.b	#$10,d3
00012C96 1343 003C                  		move.b	d3,sball_radius(a1)
00012C9A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CA0 6600                       		bne.s	@notlzagain
00012CA2                            
00012CA2 4A03                       		tst.b	d3
00012CA4 6600                       		bne.s	@notlzagain
00012CA6 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012CAC                            
00012CAC                            	@notlzagain:
00012CAC 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CB0                            
00012CB0                            	@fail:
00012CB0 3A08                       		move.w	a0,d5
00012CB2 0445 D000                  		subi.w	#$D000,d5
00012CB6 EC4D                       		lsr.w	#6,d5
00012CB8 0245 007F                  		andi.w	#$7F,d5
00012CBC 14C5                       		move.b	d5,(a2)+
00012CBE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CC4 6600                       		bne.s	SBall_Move
00012CC6                            
00012CC6 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CCC 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CD2                            
00012CD2                            SBall_Move:	; Routine 2
00012CD2 6100 0000                  		bsr.w	@movesub
00012CD6 6000 0000                  		bra.w	@chkdel
00012CDA                            ; ===========================================================================
00012CDA                            
00012CDA                            @movesub:
00012CDA 3028 003E                  		move.w	sball_speed(a0),d0
00012CDE D168 0026                  		add.w	d0,obAngle(a0)
00012CE2 1028 0026                  		move.b	obAngle(a0),d0
00012CE6 4EB9 0000 3A36             		jsr	(CalcSine).l
00012CEC 3428 0038                  		move.w	sball_origY(a0),d2
00012CF0 3628 003A                  		move.w	sball_origX(a0),d3
00012CF4 45E8 0029                  		lea	sball_childs(a0),a2
00012CF8 7C00                       		moveq	#0,d6
00012CFA 1C1A                       		move.b	(a2)+,d6
00012CFC                            
00012CFC                            	@loop:
00012CFC 7800                       		moveq	#0,d4
00012CFE 181A                       		move.b	(a2)+,d4
00012D00 ED4C                       		lsl.w	#6,d4
00012D02 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012D08 2244                       		movea.l	d4,a1
00012D0A 7800                       		moveq	#0,d4
00012D0C 1829 003C                  		move.b	sball_radius(a1),d4
00012D10 2A04                       		move.l	d4,d5
00012D12 C9C0                       		muls.w	d0,d4
00012D14 E084                       		asr.l	#8,d4
00012D16 CBC1                       		muls.w	d1,d5
00012D18 E085                       		asr.l	#8,d5
00012D1A D842                       		add.w	d2,d4
00012D1C DA43                       		add.w	d3,d5
00012D1E 3344 000C                  		move.w	d4,obY(a1)
00012D22 3345 0008                  		move.w	d5,obX(a1)
00012D26 51CE FFD4                  		dbf	d6,@loop
00012D2A 4E75                       		rts	
00012D2C                            ; ===========================================================================
00012D2C                            
00012D2C                            @chkdel:
00012D4A 6000 CC3A                  		bra.w	DisplaySprite
00012D4E                            ; ===========================================================================
00012D4E                            
00012D4E                            @delete:
00012D4E 7400                       		moveq	#0,d2
00012D50 45E8 0029                  		lea	sball_childs(a0),a2
00012D54 141A                       		move.b	(a2)+,d2
00012D56                            
00012D56                            	@deleteloop:
00012D56 7000                       		moveq	#0,d0
00012D58 101A                       		move.b	(a2)+,d0
00012D5A ED48                       		lsl.w	#6,d0
00012D5C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D62 2240                       		movea.l	d0,a1
00012D64 6100 CC62                  		bsr.w	DeleteChild
00012D68 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D6C                            
00012D6C 4E75                       		rts	
00012D6E                            ; ===========================================================================
00012D6E                            
00012D6E                            SBall_Display:	; Routine 4
00012D6E 6000 CC16                  		bra.w	DisplaySprite
00012D6E 6000 CC16                  		bra.w	DisplaySprite
00012D72                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D72                            ; ---------------------------------------------------------------------------
00012D72                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D72                            ; ---------------------------------------------------------------------------
00012D72                            Map_SBall_internal:
00012D72 0000                       		dc.w @0-Map_SBall_internal
00012D74 01                         @0:		dc.b 1
00012D75 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D7A                            		even
00012D7A                            		even
00012D7A                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D7A                            ; ---------------------------------------------------------------------------
00012D7A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D7A                            ; ---------------------------------------------------------------------------
00012D7A                            Map_SBall2_internal:
00012D7A 0000                       		dc.w @chain-Map_SBall2_internal
00012D7C 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D7E 0000                       		dc.w @base-Map_SBall2_internal
00012D80 01                         @chain:		dc.b 1
00012D81 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D86 01                         @spikeball:	dc.b 1
00012D87 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D8C 01                         @base:		dc.b 1
00012D8D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D92                            		even
00012D92                            		even
00012D92                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D92                            ; ---------------------------------------------------------------------------
00012D92                            ; Object 58 - giant spiked balls (SYZ)
00012D92                            ; ---------------------------------------------------------------------------
00012D92                            
00012D92                            BigSpikeBall:
00012D92 7000                       		moveq	#0,d0
00012D94 1028 0024                  		move.b	obRoutine(a0),d0
00012D98 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D9C 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012DA0                            ; ===========================================================================
00012DA0 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012DA2 0000                       		dc.w BBall_Move-BBall_Index
00012DA4                            
00012DA4 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012DA4 =00000038                  bball_origY:	equ $38		; original y-axis position
00012DA4 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012DA4 =0000003E                  bball_speed:	equ $3E		; speed
00012DA4                            ; ===========================================================================
00012DA4                            
00012DA4                            BBall_Main:	; Routine 0
00012DA4 5428 0024                  		addq.b	#2,obRoutine(a0)
00012DA8 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DB0 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DB6 117C 0004 0001             		move.b	#4,obRender(a0)
00012DBC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DC2 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DC8 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DCE 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DD4 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DDA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DDE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DE2 4881                       		ext.w	d1
00012DE4 E741                       		asl.w	#3,d1		; multiply by 8
00012DE6 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DEA 1028 0022                  		move.b	obStatus(a0),d0
00012DEE E418                       		ror.b	#2,d0
00012DF0 0200 00C0                  		andi.b	#$C0,d0
00012DF4 1140 0026                  		move.b	d0,obAngle(a0)
00012DF8 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012DFE                            
00012DFE                            BBall_Move:	; Routine 2
00012DFE 7000                       		moveq	#0,d0
00012E00 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012E04 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012E08 D040                       		add.w	d0,d0
00012E0A 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E0E 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E30 6000 CB54                  		bra.w	DisplaySprite
00012E34                            ; ===========================================================================
00012E34 0000                       @index:		dc.w @type00-@index
00012E36 0000                       		dc.w @type01-@index
00012E38 0000                       		dc.w @type02-@index
00012E3A 0000                       		dc.w @type03-@index
00012E3C                            ; ===========================================================================
00012E3C                            
00012E3C                            @type00:
00012E3C 4E75                       		rts	
00012E3E                            ; ===========================================================================
00012E3E                            
00012E3E                            @type01:
00012E3E 323C 0060                  		move.w	#$60,d1
00012E42 7000                       		moveq	#0,d0
00012E44 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E48 0828 0000 0022             		btst	#0,obStatus(a0)
00012E4E 6700                       		beq.s	@noflip1
00012E50 4440                       		neg.w	d0
00012E52 D041                       		add.w	d1,d0
00012E54                            
00012E54                            	@noflip1:
00012E54 3228 003A                  		move.w	bball_origX(a0),d1
00012E58 9240                       		sub.w	d0,d1
00012E5A 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E5E 4E75                       		rts	
00012E60                            ; ===========================================================================
00012E60                            
00012E60                            @type02:
00012E60 323C 0060                  		move.w	#$60,d1
00012E64 7000                       		moveq	#0,d0
00012E66 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E6A 0828 0000 0022             		btst	#0,obStatus(a0)
00012E70 6700                       		beq.s	@noflip2
00012E72 4440                       		neg.w	d0
00012E74 0640 0080                  		addi.w	#$80,d0
00012E78                            
00012E78                            	@noflip2:
00012E78 3228 0038                  		move.w	bball_origY(a0),d1
00012E7C 9240                       		sub.w	d0,d1
00012E7E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E82 4E75                       		rts	
00012E84                            ; ===========================================================================
00012E84                            
00012E84                            @type03:
00012E84 3028 003E                  		move.w	bball_speed(a0),d0
00012E88 D168 0026                  		add.w	d0,obAngle(a0)
00012E8C 1028 0026                  		move.b	obAngle(a0),d0
00012E90 4EB9 0000 3A36             		jsr	(CalcSine).l
00012E96 3428 0038                  		move.w	bball_origY(a0),d2
00012E9A 3628 003A                  		move.w	bball_origX(a0),d3
00012E9E 7800                       		moveq	#0,d4
00012EA0 1828 003C                  		move.b	bball_radius(a0),d4
00012EA4 2A04                       		move.l	d4,d5
00012EA6 C9C0                       		muls.w	d0,d4
00012EA8 E084                       		asr.l	#8,d4
00012EAA CBC1                       		muls.w	d1,d5
00012EAC E085                       		asr.l	#8,d5
00012EAE D842                       		add.w	d2,d4
00012EB0 DA43                       		add.w	d3,d5
00012EB2 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012EB6 3145 0008                  		move.w	d5,obX(a0)
00012EBA 4E75                       		rts	
00012EBA 4E75                       		rts	
00012EBC                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EBC                            ; --------------------------------------------------------------------------------
00012EBC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EBC                            ; --------------------------------------------------------------------------------
00012EBC                            
00012EBC                            SME_u_DKx:	
00012EBC 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EC0 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EC2 05                         SME_u_DKx_6:	dc.b 5	
00012EC3 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012EC8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012ECD F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012ED2 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012ED7 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012EDC 01                         SME_u_DKx_20:	dc.b 1	
00012EDD F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012EE2 02                         SME_u_DKx_26:	dc.b 2	
00012EE3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EE8 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EEE 00                         		even
00012EEE 00                         		even
00012EEE                            		include	"_incObj\59 SLZ Elevators.asm"
00012EEE                            ; ---------------------------------------------------------------------------
00012EEE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EEE                            ; ---------------------------------------------------------------------------
00012EEE                            
00012EEE                            Elevator:
00012EEE 7000                       		moveq	#0,d0
00012EF0 1028 0024                  		move.b	obRoutine(a0),d0
00012EF4 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EF8 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F1A 6000 CA6A                  		bra.w	DisplaySprite
00012F1E                            ; ===========================================================================
00012F1E 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F20 0000                       		dc.w Elev_Platform-Elev_Index
00012F22 0000                       		dc.w Elev_Action-Elev_Index
00012F24 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F26                            
00012F26 =00000032                  elev_origX:	equ $32		; original x-axis position
00012F26 =00000030                  elev_origY:	equ $30		; original y-axis position
00012F26 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F26                            
00012F26 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F28                            
00012F28 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F2A 2001                       		dc.b $20, 1
00012F2C 3401                       		dc.b $34, 1
00012F2E 1003                       		dc.b $10, 3
00012F30 2003                       		dc.b $20, 3
00012F32 3403                       		dc.b $34, 3
00012F34 1401                       		dc.b $14, 1
00012F36 2401                       		dc.b $24, 1
00012F38 2C01                       		dc.b $2C, 1
00012F3A 1403                       		dc.b $14, 3
00012F3C 2403                       		dc.b $24, 3
00012F3E 2C03                       		dc.b $2C, 3
00012F40 2005                       		dc.b $20, 5
00012F42 2007                       		dc.b $20, 7
00012F44 3009                       		dc.b $30, 9
00012F46                            ; ===========================================================================
00012F46                            
00012F46                            Elev_Main:	; Routine 0
00012F46 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F4A 7000                       		moveq	#0,d0
00012F4C 1028 0028                  		move.b	obSubtype(a0),d0
00012F50 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F52 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F56 0240 007F                  		andi.w	#$7F,d0
00012F5A C0FC 0006                  		mulu.w	#6,d0
00012F5E 3140 003C                  		move.w	d0,elev_dist(a0)
00012F62 3140 003E                  		move.w	d0,$3E(a0)
00012F66 588F                       		addq.l	#4,sp
00012F68 4E75                       		rts	
00012F6A                            ; ===========================================================================
00012F6A                            
00012F6A                            	@normal:
00012F6A E648                       		lsr.w	#3,d0
00012F6C 0240 001E                  		andi.w	#$1E,d0
00012F70 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F74 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F78 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F7C 7000                       		moveq	#0,d0
00012F7E 1028 0028                  		move.b	obSubtype(a0),d0
00012F82 D040                       		add.w	d0,d0
00012F84 0240 001E                  		andi.w	#$1E,d0
00012F88 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F8C 101A                       		move.b	(a2)+,d0
00012F8E E548                       		lsl.w	#2,d0
00012F90 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F94 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F98 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012FA0 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012FA6 117C 0004 0001             		move.b	#4,obRender(a0)
00012FAC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FB2 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FB8 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FBE                            
00012FBE                            Elev_Platform:	; Routine 2
00012FBE 7200                       		moveq	#0,d1
00012FC0 1228 0014                  		move.b	obActWid(a0),d1
00012FC4 4EB9 0000 9094             		jsr	(PlatformObject).l
00012FCA 6000 0000                  		bra.w	Elev_Types
00012FCE                            ; ===========================================================================
00012FCE                            
00012FCE                            Elev_Action:	; Routine 4
00012FCE 7200                       		moveq	#0,d1
00012FD0 1228 0014                  		move.b	obActWid(a0),d1
00012FD4 4EB9 0000 9208             		jsr	(ExitPlatform).l
00012FDA 3F28 0008                  		move.w	obX(a0),-(sp)
00012FDE 6100 0000                  		bsr.w	Elev_Types
00012FE2 341F                       		move.w	(sp)+,d2
00012FE4 4A10                       		tst.b	0(a0)
00012FE6 6700                       		beq.s	@deleted
00012FE8 4EF9 0000 9772             		jmp	(MvSonicOnPtfm2).l
00012FEE                            
00012FEE                            	@deleted:
00012FEE 4E75                       		rts	
00012FF0                            ; ===========================================================================
00012FF0                            
00012FF0                            Elev_Types:
00012FF0 7000                       		moveq	#0,d0
00012FF2 1028 0028                  		move.b	obSubtype(a0),d0
00012FF6 0240 000F                  		andi.w	#$F,d0
00012FFA D040                       		add.w	d0,d0
00012FFC 323B 0000                  		move.w	@index(pc,d0.w),d1
00013000 4EFB 1000                  		jmp	@index(pc,d1.w)
00013004                            ; ===========================================================================
00013004 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00013008 0000 0000                  		dc.w @type02-@index, @type01-@index
0001300C 0000 0000                  		dc.w @type04-@index, @type01-@index
00013010 0000 0000                  		dc.w @type06-@index, @type01-@index
00013014 0000 0000                  		dc.w @type08-@index, @type09-@index
00013018                            ; ===========================================================================
00013018                            
00013018                            @type00:
00013018 4E75                       		rts	
0001301A                            ; ===========================================================================
0001301A                            
0001301A                            @type01:
0001301A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013020 6600                       		bne.s	@notstanding
00013022 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00013026                            
00013026                            	@notstanding:
00013026 4E75                       		rts	
00013028                            ; ===========================================================================
00013028                            
00013028                            @type02:
00013028 6100 0000                  		bsr.w	Elev_Move
0001302C 3028 0034                  		move.w	$34(a0),d0
00013030 4440                       		neg.w	d0
00013032 D068 0030                  		add.w	elev_origY(a0),d0
00013036 3140 000C                  		move.w	d0,obY(a0)
0001303A 4E75                       		rts	
0001303C                            ; ===========================================================================
0001303C                            
0001303C                            @type04:
0001303C 6100 0000                  		bsr.w	Elev_Move
00013040 3028 0034                  		move.w	$34(a0),d0
00013044 D068 0030                  		add.w	elev_origY(a0),d0
00013048 3140 000C                  		move.w	d0,obY(a0)
0001304C 4E75                       		rts	
0001304E                            ; ===========================================================================
0001304E                            
0001304E                            @type06:
0001304E 6100 0000                  		bsr.w	Elev_Move
00013052 3028 0034                  		move.w	$34(a0),d0
00013056 E240                       		asr.w	#1,d0
00013058 4440                       		neg.w	d0
0001305A D068 0030                  		add.w	elev_origY(a0),d0
0001305E 3140 000C                  		move.w	d0,obY(a0)
00013062 3028 0034                  		move.w	$34(a0),d0
00013066 D068 0032                  		add.w	elev_origX(a0),d0
0001306A 3140 0008                  		move.w	d0,obX(a0)
0001306E 4E75                       		rts	
00013070                            ; ===========================================================================
00013070                            
00013070                            @type08:
00013070 6100 0000                  		bsr.w	Elev_Move
00013074 3028 0034                  		move.w	$34(a0),d0
00013078 E240                       		asr.w	#1,d0
0001307A D068 0030                  		add.w	elev_origY(a0),d0
0001307E 3140 000C                  		move.w	d0,obY(a0)
00013082 3028 0034                  		move.w	$34(a0),d0
00013086 4440                       		neg.w	d0
00013088 D068 0032                  		add.w	elev_origX(a0),d0
0001308C 3140 0008                  		move.w	d0,obX(a0)
00013090 4E75                       		rts	
00013092                            ; ===========================================================================
00013092                            
00013092                            @type09:
00013092 6100 0000                  		bsr.w	Elev_Move
00013096 3028 0034                  		move.w	$34(a0),d0
0001309A 4440                       		neg.w	d0
0001309C D068 0030                  		add.w	elev_origY(a0),d0
000130A0 3140 000C                  		move.w	d0,obY(a0)
000130A4 4A28 0028                  		tst.b	obSubtype(a0)
000130A8 6700 0000                  		beq.w	@typereset
000130AC 4E75                       		rts	
000130AE                            ; ===========================================================================
000130AE                            
000130AE                            	@typereset:
000130AE 0828 0003 0022             		btst	#3,obStatus(a0)
000130B4 6700                       		beq.s	@delete
000130B6 08E9 0001 0022             		bset	#1,obStatus(a1)
000130BC 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130C2 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130C8                            
000130C8                            	@delete:
000130C8 6000 C8FC                  		bra.w	DeleteObject
000130CC                            
000130CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130CC                            
000130CC                            
000130CC                            Elev_Move:
000130CC 3028 0038                  		move.w	$38(a0),d0
000130D0 4A28 003A                  		tst.b	$3A(a0)
000130D4 6600                       		bne.s	loc_10CC8
000130D6 0C40 0800                  		cmpi.w	#$800,d0
000130DA 6400                       		bcc.s	loc_10CD0
000130DC 0640 0010                  		addi.w	#$10,d0
000130E0 6000                       		bra.s	loc_10CD0
000130E2                            ; ===========================================================================
000130E2                            
000130E2                            loc_10CC8:
000130E2 4A40                       		tst.w	d0
000130E4 6700                       		beq.s	loc_10CD0
000130E6 0440 0010                  		subi.w	#$10,d0
000130EA                            
000130EA                            loc_10CD0:
000130EA 3140 0038                  		move.w	d0,$38(a0)
000130EE 48C0                       		ext.l	d0
000130F0 E180                       		asl.l	#8,d0
000130F2 D0A8 0034                  		add.l	$34(a0),d0
000130F6 2140 0034                  		move.l	d0,$34(a0)
000130FA 4840                       		swap	d0
000130FC 3428 003C                  		move.w	elev_dist(a0),d2
00013100 B042                       		cmp.w	d2,d0
00013102 6300                       		bls.s	loc_10CF0
00013104 117C 0001 003A             		move.b	#1,$3A(a0)
0001310A                            
0001310A                            loc_10CF0:
0001310A D442                       		add.w	d2,d2
0001310C B042                       		cmp.w	d2,d0
0001310E 6600                       		bne.s	locret_10CFA
00013110 4228 0028                  		clr.b	obSubtype(a0)
00013114                            
00013114                            locret_10CFA:
00013114 4E75                       		rts	
00013116                            ; End of function Elev_Move
00013116                            
00013116                            ; ===========================================================================
00013116                            
00013116                            Elev_MakeMulti:	; Routine 6
00013116 5368 003C                  		subq.w	#1,elev_dist(a0)
0001311A 6600                       		bne.s	@chkdel
0001311C 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013122 6100 CCEE                  		bsr.w	FindFreeObj
00013126 6600                       		bne.s	@chkdel
00013128 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
0001312C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013132 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013138 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001313E                            
0001313E                            @chkdel:
0001313E 588F                       		addq.l	#4,sp
0001315E 4E75                       		rts	
0001315E 4E75                       		rts	
00013160                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013160                            ; ---------------------------------------------------------------------------
00013160                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013160                            ; ---------------------------------------------------------------------------
00013160                            Map_Elev_internal:
00013160 0000                       		dc.w @elevator-Map_Elev_internal
00013162 03                         @elevator:	dc.b 3
00013163 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013168 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001316D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013172                            		even
00013172                            		even
00013172                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013172                            ; ---------------------------------------------------------------------------
00013172                            ; Object 5A - platforms	moving in circles (SLZ)
00013172                            ; ---------------------------------------------------------------------------
00013172                            
00013172                            CirclingPlatform:
00013172 7000                       		moveq	#0,d0
00013174 1028 0024                  		move.b	obRoutine(a0),d0
00013178 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001317C 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
0001319E 6000 C7E6                  		bra.w	DisplaySprite
000131A2                            ; ===========================================================================
000131A2 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
000131A4 0000                       		dc.w Circ_Platform-Circ_Index
000131A6 0000                       		dc.w Circ_Action-Circ_Index
000131A8                            
000131A8 =00000032                  circ_origX:	equ $32		; original x-axis position
000131A8 =00000030                  circ_origY:	equ $30		; original y-axis position
000131A8                            ; ===========================================================================
000131A8                            
000131A8                            Circ_Main:	; Routine 0
000131A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000131AC 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131B4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131BA 117C 0004 0001             		move.b	#4,obRender(a0)
000131C0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131C6 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131CC 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131D2 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131D8                            
000131D8                            Circ_Platform:	; Routine 2
000131D8 7200                       		moveq	#0,d1
000131DA 1228 0014                  		move.b	obActWid(a0),d1
000131DE 4EB9 0000 9094             		jsr	(PlatformObject).l
000131E4 6000 0000                  		bra.w	Circ_Types
000131E8                            ; ===========================================================================
000131E8                            
000131E8                            Circ_Action:	; Routine 4
000131E8 7200                       		moveq	#0,d1
000131EA 1228 0014                  		move.b	obActWid(a0),d1
000131EE 4EB9 0000 9208             		jsr	(ExitPlatform).l
000131F4 3F28 0008                  		move.w	obX(a0),-(sp)
000131F8 6100 0000                  		bsr.w	Circ_Types
000131FC 341F                       		move.w	(sp)+,d2
000131FE 4EF9 0000 9772             		jmp	(MvSonicOnPtfm2).l
00013204                            ; ===========================================================================
00013204                            
00013204                            Circ_Types:
00013204 7000                       		moveq	#0,d0
00013206 1028 0028                  		move.b	obSubtype(a0),d0
0001320A 0240 000C                  		andi.w	#$C,d0
0001320E E248                       		lsr.w	#1,d0
00013210 323B 0000                  		move.w	@index(pc,d0.w),d1
00013214 4EFB 1000                  		jmp	@index(pc,d1.w)
00013218                            ; ===========================================================================
00013218 0000                       @index:		dc.w @type00-@index
0001321A 0000                       		dc.w @type04-@index
0001321C                            ; ===========================================================================
0001321C                            
0001321C                            @type00:
0001321C 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013220 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00013224 4881                       		ext.w	d1
00013226 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001322A 0402 0050                  		subi.b	#$50,d2
0001322E 4882                       		ext.w	d2
00013230 0828 0000 0028             		btst	#0,obSubtype(a0)
00013236 6700                       		beq.s	@noshift00a
00013238 4441                       		neg.w	d1
0001323A 4442                       		neg.w	d2
0001323C                            
0001323C                            	@noshift00a:
0001323C 0828 0001 0028             		btst	#1,obSubtype(a0)
00013242 6700                       		beq.s	@noshift00b
00013244 4441                       		neg.w	d1
00013246 C342                       		exg	d1,d2
00013248                            
00013248                            	@noshift00b:
00013248 D268 0032                  		add.w	circ_origX(a0),d1
0001324C 3141 0008                  		move.w	d1,obX(a0)
00013250 D468 0030                  		add.w	circ_origY(a0),d2
00013254 3142 000C                  		move.w	d2,obY(a0)
00013258 4E75                       		rts	
0001325A                            ; ===========================================================================
0001325A                            
0001325A                            @type04:
0001325A 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001325E 0401 0050                  		subi.b	#$50,d1
00013262 4881                       		ext.w	d1
00013264 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013268 0402 0050                  		subi.b	#$50,d2
0001326C 4882                       		ext.w	d2
0001326E 0828 0000 0028             		btst	#0,obSubtype(a0)
00013274 6700                       		beq.s	@noshift04a
00013276 4441                       		neg.w	d1
00013278 4442                       		neg.w	d2
0001327A                            
0001327A                            	@noshift04a:
0001327A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013280 6700                       		beq.s	@noshift04b
00013282 4441                       		neg.w	d1
00013284 C342                       		exg	d1,d2
00013286                            
00013286                            	@noshift04b:
00013286 4441                       		neg.w	d1
00013288 D268 0032                  		add.w	circ_origX(a0),d1
0001328C 3141 0008                  		move.w	d1,obX(a0)
00013290 D468 0030                  		add.w	circ_origY(a0),d2
00013294 3142 000C                  		move.w	d2,obY(a0)
00013298 4E75                       		rts	
00013298 4E75                       		rts	
0001329A                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            Map_Circ_internal:
0001329A 0000                       		dc.w @platform-Map_Circ_internal
0001329C 02                         @platform:	dc.b 2
0001329D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000132A2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000132A8 00                         		even
000132A8 00                         		even
000132A8                            		include	"_incObj\5B Staircase.asm"
000132A8                            ; ---------------------------------------------------------------------------
000132A8                            ; Object 5B - blocks that form a staircase (SLZ)
000132A8                            ; ---------------------------------------------------------------------------
000132A8                            
000132A8                            Staircase:
000132A8 7000                       		moveq	#0,d0
000132AA 1028 0024                  		move.b	obRoutine(a0),d0
000132AE 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132B2 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132D4 6000 C6B0                  		bra.w	DisplaySprite
000132D8                            ; ===========================================================================
000132D8 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132DA 0000                       		dc.w Stair_Move-Stair_Index
000132DC 0000                       		dc.w Stair_Solid-Stair_Index
000132DE                            
000132DE =00000030                  stair_origX:	equ $30		; original x-axis position
000132DE =00000032                  stair_origY:	equ $32		; original y-axis position
000132DE                            
000132DE =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132DE                            ; ===========================================================================
000132DE                            
000132DE                            Stair_Main:	; Routine 0
000132DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000132E2 7638                       		moveq	#$38,d3
000132E4 7801                       		moveq	#1,d4
000132E6 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132EC 6700                       		beq.s	@notflipped	; if not, branch
000132EE 763B                       		moveq	#$3B,d3
000132F0 78FF                       		moveq	#-1,d4
000132F2                            
000132F2                            	@notflipped:
000132F2 3428 0008                  		move.w	obX(a0),d2
000132F6 2248                       		movea.l	a0,a1
000132F8 7203                       		moveq	#3,d1
000132FA 6000                       		bra.s	@makeblocks
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            @loop:
000132FC 6100 CB2A                  		bsr.w	FindNextFreeObj
00013300 6600 0000                  		bne.w	@fail
00013304 137C 0004 0024             		move.b	#4,obRoutine(a1)
0001330A                            
0001330A                            @makeblocks:
0001330A 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
0001330E 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00013316 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001331C 137C 0004 0001             		move.b	#4,obRender(a1)
00013322 337C 0180 0018             		move.w	#$180,obPriority(a1)
00013328 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001332E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00013334 3342 0008                  		move.w	d2,obX(a1)
00013338 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001333E 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013344 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
0001334A 0642 0020                  		addi.w	#$20,d2
0001334E 1343 0037                  		move.b	d3,$37(a1)
00013352 2348 003C                  		move.l	a0,stair_parent(a1)
00013356 D604                       		add.b	d4,d3
00013358 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001335C                            
0001335C                            	@fail:
0001335C                            
0001335C                            Stair_Move:	; Routine 2
0001335C 7000                       		moveq	#0,d0
0001335E 1028 0028                  		move.b	obSubtype(a0),d0
00013362 0240 0007                  		andi.w	#7,d0
00013366 D040                       		add.w	d0,d0
00013368 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001336C 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013370                            
00013370                            Stair_Solid:	; Routine 4
00013370 2468 003C                  		movea.l	stair_parent(a0),a2
00013374 7000                       		moveq	#0,d0
00013376 1028 0037                  		move.b	$37(a0),d0
0001337A 1032 0000                  		move.b	(a2,d0.w),d0
0001337E D068 0032                  		add.w	stair_origY(a0),d0
00013382 3140 000C                  		move.w	d0,obY(a0)
00013386 7200                       		moveq	#0,d1
00013388 1228 0014                  		move.b	obActWid(a0),d1
0001338C 0641 000B                  		addi.w	#$B,d1
00013390 343C 0010                  		move.w	#$10,d2
00013394 363C 0011                  		move.w	#$11,d3
00013398 3828 0008                  		move.w	obX(a0),d4
0001339C 6100 E9F6                  		bsr.w	SolidObject
000133A0 4A04                       		tst.b	d4
000133A2 6A00                       		bpl.s	loc_10F92
000133A4 1544 0036                  		move.b	d4,$36(a2)
000133A8                            
000133A8                            loc_10F92:
000133A8 0828 0003 0022             		btst	#3,obStatus(a0)
000133AE 6700                       		beq.s	locret_10FA0
000133B0 157C 0001 0036             		move.b	#1,$36(a2)
000133B6                            
000133B6                            locret_10FA0:
000133B6 4E75                       		rts	
000133B8                            ; ===========================================================================
000133B8 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133BA 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133BC 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133BE 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133C0                            ; ===========================================================================
000133C0                            
000133C0                            Stair_Type00:
000133C0 4A68 0034                  		tst.w	$34(a0)
000133C4 6600                       		bne.s	loc_10FC0
000133C6 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133CC 6600                       		bne.s	locret_10FBE
000133CE 317C 001E 0034             		move.w	#$1E,$34(a0)
000133D4                            
000133D4                            locret_10FBE:
000133D4 4E75                       		rts	
000133D6                            ; ===========================================================================
000133D6                            
000133D6                            loc_10FC0:
000133D6 5368 0034                  		subq.w	#1,$34(a0)
000133DA 66F8                       		bne.s	locret_10FBE
000133DC 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133E0 4E75                       		rts	
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            Stair_Type02:
000133E2 4A68 0034                  		tst.w	$34(a0)
000133E6 6600                       		bne.s	loc_10FE0
000133E8 4A28 0036                  		tst.b	$36(a0)
000133EC 6A00                       		bpl.s	locret_10FDE
000133EE 317C 003C 0034             		move.w	#$3C,$34(a0)
000133F4                            
000133F4                            locret_10FDE:
000133F4 4E75                       		rts	
000133F6                            ; ===========================================================================
000133F6                            
000133F6                            loc_10FE0:
000133F6 5368 0034                  		subq.w	#1,$34(a0)
000133FA 6600                       		bne.s	loc_10FEC
000133FC 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013400 4E75                       		rts	
00013402                            ; ===========================================================================
00013402                            
00013402                            loc_10FEC:
00013402 43E8 0038                  		lea	$38(a0),a1
00013406 3028 0034                  		move.w	$34(a0),d0
0001340A E408                       		lsr.b	#2,d0
0001340C 0200 0001                  		andi.b	#1,d0
00013410 12C0                       		move.b	d0,(a1)+
00013412 0A00 0001                  		eori.b	#1,d0
00013416 12C0                       		move.b	d0,(a1)+
00013418 0A00 0001                  		eori.b	#1,d0
0001341C 12C0                       		move.b	d0,(a1)+
0001341E 0A00 0001                  		eori.b	#1,d0
00013422 12C0                       		move.b	d0,(a1)+
00013424 4E75                       		rts	
00013426                            ; ===========================================================================
00013426                            
00013426                            Stair_Type01:
00013426 43E8 0038                  		lea	$38(a0),a1
0001342A 0C11 0080                  		cmpi.b	#$80,(a1)
0001342E 6700                       		beq.s	locret_11038
00013430 5211                       		addq.b	#1,(a1)
00013432 7200                       		moveq	#0,d1
00013434 1219                       		move.b	(a1)+,d1
00013436 4841                       		swap	d1
00013438 E289                       		lsr.l	#1,d1
0001343A 2401                       		move.l	d1,d2
0001343C E289                       		lsr.l	#1,d1
0001343E 2601                       		move.l	d1,d3
00013440 D682                       		add.l	d2,d3
00013442 4841                       		swap	d1
00013444 4842                       		swap	d2
00013446 4843                       		swap	d3
00013448 12C3                       		move.b	d3,(a1)+
0001344A 12C2                       		move.b	d2,(a1)+
0001344C 12C1                       		move.b	d1,(a1)+
0001344E                            
0001344E                            locret_11038:
0001344E 4E75                       		rts	
00013450 4E75                       		rts	
00013450 4E75                       		rts	
00013452                            Map_Stair:	include	"_maps\Staircase.asm"
00013452                            ; ---------------------------------------------------------------------------
00013452                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013452                            ; ---------------------------------------------------------------------------
00013452                            Map_Stair_internal:
00013452 0000                       		dc.w @block-Map_Stair_internal
00013454 01                         @block:		dc.b 1
00013455 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001345A                            		even
0001345A                            		even
0001345A                            		include	"_incObj\5C Pylon.asm"
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            ; Object 5C - metal pylons in foreground (SLZ)
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            
0001345A                            Pylon:
0001345A 7000                       		moveq	#0,d0
0001345C 1028 0024                  		move.b	obRoutine(a0),d0
00013460 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013464 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013468                            ; ===========================================================================
00013468 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001346A 0000                       		dc.w Pyl_Display-Pyl_Index
0001346C                            ; ===========================================================================
0001346C                            
0001346C                            Pyl_Main:	; Routine 0
0001346C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013470 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013478 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001347E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013484                            
00013484                            Pyl_Display:	; Routine 2
00013484 2238 F700                  		move.l	(v_screenposx).w,d1
00013488 D281                       		add.l	d1,d1
0001348A 4841                       		swap	d1
0001348C 4441                       		neg.w	d1
0001348E 3141 0008                  		move.w	d1,obX(a0)
00013492 2238 F704                  		move.l	(v_screenposy).w,d1
00013496 D281                       		add.l	d1,d1
00013498 4841                       		swap	d1
0001349A 0241 003F                  		andi.w	#$3F,d1
0001349E 4441                       		neg.w	d1
000134A0 0641 0100                  		addi.w	#$100,d1
000134A4 3141 000A                  		move.w	d1,obScreenY(a0)
000134A8 6000 C4DC                  		bra.w	DisplaySprite
000134A8 6000 C4DC                  		bra.w	DisplaySprite
000134AC                            Map_Pylon:	include	"_maps\Pylon.asm"
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            ; Sprite mappings - metal pylons in foreground (SLZ)
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            Map_Pylon_internal:
000134AC 0000                       		dc.w @pylon-Map_Pylon_internal
000134AE 09                         @pylon:		dc.b 9
000134AF 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134B4 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134B9 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134BE E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134C3 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134C8 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134CD 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134D2 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134D7 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134DC                            		even
000134DC                            		even
000134DC                            
000134DC                            		include	"_incObj\1B Water Surface.asm"
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            ; Object 1B - water surface (LZ)
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            
000134DC                            WaterSurface:
000134DC 7000                       		moveq	#0,d0
000134DE 1028 0024                  		move.b	obRoutine(a0),d0
000134E2 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134E6 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134EA                            ; ===========================================================================
000134EA 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134EC 0000                       		dc.w Surf_Action-Surf_Index
000134EE                            
000134EE =00000030                  surf_origX:	equ $30		; original x-axis position
000134EE =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134EE                            ; ===========================================================================
000134EE                            
000134EE                            Surf_Main:	; Routine 0
000134EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000134F2 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134FA 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013500 117C 0004 0001             		move.b	#4,obRender(a0)
00013506 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001350C 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013512                            
00013512                            Surf_Action:	; Routine 2
00013512 3238 F700                  		move.w	(v_screenposx).w,d1
00013516 0241 FFE0                  		andi.w	#$FFE0,d1
0001351A D268 0030                  		add.w	surf_origX(a0),d1
0001351E 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013524 6700                       		beq.s	@even		; branch on even frames
00013526 0641 0020                  		addi.w	#$20,d1
0001352A                            
0001352A                            	@even:
0001352A 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
0001352E 3238 F646                  		move.w	(v_waterpos1).w,d1
00013532 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00013536 4A28 0032                  		tst.b	surf_freeze(a0)
0001353A 6600                       		bne.s	@stopped
0001353C 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013542 6700                       		beq.s	@animate	; if not, branch
00013544 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013548 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001354E 6000                       		bra.s	@display
00013550                            ; ===========================================================================
00013550                            
00013550                            @stopped:
00013550 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013554 6600                       		bne.s	@display	; if yes, branch
00013556 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001355C 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013560                            
00013560                            @animate:
00013560 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013564 6A00                       		bpl.s	@display
00013566 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001356C 5228 001A                  		addq.b	#1,obFrame(a0)
00013570 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013576 6500                       		bcs.s	@display
00013578 117C 0000 001A             		move.b	#0,obFrame(a0)
0001357E                            
0001357E                            @display:
0001357E 6000 C406                  		bra.w	DisplaySprite
0001357E 6000 C406                  		bra.w	DisplaySprite
00013582                            Map_Surf:	include	"_maps\Water Surface.asm"
00013582                            ; --------------------------------------------------------------------------------
00013582                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013582                            ; --------------------------------------------------------------------------------
00013582                            
00013582                            SME_LGSi8:	
00013582 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013586 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001358A 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001358E 03                         SME_LGSi8_C:	dc.b 3	
0001358F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013594 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013599 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001359E 03                         SME_LGSi8_1C:	dc.b 3	
0001359F F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135A4 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135A9 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135AE 03                         SME_LGSi8_2C:	dc.b 3	
000135AF F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135B4 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135B9 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135BE 06                         SME_LGSi8_3C:	dc.b 6	
000135BF F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135C4 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135C9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135CE F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135D3 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135D8 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135DD 06                         SME_LGSi8_5B:	dc.b 6	
000135DE F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135E3 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135E8 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135ED F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135F2 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135F7 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000135FC 06                         SME_LGSi8_7A:	dc.b 6	
000135FD F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013602 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
00013607 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
0001360C F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013611 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013616 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
0001361C 00                         		even
0001361C 00                         		even
0001361C                            		include	"_incObj\0B Pole that Breaks.asm"
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            ; Object 0B - pole that	breaks (LZ)
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            
0001361C                            Pole:
0001361C 7000                       		moveq	#0,d0
0001361E 1028 0024                  		move.b	obRoutine(a0),d0
00013622 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
00013626 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001362A                            ; ===========================================================================
0001362A 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
0001362C 0000                       		dc.w Pole_Action-Pole_Index
0001362E 0000                       		dc.w Pole_Display-Pole_Index
00013630                            
00013630 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013630 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013630                            ; ===========================================================================
00013630                            
00013630                            Pole_Main:	; Routine 0
00013630 5428 0024                  		addq.b	#2,obRoutine(a0)
00013634 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
0001363C 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013642 117C 0004 0001             		move.b	#4,obRender(a0)
00013648 117C 0008 0014             		move.b	#8,obActWid(a0)
0001364E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013654 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001365A 7000                       		moveq	#0,d0
0001365C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013660 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013664 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013668                            
00013668                            Pole_Action:	; Routine 2
00013668 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001366C 6700                       		beq.s	@grab		; if not, branch
0001366E 4A68 0030                  		tst.w	pole_time(a0)
00013672 6700                       		beq.s	@moveup
00013674 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013678 6600                       		bne.s	@moveup
0001367A 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013680 6000                       		bra.s	@release
00013682                            ; ===========================================================================
00013682                            
00013682                            @moveup:
00013682 43F8 D000                  		lea	(v_player).w,a1
00013686 3028 000C                  		move.w	obY(a0),d0
0001368A 0440 0018                  		subi.w	#$18,d0
0001368E 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013694 6700                       		beq.s	@movedown	; if not, branch
00013696 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001369A B069 000C                  		cmp.w	obY(a1),d0
0001369E 6500                       		bcs.s	@movedown
000136A0 3340 000C                  		move.w	d0,obY(a1)
000136A4                            
000136A4                            @movedown:
000136A4 0640 0024                  		addi.w	#$24,d0
000136A8 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136AE 6700                       		beq.s	@letgo		; if not, branch
000136B0 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136B4 B069 000C                  		cmp.w	obY(a1),d0
000136B8 6400                       		bcc.s	@letgo
000136BA 3340 000C                  		move.w	d0,obY(a1)
000136BE                            
000136BE                            @letgo:
000136BE 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136C2 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136C6 6700                       		beq.s	Pole_Display	; if not, branch
000136C8                            
000136C8                            @release:
000136C8 4228 0020                  		clr.b	obColType(a0)
000136CC 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136D0 4238 F7C8                  		clr.b	(f_lockmulti).w
000136D4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136D8 4228 0032                  		clr.b	pole_grabbed(a0)
000136DC 6000                       		bra.s	Pole_Display
000136DE                            ; ===========================================================================
000136DE                            
000136DE                            @grab:
000136DE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136E2 6700                       		beq.s	Pole_Display	; if not, branch
000136E4 43F8 D000                  		lea	(v_player).w,a1
000136E8 3028 0008                  		move.w	obX(a0),d0
000136EC 0640 0014                  		addi.w	#$14,d0
000136F0 B069 0008                  		cmp.w	obX(a1),d0
000136F4 6400                       		bcc.s	Pole_Display
000136F6 4228 0021                  		clr.b	obColProp(a0)
000136FA 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013700 6400                       		bcc.s	Pole_Display
00013702 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
00013706 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
0001370A 3028 0008                  		move.w	obX(a0),d0
0001370E 0640 0014                  		addi.w	#$14,d0
00013712 3340 0008                  		move.w	d0,obX(a1)
00013716 08A9 0000 0022             		bclr	#0,obStatus(a1)
0001371C 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013722 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013728 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
0001372E 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013734                            
00013734                            Pole_Display:	; Routine 4
00013734 6000 E1C6                  		bra.w	RememberState
00013734 6000 E1C6                  		bra.w	RememberState
00013738                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013738                            ; ---------------------------------------------------------------------------
00013738                            ; Sprite mappings - pole that breaks (LZ)
00013738                            ; ---------------------------------------------------------------------------
00013738                            Map_Pole_internal:
00013738 0000                       		dc.w @normal-Map_Pole_internal
0001373A 0000                       		dc.w @broken-Map_Pole_internal
0001373C 02                         @normal:	dc.b 2			; normal pole
0001373D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013742 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013747 04                         @broken:	dc.b 4			; broken pole
00013748 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001374D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013752 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013757 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001375C                            		even
0001375C                            		even
0001375C                            		include	"_incObj\0C Flapping Door.asm"
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            ; Object 0C - flapping door (LZ)
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            
0001375C                            FlapDoor:
0001375C 7000                       		moveq	#0,d0
0001375E 1028 0024                  		move.b	obRoutine(a0),d0
00013762 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013766 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001376A                            ; ===========================================================================
0001376A 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001376C 0000                       		dc.w Flap_OpenClose-Flap_Index
0001376E                            
0001376E =00000032                  flap_time:	equ $32		; time between opening/closing
0001376E =00000030                  flap_wait:	equ $30		; time until change
0001376E                            ; ===========================================================================
0001376E                            
0001376E                            Flap_Main:	; Routine 0
0001376E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013772 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001377A 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013780 0028 0004 0001             		ori.b	#4,obRender(a0)
00013786 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001378C 7000                       		moveq	#0,d0
0001378E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013792 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013796 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001379A                            
0001379A                            Flap_OpenClose:	; Routine 2
0001379A 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001379E 6A00                       		bpl.s	@wait		; if time remains, branch
000137A0 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000137A6 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000137AC 4A28 0001                  		tst.b	obRender(a0)
000137B0 6A00                       		bpl.s	@nosound
000137BC                            
000137BC                            	@wait:
000137BC                            	@nosound:
000137BC 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137C2 6100 926E                  		bsr.w	AnimateSprite
000137C6 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137CA 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137CE 6600                       		bne.s	@display	; if yes, branch
000137D0 3038 D008                  		move.w	(v_player+obX).w,d0
000137D4 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137D8 6400                       		bcc.s	@display	; if yes, branch
000137DA 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137E0 323C 0013                  		move.w	#$13,d1
000137E4 343C 0020                  		move.w	#$20,d2
000137E8 3602                       		move.w	d2,d3
000137EA 5243                       		addq.w	#1,d3
000137EC 3828 0008                  		move.w	obX(a0),d4
000137F0 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000137F4                            
000137F4                            	@display:
000137F4 6000 E106                  		bra.w	RememberState
000137F4 6000 E106                  		bra.w	RememberState
000137F8                            		include	"_anim\Flapping Door.asm"
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            ; Animation script - flapping door (LZ)
000137F8                            ; ---------------------------------------------------------------------------
000137F8 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137FA 0000                       		dc.w @closing-Ani_Flap
000137FC 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00013802 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013808                            		even
00013808                            		even
00013808                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013808                            ; ---------------------------------------------------------------------------
00013808                            ; Sprite mappings - flapping door (LZ)
00013808                            ; ---------------------------------------------------------------------------
00013808                            Map_Flap_internal:
00013808 0000                       		dc.w @closed-Map_Flap_internal
0001380A 0000                       		dc.w @halfway-Map_Flap_internal
0001380C 0000                       		dc.w @open-Map_Flap_internal
0001380E 02                         @closed:	dc.b 2
0001380F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013814 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013819 02                         @halfway:	dc.b 2
0001381A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001381F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013824 02                         @open:		dc.b 2
00013825 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001382A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013830 00                         		even
00013830 00                         		even
00013830                            
00013830                            		include	"_incObj\71 Invisible Barriers.asm"
00013830                            ; ---------------------------------------------------------------------------
00013830                            ; Object 71 - invisible	solid barriers
00013830                            ; ---------------------------------------------------------------------------
00013830                            
00013830                            Invisibarrier:
00013830 7000                       		moveq	#0,d0
00013832 1028 0024                  		move.b	obRoutine(a0),d0
00013836 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
0001383A 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
0001383E                            ; ===========================================================================
0001383E 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013840 0000                       		dc.w Invis_Solid-Invis_Index
00013842                            
00013842 =00000016                  invis_height:	equ $16		; height in pixels
00013842                            ; ===========================================================================
00013842                            
00013842                            Invis_Main:	; Routine 0
00013842 5428 0024                  		addq.b	#2,obRoutine(a0)
00013846 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001384E 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013854 0028 0004 0001             		ori.b	#4,obRender(a0)
0001385A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001385E 1200                       		move.b	d0,d1
00013860 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013864 0640 0010                  		addi.w	#$10,d0
00013868 E248                       		lsr.w	#1,d0
0001386A 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001386E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013872 5241                       		addq.w	#1,d1
00013874 E749                       		lsl.w	#3,d1
00013876 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001387A                            
0001387A                            Invis_Solid:	; Routine 2
0001387A 6100 C38A                  		bsr.w	ChkObjectVisible
0001387E 6600                       		bne.s	@chkdel
00013880 7200                       		moveq	#0,d1
00013882 1228 0014                  		move.b	obActWid(a0),d1
00013886 0641 000B                  		addi.w	#$B,d1
0001388A 7400                       		moveq	#0,d2
0001388C 1428 0016                  		move.b	invis_height(a0),d2
00013890 3602                       		move.w	d2,d3
00013892 5243                       		addq.w	#1,d3
00013894 3828 0008                  		move.w	obX(a0),d4
00013898 6100 E542                  		bsr.w	SolidObject71
0001389C                            
0001389C                            @chkdel:
000138B8 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138BC 6700                       		beq.s	@nodisplay	; if not, branch
000138BE 4EF9 0000 F986             		jmp	(DisplaySprite).l	; if yes, display the object
000138C4                            
000138C4                            	@nodisplay:
000138C4 4E75                       		rts	
000138C6                            
000138C6                            	@delete:
000138C6 4EF9 0000 F9C6             		jmp	(DeleteObject).l
000138C6 4EF9 0000 F9C6             		jmp	(DeleteObject).l
000138CC                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138CC                            ; --------------------------------------------------------------------------------
000138CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138CC                            ; --------------------------------------------------------------------------------
000138CC                            
000138CC                            SME_t60cE:	
000138CC 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138D0 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138D2 04                         SME_t60cE_6:	dc.b 4	
000138D3 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138D8 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138DD F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138E2 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138E7 04                         SME_t60cE_1B:	dc.b 4	
000138E8 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138ED E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138F2 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138F7 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000138FC 04                         SME_t60cE_30:	dc.b 4	
000138FD E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013902 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013907 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
0001390C 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013912 00                         		even
00013912 00                         		even
00013912                            
00013912                            		include	"_incObj\5D Fan.asm"
00013912                            ; ---------------------------------------------------------------------------
00013912                            ; Object 5D - fans (SLZ)
00013912                            ; ---------------------------------------------------------------------------
00013912                            
00013912                            Fan:
00013912 7000                       		moveq	#0,d0
00013914 1028 0024                  		move.b	obRoutine(a0),d0
00013918 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
0001391C 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013920                            ; ===========================================================================
00013920 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013922 0000                       		dc.w Fan_Delay-Fan_Index
00013924                            
00013924 =00000030                  fan_time:	equ $30		; time between switching on/off
00013924 =00000032                  fan_switch:	equ $32		; on/off switch
00013924                            ; ===========================================================================
00013924                            
00013924                            Fan_Main:	; Routine 0
00013924 5428 0024                  		addq.b	#2,obRoutine(a0)
00013928 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013930 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013936 0028 0004 0001             		ori.b	#4,obRender(a0)
0001393C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013942 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013948                            
00013948                            Fan_Delay:	; Routine 2
00013948 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001394E 6600                       		bne.s	@blow		; if yes, branch
00013950 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013954 6A00                       		bpl.s	@blow		; if time remains, branch
00013956 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001395C 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013962 6700                       		beq.s	@blow		; if fan is off, branch
00013964 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001396A                            
0001396A                            @blow:
0001396A 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001396E 6600 0000                  		bne.w	@chkdel		; if not, branch
00013972 43F8 D000                  		lea	(v_player).w,a1
00013976 3029 0008                  		move.w	obX(a1),d0
0001397A 9068 0008                  		sub.w	obX(a0),d0
0001397E 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013984 6600                       		bne.s	@chksonic	; if yes, branch
00013986 4440                       		neg.w	d0
00013988                            
00013988                            @chksonic:
00013988 0640 0050                  		addi.w	#$50,d0
0001398C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013990 6400                       		bcc.s	@animate	; if yes, branch
00013992 3229 000C                  		move.w	obY(a1),d1
00013996 0641 0060                  		addi.w	#$60,d1
0001399A 9268 000C                  		sub.w	obY(a0),d1
0001399E 6500                       		bcs.s	@animate	; branch if Sonic is too low
000139A0 0C41 0070                  		cmpi.w	#$70,d1
000139A4 6400                       		bcc.s	@animate	; branch if Sonic is too high
000139A6 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
000139AA 6400                       		bcc.s	@faraway	; if yes, branch
000139AC 4640                       		not.w	d0
000139AE D040                       		add.w	d0,d0
000139B0                            
000139B0                            	@faraway:
000139B0 0640 0060                  		addi.w	#$60,d0
000139B4 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139BA 6600                       		bne.s	@right		; if yes, branch
000139BC 4440                       		neg.w	d0
000139BE                            
000139BE                            	@right:
000139BE 4400                       		neg.b	d0
000139C0 E840                       		asr.w	#4,d0
000139C2 0828 0000 0028             		btst	#0,obSubtype(a0)
000139C8 6700                       		beq.s	@movesonic
000139CA 4440                       		neg.w	d0
000139CC                            
000139CC                            	@movesonic:
000139CC D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139D0                            
000139D0                            @animate:
000139D0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139D4 6A00                       		bpl.s	@chkdel
000139D6 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139DC 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139E0 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139E6 6500                       		bcs.s	@noreset
000139E8 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139EE                            
000139EE                            	@noreset:
000139EE 7000                       		moveq	#0,d0
000139F0 0828 0000 0028             		btst	#0,obSubtype(a0)
000139F6 6700                       		beq.s	@noflip
000139F8 7002                       		moveq	#2,d0
000139FA                            
000139FA                            	@noflip:
000139FA D028 001B                  		add.b	obAniFrame(a0),d0
000139FE 1140 001A                  		move.b	d0,obFrame(a0)
00013A02                            
00013A02                            @chkdel:
00013A02 6100 BF82                  		bsr.w	DisplaySprite
00013A24 4E75                       		rts	
00013A24 4E75                       		rts	
00013A26                            Map_Fan:	include	"_maps\Fan.asm"
00013A26                            ; ---------------------------------------------------------------------------
00013A26                            ; Sprite mappings - fans (SLZ)
00013A26                            ; ---------------------------------------------------------------------------
00013A26                            Map_Fan_internal:
00013A26 0000                       		dc.w @fan1-Map_Fan_internal
00013A28 0000                       		dc.w @fan2-Map_Fan_internal
00013A2A 0000                       		dc.w @fan3-Map_Fan_internal
00013A2C 0000                       		dc.w @fan2-Map_Fan_internal
00013A2E 0000                       		dc.w @fan1-Map_Fan_internal
00013A30 02                         @fan1:		dc.b 2
00013A31 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A36 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A3B 02                         @fan2:		dc.b 2
00013A3C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A41 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A46 02                         @fan3:		dc.b 2
00013A47 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A4C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A52 00                         		even
00013A52 00                         		even
00013A52                            		include	"_incObj\5E Seesaw.asm"
00013A52                            ; ---------------------------------------------------------------------------
00013A52                            ; Object 5E - seesaws (SLZ)
00013A52                            ; ---------------------------------------------------------------------------
00013A52                            
00013A52                            Seesaw:
00013A52 7000                       		moveq	#0,d0
00013A54 1028 0024                  		move.b	obRoutine(a0),d0
00013A58 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A5C 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A60 3028 0000                  		move.w	see_origX(a0),d0
00013A64 0240 FF80                  		andi.w	#$FF80,d0
00013A68 3238 F700                  		move.w	(v_screenposx).w,d1
00013A6C 0441 0080                  		subi.w	#$80,d1
00013A70 0241 FF80                  		andi.w	#$FF80,d1
00013A74 9041                       		sub.w	d1,d0
00013A76 6B00 BF4E                  		bmi.w	DeleteObject
00013A7A 0C40 0280                  		cmpi.w	#$280,d0
00013A7E 6200 BF46                  		bhi.w	DeleteObject
00013A82 6000 BF02                  		bra.w	DisplaySprite
00013A86                            ; ===========================================================================
00013A86 0000                       See_Index:	dc.w See_Main-See_Index
00013A88 0000                       		dc.w See_Slope-See_Index
00013A8A 0000                       		dc.w See_Slope2-See_Index
00013A8C 0000                       		dc.w See_Spikeball-See_Index
00013A8E 0000                       		dc.w See_MoveSpike-See_Index
00013A90 0000                       		dc.w See_SpikeFall-See_Index
00013A92                            
00013A92 =00000030                  see_origX:	equ $30		; original x-axis position
00013A92 =00000034                  see_origY:	equ $34		; original y-axis position
00013A92 =00000038                  see_speed:	equ $38		; speed of collision
00013A92 =0000003A                  see_frame:	equ $3A		; 
00013A92 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A92                            ; ===========================================================================
00013A92                            
00013A92                            See_Main:	; Routine 0
00013A92 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A96 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A9E 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013AA4 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AAA 117C 0004 0018             		move.b	#4,obPriority(a0)
00013AB0 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013AB6 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013ABC 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013AC0 6600                       		bne.s	@noball		; if not, branch
00013AC2                            
00013AC2 6100 C364                  		bsr.w	FindNextFreeObj
00013AC6 6600                       		bne.s	@noball
00013AC8 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013ACC 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013AD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013ADC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AE2 2348 003C                  		move.l	a0,see_parent(a1)
00013AE6                            
00013AE6                            	@noball:
00013AE6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AEC 6700                       		beq.s	@noflip		; if not, branch
00013AEE 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AF4                            
00013AF4                            	@noflip:
00013AF4 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AFA                            
00013AFA                            See_Slope:	; Routine 2
00013AFA 1228 003A                  		move.b	see_frame(a0),d1
00013AFE 6100 0000                  		bsr.w	See_ChgFrame
00013B02 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B08 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B0E 6700                       		beq.s	@notflat	; if not, branch
00013B10 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B16                            
00013B16                            	@notflat:
00013B16 43F8 D000                  		lea	(v_player).w,a1
00013B1A 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B20 323C 0030                  		move.w	#$30,d1
00013B24 4EB9 0000 9168             		jsr	(SlopeObject).l
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            See_Slope2:	; Routine 4
00013B2C 6100 0000                  		bsr.w	See_ChkSide
00013B30 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B36 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B3C 6700                       		beq.s	@notflat	; if not, branch
00013B3E 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B44                            
00013B44                            	@notflat:
00013B44 323C 0030                  		move.w	#$30,d1
00013B48 4EB9 0000 9208             		jsr	(ExitPlatform).l
00013B4E 323C 0030                  		move.w	#$30,d1
00013B52 3428 0008                  		move.w	obX(a0),d2
00013B56 4EB9 0000 A1A2             		jsr	(SlopeObject2).l
00013B5C 4E75                       		rts	
00013B5E                            ; ===========================================================================
00013B5E                            
00013B5E                            See_ChkSide:
00013B5E 7202                       		moveq	#2,d1
00013B60 43F8 D000                  		lea	(v_player).w,a1
00013B64 3028 0008                  		move.w	obX(a0),d0
00013B68 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B6C 6400                       		bcc.s	@leftside	; if yes, branch
00013B6E 4440                       		neg.w	d0
00013B70 7200                       		moveq	#0,d1
00013B72                            
00013B72                            	@leftside:
00013B72 0C40 0008                  		cmpi.w	#8,d0
00013B76 6400                       		bcc.s	See_ChgFrame
00013B78 7201                       		moveq	#1,d1
00013B7A                            
00013B7A                            See_ChgFrame:
00013B7A 1028 001A                  		move.b	obFrame(a0),d0
00013B7E B001                       		cmp.b	d1,d0		; does frame need to change?
00013B80 6700                       		beq.s	@noflip		; if not, branch
00013B82 6400                       		bcc.s	@loc_11772
00013B84 5400                       		addq.b	#2,d0
00013B86                            
00013B86                            	@loc_11772:
00013B86 5300                       		subq.b	#1,d0
00013B88 1140 001A                  		move.b	d0,obFrame(a0)
00013B8C 1141 003A                  		move.b	d1,see_frame(a0)
00013B90 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B96 0828 0001 001A             		btst	#1,obFrame(a0)
00013B9C 6700                       		beq.s	@noflip
00013B9E 08E8 0000 0001             		bset	#0,obRender(a0)
00013BA4                            
00013BA4                            	@noflip:
00013BA4 4E75                       		rts	
00013BA6                            ; ===========================================================================
00013BA6                            
00013BA6                            See_Spikeball:	; Routine 6
00013BA6 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BAA 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BB2 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BB8 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BBE 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BC4 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BCA 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BD0 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BD6 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BDC 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BE2 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BE8 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BEE 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BF0 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BF6 117C 0002 003A             		move.b	#2,see_frame(a0)
00013BFC                            
00013BFC                            See_MoveSpike:	; Routine 8
00013BFC 2268 003C                  		movea.l	see_parent(a0),a1
00013C00 7000                       		moveq	#0,d0
00013C02 1028 003A                  		move.b	see_frame(a0),d0
00013C06 9029 003A                  		sub.b	see_frame(a1),d0
00013C0A 6700                       		beq.s	loc_1183E
00013C0C 6400                       		bcc.s	loc_117FC
00013C0E 4400                       		neg.b	d0
00013C10                            
00013C10                            loc_117FC:
00013C10 323C F7E8                  		move.w	#-$818,d1
00013C14 343C FEEC                  		move.w	#-$114,d2
00013C18 0C00 0001                  		cmpi.b	#1,d0
00013C1C 6700                       		beq.s	loc_11822
00013C1E 323C F510                  		move.w	#-$AF0,d1
00013C22 343C FF34                  		move.w	#-$CC,d2
00013C26 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C2C 6D00                       		blt.s	loc_11822
00013C2E 323C F200                  		move.w	#-$E00,d1
00013C32 343C FF60                  		move.w	#-$A0,d2
00013C36                            
00013C36                            loc_11822:
00013C36 3141 0012                  		move.w	d1,obVelY(a0)
00013C3A 3142 0010                  		move.w	d2,obVelX(a0)
00013C3E 3028 0008                  		move.w	obX(a0),d0
00013C42 9068 0030                  		sub.w	see_origX(a0),d0
00013C46 6400                       		bcc.s	loc_11838
00013C48 4468 0010                  		neg.w	obVelX(a0)
00013C4C                            
00013C4C                            loc_11838:
00013C4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C50 6000                       		bra.s	See_SpikeFall
00013C52                            ; ===========================================================================
00013C52                            
00013C52                            loc_1183E:
00013C52 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C58 7000                       		moveq	#0,d0
00013C5A 1029 001A                  		move.b	obFrame(a1),d0
00013C5E 343C 0028                  		move.w	#$28,d2
00013C62 3228 0008                  		move.w	obX(a0),d1
00013C66 9268 0030                  		sub.w	see_origX(a0),d1
00013C6A 6400                       		bcc.s	loc_1185C
00013C6C 4442                       		neg.w	d2
00013C6E 5440                       		addq.w	#2,d0
00013C70                            
00013C70                            loc_1185C:
00013C70 D040                       		add.w	d0,d0
00013C72 3228 0034                  		move.w	see_origY(a0),d1
00013C76 D272 0000                  		add.w	(a2,d0.w),d1
00013C7A 3141 000C                  		move.w	d1,obY(a0)
00013C7E D468 0030                  		add.w	see_origX(a0),d2
00013C82 3142 0008                  		move.w	d2,obX(a0)
00013C86 4268 000E                  		clr.w	obY+2(a0)
00013C8A 4268 000A                  		clr.w	obX+2(a0)
00013C8E 4E75                       		rts	
00013C90                            ; ===========================================================================
00013C90                            
00013C90                            See_SpikeFall:	; Routine $A
00013C90 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C94 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C96 6100 BCA2                  		bsr.w	ObjectFall
00013C9A 3028 0034                  		move.w	see_origY(a0),d0
00013C9E 0440 002F                  		subi.w	#$2F,d0
00013CA2 B068 000C                  		cmp.w	obY(a0),d0
00013CA6 6E00                       		bgt.s	locret_11898
00013CA8 6100 BC90                  		bsr.w	ObjectFall
00013CAC                            
00013CAC                            locret_11898:
00013CAC 4E75                       		rts	
00013CAE                            ; ===========================================================================
00013CAE                            
00013CAE                            loc_1189A:
00013CAE 6100 BC8A                  		bsr.w	ObjectFall
00013CB2 2268 003C                  		movea.l	see_parent(a0),a1
00013CB6 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CBC 7000                       		moveq	#0,d0
00013CBE 1029 001A                  		move.b	obFrame(a1),d0
00013CC2 3228 0008                  		move.w	obX(a0),d1
00013CC6 9268 0030                  		sub.w	see_origX(a0),d1
00013CCA 6400                       		bcc.s	loc_118BA
00013CCC 5440                       		addq.w	#2,d0
00013CCE                            
00013CCE                            loc_118BA:
00013CCE D040                       		add.w	d0,d0
00013CD0 3228 0034                  		move.w	see_origY(a0),d1
00013CD4 D272 0000                  		add.w	(a2,d0.w),d1
00013CD8 B268 000C                  		cmp.w	obY(a0),d1
00013CDC 6E00                       		bgt.s	locret_11938
00013CDE 2268 003C                  		movea.l	see_parent(a0),a1
00013CE2 7202                       		moveq	#2,d1
00013CE4 4A68 0010                  		tst.w	obVelX(a0)
00013CE8 6B00                       		bmi.s	See_Spring
00013CEA 7200                       		moveq	#0,d1
00013CEC                            
00013CEC                            See_Spring:
00013CEC 1341 003A                  		move.b	d1,$3A(a1)
00013CF0 1141 003A                  		move.b	d1,see_frame(a0)
00013CF4 B229 001A                  		cmp.b	obFrame(a1),d1
00013CF8 6700                       		beq.s	loc_1192C
00013CFA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013D00 6700                       		beq.s	loc_1192C
00013D02 4229 0025                  		clr.b	ob2ndRout(a1)
00013D06 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013D0C 45F8 D000                  		lea	(v_player).w,a2
00013D10 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D16 446A 0012                  		neg.w	obVelY(a2)
00013D1A 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D20 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D26 422A 003C                  		clr.b	$3C(a2)
00013D2A 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D30 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D40                            
00013D40                            loc_1192C:
00013D40 4268 0010                  		clr.w	obVelX(a0)
00013D44 4268 0012                  		clr.w	obVelY(a0)
00013D48 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D4C                            
00013D4C                            locret_11938:
00013D4C 4E75                       		rts	
00013D4E                            ; ===========================================================================
00013D4E FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D58                            
00013D58                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D88                            		even
00013D88                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DB8                            		even
00013DB8                            		even
00013DB8                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DB8                            ; ---------------------------------------------------------------------------
00013DB8                            ; Sprite mappings - seesaws (SLZ)
00013DB8                            ; ---------------------------------------------------------------------------
00013DB8                            Map_Seesaw_internal:
00013DB8 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DBA 0000                       		dc.w @flat-Map_Seesaw_internal
00013DBC 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DBE 0000                       		dc.w @flat-Map_Seesaw_internal
00013DC0 07                         @sloping:	dc.b 7
00013DC1 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DC6 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DCB E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DD0 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DD5 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DDA F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DDF FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DE4 04                         @flat:		dc.b 4
00013DE5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DEA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DEF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DF4 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DFA 00                         		even
00013DFA 00                         		even
00013DFA                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DFA                            ; ---------------------------------------------------------------------------
00013DFA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DFA                            ; ---------------------------------------------------------------------------
00013DFA                            Map_SSawBall_internal:
00013DFA 0000                       		dc.w @red-Map_SSawBall_internal
00013DFC 0000                       		dc.w @silver-Map_SSawBall_internal
00013DFE 01                         @red:		dc.b 1
00013DFF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013E04 01                         @silver:	dc.b 1
00013E05 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013E0A                            		even
00013E0A                            		even
00013E0A                            		include	"_incObj\5F Bomb Enemy.asm"
00013E0A                            ; ---------------------------------------------------------------------------
00013E0A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013E0A                            ; ---------------------------------------------------------------------------
00013E0A                            
00013E0A                            Bomb:
00013E0A 7000                       		moveq	#0,d0
00013E0C 1028 0024                  		move.b	obRoutine(a0),d0
00013E10 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E14 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E18                            ; ===========================================================================
00013E18 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E1A 0000                       		dc.w Bom_Action-Bom_Index
00013E1C 0000                       		dc.w Bom_Display-Bom_Index
00013E1E 0000                       		dc.w Bom_End-Bom_Index
00013E20                            
00013E20 =00000030                  bom_time:	equ $30		; time of fuse
00013E20 =00000034                  bom_origY:	equ $34		; original y-axis position
00013E20 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E20                            ; ===========================================================================
00013E20                            
00013E20                            Bom_Main:	; Routine 0
00013E20 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E24 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E2C 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E32 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E38 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E3E 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E44 1028 0028                  		move.b	obSubtype(a0),d0
00013E48 6700                       		beq.s	loc_11A3C
00013E4A 1140 0024                  		move.b	d0,obRoutine(a0)
00013E4E 4E75                       		rts	
00013E50                            ; ===========================================================================
00013E50                            
00013E50                            loc_11A3C:
00013E50 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E56 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E5C                            
00013E5C                            Bom_Action:	; Routine 2
00013E5C 7000                       		moveq	#0,d0
00013E5E 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E62 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E66 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E6A 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E70 6100 8BC0                  		bsr.w	AnimateSprite
00013E74 6000 DA86                  		bra.w	RememberState
00013E78                            ; ===========================================================================
00013E78 0000                       @index:		dc.w @walk-@index
00013E7A 0000                       		dc.w @wait-@index
00013E7C 0000                       		dc.w @explode-@index
00013E7E                            ; ===========================================================================
00013E7E                            
00013E7E                            @walk:
00013E7E 6100 0000                  		bsr.w	@chksonic
00013E82 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E86 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E88 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E8C 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E92 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E98 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E9E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013EA4 6700                       		beq.s	@noflip
00013EA6 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013EAA                            
00013EAA                            	@noflip:
00013EAA 4E75                       		rts	
00013EAC                            ; ===========================================================================
00013EAC                            
00013EAC                            @wait:
00013EAC 6100 0000                  		bsr.w	@chksonic
00013EB0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EB4 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013EB6 6100 BABA                  		bsr.w	SpeedToPos
00013EBA 4E75                       		rts	
00013EBC                            ; ===========================================================================
00013EBC                            
00013EBC                            	@stopwalking:
00013EBC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EC0 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013EC6 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013ECA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013ED0 4E75                       		rts	
00013ED2                            ; ===========================================================================
00013ED2                            
00013ED2                            @explode:
00013ED2 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013ED6 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013ED8 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013EDC 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013EE2                            
00013EE2                            	@noexplode:
00013EE2 4E75                       		rts	
00013EE4                            ; ===========================================================================
00013EE4                            
00013EE4                            @chksonic:
00013EE4 3038 D008                  		move.w	(v_player+obX).w,d0
00013EE8 9068 0008                  		sub.w	obX(a0),d0
00013EEC 6400                       		bcc.s	@isleft
00013EEE 4440                       		neg.w	d0
00013EF0                            
00013EF0                            	@isleft:
00013EF0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EF4 6400                       		bcc.s	@outofrange	; if not, branch
00013EF6 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EFA 9068 000C                  		sub.w	obY(a0),d0
00013EFE 6400                       		bcc.s	@isabove
00013F00 4440                       		neg.w	d0
00013F02                            
00013F02                            	@isabove:
00013F02 0C40 0060                  		cmpi.w	#$60,d0
00013F06 6400                       		bcc.s	@outofrange
00013F08 4A78 FE08                  		tst.w	(v_debuguse).w
00013F0C 6600                       		bne.s	@outofrange
00013F0E                            
00013F0E 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F14 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F1A 4268 0010                  		clr.w	obVelX(a0)
00013F1E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F24 6100 BF02                  		bsr.w	FindNextFreeObj
00013F28 6600                       		bne.s	@outofrange
00013F2A 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F2E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F34 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F3A 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F40 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F46 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F4C 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F52 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F58 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F5E 6700                       		beq.s	@normal		; if not, branch
00013F60 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F64                            
00013F64                            	@normal:
00013F64 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F6A 2348 003C                  		move.l	a0,bom_parent(a1)
00013F6E                            
00013F6E                            @outofrange:
00013F6E 4E75                       		rts	
00013F70                            ; ===========================================================================
00013F70                            
00013F70                            Bom_Display:	; Routine 4
00013F70 6100                       		bsr.s	loc_11B70
00013F72 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F78 6100 8AB8                  		bsr.w	AnimateSprite
00013F7C 6000 D97E                  		bra.w	RememberState
00013F80                            ; ===========================================================================
00013F80                            
00013F80                            loc_11B70:
00013F80 5368 0030                  		subq.w	#1,bom_time(a0)
00013F84 6B00                       		bmi.s	loc_11B7C
00013F86 6100 B9EA                  		bsr.w	SpeedToPos
00013F8A 4E75                       		rts	
00013F8C                            ; ===========================================================================
00013F8C                            
00013F8C                            loc_11B7C:
00013F8C 4268 0030                  		clr.w	bom_time(a0)
00013F90 4228 0024                  		clr.b	obRoutine(a0)
00013F94 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F9A 7203                       		moveq	#3,d1
00013F9C 2248                       		movea.l	a0,a1
00013F9E 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013FA4 6000                       		bra.s	@makeshrapnel
00013FA6                            ; ===========================================================================
00013FA6                            
00013FA6                            	@loop:
00013FA6 6100 BE80                  		bsr.w	FindNextFreeObj
00013FAA 6600                       		bne.s	@fail
00013FAC                            
00013FAC                            @makeshrapnel:
00013FAC 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FBC 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FC2 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FC8 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FCC 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FD0 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FD6 08E9 0007 0001             		bset	#7,obRender(a1)
00013FDC                            
00013FDC                            	@fail:
00013FDC 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FE0                            
00013FE0 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FE6                            
00013FE6                            Bom_End:	; Routine 6
00013FE6 6100 B98A                  		bsr.w	SpeedToPos
00013FEA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FF0 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FF6 6100 8A3A                  		bsr.w	AnimateSprite
00013FFA 4A28 0001                  		tst.b	obRender(a0)
00013FFE 6A00 B9C6                  		bpl.w	DeleteObject
00014002 6000 B982                  		bra.w	DisplaySprite
00014006                            ; ===========================================================================
00014006 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00014006 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00014016                            		include	"_anim\Bomb Enemy.asm"
00014016                            ; ---------------------------------------------------------------------------
00014016                            ; Animation script - Bomb enemy
00014016                            ; ---------------------------------------------------------------------------
00014016 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00014018 0000                       		dc.w @walk-Ani_Bomb
0001401A 0000                       		dc.w @activated-Ani_Bomb
0001401C 0000                       		dc.w @fuse-Ani_Bomb
0001401E 0000                       		dc.w @shrapnel-Ani_Bomb
00014020 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00014024 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
0001402A 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
0001402E 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014032 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00014036                            		even
00014036                            		even
00014036                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00014036                            ; ---------------------------------------------------------------------------
00014036                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00014036                            ; ---------------------------------------------------------------------------
00014036                            Map_Bomb_internal:
00014036 0000                       		dc.w @stand1-Map_Bomb_internal
00014038 0000                       		dc.w @stand2-Map_Bomb_internal
0001403A 0000                       		dc.w @walk1-Map_Bomb_internal
0001403C 0000                       		dc.w @walk2-Map_Bomb_internal
0001403E 0000                       		dc.w @walk3-Map_Bomb_internal
00014040 0000                       		dc.w @walk4-Map_Bomb_internal
00014042 0000                       		dc.w @activate1-Map_Bomb_internal
00014044 0000                       		dc.w @activate2-Map_Bomb_internal
00014046 0000                       		dc.w @fuse1-Map_Bomb_internal
00014048 0000                       		dc.w @fuse2-Map_Bomb_internal
0001404A 0000                       		dc.w @shrapnel1-Map_Bomb_internal
0001404C 0000                       		dc.w @shrapnel2-Map_Bomb_internal
0001404E 03                         @stand1:	dc.b 3
0001404F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00014054 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014059 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001405E 03                         @stand2:	dc.b 3
0001405F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014064 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014069 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001406E 03                         @walk1:		dc.b 3
0001406F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00014074 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00014079 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001407E 03                         @walk2:		dc.b 3
0001407F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00014084 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00014089 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001408E 03                         @walk3:		dc.b 3
0001408F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00014094 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00014099 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001409E 03                         @walk4:		dc.b 3
0001409F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140A4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000140A9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140AE 02                         @activate1:	dc.b 2
000140AF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140B4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140B9 02                         @activate2:	dc.b 2
000140BA F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140BF 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140C4 01                         @fuse1:		dc.b 1
000140C5 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140CA 01                         @fuse2:		dc.b 1
000140CB E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140D0 01                         @shrapnel1:	dc.b 1
000140D1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140D6 01                         @shrapnel2:	dc.b 1
000140D7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140DC                            		even
000140DC                            		even
000140DC                            
000140DC                            		include	"_incObj\60 Orbinaut.asm"
000140DC                            ; ---------------------------------------------------------------------------
000140DC                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140DC                            ; ---------------------------------------------------------------------------
000140DC                            
000140DC                            Orbinaut:
000140DC 7000                       		moveq	#0,d0
000140DE 1028 0024                  		move.b	obRoutine(a0),d0
000140E2 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140E6 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140EA                            ; ===========================================================================
000140EA 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140EC 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140EE 0000                       		dc.w Orb_Display-Orb_Index
000140F0 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140F2 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140F4                            
000140F4 =0000003C                  orb_parent:	equ $3C		; address of parent object
000140F4                            ; ===========================================================================
000140F4                            
000140F4                            Orb_Main:	; Routine 0
000140F4 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000140FC 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00014102 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00014108 6700                       		beq.s	@isscrap
0001410A 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014110                            
00014110                            	@isscrap:
00014110 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00014116 6600                       		bne.s	@notlabyrinth
00014118 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
0001411E                            
0001411E                            	@notlabyrinth:
0001411E 0028 0004 0001             		ori.b	#4,obRender(a0)
00014124 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001412A 117C 000B 0020             		move.b	#$B,obColType(a0)
00014130 117C 000C 0014             		move.b	#$C,obActWid(a0)
00014136 7400                       		moveq	#0,d2
00014138 45E8 0037                  		lea	$37(a0),a2
0001413C 264A                       		movea.l	a2,a3
0001413E 524A                       		addq.w	#1,a2
00014140 7203                       		moveq	#3,d1
00014142                            
00014142                            @makesatellites:
00014142 6100 BCE4                  		bsr.w	FindNextFreeObj
00014146 6600                       		bne.s	@fail
00014148 5213                       		addq.b	#1,(a3)
0001414A 3A09                       		move.w	a1,d5
0001414C 0445 D000                  		subi.w	#$D000,d5
00014150 EC4D                       		lsr.w	#6,d5
00014152 0245 007F                  		andi.w	#$7F,d5
00014156 14C5                       		move.b	d5,(a2)+
00014158 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001415A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014160 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014166 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001416C 0029 0004 0001             		ori.b	#4,obRender(a1)
00014172 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014178 137C 0008 0014             		move.b	#8,obActWid(a1)
0001417E 137C 0003 001A             		move.b	#3,obFrame(a1)
00014184 137C 0098 0020             		move.b	#$98,obColType(a1)
0001418A 1342 0026                  		move.b	d2,obAngle(a1)
0001418E 0602 0040                  		addi.b	#$40,d2
00014192 2348 003C                  		move.l	a0,orb_parent(a1)
00014196 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001419A                            
0001419A                            	@fail:
0001419A 7001                       		moveq	#1,d0
0001419C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
000141A2 6700                       		beq.s	@noflip		; if not, branch
000141A4 4440                       		neg.w	d0
000141A6                            
000141A6                            	@noflip:
000141A6 1140 0036                  		move.b	d0,$36(a0)
000141AA 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000141B4 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141BA 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141C0 6700                       		beq.s	@noflip2	; if not, branch
000141C2 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141C6                            
000141C6                            	@noflip2:
000141C6 4E75                       		rts	
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            Orb_ChkSonic:	; Routine 2
000141C8 3038 D008                  		move.w	(v_player+obX).w,d0
000141CC 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141D0 6400                       		bcc.s	@isright	; if yes, branch
000141D2 4440                       		neg.w	d0
000141D4                            
000141D4                            	@isright:
000141D4 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141D8 6400                       		bcc.s	@animate	; if not, branch
000141DA 3038 D00C                  		move.w	(v_player+obY).w,d0
000141DE 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141E2 6400                       		bcc.s	@isabove	; if yes, branch
000141E4 4440                       		neg.w	d0
000141E6                            
000141E6                            	@isabove:
000141E6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141EA 6400                       		bcc.s	@animate	; if not, branch
000141EC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141F0 6600                       		bne.s	@animate	; if yes, branch
000141F2 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141F8                            
000141F8                            @animate:
000141F8 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000141FE 6100 8832                  		bsr.w	AnimateSprite
00014202 6000 0000                  		bra.w	Orb_ChkDel
00014206                            ; ===========================================================================
00014206                            
00014206                            Orb_Display:	; Routine 4
00014206 6100 B76A                  		bsr.w	SpeedToPos
0001420A                            
0001420A                            Orb_ChkDel:
00014228 6000 B75C                  		bra.w	DisplaySprite
0001422C                            
0001422C                            @chkgone:
0001422C 45F8 FC00                  		lea	(v_objstate).w,a2
00014230 7000                       		moveq	#0,d0
00014232 1028 0023                  		move.b	obRespawnNo(a0),d0
00014236 6700                       		beq.s	loc_11E34
00014238 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001423E                            
0001423E                            loc_11E34:
0001423E 45E8 0037                  		lea	$37(a0),a2
00014242 7400                       		moveq	#0,d2
00014244 141A                       		move.b	(a2)+,d2
00014246 5342                       		subq.w	#1,d2
00014248 6500                       		bcs.s	Orb_Delete
0001424A                            
0001424A                            loc_11E40:
0001424A 7000                       		moveq	#0,d0
0001424C 101A                       		move.b	(a2)+,d0
0001424E ED48                       		lsl.w	#6,d0
00014250 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014256 2240                       		movea.l	d0,a1
00014258 6100 B76E                  		bsr.w	DeleteChild
0001425C 51CA FFEC                  		dbf	d2,loc_11E40
00014260                            
00014260                            Orb_Delete:
00014260 6000 B764                  		bra.w	DeleteObject
00014264                            ; ===========================================================================
00014264                            
00014264                            Orb_MoveOrb:	; Routine 6
00014264 2268 003C                  		movea.l	orb_parent(a0),a1
00014268 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001426C 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014270 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014276 6600                       		bne.s	@circle		; if not, branch
00014278 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001427E 6600                       		bne.s	@circle		; if not, branch
00014280 5428 0024                  		addq.b	#2,obRoutine(a0)
00014284 5329 0037                  		subq.b	#1,$37(a1)
00014288 6600                       		bne.s	@fire
0001428A 5429 0024                  		addq.b	#2,obRoutine(a1)
0001428E                            
0001428E                            	@fire:
0001428E 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014294 0829 0000 0022             		btst	#0,obStatus(a1)
0001429A 6700                       		beq.s	@noflip
0001429C 4468 0010                  		neg.w	obVelX(a0)
000142A0                            
000142A0                            	@noflip:
000142A0 6000 B6E4                  		bra.w	DisplaySprite
000142A4                            ; ===========================================================================
000142A4                            
000142A4                            @circle:
000142A4 1028 0026                  		move.b	obAngle(a0),d0
000142A8 4EB9 0000 3A36             		jsr	(CalcSine).l
000142AE E841                       		asr.w	#4,d1
000142B0 D269 0008                  		add.w	obX(a1),d1
000142B4 3141 0008                  		move.w	d1,obX(a0)
000142B8 E840                       		asr.w	#4,d0
000142BA D069 000C                  		add.w	obY(a1),d0
000142BE 3140 000C                  		move.w	d0,obY(a0)
000142C2 1029 0036                  		move.b	$36(a1),d0
000142C6 D128 0026                  		add.b	d0,obAngle(a0)
000142CA 6000 B6BA                  		bra.w	DisplaySprite
000142CE                            ; ===========================================================================
000142CE                            
000142CE                            Orb_ChkDel2:	; Routine 8
000142CE 6100 B6A2                  		bsr.w	SpeedToPos
000142D2 4A28 0001                  		tst.b	obRender(a0)
000142D6 6A00 B6EE                  		bpl.w	DeleteObject
000142DA 6000 B6AA                  		bra.w	DisplaySprite
000142DA 6000 B6AA                  		bra.w	DisplaySprite
000142DE                            		include	"_anim\Orbinaut.asm"
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            ; Animation script - Orbinaut enemy
000142DE                            ; ---------------------------------------------------------------------------
000142DE 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142E0 0000                       		dc.w @angers-Ani_Orb
000142E2 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142E6 00                         		even
000142E6 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142EC 00                         		even
000142EC 00                         		even
000142EC                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142EC                            ; ---------------------------------------------------------------------------
000142EC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142EC                            ; ---------------------------------------------------------------------------
000142EC                            Map_Orb_internal:
000142EC 0000                       		dc.w @normal-Map_Orb_internal
000142EE 0000                       		dc.w @medium-Map_Orb_internal
000142F0 0000                       		dc.w @angry-Map_Orb_internal
000142F2 0000                       		dc.w @spikeball-Map_Orb_internal
000142F4 01                         @normal:	dc.b 1
000142F5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142FA 01                         @medium:	dc.b 1
000142FB F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014300 01                         @angry:		dc.b 1
00014301 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00014306 01                         @spikeball:	dc.b 1
00014307 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001430C                            		even
0001430C                            		even
0001430C                            
0001430C                            		include	"_incObj\16 Harpoon.asm"
0001430C                            ; ---------------------------------------------------------------------------
0001430C                            ; Object 16 - harpoon (LZ)
0001430C                            ; ---------------------------------------------------------------------------
0001430C                            
0001430C                            Harpoon:
0001430C 7000                       		moveq	#0,d0
0001430E 1028 0024                  		move.b	obRoutine(a0),d0
00014312 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00014316 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
0001431A                            ; ===========================================================================
0001431A 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
0001431C 0000                       		dc.w Harp_Move-Harp_Index
0001431E 0000                       		dc.w Harp_Wait-Harp_Index
00014320                            
00014320 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014320                            ; ===========================================================================
00014320                            
00014320                            Harp_Main:	; Routine 0
00014320 5428 0024                  		addq.b	#2,obRoutine(a0)
00014324 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
0001432C 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014332 0028 0004 0001             		ori.b	#4,obRender(a0)
00014338 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001433E 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014344 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001434A 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014350                            
00014350                            Harp_Move:	; Routine 2
00014350 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014356 6100 86DA                  		bsr.w	AnimateSprite
0001435A 7000                       		moveq	#0,d0
0001435C 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014360 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014366 6000 D594                  		bra.w	RememberState
0001436A                            
0001436A                            	@types:
0001436A 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014370                            		even
00014370                            
00014370                            Harp_Wait:	; Routine 4
00014370 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014374 6A00                       		bpl.s	@chkdel		; branch if time remains
00014376 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001437C 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014380 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014386                            
00014386                            	@chkdel:
00014386 6000 D574                  		bra.w	RememberState
00014386 6000 D574                  		bra.w	RememberState
0001438A                            		include	"_anim\Harpoon.asm"
0001438A                            ; ---------------------------------------------------------------------------
0001438A                            ; Animation script - harpoon (LZ)
0001438A                            ; ---------------------------------------------------------------------------
0001438A 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001438C 0000                       		dc.w @h_retracting-Ani_Harp
0001438E 0000                       		dc.w @v_extending-Ani_Harp
00014390 0000                       		dc.w @v_retracting-Ani_Harp
00014392 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014396 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001439A 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001439E 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000143A2                            		even
000143A2                            		even
000143A2                            Map_Harp:	include	"_maps\Harpoon.asm"
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            ; Sprite mappings - harpoon (LZ)
000143A2                            ; ---------------------------------------------------------------------------
000143A2                            Map_Harp_internal:
000143A2 0000                       		dc.w @h_retracted-Map_Harp_internal
000143A4 0000                       		dc.w @h_middle-Map_Harp_internal
000143A6 0000                       		dc.w @h_extended-Map_Harp_internal
000143A8 0000                       		dc.w @v_retracted-Map_Harp_internal
000143AA 0000                       		dc.w @v_middle-Map_Harp_internal
000143AC 0000                       		dc.w @v_extended-Map_Harp_internal
000143AE 01                         @h_retracted:	dc.b 1
000143AF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000143B4 01                         @h_middle:	dc.b 1
000143B5 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000143BA 02                         @h_extended:	dc.b 2
000143BB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000143C0 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000143C5 01                         @v_retracted:	dc.b 1
000143C6 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000143CB 01                         @v_middle:	dc.b 1
000143CC E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000143D1 02                         @v_extended:	dc.b 2
000143D2 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000143D7 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000143DC                            		even
000143DC                            		even
000143DC                            		include	"_incObj\61 LZ Blocks.asm"
000143DC                            ; ---------------------------------------------------------------------------
000143DC                            ; Object 61 - blocks (LZ)
000143DC                            ; ---------------------------------------------------------------------------
000143DC                            
000143DC                            LabyrinthBlock:
000143DC 7000                       		moveq	#0,d0
000143DE 1028 0024                  		move.b	obRoutine(a0),d0
000143E2 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143E6 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143EA                            ; ===========================================================================
000143EA 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143EC 0000                       		dc.w LBlk_Action-LBlk_Index
000143EE                            
000143EE 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143F0 200C                       		dc.b $20, $C
000143F2 1010                       		dc.b $10, $10
000143F4 1010                       		dc.b $10, $10
000143F6                            
000143F6 =00000016                  lblk_height:	equ $16		; block height
000143F6 =00000034                  lblk_origX:	equ $34		; original x-axis position
000143F6 =00000030                  lblk_origY:	equ $30		; original y-axis position
000143F6 =00000036                  lblk_time:	equ $36		; time delay for block movement
000143F6 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            LBlk_Main:	; Routine 0
000143F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000143FA 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00014402 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014408 117C 0004 0001             		move.b	#4,obRender(a0)
0001440E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014414 7000                       		moveq	#0,d0
00014416 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001441A E648                       		lsr.w	#3,d0		; read only the 1st digit
0001441C 0240 000E                  		andi.w	#$E,d0
00014420 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014424 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014428 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
0001442C E248                       		lsr.w	#1,d0
0001442E 1140 001A                  		move.b	d0,obFrame(a0)
00014432 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014438 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
0001443E 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014442 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014446 6700                       		beq.s	LBlk_Action	; branch if 0
00014448 0C00 0007                  		cmpi.b	#7,d0
0001444C 6700                       		beq.s	LBlk_Action	; branch if 7
0001444E 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014454                            
00014454                            LBlk_Action:	; Routine 2
00014454 3F28 0008                  		move.w	obX(a0),-(sp)
00014458 7000                       		moveq	#0,d0
0001445A 1028 0028                  		move.b	obSubtype(a0),d0
0001445E 0240 000F                  		andi.w	#$F,d0
00014462 D040                       		add.w	d0,d0
00014464 323B 0000                  		move.w	@index(pc,d0.w),d1
00014468 4EBB 1000                  		jsr	@index(pc,d1.w)
0001446C 381F                       		move.w	(sp)+,d4
0001446E 4A28 0001                  		tst.b	obRender(a0)
00014472 6A00                       		bpl.s	@chkdel
00014474 7200                       		moveq	#0,d1
00014476 1228 0014                  		move.b	obActWid(a0),d1
0001447A 0641 000B                  		addi.w	#$B,d1
0001447E 7400                       		moveq	#0,d2
00014480 1428 0016                  		move.b	lblk_height(a0),d2
00014484 3602                       		move.w	d2,d3
00014486 5243                       		addq.w	#1,d3
00014488 6100 D90A                  		bsr.w	SolidObject
0001448C 1144 003F                  		move.b	d4,$3F(a0)
00014490 6100 0000                  		bsr.w	loc_12180
00014494                            
00014494                            @chkdel:
000144B2 6000 B4D2                  		bra.w	DisplaySprite
000144B6                            ; ===========================================================================
000144B6 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144BA 0000 0000                  		dc.w @type02-@index, @type03-@index
000144BE 0000 0000                  		dc.w @type04-@index, @type05-@index
000144C2 0000 0000                  		dc.w @type06-@index, @type07-@index
000144C6                            ; ===========================================================================
000144C6                            
000144C6                            @type00:
000144C6 4E75                       		rts	
000144C8                            ; ===========================================================================
000144C8                            
000144C8                            @type01:
000144C8                            @type03:
000144C8 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144CC 6600                       		bne.s	@wait01		; if yes, branch
000144CE 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144D4 6700                       		beq.s	@donothing01	; if not, branch
000144D6 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144DC                            
000144DC                            	@donothing01:
000144DC 4E75                       		rts	
000144DE                            ; ===========================================================================
000144DE                            
000144DE                            	@wait01:
000144DE 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144E2 66F8                       		bne.s	@donothing01	; if time remains, branch
000144E4 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144E8 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144EC 4E75                       		rts	
000144EE                            ; ===========================================================================
000144EE                            
000144EE                            @type02:
000144EE                            @type06:
000144EE 6100 B482                  		bsr.w	SpeedToPos
000144F2 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144F6 6100 0000                  		bsr.w	ObjFloorDist
000144FA 4A41                       		tst.w	d1		; has block hit the floor?
000144FC 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014500 5241                       		addq.w	#1,d1
00014502 D368 000C                  		add.w	d1,obY(a0)
00014506 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
0001450A 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001450E                            
0001450E                            	@nofloor02:
0001450E 4E75                       		rts	
00014510                            ; ===========================================================================
00014510                            
00014510                            @type04:
00014510 6100 B460                  		bsr.w	SpeedToPos
00014514 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014518 6100 0000                  		bsr.w	ObjHitCeiling
0001451C 4A41                       		tst.w	d1		; has block hit the ceiling?
0001451E 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014522 9368 000C                  		sub.w	d1,obY(a0)
00014526 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001452A 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
0001452E                            
0001452E                            	@noceiling04:
0001452E 4E75                       		rts	
00014530                            ; ===========================================================================
00014530                            
00014530                            @type05:
00014530 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00014536 6600                       		bne.s	@notouch05	; if not, branch
00014538 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
0001453C 4228 0038                  		clr.b	lblk_untouched(a0)
00014540                            
00014540                            	@notouch05:
00014540 4E75                       		rts	
00014542                            ; ===========================================================================
00014542                            
00014542                            @type07:
00014542 3038 F646                  		move.w	(v_waterpos1).w,d0
00014546 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001454A 6700                       		beq.s	@stop07		; if yes, branch
0001454C 6400                       		bcc.s	@fall07		; branch if block is above water
0001454E 0C40 FFFE                  		cmpi.w	#-2,d0
00014552 6C00                       		bge.s	@loc_1214E
00014554 70FE                       		moveq	#-2,d0
00014556                            
00014556                            	@loc_1214E:
00014556 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001455A 6100 0000                  		bsr.w	ObjHitCeiling
0001455E 4A41                       		tst.w	d1		; has block hit the ceiling?
00014560 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014564 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014568                            
00014568                            	@noceiling07:
00014568 4E75                       		rts	
0001456A                            ; ===========================================================================
0001456A                            
0001456A                            @fall07:
0001456A 0C40 0002                  		cmpi.w	#2,d0
0001456E 6F00                       		ble.s	@loc_1216A
00014570 7002                       		moveq	#2,d0
00014572                            
00014572                            	@loc_1216A:
00014572 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014576 6100 0000                  		bsr.w	ObjFloorDist
0001457A 4A41                       		tst.w	d1
0001457C 6A00 0000                  		bpl.w	@stop07
00014580 5241                       		addq.w	#1,d1
00014582 D368 000C                  		add.w	d1,obY(a0)
00014586                            
00014586                            	@stop07:
00014586 4E75                       		rts	
00014588                            ; ===========================================================================
00014588                            
00014588                            loc_12180:
00014588 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001458C 6700                       		beq.s	locret_121C0	; if yes, branch
0001458E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014594 6600                       		bne.s	loc_1219A	; if yes, branch
00014596 4A28 003E                  		tst.b	$3E(a0)
0001459A 6700                       		beq.s	locret_121C0
0001459C 5928 003E                  		subq.b	#4,$3E(a0)
000145A0 6000                       		bra.s	loc_121A6
000145A2                            ; ===========================================================================
000145A2                            
000145A2                            loc_1219A:
000145A2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000145A8 6700                       		beq.s	locret_121C0
000145AA 5828 003E                  		addq.b	#4,$3E(a0)
000145AE                            
000145AE                            loc_121A6:
000145AE 1028 003E                  		move.b	$3E(a0),d0
000145B2 4EB9 0000 3A36             		jsr	(CalcSine).l
000145B8 323C 0400                  		move.w	#$400,d1
000145BC C1C1                       		muls.w	d1,d0
000145BE 4840                       		swap	d0
000145C0 D068 0030                  		add.w	lblk_origY(a0),d0
000145C4 3140 000C                  		move.w	d0,obY(a0)
000145C8                            
000145C8                            locret_121C0:
000145C8 4E75                       		rts	
000145C8 4E75                       		rts	
000145CA                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145CA                            Map_6865:
000145CA 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145CC 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145CE 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145D0 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145D2 01                         Map_6865_8: 	dc.b $1
000145D3 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145D8 02                         Map_6865_E: 	dc.b $2
000145D9 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145DE F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145E3 01                         Map_6865_19: 	dc.b $1
000145E4 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145E9 01                         Map_6865_1F: 	dc.b $1
000145EA F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145F0 00                         	even
000145F0 00                         	even
000145F0                            		include	"_incObj\62 Gargoyle.asm"
000145F0                            ; ---------------------------------------------------------------------------
000145F0                            ; Object 62 - gargoyle head (LZ)
000145F0                            ; ---------------------------------------------------------------------------
000145F0                            
000145F0                            Gargoyle:
000145F0 7000                       		moveq	#0,d0
000145F2 1028 0024                  		move.b	obRoutine(a0),d0
000145F6 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145FA 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000145FE 6000 D2FC                  		bra.w	RememberState
00014602                            ; ===========================================================================
00014602 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
00014604 0000                       		dc.w Gar_MakeFire-Gar_Index
00014606 0000                       		dc.w Gar_FireBall-Gar_Index
00014608 0000                       		dc.w Gar_AniFire-Gar_Index
0001460A                            
0001460A 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014612                            ; ===========================================================================
00014612                            
00014612                            Gar_Main:	; Routine 0
00014612 5428 0024                  		addq.b	#2,obRoutine(a0)
00014616 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001461E 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014624 0028 0004 0001             		ori.b	#4,obRender(a0)
0001462A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014630 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014636 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001463A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001463E 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014644 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001464A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014650                            
00014650                            Gar_MakeFire:	; Routine 2
00014650 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014654 6600                       		bne.s	@nofire		; if time remains, branch
00014656                            
00014656 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001465C 6100 B5A8                  		bsr.w	ChkObjectVisible
00014660 6600                       		bne.s	@nofire
00014662 6100 B7AE                  		bsr.w	FindFreeObj
00014666 6600                       		bne.s	@nofire
00014668 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001466C 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014670 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014676 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001467C 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014682 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014688                            
00014688                            	@nofire:
00014688 4E75                       		rts	
0001468A                            ; ===========================================================================
0001468A                            
0001468A                            Gar_FireBall:	; Routine 4
0001468A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001468E 117C 0008 0016             		move.b	#8,obHeight(a0)
00014694 117C 0008 0017             		move.b	#8,obWidth(a0)
0001469A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000146A2 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
000146A8 0028 0004 0001             		ori.b	#4,obRender(a0)
000146AE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146B4 117C 0098 0020             		move.b	#$98,obColType(a0)
000146BA 117C 0008 0014             		move.b	#8,obActWid(a0)
000146C0 117C 0002 001A             		move.b	#2,obFrame(a0)
000146C6 5068 000C                  		addq.w	#8,obY(a0)
000146CA 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146D0 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146D6 6600                       		bne.s	@noflip		; if not, branch
000146D8 4468 0010                  		neg.w	obVelX(a0)
000146DC                            
000146DC                            	@noflip:
000146E6                            
000146E6                            Gar_AniFire:	; Routine 6
000146E6 1038 FE05                  		move.b	(v_framebyte).w,d0
000146EA 0200 0007                  		andi.b	#7,d0
000146EE 6600                       		bne.s	@nochg
000146F0 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146F6                            
000146F6                            	@nochg:
000146F6 6100 B27A                  		bsr.w	SpeedToPos
000146FA 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014700 6600                       		bne.s	@isright	; if not, branch
00014702 76F8                       		moveq	#-8,d3
00014704 6100 0000                  		bsr.w	ObjHitWallLeft
00014708 4A41                       		tst.w	d1
0001470A 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001470E 4E75                       		rts	
00014710                            
00014710                            	@isright:
00014710 7608                       		moveq	#8,d3
00014712 6100 0000                  		bsr.w	ObjHitWallRight
00014716 4A41                       		tst.w	d1
00014718 6B00 B2AC                  		bmi.w	DeleteObject
0001471C 4E75                       		rts	
0001471C 4E75                       		rts	
0001471E                            Map_Gar:	include	"_maps\Gargoyle.asm"
0001471E                            ; ---------------------------------------------------------------------------
0001471E                            ; Sprite mappings - gargoyle head (LZ)
0001471E                            ; ---------------------------------------------------------------------------
0001471E                            Map_Gar_internal:
0001471E 0000                       		dc.w @head-Map_Gar_internal
00014720 0000                       		dc.w @head-Map_Gar_internal
00014722 0000                       		dc.w @fireball1-Map_Gar_internal
00014724 0000                       		dc.w @fireball2-Map_Gar_internal
00014726 03                         @head:		dc.b 3
00014727 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001472C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014731 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00014736 01                         @fireball1:	dc.b 1
00014737 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001473C 01                         @fireball2:	dc.b 1
0001473D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014742                            		even
00014742                            		even
00014742                            		include	"_incObj\63 LZ Conveyor.asm"
00014742                            ; ---------------------------------------------------------------------------
00014742                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014742                            ; ---------------------------------------------------------------------------
00014742                            
00014742                            LabyrinthConvey:
00014742 7000                       		moveq	#0,d0
00014744 1028 0024                  		move.b	obRoutine(a0),d0
00014748 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001474C 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001476C                            
0001476C                            LCon_Display:
0001476C 6000 B218                  		bra.w	DisplaySprite
00014770                            ; ===========================================================================
00014770                            
00014770                            loc_1236A:
00014770 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014776 6600                       		bne.s	loc_12378
00014778 0C40 FF80                  		cmpi.w	#-$80,d0
0001477C 64EE                       		bcc.s	LCon_Display
0001477E                            
0001477E                            loc_12378:
0001477E 1028 002F                  		move.b	$2F(a0),d0
00014782 6A00 B242                  		bpl.w	DeleteObject
00014786 0240 007F                  		andi.w	#$7F,d0
0001478A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001478E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014794 6000 B230                  		bra.w	DeleteObject
00014798                            ; ===========================================================================
00014798 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001479A 0000                       		dc.w loc_124B2-LCon_Index
0001479C 0000                       		dc.w loc_124C2-LCon_Index
0001479E 0000                       		dc.w loc_124DE-LCon_Index
000147A0                            ; ===========================================================================
000147A0                            
000147A0                            LCon_Main:	; Routine 0
000147A0 1028 0028                  		move.b	obSubtype(a0),d0
000147A4 6B00 0000                  		bmi.w	loc_12460
000147A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000147AC 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147B4 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147BA 0028 0004 0001             		ori.b	#4,obRender(a0)
000147C0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147C6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147CC 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147D2 6600                       		bne.s	loc_123E2
000147D4 5828 0024                  		addq.b	#4,obRoutine(a0)
000147D8 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147DE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147E4 6000 0000                  		bra.w	loc_124DE
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            loc_123E2:
000147E8 117C 0004 001A             		move.b	#4,obFrame(a0)
000147EE 7000                       		moveq	#0,d0
000147F0 1028 0028                  		move.b	obSubtype(a0),d0
000147F4 3200                       		move.w	d0,d1
000147F6 E648                       		lsr.w	#3,d0
000147F8 0240 001E                  		andi.w	#$1E,d0
000147FC 45FA 0000                  		lea	LCon_Data(pc),a2
00014800 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014804 315A 0038                  		move.w	(a2)+,$38(a0)
00014808 315A 0030                  		move.w	(a2)+,$30(a0)
0001480C 214A 003C                  		move.l	a2,$3C(a0)
00014810 0241 000F                  		andi.w	#$F,d1
00014814 E549                       		lsl.w	#2,d1
00014816 1141 0038                  		move.b	d1,$38(a0)
0001481A 117C 0004 003A             		move.b	#4,$3A(a0)
00014820 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014824 6700                       		beq.s	loc_1244C
00014826 117C 0001 003B             		move.b	#1,$3B(a0)
0001482C 4428 003A                  		neg.b	$3A(a0)
00014830 7200                       		moveq	#0,d1
00014832 1228 0038                  		move.b	$38(a0),d1
00014836 D228 003A                  		add.b	$3A(a0),d1
0001483A B228 0039                  		cmp.b	$39(a0),d1
0001483E 6500                       		bcs.s	loc_12448
00014840 1001                       		move.b	d1,d0
00014842 7200                       		moveq	#0,d1
00014844 4A00                       		tst.b	d0
00014846 6A00                       		bpl.s	loc_12448
00014848 1228 0039                  		move.b	$39(a0),d1
0001484C 5901                       		subq.b	#4,d1
0001484E                            
0001484E                            loc_12448:
0001484E 1141 0038                  		move.b	d1,$38(a0)
00014852                            
00014852                            loc_1244C:
00014852 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014858 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001485E 6100 0000                  		bsr.w	LCon_ChangeDir
00014862 6000 0000                  		bra.w	loc_124B2
00014866                            ; ===========================================================================
00014866                            
00014866                            loc_12460:
00014866 1140 002F                  		move.b	d0,$2F(a0)
0001486A 0240 007F                  		andi.w	#$7F,d0
0001486E 45F8 F7C1                  		lea	(v_obj63).w,a2
00014872 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014878 6600 B14C                  		bne.w	DeleteObject
0001487C D040                       		add.w	d0,d0
0001487E 0240 001E                  		andi.w	#$1E,d0
00014882 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014886 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001488C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014890 321A                       		move.w	(a2)+,d1
00014892 2248                       		movea.l	a0,a1
00014894 6000                       		bra.s	LCon_MakePtfms
00014896                            ; ===========================================================================
00014896                            
00014896                            LCon_Loop:
00014896 6100 B57A                  		bsr.w	FindFreeObj
0001489A 6600                       		bne.s	loc_124AA
0001489C                            
0001489C                            LCon_MakePtfms:
0001489C 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000148A0 335A 0008                  		move.w	(a2)+,obX(a1)
000148A4 335A 000C                  		move.w	(a2)+,obY(a1)
000148A8 301A                       		move.w	(a2)+,d0
000148AA 1340 0028                  		move.b	d0,obSubtype(a1)
000148AE                            
000148AE                            loc_124AA:
000148AE 51C9 FFE6                  		dbf	d1,LCon_Loop
000148B2                            
000148B2 588F                       		addq.l	#4,sp
000148B4 4E75                       		rts	
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            loc_124B2:	; Routine 2
000148B6 7200                       		moveq	#0,d1
000148B8 1228 0014                  		move.b	obActWid(a0),d1
000148BC 4EB9 0000 9094             		jsr	(PlatformObject).l
000148C2 6000 0000                  		bra.w	sub_12502
000148C6                            ; ===========================================================================
000148C6                            
000148C6                            loc_124C2:	; Routine 4
000148C6 7200                       		moveq	#0,d1
000148C8 1228 0014                  		move.b	obActWid(a0),d1
000148CC 4EB9 0000 9208             		jsr	(ExitPlatform).l
000148D2 3F28 0008                  		move.w	obX(a0),-(sp)
000148D6 6100 0000                  		bsr.w	sub_12502
000148DA 341F                       		move.w	(sp)+,d2
000148DC 4EF9 0000 9772             		jmp	(MvSonicOnPtfm2).l
000148E2                            ; ===========================================================================
000148E2                            
000148E2                            loc_124DE:	; Routine 6
000148E2 3038 FE04                  		move.w	(v_framecount).w,d0
000148E6 0240 0003                  		andi.w	#3,d0
000148EA 6600                       		bne.s	loc_124FC
000148EC 7201                       		moveq	#1,d1
000148EE 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148F2 6700                       		beq.s	loc_124F2
000148F4 4401                       		neg.b	d1
000148F6                            
000148F6                            loc_124F2:
000148F6 D328 001A                  		add.b	d1,obFrame(a0)
000148FA 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014900                            
00014900                            loc_124FC:
00014900 588F                       		addq.l	#4,sp
00014902 6000 CFF8                  		bra.w	RememberState
00014906                            
00014906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014906                            
00014906                            
00014906                            sub_12502:
00014906 4A38 F7EE                  		tst.b	(f_switch+$E).w
0001490A 6700                       		beq.s	loc_12520
0001490C 4A28 003B                  		tst.b	$3B(a0)
00014910 6600                       		bne.s	loc_12520
00014912 117C 0001 003B             		move.b	#1,$3B(a0)
00014918 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
0001491E 4428 003A                  		neg.b	$3A(a0)
00014922 6000                       		bra.s	loc_12534
00014924                            ; ===========================================================================
00014924                            
00014924                            loc_12520:
00014924 3028 0008                  		move.w	obX(a0),d0
00014928 B068 0034                  		cmp.w	$34(a0),d0
0001492C 6600                       		bne.s	loc_1256A
0001492E 3028 000C                  		move.w	obY(a0),d0
00014932 B068 0036                  		cmp.w	$36(a0),d0
00014936 6600                       		bne.s	loc_1256A
00014938                            
00014938                            loc_12534:
00014938 7200                       		moveq	#0,d1
0001493A 1228 0038                  		move.b	$38(a0),d1
0001493E D228 003A                  		add.b	$3A(a0),d1
00014942 B228 0039                  		cmp.b	$39(a0),d1
00014946 6500                       		bcs.s	loc_12552
00014948 1001                       		move.b	d1,d0
0001494A 7200                       		moveq	#0,d1
0001494C 4A00                       		tst.b	d0
0001494E 6A00                       		bpl.s	loc_12552
00014950 1228 0039                  		move.b	$39(a0),d1
00014954 5901                       		subq.b	#4,d1
00014956                            
00014956                            loc_12552:
00014956 1141 0038                  		move.b	d1,$38(a0)
0001495A 2268 003C                  		movea.l	$3C(a0),a1
0001495E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014964 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001496A 6100 0000                  		bsr.w	LCon_ChangeDir
0001496E                            
0001496E                            loc_1256A:
0001496E 6100 B002                  		bsr.w	SpeedToPos
00014972 4E75                       		rts	
00014974                            ; End of function sub_12502
00014974                            
00014974                            
00014974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014974                            
00014974                            
00014974                            LCon_ChangeDir:
00014974 7000                       		moveq	#0,d0
00014976 343C FF00                  		move.w	#-$100,d2
0001497A 3028 0008                  		move.w	obX(a0),d0
0001497E 9068 0034                  		sub.w	$34(a0),d0
00014982 6400                       		bcc.s	loc_12584
00014984 4440                       		neg.w	d0
00014986 4442                       		neg.w	d2
00014988                            
00014988                            loc_12584:
00014988 7200                       		moveq	#0,d1
0001498A 363C FF00                  		move.w	#-$100,d3
0001498E 3228 000C                  		move.w	obY(a0),d1
00014992 9268 0036                  		sub.w	$36(a0),d1
00014996 6400                       		bcc.s	loc_12598
00014998 4441                       		neg.w	d1
0001499A 4443                       		neg.w	d3
0001499C                            
0001499C                            loc_12598:
0001499C B240                       		cmp.w	d0,d1
0001499E 6500                       		bcs.s	loc_125C2
000149A0 3028 0008                  		move.w	obX(a0),d0
000149A4 9068 0034                  		sub.w	$34(a0),d0
000149A8 6700                       		beq.s	loc_125AE
000149AA 48C0                       		ext.l	d0
000149AC E180                       		asl.l	#8,d0
000149AE 81C1                       		divs.w	d1,d0
000149B0 4440                       		neg.w	d0
000149B2                            
000149B2                            loc_125AE:
000149B2 3140 0010                  		move.w	d0,obVelX(a0)
000149B6 3143 0012                  		move.w	d3,obVelY(a0)
000149BA 4840                       		swap	d0
000149BC 3140 000A                  		move.w	d0,obX+2(a0)
000149C0 4268 000E                  		clr.w	obY+2(a0)
000149C4 4E75                       		rts	
000149C6                            ; ===========================================================================
000149C6                            
000149C6                            loc_125C2:
000149C6 3228 000C                  		move.w	obY(a0),d1
000149CA 9268 0036                  		sub.w	$36(a0),d1
000149CE 6700                       		beq.s	loc_125D4
000149D0 48C1                       		ext.l	d1
000149D2 E181                       		asl.l	#8,d1
000149D4 83C0                       		divs.w	d0,d1
000149D6 4441                       		neg.w	d1
000149D8                            
000149D8                            loc_125D4:
000149D8 3141 0012                  		move.w	d1,obVelY(a0)
000149DC 3142 0010                  		move.w	d2,obVelX(a0)
000149E0 4841                       		swap	d1
000149E2 3141 000E                  		move.w	d1,obY+2(a0)
000149E6 4268 000A                  		clr.w	obX+2(a0)
000149EA 4E75                       		rts	
000149EC                            ; End of function LCon_ChangeDir
000149EC                            
000149EC                            ; ===========================================================================
000149EC 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149EE 0000                       		dc.w word_12610-LCon_Data
000149F0 0000                       		dc.w word_12628-LCon_Data
000149F2 0000                       		dc.w word_1263C-LCon_Data
000149F4 0000                       		dc.w word_12650-LCon_Data
000149F6 0000                       		dc.w word_12668-LCon_Data
000149F8 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014A08 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A14 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A24 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A2C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A40 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A54 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A6C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A6C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A80                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A80                            ; ---------------------------------------------------------------------------
00014A80                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A80                            ; ---------------------------------------------------------------------------
00014A80                            Map_LConv_internal:
00014A80 0000                       		dc.w @wheel1-Map_LConv_internal
00014A82 0000                       		dc.w @wheel2-Map_LConv_internal
00014A84 0000                       		dc.w @wheel3-Map_LConv_internal
00014A86 0000                       		dc.w @wheel4-Map_LConv_internal
00014A88 0000                       		dc.w @platform-Map_LConv_internal
00014A8A 01                         @wheel1:	dc.b 1
00014A8B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A90 01                         @wheel2:	dc.b 1
00014A91 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A96 01                         @wheel3:	dc.b 1
00014A97 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A9C 01                         @wheel4:	dc.b 1
00014A9D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014AA2 01                         @platform:	dc.b 1
00014AA3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014AA8                            		even
00014AA8                            		even
00014AA8                            		include	"_incObj\64 Bubbles.asm"
00014AA8                            ; ---------------------------------------------------------------------------
00014AA8                            ; Object 64 - bubbles (LZ)
00014AA8                            ; ---------------------------------------------------------------------------
00014AA8                            
00014AA8                            Bubble:
00014AA8 7000                       		moveq	#0,d0
00014AAA 1028 0024                  		move.b	obRoutine(a0),d0
00014AAE 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AB2 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014AB6                            ; ===========================================================================
00014AB6 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014AB8 0000                       		dc.w Bub_Animate-Bub_Index
00014ABA 0000                       		dc.w Bub_ChkWater-Bub_Index
00014ABC 0000                       		dc.w Bub_Display-Bub_Index
00014ABE 0000                       		dc.w Bub_Delete-Bub_Index
00014AC0 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AC2                            
00014AC2 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AC2 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AC2 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AC2 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AC2                            ; ===========================================================================
00014AC2                            
00014AC2                            Bub_Main:	; Routine 0
00014AC2 5428 0024                  		addq.b	#2,obRoutine(a0)
00014AC6 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014ACE 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014AD4 117C 0084 0001             		move.b	#$84,obRender(a0)
00014ADA 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AE0 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AE6 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014AEA 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014AEC                            
00014AEC 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014AF0 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AF4 1140 0032                  		move.b	d0,bub_time(a0)
00014AF8 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014AFC 117C 0006 001C             		move.b	#6,obAnim(a0)
00014B02 6000 0000                  		bra.w	Bub_BblMaker
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            @bubble:
00014B06 1140 001C                  		move.b	d0,obAnim(a0)
00014B0A 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B10 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B16 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014B1C 1140 0026                  		move.b	d0,obAngle(a0)
00014B20                            
00014B20                            Bub_Animate:	; Routine 2
00014B20 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B26 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00014B2C 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B32 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B34                            
00014B34 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B3A                            
00014B3A                            Bub_ChkWater:	; Routine 4
00014B3A 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B3E B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B42 6500                       		bcs.s	@wobble		; if yes, branch
00014B44                            
00014B44                            @burst:
00014B44 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B4A 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B4E 6000 0000                  		bra.w	Bub_Display
00014B52                            ; ===========================================================================
00014B52                            
00014B52                            @wobble:
00014B52 1028 0026                  		move.b	obAngle(a0),d0
00014B56 5228 0026                  		addq.b	#1,obAngle(a0)
00014B5A 0240 007F                  		andi.w	#$7F,d0
00014B5E 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B64 1031 0000                  		move.b	(a1,d0.w),d0
00014B68 4880                       		ext.w	d0
00014B6A D068 0030                  		add.w	bub_origX(a0),d0
00014B6E 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B72 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B76 6700                       		beq.s	@display
00014B78 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B7C 6700                       		beq.s	@display	; if not, branch
00014B7E                            
00014B7E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B8C 43F8 D000                  		lea	(v_player).w,a1
00014B90 4269 0010                  		clr.w	obVelX(a1)
00014B94 4269 0012                  		clr.w	obVelY(a1)
00014B98 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B9C 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014BA2 337C 0023 003E             		move.w	#$23,$3E(a1)
00014BA8 137C 0000 003C             		move.b	#0,$3C(a1)
00014BAE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BB4 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BBA 0829 0002 0022             		btst	#2,obStatus(a1)
00014BC0 6700 FF82                  		beq.w	@burst
00014BC4 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BCA 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BD0 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BD6 5B69 000C                  		subq.w	#5,obY(a1)
00014BDA 6000 FF68                  		bra.w	@burst
00014BDE                            ; ===========================================================================
00014BDE                            
00014BDE                            @display:
00014BDE 6100 AD92                  		bsr.w	SpeedToPos
00014BE2 4A28 0001                  		tst.b	obRender(a0)
00014BE6 6A00                       		bpl.s	@delete
00014BE8 4EF9 0000 F986             		jmp	(DisplaySprite).l
00014BEE                            
00014BEE                            	@delete:
00014BEE 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00014BF4                            ; ===========================================================================
00014BF4                            
00014BF4                            Bub_Display:	; Routine 6
00014BF4 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BFA 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00014C00 4A28 0001                  		tst.b	obRender(a0)
00014C04 6A00                       		bpl.s	@delete
00014C06 4EF9 0000 F986             		jmp	(DisplaySprite).l
00014C0C                            
00014C0C                            	@delete:
00014C0C 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00014C12                            ; ===========================================================================
00014C12                            
00014C12                            Bub_Delete:	; Routine 8
00014C12 6000 ADB2                  		bra.w	DeleteObject
00014C16                            ; ===========================================================================
00014C16                            
00014C16                            Bub_BblMaker:	; Routine $A
00014C16 4A68 0036                  		tst.w	$36(a0)
00014C1A 6600                       		bne.s	@loc_12874
00014C1C 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C20 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C24 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C28 4A28 0001                  		tst.b	obRender(a0)
00014C2C 6A00 0000                  		bpl.w	@chkdel
00014C30 5368 0038                  		subq.w	#1,$38(a0)
00014C34 6A00 0000                  		bpl.w	@loc_12914
00014C38 317C 0001 0036             		move.w	#1,$36(a0)
00014C3E                            
00014C3E                            	@tryagain:
00014C3E 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C44 3200                       		move.w	d0,d1
00014C46 0240 0007                  		andi.w	#7,d0
00014C4A 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C4E 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C50                            
00014C50 1140 0034                  		move.b	d0,$34(a0)
00014C54 0241 000C                  		andi.w	#$C,d1
00014C58 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C5E D2C1                       		adda.w	d1,a1
00014C60 2149 003C                  		move.l	a1,$3C(a0)
00014C64 5328 0032                  		subq.b	#1,bub_time(a0)
00014C68 6A00                       		bpl.s	@loc_12872
00014C6A 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C70 08E8 0007 0036             		bset	#7,$36(a0)
00014C76                            
00014C76                            @loc_12872:
00014C76 6000                       		bra.s	@loc_1287C
00014C78                            ; ===========================================================================
00014C78                            
00014C78                            @loc_12874:
00014C78 5368 0038                  		subq.w	#1,$38(a0)
00014C7C 6A00 0000                  		bpl.w	@loc_12914
00014C80                            
00014C80                            @loc_1287C:
00014C80 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C86 0240 001F                  		andi.w	#$1F,d0
00014C8A 3140 0038                  		move.w	d0,$38(a0)
00014C8E 6100 B182                  		bsr.w	FindFreeObj
00014C92 6600                       		bne.s	@fail
00014C94 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C98 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C9E 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CA4 0240 000F                  		andi.w	#$F,d0
00014CA8 5140                       		subq.w	#8,d0
00014CAA D169 0008                  		add.w	d0,obX(a1)
00014CAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CB4 7000                       		moveq	#0,d0
00014CB6 1028 0034                  		move.b	$34(a0),d0
00014CBA 2468 003C                  		movea.l	$3C(a0),a2
00014CBE 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CC4 0828 0007 0036             		btst	#7,$36(a0)
00014CCA 6700                       		beq.s	@fail
00014CCC 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CD2 0240 0003                  		andi.w	#3,d0
00014CD6 6600                       		bne.s	@loc_buh
00014CD8 08E8 0006 0036             		bset	#6,$36(a0)
00014CDE 6600                       		bne.s	@fail
00014CE0 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CE6                            
00014CE6                            @loc_buh:
00014CE6 4A28 0034                  		tst.b	$34(a0)
00014CEA 6600                       		bne.s	@fail
00014CEC 08E8 0006 0036             		bset	#6,$36(a0)
00014CF2 6600                       		bne.s	@fail
00014CF4 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CFA                            
00014CFA                            	@fail:
00014CFA 5328 0034                  		subq.b	#1,$34(a0)
00014CFE 6A00                       		bpl.s	@loc_12914
00014D00 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014D06 0240 007F                  		andi.w	#$7F,d0
00014D0A 0640 0080                  		addi.w	#$80,d0
00014D0E D168 0038                  		add.w	d0,$38(a0)
00014D12 4268 0036                  		clr.w	$36(a0)
00014D16                            
00014D16                            @loc_12914:
00014D16 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D1C 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00014D22                            
00014D22                            @chkdel:
00014D40 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D44 B068 000C                  		cmp.w	obY(a0),d0
00014D48 6500 AC3C                  		bcs.w	DisplaySprite
00014D4C 4E75                       		rts	
00014D4E                            ; ===========================================================================
00014D4E                            ; bubble production sequence
00014D4E                            
00014D4E                            ; 0 = small bubble, 1 =	large bubble
00014D4E                            
00014D4E 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D60                            
00014D60                            ; ===========================================================================
00014D60                            
00014D60                            Bub_ChkSonic:
00014D60 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D64 6B00                       		bmi.s	@loc_12998
00014D66 43F8 D000                  		lea	(v_player).w,a1
00014D6A 3029 0008                  		move.w	obX(a1),d0
00014D6E 3228 0008                  		move.w	obX(a0),d1
00014D72 0441 0010                  		subi.w	#$10,d1
00014D76 B240                       		cmp.w	d0,d1
00014D78 6400                       		bcc.s	@loc_12998
00014D7A 0641 0020                  		addi.w	#$20,d1
00014D7E B240                       		cmp.w	d0,d1
00014D80 6500                       		bcs.s	@loc_12998
00014D82 3029 000C                  		move.w	obY(a1),d0
00014D86 3228 000C                  		move.w	obY(a0),d1
00014D8A B240                       		cmp.w	d0,d1
00014D8C 6400                       		bcc.s	@loc_12998
00014D8E 0641 0010                  		addi.w	#$10,d1
00014D92 B240                       		cmp.w	d0,d1
00014D94 6500                       		bcs.s	@loc_12998
00014D96 7001                       		moveq	#1,d0
00014D98 4E75                       		rts	
00014D9A                            ; ===========================================================================
00014D9A                            
00014D9A                            @loc_12998:
00014D9A 7000                       		moveq	#0,d0
00014D9C 4E75                       		rts	
00014D9C 4E75                       		rts	
00014D9E                            		include	"_anim\Bubbles.asm"
00014D9E                            ; ---------------------------------------------------------------------------
00014D9E                            ; Animation script - bubbles (LZ)
00014D9E                            ; ---------------------------------------------------------------------------
00014D9E 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014DA0 0000                       		dc.w @medium-Ani_Bub
00014DA2 0000                       		dc.w @large-Ani_Bub
00014DA4 0000                       		dc.w @incroutine-Ani_Bub
00014DA6 0000                       		dc.w @incroutine-Ani_Bub
00014DA8 0000                       		dc.w @burst-Ani_Bub
00014DAA 0000                       		dc.w @bubmaker-Ani_Bub
00014DAC 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DB2 00                         		even
00014DB2 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DB8 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DC0 00                         		even
00014DC0 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DC2 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DC8 00                         		even
00014DC8 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DCE 00                         		even
00014DCE 00                         		even
00014DCE                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE                            ; Sprite mappings - bubbles (LZ)
00014DCE                            ; ---------------------------------------------------------------------------
00014DCE                            Map_Bub_internal:
00014DCE 0000                       		dc.w @bubble1-Map_Bub_internal
00014DD0 0000                       		dc.w @bubble2-Map_Bub_internal
00014DD2 0000                       		dc.w @bubble3-Map_Bub_internal
00014DD4 0000                       		dc.w @bubble4-Map_Bub_internal
00014DD6 0000                       		dc.w @bubble5-Map_Bub_internal
00014DD8 0000                       		dc.w @bubble6-Map_Bub_internal
00014DDA 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DDC 0000                       		dc.w @burst1-Map_Bub_internal
00014DDE 0000                       		dc.w @burst2-Map_Bub_internal
00014DE0 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DE2 0000                       		dc.w @five_sm-Map_Bub_internal
00014DE4 0000                       		dc.w @three_sm-Map_Bub_internal
00014DE6 0000                       		dc.w @one_sm-Map_Bub_internal
00014DE8 0000                       		dc.w @zero-Map_Bub_internal
00014DEA 0000                       		dc.w @five-Map_Bub_internal
00014DEC 0000                       		dc.w @four-Map_Bub_internal
00014DEE 0000                       		dc.w @three-Map_Bub_internal
00014DF0 0000                       		dc.w @two-Map_Bub_internal
00014DF2 0000                       		dc.w @one-Map_Bub_internal
00014DF4 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DF6 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DF8 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DFA 0000                       		dc.w @blank-Map_Bub_internal
00014DFC 01                         @bubble1:	dc.b 1
00014DFD FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014E02 01                         @bubble2:	dc.b 1
00014E03 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014E08 01                         @bubble3:	dc.b 1
00014E09 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E0E 01                         @bubble4:	dc.b 1
00014E0F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E14 01                         @bubble5:	dc.b 1
00014E15 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E1A 01                         @bubble6:	dc.b 1
00014E1B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E20 01                         @bubblefull:	dc.b 1
00014E21 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E26 04                         @burst1:	dc.b 4
00014E27 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E2C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E31 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E36 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E3B 04                         @burst2:	dc.b 4
00014E3C F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E41 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E46 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E4B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E50 01                         @zero_sm:	dc.b 1
00014E51 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E56 01                         @five_sm:	dc.b 1
00014E57 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E5C 01                         @three_sm:	dc.b 1
00014E5D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E62 01                         @one_sm:	dc.b 1
00014E63 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E68 01                         @zero:		dc.b 1
00014E69 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E6E 01                         @five:		dc.b 1
00014E6F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E74 01                         @four:		dc.b 1
00014E75 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E7A 01                         @three:		dc.b 1
00014E7B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E80 01                         @two:		dc.b 1
00014E81 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E86 01                         @one:		dc.b 1
00014E87 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E8C 01                         @bubmaker1:	dc.b 1
00014E8D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E92 01                         @bubmaker2:	dc.b 1
00014E93 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E98 01                         @bubmaker3:	dc.b 1
00014E99 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E9E 00                         @blank:		dc.b 0
00014EA0 00                         		even
00014EA0 00                         		even
00014EA0                            		include	"_incObj\65 Waterfalls.asm"
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0                            ; Object 65 - waterfalls (LZ)
00014EA0                            ; ---------------------------------------------------------------------------
00014EA0                            
00014EA0                            Waterfall:
00014EA0 7000                       		moveq	#0,d0
00014EA2 1028 0024                  		move.b	obRoutine(a0),d0
00014EA6 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014EAA 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014EAE                            ; ===========================================================================
00014EAE 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014EB0 0000                       		dc.w WFall_Animate-WFall_Index
00014EB2 0000                       		dc.w WFall_ChkDel-WFall_Index
00014EB4 0000                       		dc.w WFall_OnWater-WFall_Index
00014EB6 0000                       		dc.w loc_12B36-WFall_Index
00014EB8                            ; ===========================================================================
00014EB8                            
00014EB8                            WFall_Main:	; Routine 0
00014EB8 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EBC 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EC4 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014ECA 0028 0004 0001             		ori.b	#4,obRender(a0)
00014ED0 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014ED6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014EDC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014EE0 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014EE2 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EE8                            
00014EE8                            	@under80:
00014EE8 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EEC 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EF0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EF4 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EF6                            
00014EF6 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EFA 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014EFE 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014F04 6700                       		beq.s	@not49		; if not, branch
00014F06                            
00014F06 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014F0C                            
00014F0C                            	@not49:
00014F0C 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F12 6700                       		beq.s	WFall_Animate	; if not, branch
00014F14 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F1A                            
00014F1A                            WFall_Animate:	; Routine 2
00014F1A 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F20 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00014F26                            
00014F26                            WFall_ChkDel:	; Routine 4
00014F26 6000 C9D4                  		bra.w	RememberState
00014F2A                            ; ===========================================================================
00014F2A                            
00014F2A                            WFall_OnWater:	; Routine 6
00014F2A 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F2E 0440 0010                  		subi.w	#$10,d0
00014F32 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F36 60E2                       		bra.s	WFall_Animate
00014F38                            ; ===========================================================================
00014F38                            
00014F38                            loc_12B36:	; Routine 8
00014F38 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F3E 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F44 6600                       		bne.s	@animate
00014F46 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F4C                            
00014F4C                            	@animate:
00014F4C 60CC                       		bra.s	WFall_Animate
00014F4C 60CC                       		bra.s	WFall_Animate
00014F4E                            		include	"_anim\Waterfalls.asm"
00014F4E                            ; ---------------------------------------------------------------------------
00014F4E                            ; Animation script - waterfall (LZ)
00014F4E                            ; ---------------------------------------------------------------------------
00014F4E 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F50 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F56 00                         		even
00014F56 00                         		even
00014F56                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F56                            ; ---------------------------------------------------------------------------
00014F56                            ; Sprite mappings - waterfalls (LZ)
00014F56                            ; ---------------------------------------------------------------------------
00014F56                            Map_WFall_internal:
00014F56 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F58 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F5A 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F5C 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F5E 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F60 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F62 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F64 0000                       		dc.w @vertwide-Map_WFall_internal
00014F66 0000                       		dc.w @diagonal-Map_WFall_internal
00014F68 0000                       		dc.w @splash1-Map_WFall_internal
00014F6A 0000                       		dc.w @splash2-Map_WFall_internal
00014F6C 0000                       		dc.w @splash3-Map_WFall_internal
00014F6E 01                         @vertnarrow:	dc.b 1
00014F6F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F74 02                         @cornerwide:	dc.b 2
00014F75 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F7A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F7F 02                         @cornermedium:	dc.b 2
00014F80 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F85 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F8A 01                         @cornernarrow:	dc.b 1
00014F8B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F90 02                         @cornermedium2:	dc.b 2
00014F91 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F96 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F9B 01                         @cornernarrow2:	dc.b 1
00014F9C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014FA1 01                         @cornernarrow3:	dc.b 1
00014FA2 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014FA7 01                         @vertwide:	dc.b 1
00014FA8 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014FAD 02                         @diagonal:	dc.b 2
00014FAE F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FB3 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FB8 02                         @splash1:	dc.b 2
00014FB9 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FBE F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FC3 02                         @splash2:	dc.b 2
00014FC4 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FC9 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FCE 02                         @splash3:	dc.b 2
00014FCF F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FD4 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FDA 00                         		even
00014FDA 00                         		even
00014FDA                            
00014FDA                            
00014FDA                            SpinDash_dust:
00014FDA                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FDA 7000                       		moveq	#0,d0
00014FDC 1028 0024                  		move.b	$24(a0),d0
00014FE0 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FE4 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FE8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FE8 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FEA 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FEC 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FEE 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FF0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FF0                            
00014FF0                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FF0 5428 0024                  		addq.b	#2,$24(a0)
00014FF4 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014FFC 0028 0004 0001             		or.b	#4,1(a0)
00015002 317C 0080 0018             		move.w	#$80,obPriority(a0)
00015008 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001500E 317C 07AC 0002             		move	#$7AC,2(a0)
00015014 317C D000 003E             		move	#-$3000,$3E(a0)
0001501A 317C F580 003C             		move	#$F580,$3C(a0)
00015020 B0FC D1C0                  		cmp	#-$2E40,a0
00015024 6700                       		beq.s	loc_1DD8C
00015026 117C 0001 0034             		move.b	#1,$34(a0)
0001502C                            ;		cmp	#2,($FFFFFF70).w
0001502C                            ;		beq.s	loc_1DD8C
0001502C                            ;		move	#$48C,2(a0)
0001502C                            ;		move	#-$4FC0,$3E(a0)
0001502C                            ;		move	#-$6E80,$3C(a0)
0001502C                            
0001502C                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
0001502C                            ;		bsr.w	sub_16D6E
0001502C                            
0001502C                            loc_1DD90:				; DATA XREF: h+6DBA?o
0001502C 3468 003E                  		movea.w	$3E(a0),a2
00015030 7000                       		moveq	#0,d0
00015032 1028 001C                  		move.b	$1C(a0),d0
00015036 D040                       		add	d0,d0
00015038 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001503C 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015040                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015040 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015042 0000                       		dc loc_1DDAC-off_1DDA4; 1
00015044 0000                       		dc loc_1DDCC-off_1DDA4; 2
00015046 0000                       		dc loc_1DE20-off_1DDA4; 3
00015048                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015048                            
00015048                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015048 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001504E 4A28 001D                  		tst.b	$1D(a0)
00015052 6600                       		bne.s	loc_1DE28
00015054 316A 0008 0008             		move	8(a2),8(a0)
0001505A 117C 0000 0022             		move.b	#0,$22(a0)
00015060 0268 7FFF 0002             		and	#$7FFF,2(a0)
00015066 6000                       		bra.s	loc_1DE28
00015068                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015068                            
00015068                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015068                            ;		cmp.b	#$C,$28(a2)
00015068                            ;		bcs.s	loc_1DE3E
00015068 0C2A 0004 0024             		cmp.b	#4,$24(a2)
0001506E 6400                       		bcc.s	loc_1DE3E
00015070 4A2A 0039                  		tst.b	$39(a2)
00015074 6700                       		beq.s	loc_1DE3E
00015076 316A 0008 0008             		move	8(a2),8(a0)
0001507C 316A 000C 000C             		move	$C(a2),$C(a0)
00015082 116A 0022 0022             		move.b	$22(a2),$22(a0)
00015088 0228 0001 0022             		and.b	#1,$22(a0)
0001508E 4A28 0034                  		tst.b	$34(a0)
00015092 6700                       		beq.s	loc_1DE06
00015094 5968 000C                  		sub	#4,$C(a0)
00015098                            
00015098                            loc_1DE06:				; CODE XREF: h+6E8A?j
00015098 4A28 001D                  		tst.b	$1D(a0)
0001509C 6600                       		bne.s	loc_1DE28
0001509E 0268 7FFF 0002             		and	#$7FFF,2(a0)
000150A4 4A6A 0002                  		tst	2(a2)
000150A8 6A00                       		bpl.s	loc_1DE28
000150AA 0068 8000 0002             		or	#-$8000,2(a0)
000150B0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150B0                            
000150B0                            loc_1DE20:				; DATA XREF: h+6E30?o
000150B0                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150B0 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150B6 4EB9 0000 CA32             		jsr	AnimateSprite
000150BC 6100 0000                  		bsr.w	loc_1DEE4
000150C0 4EFA A8C4                  		jmp	DisplaySprite
000150C4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C4                            
000150C4                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150C4 117C 0000 001C             		move.b	#0,$1C(a0)
000150CA 4E75                       		rts	
000150CC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150CC                            
000150CC                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150CC 6000 A8F8                  		bra.w	DeleteObject
000150D0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150D0                            
000150D0                            
000150D0                            
000150D0                            loc_1DE4A:
000150D0 3468 003E                  	movea.w	$3E(a0),a2
000150D4 7210                       	moveq	#$10,d1
000150D6 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150DC 6700                       	beq.s	loc_1DE64
000150DE 7206                       	moveq	#$6,d1
000150E0 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150E6 6700                       	beq.s	loc_1DE64
000150E8 117C 0002 0024             	move.b	#2,$24(a0)
000150EE 117C 0000 0032             	move.b	#0,$32(a0)
000150F4 4E75                       	rts
000150F6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150F6                            
000150F6                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150F6 5328 0032                  		subq.b	#1,$32(a0)
000150FA 6A00                       		bpl.s	loc_1DEE0
000150FC 117C 0003 0032             		move.b	#3,$32(a0)
00015102 4EBA AD0E                  		jsr	FindFreeObj
00015106 6600                       		bne.s	loc_1DEE0
00015108 1290                       		move.b	0(a0),0(a1)
0001510A 336A 0008 0008             		move	8(a2),8(a1)
00015110 336A 000C 000C             		move	$C(a2),$C(a1)
00015116 4A28 0034                  		tst.b	$34(a0)
0001511A 6700                       		beq.s	loc_1DE9A
0001511C 5941                       		sub	#4,d1
0001511E                            
0001511E                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001511E D369 000C                  		add	d1,$C(a1)
00015122 137C 0000 0022             		move.b	#0,$22(a1)
00015128 137C 0003 001C             		move.b	#3,$1C(a1)
0001512E 5429 0024                  		addq.b	#2,$24(a1)
00015132 2368 0004 0004             		move.l	4(a0),4(a1)
00015138 1368 0001 0001             		move.b	1(a0),1(a1)
0001513E 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015144 137C 0004 0014             		move.b	#4,obActWid(a1)
0001514A 3368 0002 0002             		move	2(a0),2(a1)
00015150 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015156 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001515C 4A6A 0002                  		tst	2(a2)
00015160 6A00                       		bpl.s	loc_1DEE0
00015162 0069 8000 0002             		or	#-$8000,2(a1)
00015168                            
00015168                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015168 6100                       		bsr.s	loc_1DEE4
0001516A 4E75                       		rts	
0001516C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001516C                            
0001516C                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001516C 7000                       		moveq	#0,d0
0001516E 1028 001A                  		move.b	$1A(a0),d0
00015172 B028 0030                  		cmp.b	$30(a0),d0
00015176 6700 0000                  		beq.w	locret_1DF36
0001517A 1140 0030                  		move.b	d0,$30(a0)
0001517E 45F9 0000 0000             		lea	(off_1E074).l,a2
00015184 D040                       		add	d0,d0
00015186 D4F2 0000                  		add	(a2,d0.w),a2
0001518A 3A1A                       		move	(a2)+,d5
0001518C 5345                       		subq	#1,d5
0001518E 6B00 0000                  		bmi.w	locret_1DF36
00015192 3828 003C                  		move $3C(a0),d4
00015196                            
00015196                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015196 7200                       		moveq	#0,d1
00015198 321A                       		move	(a2)+,d1
0001519A 3601                       		move	d1,d3
0001519C E04B                       		lsr.w	#8,d3
0001519E 0243 00F0                  		and	#$F0,d3	; 'ð'
000151A2 0643 0010                  		add	#$10,d3
000151A6 0241 0FFF                  		and	#$FFF,d1
000151AA EB89                       		lsl.l	#5,d1
000151AC 0681 0000 0000             		add.l	#Art_Dust,d1
000151B2 3404                       		move	d4,d2
000151B4 D843                       		add	d3,d4
000151B6 D843                       		add	d3,d4
000151B8 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000151BE 51CD FFD6                  		dbf	d5,loc_1DF0A
000151C2 4E75                           rts
000151C4                            
000151C4                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151C4 4E75                       		rts	
000151C6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151C6 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151C8 0000                       		dc byte_1DF43-off_1DF38; 1
000151CA 0000                       		dc byte_1DF4F-off_1DF38; 2
000151CC 0000                       		dc byte_1DF58-off_1DF38; 3
000151CE 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151D1 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151DD 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151E6 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151EC                            ; -------------------------------------------------------------------------------
000151EC                            ; Unknown Sprite Mappings
000151EC                            ; -------------------------------------------------------------------------------
000151EC                            MapUnc_1DF5E:
000151EC 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151EE 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151F0 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151F2 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151F4 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151F6 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151F8 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151FA 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000151FC 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000151FE 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015200 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00015202 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00015204 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00015206 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00015208 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001520A 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001520C 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001520E 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015210 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015212 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00015214 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00015216 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00015218 00                         word_1DF8A:	dc.b 0
00015219 01                         word_1DF8C:	dc.b 1
0001521A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001521F 01                         word_1DF96:	dc.b 1
00015220 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015225 01                         word_1DFA0:	dc.b 1
00015226 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001522B 01                         word_1DFAA:	dc.b 1
0001522C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015231 01                         word_1DFB4:	dc.b 1
00015232 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015237 01                         word_1DFBE:	dc.b 1
00015238 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001523D 01                         word_1DFC8:	dc.b 1
0001523E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015243 01                         word_1DFD2:	dc.b 1
00015244 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015249 01                         word_1DFDC:	dc.b 1
0001524A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001524F 01                         word_1DFE6:	dc.b 1
00015250 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015255 01                         word_1DFF0:	dc.b 1
00015256 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001525B 01                         word_1DFFA:	dc.b 1
0001525C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015261 02                         word_1E004:	dc.b 2
00015262 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015267 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001526C 02                         word_1E016:	dc.b 2
0001526D F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015272 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015277 02                         word_1E028:	dc.b 2
00015278 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001527D 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015282 02                         word_1E03A:	dc.b 2
00015283 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015288 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001528D 01                         word_1E04C:	dc.b 1
0001528E F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015293 01                         word_1E056:	dc.b 1
00015294 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015299 01                         word_1E060:	dc.b 1
0001529A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001529F 01                         word_1E06A:	dc.b 1
000152A0 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000152A5 00                         	dc.b 0
000152A6 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000152A8 0000                       	dc word_1E0A2-off_1E074; 1
000152AA 0000                       	dc word_1E0A6-off_1E074; 2
000152AC 0000                       	dc word_1E0AA-off_1E074; 3
000152AE 0000                       	dc word_1E0AE-off_1E074; 4
000152B0 0000                       	dc word_1E0B2-off_1E074; 5
000152B2 0000                       	dc word_1E0B6-off_1E074; 6
000152B4 0000                       	dc word_1E0BA-off_1E074; 7
000152B6 0000                       	dc word_1E0BE-off_1E074; 8
000152B8 0000                       	dc word_1E0C2-off_1E074; 9
000152BA 0000                       	dc word_1E0C6-off_1E074; 10
000152BC 0000                       	dc word_1E0CA-off_1E074; 11
000152BE 0000                       	dc word_1E0CE-off_1E074; 12
000152C0 0000                       	dc word_1E0D2-off_1E074; 13
000152C2 0000                       	dc word_1E0D8-off_1E074; 14
000152C4 0000                       	dc word_1E0DE-off_1E074; 15
000152C6 0000                       	dc word_1E0E4-off_1E074; 16
000152C8 0000                       	dc word_1E0EA-off_1E074; 17
000152CA 0000                       	dc word_1E0EA-off_1E074; 18
000152CC 0000                       	dc word_1E0EA-off_1E074; 19
000152CE 0000                       	dc word_1E0EA-off_1E074; 20
000152D0 0000                       	dc word_1E0EC-off_1E074; 21
000152D2 0000                       word_1E0A0:	dc 0
000152D4 0001                       word_1E0A2:	dc 1
000152D6 7000                       	dc $7000
000152D8 0001                       word_1E0A6:	dc 1
000152DA F008                       	dc $F008
000152DC 0001                       word_1E0AA:	dc 1
000152DE F018                       	dc $F018
000152E0 0001                       word_1E0AE:	dc 1
000152E2 F028                       	dc $F028
000152E4 0001                       word_1E0B2:	dc 1
000152E6 F038                       	dc $F038
000152E8 0001                       word_1E0B6:	dc 1
000152EA F048                       	dc $F048
000152EC 0001                       word_1E0BA:	dc 1
000152EE 7058                       	dc $7058
000152F0 0001                       word_1E0BE:	dc 1
000152F2 7060                       	dc $7060
000152F4 0001                       word_1E0C2:	dc 1
000152F6 7068                       	dc $7068
000152F8 0001                       word_1E0C6:	dc 1
000152FA 7070                       	dc $7070
000152FC 0001                       word_1E0CA:	dc 1
000152FE 7078                       	dc $7078
00015300 0001                       word_1E0CE:	dc 1
00015302 7080                       	dc $7080
00015304 0002                       word_1E0D2:	dc 2
00015306 1088                       	dc $1088
00015308 708A                       	dc $708A
0001530A 0002                       word_1E0D8:	dc 2
0001530C 3092                       	dc $3092
0001530E 7096                       	dc $7096
00015310 0002                       word_1E0DE:	dc 2
00015312 509E                       	dc $509E
00015314 70A4                       	dc $70A4
00015316 0002                       word_1E0E4:	dc 2
00015318 50AC                       	dc $50AC
0001531A 70B2                       	dc $70B2
0001531C 0000                       word_1E0EA:	dc 0
0001531E 0001                       word_1E0EC:	dc 1
00015320 F0BA                       	dc $F0BA
00015322                            	even
00015322                            
00015322                            ; ===========================================================================
00015322                            
00015322                            LoadPlayerPal:
00015322 7000                       		moveq	#0,d0
00015324 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015328 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001532C 4E75                       		rts
0001532E                            
0001532E                            	@palLUT:
0001532E 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015333 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
00015338                            
00015338                            LoadPlayerWaterPal:
00015338 7000                       		moveq	#0,d0
0001533A 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001533E 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015342 4E75                       		rts
00015344                            
00015344                            	@palLUT:
00015344 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015349 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
0001534E                            
0001534E                            ; ---------------------------------------------------------------------------
0001534E                            ; Object 01 - Sonic
0001534E                            ; ---------------------------------------------------------------------------
0001534E                            
0001534E                            SonicPlayer:
0001534E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015352 6700                       		beq.s	Sonic_Normal	; if not, branch
00015354 4EF9 0000 0000             		jmp	(DebugMode).l
0001535A                            ; ===========================================================================
0001535A                            
0001535A                            Sonic_Normal:
0001535A 7000                       		moveq	#0,d0
0001535C 1028 0024                  		move.b	obRoutine(a0),d0
00015360 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015364 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015368                            ; ===========================================================================
00015368 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001536A 0000                       		dc.w Sonic_Control-Sonic_Index
0001536C 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001536E 0000                       		dc.w Sonic_Death-Sonic_Index
00015370 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015372                            ; ===========================================================================
00015372                            
00015372                            Sonic_Main:	; Routine 0
00015372 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015378 5428 0024                  		addq.b	#2,obRoutine(a0)
0001537C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015382 117C 0009 0017             		move.b	#9,obWidth(a0)
00015388 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015390 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015396 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001539C 117C 0018 0014             		move.b	#$18,obActWid(a0)
000153A2 117C 0004 0001             		move.b	#4,obRender(a0)
000153A8 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000153AE 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000153B4 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000153BA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000153C0                            
000153C0                            Sonic_Control:    ; Routine 2
000153C0 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000153C4 6700 0000                  		beq.w	@cont    
000153C8 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000153CA                             
000153CA                            	@cont: 
000153CA 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000153CE 6700                       		beq.s    loc_12C58    ; if not, branch
000153D0 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153D6 6700                       		beq.s    loc_12C58    ; if not, branch
000153D8 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153DE 4238 F7CC                  		clr.b    (f_lockctrl).w
000153E2 4E75                       		rts
000153E4                            		
000153E4                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153E4                            ; ---------------------------------------------------------------------------
000153E4                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153E4                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153E4                            ; ---------------------------------------------------------------------------
000153E4                            
000153E4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153E4                            
000153E4                            
000153E4                            Sonic_PanCamera:
000153E4 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153E8 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153EC 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153EE 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153F0                            
000153F0                                @abs_inertia:
000153F0                            
000153F0                            ; These lines were intended to prevent the Camera from panning while
000153F0                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153F0                            ; However, given that no such object exists in Sonic 1, I just went
000153F0                            ; ahead and commented these out.
000153F0                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000153F0                            ;        beq.s    @skip                    ; if not, branch
000153F0                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153F0                            ;        bcs.s    @reset_pan                ; if so, branch
000153F0                            
000153F0                            ; These lines aren't part of the original routine; I added them myself.
000153F0                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153F0                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153F0 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153F4 6700                               beq.s    @skip                    ; if not, branch
000153F6 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153FC 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153FE 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015400                            
00015400                                @skip:
00015400 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015404 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
00015406 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
0001540A 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
0001540C                            
0001540C                                @pan_right:
0001540C 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001540E 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015412 6500                               bcs.s    @update_pan                ; if not, branch
00015414 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00015418 6000                               bra.s    @update_pan                ; branch
0001541A                            ; ---------------------------------------------------------------------------
0001541A                            
0001541A                                @pan_left:
0001541A 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001541C 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015420 6400                               bcc.s    @update_pan                ; if not, branch
00015422 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015426 6000                               bra.s    @update_pan                ; branch
00015428                            ; ---------------------------------------------------------------------------
00015428                            
00015428                                @reset_pan:
00015428 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
0001542C 6700                               beq.s    @update_pan                ; if so, branch
0001542E 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015430                                 
00015430                                @reset_right:
00015430 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015432 6000                               bra.s    @update_pan                ; branch
00015434                            ; ---------------------------------------------------------------------------
00015434                            
00015434                                @reset_left:
00015434 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015436                            
00015436                                @update_pan:
00015436 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001543A 4E75                               rts                                ; return
0001543C                                 
0001543C                            ; End of function Sonic_PanCamera
0001543C                            
0001543C                            
0001543C                            ; ===========================================================================
0001543C                            
0001543C                            loc_12C58:
0001543C 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015440 6600                       		bne.s	loc_12C64	; if yes, branch
00015442 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015448                            
00015448                            loc_12C64:
00015448 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001544E 6600                       		bne.s	loc_12C7E	; if yes, branch
00015450 7000                       		moveq	#0,d0
00015452 1028 0022                  		move.b	obStatus(a0),d0
00015456 0240 0006                  		andi.w	#6,d0
0001545A 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001545E 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015462                            
00015462                            loc_12C7E:
00015462 6100                       		bsr.s	Sonic_Display
00015464 6100 0000                  		bsr.w	Sonic_RecordPosition
00015468 6100 0000                  		bsr.w	Sonic_Water
0001546C 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015472 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015478 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001547C 6700                       		beq.s	loc_12CA6
0001547E 4A28 001C                  		tst.b	obAnim(a0)
00015482 6600                       		bne.s	loc_12CA6
00015484 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001548A                            
0001548A                            loc_12CA6:
0001548A 6100 0000                  		bsr.w	Sonic_Animate
0001548E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015492 6B00                       		bmi.s	loc_12CB6
00015494 4EB9 0000 0000             		jsr	(ReactToItem).l
0001549A                            
0001549A                            loc_12CB6:
0001549A 6100 0000                  		bsr.w	Sonic_Loops
0001549E 6100 0000                  		bsr.w	Sonic_LoadGfx
000154A2 4E75                       		rts	
000154A4                            ; ===========================================================================
000154A4 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000154A6 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000154A8 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000154AA 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000154AC                            ; ---------------------------------------------------------------------------
000154AC                            ; Music	to play	after invincibility wears off
000154AC                            ; ---------------------------------------------------------------------------
000154AC                            MusicList2:
000154AC 00                         		dc.b bgm_GHZ
000154AD 00                         		dc.b bgm_LZ
000154AE 00                         		dc.b bgm_MZ
000154AF 00                         		dc.b bgm_SLZ
000154B0 00                         		dc.b bgm_SYZ
000154B1 00                         		dc.b bgm_SBZ
000154B2                            		; The ending doesn't get an entry
000154B2                            		even
000154B2                            
000154B2                            		include	"_incObj\Sonic Display.asm"
000154B2                            ; ---------------------------------------------------------------------------
000154B2                            ; Subroutine to display Sonic and set music
000154B2                            ; ---------------------------------------------------------------------------
000154B2                            
000154B2                            Sonic_Display:
000154B2 3028 0030                  		move.w    flashtime(a0),d0
000154B6 6700                       		beq.s    @showAfterImage
000154B8 5368 0030                  		subq.w    #1,flashtime(a0)
000154BC E648                               	lsr.w    #3,d0
000154BE 6400                               	bcc.s    @chkinvincible
000154C0                            
000154C0                            	@showAfterImage:
000154C0 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000154C4 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000154C6 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000154C8 4440                       		neg        d0                    ; if not, negate it
000154CA                            
000154CA                            	@AfterImage_Start:        
000154CA 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154CE 6700                       		beq.s	@display	; if not, don't show the After Image
000154D0                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000154D0                            		;blt.s    @display	; if not, don't show the After Image
000154D0                            	
000154D0                            	@AfterImage_Start2:    
000154D0 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154D4 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154D6 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154DA 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154E0 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154E6 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154EC                            
000154EC                                	@display:
000154EC 4EB9 0000 F986                     	jsr    (DisplaySprite).l
000154F2                            
000154F2                            	@chkinvincible:
000154F2 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154F6 6700                       		beq.s	@chkshoes	; if not, branch
000154F8 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154FC 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154FE 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
00015502 6600                       		bne.s	@chkshoes
00015504 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015508 6600                       		bne.s	@removeinvincible
0001550A 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015510 6500                       		bcs.s	@removeinvincible
00015512 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015516 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
0001551C                            
0001551C                            	@removeinvincible:
0001551C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015522                            
00015522                            	@chkshoes:
00015522 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015526 6700                       		beq.s	@exit		; if not, branch
00015528 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
0001552C 6700                       		beq.s	@exit
0001552E 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015532 6600                       		bne.s	@exit
00015534 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001553A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015540 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015546 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001554C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015550 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
00015556                            		
00015556                            	@exit:
00015556 4E75                       		rts	
00015556 4E75                       		rts	
00015558                            		include	"_incObj\Sonic RecordPosition.asm"
00015558                            ; ---------------------------------------------------------------------------
00015558                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015558                            ; ---------------------------------------------------------------------------
00015558                            
00015558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015558                            
00015558                            
00015558                            Sonic_RecordPosition:
00015558 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001555C 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015560 43F1 0000                  		lea	(a1,d0.w),a1
00015564 32E8 0008                  		move.w	obX(a0),(a1)+
00015568 32E8 000C                  		move.w	obY(a0),(a1)+
0001556C 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015570 4E75                       		rts	
00015572                            ; End of function Sonic_RecordPosition
00015572                            ; End of function Sonic_RecordPosition
00015572                            		include	"_incObj\Sonic Water.asm"
00015572                            ; ---------------------------------------------------------------------------
00015572                            ; Subroutine for Sonic when he's underwater
00015572                            ; ---------------------------------------------------------------------------
00015572                            
00015572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015572                            
00015572                            
00015572                            Sonic_Water:
00015572 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015578 6700                       		beq.s	WaterTagforMZ	; if yes, branch
0001557A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015580 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015582                            
00015582                            	Sonic_Water_Exit:
00015582 4E75                       		rts	
00015584                            ; ===========================================================================
00015584                            
00015584                            	Sonic_Water_LZ:
00015584 3038 F646                  		move.w	(v_waterpos1).w,d0
00015588 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001558C 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015590 6000 0000                  		bra	WaterStatus
00015594                            	WaterTagforMZ:
00015594 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001559A 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001559E                            		;move.w #$F,d0             ;TIS Length ($F = full line)
0001559E                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
0001559E                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001559E                            	;	jsr	Palload_Loop
0001559E                            	WaterStatus:
0001559E 08E8 0006 0022             		bset	#6,obStatus(a0)
000155A4 6600 FFDC                  		bne.w	Sonic_Water_Exit
000155A8 6100 0000                  		bsr.w	ResumeMusic
000155AC 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155B2                            
000155B2 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155B8 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155BE 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155C4 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155CA 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155D0 E0E8 0010                  		asr	obVelX(a0)
000155D4 E0E8 0012                  		asr	obVelY(a0)
000155D8 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155DC 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155E0                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155E0 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000155F0 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000155F6 6600 0000                  		bne.w	@return
000155FA                            		
000155FA                            		
000155FA                            	@return:
000155FA 4E75                       		rts
000155FC                            ; ===========================================================================
000155FC                            
000155FC                            Abovewater:
000155FC 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015602 6700 FF7E                  		beq.w	Sonic_Water_Exit
00015606 6100 0000                  		bsr.w	ResumeMusic
0001560A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015610                            
00015610 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015616 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001561C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015622 E1E8 0012                  		asl	obVelY(a0)
00015626 6700 FF5A                  		beq.w	Sonic_Water_Exit
0001562A 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015630 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015636 6E00                       		bgt.s	@belowmaxspeed
00015638 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001563E                            
0001563E                            	@belowmaxspeed:
00015648                            ; End of function Sonic_Water
00015648                            ; End of function Sonic_Water
00015648                            		include "_incObj\03 Hangable Sprite.asm"
00015648                            ; ===========================================================================
00015648                            ; ----------------------------------------------------------------------------
00015648                            ; Object 03 - Invisible sprite that you can hang on to
00015648                            ; ----------------------------------------------------------------------------
00015648                            ; Sprite_2C92C:
00015648                            Obj03:
00015648 7000                       	moveq    #0,d0
0001564A 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001564E 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015652 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015656                            ; ===========================================================================
00015656                            ; off_2C93A:
00015656                            Obj03_Index:
00015656 0000                           dc.w Obj03_Main-Obj03_Index
00015658 0000                               dc.w Obj03_Init-Obj03_Index
0001565A                            ; ===========================================================================
0001565A                            ; loc_2C93E:
0001565A                            Obj03_Init:
0001565A 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001565E 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015664 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001566A 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015670                            ; loc_2C954:
00015670                            Obj03_Main:
00015670 45E8 0030                      lea    $30(a0),a2
00015674 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015678 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001567C 6100                           bsr.s    Obj03_Check
0001567E                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001567E                            ;    addq.w    #1,a2                          ;disabled
0001567E                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001567E                            ;    bsr.s    Obj03_Check         	;disabled
0001567E 4EF9 0000 0000             	jmp		bonu_chkdel
00015684                            ; ===========================================================================
00015684                            ; loc_2C972:
00015684                            Obj03_Check:
00015684 4A12                       		tst.b	(a2)
00015686 6700                       		beq.s	loc_2C9A0
00015688 0200 0070                  		andi.b	#btnABC,d0
0001568C 6700 0000                  		beq.w	Obj03_Check_End
00015690 4238 F7C8                  		clr.b	f_lockmulti.w
00015694 4212                       		clr.b	(a2)
00015696 157C 0012 0002             		move.b	#$12,2(a2)
0001569C 0240 0F00                  		andi.w	#$F00,d0
000156A0 6700                       		beq.s	loc_2C954
000156A2 157C 003C 0002             		move.b	#$3C,2(a2)
000156A8                            	
000156A8                            loc_2C954:
000156A8 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156AE 6000 0000                  		bra.w	Obj03_Check_End
000156B2                            ; ===========================================================================
000156B2                            
000156B2                            loc_2C9A0:
000156B2 4A2A 0002                  		tst.b	2(a2)
000156B6 6700                       		beq.s	loc_2C972
000156B8 532A 0002                  		subq.b	#1,2(a2)
000156BC 6600 0000                  		bne.w	Obj03_Check_End
000156C0                            
000156C0                            loc_2C972:
000156C0 3029 0008                  		move.w	obX(a1),d0
000156C4 9068 0008                  		sub.w	obX(a0),d0
000156C8 0640 0018                  		addi.w	#$18,d0
000156CC 0C40 0030                  		cmpi.w	#$30,d0
000156D0 6400 0000                  		bhs.w	Obj03_Check_End
000156D4 3229 000C                  		move.w	obY(a1),d1
000156D8 9268 000C                  		sub.w	obY(a0),d1
000156DC 0C41 0010                  		cmpi.w	#$10,d1
000156E0 6400 0000                  		bhs.w	Obj03_Check_End
000156E4 4A38 F7C8                  		tst.b	f_lockmulti.w
000156E8 6B00                       		bmi.s	Obj03_Check_End
000156EA 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000156F0 6400                       		bhs.s	Obj03_Check_End
000156F2 4A78 FFFA                  		tst.w	(f_debugmode).w
000156F6 6600                       		bne.s	Obj03_Check_End
000156F8 4269 0010                  		clr.w	x_vel(a1)
000156FC 4269 0012                  		clr.w	y_vel(a1)
00015700 4269 0020                  		clr.w	obInertia(a1)
00015704 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001570A 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015710 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015716 14BC 0001                  		move.b	#1,(a2)
0001571A                            
0001571A                            ; return_2CA08:
0001571A                            Obj03_Check_End:
0001571A 4E75                       		rts
0001571A 4E75                       		rts
0001571C                            
0001571C                            ; ===========================================================================
0001571C                            ; ---------------------------------------------------------------------------
0001571C                            ; Modes	for controlling	Sonic
0001571C                            ; ---------------------------------------------------------------------------
0001571C                            
0001571C                            Sonic_MdNormal:
0001571C 6100 0000                  		bsr.w	Sonic_Peelout
00015720 6100 0000                  		bsr.w	Sonic_SpinDash
00015724 6100 0000                  		bsr.w	Sonic_Jump
00015728 6100 0000                  		bsr.w	Sonic_SlopeResist
0001572C 6100 0000                  		bsr.w	Sonic_Move
00015730 6100 0000                  		bsr.w	Sonic_Roll
00015734 6100 0000                  		bsr.w	Sonic_LevelBound
00015738 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001573E 6100 0000                  		bsr.w	Sonic_AnglePos
00015742 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015746 4E75                       		rts	
00015748                            
00015748                            ; ===========================================================================
00015748                            
00015748                            Sonic_MdJump:
00015748 6100 0000                  		bsr.w   Sonic_AirRoll
0001574C 6100 0000                  		bsr.w	Sonic_JumpHeight
00015750 6100 0000                  		bsr.w	Sonic_JumpDirection
00015754 6100 0000                  		bsr.w	Sonic_LevelBound
00015758 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001575E 0828 0006 0022             		btst	#6,obStatus(a0)
00015764 6700                       		beq.s	loc_12E5C
00015766 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001576C                            
0001576C                            loc_12E5C:
0001576C 6100 0000                  		bsr.w	Sonic_JumpAngle
00015770 6100 0000                  		bsr.w	Sonic_Floor
00015774 4E75                       		rts	
00015776                            ; ===========================================================================
00015776                            
00015776                            Sonic_MdRoll:
00015776 6100 0000                  		bsr.w	Sonic_Jump
0001577A 6100 0000                  		bsr.w	Sonic_RollRepel
0001577E 6100 0000                  		bsr.w	Sonic_RollSpeed
00015782 6100 0000                  		bsr.w	Sonic_LevelBound
00015786 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001578C 6100 0000                  		bsr.w	Sonic_AnglePos
00015790 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015794 4E75                       		rts	
00015796                            ; ===========================================================================
00015796                            
00015796                            Sonic_MdJump2:
00015796 6100 0000                  		bsr.w	Sonic_JumpHeight
0001579A 6100 0000                  		bsr.w	Sonic_JumpDirection
0001579E 6100 0000                  		bsr.w	Sonic_LevelBound
000157A2 4EB9 0000 F93A             		jsr	(ObjectFall).l
000157A8 0828 0006 0022             		btst	#6,obStatus(a0)
000157AE 6700                       		beq.s	loc_12EA6
000157B0 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157B6                            
000157B6                            loc_12EA6:
000157B6 6100 0000                  		bsr.w	Sonic_JumpAngle
000157BA 6100 0000                  		bsr.w	Sonic_Floor
000157BE 4E75                       		rts	
000157C0                            
000157C0                            		include	"_incObj\Sonic Move.asm"
000157C0                            ; ---------------------------------------------------------------------------
000157C0                            ; Subroutine to	make Sonic walk/run
000157C0                            ; ---------------------------------------------------------------------------
000157C0                            
000157C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C0                            
000157C0                            
000157C0                            Sonic_Move:
000157C0 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157C4 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157C8 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157CC 4A38 F7CA                  		tst.b	(f_jumponly).w
000157D0 6600 0000                  		bne.w	loc_12FEE
000157D4 4A68 003E                  		tst.w	$3E(a0)
000157D8 6600 0000                  		bne.w	Sonic_ResetScr
000157DC 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000157E2 6700                       		beq.s	@notleft	; if not, branch
000157E4 6100 0000                  		bsr.w	Sonic_MoveLeft
000157E8                            
000157E8                            	@notleft:
000157E8 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000157EE 6700                       		beq.s	@notright	; if not, branch
000157F0 6100 0000                  		bsr.w	Sonic_MoveRight
000157F4                            
000157F4                            	@notright:
000157F4 1028 0026                  		move.b	obAngle(a0),d0
000157F8 0600 0020                  		addi.b	#$20,d0
000157FC 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015800 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015804 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015808 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001580C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015812 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015818 0828 0003 0022             		btst	#3,obStatus(a0)
0001581E 6700                       		beq.s	Sonic_Balance
00015820 7000                       		moveq	#0,d0
00015822 1028 003D                  		move.b	$3D(a0),d0
00015826 ED48                       		lsl.w	#6,d0
00015828 43F8 D000                  		lea	(v_objspace).w,a1
0001582C 43F1 0000                  		lea	(a1,d0.w),a1
00015830 4A29 0022                  		tst.b	obStatus(a1)
00015834 6B00                       		bmi.s	Sonic_LookUp
00015836 7200                       		moveq	#0,d1
00015838 1229 0014                  		move.b	obActWid(a1),d1
0001583C 3401                       		move.w	d1,d2
0001583E D442                       		add.w	d2,d2
00015840 5942                       		subq.w	#4,d2
00015842 D268 0008                  		add.w	obX(a0),d1
00015846 9269 0008                  		sub.w	obX(a1),d1
0001584A 0C41 0004                  		cmpi.w	#4,d1
0001584E 6D00                       		blt.s	loc_12F6A
00015850 B242                       		cmp.w	d2,d1
00015852 6C00                       		bge.s	loc_12F5A
00015854 6000                       		bra.s	Sonic_LookUp
00015856                            ; ===========================================================================
00015856                            
00015856                            Sonic_Balance:
00015856 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001585C 0C41 000C                  		cmpi.w	#$C,d1
00015860 6D00                       		blt.s	Sonic_LookUp
00015862 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015868 6600                       		bne.s	loc_12F62
0001586A                            
0001586A                            loc_12F5A:
0001586A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015870 6000                       		bra.s	loc_12F70
00015872                            ; ===========================================================================
00015872                            
00015872                            loc_12F62:
00015872 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015878 6600                       		bne.s	Sonic_LookUp
0001587A                            
0001587A                            loc_12F6A:
0001587A 08E8 0000 0022             		bset	#0,obStatus(a0)
00015880                            
00015880                            loc_12F70:
00015880 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015886 6000 0000                  		bra.w	Sonic_ResetScr
0001588A                            ; ===========================================================================
0001588A                            
0001588A                            Sonic_LookUp:
0001588A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015890 6700                       		beq.s	Sonic_Duck	; if not, branch
00015892 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00015898 5238 C903                  		addq.b	#1,($FFFFC903).w
0001589C 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000158A2 6500                       		bcs.s	Sonic_ResetScr_Part2
000158A4 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158AA 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000158B0 6700                       		beq.s	loc_12FC2
000158B2 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000158B6 6000                       		bra.s	loc_12FC2
000158B8                            ; ===========================================================================
000158B8                            
000158B8                            Sonic_Duck:
000158B8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000158BE 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158C0 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000158C6 5238 C903                  		addq.b	#1,($FFFFC903).w
000158CA 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000158D0 6500                       		bcs.s	Sonic_ResetScr_Part2
000158D2 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158D8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000158DE 6700                       		beq.s	loc_12FC2
000158E0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158E4 6000                       		bra.s	loc_12FC2
000158E6                            ; ===========================================================================
000158E6                            
000158E6                            Sonic_ResetScr:
000158E6 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158EC                            		
000158EC                            Sonic_ResetScr_Part2:
000158EC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F2 6700                       		beq.s	loc_12FC2	; if yes, branch
000158F4 6400                       		bcc.s	loc_12FBE
000158F6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000158FA                            
000158FA                            loc_12FBE:
000158FA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000158FE                            
000158FE                            loc_12FC2:
000158FE 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015902 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015906 6600                       		bne.s	loc_12FEE	; if yes, branch
00015908 3028 0020                  		move.w	obInertia(a0),d0
0001590C 6700                       		beq.s	loc_12FEE
0001590E 6B00                       		bmi.s	loc_12FE2
00015910 9045                       		sub.w	d5,d0
00015912 6400                       		bcc.s	loc_12FDC
00015914 303C 0000                  		move.w	#0,d0
00015918                            
00015918                            loc_12FDC:
00015918 3140 0020                  		move.w	d0,obInertia(a0)
0001591C 6000                       		bra.s	loc_12FEE
0001591E                            ; ===========================================================================
0001591E                            
0001591E                            loc_12FE2:
0001591E D045                       		add.w	d5,d0
00015920 6400                       		bcc.s	loc_12FEA
00015922 303C 0000                  		move.w	#0,d0
00015926                            
00015926                            loc_12FEA:
00015926 3140 0020                  		move.w	d0,obInertia(a0)
0001592A                            
0001592A                            loc_12FEE:
0001592A 4A28 0039                  		tst.b	$39(a0) 	;Peelout
0001592E 6600                       		bne.s	loc_1300C 	;Peelout
00015930 1028 0026                  		move.b	obAngle(a0),d0
00015934 4EB9 0000 3A36             		jsr	(CalcSine).l
0001593A C3E8 0020                  		muls.w	obInertia(a0),d1
0001593E E081                       		asr.l	#8,d1
00015940 3141 0010                  		move.w	d1,obVelX(a0)
00015944 C1E8 0020                  		muls.w	obInertia(a0),d0
00015948 E080                       		asr.l	#8,d0
0001594A 3140 0012                  		move.w	d0,obVelY(a0)
0001594E                            
0001594E                            loc_1300C:
0001594E 1028 0026                  		move.b	obAngle(a0),d0
00015952 0600 0040                  		addi.b	#$40,d0
00015956 6B00                       		bmi.s	locret_1307C
00015958 123C 0040                  		move.b	#$40,d1
0001595C 4A68 0020                  		tst.w	obInertia(a0)
00015960 6700                       		beq.s	locret_1307C
00015962 6B00                       		bmi.s	loc_13024
00015964 4441                       		neg.w	d1
00015966                            
00015966                            loc_13024:
00015966 1028 0026                  		move.b	obAngle(a0),d0
0001596A D001                       		add.b	d1,d0
0001596C 3F00                       		move.w	d0,-(sp)
0001596E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015972 301F                       		move.w	(sp)+,d0
00015974 4A41                       		tst.w	d1
00015976 6A00                       		bpl.s	locret_1307C
00015978 E141                       		asl.w	#8,d1
0001597A 0600 0020                  		addi.b	#$20,d0
0001597E 0200 00C0                  		andi.b	#$C0,d0
00015982 6700                       		beq.s	loc_13078
00015984 0C00 0040                  		cmpi.b	#$40,d0
00015988 6700                       		beq.s	loc_13066
0001598A 0C00 0080                  		cmpi.b	#$80,d0
0001598E 6700                       		beq.s	loc_13060
00015990 D368 0010                  		add.w	d1,obVelX(a0)
00015994 08E8 0005 0022             		bset	#5,obStatus(a0)
0001599A 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A0 4E75                       		rts	
000159A2                            ; ===========================================================================
000159A2                            
000159A2                            loc_13060:
000159A2 9368 0012                  		sub.w	d1,obVelY(a0)
000159A6 4E75                       		rts	
000159A8                            ; ===========================================================================
000159A8                            
000159A8                            loc_13066:
000159A8 9368 0010                  		sub.w	d1,obVelX(a0)
000159AC 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B2 317C 0000 0020             		move.w	#0,obInertia(a0)
000159B8 4E75                       		rts	
000159BA                            ; ===========================================================================
000159BA                            
000159BA                            loc_13078:
000159BA D368 0012                  		add.w	d1,obVelY(a0)
000159BE                            
000159BE                            locret_1307C:
000159BE 4E75                       		rts	
000159C0                            ; End of function Sonic_Move
000159C0                            
000159C0                            
000159C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C0                            
000159C0                            
000159C0                            Sonic_MoveLeft:
000159C0 3028 0020                  		move.w	obInertia(a0),d0
000159C4 6700                       		beq.s	loc_13086
000159C6 6A00                       		bpl.s	loc_130B2
000159C8                            
000159C8                            loc_13086:
000159C8 08E8 0000 0022             		bset	#0,$22(a0)
000159CE 6600                       		bne.s	loc_1309A
000159D0 08A8 0005 0022             		bclr	#5,$22(a0)
000159D6 117C 0001 001D             		move.b	#1,$1D(a0)
000159DC                            
000159DC                            loc_1309A:
000159DC 9045                       		sub.w	d5,d0
000159DE 3206                       		move.w	d6,d1
000159E0 4441                       		neg.w	d1
000159E2 B041                       		cmp.w	d1,d0
000159E4 6E00                       		bgt.s	loc_130A6
000159E6 D045                       		add.w	d5,d0
000159E8 B041                       		cmp.w	d1,d0
000159EA 6F00                       		ble.s	loc_130A6
000159EC 3001                       		move.w	d1,d0
000159EE                            
000159EE                            loc_130A6:
000159EE 3140 0020                  		move.w	d0,obInertia(a0)
000159F2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159F8 4E75                       		rts
000159FA                            ; ===========================================================================
000159FA                            
000159FA                            loc_130B2:
000159FA 9044                       		sub.w	d4,d0
000159FC 6400                       		bcc.s	loc_130BA
000159FE 303C FF80                  		move.w	#-$80,d0
00015A02                            
00015A02                            loc_130BA:
00015A02 3140 0020                  		move.w	d0,obInertia(a0)
00015A06 1228 0026                  		move.b	obAngle(a0),d1
00015A0A 0601 0020                  		addi.b	#$20,d1
00015A0E 0201 00C0                  		andi.b	#$C0,d1
00015A12 6600                       		bne.s	locret_130E8
00015A14 0C40 0400                  		cmpi.w	#$400,d0
00015A18 6D00                       		blt.s	locret_130E8
00015A1A 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A20 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A30 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A36 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A3C                            		
00015A3C                            locret_130E8:
00015A3C 4E75                       		rts	
00015A3E                            ; End of function Sonic_MoveLeft
00015A3E                            
00015A3E                            
00015A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A3E                            
00015A3E                            
00015A3E                            Sonic_MoveRight:
00015A3E 3028 0020                  		move.w	obInertia(a0),d0
00015A42 6B00                       		bmi.s	loc_13118
00015A44 08A8 0000 0022             		bclr	#0,$22(a0)
00015A4A 6700                       		beq.s	loc_13104
00015A4C 08A8 0005 0022             		bclr	#5,$22(a0)
00015A52 117C 0001 001D             		move.b	#1,$1D(a0)
00015A58                            
00015A58                            loc_13104:
00015A58 D045                       		add.w	d5,d0
00015A5A B046                       		cmp.w	d6,d0
00015A5C 6D00                       		blt.s	loc_1310C
00015A5E 9045                       		sub.w	d5,d0
00015A60 B046                       		cmp.w	d6,d0
00015A62 6C00                       		bge.s	loc_1310C
00015A64 3006                       		move.w	d6,d0
00015A66                            
00015A66                            loc_1310C:
00015A66 3140 0020                  		move.w	d0,obInertia(a0)
00015A6A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A70 4E75                       		rts
00015A72                            ; ===========================================================================
00015A72                            
00015A72                            loc_13118:
00015A72 D044                       		add.w	d4,d0
00015A74 6400                       		bcc.s	loc_13120
00015A76 303C 0080                  		move.w	#$80,d0
00015A7A                            
00015A7A                            loc_13120:
00015A7A 3140 0020                  		move.w	d0,obInertia(a0)
00015A7E 1228 0026                  		move.b	obAngle(a0),d1
00015A82 0601 0020                  		addi.b	#$20,d1
00015A86 0201 00C0                  		andi.b	#$C0,d1
00015A8A 6600                       		bne.s	locret_1314E
00015A8C 0C40 FC00                  		cmpi.w	#-$400,d0
00015A90 6E00                       		bgt.s	locret_1314E
00015A92 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A98 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AA8 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AAE 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015AB4                            		
00015AB4                            locret_1314E:
00015AB4 4E75                       		rts	
00015AB6                            ; End of function Sonic_MoveRight
00015AB6                            ; End of function Sonic_MoveRight
00015AB6                            		include	"_incObj\Sonic RollSpeed.asm"
00015AB6                            ; ---------------------------------------------------------------------------
00015AB6                            ; Subroutine to	change Sonic's speed as he rolls
00015AB6                            ; ---------------------------------------------------------------------------
00015AB6                            
00015AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AB6                            
00015AB6                            
00015AB6                            Sonic_RollSpeed:
00015AB6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015ABA E346                       		asl.w	#1,d6
00015ABC 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015ABE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC2 E444                       		asr.w	#2,d4
00015AC4 4A38 F7CA                  		tst.b	(f_jumponly).w
00015AC8 6600 0000                  		bne.w	loc_131CC
00015ACC 4A68 003E                  		tst.w	$3E(a0)
00015AD0 6600                       		bne.s	@notright
00015AD2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015AD8 6700                       		beq.s	@notleft	; if not, branch
00015ADA 6100 0000                  		bsr.w	Sonic_RollLeft
00015ADE                            
00015ADE                            	@notleft:
00015ADE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AE4 6700                       		beq.s	@notright	; if not, branch
00015AE6 6100 0000                  		bsr.w	Sonic_RollRight
00015AEA                            
00015AEA                            	@notright:
00015AEA 3028 0020                  		move.w	obInertia(a0),d0
00015AEE 6700                       		beq.s	loc_131AA
00015AF0 6B00                       		bmi.s	loc_1319E
00015AF2 9045                       		sub.w	d5,d0
00015AF4 6400                       		bcc.s	loc_13198
00015AF6 303C 0000                  		move.w	#0,d0
00015AFA                            
00015AFA                            loc_13198:
00015AFA 3140 0020                  		move.w	d0,obInertia(a0)
00015AFE 6000                       		bra.s	loc_131AA
00015B00                            ; ===========================================================================
00015B00                            
00015B00                            loc_1319E:
00015B00 D045                       		add.w	d5,d0
00015B02 6400                       		bcc.s	loc_131A6
00015B04 303C 0000                  		move.w	#0,d0
00015B08                            
00015B08                            loc_131A6:
00015B08 3140 0020                  		move.w	d0,obInertia(a0)
00015B0C                            
00015B0C                            loc_131AA:
00015B0C 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B10 6600                       		bne.s	loc_131CC	; if yes, branch
00015B12 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B18 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B1E 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B24 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B2A 5B68 000C                  		subq.w	#5,obY(a0)
00015B2E                            
00015B2E                            loc_131CC:
00015B2E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B34 6700                       		beq.s	@cont2
00015B36 6400                       		bcc.s	@cont1
00015B38 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B3C                            		
00015B3C                            @cont1:
00015B3C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B40                            		
00015B40                            @cont2:
00015B40 1028 0026                  		move.b	obAngle(a0),d0
00015B44 4EB9 0000 3A36             		jsr	(CalcSine).l
00015B4A C1E8 0020                  		muls.w	obInertia(a0),d0
00015B4E E080                       		asr.l	#8,d0
00015B50 3140 0012                  		move.w	d0,obVelY(a0)
00015B54 C3E8 0020                  		muls.w	obInertia(a0),d1
00015B58 E081                       		asr.l	#8,d1
00015B5A 0C41 1000                  		cmpi.w	#$1000,d1
00015B5E 6F00                       		ble.s	loc_131F0
00015B60 323C 1000                  		move.w	#$1000,d1
00015B64                            
00015B64                            loc_131F0:
00015B64 0C41 F000                  		cmpi.w	#-$1000,d1
00015B68 6C00                       		bge.s	loc_131FA
00015B6A 323C F000                  		move.w	#-$1000,d1
00015B6E                            
00015B6E                            loc_131FA:
00015B6E 3141 0010                  		move.w	d1,obVelX(a0)
00015B72 6000 FDDA                  		bra.w	loc_1300C
00015B76                            ; End of function Sonic_RollSpeed
00015B76                            
00015B76                            
00015B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B76                            
00015B76                            
00015B76                            Sonic_RollLeft:
00015B76 3028 0020                  		move.w	obInertia(a0),d0
00015B7A 6700                       		beq.s	loc_1320A
00015B7C 6A00                       		bpl.s	loc_13218
00015B7E                            
00015B7E                            loc_1320A:
00015B7E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B84 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B8A 4E75                       		rts	
00015B8C                            ; ===========================================================================
00015B8C                            
00015B8C                            loc_13218:
00015B8C 9044                       		sub.w	d4,d0
00015B8E 6400                       		bcc.s	loc_13220
00015B90 303C FF80                  		move.w	#-$80,d0
00015B94                            
00015B94                            loc_13220:
00015B94 3140 0020                  		move.w	d0,obInertia(a0)
00015B98 4E75                       		rts	
00015B9A                            ; End of function Sonic_RollLeft
00015B9A                            
00015B9A                            
00015B9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B9A                            
00015B9A                            
00015B9A                            Sonic_RollRight:
00015B9A 3028 0020                  		move.w	obInertia(a0),d0
00015B9E 6B00                       		bmi.s	loc_1323A
00015BA0 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BA6 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BAC 4E75                       		rts	
00015BAE                            ; ===========================================================================
00015BAE                            
00015BAE                            loc_1323A:
00015BAE D044                       		add.w	d4,d0
00015BB0 6400                       		bcc.s	loc_13242
00015BB2 303C 0080                  		move.w	#$80,d0
00015BB6                            
00015BB6                            loc_13242:
00015BB6 3140 0020                  		move.w	d0,obInertia(a0)
00015BBA 4E75                       		rts	
00015BBC                            ; End of function Sonic_RollRight
00015BBC                            ; End of function Sonic_RollRight
00015BBC                            		include	"_incObj\Sonic JumpDirection.asm"
00015BBC                            ; ---------------------------------------------------------------------------
00015BBC                            ; Subroutine to	change Sonic's direction while jumping
00015BBC                            ; ---------------------------------------------------------------------------
00015BBC                            
00015BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BBC                            
00015BBC                            
00015BBC                            Sonic_JumpDirection:
00015BBC 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC0 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BC4 E345                       		asl.w	#1,d5
00015BC6 3028 0010                  		move.w	$10(a0),d0	
00015BCA 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD0 6700                       		beq.s	loc_13278; if not, branch	
00015BD2 08E8 0000 0022             		bset	#0,$22(a0)	
00015BD8 9045                       		sub.w	d5,d0	
00015BDA 3206                       		move.w	d6,d1	
00015BDC 4441                       		neg.w	d1	
00015BDE B041                       		cmp.w	d1,d0	
00015BE0 6E00                       		bgt.s	loc_13278	
00015BE2 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BE4 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BE6 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BE8 3001                       		move.w	d1,d0
00015BEA                            
00015BEA                            loc_13278:
00015BEA 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF0 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF2 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BF8 D045                       		add.w	d5,d0	
00015BFA B046                       		cmp.w	d6,d0	
00015BFC 6D00                       		blt.s	Obj01_JumpMove
00015BFE 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C00 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C02 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C04 3006                       		move.w	d6,d0
00015C06                            
00015C06                            Obj01_JumpMove:
00015C06 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C0A                            
00015C0A                            Obj01_ResetScr2:
00015C0A 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C10 6700                       		beq.s	loc_132A4	; if yes, branch
00015C12 6400                       		bcc.s	loc_132A0
00015C14 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C18                            
00015C18                            loc_132A0:
00015C18 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C1C                            
00015C1C                            loc_132A4:
00015C1C 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C22 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C24 3028 0010                  		move.w	obVelX(a0),d0
00015C28 3200                       		move.w	d0,d1
00015C2A EA41                       		asr.w	#5,d1
00015C2C 6700                       		beq.s	locret_132D2
00015C2E 6B00                       		bmi.s	loc_132C6
00015C30 9041                       		sub.w	d1,d0
00015C32 6400                       		bcc.s	loc_132C0
00015C34 303C 0000                  		move.w	#0,d0
00015C38                            
00015C38                            loc_132C0:
00015C38 3140 0010                  		move.w	d0,obVelX(a0)
00015C3C 4E75                       		rts	
00015C3E                            ; ===========================================================================
00015C3E                            
00015C3E                            loc_132C6:
00015C3E 9041                       		sub.w	d1,d0
00015C40 6500                       		bcs.s	loc_132CE
00015C42 303C 0000                  		move.w	#0,d0
00015C46                            
00015C46                            loc_132CE:
00015C46 3140 0010                  		move.w	d0,obVelX(a0)
00015C4A                            
00015C4A                            locret_132D2:
00015C4A 4E75                       		rts	
00015C4C                            ; End of function Sonic_JumpDirection
00015C4C                            ; End of function Sonic_JumpDirection
00015C4C                            		include "_incObj\Sonic Peelout.asm"
00015C4C                            ; ---------------------------------------------------------------------------
00015C4C                            ; Subroutine to make Sonic perform a peelout
00015C4C                            ; ---------------------------------------------------------------------------
00015C4C                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4C                            
00015C4C                            Sonic_Peelout:
00015C4C 0828 0001 0039             		btst	#1,$39(a0)
00015C52 6600                       		bne.s	SCDPeelout_Launch
00015C54 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C5A 6600                       		bne.s	@return
00015C5C 1038 F603                  		move.b	($FFFFF603).w,d0
00015C60 0200 0070                  		andi.b	#%01110000,d0
00015C64 6700 0000                  		beq.w	@return
00015C68 117C 0001 001C             		move.b	#1,$1C(a0)
00015C6E 317C 0000 003A             		move.w	#0,$3A(a0)
00015C74 303C 00D2                  		move.w	#$D2,d0
00015C78 4EB9 0000 1254             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C7E                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C7E 588F                       		addq.l	#4,sp
00015C80 08E8 0001 0039             		bset	#1,$39(a0)
00015C86                            		
00015C86 4268 0020                  		clr.w	obInertia(a0)
00015C8A                             
00015C8A 6100 0000                  		bsr.w	Sonic_LevelBound
00015C8E 6100 0000                  		bsr.w	Sonic_AnglePos
00015C92                             
00015C92                            	@return:
00015C92 4E75                       		rts	
00015C94                            ; ---------------------------------------------------------------------------
00015C94                             
00015C94                            SCDPeelout_Launch:
00015C94 0828 0001 0039             		btst	#1,$39(a0)
00015C9A 1038 F602                  		move.b	($FFFFF602).w,d0
00015C9E 0800 0000                  		btst	#0,d0
00015CA2 6600 0000                  		bne.w	SCDPeelout_Charge
00015CA6 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CAC 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB2 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CB6 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CBC 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC2 3028 0020                  		move.w	obInertia(a0),d0
00015CC6 0440 0800                  		subi.w	#$800,d0
00015CCA D040                       		add.w	d0,d0
00015CCC 0240 1F00                  		andi.w	#$1F00,d0
00015CD0 4440                       		neg.w	d0
00015CD2 0640 2000                  		addi.w	#$2000,d0
00015CD6 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CDA 0828 0000 0022             		btst	#0,$22(a0)
00015CE0 6700                       		beq.s	@dontflip
00015CE2 4468 0020                  		neg.w	obInertia(a0)
00015CE6                             
00015CE6                            @dontflip:
00015CE6 08A8 0007 0022             		bclr	#7,$22(a0)
00015CEC 303C 00D3                  		move.w	#$D3,d0
00015CF0 4EB9 0000 1254             		jsr	(PlaySound_Special).l
00015CF6                            	;	sfx 	sfx_PeeloutRelease
00015CF6 1028 0026                  		move.b	obAngle(a0),d0
00015CFA 4EB9 0000 3A36             		jsr	(CalcSine).l
00015D00 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D04 E081                       		asr.l	#8,d1
00015D06 3141 0010                  		move.w	d1,obVelX(a0)
00015D0A C1E8 0020                  		muls.w	obInertia(a0),d0
00015D0E E080                       		asr.l	#8,d0
00015D10 3140 0012                  		move.w	d0,obVelY(a0)	
00015D14 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D18                            ; ---------------------------------------------------------------------------
00015D18                             
00015D18                            SCDPeelout_Charge:				; If still charging the dash...
00015D18 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D1C 3401                       		move.w	d1,d2
00015D1E D241                       		add.w	d1,d1
00015D20 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D24 6700                       		beq.s	@noshoes
00015D26 E242                       		asr.w	#1,d2
00015D28 9242                       		sub.w	d2,d1
00015D2A                            
00015D2A                            @noshoes:
00015D2A 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D30 B268 0020                  		cmp.w	obInertia(a0),d1
00015D34 6E00                       		bgt.s	@inctimer
00015D36 3141 0020                  		move.w	d1,obInertia(a0)
00015D3A                            
00015D3A                            @inctimer:
00015D3A 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D3E 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D44 6500                       		bcs.s	SCDPeelout_ResetScr
00015D46 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D4C 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D52                            		
00015D52                            SCDPeelout_Stop_Sound:
00015D52 303C 00D4                  		move.w	#$D4,d0
00015D56 4EB9 0000 1254             		jsr		(PlaySound_Special).l
00015D5C                            	;	sfx 	sfx_PeeloutStop
00015D5C 4268 0020                  		clr.w	obInertia(a0)
00015D60                            
00015D60                            SCDPeelout_ResetScr:
00015D60 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D62 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D68 6700                       		beq.s	@finish
00015D6A 6400                       		bcc.s	@skip
00015D6C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D70                             
00015D70                            	@skip:
00015D70 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D74                             
00015D74                            	@finish:
00015D74 6100 0000                  		bsr.w	Sonic_LevelBound
00015D78 6100 0000                  		bsr.w	Sonic_AnglePos
00015D7C 4E75                       		rts
00015D7E                            		
00015D7E                            		
00015D7E                            		include "_incObj\Sonic Spindash.asm"
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E                            ; Subroutine to make Sonic perform a spindash
00015D7E                            ; ---------------------------------------------------------------------------
00015D7E                             
00015D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D7E                             
00015D7E                             
00015D7E                            Sonic_SpinDash:
00015D7E 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D82 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D84 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D8A 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D8C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D90 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D94 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D98 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015D9E 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA2 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play spin sound
00015DA8 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DAA 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB0 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DB6                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DB6                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DB6 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DBC                            						; the smoke/dust object
00015DBC                            loc2_1AC84:
00015DBC 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC0 6100 0000                  		bsr.w	Sonic_AnglePos
00015DC4                            
00015DC4                            locret2_1AC8C:
00015DC4 4E75                       		rts	
00015DC6                            ; ---------------------------------------------------------------------------
00015DC6                            
00015DC6                            loc2_1AC8E:	
00015DC6 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DCC 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD0 0800 0001                  		btst	#1,d0			; check down button
00015DD4 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DD8 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DDE 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DE4 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DEA 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DEE 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DF4 7000                       		moveq	#0,d0
00015DF6 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015DFA D040                       		add.w	d0,d0			; double it
00015DFC 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E02 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E06 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E0A D040                       		add.w	d0,d0			; double it
00015E0C 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E10 4440                       		neg.w	d0			; negate it
00015E12 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E16 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E1A 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E20 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E22 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E26                            
00015E26                            loc2_1ACF4:
00015E26 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E2C 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E32 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E36 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play it!
00015E3C 1028 0026                  		move.b	obAngle(a0),d0
00015E40 4EB9 0000 3A36             		jsr	(CalcSine).l
00015E46 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E4A E081                       		asr.l	#8,d1
00015E4C 3141 0010                  		move.w	d1,obVelX(a0)
00015E50 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E54 E080                       		asr.l	#8,d0
00015E56 3140 0012                  		move.w	d0,obVelY(a0)
00015E5A                            	
00015E5A 6000                       		bra.s	loc2_1AD78
00015E5C                            ; ===========================================================================
00015E5C                            Dash_Speeds:
00015E5C 0600                       		dc.w  $600		; 0
00015E5E 0680                       		dc.w  $680		; 1
00015E60 0700                       		dc.w  $700		; 2
00015E62 0780                       		dc.w  $780		; 3
00015E64 0800                       		dc.w  $800		; 4
00015E66 0880                       		dc.w  $880		; 5
00015E68 0900                       		dc.w  $900		; 6
00015E6A 0980                       		dc.w  $980		; 7
00015E6C 0A00                       		dc.w  $A00		; 8
00015E6E                            ; ===========================================================================
00015E6E                            
00015E6E                            loc2_1AD30:				; If still charging the dash...
00015E6E 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E72 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E74 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E78 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E7A 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E7E 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E80 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E86                            
00015E86                            loc2_1AD48:
00015E86 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E8A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E8E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E92 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E98 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015E9C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA2 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play charge sound
00015EA8 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EAE 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EB4 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EB6 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EBC                            
00015EBC                            loc2_1AD78:
00015EBC 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EBE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015EC4 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015EC6 6400                       		bcc.s	loc2_1AD88
00015EC8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ECC                            
00015ECC                            loc2_1AD88:
00015ECC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED0                            
00015ED0                            loc2_1AD8C:
00015ED0 6100 0000                  		bsr.w	Sonic_LevelBound
00015ED4 6100 0000                  		bsr.w	Sonic_AnglePos
00015ED8                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015ED8 4E75                       		rts
00015EDA                            ; End of subroutine Sonic_SpinDash
00015EDA                            ; End of subroutine Sonic_SpinDash
00015EDA                            
00015EDA                            Sonic_AirRoll:
00015EDA 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015EE0 6600                               bne.s   AirRoll_Return   ; if not, return
00015EE2                            
00015EE2                            AirRoll_CheckBtn:
00015EE2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015EE6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015EEA 6700                               beq.s	AirRoll_Return
00015EEC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015EF2                                   ; move.w	#$BC,d0
00015EF2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015EF2                            
00015EF2                            AirRoll_Return:
00015EF2 4E75                               rts
00015EF4                            ; ===========================================================================
00015EF4                            ; ---------------------------------------------------------------------------
00015EF4                            ; Unused subroutine to squash Sonic
00015EF4                            ; ---------------------------------------------------------------------------
00015EF4 1028 0026                  		move.b	obAngle(a0),d0
00015EF8 0600 0020                  		addi.b	#$20,d0
00015EFC 0200 00C0                  		andi.b	#$C0,d0
00015F00 6600                       		bne.s	locret_13302
00015F02 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F06 4A41                       		tst.w	d1
00015F08 6A00                       		bpl.s	locret_13302
00015F0A 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015F10 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F16 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F1C 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015F22                            
00015F22                            locret_13302:
00015F22 4E75                       		rts		
00015F24                            		include	"_incObj\Sonic LevelBound.asm"
00015F24                            ; ---------------------------------------------------------------------------
00015F24                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015F24                            ; ---------------------------------------------------------------------------
00015F24                            
00015F24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F24                            
00015F24                            
00015F24                            Sonic_LevelBound:
00015F24 2228 0008                  		move.l	obX(a0),d1
00015F28 3028 0010                  		move.w	obVelX(a0),d0
00015F2C 48C0                       		ext.l	d0
00015F2E E180                       		asl.l	#8,d0
00015F30 D280                       		add.l	d0,d1
00015F32 4841                       		swap	d1
00015F34 3038 F728                  		move.w	(v_limitleft2).w,d0
00015F38 0640 0010                  		addi.w	#$10,d0
00015F3C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F3E 6200                       		bhi.s	@sides		; if yes, branch
00015F40 3038 F72A                  		move.w	(v_limitright2).w,d0
00015F44 0640 0128                  		addi.w	#$128,d0
00015F48 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015F4C 6600                       		bne.s	@screenlocked
00015F4E 0640 0040                  		addi.w	#$40,d0
00015F52                            
00015F52                            	@screenlocked:
00015F52 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F54 6300                       		bls.s	@sides		; if yes, branch
00015F56                            
00015F56                            	@chkbottom:
00015F56 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015F5A 0640 00E0                  		addi.w	#$E0,d0
00015F5E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015F62 6D00                       		blt.s	@bottom		; if yes, branch
00015F64 4E75                       		rts	
00015F66                            ; ===========================================================================
00015F66                            
00015F66                            @bottom:
00015F66 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015F6A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015F6E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015F70 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015F72 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015F78 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015F7C 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015F82 6500 0000                  		bcs.w	Kill_transport
00015F86 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015F8A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015F90 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015F96 4E75                       		rts	
00015F98                            @dontkill: 
00015F98 4E75                       		rts
00015F9A                            ; ===========================================================================
00015F9A                            
00015F9A                            @sides:
00015F9A 3140 0008                  		move.w	d0,obX(a0)
00015F9E 317C 0000 000A             		move.w	#0,obX+2(a0)
00015FA4 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015FAA 317C 0000 0020             		move.w	#0,obInertia(a0)
00015FB0 60A4                       		bra.s	@chkbottom
00015FB2                            
00015FB2                            Kill_transport: 
00015FB2 4EF9 0000 0000                     	jmp        (KillSonic).l
00015FB8                            
00015FB8                            ; End of function Sonic_LevelBound
00015FB8                            ; End of function Sonic_LevelBound
00015FB8                            		include	"_incObj\Sonic Roll.asm"
00015FB8                            ; ---------------------------------------------------------------------------
00015FB8                            ; Subroutine allowing Sonic to roll when he's moving
00015FB8                            ; ---------------------------------------------------------------------------
00015FB8                            
00015FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FB8                            
00015FB8                            
00015FB8                            Sonic_Roll:
00015FB8 4A38 F7CA                  		tst.b	(f_jumponly).w
00015FBC 6600                       		bne.s	@noroll
00015FBE 3028 0020                  		move.w	obInertia(a0),d0
00015FC2 6A00                       		bpl.s	@ispositive
00015FC4 4440                       		neg.w	d0
00015FC6                            
00015FC6                            	@ispositive:
00015FC6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015FCA 6500                       		bcs.s	@noroll		; if not, branch
00015FCC 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015FD0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015FD4 6600                       		bne.s	@noroll		; if yes, branch
00015FD6 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015FDC 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015FDE                            
00015FDE                            	@noroll:
00015FDE 4E75                       		rts	
00015FE0                            ; ===========================================================================
00015FE0                            
00015FE0                            Sonic_ChkRoll:
00015FE0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015FE6 6700                       		beq.s	@roll		; if not, branch
00015FE8 4E75                       		rts	
00015FEA                            ; ===========================================================================
00015FEA                            
00015FEA                            @roll:
00015FEA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015FF0 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FF6 117C 0007 0017             		move.b	#7,obWidth(a0)
00015FFC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016002 5A68 000C                  		addq.w	#5,obY(a0)
00016010 4A68 0020                  		tst.w	obInertia(a0)
00016014 6600                       		bne.s	@ismoving
00016016 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
0001601C                            
0001601C                            	@ismoving:
0001601C 4E75                       		rts	
0001601E                            ; End of function Sonic_Roll
0001601E                            ; End of function Sonic_Roll
0001601E                            		include	"_incObj\Sonic Jump.asm"
0001601E                            ; ---------------------------------------------------------------------------
0001601E                            ; Subroutine allowing Sonic to jump
0001601E                            ; ---------------------------------------------------------------------------
0001601E                            
0001601E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001601E                            
0001601E                            
0001601E                            Sonic_Jump:
0001601E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00016022 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016026 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001602A 7000                       		moveq	#0,d0
0001602C 1028 0026                  		move.b	obAngle(a0),d0
00016030 0600 0080                  		addi.b	#$80,d0
00016034 6100 0000                  		bsr.w	sub_14D48
00016038 0C41 0006                  		cmpi.w	#6,d1
0001603C 6D00 0000                  		blt.w	locret_1348E
00016040 343C 0680                  		move.w	#$680,d2
00016044 0828 0006 0022             		btst	#6,obStatus(a0)
0001604A 6700                       		beq.s	loc_1341C
0001604C 343C 0380                  		move.w	#$380,d2
00016050                            
00016050                            loc_1341C:
00016050 7000                       		moveq	#0,d0
00016052 1028 0026                  		move.b	obAngle(a0),d0
00016056 0400 0040                  		subi.b	#$40,d0
0001605A 4EB9 0000 3A36             		jsr	(CalcSine).l
00016060 C3C2                       		muls.w	d2,d1
00016062 E081                       		asr.l	#8,d1
00016064 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016068 C1C2                       		muls.w	d2,d0
0001606A E080                       		asr.l	#8,d0
0001606C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016070 08E8 0001 0022             		bset	#1,obStatus(a0)
00016076 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001607C 588F                       		addq.l	#4,sp
0001607E 117C 0001 003C             		move.b	#1,$3C(a0)
00016084 4228 0038                  		clr.b	$38(a0)
00016092 117C 0013 0016             		move.b	#$13,obHeight(a0)
00016098 117C 0009 0017             		move.b	#9,obWidth(a0)
0001609E 117C 000E 0016             		move.b	#$E,obHeight(a0)
000160A4 117C 0007 0017             		move.b	#7,obWidth(a0)
000160AA                            Result_Check:
000160AA 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000160AE 6700                       		beq.s   NormalJump ; If not, branch
000160B0 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
000160B6 6000                       		bra.s   cont ; Continue
000160B8                            NormalJump:
000160B8 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000160BE                            cont:
000160BE 08E8 0002 0022             		bset	#2,obStatus(a0)
000160C4 5A68 000C                  		addq.w	#5,obY(a0)
000160C8                            
000160C8                            locret_1348E:
000160C8 4E75                       		rts	
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            ; End of function Sonic_Jump
000160CA                            ; End of function Sonic_Jump
000160CA                            		include	"_incObj\Sonic JumpHeight.asm"
000160CA                            ; ---------------------------------------------------------------------------
000160CA                            ; Subroutine controlling Sonic's jump height/duration
000160CA                            ; ---------------------------------------------------------------------------
000160CA                            
000160CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160CA                            
000160CA                            
000160CA                            Sonic_JumpHeight:
000160CA 4A28 003C                  		tst.b	$3C(a0)
000160CE 6700                       		beq.s	loc_134C4
000160D0 323C FC00                  		move.w	#-$400,d1
000160D4 0828 0006 0022             		btst	#6,obStatus(a0)
000160DA 6700                       		beq.s	loc_134AE
000160DC 323C FE00                  		move.w	#-$200,d1
000160E0                            
000160E0                            loc_134AE:
000160E0 B268 0012                  		cmp.w	obVelY(a0),d1
000160E4 6F00                       		ble.s	locret_134C2
000160E6 1038 F602                  		move.b	(v_jpadhold2).w,d0
000160EA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000160EE 6600                       		bne.s	locret_134C2	; if yes, branch
000160F0 3141 0012                  		move.w	d1,obVelY(a0)
000160F4                            
000160F4                            locret_134C2:
000160F4 4E75                       		rts	
000160F6                            ; ===========================================================================
000160F6                            
000160F6                            loc_134C4:
000160F6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
000160FC 6C00                       		bge.s	locret_134D2
000160FE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00016104                            
00016104                            locret_134D2:
00016104 4E75                       		rts	
00016106                            ; End of function Sonic_JumpHeight
00016106                            ; End of function Sonic_JumpHeight
00016106                            		include	"_incObj\Sonic SlopeResist.asm"
00016106                            ; ---------------------------------------------------------------------------
00016106                            ; Subroutine to	slow Sonic walking up a	slope
00016106                            ; ---------------------------------------------------------------------------
00016106                            
00016106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016106                            
00016106                            
00016106                            Sonic_SlopeResist:
00016106 1028 0026                  		move.b	obAngle(a0),d0
0001610A 0600 0060                  		addi.b	#$60,d0
0001610E 0C00 00C0                  		cmpi.b	#$C0,d0
00016112 6400                       		bcc.s	locret_13508
00016114 1028 0026                  		move.b	obAngle(a0),d0
00016118 4EB9 0000 3A36             		jsr	(CalcSine).l
0001611E C1FC 0020                  		muls.w	#$20,d0
00016122 E080                       		asr.l	#8,d0
00016124 4A68 0020                  		tst.w	obInertia(a0)
00016128 6700                       		beq.s	locret_13508
0001612A 6B00                       		bmi.s	loc_13504
0001612C 4A40                       		tst.w	d0
0001612E 6700                       		beq.s	locret_13502
00016130 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016134                            
00016134                            locret_13502:
00016134 4E75                       		rts	
00016136                            ; ===========================================================================
00016136                            
00016136                            loc_13504:
00016136 D168 0020                  		add.w	d0,obInertia(a0)
0001613A                            
0001613A                            locret_13508:
0001613A 4E75                       		rts	
0001613C                            ; End of function Sonic_SlopeResist
0001613C                            ; End of function Sonic_SlopeResist
0001613C                            		include	"_incObj\Sonic RollRepel.asm"
0001613C                            ; ---------------------------------------------------------------------------
0001613C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001613C                            ; ---------------------------------------------------------------------------
0001613C                            
0001613C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001613C                            
0001613C                            
0001613C                            Sonic_RollRepel:
0001613C 1028 0026                  		move.b	obAngle(a0),d0
00016140 0600 0060                  		addi.b	#$60,d0
00016144 0C00 00C0                  		cmpi.b	#-$40,d0
00016148 6400                       		bcc.s	locret_13544
0001614A 1028 0026                  		move.b	obAngle(a0),d0
0001614E 4EB9 0000 3A36             		jsr	(CalcSine).l
00016154 C1FC 0050                  		muls.w	#$50,d0
00016158 E080                       		asr.l	#8,d0
0001615A 4A68 0020                  		tst.w	obInertia(a0)
0001615E 6B00                       		bmi.s	loc_1353A
00016160 4A40                       		tst.w	d0
00016162 6A00                       		bpl.s	loc_13534
00016164 E480                       		asr.l	#2,d0
00016166                            
00016166                            loc_13534:
00016166 D168 0020                  		add.w	d0,obInertia(a0)
0001616A 4E75                       		rts	
0001616C                            ; ===========================================================================
0001616C                            
0001616C                            loc_1353A:
0001616C 4A40                       		tst.w	d0
0001616E 6B00                       		bmi.s	loc_13540
00016170 E480                       		asr.l	#2,d0
00016172                            
00016172                            loc_13540:
00016172 D168 0020                  		add.w	d0,obInertia(a0)
00016176                            
00016176                            locret_13544:
00016176 4E75                       		rts	
00016178                            ; End of function Sonic_RollRepel
00016178                            ; End of function Sonic_RollRepel
00016178                            		include	"_incObj\Sonic SlopeRepel.asm"
00016178                            ; ---------------------------------------------------------------------------
00016178                            ; Subroutine to	push Sonic down	a slope
00016178                            ; ---------------------------------------------------------------------------
00016178                            
00016178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016178                            
00016178                            
00016178                            Sonic_SlopeRepel:
00016178 4E71                       		nop	
0001617A 4A28 0038                  		tst.b	$38(a0)
0001617E 6600                       		bne.s	locret_13580
00016180 4A68 003E                  		tst.w	$3E(a0)
00016184 6600                       		bne.s	loc_13582
00016186 1028 0026                  		move.b	obAngle(a0),d0
0001618A 0600 0020                  		addi.b	#$20,d0
0001618E 0200 00C0                  		andi.b	#$C0,d0
00016192 6700                       		beq.s	locret_13580
00016194 3028 0020                  		move.w	obInertia(a0),d0
00016198 6A00                       		bpl.s	loc_1356A
0001619A 4440                       		neg.w	d0
0001619C                            
0001619C                            loc_1356A:
0001619C 0C40 0280                  		cmpi.w	#$280,d0
000161A0 6400                       		bcc.s	locret_13580
000161A2 4268 0020                  		clr.w	obInertia(a0)
000161A6 08E8 0001 0022             		bset	#1,obStatus(a0)
000161AC 317C 001E 003E             		move.w	#$1E,$3E(a0)
000161B2                            
000161B2                            locret_13580:
000161B2 4E75                       		rts	
000161B4                            ; ===========================================================================
000161B4                            
000161B4                            loc_13582:
000161B4 5368 003E                  		subq.w	#1,$3E(a0)
000161B8 4E75                       		rts	
000161BA                            ; End of function Sonic_SlopeRepel
000161BA                            ; End of function Sonic_SlopeRepel
000161BA                            		include	"_incObj\Sonic JumpAngle.asm"
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000161BA                            ; ---------------------------------------------------------------------------
000161BA                            
000161BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161BA                            
000161BA                            
000161BA                            Sonic_JumpAngle:
000161BA 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000161BE 6700                       		beq.s	locret_135A2	; if already 0,	branch
000161C0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000161C2                            
000161C2 5400                       		addq.b	#2,d0		; increase angle
000161C4 6400                       		bcc.s	loc_13596
000161C6 7000                       		moveq	#0,d0
000161C8                            
000161C8                            loc_13596:
000161C8 6000                       		bra.s	loc_1359E
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            loc_13598:
000161CA 5500                       		subq.b	#2,d0		; decrease angle
000161CC 6400                       		bcc.s	loc_1359E
000161CE 7000                       		moveq	#0,d0
000161D0                            
000161D0                            loc_1359E:
000161D0 1140 0026                  		move.b	d0,obAngle(a0)
000161D4                            
000161D4                            locret_135A2:
000161D4 4E75                       		rts	
000161D6                            ; End of function Sonic_JumpAngle
000161D6                            ; End of function Sonic_JumpAngle
000161D6                            		include	"_incObj\Sonic Floor.asm"
000161D6                            ; ---------------------------------------------------------------------------
000161D6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000161D6                            ; ---------------------------------------------------------------------------
000161D6                            
000161D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161D6                            
000161D6                            
000161D6                            Sonic_Floor:
000161D6 3228 0010                  		move.w	obVelX(a0),d1
000161DA 3428 0012                  		move.w	obVelY(a0),d2
000161DE 4EB9 0000 3CC8             		jsr	(CalcAngle).l
000161E4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000161E8 0400 0020                  		subi.b	#$20,d0
000161EC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000161F0 0200 00C0                  		andi.b	#$C0,d0
000161F4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000161F8 0C00 0040                  		cmpi.b	#$40,d0
000161FC 6700 0000                  		beq.w	loc_13680
00016200 0C00 0080                  		cmpi.b	#$80,d0
00016204 6700 0000                  		beq.w	loc_136E2
00016208 0C00 00C0                  		cmpi.b	#$C0,d0
0001620C 6700 0000                  		beq.w	loc_1373E
00016210 6100 0000                  		bsr.w	Sonic_HitWall
00016214 4A41                       		tst.w	d1
00016216 6A00                       		bpl.s	loc_135F0
00016218 9368 0008                  		sub.w	d1,obX(a0)
0001621C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016222                            
00016222                            loc_135F0:
00016222 6100 0000                  		bsr.w	sub_14EB4
00016226 4A41                       		tst.w	d1
00016228 6A00                       		bpl.s	loc_13602
0001622A D368 0008                  		add.w	d1,obX(a0)
0001622E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016234                            
00016234                            loc_13602:
00016234 6100 0000                  		bsr.w	Sonic_HitFloor
00016238 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001623C 4A41                       		tst.w	d1
0001623E 6A00                       		bpl.s	locret_1367E
00016240 1428 0012                  		move.b	obVelY(a0),d2
00016244 5002                       		addq.b	#8,d2
00016246 4402                       		neg.b	d2
00016248 B202                       		cmp.b	d2,d1
0001624A 6C00                       		bge.s	loc_1361E
0001624C B002                       		cmp.b	d2,d0
0001624E 6D00                       		blt.s	locret_1367E
00016250                            
00016250                            loc_1361E:
00016250 D368 000C                  		add.w	d1,obY(a0)
00016254 1143 0026                  		move.b	d3,obAngle(a0)
00016258 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001625C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016262 1003                       		move.b	d3,d0
00016264 0600 0020                  		addi.b	#$20,d0
00016268 0200 0040                  		andi.b	#$40,d0
0001626C 6600                       		bne.s	loc_1365C
0001626E 1003                       		move.b	d3,d0
00016270 0600 0010                  		addi.b	#$10,d0
00016274 0200 0020                  		andi.b	#$20,d0
00016278 6700                       		beq.s	loc_1364E
0001627A E0E8 0012                  		asr	obVelY(a0)
0001627E 6000                       		bra.s	loc_13670
00016280                            ; ===========================================================================
00016280                            
00016280                            loc_1364E:
00016280 317C 0000 0012             		move.w	#0,obVelY(a0)
00016286 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001628C 4E75                       		rts	
0001628E                            ; ===========================================================================
0001628E                            
0001628E                            loc_1365C:
0001628E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016294 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001629A 6F00                       		ble.s	loc_13670
0001629C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000162A2                            
000162A2                            loc_13670:
000162A2 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162A8 4A03                       		tst.b	d3
000162AA 6A00                       		bpl.s	locret_1367E
000162AC 4468 0020                  		neg.w	obInertia(a0)
000162B0                            
000162B0                            locret_1367E:
000162B0 4E75                       		rts	
000162B2                            ; ===========================================================================
000162B2                            
000162B2                            loc_13680:
000162B2 6100 0000                  		bsr.w	Sonic_HitWall
000162B6 4A41                       		tst.w	d1
000162B8 6A00                       		bpl.s	loc_1369A
000162BA 9368 0008                  		sub.w	d1,obX(a0)
000162BE 317C 0000 0010             		move.w	#0,obVelX(a0)
000162C4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162CA 4E75                       		rts	
000162CC                            ; ===========================================================================
000162CC                            
000162CC                            loc_1369A:
000162CC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162D0 4A41                       		tst.w	d1
000162D2 6A00                       		bpl.s	loc_136B4
000162D4 9368 000C                  		sub.w	d1,obY(a0)
000162D8 4A68 0012                  		tst.w	obVelY(a0)
000162DC 6A00                       		bpl.s	locret_136B2
000162DE 317C 0000 0012             		move.w	#0,obVelY(a0)
000162E4                            
000162E4                            locret_136B2:
000162E4 4E75                       		rts	
000162E6                            ; ===========================================================================
000162E6                            
000162E6                            loc_136B4:
000162E6 4A68 0012                  		tst.w	obVelY(a0)
000162EA 6B00                       		bmi.s	locret_136E0
000162EC 6100 0000                  		bsr.w	Sonic_HitFloor
000162F0 4A41                       		tst.w	d1
000162F2 6A00                       		bpl.s	locret_136E0
000162F4 D368 000C                  		add.w	d1,obY(a0)
000162F8 1143 0026                  		move.b	d3,obAngle(a0)
000162FC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016300 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016306 317C 0000 0012             		move.w	#0,obVelY(a0)
0001630C 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016312                            
00016312                            locret_136E0:
00016312 4E75                       		rts	
00016314                            ; ===========================================================================
00016314                            
00016314                            loc_136E2:
00016314 6100 0000                  		bsr.w	Sonic_HitWall
00016318 4A41                       		tst.w	d1
0001631A 6A00                       		bpl.s	loc_136F4
0001631C 9368 0008                  		sub.w	d1,obX(a0)
00016320 317C 0000 0010             		move.w	#0,obVelX(a0)
00016326                            
00016326                            loc_136F4:
00016326 6100 0000                  		bsr.w	sub_14EB4
0001632A 4A41                       		tst.w	d1
0001632C 6A00                       		bpl.s	loc_13706
0001632E D368 0008                  		add.w	d1,obX(a0)
00016332 317C 0000 0010             		move.w	#0,obVelX(a0)
00016338                            
00016338                            loc_13706:
00016338 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001633C 4A41                       		tst.w	d1
0001633E 6A00                       		bpl.s	locret_1373C
00016340 9368 000C                  		sub.w	d1,obY(a0)
00016344 1003                       		move.b	d3,d0
00016346 0600 0020                  		addi.b	#$20,d0
0001634A 0200 0040                  		andi.b	#$40,d0
0001634E 6600                       		bne.s	loc_13726
00016350 317C 0000 0012             		move.w	#0,obVelY(a0)
00016356 4E75                       		rts	
00016358                            ; ===========================================================================
00016358                            
00016358                            loc_13726:
00016358 1143 0026                  		move.b	d3,obAngle(a0)
0001635C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016360 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016366 4A03                       		tst.b	d3
00016368 6A00                       		bpl.s	locret_1373C
0001636A 4468 0020                  		neg.w	obInertia(a0)
0001636E                            
0001636E                            locret_1373C:
0001636E 4E75                       		rts	
00016370                            ; ===========================================================================
00016370                            
00016370                            loc_1373E:
00016370 6100 0000                  		bsr.w	sub_14EB4
00016374 4A41                       		tst.w	d1
00016376 6A00                       		bpl.s	loc_13758
00016378 D368 0008                  		add.w	d1,obX(a0)
0001637C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016382 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016388 4E75                       		rts	
0001638A                            ; ===========================================================================
0001638A                            
0001638A                            loc_13758:
0001638A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001638E 4A41                       		tst.w	d1
00016390 6A00                       		bpl.s	loc_13772
00016392 9368 000C                  		sub.w	d1,obY(a0)
00016396 4A68 0012                  		tst.w	obVelY(a0)
0001639A 6A00                       		bpl.s	locret_13770
0001639C 317C 0000 0012             		move.w	#0,obVelY(a0)
000163A2                            
000163A2                            locret_13770:
000163A2 4E75                       		rts	
000163A4                            ; ===========================================================================
000163A4                            
000163A4                            loc_13772:
000163A4 4A68 0012                  		tst.w	obVelY(a0)
000163A8 6B00                       		bmi.s	locret_1379E
000163AA 6100 0000                  		bsr.w	Sonic_HitFloor
000163AE 4A41                       		tst.w	d1
000163B0 6A00                       		bpl.s	locret_1379E
000163B2 D368 000C                  		add.w	d1,obY(a0)
000163B6 1143 0026                  		move.b	d3,obAngle(a0)
000163BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163BE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000163CA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163D0                            
000163D0                            locret_1379E:
000163D0 4E75                       		rts	
000163D2                            ; End of function Sonic_Floor
000163D2                            ; End of function Sonic_Floor
000163D2                            		include	"_incObj\Sonic ResetOnFloor.asm"
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000163D2                            ; ---------------------------------------------------------------------------
000163D2                            
000163D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163D2                            
000163D2                            
000163D2                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000163D2 08A8 0005 0022                     	bclr    #5,$22(a0)
000163D8 08A8 0001 0022                     	bclr    #1,$22(a0)
000163DE 0828 0002 0022                     	btst    #2,$22(a0)
000163E4 6700                               	beq.s    loc_137E4
000163E6 08A8 0002 0022             		bclr	#2,obStatus(a0)
000163EC 117C 0013 0016             		move.b	#$13,obHeight(a0)
000163F2 117C 0009 0017             		move.b	#9,obWidth(a0)
000163F8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000163FE 5B68 000C                  		subq.w	#5,obY(a0)
00016402                            
00016402                            loc_137E4:
00016402 117C 0000 003C             		move.b	#0,$3C(a0)
00016408 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
0001640E 4E75                       		rts	
00016410                            ; End of function Sonic_ResetOnFloor
00016410                            ; End of function Sonic_ResetOnFloor
00016410                            		include	"_incObj\Sonic (part 2).asm"
00016410                            ; ---------------------------------------------------------------------------
00016410                            ; Sonic	when he	gets hurt
00016410                            ; ---------------------------------------------------------------------------
00016410                            
00016410                            Sonic_Hurt:	; Routine 4
00016410 4EB9 0000 F972             		jsr	(SpeedToPos).l
00016416 0668 0030 0012             		addi.w	#$30,obVelY(a0)
0001641C 0828 0006 0022             		btst	#6,obStatus(a0)
00016422 6700                       		beq.s	loc_1380C
00016424 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001642A                            
0001642A                            loc_1380C:
0001642A 6100 0000                  		bsr.w	Sonic_HurtStop
0001642E 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016432 6100 F124                  		bsr.w	Sonic_RecordPosition
00016436 6100 0000                  		bsr.w	Sonic_Animate
0001643A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001643E 4EF9 0000 F986             		jmp	(DisplaySprite).l
00016444                            
00016444                            ; ---------------------------------------------------------------------------
00016444                            ; Subroutine to	stop Sonic falling after he's been hurt
00016444                            ; ---------------------------------------------------------------------------
00016444                            
00016444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016444                            
00016444                            
00016444                            Sonic_HurtStop:
00016444 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016448 0640 00E0                  		addi.w	#$E0,d0
0001644C                            		;cmp.w	obY(a0),d0
0001644C                            		;bcs.w	KillSonic
0001644C 6100 FD88                  		bsr.w	Sonic_Floor
00016450 0828 0001 0022             		btst	#1,obStatus(a0)
00016456 6600                       		bne.s	locret_13860
00016458 7000                       		moveq	#0,d0
0001645A 3140 0012                  		move.w	d0,obVelY(a0)
0001645E 3140 0010                  		move.w	d0,obVelX(a0)
00016462 3140 0020                  		move.w	d0,obInertia(a0)
00016466 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001646C 5528 0024                  		subq.b	#2,obRoutine(a0)
00016470 317C 0078 0030             		move.w	#$78,$30(a0)
00016476                            
00016476                            locret_13860:
00016476 4E75                       		rts	
00016478                            ; End of function Sonic_HurtStop
00016478                            
00016478                            ; ---------------------------------------------------------------------------
00016478                            ; Sonic	when he	dies
00016478                            ; ---------------------------------------------------------------------------
00016478                            
00016478                            Sonic_Death:	; Routine 6
00016478 6100 0000                  		bsr.w	GameOver
0001647C 4EB9 0000 F93A             		jsr	(ObjectFall).l
00016482 6100 F0D4                  		bsr.w	Sonic_RecordPosition
00016486 6100 0000                  		bsr.w	Sonic_Animate
0001648A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001648E 4EF9 0000 F986             		jmp	(DisplaySprite).l
00016494                            
00016494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016494                            
00016494                            GameOver:
00016494 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016498 0640 0100                  		addi.w	#$100,d0
0001649C B068 000C                  		cmp.w	obY(a0),d0
000164A0 6400 0000                  		bcc.w	locret_13900
000164A4 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000164AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000164AE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000164B2 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000164B6 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000164BA 6600                       		bne.s	loc_138D4
000164BC 317C 0000 003A             		move.w	#0,$3A(a0)
000164C2 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000164C8 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000164CE 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000164D4 4238 FE1A                  		clr.b	(f_timeover).w
000164D8                            
000164D8                            loc_138C2:
000164E2 7003                       		moveq	#3,d0
000164E4 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
000164EA                            		
000164EA                            loc_138C3:
000164F4 7003                       		moveq	#3,d0
000164F6 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            loc_138D4:
000164FC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016502 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
00016506 6700                       		beq.s	locret_13900	; if not, branch
00016508 317C 0000 003A             		move.w	#0,$3A(a0)
0001650E 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
00016514 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001651A 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016520 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016526 60B0                       		bra.s	loc_138C2
00016528                            		
00016528                            
00016528                            ; ===========================================================================
00016528                            
00016528                            locret_13900:
00016528 4E75                       		rts	
0001652A                            ; End of function GameOver
0001652A                            
0001652A                            ; ---------------------------------------------------------------------------
0001652A                            ; Sonic	when the level is restarted
0001652A                            ; ---------------------------------------------------------------------------
0001652A                            
0001652A                            Sonic_ResetLevel:; Routine 8
0001652A 4A68 003A                  		tst.w	$3A(a0)
0001652E 6700                       		beq.s	locret_13914
00016530 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016534 6600                       		bne.s	locret_13914
00016536 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001653C                            
0001653C                            	locret_13914:
0001653C 4E75                       		rts	
0001653C 4E75                       		rts	
0001653E                            		include	"_incObj\Sonic Loops.asm"
0001653E                            ; ---------------------------------------------------------------------------
0001653E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001653E                            ; ---------------------------------------------------------------------------
0001653E                            
0001653E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001653E                            
0001653E                            
0001653E                            Sonic_Loops:
0001653E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016544 6700                       		beq.s	@isstarlight	; if yes, branch
00016546 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001654A 6600 0000                  		bne.w	@noloops	; if not, branch
0001654E                            
0001654E                            	@isstarlight:
0001654E 3028 000C                  		move.w	obY(a0),d0
00016552 E248                       		lsr.w	#1,d0
00016554 0240 0380                  		andi.w	#$380,d0
00016558 1228 0008                  		move.b	obX(a0),d1
0001655C 0241 007F                  		andi.w	#$7F,d1
00016560 D041                       		add.w	d1,d0
00016562 43F8 A400                  		lea	(v_lvllayout).w,a1
00016566 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001656A                            
0001656A B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001656E 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016572 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016576 6700 FA68                  		beq.w	Sonic_ChkRoll
0001657A                            
0001657A B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001657E 6700                       		beq.s	@chkifleft	; if yes, branch
00016580 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016584 6700                       		beq.s	@chkifinair
00016586 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001658C 4E75                       		rts	
0001658E                            ; ===========================================================================
0001658E                            
0001658E                            @chkifinair:
0001658E 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016594 6700                       		beq.s	@chkifleft	; if not, branch
00016596                            
00016596 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001659C 4E75                       		rts	
0001659E                            ; ===========================================================================
0001659E                            
0001659E                            @chkifleft:
0001659E 3428 0008                  		move.w	obX(a0),d2
000165A2 0C02 002C                  		cmpi.b	#$2C,d2
000165A6 6400                       		bcc.s	@chkifright
000165A8                            
000165A8 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165AE 4E75                       		rts	
000165B0                            ; ===========================================================================
000165B0                            
000165B0                            @chkifright:
000165B0 0C02 00E0                  		cmpi.b	#$E0,d2
000165B4 6500                       		bcs.s	@chkangle1
000165B6                            
000165B6 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165BC 4E75                       		rts	
000165BE                            ; ===========================================================================
000165BE                            
000165BE                            @chkangle1:
000165BE 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000165C4 6600                       		bne.s	@chkangle2	; if yes, branch
000165C6                            
000165C6 1228 0026                  		move.b	obAngle(a0),d1
000165CA 6700                       		beq.s	@done
000165CC 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000165D0 6200                       		bhi.s	@done		; if yes, branch
000165D2 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165D8 4E75                       		rts	
000165DA                            ; ===========================================================================
000165DA                            
000165DA                            @chkangle2:
000165DA 1228 0026                  		move.b	obAngle(a0),d1
000165DE 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000165E2 6300                       		bls.s	@done		; if yes, branch
000165E4 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000165EA                            
000165EA                            @noloops:
000165EA                            @done:
000165EA 4E75                       		rts	
000165EC                            ; End of function Sonic_Loops
000165EC                            ; End of function Sonic_Loops
000165EC                            		include	"_incObj\Sonic Animate.asm"
000165EC                            ; ---------------------------------------------------------------------------
000165EC                            ; Subroutine to	animate	Sonic's sprites
000165EC                            ; ---------------------------------------------------------------------------
000165EC                            
000165EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165EC                            
000165EC                            
000165EC                            Sonic_Animate:				; XREF: Obj01_Control; et al
000165EC 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000165F2 7000                       		moveq	#0,d0
000165F4 1028 001C                  		move.b	obAnim(a0),d0
000165F8 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000165FC 6700                       		beq.s	@do		; if not, branch
000165FE 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016602 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
00016606 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
0001660A                            		
0001660A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016610                            
00016610                            	@do:
00016610 D040                       		add.w	d0,d0
00016612 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00016616 1011                       		move.b	(a1),d0
00016618 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
0001661A 1228 0022                  		move.b	obStatus(a0),d1
0001661E 0201 0001                  		andi.b	#1,d1
00016622 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016628 8328 0001                  		or.b	d1,obRender(a0)
0001662C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016630 6A00                       		bpl.s	@delay		; if time remains, branch
00016632 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016636                            
00016636                            @loadframe:
00016636 7200                       		moveq	#0,d1
00016638 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001663C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016640 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016644 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016648                            
00016648                            	@next:
00016648 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001664C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016650                            
00016650                            	@delay:
00016650 4E75                       		rts	
00016652                            ; ===========================================================================
00016652                            
00016652                            @end_FF:
00016652 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016654 6600                       		bne.s	@end_FE		; if not, branch
00016656 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001665A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001665E 60E8                       		bra.s	@next
00016660                            ; ===========================================================================
00016660                            
00016660                            @end_FE:
00016660 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016662 6600                       		bne.s	@end_FD		; if not, branch
00016664 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016668 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001666C 9200                       		sub.b	d0,d1
0001666E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016672 60D4                       		bra.s	@next
00016674                            ; ===========================================================================
00016674                            
00016674                            @end_FD:
00016674 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016676 6600                       		bne.s	@end		; if not, branch
00016678 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001667E                            
0001667E                            	@end:
0001667E 4E75                       		rts	
00016680                            ; ===========================================================================
00016680                            
00016680                            @walkrunroll:
00016680 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016684 6ACA                       		bpl.s	@delay		; if time remains, branch
00016686 5200                       		addq.b	#1,d0		; is animation walking/running?
00016688 6600 0000                  		bne.w	@rolljump	; if not, branch
0001668C 7200                       		moveq	#0,d1
0001668E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016692 6B00                       		bmi.s	@ble 			; better handling of angles
00016694 6700                       		beq.s	@ble
00016696 5300                       		subq.b	#1,d0
00016698                            
00016698                            	@ble:																
00016698 1428 0022                  		move.b	obStatus(a0),d2
0001669C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000166A0 6600                       		bne.s	@flip		; if yes, branch
000166A2 4600                       		not.b	d0		; reverse angle
000166A4                            
000166A4                            	@flip:
000166A4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000166A8 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000166AA 7203                       		moveq	#3,d1
000166AC                            
000166AC                            	@noinvert:
000166AC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166B2 B302                       		eor.b	d1,d2
000166B4 8528 0001                  		or.b	d2,obRender(a0)
000166B8 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000166BE 6600 0000                  		bne.w	@push		; if yes, branch
000166C2                            
000166C2 E808                       		lsr.b	#4,d0		; divide angle by $10
000166C4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000166C8 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000166CC 6A00                       		bpl.s	@nomodspeed
000166CE 4442                       		neg.w	d2		; modulus speed
000166D0                            
000166D0                            	@nomodspeed:
000166D0 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000166D6 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000166DA 6400                       		bcc.s	@maxrunning	; if yes, branch
000166DC                            
000166DC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000166E2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000166E6 6400                       		bcc.s	@running	; if yes, branch
000166E8                            
000166E8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000166EE                            
000166EE                            	@running:
000166EE D000                       		add.b	d0,d0
000166F0 D000                       		add.b	d0,d0
000166F2 1600                       		move.b	d0,d3
000166F4 4442                       		neg.w	d2
000166F6 0642 0780                  		addi.w	#$780,d2
000166FA 6A00                       		bpl.s	@belowmax
000166FC 7400                       		moveq	#0,d2		; max animation speed
000166FE 6000                       		bra.s	@belowmax
00016700                            
00016700                            	@maxrunning:
00016700 D000                       		add.b d0,d0
00016702 1600                       		move.b d0,d3
00016704 4442                       		neg.w d2
00016706 0642 0800                  		addi.w #$800, d2
0001670A 6A00                       		bpl.s @belowmax
0001670C 7400                       		moveq #0, d2 
0001670E                            
0001670E                            	@belowmax:
0001670E E04A                       		lsr.w	#8,d2
00016710 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016714 6100 FF20                  		bsr.w	@loadframe
00016718 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
0001671C 4E75                       		rts	
0001671E                            ; ===========================================================================
0001671E                            
0001671E                            @rolljump:
0001671E 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016720 6600                       		bne.s	@push		; if not, branch
00016722 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016726 6A00                       		bpl.s	@nomodspeed2
00016728 4442                       		neg.w	d2
0001672A                            
0001672A                            	@nomodspeed2:
0001672A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016730 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016734 6400                       		bcc.s	@rollfast	; if yes, branch
00016736 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001673C                            
0001673C                            	@rollfast:
0001673C 4442                       		neg.w	d2
0001673E 0642 0400                  		addi.w	#$400,d2
00016742 6A00                       		bpl.s	@belowmax2
00016744 7400                       		moveq	#0,d2
00016746                            
00016746                            	@belowmax2:
00016746 E04A                       		lsr.w	#8,d2
00016748 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001674C 1228 0022                  		move.b	obStatus(a0),d1
00016750 0201 0001                  		andi.b	#1,d1
00016754 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001675A 8328 0001                  		or.b	d1,obRender(a0)
0001675E 6000 FED6                  		bra.w	@loadframe
00016762                            ; ===========================================================================
00016762                            
00016762                            @push:
00016762 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016766 6B00                       		bmi.s	@negspeed
00016768 4442                       		neg.w	d2
0001676A                            
0001676A                            	@negspeed:
0001676A 0642 0800                  		addi.w	#$800,d2
0001676E 6A00                       		bpl.s	@belowmax3	
00016770 7400                       		moveq	#0,d2
00016772                            
00016772                            	@belowmax3:
00016772 EC4A                       		lsr.w	#6,d2
00016774 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016778 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001677E 1228 0022                  		move.b	obStatus(a0),d1
00016782 0201 0001                  		andi.b	#1,d1
00016786 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001678C 8328 0001                  		or.b	d1,obRender(a0)
00016790 6000 FEA4                  		bra.w	@loadframe
00016794                            
00016794                            ; End of function Sonic_Animate
00016794                            ; End of function Sonic_Animate
00016794                            		include	"_anim\Sonic.asm"
00016794                            ; ---------------------------------------------------------------------------
00016794                            ; Animation script - Sonic
00016794                            ; ---------------------------------------------------------------------------
00016794                            Ani_Sonic:
00016794                            
00016794 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016796 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016798 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001679A 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001679C 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001679E 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000167A0 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000167A2 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000167A4 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000167A6 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000167A8 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000167AA 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000167AC 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000167AE 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000167B0 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000167B2 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000167B4 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000167B6 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000167B8 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000167BA 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000167BC 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000167BE 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000167C0 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000167C2 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000167C4 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000167C6 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000167C8 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000167CA 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000167CC 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000167CE 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000167D0 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000167D2 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000167D4 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000167D6 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000167D8 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000167DA 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000167DC 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000167DE 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000167E0                            
000167E0 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000167EE 00                         		even
000167EE FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000167FC 00                         		even
000167FC FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016803 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001680A 00                         		even
0001680A FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016811 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016818 00                         		even
00016818 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
00016826 00                         		even
00016826                            SonAni_Wait:	
00016826 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016835 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016844 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016853 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016862 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016871 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016880 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001688F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001689E 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000168A6                            		even
000168A6 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000168AC                            		even
000168AC 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000168B2 00                         		even
000168B2 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000168B8                            		even
000168B8 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000168BC 00                         		even
000168BC 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000168C0 00                         		even
000168C0 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000168C4 00                         		even
000168C4 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000168C8 00                         		even
000168C8 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000168D2                            		even
000168D2 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000168D8 00                         		even
000168D8 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000168E2 00                         		even
000168E2 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000168EC 00                         		even
000168EC 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000168F0                            		even
000168F0 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000168F6                            		even
000168F6 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
000168FC 00                         		even
000168FC 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016900 00                         		even
00016900 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016908 00                         		even
00016908 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
0001690C 00                         		even
0001690C 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016910 00                         		even
00016910 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016914 00                         		even
00016914 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016918 00                         		even
00016918                            SonAni_WaterSlide:
00016918 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
0001691C                            		even
0001691C 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016920                            		even
00016920 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016928 00                         		even
00016928 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
0001692C                            		even
0001692C FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001693A 00                         		even
0001693A 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016946                            		even
00016946 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
0001694A                            		even
0001694A 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
0001694E                            		even
0001694E 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016952                            		even
00016952 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
0001695C 00                         		even
0001695C 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016965 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
0001696D 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016974 3334 35                    		dc.b	$33, $34, $35
00016977 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
0001697E                            		even
0001697E 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016984                            		even
00016984                            
00016984                            
00016984 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016984 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016984 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016984 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016984 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016984 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016984 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016984 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016984 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016984 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016984 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016984 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016984 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016984 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016984 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016984 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016984 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016984 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016984 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016984 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016984 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016984 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016984 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016984 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016984 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016984 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016984 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016984 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016984 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016984 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016984 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016984 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016984 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016984 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016984 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016984 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016984 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016984 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016984 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016984                            		include	"_incObj\Sonic LoadGfx.asm"
00016984                            ; ---------------------------------------------------------------------------
00016984                            ; Sonic	graphics loading subroutine
00016984                            ; ---------------------------------------------------------------------------
00016984                            
00016984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016984                            
00016984                            
00016984                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016984 7000                       		moveq	#0,d0
00016986 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001698A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001698E 6700                       		beq.s	locret_13C96
00016990 11C0 F766                  		move.b	d0,($FFFFF766).w
00016994 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001699A D040                       		add.w	d0,d0
0001699C D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A0 7A00                       		moveq	#0,d5
000169A2 1A1A                       		move.b	(a2)+,d5
000169A4 5345                       		subq.w	#1,d5
000169A6 6B00                       		bmi.s	locret_13C96
000169A8 383C F000                  		move.w	#$F000,d4
000169AC 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000169B2                            
000169B2                            SPLC_ReadEntry:
000169B2 7200                       		moveq	#0,d1
000169B4 121A                       		move.b	(a2)+,d1
000169B6 E149                       		lsl.w	#8,d1
000169B8 121A                       		move.b	(a2)+,d1
000169BA 3601                       		move.w	d1,d3
000169BC E04B                       		lsr.w	#8,d3
000169BE 0243 00F0                  		andi.w	#$F0,d3
000169C2 0643 0010                  		addi.w	#$10,d3
000169C6 0241 0FFF                  		andi.w	#$FFF,d1
000169CA EB89                       		lsl.l	#5,d1
000169CC D286                       		add.l	d6,d1
000169CE 3404                       		move.w	d4,d2
000169D0 D843                       		add.w	d3,d4
000169D2 D843                       		add.w	d3,d4
000169D4 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000169DA 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000169DE                            
000169DE                            locret_13C96:
000169DE 4E75                       		rts	
000169E0                            ; End of function Sonic_LoadGfx
000169E0                            ; End of function Sonic_LoadGfx
000169E0                            
000169E0                            		include	"_incObj\0A Drowning Countdown.asm"
000169E0                            ; ---------------------------------------------------------------------------
000169E0                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000169E0                            ; Sonic's mouth (LZ)
000169E0                            ; ---------------------------------------------------------------------------
000169E0                            
000169E0                            DrownCount:
000169E0 7000                       		moveq	#0,d0
000169E2 1028 0024                  		move.b	obRoutine(a0),d0
000169E6 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000169EA 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000169EE                            ; ===========================================================================
000169EE                            Drown_Index:
000169EE 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000169F0 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000169F2 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000169F4 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000169F6 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000169F8 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000169FA 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000169FC 0000                       			dc.w Drown_Display-Drown_Index
000169FE 0000                       			dc.w Drown_Delete-Drown_Index
00016A00                            
00016A00 =00000030                  drown_origX:		equ $30		; original x-axis position
00016A00 =00000038                  drown_time:		equ $38		; time between each number changes
00016A00                            
00016A00 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016A00 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016A00 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016A00 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016A00 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016A00 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016A00 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016A00                            ; ===========================================================================
00016A00                            
00016A00                            Drown_Main:	; Routine 0
00016A00 5428 0024                  		addq.b	#2,obRoutine(a0)
00016A04 217C 0001 4DCE 0004        		move.l	#Map_Bub,obMap(a0)
00016A0C 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016A12 117C 0084 0001             		move.b	#$84,obRender(a0)
00016A18 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016A1E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016A24 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016A28 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016A2A                            
00016A2A 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016A2E 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016A36 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016A3C 0240 007F                  		andi.w	#$7F,d0
00016A40 1140 0033                  		move.b	d0,$33(a0)
00016A44 6000 0000                  		bra.w	Drown_Countdown
00016A48                            ; ===========================================================================
00016A48                            
00016A48                            @smallbubble:
00016A48 1140 001C                  		move.b	d0,obAnim(a0)
00016A4C 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016A52 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016A58                            
00016A58                            Drown_Animate:	; Routine 2
00016A58 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A5E 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00016A64                            
00016A64                            Drown_ChkWater:	; Routine 4
00016A64 3038 F646                  		move.w	(v_waterpos1).w,d0
00016A68 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016A6C 6500                       		bcs.s	@wobble		; if not, branch
00016A6E                            
00016A6E 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016A74 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A78 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016A7E 6700                       		beq.s	Drown_Display
00016A80 6000                       		bra.s	Drown_Display
00016A82                            ; ===========================================================================
00016A82                            
00016A82                            @wobble:
00016A82 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016A86 6700                       		beq.s	@notunnel	; if not, branch
00016A88 5868 0030                  		addq.w	#4,drown_origX(a0)
00016A8C                            
00016A8C                            	@notunnel:
00016A8C 1028 0026                  		move.b	obAngle(a0),d0
00016A90 5228 0026                  		addq.b	#1,obAngle(a0)
00016A94 0240 007F                  		andi.w	#$7F,d0
00016A98 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016A9E 1031 0000                  		move.b	(a1,d0.w),d0
00016AA2 4880                       		ext.w	d0
00016AA4 D068 0030                  		add.w	drown_origX(a0),d0
00016AA8 3140 0008                  		move.w	d0,obX(a0)
00016AAC 6100                       		bsr.s	Drown_ShowNumber
00016AAE 4EB9 0000 F972             		jsr	(SpeedToPos).l
00016AB4 4A28 0001                  		tst.b	obRender(a0)
00016AB8 6A00                       		bpl.s	@delete
00016ABA 4EF9 0000 F986             		jmp	(DisplaySprite).l
00016AC0                            
00016AC0                            	@delete:
00016AC0 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00016AC6                            ; ===========================================================================
00016AC6                            
00016AC6                            Drown_Display:	; Routine 6, Routine $E
00016AC6 6100                       		bsr.s	Drown_ShowNumber
00016AC8 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016ACE 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00016AD4 4EF9 0000 F986             		jmp	(DisplaySprite).l
00016ADA                            ; ===========================================================================
00016ADA                            
00016ADA                            Drown_Delete:	; Routine 8, Routine $10
00016ADA 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00016AE0                            ; ===========================================================================
00016AE0                            
00016AE0                            Drown_AirLeft:	; Routine $C
00016AE0 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016AE6 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016AE8 5368 0038                  		subq.w	#1,drown_time(a0)
00016AEC 6600                       		bne.s	@display
00016AEE 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016AF4 5E28 001C                  		addq.b	#7,obAnim(a0)
00016AF8 60CC                       		bra.s	Drown_Display
00016AFA                            ; ===========================================================================
00016AFA                            
00016AFA                            	@display:
00016AFA 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B00 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00016B06 4A28 0001                  		tst.b	obRender(a0)
00016B0A 6A00                       		bpl.s	Drown_AirLeft_Delete
00016B0C 4EF9 0000 F986             		jmp	(DisplaySprite).l
00016B12                            
00016B12                            Drown_AirLeft_Delete:	
00016B12 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00016B18                            ; ===========================================================================
00016B18                            
00016B18                            Drown_ShowNumber:
00016B18 4A68 0038                  		tst.w	drown_time(a0)
00016B1C 6700                       		beq.s	@nonumber
00016B1E 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B22 6600                       		bne.s	@nonumber	; if time remains, branch
00016B24 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016B2A 6400                       		bcc.s	@nonumber
00016B2C                            
00016B2C 317C 000F 0038             		move.w	#15,drown_time(a0)
00016B32 4268 0012                  		clr.w	obVelY(a0)
00016B36 117C 0080 0001             		move.b	#$80,obRender(a0)
00016B3C 3028 0008                  		move.w	obX(a0),d0
00016B40 9078 F700                  		sub.w	(v_screenposx).w,d0
00016B44 0640 0080                  		addi.w	#$80,d0
00016B48 3140 0008                  		move.w	d0,obX(a0)
00016B4C 3028 000C                  		move.w	obY(a0),d0
00016B50 9078 F704                  		sub.w	(v_screenposy).w,d0
00016B54 0640 0080                  		addi.w	#$80,d0
00016B58 3140 000A                  		move.w	d0,obScreenY(a0)
00016B5C 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016B62                            
00016B62                            	@nonumber:
00016B62 4E75                       		rts	
00016B64                            ; ===========================================================================
00016B64                            Drown_WobbleData:
00016B64 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B74 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B84 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B94 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016BA4 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016BB4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016BC4 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016BD4 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016BE4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016BF4 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016C04 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016C14 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016C24 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016C34 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016C44 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016C54 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016C64                            ; ===========================================================================
00016C64                            
00016C64                            Drown_Countdown:; Routine $A
00016C64 4A68 002C                  		tst.w	$2C(a0)
00016C68 6600 0000                  		bne.w	@loc_13F86
00016C6C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016C72 6400 0000                  		bcc.w	@nocountdown
00016C76 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016C7C 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016C80                            
00016C80 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016C84 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016C88 317C 003B 0038             		move.w	#59,drown_time(a0)
00016C8E 317C 0001 0036             		move.w	#1,$36(a0)
00016C94 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016C9A 0240 0001                  		andi.w	#1,d0
00016C9E 1140 0034                  		move.b	d0,$34(a0)
00016CA2 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016CA6 0C40 0019                  		cmpi.w	#25,d0
00016CAA 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016CAC 0C40 0014                  		cmpi.w	#20,d0
00016CB0 6700                       		beq.s	@warnsound
00016CB2 0C40 000F                  		cmpi.w	#15,d0
00016CB6 6700                       		beq.s	@warnsound
00016CB8 0C40 000C                  		cmpi.w	#12,d0
00016CBC 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016CBE                            
00016CBE                            	@skipmusic:
00016CC8 5328 0032                  		subq.b	#1,$32(a0)
00016CCC 6A00                       		bpl.s	@reduceair
00016CCE 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016CD4 08E8 0007 0036             		bset	#7,$36(a0)
00016CDA 6000                       		bra.s	@reduceair
00016CDC                            ; ===========================================================================
00016CDC                            
00016CDC                            @warnsound:
00016CE6                            
00016CE6                            @reduceair:
00016CE6 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016CEA 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016CEE                            
00016CEE                            		; Sonic drowns here
00016CEE 6100 0000                  		bsr.w	ResumeMusic
00016CF2 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016D02 117C 000A 0034             		move.b	#$A,$34(a0)
00016D08 317C 0001 0036             		move.w	#1,$36(a0)
00016D0E 317C 0078 002C             		move.w	#$78,$2C(a0)
00016D14 2F08                       		move.l	a0,-(sp)
00016D16 41F8 D000                  		lea	(v_player).w,a0
00016D1A 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016D1E 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016D24 08E8 0001 0022             		bset	#1,obStatus(a0)
00016D2A 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D30 317C 0000 0012             		move.w	#0,obVelY(a0)
00016D36 317C 0000 0010             		move.w	#0,obVelX(a0)
00016D3C 317C 0000 0020             		move.w	#0,obInertia(a0)
00016D42 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016D48 205F                       		movea.l	(sp)+,a0
00016D4A 4E75                       		rts	
00016D4C                            ; ===========================================================================
00016D4C                            
00016D4C                            @loc_13F86:
00016D4C 5368 002C                  		subq.w	#1,$2C(a0)
00016D50 6600                       		bne.s	@loc_13F94
00016D52 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016D58 4E75                       		rts	
00016D5A                            ; ===========================================================================
00016D5A                            
00016D5A                            	@loc_13F94:
00016D5A 2F08                       		move.l	a0,-(sp)
00016D5C 41F8 D000                  		lea	(v_player).w,a0
00016D60 4EB9 0000 F972             		jsr	(SpeedToPos).l
00016D66 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016D6C 205F                       		movea.l	(sp)+,a0
00016D6E 6000                       		bra.s	@nochange
00016D70                            ; ===========================================================================
00016D70                            
00016D70                            @gotomakenum:
00016D70 6000                       		bra.s	@makenum
00016D72                            ; ===========================================================================
00016D72                            
00016D72                            @nochange:
00016D72 4A68 0036                  		tst.w	$36(a0)
00016D76 6700 0000                  		beq.w	@nocountdown
00016D7A 5368 003A                  		subq.w	#1,$3A(a0)
00016D7E 6A00 0000                  		bpl.w	@nocountdown
00016D82                            
00016D82                            @makenum:
00016D82 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016D88 0240 000F                  		andi.w	#$F,d0
00016D8C 3140 003A                  		move.w	d0,$3A(a0)
00016D90 4EB9 0000 FE12             		jsr	(FindFreeObj).l
00016D96 6600 0000                  		bne.w	@nocountdown
00016D9A 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016D9E 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016DA4 7006                       		moveq	#6,d0
00016DA6 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016DAC 6700                       		beq.s	@noflip
00016DAE 4440                       		neg.w	d0
00016DB0 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016DB6                            
00016DB6                            	@noflip:
00016DB6 D169 0008                  		add.w	d0,obX(a1)
00016DBA 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016DC0 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016DC6 4A68 002C                  		tst.w	$2C(a0)
00016DCA 6700 0000                  		beq.w	@loc_1403E
00016DCE 0268 0007 003A             		andi.w	#7,$3A(a0)
00016DD4 0668 0000 003A             		addi.w	#0,$3A(a0)
00016DDA 3038 D00C                  		move.w	(v_player+obY).w,d0
00016DDE 0440 000C                  		subi.w	#$C,d0
00016DE2 3340 000C                  		move.w	d0,obY(a1)
00016DE6 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016DEC 1340 0026                  		move.b	d0,obAngle(a1)
00016DF0 3038 FE04                  		move.w	(v_framecount).w,d0
00016DF4 0200 0003                  		andi.b	#3,d0
00016DF8 6600                       		bne.s	@loc_14082
00016DFA 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016E00 6000                       		bra.s	@loc_14082
00016E02                            ; ===========================================================================
00016E02                            
00016E02                            @loc_1403E:
00016E02 0828 0007 0036             		btst	#7,$36(a0)
00016E08 6700                       		beq.s	@loc_14082
00016E0A 3438 FE14                  		move.w	(v_air).w,d2
00016E0E E24A                       		lsr.w	#1,d2
00016E10 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016E16 0240 0003                  		andi.w	#3,d0
00016E1A 6600                       		bne.s	@loc_1406A
00016E1C 08E8 0006 0036             		bset	#6,$36(a0)
00016E22 6600                       		bne.s	@loc_14082
00016E24 1342 0028                  		move.b	d2,obSubtype(a1)
00016E28 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E2E                            
00016E2E                            	@loc_1406A:
00016E2E 4A28 0034                  		tst.b	$34(a0)
00016E32 6600                       		bne.s	@loc_14082
00016E34 08E8 0006 0036             		bset	#6,$36(a0)
00016E3A 6600                       		bne.s	@loc_14082
00016E3C 1342 0028                  		move.b	d2,obSubtype(a1)
00016E40 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E46                            
00016E46                            @loc_14082:
00016E46 5328 0034                  		subq.b	#1,$34(a0)
00016E4A 6A00                       		bpl.s	@nocountdown
00016E4C 4268 0036                  		clr.w	$36(a0)
00016E50                            
00016E50                            @nocountdown:
00016E50 4E75                       		rts	
00016E50 4E75                       		rts	
00016E52                            
00016E52                            
00016E52                            ; ---------------------------------------------------------------------------
00016E52                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016E52                            ; ---------------------------------------------------------------------------
00016E52                            
00016E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E52                            
00016E52                            
00016E52                            ResumeMusic:
00016E52                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016E52                            		;bhi.s	@over12		; if yes, branch
00016E52                            		;move.b	(v_Saved_music),d0
00016E52                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016E52                            		;beq.s	@notinvinc ; if not, branch
00016E52                            		;move.w	#bgm_Invincible,d0
00016E52                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016E52                            		;beq.s	@notinvinc	; if not, branch
00016E52                            		;move.w	#bgm_Ending,d0
00016E52                            
00016E52                            	;@notinvinc:
00016E52                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016E52                            		;beq.s	@playselected ; if not, branch
00016E52                            		;move.w	#bgm_Boss,d0
00016E52                            
00016E52                            	;@playselected:
00016E52                            		;jsr	(PlaySound).l
00016E52                            
00016E52                            	;@over12:
00016E52 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016E58 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016E5C 4E75                       		rts	
00016E5E                            
00016E5E                            ;End of function ResumeMusic
00016E5E                            
00016E5E                            ; ===========================================================================
00016E5E                            
00016E5E                            		include	"_anim\Drowning Countdown.asm"
00016E5E                            ; ---------------------------------------------------------------------------
00016E5E                            ; Animation script - countdown numbers and bubbles (LZ)
00016E5E                            ; ---------------------------------------------------------------------------
00016E5E 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016E60 0000                       		dc.w @oneappear-Ani_Drown
00016E62 0000                       		dc.w @twoappear-Ani_Drown
00016E64 0000                       		dc.w @threeappear-Ani_Drown
00016E66 0000                       		dc.w @fourappear-Ani_Drown
00016E68 0000                       		dc.w @fiveappear-Ani_Drown
00016E6A 0000                       		dc.w @smallbubble-Ani_Drown
00016E6C 0000                       		dc.w @zeroflash-Ani_Drown
00016E6E 0000                       		dc.w @oneflash-Ani_Drown
00016E70 0000                       		dc.w @twoflash-Ani_Drown
00016E72 0000                       		dc.w @threeflash-Ani_Drown
00016E74 0000                       		dc.w @fourflash-Ani_Drown
00016E76 0000                       		dc.w @fiveflash-Ani_Drown
00016E78 0000                       		dc.w @blank-Ani_Drown
00016E7A 0000                       		dc.w @mediumbubble-Ani_Drown
00016E7C 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016E86 00                         		even
00016E86 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016E90 00                         		even
00016E90 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016E9A 00                         		even
00016E9A 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016EA4 00                         		even
00016EA4 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016EAE 00                         		even
00016EAE 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016EB8 00                         		even
00016EB8 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016EBE 00                         		even
00016EBE 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016EC6 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016ECE 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016ED6 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016EDE 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016EE6 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016EEE 0EFC                       @blank:		dc.b $E, afRoutine
00016EF0 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016EF6                            		even
00016EF6                            		even
00016EF6                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016EF6                            ; ---------------------------------------------------------------------------
00016EF6                            ; Sprite mappings - drowning countdown numbers (LZ)
00016EF6                            ; ---------------------------------------------------------------------------
00016EF6                            Map_Drown_internal:
00016EF6 0000                       		dc.w @num-Map_Drown_internal
00016EF8 01                         @num:		dc.b 1
00016EF9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016EFE                            		even
00016EFE                            		even
00016EFE                            
00016EFE                            		include	"_incObj\4E Silver Shield.asm"
00016EFE                            ; ---------------------------------------------------------------------------
00016EFE                            ; Object 4E - Silver Shield
00016EFE                            ; ---------------------------------------------------------------------------
00016EFE                            
00016EFE                            SpShieldItem:
00016EFE 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016F04 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F08                            		; In this case, VRAM = $541*20
00016F08 363C 0200                  		move.w #$200,d3
00016F0C 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016F12                            ; ---------------------------------------------------------------------------
00016F12                            SpShieldObj_Main:
00016F12 7000                       		moveq #0,d0
00016F14 1028 0024                  		move.b $24(a0),d0
00016F18 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016F1C 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016F20                            ; ===========================================================================
00016F20                            SpShield_Index:
00016F20 0000                       		dc.w SpShield_Init-SpShield_Index
00016F22 0000                       		dc.w SpShieldChecks-SpShield_Index
00016F24                            ; ===========================================================================
00016F24                            SpShield_Init:
00016F24 5428 0024                  		addq.b #2,$24(a0)
00016F28 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F30 117C 0004 0001             		move.b #4,1(a0)
00016F36 317C 0080 0018             		move.w #$80,$18(a0)
00016F3C 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F42 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F48 0838 0007 D002             		btst #7,($FFFFD002).w
00016F4E 6700                       		beq.s SpShieldChecks
00016F50 08E8 0007 0002             		bset #7,2(a0)
00016F56                            ; ---------------------------------------------------------------------------
00016F56                            SpShieldChecks:
00016F56 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F5A 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016F5C 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016F60 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016F62                            SpShieldProperties:
00016F62 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F68 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F6E 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F74 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F7A 4EB9 0000 CA32             		jsr AnimateSprite
00016F80 4EFA 8A04                  		jmp DisplaySprite
00016F84                            SpSonicHasShield:
00016F84 4E75                       		rts
00016F86                            Spjmp_DeleteObj38: ; loc_12648:
00016F86 4EFA 8A3E                  		jmp DeleteObject
00016F86 4EFA 8A3E                  		jmp DeleteObject
00016F8A                            		include	"_incObj\04 Gold Shield.asm"
00016F8A                            ; ---------------------------------------------------------------------------
00016F8A                            ; Object 04 - Gold shield
00016F8A                            ; ---------------------------------------------------------------------------
00016F8A                            
00016F8A                            GShieldItem:
00016F8A 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016F90 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F94                            		; In this case, VRAM = $541*20
00016F94 363C 0200                  		move.w #$200,d3
00016F98 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016F9E                            ; ---------------------------------------------------------------------------
00016F9E                            GShieldObj_Main:
00016F9E 7000                       		moveq #0,d0
00016FA0 1028 0024                  		move.b $24(a0),d0
00016FA4 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016FA8 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016FAC                            ; ===========================================================================
00016FAC                            GShield_Index:
00016FAC 0000                       		dc.w GShield_Init-GShield_Index
00016FAE 0000                       		dc.w GShieldChecks-GShield_Index
00016FB0                            ; ===========================================================================
00016FB0                            GShield_Init:
00016FB0 5428 0024                  		addq.b #2,$24(a0)
00016FB4 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FBC 117C 0004 0001             		move.b #4,1(a0)
00016FC2 317C 0080 0018             		move.w #$80,$18(a0)
00016FC8 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FCE 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FD4 0838 0007 D002             		btst #7,($FFFFD002).w
00016FDA 6700                       		beq.s GShieldChecks
00016FDC 08E8 0007 0002             		bset #7,2(a0)
00016FE2                            ; ---------------------------------------------------------------------------
00016FE2                            GShieldChecks:
00016FE2 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FE6 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016FE8 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016FEC 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016FEE                            GShieldProperties:
00016FEE 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FF4 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016FFA 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017000 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017006 4EB9 0000 CA32             		jsr AnimateSprite
0001700C 4EFA 8978                  		jmp DisplaySprite
00017010                            GSonicHasShield:
00017010 4E75                       		rts
00017012                            Gjmp_DeleteObj38: ; loc_12648:
00017012 4EFA 89B2                  		jmp DeleteObject
00017012 4EFA 89B2                  		jmp DeleteObject
00017016                            		include	"_incObj\07 Red Shield.asm"
00017016                            ; ---------------------------------------------------------------------------
00017016                            ; Object 07 - red shield
00017016                            ; ---------------------------------------------------------------------------
00017016                            
00017016                            RShieldItem:
00017016 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
0001701C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017020                            		; In this case, VRAM = $541*20
00017020 363C 0200                  		move.w #$200,d3
00017024 4EB9 0000 142A             		jsr (QueueDMATransfer).l
0001702A                            ; ---------------------------------------------------------------------------
0001702A                            RShieldObj_Main:
0001702A 7000                       		moveq #0,d0
0001702C 1028 0024                  		move.b $24(a0),d0
00017030 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00017034 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00017038                            ; ===========================================================================
00017038                            RShield_Index:
00017038 0000                       		dc.w RShield_Init-RShield_Index
0001703A 0000                       		dc.w RShieldChecks-RShield_Index
0001703C                            ; ===========================================================================
0001703C                            RShield_Init:
0001703C 5428 0024                  		addq.b #2,$24(a0)
00017040 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00017048 117C 0004 0001             		move.b #4,1(a0)
0001704E 317C 0080 0018             		move.w #$80,$18(a0)
00017054 117C 0018 0014             		move.b #$18,obActWid(a0)
0001705A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017060 0838 0007 D002             		btst #7,($FFFFD002).w
00017066 6700                       		beq.s RShieldChecks
00017068 08E8 0007 0002             		bset #7,2(a0)
0001706E                            ; ---------------------------------------------------------------------------
0001706E                            RShieldChecks:
0001706E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017072 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00017074 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00017078 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
0001707A                            RShieldProperties:
0001707A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017080 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017086 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001708C 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017092 4EB9 0000 CA32             		jsr AnimateSprite
00017098 4EFA 88EC                  		jmp DisplaySprite
0001709C                            RSonicHasShield:
0001709C 4E75                       		rts
0001709E                            Rjmp_DeleteObj38: ; loc_12648:
0001709E 4EFA 8926                  		jmp DeleteObject
0001709E 4EFA 8926                  		jmp DeleteObject
000170A2                            		include	"_incObj\38 Shield.asm"
000170A2                            ; ---------------------------------------------------------------------------
000170A2                            ; Object 38 - shield
000170A2                            ; ---------------------------------------------------------------------------
000170A2                            
000170A2                            ShieldItem:
000170A2 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
000170A8 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170AC                            		; In this case, VRAM = $541*20
000170AC 363C 0200                  		move.w #$200,d3
000170B0 4EB9 0000 142A             		jsr (QueueDMATransfer).l
000170B6                            ; ---------------------------------------------------------------------------
000170B6                            ShieldObj_Main:
000170B6 7000                       		moveq #0,d0
000170B8 1028 0024                  		move.b $24(a0),d0
000170BC 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000170C0 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000170C4                            ; ===========================================================================
000170C4                            Shield_Index:
000170C4 0000                       		dc.w Shield_Init-Shield_Index
000170C6 0000                       		dc.w ShieldChecks-Shield_Index
000170C8                            ; ===========================================================================
000170C8                            Shield_Init:
000170C8 5428 0024                  		addq.b #2,$24(a0)
000170CC 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000170D4 117C 0004 0001             		move.b #4,1(a0)
000170DA 317C 0080 0018             		move.w #$80,$18(a0)
000170E0 117C 0018 0014             		move.b #$18,obActWid(a0)
000170E6 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000170EC 0838 0007 D002             		btst #7,($FFFFD002).w
000170F2 6700                       		beq.s ShieldChecks
000170F4 08E8 0007 0002             		bset #7,2(a0)
000170FA                            ; ---------------------------------------------------------------------------
000170FA                            ShieldChecks:
000170FA 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
000170FE 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017100 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00017104 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00017106                            ShieldProperties:
00017106 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
0001710C 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017112 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017118 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
0001711E 4EB9 0000 CA32             		jsr AnimateSprite
00017124 4EFA 8860                  		jmp DisplaySprite
00017128                            SonicHasShield:
00017128 4E75                       		rts
0001712A                            jmp_DeleteObj38: ; loc_12648:
0001712A 4EFA 889A                  		jmp DeleteObject
0001712A 4EFA 889A                  		jmp DeleteObject
0001712E                            		include	"_incObj\19 Invincibility Stars.asm"		
0001712E                            ; ---------------------------------------------------------------------------
0001712E                            ; Object 19 - Invincibility Stars
0001712E                            ; ---------------------------------------------------------------------------
0001712E                            
0001712E                            InvStarsObj:
0001712E 223C 0000 0000             		move.l #Unc_Stars,d1
00017134 343C A820                  		move.w #$A820,d2
00017138 363C 0200                  		move.w #$200,d3
0001713C 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00017142                            Invincibility_Main:
00017142 7000                       		moveq #0,d0
00017144 1028 0024                  		move.b $24(a0),d0
00017148                            Invincibility_Init:
00017148 5428 0024                  		addq.b #2,$24(a0)
0001714C 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017154 117C 0004 0001             		move.b #4,1(a0)
0001715A 317C 0080 0018             		move.w #$80,$18(a0)
00017160 117C 0010 0014             		move.b #$10,obActWid(a0)
00017166 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
0001716C                            ; ===========================================================================
0001716C                            
0001716C                            Obj19_Stars: ; XREF: Obj38_Index
0001716C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017170 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017172 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00017176 1228 001C                  		move.b $1C(a0),d1
0001717A 5301                       		subq.b #1,d1
0001717C 6000                       		bra.s Obj19_StarTrail
0001717E                            ; ===========================================================================
0001717E E909                       		lsl.b #4,d1
00017180 5801                       		addq.b #4,d1
00017182 9001                       		sub.b d1,d0
00017184 1228 0030                  		move.b $30(a0),d1
00017188 9001                       		sub.b d1,d0
0001718A 5801                       		addq.b #4,d1
0001718C 0201 000F                  		andi.b #$F,d1
00017190 1141 0030                  		move.b d1,$30(a0)
00017194 6000                       		bra.s Obj19_StarTrail2a
00017196                            ; ===========================================================================
00017196                            
00017196                            Obj19_StarTrail: ; XREF: Obj19_Stars
00017196 E709                       		lsl.b #3,d1
00017198 1401                       		move.b d1,d2
0001719A D201                       		add.b d1,d1
0001719C D202                       		add.b d2,d1
0001719E 5801                       		addq.b #4,d1
000171A0 9001                       		sub.b d1,d0
000171A2 1228 0030                  		move.b $30(a0),d1
000171A6 9001                       		sub.b d1,d0
000171A8 5801                       		addq.b #4,d1
000171AA 0C01 0018                  		cmpi.b #$18,d1
000171AE 6500                       		bcs.s Obj19_StarTrail2
000171B0 7200                       		moveq #0,d1
000171B2                            
000171B2                            Obj19_StarTrail2:
000171B2 1141 0030                  		move.b d1,$30(a0)
000171B6                            
000171B6                            Obj19_StarTrail2a:
000171B6 43F8 CB00                  		lea ($FFFFCB00).w,a1
000171BA 43F1 0000                  		lea (a1,d0.w),a1
000171BE 3159 0008                  		move.w (a1)+,8(a0)
000171C2 3159 000C                  		move.w (a1)+,$C(a0)
000171C6 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000171CC 43F9 0000 0000             		lea (Ani_Shield).l,a1
000171D2 4EB9 0000 CA32             		jsr (AnimateSprite).l
000171D8 4EF9 0000 F986             		jmp (DisplaySprite).l
000171DE                            ; ===========================================================================
000171DE                            
000171DE                            Obj19_Delete2: ; XREF: Obj19_Stars
000171DE 4EF9 0000 F9C6             		jmp (DeleteObject).l
000171DE 4EF9 0000 F9C6             		jmp (DeleteObject).l
000171E4                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000171E4                            ; ---------------------------------------------------------------------------
000171E4                            ; Object 4A - special stage entry from beta
000171E4                            ; ---------------------------------------------------------------------------
000171E4                            
000171E4                            VanishSonic:
000171E4 7000                       		moveq	#0,d0
000171E6 1028 0024                  		move.b	obRoutine(a0),d0
000171EA 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000171EE 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000171F2                            ; ===========================================================================
000171F2 0000                       Van_Index:	dc.w Van_Main-Van_Index
000171F4 0000                       		dc.w Van_RmvSonic-Van_Index
000171F6 0000                       		dc.w Van_LoadSonic-Van_Index
000171F8                            
000171F8 =00000030                  van_time:	equ $30		; time for Sonic to disappear
000171F8                            ; ===========================================================================
000171F8                            
000171F8                            Van_Main:	; Routine 0
000171F8 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000171FC 6700                       		beq.s	@isempty	; if yes, branch
000171FE 4E75                       		rts	
00017200                            
00017200                            	@isempty:
00017200 5428 0024                  		addq.b	#2,obRoutine(a0)
00017204 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
0001720C 117C 0004 0001             		move.b	#4,obRender(a0)
00017212 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017218 117C 0038 0014             		move.b	#$38,obActWid(a0)
0001721E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00017224 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
0001722A                            
0001722A                            Van_RmvSonic:	; Routine 2
0001722A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017230 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017236 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
0001723C 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017242 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00017248 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001724E 6600                       		bne.s	@display
00017250 4A38 D000                  		tst.b	(v_player).w
00017254 6700                       		beq.s	@display
00017256 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017266                            
00017266                            	@display:
00017266 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001726C                            ; ===========================================================================
0001726C                            
0001726C                            Van_LoadSonic:	; Routine 4
0001726C 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017270 6600                       		bne.s	@wait		; if time remains, branch
00017272 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017278 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001727E                            
0001727E                            	@wait:
0001727E 4E75                       		rts	
0001727E 4E75                       		rts	
00017280                            		include	"_incObj\08 Water Splash.asm"
00017280                            ; ---------------------------------------------------------------------------
00017280                            ; Object 08 - water splash (LZ)
00017280                            ; ---------------------------------------------------------------------------
00017280                            
00017280                            Splash:
00017280 7000                       		moveq	#0,d0
00017282 1028 0024                  		move.b	obRoutine(a0),d0
00017286 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001728A 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
0001728E                            ; ===========================================================================
0001728E 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017290 0000                       		dc.w Spla_Display-Spla_Index
00017292 0000                       		dc.w Spla_Delete-Spla_Index
00017294                            ; ===========================================================================
00017294                            
00017294                            Spla_Main:    ; Routine 0
00017294 5428 0024                          addq.b    #2,obRoutine(a0)
00017298 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000172A0 0028 0004 0001                     ori.b    #4,obRender(a0)
000172A6 117C 0001 0018                     move.b    #1,obPriority(a0)
000172AC 117C 0010 0014                     move.b    #$10,obActWid(a0)
000172B2 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000172B8 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000172BE                            
000172BE                            Spla_Display:    ; Routine 2
000172BE                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000172BE 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000172C4 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000172CA 4EB9 0000 CA32                     jsr    (AnimateSprite).l
000172D0 4EF9 0000 F986                     jmp    (DisplaySprite).l
000172D6                            ; ===========================================================================
000172D6                            
000172D6                            Spla_Delete:	; Routine 4
000172D6 4EF9 0000 F9C6             		jmp	(DeleteObject).l	; delete when animation	is complete
000172D6 4EF9 0000 F9C6             		jmp	(DeleteObject).l	; delete when animation	is complete
000172DC                            		include	"_anim\Shield and Invincibility.asm"
000172DC                            ; ---------------------------------------------------------------------------
000172DC                            ; Animation script - shield and invincibility stars
000172DC                            ; ---------------------------------------------------------------------------
000172DC 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000172DE 0000                       		dc.w @stars1-Ani_Shield
000172E0 0000                       		dc.w @stars2-Ani_Shield
000172E2 0000                       		dc.w @stars3-Ani_Shield
000172E4 0000                       		dc.w @stars4-Ani_Shield
000172E6 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000172EE 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000172F4 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00017305 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
0001730E 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001731F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
00017328 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00017339 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017342                            		even
00017342                            		even
00017342                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017342                            ; --------------------------------------------------------------------------------
00017342                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017342                            ; --------------------------------------------------------------------------------
00017342                            
00017342                            SME_7M_8q:	
00017342 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
00017346 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
0001734A 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
0001734E 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017352 00                         SME_7M_8q_10:	dc.b 0	
00017353 04                         SME_7M_8q_11:	dc.b 4	
00017354 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017359 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001735E 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017363 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017368 04                         SME_7M_8q_26:	dc.b 4	
00017369 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
0001736E E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017373 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
00017378 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001737D 04                         SME_7M_8q_3B:	dc.b 4	
0001737E E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017383 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017388 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001738D 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017392 04                         SME_7M_8q_50:	dc.b 4	
00017393 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017398 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001739D 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000173A2 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000173A7 04                         SME_7M_8q_65:	dc.b 4	
000173A8 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000173AD E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000173B2 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000173B7 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000173BC 04                         SME_7M_8q_7A:	dc.b 4	
000173BD E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000173C2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000173C7 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000173CC 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000173D1 04                         SME_7M_8q_8F:	dc.b 4	
000173D2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000173D7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000173DC 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000173E1 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000173E6                            		even
000173E6                            		even
000173E6                            Map_Shield2:	include	"_maps\Shield 2.asm"
000173E6                            ; --------------------------------------------------------------------------------
000173E6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173E6                            ; --------------------------------------------------------------------------------
000173E6                            
000173E6                            SME_X5P7B:	
000173E6 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000173EA 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000173EE 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000173F2 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000173F6 00                         SME_X5P7B_10:	dc.b 0	
000173F7 04                         SME_X5P7B_11:	dc.b 4	
000173F8 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000173FD E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017402 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017407 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001740C 04                         SME_X5P7B_26:	dc.b 4	
0001740D E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017412 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
00017417 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
0001741C 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017421 04                         SME_X5P7B_3B:	dc.b 4	
00017422 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017427 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001742C 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017431 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017436 04                         SME_X5P7B_50:	dc.b 4	
00017437 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001743C E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017441 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017446 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001744B 04                         SME_X5P7B_65:	dc.b 4	
0001744C E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017451 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017456 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001745B 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017460 04                         SME_X5P7B_7A:	dc.b 4	
00017461 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017466 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001746B 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017470 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017475 04                         SME_X5P7B_8F:	dc.b 4	
00017476 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001747B E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017480 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017485 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001748A                            		even
0001748A                            		even
0001748A                            
0001748A                            Map_Shield3:	include	"_maps\Shield 3.asm"
0001748A                            ; --------------------------------------------------------------------------------
0001748A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001748A                            ; --------------------------------------------------------------------------------
0001748A                            
0001748A                            SME__wWzO:	
0001748A 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
0001748E 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017492 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
00017496 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
0001749A 00                         SME__wWzO_10:	dc.b 0	
0001749B 04                         SME__wWzO_11:	dc.b 4	
0001749C E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174A1 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174A6 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174AB 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000174B0 04                         SME__wWzO_26:	dc.b 4	
000174B1 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000174B6 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000174BB 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000174C0 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000174C5 04                         SME__wWzO_3B:	dc.b 4	
000174C6 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174CB E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174D0 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174D5 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174DA 04                         SME__wWzO_50:	dc.b 4	
000174DB E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174E0 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174E5 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174EA 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174EF 04                         SME__wWzO_65:	dc.b 4	
000174F0 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174F5 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174FA 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174FF 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017504 04                         SME__wWzO_7A:	dc.b 4	
00017505 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001750A E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001750F 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017514 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017519 04                         SME__wWzO_8F:	dc.b 4	
0001751A E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001751F E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017524 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017529 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001752E                            		even
0001752E                            		even
0001752E                            		include	"_anim\Special Stage Entry (Unused).asm"
0001752E                            ; ---------------------------------------------------------------------------
0001752E                            ; Animation script - special stage entry effect from beta
0001752E                            ; ---------------------------------------------------------------------------
0001752E 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017530 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017544                            		even
00017544                            		even
00017544                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017544                            ; ---------------------------------------------------------------------------
00017544                            ; Sprite mappings - special stage entry	from beta
00017544                            ; ---------------------------------------------------------------------------
00017544                            Map_Vanish_internal:
00017544 0000                       		dc.w @flash1-Map_Vanish_internal
00017546 0000                       		dc.w @flash2-Map_Vanish_internal
00017548 0000                       		dc.w @flash3-Map_Vanish_internal
0001754A 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001754C 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001754E 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017550 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017552 0000                       		dc.w @blank-Map_Vanish_internal
00017554 03                         @flash1:	dc.b 3
00017555 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001755A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001755F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017564 03                         @flash2:	dc.b 3
00017565 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001756A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001756F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017574 05                         @flash3:	dc.b 5
00017575 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001757A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001757F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017584 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017589 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001758E 09                         @sparkle1:	dc.b 9
0001758F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017594 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017599 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001759E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000175A3 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000175A8 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000175AD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000175B2 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000175B7 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000175BC 12                         @sparkle2:	dc.b $12
000175BD 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000175C2 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000175C7 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000175CC 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000175D1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000175D6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000175DB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000175E0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000175E5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000175EA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000175EF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000175F4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000175F9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000175FE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017603 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017608 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001760D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017612 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017617 11                         @sparkle3:	dc.b $11
00017618 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001761D F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017622 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017627 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001762C 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017631 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017636 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001763B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017640 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017645 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001764A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001764F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017654 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017659 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001765E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017663 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017668 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001766D 09                         @sparkle4:	dc.b 9
0001766E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017673 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017678 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001767D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017682 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017687 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001768C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017691 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017696 04                         		dc.b 4
00017697 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001769C                            		even
0001769C                            		even
0001769C                            		include	"_anim\Water Splash.asm"
0001769C                            ; ---------------------------------------------------------------------------
0001769C                            ; Animation script - water splash (LZ)
0001769C                            ; ---------------------------------------------------------------------------
0001769C 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
0001769E 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000176A4 00                         		even
000176A4 00                         		even
000176A4                            Map_Splash:	include	"_maps\Water Splash.asm"
000176A4                            ; ---------------------------------------------------------------------------
000176A4                            ; Sprite mappings - water splash (LZ)
000176A4                            ; ---------------------------------------------------------------------------
000176A4                            Map_Splash_internal:
000176A4 0000                       		dc.w @splash1-Map_Splash_internal
000176A6 0000                       		dc.w @splash2-Map_Splash_internal
000176A8 0000                       		dc.w @splash3-Map_Splash_internal
000176AA 02                         @splash1:	dc.b 2
000176AB F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000176B0 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000176B5 02                         @splash2:	dc.b 2
000176B6 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000176BB EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000176C0 01                         @splash3:	dc.b 1
000176C1 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000176C6                            		even
000176C6                            		even
000176C6                            
000176C6                            		include	"_incObj\Sonic AnglePos.asm"
000176C6                            ; ---------------------------------------------------------------------------
000176C6                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000176C6                            ; ---------------------------------------------------------------------------
000176C6                            
000176C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176C6                            
000176C6                            
000176C6                            Sonic_AnglePos:
000176C6 0828 0003 0022             		btst	#3,obStatus(a0)
000176CC 6700                       		beq.s	loc_14602
000176CE 7000                       		moveq	#0,d0
000176D0 11C0 F768                  		move.b	d0,($FFFFF768).w
000176D4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176D8 4E75                       		rts	
000176DA                            ; ===========================================================================
000176DA                            
000176DA                            loc_14602:
000176DA 7003                       		moveq	#3,d0
000176DC 11C0 F768                  		move.b	d0,($FFFFF768).w
000176E0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176E4 1028 0026                  		move.b	obAngle(a0),d0
000176E8 0600 0020                  		addi.b	#$20,d0
000176EC 6A00                       		bpl.s	loc_14624
000176EE 1028 0026                  		move.b	obAngle(a0),d0
000176F2 6A00                       		bpl.s	loc_1461E
000176F4 5300                       		subq.b	#1,d0
000176F6                            
000176F6                            loc_1461E:
000176F6 0600 0020                  		addi.b	#$20,d0
000176FA 6000                       		bra.s	loc_14630
000176FC                            ; ===========================================================================
000176FC                            
000176FC                            loc_14624:
000176FC 1028 0026                  		move.b	obAngle(a0),d0
00017700 6A00                       		bpl.s	loc_1462C
00017702 5200                       		addq.b	#1,d0
00017704                            
00017704                            loc_1462C:
00017704 0600 001F                  		addi.b	#$1F,d0
00017708                            
00017708                            loc_14630:
00017708 0200 00C0                  		andi.b	#$C0,d0
0001770C 0C00 0040                  		cmpi.b	#$40,d0
00017710 6700 0000                  		beq.w	Sonic_WalkVertL
00017714 0C00 0080                  		cmpi.b	#$80,d0
00017718 6700 0000                  		beq.w	Sonic_WalkCeiling
0001771C 0C00 00C0                  		cmpi.b	#$C0,d0
00017720 6700 0000                  		beq.w	Sonic_WalkVertR
00017724 3428 000C                  		move.w	obY(a0),d2
00017728 3628 0008                  		move.w	obX(a0),d3
0001772C 7000                       		moveq	#0,d0
0001772E 1028 0016                  		move.b	obHeight(a0),d0
00017732 4880                       		ext.w	d0
00017734 D440                       		add.w	d0,d2
00017736 1028 0017                  		move.b	obWidth(a0),d0
0001773A 4880                       		ext.w	d0
0001773C D640                       		add.w	d0,d3
0001773E 49F8 F768                  		lea	($FFFFF768).w,a4
00017742 367C 0010                  		movea.w	#$10,a3
00017746 3C3C 0000                  		move.w	#0,d6
0001774A 7A0D                       		moveq	#$D,d5
0001774C 6100 0000                  		bsr.w	FindFloor
00017750 3F01                       		move.w	d1,-(sp)
00017752 3428 000C                  		move.w	obY(a0),d2
00017756 3628 0008                  		move.w	obX(a0),d3
0001775A 7000                       		moveq	#0,d0
0001775C 1028 0016                  		move.b	obHeight(a0),d0
00017760 4880                       		ext.w	d0
00017762 D440                       		add.w	d0,d2
00017764 1028 0017                  		move.b	obWidth(a0),d0
00017768 4880                       		ext.w	d0
0001776A 4440                       		neg.w	d0
0001776C D640                       		add.w	d0,d3
0001776E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017772 367C 0010                  		movea.w	#$10,a3
00017776 3C3C 0000                  		move.w	#0,d6
0001777A 7A0D                       		moveq	#$D,d5
0001777C 6100 0000                  		bsr.w	FindFloor
00017780 301F                       		move.w	(sp)+,d0
00017782 6100 0000                  		bsr.w	Sonic_Angle
00017786 4A41                       		tst.w	d1
00017788 6700                       		beq.s	locret_146BE
0001778A 6A00                       		bpl.s	loc_146C0
0001778C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017790 6D00                       		blt.s	locret_146E6
00017792 D368 000C                  		add.w	d1,obY(a0)
00017796                            
00017796                            locret_146BE:
00017796 4E75                       		rts	
00017798                            ; ===========================================================================
00017798                            
00017798                            loc_146C0:
00017798 0C41 000E                  		cmpi.w	#$E,d1
0001779C 6E00                       		bgt.s	loc_146CC
0001779E                            
0001779E                            loc_146C6:
0001779E D368 000C                  		add.w	d1,obY(a0)
000177A2 4E75                       		rts	
000177A4                            ; ===========================================================================
000177A4                            
000177A4                            loc_146CC:
000177A4 4A28 0038                  		tst.b	$38(a0)
000177A8 66F4                       		bne.s	loc_146C6
000177AA 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177B6 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177BC 4E75                       		rts	
000177BE                            ; ===========================================================================
000177BE                            
000177BE                            locret_146E6:
000177BE 4E75                       		rts	
000177C0                            ; End of function Sonic_AnglePos
000177C0                            
000177C0                            ; ===========================================================================
000177C0 2428 0008                  		move.l	obX(a0),d2
000177C4 3028 0010                  		move.w	obVelX(a0),d0
000177C8 48C0                       		ext.l	d0
000177CA E180                       		asl.l	#8,d0
000177CC 9480                       		sub.l	d0,d2
000177CE 2142 0008                  		move.l	d2,obX(a0)
000177D2 303C 0038                  		move.w	#$38,d0
000177D6 48C0                       		ext.l	d0
000177D8 E180                       		asl.l	#8,d0
000177DA 9680                       		sub.l	d0,d3
000177DC 2143 000C                  		move.l	d3,obY(a0)
000177E0 4E75                       		rts	
000177E2                            ; ===========================================================================
000177E2                            
000177E2                            locret_1470A:
000177E2 4E75                       		rts	
000177E4                            ; ===========================================================================
000177E4 2628 000C                  		move.l	obY(a0),d3
000177E8 3028 0012                  		move.w	obVelY(a0),d0
000177EC 0440 0038                  		subi.w	#$38,d0
000177F0 3140 0012                  		move.w	d0,obVelY(a0)
000177F4 48C0                       		ext.l	d0
000177F6 E180                       		asl.l	#8,d0
000177F8 9680                       		sub.l	d0,d3
000177FA 2143 000C                  		move.l	d3,obY(a0)
000177FE 4E75                       		rts	
00017800 4E75                       		rts	
00017802                            ; ===========================================================================
00017802 2428 0008                  		move.l	obX(a0),d2
00017806 2628 000C                  		move.l	obY(a0),d3
0001780A 3028 0010                  		move.w	obVelX(a0),d0
0001780E 48C0                       		ext.l	d0
00017810 E180                       		asl.l	#8,d0
00017812 9480                       		sub.l	d0,d2
00017814 3028 0012                  		move.w	obVelY(a0),d0
00017818 48C0                       		ext.l	d0
0001781A E180                       		asl.l	#8,d0
0001781C 9680                       		sub.l	d0,d3
0001781E 2142 0008                  		move.l	d2,obX(a0)
00017822 2143 000C                  		move.l	d3,obY(a0)
00017826 4E75                       		rts	
00017828                            
00017828                            ; ---------------------------------------------------------------------------
00017828                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017828                            ; ---------------------------------------------------------------------------
00017828                            
00017828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017828                            
00017828                            
00017828                            Sonic_Angle:
00017828 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001782C B240                       		cmp.w	d0,d1
0001782E 6F00                       		ble.s	loc_1475E
00017830 1438 F768                  		move.b	($FFFFF768).w,d2
00017834 3200                       		move.w	d0,d1
00017836                            
00017836                            loc_1475E:
00017836 0802 0000                  		btst	#0,d2
0001783A 6600                       		bne.s	loc_1476A
0001783C 1142 0026                  		move.b	d2,obAngle(a0)
00017840 4E75                       		rts	
00017842                            ; ===========================================================================
00017842                            
00017842                            loc_1476A:
00017842 1428 0026                  		move.b	obAngle(a0),d2
00017846 0602 0020                  		addi.b	#$20,d2
0001784A 0202 00C0                  		andi.b	#$C0,d2
0001784E 1142 0026                  		move.b	d2,obAngle(a0)
00017852 4E75                       		rts	
00017854                            ; End of function Sonic_Angle
00017854                            
00017854                            ; ---------------------------------------------------------------------------
00017854                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017854                            ; ---------------------------------------------------------------------------
00017854                            
00017854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017854                            
00017854                            
00017854                            Sonic_WalkVertR:
00017854 3428 000C                  		move.w	obY(a0),d2
00017858 3628 0008                  		move.w	obX(a0),d3
0001785C 7000                       		moveq	#0,d0
0001785E 1028 0017                  		move.b	obWidth(a0),d0
00017862 4880                       		ext.w	d0
00017864 4440                       		neg.w	d0
00017866 D440                       		add.w	d0,d2
00017868 1028 0016                  		move.b	obHeight(a0),d0
0001786C 4880                       		ext.w	d0
0001786E D640                       		add.w	d0,d3
00017870 49F8 F768                  		lea	($FFFFF768).w,a4
00017874 367C 0010                  		movea.w	#$10,a3
00017878 3C3C 0000                  		move.w	#0,d6
0001787C 7A0D                       		moveq	#$D,d5
0001787E 6100 0000                  		bsr.w	FindWall
00017882 3F01                       		move.w	d1,-(sp)
00017884 3428 000C                  		move.w	obY(a0),d2
00017888 3628 0008                  		move.w	obX(a0),d3
0001788C 7000                       		moveq	#0,d0
0001788E 1028 0017                  		move.b	obWidth(a0),d0
00017892 4880                       		ext.w	d0
00017894 D440                       		add.w	d0,d2
00017896 1028 0016                  		move.b	obHeight(a0),d0
0001789A 4880                       		ext.w	d0
0001789C D640                       		add.w	d0,d3
0001789E 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178A2 367C 0010                  		movea.w	#$10,a3
000178A6 3C3C 0000                  		move.w	#0,d6
000178AA 7A0D                       		moveq	#$D,d5
000178AC 6100 0000                  		bsr.w	FindWall
000178B0 301F                       		move.w	(sp)+,d0
000178B2 6100 FF74                  		bsr.w	Sonic_Angle
000178B6 4A41                       		tst.w	d1
000178B8 6700                       		beq.s	locret_147F0
000178BA 6A00                       		bpl.s	loc_147F2
000178BC 0C41 FFF2                  		cmpi.w	#-$E,d1
000178C0 6D00 FF20                  		blt.w	locret_1470A
000178C4 D368 0008                  		add.w	d1,obX(a0)
000178C8                            
000178C8                            locret_147F0:
000178C8 4E75                       		rts	
000178CA                            ; ===========================================================================
000178CA                            
000178CA                            loc_147F2:
000178CA 0C41 000E                  		cmpi.w	#$E,d1
000178CE 6E00                       		bgt.s	loc_147FE
000178D0                            
000178D0                            loc_147F8:
000178D0 D368 0008                  		add.w	d1,obX(a0)
000178D4 4E75                       		rts	
000178D6                            ; ===========================================================================
000178D6                            
000178D6                            loc_147FE:
000178D6 4A28 0038                  		tst.b	$38(a0)
000178DA 66F4                       		bne.s	loc_147F8
000178DC 08E8 0001 0022             		bset	#1,obStatus(a0)
000178E2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178E8 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178EE 4E75                       		rts	
000178F0                            ; End of function Sonic_WalkVertR
000178F0                            
000178F0                            ; ---------------------------------------------------------------------------
000178F0                            ; Subroutine allowing Sonic to walk upside-down
000178F0                            ; ---------------------------------------------------------------------------
000178F0                            
000178F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F0                            
000178F0                            
000178F0                            Sonic_WalkCeiling:
000178F0 3428 000C                  		move.w	obY(a0),d2
000178F4 3628 0008                  		move.w	obX(a0),d3
000178F8 7000                       		moveq	#0,d0
000178FA 1028 0016                  		move.b	obHeight(a0),d0
000178FE 4880                       		ext.w	d0
00017900 9440                       		sub.w	d0,d2
00017902 0A42 000F                  		eori.w	#$F,d2
00017906 1028 0017                  		move.b	obWidth(a0),d0
0001790A 4880                       		ext.w	d0
0001790C D640                       		add.w	d0,d3
0001790E 49F8 F768                  		lea	($FFFFF768).w,a4
00017912 367C FFF0                  		movea.w	#-$10,a3
00017916 3C3C 1000                  		move.w	#$1000,d6
0001791A 7A0D                       		moveq	#$D,d5
0001791C 6100 0000                  		bsr.w	FindFloor
00017920 3F01                       		move.w	d1,-(sp)
00017922 3428 000C                  		move.w	obY(a0),d2
00017926 3628 0008                  		move.w	obX(a0),d3
0001792A 7000                       		moveq	#0,d0
0001792C 1028 0016                  		move.b	obHeight(a0),d0
00017930 4880                       		ext.w	d0
00017932 9440                       		sub.w	d0,d2
00017934 0A42 000F                  		eori.w	#$F,d2
00017938 1028 0017                  		move.b	obWidth(a0),d0
0001793C 4880                       		ext.w	d0
0001793E 9640                       		sub.w	d0,d3
00017940 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017944 367C FFF0                  		movea.w	#-$10,a3
00017948 3C3C 1000                  		move.w	#$1000,d6
0001794C 7A0D                       		moveq	#$D,d5
0001794E 6100 0000                  		bsr.w	FindFloor
00017952 301F                       		move.w	(sp)+,d0
00017954 6100 FED2                  		bsr.w	Sonic_Angle
00017958 4A41                       		tst.w	d1
0001795A 6700                       		beq.s	locret_14892
0001795C 6A00                       		bpl.s	loc_14894
0001795E 0C41 FFF2                  		cmpi.w	#-$E,d1
00017962 6D00 FE5A                  		blt.w	locret_146E6
00017966 9368 000C                  		sub.w	d1,obY(a0)
0001796A                            
0001796A                            locret_14892:
0001796A 4E75                       		rts	
0001796C                            ; ===========================================================================
0001796C                            
0001796C                            loc_14894:
0001796C 0C41 000E                  		cmpi.w	#$E,d1
00017970 6E00                       		bgt.s	loc_148A0
00017972                            
00017972                            loc_1489A:
00017972 9368 000C                  		sub.w	d1,obY(a0)
00017976 4E75                       		rts	
00017978                            ; ===========================================================================
00017978                            
00017978                            loc_148A0:
00017978 4A28 0038                  		tst.b	$38(a0)
0001797C 66F4                       		bne.s	loc_1489A
0001797E 08E8 0001 0022             		bset	#1,obStatus(a0)
00017984 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001798A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017990 4E75                       		rts	
00017992                            ; End of function Sonic_WalkCeiling
00017992                            
00017992                            ; ---------------------------------------------------------------------------
00017992                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017992                            ; ---------------------------------------------------------------------------
00017992                            
00017992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017992                            
00017992                            
00017992                            Sonic_WalkVertL:
00017992 3428 000C                  		move.w	obY(a0),d2
00017996 3628 0008                  		move.w	obX(a0),d3
0001799A 7000                       		moveq	#0,d0
0001799C 1028 0017                  		move.b	obWidth(a0),d0
000179A0 4880                       		ext.w	d0
000179A2 9440                       		sub.w	d0,d2
000179A4 1028 0016                  		move.b	obHeight(a0),d0
000179A8 4880                       		ext.w	d0
000179AA 9640                       		sub.w	d0,d3
000179AC 0A43 000F                  		eori.w	#$F,d3
000179B0 49F8 F768                  		lea	($FFFFF768).w,a4
000179B4 367C FFF0                  		movea.w	#-$10,a3
000179B8 3C3C 0800                  		move.w	#$800,d6
000179BC 7A0D                       		moveq	#$D,d5
000179BE 6100 0000                  		bsr.w	FindWall
000179C2 3F01                       		move.w	d1,-(sp)
000179C4 3428 000C                  		move.w	obY(a0),d2
000179C8 3628 0008                  		move.w	obX(a0),d3
000179CC 7000                       		moveq	#0,d0
000179CE 1028 0017                  		move.b	obWidth(a0),d0
000179D2 4880                       		ext.w	d0
000179D4 D440                       		add.w	d0,d2
000179D6 1028 0016                  		move.b	obHeight(a0),d0
000179DA 4880                       		ext.w	d0
000179DC 9640                       		sub.w	d0,d3
000179DE 0A43 000F                  		eori.w	#$F,d3
000179E2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179E6 367C FFF0                  		movea.w	#-$10,a3
000179EA 3C3C 0800                  		move.w	#$800,d6
000179EE 7A0D                       		moveq	#$D,d5
000179F0 6100 0000                  		bsr.w	FindWall
000179F4 301F                       		move.w	(sp)+,d0
000179F6 6100 FE30                  		bsr.w	Sonic_Angle
000179FA 4A41                       		tst.w	d1
000179FC 6700                       		beq.s	locret_14934
000179FE 6A00                       		bpl.s	loc_14936
00017A00 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A04 6D00 FDDC                  		blt.w	locret_1470A
00017A08 9368 0008                  		sub.w	d1,obX(a0)
00017A0C                            
00017A0C                            locret_14934:
00017A0C 4E75                       		rts	
00017A0E                            ; ===========================================================================
00017A0E                            
00017A0E                            loc_14936:
00017A0E 0C41 000E                  		cmpi.w	#$E,d1
00017A12 6E00                       		bgt.s	loc_14942
00017A14                            
00017A14                            loc_1493C:
00017A14 9368 0008                  		sub.w	d1,obX(a0)
00017A18 4E75                       		rts	
00017A1A                            ; ===========================================================================
00017A1A                            
00017A1A                            loc_14942:
00017A1A 4A28 0038                  		tst.b	$38(a0)
00017A1E 66F4                       		bne.s	loc_1493C
00017A20 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A26 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A2C 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A32 4E75                       		rts	
00017A34                            ; End of function Sonic_WalkVertL
00017A34                            ; End of function Sonic_WalkVertL
00017A34                            
00017A34                            		include	"_incObj\sub FindNearestTile.asm"
00017A34                            ; ---------------------------------------------------------------------------
00017A34                            ; Subroutine to	find which tile	the object is standing on
00017A34                            
00017A34                            ; input:
00017A34                            ;	d2 = y-position of object's bottom edge
00017A34                            ;	d3 = x-position of object
00017A34                            
00017A34                            ; output:
00017A34                            ;	a1 = address within 256x256 mappings where object is standing
00017A34                            ;	     (refers to a 16x16 tile number)
00017A34                            ; ---------------------------------------------------------------------------
00017A34                            
00017A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A34                            
00017A34                            
00017A34                            FindNearestTile:
00017A34 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017A36 E248                       		lsr.w	#1,d0
00017A38 0240 0380                  		andi.w	#$380,d0
00017A3C 3203                       		move.w	d3,d1		; get x-pos. of object
00017A3E E049                       		lsr.w	#8,d1
00017A40 0241 007F                  		andi.w	#$7F,d1
00017A44 D041                       		add.w	d1,d0		; combine
00017A46 72FF                       		moveq	#-1,d1
00017A48 43F8 A400                  		lea	(v_lvllayout).w,a1
00017A4C 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017A50 6700                       		beq.s	@blanktile	; branch if 0
00017A52 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017A54 5301                       		subq.b	#1,d1
00017A56 4881                       		ext.w	d1
00017A58 EE59                       		ror.w	#7,d1
00017A5A 3002                       		move.w	d2,d0
00017A5C D040                       		add.w	d0,d0
00017A5E 0240 01E0                  		andi.w	#$1E0,d0
00017A62 D240                       		add.w	d0,d1
00017A64 3003                       		move.w	d3,d0
00017A66 E648                       		lsr.w	#3,d0
00017A68 0240 001E                  		andi.w	#$1E,d0
00017A6C D240                       		add.w	d0,d1
00017A6E                            
00017A6E                            @blanktile:
00017A6E 2241                       		movea.l	d1,a1
00017A70 4E75                       		rts	
00017A72                            ; ===========================================================================
00017A72                            
00017A72                            @specialtile:
00017A72 0241 007F                  		andi.w	#$7F,d1
00017A76 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017A7C 6700                       		beq.s	@treatasnormal	; if not, branch
00017A7E 5241                       		addq.w	#1,d1
00017A80 0C41 0029                  		cmpi.w	#$29,d1
00017A84 6600                       		bne.s	@treatasnormal
00017A86 323C 0051                  		move.w	#$51,d1
00017A8A                            
00017A8A                            	@treatasnormal:
00017A8A 5301                       		subq.b	#1,d1
00017A8C EE59                       		ror.w	#7,d1
00017A8E 3002                       		move.w	d2,d0
00017A90 D040                       		add.w	d0,d0
00017A92 0240 01E0                  		andi.w	#$1E0,d0
00017A96 D240                       		add.w	d0,d1
00017A98 3003                       		move.w	d3,d0
00017A9A E648                       		lsr.w	#3,d0
00017A9C 0240 001E                  		andi.w	#$1E,d0
00017AA0 D240                       		add.w	d0,d1
00017AA2 2241                       		movea.l	d1,a1
00017AA4 4E75                       		rts	
00017AA6                            ; End of function FindNearestTile
00017AA6                            ; End of function FindNearestTile
00017AA6                            		include	"_incObj\sub FindFloor.asm"
00017AA6                            ; ---------------------------------------------------------------------------
00017AA6                            ; Subroutine to	find the floor
00017AA6                            
00017AA6                            ; input:
00017AA6                            ;	d2 = y-position of object's bottom edge
00017AA6                            ;	d3 = x-position of object
00017AA6                            ;	d5 = bit to test for solidness
00017AA6                            
00017AA6                            ; output:
00017AA6                            ;	d1 = distance to the floor
00017AA6                            ;	a1 = address within 256x256 mappings where object is standing
00017AA6                            ;	     (refers to a 16x16 tile number)
00017AA6                            ;	(a4) = floor angle
00017AA6                            ; ---------------------------------------------------------------------------
00017AA6                            
00017AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AA6                            
00017AA6                            
00017AA6                            FindFloor:
00017AA6 618C                       		bsr.s	FindNearestTile
00017AA8 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017AAA 3800                       		move.w	d0,d4
00017AAC 0240 07FF                  		andi.w	#$7FF,d0
00017AB0 6700                       		beq.s	@isblank	; branch if tile is blank
00017AB2 0B04                       		btst	d5,d4		; is the tile solid?
00017AB4 6600                       		bne.s	@issolid	; if yes, branch
00017AB6                            
00017AB6                            @isblank:
00017AB6 D44B                       		add.w	a3,d2
00017AB8 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017ABC 944B                       		sub.w	a3,d2
00017ABE 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017AC2 4E75                       		rts	
00017AC4                            ; ===========================================================================
00017AC4                            
00017AC4                            @issolid:
00017AC4 2478 F796                  		movea.l	(v_collindex).w,a2
00017AC8 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017ACC 0240 00FF                  		andi.w	#$FF,d0
00017AD0 67E4                       		beq.s	@isblank	; branch if 0
00017AD2 45F9 0000 0000             		lea	(AngleMap).l,a2
00017AD8 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017ADC E948                       		lsl.w	#4,d0
00017ADE 3203                       		move.w	d3,d1		; get x-pos. of object
00017AE0 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017AE4 6700                       		beq.s	@noflip		; if not, branch
00017AE6 4641                       		not.w	d1
00017AE8 4414                       		neg.b	(a4)
00017AEA                            
00017AEA                            	@noflip:
00017AEA 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017AEE 6700                       		beq.s	@noflip2	; if not, branch
00017AF0 0614 0040                  		addi.b	#$40,(a4)
00017AF4 4414                       		neg.b	(a4)
00017AF6 0414 0040                  		subi.b	#$40,(a4)
00017AFA                            
00017AFA                            	@noflip2:
00017AFA 0241 000F                  		andi.w	#$F,d1
00017AFE D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B00 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B06 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B0A 4880                       		ext.w	d0
00017B0C BD44                       		eor.w	d6,d4
00017B0E 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B12 6700                       		beq.s	@noflip3	; if not, branch
00017B14 4440                       		neg.w	d0
00017B16                            
00017B16                            	@noflip3:
00017B16 4A40                       		tst.w	d0
00017B18 679C                       		beq.s	@isblank	; branch if height is 0
00017B1A 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017B1C 0C00 0010                  		cmpi.b	#$10,d0
00017B20 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017B22 3202                       		move.w	d2,d1		; get y-pos. of object
00017B24 0241 000F                  		andi.w	#$F,d1
00017B28 D041                       		add.w	d1,d0
00017B2A 323C 000F                  		move.w	#$F,d1
00017B2E 9240                       		sub.w	d0,d1		; return distance to floor
00017B30 4E75                       		rts	
00017B32                            ; ===========================================================================
00017B32                            
00017B32                            @negfloor:
00017B32 3202                       		move.w	d2,d1
00017B34 0241 000F                  		andi.w	#$F,d1
00017B38 D041                       		add.w	d1,d0
00017B3A 6A00 FF7A                  		bpl.w	@isblank
00017B3E                            
00017B3E                            @maxfloor:
00017B3E 944B                       		sub.w	a3,d2
00017B40 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017B44 D44B                       		add.w	a3,d2
00017B46 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017B4A 4E75                       		rts	
00017B4C                            ; End of function FindFloor
00017B4C                            
00017B4C                            
00017B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B4C                            
00017B4C                            
00017B4C                            FindFloor2:
00017B4C 6100 FEE6                  		bsr.w	FindNearestTile
00017B50 3011                       		move.w	(a1),d0
00017B52 3800                       		move.w	d0,d4
00017B54 0240 07FF                  		andi.w	#$7FF,d0
00017B58 6700                       		beq.s	@isblank2
00017B5A 0B04                       		btst	d5,d4
00017B5C 6600                       		bne.s	@issolid
00017B5E                            
00017B5E                            @isblank2:
00017B5E 323C 000F                  		move.w	#$F,d1
00017B62 3002                       		move.w	d2,d0
00017B64 0240 000F                  		andi.w	#$F,d0
00017B68 9240                       		sub.w	d0,d1
00017B6A 4E75                       		rts	
00017B6C                            ; ===========================================================================
00017B6C                            
00017B6C                            @issolid:
00017B6C 2478 F796                  		movea.l	(v_collindex).w,a2
00017B70 1032 0000                  		move.b	(a2,d0.w),d0
00017B74 0240 00FF                  		andi.w	#$FF,d0
00017B78 67E4                       		beq.s	@isblank2
00017B7A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B80 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B84 E948                       		lsl.w	#4,d0
00017B86 3203                       		move.w	d3,d1
00017B88 0804 000B                  		btst	#$B,d4
00017B8C 6700                       		beq.s	@noflip
00017B8E 4641                       		not.w	d1
00017B90 4414                       		neg.b	(a4)
00017B92                            
00017B92                            	@noflip:
00017B92 0804 000C                  		btst	#$C,d4
00017B96 6700                       		beq.s	@noflip2
00017B98 0614 0040                  		addi.b	#$40,(a4)
00017B9C 4414                       		neg.b	(a4)
00017B9E 0414 0040                  		subi.b	#$40,(a4)
00017BA2                            
00017BA2                            	@noflip2:
00017BA2 0241 000F                  		andi.w	#$F,d1
00017BA6 D240                       		add.w	d0,d1
00017BA8 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BAE 1032 1000                  		move.b	(a2,d1.w),d0
00017BB2 4880                       		ext.w	d0
00017BB4 BD44                       		eor.w	d6,d4
00017BB6 0804 000C                  		btst	#$C,d4
00017BBA 6700                       		beq.s	@noflip3
00017BBC 4440                       		neg.w	d0
00017BBE                            
00017BBE                            	@noflip3:
00017BBE 4A40                       		tst.w	d0
00017BC0 679C                       		beq.s	@isblank2
00017BC2 6B00                       		bmi.s	@negfloor
00017BC4 3202                       		move.w	d2,d1
00017BC6 0241 000F                  		andi.w	#$F,d1
00017BCA D041                       		add.w	d1,d0
00017BCC 323C 000F                  		move.w	#$F,d1
00017BD0 9240                       		sub.w	d0,d1
00017BD2 4E75                       		rts	
00017BD4                            ; ===========================================================================
00017BD4                            
00017BD4                            @negfloor:
00017BD4 3202                       		move.w	d2,d1
00017BD6 0241 000F                  		andi.w	#$F,d1
00017BDA D041                       		add.w	d1,d0
00017BDC 6A00 FF80                  		bpl.w	@isblank2
00017BE0 4641                       		not.w	d1
00017BE2 4E75                       		rts	
00017BE4                            ; End of function FindFloor2
00017BE4                            ; End of function FindFloor2
00017BE4                            		include	"_incObj\sub FindWall.asm"
00017BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BE4                            
00017BE4                            
00017BE4                            FindWall:
00017BE4 6100 FE4E                  		bsr.w	FindNearestTile
00017BE8 3011                       		move.w	(a1),d0
00017BEA 3800                       		move.w	d0,d4
00017BEC 0240 07FF                  		andi.w	#$7FF,d0
00017BF0 6700                       		beq.s	loc_14B1E
00017BF2 0B04                       		btst	d5,d4
00017BF4 6600                       		bne.s	loc_14B2C
00017BF6                            
00017BF6                            loc_14B1E:
00017BF6 D64B                       		add.w	a3,d3
00017BF8 6100 0000                  		bsr.w	FindWall2
00017BFC 964B                       		sub.w	a3,d3
00017BFE 0641 0010                  		addi.w	#$10,d1
00017C02 4E75                       		rts	
00017C04                            ; ===========================================================================
00017C04                            
00017C04                            loc_14B2C:
00017C04 2478 F796                  		movea.l	(v_collindex).w,a2
00017C08 1032 0000                  		move.b	(a2,d0.w),d0
00017C0C 0240 00FF                  		andi.w	#$FF,d0
00017C10 67E4                       		beq.s	loc_14B1E
00017C12 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C18 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C1C E948                       		lsl.w	#4,d0
00017C1E 3202                       		move.w	d2,d1
00017C20 0804 000C                  		btst	#$C,d4
00017C24 6700                       		beq.s	loc_14B5A
00017C26 4641                       		not.w	d1
00017C28 0614 0040                  		addi.b	#$40,(a4)
00017C2C 4414                       		neg.b	(a4)
00017C2E 0414 0040                  		subi.b	#$40,(a4)
00017C32                            
00017C32                            loc_14B5A:
00017C32 0804 000B                  		btst	#$B,d4
00017C36 6700                       		beq.s	loc_14B62
00017C38 4414                       		neg.b	(a4)
00017C3A                            
00017C3A                            loc_14B62:
00017C3A 0241 000F                  		andi.w	#$F,d1
00017C3E D240                       		add.w	d0,d1
00017C40 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C46 1032 1000                  		move.b	(a2,d1.w),d0
00017C4A 4880                       		ext.w	d0
00017C4C BD44                       		eor.w	d6,d4
00017C4E 0804 000B                  		btst	#$B,d4
00017C52 6700                       		beq.s	loc_14B7E
00017C54 4440                       		neg.w	d0
00017C56                            
00017C56                            loc_14B7E:
00017C56 4A40                       		tst.w	d0
00017C58 679C                       		beq.s	loc_14B1E
00017C5A 6B00                       		bmi.s	loc_14B9A
00017C5C 0C00 0010                  		cmpi.b	#$10,d0
00017C60 6700                       		beq.s	loc_14BA6
00017C62 3203                       		move.w	d3,d1
00017C64 0241 000F                  		andi.w	#$F,d1
00017C68 D041                       		add.w	d1,d0
00017C6A 323C 000F                  		move.w	#$F,d1
00017C6E 9240                       		sub.w	d0,d1
00017C70 4E75                       		rts	
00017C72                            ; ===========================================================================
00017C72                            
00017C72                            loc_14B9A:
00017C72 3203                       		move.w	d3,d1
00017C74 0241 000F                  		andi.w	#$F,d1
00017C78 D041                       		add.w	d1,d0
00017C7A 6A00 FF7A                  		bpl.w	loc_14B1E
00017C7E                            
00017C7E                            loc_14BA6:
00017C7E 964B                       		sub.w	a3,d3
00017C80 6100 0000                  		bsr.w	FindWall2
00017C84 D64B                       		add.w	a3,d3
00017C86 0441 0010                  		subi.w	#$10,d1
00017C8A 4E75                       		rts	
00017C8C                            ; End of function FindWall
00017C8C                            
00017C8C                            
00017C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C8C                            
00017C8C                            
00017C8C                            FindWall2:
00017C8C 6100 FDA6                  		bsr.w	FindNearestTile
00017C90 3011                       		move.w	(a1),d0
00017C92 3800                       		move.w	d0,d4
00017C94 0240 07FF                  		andi.w	#$7FF,d0
00017C98 6700                       		beq.s	loc_14BC6
00017C9A 0B04                       		btst	d5,d4
00017C9C 6600                       		bne.s	loc_14BD4
00017C9E                            
00017C9E                            loc_14BC6:
00017C9E 323C 000F                  		move.w	#$F,d1
00017CA2 3003                       		move.w	d3,d0
00017CA4 0240 000F                  		andi.w	#$F,d0
00017CA8 9240                       		sub.w	d0,d1
00017CAA 4E75                       		rts	
00017CAC                            ; ===========================================================================
00017CAC                            
00017CAC                            loc_14BD4:
00017CAC 2478 F796                  		movea.l	(v_collindex).w,a2
00017CB0 1032 0000                  		move.b	(a2,d0.w),d0
00017CB4 0240 00FF                  		andi.w	#$FF,d0
00017CB8 67E4                       		beq.s	loc_14BC6
00017CBA 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CC0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CC4 E948                       		lsl.w	#4,d0
00017CC6 3202                       		move.w	d2,d1
00017CC8 0804 000C                  		btst	#$C,d4
00017CCC 6700                       		beq.s	loc_14C02
00017CCE 4641                       		not.w	d1
00017CD0 0614 0040                  		addi.b	#$40,(a4)
00017CD4 4414                       		neg.b	(a4)
00017CD6 0414 0040                  		subi.b	#$40,(a4)
00017CDA                            
00017CDA                            loc_14C02:
00017CDA 0804 000B                  		btst	#$B,d4
00017CDE 6700                       		beq.s	loc_14C0A
00017CE0 4414                       		neg.b	(a4)
00017CE2                            
00017CE2                            loc_14C0A:
00017CE2 0241 000F                  		andi.w	#$F,d1
00017CE6 D240                       		add.w	d0,d1
00017CE8 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CEE 1032 1000                  		move.b	(a2,d1.w),d0
00017CF2 4880                       		ext.w	d0
00017CF4 BD44                       		eor.w	d6,d4
00017CF6 0804 000B                  		btst	#$B,d4
00017CFA 6700                       		beq.s	loc_14C26
00017CFC 4440                       		neg.w	d0
00017CFE                            
00017CFE                            loc_14C26:
00017CFE 4A40                       		tst.w	d0
00017D00 679C                       		beq.s	loc_14BC6
00017D02 6B00                       		bmi.s	loc_14C3C
00017D04 3203                       		move.w	d3,d1
00017D06 0241 000F                  		andi.w	#$F,d1
00017D0A D041                       		add.w	d1,d0
00017D0C 323C 000F                  		move.w	#$F,d1
00017D10 9240                       		sub.w	d0,d1
00017D12 4E75                       		rts	
00017D14                            ; ===========================================================================
00017D14                            
00017D14                            loc_14C3C:
00017D14 3203                       		move.w	d3,d1
00017D16 0241 000F                  		andi.w	#$F,d1
00017D1A D041                       		add.w	d1,d0
00017D1C 6A00 FF80                  		bpl.w	loc_14BC6
00017D20 4641                       		not.w	d1
00017D22 4E75                       		rts	
00017D24                            ; End of function FindWall2
00017D24                            ; End of function FindWall2
00017D24                            
00017D24                            ; ---------------------------------------------------------------------------
00017D24                            ; Unused floor/wall subroutine - logs something	to do with collision
00017D24                            ; ---------------------------------------------------------------------------
00017D24                            
00017D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D24                            
00017D24                            
00017D24                            FloorLog_Unk:
00017D24 4E75                       		rts	
00017D26                            
00017D26 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D2C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D32 363C 00FF                  		move.w	#$FF,d3
00017D36                            
00017D36                            loc_14C5E:
00017D36 7A10                       		moveq	#$10,d5
00017D38 343C 000F                  		move.w	#$F,d2
00017D3C                            
00017D3C                            loc_14C64:
00017D3C 7800                       		moveq	#0,d4
00017D3E 323C 000F                  		move.w	#$F,d1
00017D42                            
00017D42                            loc_14C6A:
00017D42 3019                       		move.w	(a1)+,d0
00017D44 EAA8                       		lsr.l	d5,d0
00017D46 D944                       		addx.w	d4,d4
00017D48 51C9 FFF8                  		dbf	d1,loc_14C6A
00017D4C                            
00017D4C 34C4                       		move.w	d4,(a2)+
00017D4E 92FC 0020                  		suba.w	#$20,a1
00017D52 5345                       		subq.w	#1,d5
00017D54 51CA FFE6                  		dbf	d2,loc_14C64
00017D58                            
00017D58 D2FC 0020                  		adda.w	#$20,a1
00017D5C 51CB FFD8                  		dbf	d3,loc_14C5E
00017D60                            
00017D60 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D66 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D6C 6100                       		bsr.s	FloorLog_Unk2
00017D6E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D74 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D7A                            
00017D7A                            ; End of function FloorLog_Unk
00017D7A                            
00017D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D7A                            
00017D7A                            
00017D7A                            FloorLog_Unk2:
00017D7A 363C 0FFF                  		move.w	#$FFF,d3
00017D7E                            
00017D7E                            loc_14CA6:
00017D7E 7400                       		moveq	#0,d2
00017D80 323C 000F                  		move.w	#$F,d1
00017D84 3019                       		move.w	(a1)+,d0
00017D86 6700                       		beq.s	loc_14CD4
00017D88 6B00                       		bmi.s	loc_14CBE
00017D8A                            
00017D8A                            loc_14CB2:
00017D8A E248                       		lsr.w	#1,d0
00017D8C 6400                       		bhs.s	loc_14CB8
00017D8E 5202                       		addq.b	#1,d2
00017D90                            
00017D90                            loc_14CB8:
00017D90 51C9 FFF8                  		dbf	d1,loc_14CB2
00017D94                            
00017D94 6000                       		bra.s	loc_14CD6
00017D96                            ; ===========================================================================
00017D96                            
00017D96                            loc_14CBE:
00017D96 0C40 FFFF                  		cmpi.w	#-1,d0
00017D9A 6700                       		beq.s	loc_14CD0
00017D9C                            
00017D9C                            loc_14CC4:
00017D9C E348                       		lsl.w	#1,d0
00017D9E 6400                       		bhs.s	loc_14CCA
00017DA0 5302                       		subq.b	#1,d2
00017DA2                            
00017DA2                            loc_14CCA:
00017DA2 51C9 FFF8                  		dbf	d1,loc_14CC4
00017DA6                            
00017DA6 6000                       		bra.s	loc_14CD6
00017DA8                            ; ===========================================================================
00017DA8                            
00017DA8                            loc_14CD0:
00017DA8 303C 0010                  		move.w	#$10,d0
00017DAC                            
00017DAC                            loc_14CD4:
00017DAC 3400                       		move.w	d0,d2
00017DAE                            
00017DAE                            loc_14CD6:
00017DAE 14C2                       		move.b	d2,(a2)+
00017DB0 51CB FFCC                  		dbf	d3,loc_14CA6
00017DB4                            
00017DB4 4E75                       		rts	
00017DB6                            
00017DB6                            ; End of function FloorLog_Unk2
00017DB6                            
00017DB6                            
00017DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DB6                            
00017DB6                            
00017DB6                            Sonic_WalkSpeed:
00017DB6 2628 0008                  		move.l	obX(a0),d3
00017DBA 2428 000C                  		move.l	obY(a0),d2
00017DBE 3228 0010                  		move.w	obVelX(a0),d1
00017DC2 48C1                       		ext.l	d1
00017DC4 E181                       		asl.l	#8,d1
00017DC6 D681                       		add.l	d1,d3
00017DC8 3228 0012                  		move.w	obVelY(a0),d1
00017DCC 48C1                       		ext.l	d1
00017DCE E181                       		asl.l	#8,d1
00017DD0 D481                       		add.l	d1,d2
00017DD2 4842                       		swap	d2
00017DD4 4843                       		swap	d3
00017DD6 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017DDA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017DDE 1200                       		move.b	d0,d1
00017DE0 0600 0020                  		addi.b	#$20,d0
00017DE4 6A00                       		bpl.s	loc_14D1A
00017DE6 1001                       		move.b	d1,d0
00017DE8 6A00                       		bpl.s	loc_14D14
00017DEA 5300                       		subq.b	#1,d0
00017DEC                            
00017DEC                            loc_14D14:
00017DEC 0600 0020                  		addi.b	#$20,d0
00017DF0 6000                       		bra.s	loc_14D24
00017DF2                            ; ===========================================================================
00017DF2                            
00017DF2                            loc_14D1A:
00017DF2 1001                       		move.b	d1,d0
00017DF4 6A00                       		bpl.s	loc_14D20
00017DF6 5200                       		addq.b	#1,d0
00017DF8                            
00017DF8                            loc_14D20:
00017DF8 0600 001F                  		addi.b	#$1F,d0
00017DFC                            
00017DFC                            loc_14D24:
00017DFC 0200 00C0                  		andi.b	#$C0,d0
00017E00 6700 0000                  		beq.w	loc_14DF0
00017E04 0C00 0080                  		cmpi.b	#$80,d0
00017E08 6700 0000                  		beq.w	loc_14F7C
00017E0C 0201 0038                  		andi.b	#$38,d1
00017E10 6600                       		bne.s	loc_14D3C
00017E12 5042                       		addq.w	#8,d2
00017E14                            
00017E14                            loc_14D3C:
00017E14 0C00 0040                  		cmpi.b	#$40,d0
00017E18 6700 0000                  		beq.w	loc_1504A
00017E1C 6000 0000                  		bra.w	loc_14EBC
00017E20                            
00017E20                            ; End of function Sonic_WalkSpeed
00017E20                            
00017E20                            
00017E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E20                            
00017E20                            
00017E20                            sub_14D48:
00017E20 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E24 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E28 0600 0020                  		addi.b	#$20,d0
00017E2C 0200 00C0                  		andi.b	#$C0,d0
00017E30 0C00 0040                  		cmpi.b	#$40,d0
00017E34 6700 0000                  		beq.w	loc_14FD6
00017E38 0C00 0080                  		cmpi.b	#$80,d0
00017E3C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017E40 0C00 00C0                  		cmpi.b	#$C0,d0
00017E44 6700 0000                  		beq.w	sub_14E50
00017E48                            
00017E48                            ; End of function sub_14D48
00017E48                            
00017E48                            ; ---------------------------------------------------------------------------
00017E48                            ; Subroutine to	make Sonic land	on the floor after jumping
00017E48                            ; ---------------------------------------------------------------------------
00017E48                            
00017E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E48                            
00017E48                            
00017E48                            Sonic_HitFloor:
00017E48 3428 000C                  		move.w	obY(a0),d2
00017E4C 3628 0008                  		move.w	obX(a0),d3
00017E50 7000                       		moveq	#0,d0
00017E52 1028 0016                  		move.b	obHeight(a0),d0
00017E56 4880                       		ext.w	d0
00017E58 D440                       		add.w	d0,d2
00017E5A 1028 0017                  		move.b	obWidth(a0),d0
00017E5E 4880                       		ext.w	d0
00017E60 D640                       		add.w	d0,d3
00017E62 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E66 367C 0010                  		movea.w	#$10,a3
00017E6A 3C3C 0000                  		move.w	#0,d6
00017E6E 7A0D                       		moveq	#$D,d5
00017E70 6100 FC34                  		bsr.w	FindFloor
00017E74 3F01                       		move.w	d1,-(sp)
00017E76 3428 000C                  		move.w	obY(a0),d2
00017E7A 3628 0008                  		move.w	obX(a0),d3
00017E7E 7000                       		moveq	#0,d0
00017E80 1028 0016                  		move.b	obHeight(a0),d0
00017E84 4880                       		ext.w	d0
00017E86 D440                       		add.w	d0,d2
00017E88 1028 0017                  		move.b	obWidth(a0),d0
00017E8C 4880                       		ext.w	d0
00017E8E 9640                       		sub.w	d0,d3
00017E90 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E94 367C 0010                  		movea.w	#$10,a3
00017E98 3C3C 0000                  		move.w	#0,d6
00017E9C 7A0D                       		moveq	#$D,d5
00017E9E 6100 FC06                  		bsr.w	FindFloor
00017EA2 301F                       		move.w	(sp)+,d0
00017EA4 143C 0000                  		move.b	#0,d2
00017EA8                            
00017EA8                            loc_14DD0:
00017EA8 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017EAC B240                       		cmp.w	d0,d1
00017EAE 6F00                       		ble.s	loc_14DDE
00017EB0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EB4 C141                       		exg	d0,d1
00017EB6                            
00017EB6                            loc_14DDE:
00017EB6 0803 0000                  		btst	#0,d3
00017EBA 6700                       		beq.s	locret_14DE6
00017EBC 1602                       		move.b	d2,d3
00017EBE                            
00017EBE                            locret_14DE6:
00017EBE 4E75                       		rts	
00017EC0                            
00017EC0                            ; End of function Sonic_HitFloor
00017EC0                            
00017EC0                            ; ===========================================================================
00017EC0 3428 000C                  		move.w	obY(a0),d2
00017EC4 3628 0008                  		move.w	obX(a0),d3
00017EC8                            
00017EC8                            loc_14DF0:
00017EC8 0642 000A                  		addi.w	#$A,d2
00017ECC 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED0 367C 0010                  		movea.w	#$10,a3
00017ED4 3C3C 0000                  		move.w	#0,d6
00017ED8 7A0E                       		moveq	#$E,d5
00017EDA 6100 FBCA                  		bsr.w	FindFloor
00017EDE 143C 0000                  		move.b	#0,d2
00017EE2                            
00017EE2                            loc_14E0A:
00017EE2 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EE6 0803 0000                  		btst	#0,d3
00017EEA 6700                       		beq.s	locret_14E16
00017EEC 1602                       		move.b	d2,d3
00017EEE                            
00017EEE                            locret_14E16:
00017EEE 4E75                       		rts	
00017EF0                            
00017EF0                            		include	"_incObj\sub ObjFloorDist.asm"
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0                            ; Subroutine to find the distance of an object to the floor
00017EF0                            
00017EF0                            ; input:
00017EF0                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017EF0                            
00017EF0                            ; output:
00017EF0                            ;	d1 = distance to the floor
00017EF0                            ;	d3 = floor angle
00017EF0                            ;	a1 = address within 256x256 mappings where object is standing
00017EF0                            ;	     (refers to a 16x16 tile number)
00017EF0                            ;	(a4) = floor angle
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0                            
00017EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF0                            
00017EF0                            
00017EF0                            ObjFloorDist:
00017EF0 3628 0008                  		move.w	obX(a0),d3
00017EF4                            
00017EF4                            
00017EF4                            ObjFloorDist2:
00017EF4 3428 000C                  		move.w	obY(a0),d2
00017EF8 7000                       		moveq	#0,d0
00017EFA 1028 0016                  		move.b	obHeight(a0),d0
00017EFE 4880                       		ext.w	d0
00017F00 D440                       		add.w	d0,d2
00017F02 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F06 18BC 0000                  		move.b	#0,(a4)
00017F0A 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F0E 3C3C 0000                  		move.w	#0,d6
00017F12 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F14 6100 FB90                  		bsr.w	FindFloor
00017F18 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F1C 0803 0000                  		btst	#0,d3
00017F20 6700                       		beq.s	locret_14E4E
00017F22 163C 0000                  		move.b	#0,d3
00017F26                            
00017F26                            	locret_14E4E:
00017F26 4E75                       		rts	
00017F28                            
00017F28                            ; End of function ObjFloorDist2
00017F28                            ; End of function ObjFloorDist2
00017F28                            
00017F28                            
00017F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F28                            
00017F28                            
00017F28                            sub_14E50:
00017F28 3428 000C                  		move.w	obY(a0),d2
00017F2C 3628 0008                  		move.w	obX(a0),d3
00017F30 7000                       		moveq	#0,d0
00017F32 1028 0017                  		move.b	obWidth(a0),d0
00017F36 4880                       		ext.w	d0
00017F38 9440                       		sub.w	d0,d2
00017F3A 1028 0016                  		move.b	obHeight(a0),d0
00017F3E 4880                       		ext.w	d0
00017F40 D640                       		add.w	d0,d3
00017F42 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F46 367C 0010                  		movea.w	#$10,a3
00017F4A 3C3C 0000                  		move.w	#0,d6
00017F4E 7A0E                       		moveq	#$E,d5
00017F50 6100 FC92                  		bsr.w	FindWall
00017F54 3F01                       		move.w	d1,-(sp)
00017F56 3428 000C                  		move.w	obY(a0),d2
00017F5A 3628 0008                  		move.w	obX(a0),d3
00017F5E 7000                       		moveq	#0,d0
00017F60 1028 0017                  		move.b	obWidth(a0),d0
00017F64 4880                       		ext.w	d0
00017F66 D440                       		add.w	d0,d2
00017F68 1028 0016                  		move.b	obHeight(a0),d0
00017F6C 4880                       		ext.w	d0
00017F6E D640                       		add.w	d0,d3
00017F70 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F74 367C 0010                  		movea.w	#$10,a3
00017F78 3C3C 0000                  		move.w	#0,d6
00017F7C 7A0E                       		moveq	#$E,d5
00017F7E 6100 FC64                  		bsr.w	FindWall
00017F82 301F                       		move.w	(sp)+,d0
00017F84 143C 00C0                  		move.b	#-$40,d2
00017F88 6000 FF1E                  		bra.w	loc_14DD0
00017F8C                            
00017F8C                            ; End of function sub_14E50
00017F8C                            
00017F8C                            
00017F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F8C                            
00017F8C                            
00017F8C                            sub_14EB4:
00017F8C 3428 000C                  		move.w	obY(a0),d2
00017F90 3628 0008                  		move.w	obX(a0),d3
00017F94                            
00017F94                            loc_14EBC:
00017F94 0643 000A                  		addi.w	#$A,d3
00017F98 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F9C 367C 0010                  		movea.w	#$10,a3
00017FA0 3C3C 0000                  		move.w	#0,d6
00017FA4 7A0E                       		moveq	#$E,d5
00017FA6 6100 FC3C                  		bsr.w	FindWall
00017FAA 143C 00C0                  		move.b	#-$40,d2
00017FAE 6000 FF32                  		bra.w	loc_14E0A
00017FB2                            
00017FB2                            ; End of function sub_14EB4
00017FB2                            
00017FB2                            ; ---------------------------------------------------------------------------
00017FB2                            ; Subroutine to	detect when an object hits a wall to its right
00017FB2                            ; ---------------------------------------------------------------------------
00017FB2                            
00017FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FB2                            
00017FB2                            
00017FB2                            ObjHitWallRight:
00017FB2 D668 0008                  		add.w	obX(a0),d3
00017FB6 3428 000C                  		move.w	obY(a0),d2
00017FBA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FBE 18BC 0000                  		move.b	#0,(a4)
00017FC2 367C 0010                  		movea.w	#$10,a3
00017FC6 3C3C 0000                  		move.w	#0,d6
00017FCA 7A0E                       		moveq	#$E,d5
00017FCC 6100 FC16                  		bsr.w	FindWall
00017FD0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FD4 0803 0000                  		btst	#0,d3
00017FD8 6700                       		beq.s	locret_14F06
00017FDA 163C 00C0                  		move.b	#-$40,d3
00017FDE                            
00017FDE                            locret_14F06:
00017FDE 4E75                       		rts	
00017FE0                            
00017FE0                            ; End of function ObjHitWallRight
00017FE0                            
00017FE0                            ; ---------------------------------------------------------------------------
00017FE0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017FE0                            ; touches them
00017FE0                            ; ---------------------------------------------------------------------------
00017FE0                            
00017FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE0                            
00017FE0                            
00017FE0                            Sonic_DontRunOnWalls:
00017FE0 3428 000C                  		move.w	obY(a0),d2
00017FE4 3628 0008                  		move.w	obX(a0),d3
00017FE8 7000                       		moveq	#0,d0
00017FEA 1028 0016                  		move.b	obHeight(a0),d0
00017FEE 4880                       		ext.w	d0
00017FF0 9440                       		sub.w	d0,d2
00017FF2 0A42 000F                  		eori.w	#$F,d2
00017FF6 1028 0017                  		move.b	obWidth(a0),d0
00017FFA 4880                       		ext.w	d0
00017FFC D640                       		add.w	d0,d3
00017FFE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018002 367C FFF0                  		movea.w	#-$10,a3
00018006 3C3C 1000                  		move.w	#$1000,d6
0001800A 7A0E                       		moveq	#$E,d5
0001800C 6100 FA98                  		bsr.w	FindFloor
00018010 3F01                       		move.w	d1,-(sp)
00018012 3428 000C                  		move.w	obY(a0),d2
00018016 3628 0008                  		move.w	obX(a0),d3
0001801A 7000                       		moveq	#0,d0
0001801C 1028 0016                  		move.b	obHeight(a0),d0
00018020 4880                       		ext.w	d0
00018022 9440                       		sub.w	d0,d2
00018024 0A42 000F                  		eori.w	#$F,d2
00018028 1028 0017                  		move.b	obWidth(a0),d0
0001802C 4880                       		ext.w	d0
0001802E 9640                       		sub.w	d0,d3
00018030 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018034 367C FFF0                  		movea.w	#-$10,a3
00018038 3C3C 1000                  		move.w	#$1000,d6
0001803C 7A0E                       		moveq	#$E,d5
0001803E 6100 FA66                  		bsr.w	FindFloor
00018042 301F                       		move.w	(sp)+,d0
00018044 143C 0080                  		move.b	#-$80,d2
00018048 6000 FE5E                  		bra.w	loc_14DD0
0001804C                            ; End of function Sonic_DontRunOnWalls
0001804C                            
0001804C                            ; ===========================================================================
0001804C 3428 000C                  		move.w	obY(a0),d2
00018050 3628 0008                  		move.w	obX(a0),d3
00018054                            
00018054                            loc_14F7C:
00018054 0442 000A                  		subi.w	#$A,d2
00018058 0A42 000F                  		eori.w	#$F,d2
0001805C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018060 367C FFF0                  		movea.w	#-$10,a3
00018064 3C3C 1000                  		move.w	#$1000,d6
00018068 7A0E                       		moveq	#$E,d5
0001806A 6100 FA3A                  		bsr.w	FindFloor
0001806E 143C 0080                  		move.b	#-$80,d2
00018072 6000 FE6E                  		bra.w	loc_14E0A
00018076                            
00018076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018076                            
00018076                            
00018076                            ObjHitCeiling:
00018076 3428 000C                  		move.w	obY(a0),d2
0001807A 3628 0008                  		move.w	obX(a0),d3
0001807E 7000                       		moveq	#0,d0
00018080 1028 0016                  		move.b	obHeight(a0),d0
00018084 4880                       		ext.w	d0
00018086 9440                       		sub.w	d0,d2
00018088 0A42 000F                  		eori.w	#$F,d2
0001808C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018090 367C FFF0                  		movea.w	#-$10,a3
00018094 3C3C 1000                  		move.w	#$1000,d6
00018098 7A0E                       		moveq	#$E,d5
0001809A 6100 FA0A                  		bsr.w	FindFloor
0001809E 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180A2 0803 0000                  		btst	#0,d3
000180A6 6700                       		beq.s	locret_14FD4
000180A8 163C 0080                  		move.b	#-$80,d3
000180AC                            
000180AC                            locret_14FD4:
000180AC 4E75                       		rts	
000180AE                            ; End of function ObjHitCeiling
000180AE                            
000180AE                            ; ===========================================================================
000180AE                            
000180AE                            loc_14FD6:
000180AE 3428 000C                  		move.w	obY(a0),d2
000180B2 3628 0008                  		move.w	obX(a0),d3
000180B6 7000                       		moveq	#0,d0
000180B8 1028 0017                  		move.b	obWidth(a0),d0
000180BC 4880                       		ext.w	d0
000180BE 9440                       		sub.w	d0,d2
000180C0 1028 0016                  		move.b	obHeight(a0),d0
000180C4 4880                       		ext.w	d0
000180C6 9640                       		sub.w	d0,d3
000180C8 0A43 000F                  		eori.w	#$F,d3
000180CC 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180D0 367C FFF0                  		movea.w	#-$10,a3
000180D4 3C3C 0800                  		move.w	#$800,d6
000180D8 7A0E                       		moveq	#$E,d5
000180DA 6100 FB08                  		bsr.w	FindWall
000180DE 3F01                       		move.w	d1,-(sp)
000180E0 3428 000C                  		move.w	obY(a0),d2
000180E4 3628 0008                  		move.w	obX(a0),d3
000180E8 7000                       		moveq	#0,d0
000180EA 1028 0017                  		move.b	obWidth(a0),d0
000180EE 4880                       		ext.w	d0
000180F0 D440                       		add.w	d0,d2
000180F2 1028 0016                  		move.b	obHeight(a0),d0
000180F6 4880                       		ext.w	d0
000180F8 9640                       		sub.w	d0,d3
000180FA 0A43 000F                  		eori.w	#$F,d3
000180FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018102 367C FFF0                  		movea.w	#-$10,a3
00018106 3C3C 0800                  		move.w	#$800,d6
0001810A 7A0E                       		moveq	#$E,d5
0001810C 6100 FAD6                  		bsr.w	FindWall
00018110 301F                       		move.w	(sp)+,d0
00018112 143C 0040                  		move.b	#$40,d2
00018116 6000 FD90                  		bra.w	loc_14DD0
0001811A                            
0001811A                            ; ---------------------------------------------------------------------------
0001811A                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001811A                            ; ---------------------------------------------------------------------------
0001811A                            
0001811A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001811A                            
0001811A                            
0001811A                            Sonic_HitWall:
0001811A 3428 000C                  		move.w	obY(a0),d2
0001811E 3628 0008                  		move.w	obX(a0),d3
00018122                            
00018122                            loc_1504A:
00018122 0443 000A                  		subi.w	#$A,d3
00018126 0A43 000F                  		eori.w	#$F,d3
0001812A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001812E 367C FFF0                  		movea.w	#-$10,a3
00018132 3C3C 0800                  		move.w	#$800,d6
00018136 7A0E                       		moveq	#$E,d5
00018138 6100 FAAA                  		bsr.w	FindWall
0001813C 143C 0040                  		move.b	#$40,d2
00018140 6000 FDA0                  		bra.w	loc_14E0A
00018144                            ; End of function Sonic_HitWall
00018144                            
00018144                            ; ---------------------------------------------------------------------------
00018144                            ; Subroutine to	detect when an object hits a wall to its left
00018144                            ; ---------------------------------------------------------------------------
00018144                            
00018144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018144                            
00018144                            
00018144                            ObjHitWallLeft:
00018144 D668 0008                  		add.w	obX(a0),d3
00018148 3428 000C                  		move.w	obY(a0),d2
0001814C                            		; Engine bug: colliding with left walls is erratic with this function.
0001814C                            		; The cause is this: a missing instruction to flip collision on the found
0001814C                            		; 16x16 block; this one:
0001814C                            		;eori.w	#$F,d3
0001814C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018150 18BC 0000                  		move.b	#0,(a4)
00018154 367C FFF0                  		movea.w	#-$10,a3
00018158 3C3C 0800                  		move.w	#$800,d6
0001815C 7A0E                       		moveq	#$E,d5
0001815E 6100 FA84                  		bsr.w	FindWall
00018162 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018166 0803 0000                  		btst	#0,d3
0001816A 6700                       		beq.s	locret_15098
0001816C 163C 0040                  		move.b	#$40,d3
00018170                            
00018170                            locret_15098:
00018170 4E75                       		rts	
00018172                            ; End of function ObjHitWallLeft
00018172                            
00018172                            ; ===========================================================================
00018172                            
00018172                            		include	"_incObj\66 Rotating Junction.asm"
00018172                            ; ---------------------------------------------------------------------------
00018172                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018172                            ; ---------------------------------------------------------------------------
00018172                            
00018172                            Junction:
00018172 7000                       		moveq	#0,d0
00018174 1028 0024                  		move.b	obRoutine(a0),d0
00018178 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
0001817C 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018180                            ; ===========================================================================
00018180 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018182 0000                       		dc.w Jun_Action-Jun_Index
00018184 0000                       		dc.w Jun_Display-Jun_Index
00018186 0000                       		dc.w Jun_Release-Jun_Index
00018188                            
00018188 =00000034                  jun_frame:	equ $34		; current frame
00018188 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018188 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018188                            ; ===========================================================================
00018188                            
00018188                            Jun_Main:	; Routine 0
00018188 5428 0024                  		addq.b	#2,obRoutine(a0)
0001818C 323C 0001                  		move.w	#1,d1
00018190 2248                       		movea.l	a0,a1
00018192 6000                       		bra.s	@makeitem
00018194                            ; ===========================================================================
00018194                            
00018194                            	@repeat:
00018194 4EB9 0000 FE12             		jsr	FindFreeObj
0001819A 6600                       		bne.s	@fail
0001819C 12BC 0066                  		move.b	#id_Junction,0(a1)
000181A0 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000181A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000181AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000181B0 337C 0180 0018             		move.w	#$180,obPriority(a1)
000181B6 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000181BC                            
000181BC                            @makeitem:
000181BC 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000181C4 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000181CA 0029 0004 0001             		ori.b	#4,obRender(a1)
000181D0 137C 0038 0014             		move.b	#$38,obActWid(a1)
000181D6                            
000181D6                            	@fail:
000181D6 51C9 FFBC                  		dbf	d1,@repeat
000181DA                            
000181DA 117C 0030 0014             		move.b	#$30,obActWid(a0)
000181E0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000181E6 317C 003C 0030             		move.w	#$3C,$30(a0)
000181EC 117C 0001 0034             		move.b	#1,jun_frame(a0)
000181F2 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000181F8                            
000181F8                            Jun_Action:	; Routine 2
000181F8 6100 0000                  		bsr.w	Jun_ChkSwitch
000181FC 4A28 0001                  		tst.b	obRender(a0)
00018200 6A00 0000                  		bpl.w	Jun_Display
00018204 323C 0030                  		move.w	#$30,d1
00018208 3401                       		move.w	d1,d2
0001820A 3602                       		move.w	d2,d3
0001820C 5243                       		addq.w	#1,d3
0001820E 3828 0008                  		move.w	obX(a0),d4
00018212 6100 9B80                  		bsr.w	SolidObject
00018216 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
0001821C 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018220                            
00018220 43F8 D000                  		lea	(v_player).w,a1
00018224 720E                       		moveq	#$E,d1
00018226 3029 0008                  		move.w	obX(a1),d0
0001822A B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
0001822E 6500                       		bcs.s	@isleft		; if yes, branch
00018230 7207                       		moveq	#7,d1		
00018232                            
00018232                            	@isleft:
00018232 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018236 6600                       		bne.s	Jun_Display	; if not, branch
00018238                            
00018238 1141 0032                  		move.b	d1,$32(a0)
0001823C 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018240 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018246 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001824C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018252 337C 0000 0010             		move.w	#0,obVelX(a1)
00018258 337C 0000 0012             		move.w	#0,obVelY(a1)
0001825E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018264 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001826A 08E9 0001 0022             		bset	#1,obStatus(a1)
00018270 3429 0008                  		move.w	obX(a1),d2
00018274 3629 000C                  		move.w	obY(a1),d3
00018278 6100 0000                  		bsr.w	Jun_ChgPos
0001827C D569 0008                  		add.w	d2,obX(a1)
00018280 D769 000C                  		add.w	d3,obY(a1)
00018284 E0E9 0008                  		asr	obX(a1)
00018288 E0E9 000C                  		asr	obY(a1)
0001828C                            
0001828C                            Jun_Display:	; Routine 4
0001828C 6000 966E                  		bra.w	RememberState
00018290                            ; ===========================================================================
00018290                            
00018290                            Jun_Release:	; Routine 6
00018290 1028 001A                  		move.b	obFrame(a0),d0
00018294 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018298 6700                       		beq.s	@release	; if yes, branch
0001829A 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
0001829E 6600                       		bne.s	@dontrelease	; if not, branch
000182A0                            
000182A0                            	@release:
000182A0 B028 0032                  		cmp.b	$32(a0),d0
000182A4 6700                       		beq.s	@dontrelease
000182A6 43F8 D000                  		lea	(v_player).w,a1
000182AA 337C 0000 0010             		move.w	#0,obVelX(a1)
000182B0 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182B6 0C00 0004                  		cmpi.b	#4,d0
000182BA 6700                       		beq.s	@isdown
000182BC 337C 0800 0010             		move.w	#$800,obVelX(a1)
000182C2 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182C8                            
000182C8                            	@isdown:
000182C8 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000182CC 5928 0024                  		subq.b	#4,obRoutine(a0)
000182D0                            
000182D0                            	@dontrelease:
000182D0 6100                       		bsr.s	Jun_ChkSwitch
000182D2 6100                       		bsr.s	Jun_ChgPos
000182D4 6000 9626                  		bra.w	RememberState
000182D8                            
000182D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182D8                            
000182D8                            
000182D8                            Jun_ChkSwitch:
000182D8 45F8 F7E0                  		lea	(f_switch).w,a2
000182DC 7000                       		moveq	#0,d0
000182DE 1028 0038                  		move.b	jun_switch(a0),d0
000182E2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000182E8 6700                       		beq.s	@unpressed	; if not, branch
000182EA                            
000182EA 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000182EE 6600                       		bne.s	@animate	; if yes, branch
000182F0 4428 0034                  		neg.b	jun_frame(a0)
000182F4 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000182FA 6000                       		bra.s	@animate
000182FC                            ; ===========================================================================
000182FC                            
000182FC                            @unpressed:
000182FC 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018300                            
00018300                            @animate:
00018300 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018304 6A00                       		bpl.s	@nochange	; if time remains, branch
00018306 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001830C 1228 0034                  		move.b	jun_frame(a0),d1
00018310 1028 001A                  		move.b	obFrame(a0),d0
00018314 D001                       		add.b	d1,d0
00018316 0200 000F                  		andi.b	#$F,d0
0001831A 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
0001831E                            
0001831E                            	@nochange:
0001831E 4E75                       		rts	
00018320                            ; End of function Jun_ChkSwitch
00018320                            
00018320                            
00018320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018320                            
00018320                            
00018320                            Jun_ChgPos:
00018320 43F8 D000                  		lea	(v_player).w,a1
00018324 7000                       		moveq	#0,d0
00018326 1028 001A                  		move.b	obFrame(a0),d0
0001832A D040                       		add.w	d0,d0
0001832C 45FB 0000                  		lea	@data(pc,d0.w),a2
00018330 101A                       		move.b	(a2)+,d0
00018332 4880                       		ext.w	d0
00018334 D068 0008                  		add.w	obX(a0),d0
00018338 3340 0008                  		move.w	d0,obX(a1)
0001833C 101A                       		move.b	(a2)+,d0
0001833E 4880                       		ext.w	d0
00018340 D068 000C                  		add.w	obY(a0),d0
00018344 3340 000C                  		move.w	d0,obY(a1)
00018348 4E75                       		rts	
0001834A                            
0001834A                            
0001834A E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001834E E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018352 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018356 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001835A 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001835E 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018362 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018366 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018366 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836A                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001836A                            ; ---------------------------------------------------------------------------
0001836A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001836A                            ; ---------------------------------------------------------------------------
0001836A                            Map_Jun_internal:
0001836A 0000                       		dc.w @gap0-Map_Jun_internal
0001836C 0000                       		dc.w @gap1-Map_Jun_internal
0001836E 0000                       		dc.w @gap2-Map_Jun_internal
00018370 0000                       		dc.w @gap3-Map_Jun_internal
00018372 0000                       		dc.w @gap4-Map_Jun_internal
00018374 0000                       		dc.w @gap5-Map_Jun_internal
00018376 0000                       		dc.w @gap6-Map_Jun_internal
00018378 0000                       		dc.w @gap7-Map_Jun_internal
0001837A 0000                       		dc.w @gap8-Map_Jun_internal
0001837C 0000                       		dc.w @gap9-Map_Jun_internal
0001837E 0000                       		dc.w @gapA-Map_Jun_internal
00018380 0000                       		dc.w @gapB-Map_Jun_internal
00018382 0000                       		dc.w @gapC-Map_Jun_internal
00018384 0000                       		dc.w @gapD-Map_Jun_internal
00018386 0000                       		dc.w @gapE-Map_Jun_internal
00018388 0000                       		dc.w @gapF-Map_Jun_internal
0001838A 0000                       		dc.w @circle-Map_Jun_internal
0001838C 06                         @gap0:		dc.b 6
0001838D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018392 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018397 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001839C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000183A1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000183A6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000183AB 06                         @gap1:		dc.b 6
000183AC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000183B1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000183B6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000183BB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000183C0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000183C5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000183CA 06                         @gap2:		dc.b 6
000183CB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000183D0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000183D5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000183DA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000183DF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000183E4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000183E9 06                         @gap3:		dc.b 6
000183EA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000183EF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000183F4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000183F9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000183FE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018403 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018408 06                         @gap4:		dc.b 6
00018409 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001840E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018413 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018418 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001841D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018422 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018427 06                         @gap5:		dc.b 6
00018428 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001842D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018432 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018437 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001843C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018441 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018446 06                         @gap6:		dc.b 6
00018447 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001844C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018451 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018456 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001845B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018460 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018465 06                         @gap7:		dc.b 6
00018466 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001846B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018470 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018475 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001847A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001847F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018484 06                         @gap8:		dc.b 6
00018485 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001848A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001848F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018494 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018499 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001849E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000184A3 06                         @gap9:		dc.b 6
000184A4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000184A9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000184AE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000184B3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000184B8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000184BD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000184C2 06                         @gapA:		dc.b 6
000184C3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000184C8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000184CD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000184D2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000184D7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000184DC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000184E1 06                         @gapB:		dc.b 6
000184E2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000184E7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000184EC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000184F1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000184F6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000184FB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018500 06                         @gapC:		dc.b 6
00018501 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018506 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001850B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018510 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018515 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001851A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001851F 06                         @gapD:		dc.b 6
00018520 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018525 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001852A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001852F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018534 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018539 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001853E 06                         @gapE:		dc.b 6
0001853F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018544 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018549 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001854E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018553 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018558 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001855D 06                         @gapF:		dc.b 6
0001855E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018563 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018568 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001856D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018572 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018577 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001857C 0C                         @circle:	dc.b $C
0001857D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018582 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018587 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001858C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018591 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018596 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001859B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000185A0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000185A5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000185AA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000185AF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000185B4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000185BA 00                         		even
000185BA 00                         		even
000185BA                            		include	"_incObj\67 Running Disc.asm"
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            ; Object 67 - disc that	you run	around (SBZ)
000185BA                            ; ---------------------------------------------------------------------------
000185BA                            
000185BA                            RunningDisc:
000185BA 7000                       		moveq	#0,d0
000185BC 1028 0024                  		move.b	obRoutine(a0),d0
000185C0 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000185C4 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000185C8                            ; ===========================================================================
000185C8 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000185CA 0000                       		dc.w Disc_Action-Disc_Index
000185CC                            
000185CC =00000032                  disc_origX:	equ $32		; original x-axis position
000185CC =00000030                  disc_origY:	equ $30		; original y-axis position
000185CC                            ; ===========================================================================
000185CC                            
000185CC                            Disc_Main:	; Routine 0
000185CC 5428 0024                  		addq.b	#2,obRoutine(a0)
000185D0 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000185D8 317C C344 0002             		move.w	#$C344,obGfx(a0)
000185DE 117C 0004 0001             		move.b	#4,obRender(a0)
000185E4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000185EA 117C 0008 0014             		move.b	#8,obActWid(a0)
000185F0 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000185F6 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
000185FC 117C 0018 0034             		move.b	#$18,$34(a0)
00018602 117C 0048 0038             		move.b	#$48,$38(a0)
00018608 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001860C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018610 6700                       		beq.s	@typeis0	; branch if 0
00018612 117C 0010 0034             		move.b	#$10,$34(a0)
00018618 117C 0038 0038             		move.b	#$38,$38(a0)
0001861E                            
0001861E                            	@typeis0:
0001861E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018622 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018626 4881                       		ext.w	d1
00018628 E741                       		asl.w	#3,d1
0001862A 3141 0036                  		move.w	d1,$36(a0)
0001862E 1028 0022                  		move.b	obStatus(a0),d0
00018632 E418                       		ror.b	#2,d0
00018634 0200 00C0                  		andi.b	#$C0,d0
00018638 1140 0026                  		move.b	d0,obAngle(a0)
0001863C                            
0001863C                            Disc_Action:	; Routine 2
0001863C 6100 0000                  		bsr.w	Disc_MoveSonic
00018640 6100 0000                  		bsr.w	Disc_MoveSpot
00018644 6000 0000                  		bra.w	Disc_ChkDel
00018648                            ; ===========================================================================
00018648                            
00018648                            Disc_MoveSonic:
00018648 7400                       		moveq	#0,d2
0001864A 1428 0038                  		move.b	$38(a0),d2
0001864E 3602                       		move.w	d2,d3
00018650 D643                       		add.w	d3,d3
00018652 43F8 D000                  		lea	(v_player).w,a1
00018656 3029 0008                  		move.w	obX(a1),d0
0001865A 9068 0032                  		sub.w	disc_origX(a0),d0
0001865E D042                       		add.w	d2,d0
00018660 B043                       		cmp.w	d3,d0
00018662 6400                       		bcc.s	loc_155A8
00018664 3229 000C                  		move.w	obY(a1),d1
00018668 9268 0030                  		sub.w	disc_origY(a0),d1
0001866C D242                       		add.w	d2,d1
0001866E B243                       		cmp.w	d3,d1
00018670 6400                       		bcc.s	loc_155A8
00018672 0829 0001 0022             		btst	#1,obStatus(a1)
00018678 6700                       		beq.s	loc_155B8
0001867A 4228 003A                  		clr.b	$3A(a0)
0001867E 4E75                       		rts	
00018680                            ; ===========================================================================
00018680                            
00018680                            loc_155A8:
00018680 4A28 003A                  		tst.b	$3A(a0)
00018684 6700                       		beq.s	locret_155B6
00018686 4229 0038                  		clr.b	$38(a1)
0001868A 4228 003A                  		clr.b	$3A(a0)
0001868E                            
0001868E                            locret_155B6:
0001868E 4E75                       		rts	
00018690                            ; ===========================================================================
00018690                            
00018690                            loc_155B8:
00018690 4A28 003A                  		tst.b	$3A(a0)
00018694 6600                       		bne.s	loc_155E2
00018696 117C 0001 003A             		move.b	#1,$3A(a0)
0001869C 0829 0002 0022             		btst	#2,obStatus(a1)
000186A2 6600                       		bne.s	loc_155D0
000186A4 4229 001C                  		clr.b	obAnim(a1)
000186A8                            
000186A8                            loc_155D0:
000186A8 08A9 0005 0022             		bclr	#5,obStatus(a1)
000186AE 137C 0001 001D             		move.b	#1,obNextAni(a1)
000186B4 137C 0001 0038             		move.b	#1,$38(a1)
000186BA                            
000186BA                            loc_155E2:
000186BA 3029 0020                  		move.w	obInertia(a1),d0
000186BE 4A68 0036                  		tst.w	$36(a0)
000186C2 6A00                       		bpl.s	loc_15608
000186C4 0C40 FC00                  		cmpi.w	#-$400,d0
000186C8 6F00                       		ble.s	loc_155FA
000186CA 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000186D0 4E75                       		rts	
000186D2                            ; ===========================================================================
000186D2                            
000186D2                            loc_155FA:
000186D2 0C40 F100                  		cmpi.w	#-$F00,d0
000186D6 6C00                       		bge.s	locret_15606
000186D8 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000186DE                            
000186DE                            locret_15606:
000186DE 4E75                       		rts	
000186E0                            ; ===========================================================================
000186E0                            
000186E0                            loc_15608:
000186E0 0C40 0400                  		cmpi.w	#$400,d0
000186E4 6C00                       		bge.s	loc_15616
000186E6 337C 0400 0020             		move.w	#$400,obInertia(a1)
000186EC 4E75                       		rts	
000186EE                            ; ===========================================================================
000186EE                            
000186EE                            loc_15616:
000186EE 0C40 0F00                  		cmpi.w	#$F00,d0
000186F2 6F00                       		ble.s	locret_15622
000186F4 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000186FA                            
000186FA                            locret_15622:
000186FA 4E75                       		rts	
000186FC                            ; ===========================================================================
000186FC                            
000186FC                            Disc_MoveSpot:
000186FC 3028 0036                  		move.w	$36(a0),d0
00018700 D168 0026                  		add.w	d0,obAngle(a0)
00018704 1028 0026                  		move.b	obAngle(a0),d0
00018708 4EB9 0000 3A36             		jsr	(CalcSine).l
0001870E 3428 0030                  		move.w	disc_origY(a0),d2
00018712 3628 0032                  		move.w	disc_origX(a0),d3
00018716 7800                       		moveq	#0,d4
00018718 1828 0034                  		move.b	$34(a0),d4
0001871C E14C                       		lsl.w	#8,d4
0001871E 2A04                       		move.l	d4,d5
00018720 C9C0                       		muls.w	d0,d4
00018722 4844                       		swap	d4
00018724 CBC1                       		muls.w	d1,d5
00018726 4845                       		swap	d5
00018728 D842                       		add.w	d2,d4
0001872A DA43                       		add.w	d3,d5
0001872C 3144 000C                  		move.w	d4,obY(a0)
00018730 3145 0008                  		move.w	d5,obX(a0)
00018734 4E75                       		rts	
00018736                            ; ===========================================================================
00018736                            
00018736                            Disc_ChkDel:
00018752 4EF9 0000 F986             		jmp	(DisplaySprite).l
00018758                            
00018758                            	@delete:
00018758 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00018758 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001875E                            Map_Disc:	include	"_maps\Running Disc.asm"
0001875E                            ; ---------------------------------------------------------------------------
0001875E                            ; Sprite mappings - disc that you run around (SBZ)
0001875E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001875E                            ; part of the level tiles.)
0001875E                            ; ---------------------------------------------------------------------------
0001875E                            Map_Disc_internal:
0001875E 0000                       		dc.w @spot-Map_Disc_internal
00018760 01                         @spot:		dc.b 1
00018761 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018766                            		even
00018766                            		even
00018766                            		include	"_incObj\68 Conveyor Belt.asm"
00018766                            ; ---------------------------------------------------------------------------
00018766                            ; Object 68 - conveyor belts (SBZ)
00018766                            ; ---------------------------------------------------------------------------
00018766                            
00018766                            Conveyor:
00018766 7000                       		moveq	#0,d0
00018768 1028 0024                  		move.b	obRoutine(a0),d0
0001876C 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018770 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018774                            ; ===========================================================================
00018774 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018776 0000                       		dc.w Conv_Action-Conv_Index
00018778                            
00018778 =00000036                  conv_speed:	equ $36
00018778 =00000038                  conv_width:	equ $38
00018778                            ; ===========================================================================
00018778                            
00018778                            Conv_Main:	; Routine 0
00018778 5428 0024                  		addq.b	#2,obRoutine(a0)
0001877C 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018782 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018786 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001878A 6700                       		beq.s	@typeis0	; if zero, branch
0001878C 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018792                            
00018792                            	@typeis0:
00018792 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018796 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001879A 4881                       		ext.w	d1
0001879C E841                       		asr.w	#4,d1
0001879E 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000187A2                            
000187A2                            Conv_Action:	; Routine 2
000187A2 6100                       		bsr.s	@movesonic
000187C0 4E75                       		rts	
000187C2                            
000187C2                            	@delete:
000187C2 4EF9 0000 F9C6             		jmp	(DeleteObject).l
000187C8                            ; ===========================================================================
000187C8                            
000187C8                            @movesonic:
000187C8 7400                       		moveq	#0,d2
000187CA 1428 0038                  		move.b	conv_width(a0),d2
000187CE 3602                       		move.w	d2,d3
000187D0 D643                       		add.w	d3,d3
000187D2 43F8 D000                  		lea	(v_player).w,a1
000187D6 3029 0008                  		move.w	obX(a1),d0
000187DA 9068 0008                  		sub.w	obX(a0),d0
000187DE D042                       		add.w	d2,d0
000187E0 B043                       		cmp.w	d3,d0
000187E2 6400                       		bcc.s	@notonconveyor
000187E4 3229 000C                  		move.w	obY(a1),d1
000187E8 9268 000C                  		sub.w	obY(a0),d1
000187EC 0641 0030                  		addi.w	#$30,d1
000187F0 0C41 0030                  		cmpi.w	#$30,d1
000187F4 6400                       		bcc.s	@notonconveyor
000187F6 0829 0001 0022             		btst	#1,obStatus(a1)
000187FC 6600                       		bne.s	@notonconveyor
000187FE 3028 0036                  		move.w	conv_speed(a0),d0
00018802 D169 0008                  		add.w	d0,obX(a1)
00018806                            
00018806                            	@notonconveyor:
00018806 4E75                       		rts	
00018806 4E75                       		rts	
00018808                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018808                            ; ---------------------------------------------------------------------------
00018808                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018808                            ; ---------------------------------------------------------------------------
00018808                            
00018808                            SpinPlatform:
00018808 7000                       		moveq	#0,d0
0001880A 1028 0024                  		move.b	obRoutine(a0),d0
0001880E 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018812 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00018816                            ; ===========================================================================
00018816 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018818 0000                       		dc.w Spin_Trapdoor-Spin_Index
0001881A 0000                       		dc.w Spin_Spinner-Spin_Index
0001881C                            
0001881C =00000030                  spin_timer:	equ $30		; time counter until change
0001881C =00000032                  spin_timelen:	equ $32		; time between changes (general)
0001881C                            ; ===========================================================================
0001881C                            
0001881C                            Spin_Main:	; Routine 0
0001881C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018820 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018828 317C 4492 0002             		move.w	#$4492,obGfx(a0)
0001882E 0028 0004 0001             		ori.b	#4,obRender(a0)
00018834 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001883A 7000                       		moveq	#0,d0
0001883C 1028 0028                  		move.b	obSubtype(a0),d0
00018840 0240 000F                  		andi.w	#$F,d0
00018844 C0FC 003C                  		mulu.w	#$3C,d0
00018848 3140 0032                  		move.w	d0,spin_timelen(a0)
0001884C 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018850 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018852                            
00018852 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018856 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001885E 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018864 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001886A 117C 0002 001C             		move.b	#2,obAnim(a0)
00018870 7000                       		moveq	#0,d0
00018872 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018876 3200                       		move.w	d0,d1
00018878 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001887C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018880 3140 0030                  		move.w	d0,spin_timer(a0)
00018884 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018888 0241 0070                  		andi.w	#$70,d1
0001888C 0641 0010                  		addi.w	#$10,d1
00018890 E549                       		lsl.w	#2,d1
00018892 5341                       		subq.w	#1,d1
00018894 3141 0036                  		move.w	d1,$36(a0)
00018898 6000                       		bra.s	Spin_Spinner
0001889A                            ; ===========================================================================
0001889A                            
0001889A                            Spin_Trapdoor:	; Routine 2
0001889A 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001889E 6A00                       		bpl.s	@animate	; if time remains, branch
000188A0                            
000188A0 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000188A6 0868 0000 001C             		bchg	#0,obAnim(a0)
000188AC 4A28 0001                  		tst.b	obRender(a0)
000188B0 6A00                       		bpl.s	@animate
000188BC                            
000188BC                            	@animate:
000188BC 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000188C2 4EB9 0000 CA32             		jsr	(AnimateSprite).l
000188C8 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000188CC 6600                       		bne.s	@notsolid	; if not, branch
000188CE 323C 004B                  		move.w	#$4B,d1
000188D2 343C 000C                  		move.w	#$C,d2
000188D6 3602                       		move.w	d2,d3
000188D8 5243                       		addq.w	#1,d3
000188DA 3828 0008                  		move.w	obX(a0),d4
000188DE 6100 94B4                  		bsr.w	SolidObject
000188E2 6000 9018                  		bra.w	RememberState
000188E6                            ; ===========================================================================
000188E6                            
000188E6                            @notsolid:
000188E6 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000188EC 6700                       		beq.s	@display	; if not, branch
000188EE 43F8 D000                  		lea	(v_player).w,a1
000188F2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000188F8 08A8 0003 0022             		bclr	#3,obStatus(a0)
000188FE 4228 0025                  		clr.b	obSolid(a0)
00018902                            
00018902                            	@display:
00018902 6000 8FF8                  		bra.w	RememberState
00018906                            ; ===========================================================================
00018906                            
00018906                            Spin_Spinner:	; Routine 4
00018906 3038 FE04                  		move.w	(v_framecount).w,d0
0001890A C068 0036                  		and.w	$36(a0),d0
0001890E 6600                       		bne.s	@delay
00018910 117C 0001 0034             		move.b	#1,$34(a0)
00018916                            
00018916                            	@delay:
00018916 4A28 0034                  		tst.b	$34(a0)
0001891A 6700                       		beq.s	@animate
0001891C 5368 0030                  		subq.w	#1,spin_timer(a0)
00018920 6A00                       		bpl.s	@animate
00018922 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018928 4228 0034                  		clr.b	$34(a0)
0001892C 0868 0000 001C             		bchg	#0,obAnim(a0)
00018932                            
00018932                            	@animate:
00018932 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018938 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001893E 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018942 6600                       		bne.s	@notsolid2	; if not, branch
00018944 323C 001B                  		move.w	#$1B,d1
00018948 343C 0007                  		move.w	#7,d2
0001894C 3602                       		move.w	d2,d3
0001894E 5243                       		addq.w	#1,d3
00018950 3828 0008                  		move.w	obX(a0),d4
00018954 6100 943E                  		bsr.w	SolidObject
00018958 6000 8FA2                  		bra.w	RememberState
0001895C                            ; ===========================================================================
0001895C                            
0001895C                            @notsolid2:
0001895C 0828 0003 0022             		btst	#3,obStatus(a0)
00018962 6700                       		beq.s	@display
00018964 43F8 D000                  		lea	(v_player).w,a1
00018968 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001896E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018974 4228 0025                  		clr.b	obSolid(a0)
00018978                            
00018978                            	@display:
00018978 6000 8F82                  		bra.w	RememberState
00018978 6000 8F82                  		bra.w	RememberState
0001897C                            		include	"_anim\SBZ Spinning Platforms.asm"
0001897C                            ; ---------------------------------------------------------------------------
0001897C                            ; Animation script - trapdoor (SBZ)
0001897C                            ; ---------------------------------------------------------------------------
0001897C 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001897E 0000                       		dc.w @trapclose-Ani_Spin
00018980 0000                       		dc.w @spin1-Ani_Spin
00018982 0000                       		dc.w @spin2-Ani_Spin
00018984 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
0001898A 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018990 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189A4 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189B8                            		even
000189B8                            		even
000189B8                            Map_Trap:	include	"_maps\Trapdoor.asm"
000189B8                            ; ---------------------------------------------------------------------------
000189B8                            ; Sprite mappings - trapdoor (SBZ)
000189B8                            ; ---------------------------------------------------------------------------
000189B8                            Map_Trap_internal:
000189B8 0000                       		dc.w @closed-Map_Trap_internal
000189BA 0000                       		dc.w @half-Map_Trap_internal
000189BC 0000                       		dc.w @open-Map_Trap_internal
000189BE 04                         @closed:	dc.b 4
000189BF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000189C4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000189C9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000189CE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000189D3 08                         @half:		dc.b 8
000189D4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000189D9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000189DE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000189E3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000189E8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000189ED 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000189F2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000189F7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000189FC 04                         @open:		dc.b 4
000189FD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A02 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A07 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A0C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A12 00                         		even
00018A12 00                         		even
00018A12                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A12                            ; ---------------------------------------------------------------------------
00018A12                            ; Sprite mappings - spinning platforms (SBZ)
00018A12                            ; ---------------------------------------------------------------------------
00018A12                            Map_Spin_internal:
00018A12 0000                       		dc.w @flat-Map_Spin_internal
00018A14 0000                       		dc.w @spin1-Map_Spin_internal
00018A16 0000                       		dc.w @spin2-Map_Spin_internal
00018A18 0000                       		dc.w @spin3-Map_Spin_internal
00018A1A 0000                       		dc.w @spin4-Map_Spin_internal
00018A1C 02                         @flat:		dc.b 2
00018A1D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018A22 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018A27 02                         @spin1:		dc.b 2
00018A28 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018A2D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018A32 02                         @spin2:		dc.b 2
00018A33 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018A38 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018A3D 02                         @spin3:		dc.b 2
00018A3E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018A43 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018A48 02                         @spin4:		dc.b 2
00018A49 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018A4E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018A54 00                         		even
00018A54 00                         		even
00018A54                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018A54                            ; ---------------------------------------------------------------------------
00018A54                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018A54                            ; ---------------------------------------------------------------------------
00018A54                            
00018A54                            Saws:
00018A54 7000                       		moveq	#0,d0
00018A56 1028 0024                  		move.b	obRoutine(a0),d0
00018A5A 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018A5E 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018A62                            ; ===========================================================================
00018A62 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018A64 0000                       		dc.w Saw_Action-Saw_Index
00018A66                            
00018A66 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018A66 =00000038                  saw_origY:	equ $38		; original y-axis position
00018A66 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018A66                            ; ===========================================================================
00018A66                            
00018A66                            Saw_Main:	; Routine 0
00018A66 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A6A 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018A72 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018A78 117C 0004 0001             		move.b	#4,obRender(a0)
00018A7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A84 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018A8A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A90 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018A96 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018A9C 6400                       		bcc.s	Saw_Action	; if yes, branch
00018A9E 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AA4                            
00018AA4                            Saw_Action:	; Routine 2
00018AA4 7000                       		moveq	#0,d0
00018AA6 1028 0028                  		move.b	obSubtype(a0),d0
00018AAA 0240 0007                  		andi.w	#7,d0
00018AAE D040                       		add.w	d0,d0
00018AB0 323B 0000                  		move.w	@index(pc,d0.w),d1
00018AB4 4EBB 1000                  		jsr	@index(pc,d1.w)
00018AD4 4EF9 0000 F986             		jmp	(DisplaySprite).l
00018ADA                            
00018ADA                            	@delete:
00018ADA 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00018AE0                            ; ===========================================================================
00018AE0 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018AE6 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018AEA                            ; ===========================================================================
00018AEA                            
00018AEA                            @type00:
00018AEA 4E75                       		rts			; doesn't move
00018AEC                            ; ===========================================================================
00018AEC                            
00018AEC                            @type01:
00018AEC 323C 0060                  		move.w	#$60,d1
00018AF0 7000                       		moveq	#0,d0
00018AF2 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018AF6 0828 0000 0022             		btst	#0,obStatus(a0)
00018AFC 6700                       		beq.s	@noflip01
00018AFE 4440                       		neg.w	d0
00018B00 D041                       		add.w	d1,d0
00018B02                            
00018B02                            	@noflip01:
00018B02 3228 003A                  		move.w	saw_origX(a0),d1
00018B06 9240                       		sub.w	d0,d1
00018B08 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B0C                            
00018B0C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B10 6A00                       		bpl.s	@sameframe01
00018B12 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B18 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018B1E                            
00018B1E                            	@sameframe01:
00018B1E 4A28 0001                  		tst.b	obRender(a0)
00018B22 6A00                       		bpl.s	@nosound01
00018B24 3038 FE04                  		move.w	(v_framecount).w,d0
00018B28 0240 000F                  		andi.w	#$F,d0
00018B2C 6600                       		bne.s	@nosound01
00018B38                            
00018B38                            	@nosound01:
00018B38 4E75                       		rts	
00018B3A                            ; ===========================================================================
00018B3A                            
00018B3A                            @type02:
00018B3A 323C 0030                  		move.w	#$30,d1
00018B3E 7000                       		moveq	#0,d0
00018B40 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B44 0828 0000 0022             		btst	#0,obStatus(a0)
00018B4A 6700                       		beq.s	@noflip02
00018B4C 4440                       		neg.w	d0
00018B4E 0640 0080                  		addi.w	#$80,d0
00018B52                            
00018B52                            	@noflip02:
00018B52 3228 0038                  		move.w	saw_origY(a0),d1
00018B56 9240                       		sub.w	d0,d1
00018B58 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018B5C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B60 6A00                       		bpl.s	@sameframe02
00018B62 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B68 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B6E                            
00018B6E                            	@sameframe02:
00018B6E 4A28 0001                  		tst.b	obRender(a0)
00018B72 6A00                       		bpl.s	@nosound02
00018B74 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B78 0C00 0018                  		cmpi.b	#$18,d0
00018B7C 6600                       		bne.s	@nosound02
00018B88                            
00018B88                            	@nosound02:
00018B88 4E75                       		rts	
00018B8A                            ; ===========================================================================
00018B8A                            
00018B8A                            @type03:
00018B8A 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018B8E 6600                       		bne.s	@here03		; if yes, branch
00018B90                            
00018B90 3038 D008                  		move.w	(v_player+obX).w,d0
00018B94 0440 00C0                  		subi.w	#$C0,d0
00018B98 6500                       		bcs.s	@nosaw03x
00018B9A 9068 0008                  		sub.w	obX(a0),d0
00018B9E 6500                       		bcs.s	@nosaw03x
00018BA0 3038 D00C                  		move.w	(v_player+obY).w,d0
00018BA4 0440 0080                  		subi.w	#$80,d0
00018BA8 B068 000C                  		cmp.w	obY(a0),d0
00018BAC 6400                       		bcc.s	@nosaw03y
00018BAE 0640 0100                  		addi.w	#$100,d0
00018BB2 B068 000C                  		cmp.w	obY(a0),d0
00018BB6 6500                       		bcs.s	@nosaw03y
00018BB8 117C 0001 003D             		move.b	#1,saw_here(a0)
00018BBE 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018BC4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BCA 117C 0002 001A             		move.b	#2,obFrame(a0)
00018BDA                            
00018BDA                            	@nosaw03x:
00018BDA 588F                       		addq.l	#4,sp
00018BDC                            
00018BDC                            	@nosaw03y:
00018BDC 4E75                       		rts	
00018BDE                            ; ===========================================================================
00018BDE                            
00018BDE                            @here03:
00018BDE 4EB9 0000 F972             		jsr	(SpeedToPos).l
00018BE4 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BEA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BEE 6A00                       		bpl.s	@sameframe03
00018BF0 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BF6 0868 0000 001A             		bchg	#0,obFrame(a0)
00018BFC                            
00018BFC                            	@sameframe03:
00018BFC 4E75                       		rts	
00018BFE                            ; ===========================================================================
00018BFE                            
00018BFE                            @type04:
00018BFE 4A28 003D                  		tst.b	saw_here(a0)
00018C02 6600                       		bne.s	@here04
00018C04 3038 D008                  		move.w	(v_player+obX).w,d0
00018C08 0640 00E0                  		addi.w	#$E0,d0
00018C0C 9068 0008                  		sub.w	obX(a0),d0
00018C10 6400                       		bcc.s	@nosaw04x
00018C12 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C16 0440 0080                  		subi.w	#$80,d0
00018C1A B068 000C                  		cmp.w	obY(a0),d0
00018C1E 6400                       		bcc.s	@nosaw04y
00018C20 0640 0100                  		addi.w	#$100,d0
00018C24 B068 000C                  		cmp.w	obY(a0),d0
00018C28 6500                       		bcs.s	@nosaw04y
00018C2A 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C30 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018C36 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C3C 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C4C                            
00018C4C                            	@nosaw04x:
00018C4C 588F                       		addq.l	#4,sp
00018C4E                            
00018C4E                            	@nosaw04y:
00018C4E 4E75                       		rts	
00018C50                            ; ===========================================================================
00018C50                            
00018C50                            @here04:
00018C50 4EB9 0000 F972             		jsr	(SpeedToPos).l
00018C56 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C5C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C60 6A00                       		bpl.s	@sameframe04
00018C62 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C68 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C6E                            
00018C6E                            	@sameframe04:
00018C6E 4E75                       		rts	
00018C6E 4E75                       		rts	
00018C70                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018C70                            ; ---------------------------------------------------------------------------
00018C70                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018C70                            ; ---------------------------------------------------------------------------
00018C70                            Map_Saw_internal:
00018C70 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018C72 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018C74 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018C76 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018C78 07                         @pizzacutter1:	dc.b 7
00018C79 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018C7E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018C83 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018C88 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018C8D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018C92 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018C97 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018C9C 07                         @pizzacutter2:	dc.b 7
00018C9D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018CA2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018CA7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018CAC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CB1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CB6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CBB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CC0 04                         @groundsaw1:	dc.b 4
00018CC1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018CC6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018CCB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018CD0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CD5 04                         @groundsaw2:	dc.b 4
00018CD6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CDB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CE0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CE5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CEA                            		even
00018CEA                            		even
00018CEA                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018CEA                            ; ---------------------------------------------------------------------------
00018CEA                            ; Object 6B - stomper and sliding door (SBZ)
00018CEA                            ; ---------------------------------------------------------------------------
00018CEA                            
00018CEA                            ScrapStomp:
00018CEA 7000                       		moveq	#0,d0
00018CEC 1028 0024                  		move.b	obRoutine(a0),d0
00018CF0 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018CF4 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018CF8                            ; ===========================================================================
00018CF8 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018CFA 0000                       		dc.w Sto_Action-Sto_Index
00018CFC                            
00018CFC =00000016                  sto_height:	equ $16
00018CFC =00000034                  sto_origX:	equ $34		; original x-axis position
00018CFC =00000030                  sto_origY:	equ $30		; original y-axis position
00018CFC =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018CFC                            
00018CFC 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D00 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D04 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D08 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D0C 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D10                            ; ===========================================================================
00018D10                            
00018D10                            Sto_Main:	; Routine 0
00018D10 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D14 7000                       		moveq	#0,d0
00018D16 1028 0028                  		move.b	obSubtype(a0),d0
00018D1A E448                       		lsr.w	#2,d0
00018D1C 0240 001C                  		andi.w	#$1C,d0
00018D20 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018D24 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018D28 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018D2C E448                       		lsr.w	#2,d0
00018D2E 1140 001A                  		move.b	d0,obFrame(a0)
00018D32 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018D3A 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018D40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018D46 6600                       		bne.s	@isSBZ12	; if not, branch
00018D48 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018D4E 6700                       		beq.s	@isSBZ3
00018D50                            
00018D50                            @chkdel:
00018D50 45F8 FC00                  		lea	(v_objstate).w,a2
00018D54 7000                       		moveq	#0,d0
00018D56 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D5A 6700                       		beq.s	@delete
00018D5C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D62                            
00018D62                            	@delete:
00018D62 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00018D68                            ; ===========================================================================
00018D68                            
00018D68                            @isSBZ3:
00018D68 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018D6E 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018D74 6600                       		bne.s	@isSBZ12
00018D76 45F8 FC00                  		lea	(v_objstate).w,a2
00018D7A 7000                       		moveq	#0,d0
00018D7C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D80 6700                       		beq.s	@isSBZ12
00018D82 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018D88 6700                       		beq.s	@isSBZ12
00018D8A 4238 F7CB                  		clr.b	(v_obj6B).w
00018D8E 60C0                       		bra.s	@chkdel
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            @isSBZ12:
00018D90 0028 0004 0001             		ori.b	#4,obRender(a0)
00018D96 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018D9C 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA2 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018DA8 7000                       		moveq	#0,d0
00018DAA 101B                       		move.b	(a3)+,d0
00018DAC 3140 003C                  		move.w	d0,$3C(a0)
00018DB0 7000                       		moveq	#0,d0
00018DB2 1028 0028                  		move.b	obSubtype(a0),d0
00018DB6 6A00                       		bpl.s	Sto_Action
00018DB8 0200 000F                  		andi.b	#$F,d0
00018DBC 1140 003E                  		move.b	d0,$3E(a0)
00018DC0 1153 0028                  		move.b	(a3),obSubtype(a0)
00018DC4 0C13 0005                  		cmpi.b	#5,(a3)
00018DC8 6600                       		bne.s	@chkgone
00018DCA 08E8 0004 0001             		bset	#4,obRender(a0)
00018DD0                            
00018DD0                            	@chkgone:
00018DD0 45F8 FC00                  		lea	(v_objstate).w,a2
00018DD4 7000                       		moveq	#0,d0
00018DD6 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DDA 6700                       		beq.s	Sto_Action
00018DDC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DE2                            
00018DE2                            Sto_Action:	; Routine 2
00018DE2 3F28 0008                  		move.w	obX(a0),-(sp)
00018DE6 7000                       		moveq	#0,d0
00018DE8 1028 0028                  		move.b	obSubtype(a0),d0
00018DEC 0240 000F                  		andi.w	#$F,d0
00018DF0 D040                       		add.w	d0,d0
00018DF2 323B 0000                  		move.w	@index(pc,d0.w),d1
00018DF6 4EBB 1000                  		jsr	@index(pc,d1.w)
00018DFA 381F                       		move.w	(sp)+,d4
00018DFC 4A28 0001                  		tst.b	obRender(a0)
00018E00 6A00                       		bpl.s	@chkdel
00018E02 7200                       		moveq	#0,d1
00018E04 1228 0014                  		move.b	obActWid(a0),d1
00018E08 0641 000B                  		addi.w	#$B,d1
00018E0C 7400                       		moveq	#0,d2
00018E0E 1428 0016                  		move.b	sto_height(a0),d2
00018E12 3602                       		move.w	d2,d3
00018E14 5243                       		addq.w	#1,d3
00018E16 6100 8F7C                  		bsr.w	SolidObject
00018E1A                            
00018E1A                            	@chkdel:
00018E36 4EF9 0000 F986             		jmp	(DisplaySprite).l
00018E3C                            
00018E3C                            	@chkgone:
00018E3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018E42 6600                       		bne.s	@delete
00018E44 4238 F7CB                  		clr.b	(v_obj6B).w
00018E48 45F8 FC00                  		lea	(v_objstate).w,a2
00018E4C 7000                       		moveq	#0,d0
00018E4E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E52 6700                       		beq.s	@delete
00018E54 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E5A                            
00018E5A                            	@delete:
00018E5A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00018E60                            ; ===========================================================================
00018E60 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018E64 0000 0000                  		dc.w @type02-@index, @type03-@index
00018E68 0000 0000                  		dc.w @type04-@index, @type05-@index
00018E6C                            ; ===========================================================================
00018E6C                            
00018E6C                            @type00:
00018E6C 4E75                       		rts
00018E6E                            ; ===========================================================================
00018E6E                            
00018E6E                            @type01:
00018E6E 4A28 0038                  		tst.b	sto_active(a0)
00018E72 6600                       		bne.s	@isactive01
00018E74 45F8 F7E0                  		lea	(f_switch).w,a2
00018E78 7000                       		moveq	#0,d0
00018E7A 1028 003E                  		move.b	$3E(a0),d0
00018E7E 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E84 6700                       		beq.s	@loc_15DC2
00018E86 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E8C                            
00018E8C                            	@isactive01:
00018E8C 3028 003C                  		move.w	$3C(a0),d0
00018E90 B068 003A                  		cmp.w	$3A(a0),d0
00018E94 6700                       		beq.s	@loc_15DE0
00018E96 5468 003A                  		addq.w	#2,$3A(a0)
00018E9A                            
00018E9A                            	@loc_15DC2:
00018E9A 3028 003A                  		move.w	$3A(a0),d0
00018E9E 0828 0000 0022             		btst	#0,obStatus(a0)
00018EA4 6700                       		beq.s	@noflip01
00018EA6 4440                       		neg.w	d0
00018EA8 0640 0080                  		addi.w	#$80,d0
00018EAC                            
00018EAC                            	@noflip01:
00018EAC 3228 0034                  		move.w	sto_origX(a0),d1
00018EB0 9240                       		sub.w	d0,d1
00018EB2 3141 0008                  		move.w	d1,obX(a0)
00018EB6 4E75                       		rts	
00018EB8                            ; ===========================================================================
00018EB8                            
00018EB8                            @loc_15DE0:
00018EB8 5228 0028                  		addq.b	#1,obSubtype(a0)
00018EBC 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018EC2 4228 0038                  		clr.b	sto_active(a0)
00018EC6 45F8 FC00                  		lea	(v_objstate).w,a2
00018ECA 7000                       		moveq	#0,d0
00018ECC 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED0 67C8                       		beq.s	@loc_15DC2
00018ED2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018ED8 60C0                       		bra.s	@loc_15DC2
00018EDA                            ; ===========================================================================
00018EDA                            
00018EDA                            @type02:
00018EDA 4A28 0038                  		tst.b	sto_active(a0)
00018EDE 6600                       		bne.s	@isactive02
00018EE0 5368 0036                  		subq.w	#1,$36(a0)
00018EE4 6600                       		bne.s	@loc_15E1E
00018EE6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EEC                            
00018EEC                            	@isactive02:
00018EEC 4A68 003A                  		tst.w	$3A(a0)
00018EF0 6700                       		beq.s	@loc_15E3C
00018EF2 5568 003A                  		subq.w	#2,$3A(a0)
00018EF6                            
00018EF6                            	@loc_15E1E:
00018EF6 3028 003A                  		move.w	$3A(a0),d0
00018EFA 0828 0000 0022             		btst	#0,obStatus(a0)
00018F00 6700                       		beq.s	@noflip02
00018F02 4440                       		neg.w	d0
00018F04 0640 0080                  		addi.w	#$80,d0
00018F08                            
00018F08                            	@noflip02:
00018F08 3228 0034                  		move.w	sto_origX(a0),d1
00018F0C 9240                       		sub.w	d0,d1
00018F0E 3141 0008                  		move.w	d1,obX(a0)
00018F12 4E75                       		rts	
00018F14                            ; ===========================================================================
00018F14                            
00018F14                            @loc_15E3C:
00018F14 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F18 4228 0038                  		clr.b	sto_active(a0)
00018F1C 45F8 FC00                  		lea	(v_objstate).w,a2
00018F20 7000                       		moveq	#0,d0
00018F22 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F26 67CE                       		beq.s	@loc_15E1E
00018F28 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018F2E 60C6                       		bra.s	@loc_15E1E
00018F30                            ; ===========================================================================
00018F30                            
00018F30                            @type03:
00018F30 4A28 0038                  		tst.b	sto_active(a0)
00018F34 6600                       		bne.s	@isactive03
00018F36 4A68 003A                  		tst.w	$3A(a0)
00018F3A 6700                       		beq.s	@loc_15E6A
00018F3C 5368 003A                  		subq.w	#1,$3A(a0)
00018F40 6000                       		bra.s	@loc_15E8E
00018F42                            ; ===========================================================================
00018F42                            
00018F42                            @loc_15E6A:
00018F42 5368 0036                  		subq.w	#1,$36(a0)
00018F46 6A00                       		bpl.s	@loc_15E8E
00018F48 317C 003C 0036             		move.w	#$3C,$36(a0)
00018F4E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F54                            
00018F54                            @isactive03:
00018F54 5068 003A                  		addq.w	#8,$3A(a0)
00018F58 3028 003A                  		move.w	$3A(a0),d0
00018F5C B068 003C                  		cmp.w	$3C(a0),d0
00018F60 6600                       		bne.s	@loc_15E8E
00018F62 4228 0038                  		clr.b	sto_active(a0)
00018F66                            
00018F66                            @loc_15E8E:
00018F66 3028 003A                  		move.w	$3A(a0),d0
00018F6A 0828 0000 0022             		btst	#0,obStatus(a0)
00018F70 6700                       		beq.s	@noflip03
00018F72 4440                       		neg.w	d0
00018F74 0640 0038                  		addi.w	#$38,d0
00018F78                            
00018F78                            	@noflip03:
00018F78 3228 0030                  		move.w	sto_origY(a0),d1
00018F7C D240                       		add.w	d0,d1
00018F7E 3141 000C                  		move.w	d1,obY(a0)
00018F82 4E75                       		rts	
00018F84                            ; ===========================================================================
00018F84                            
00018F84                            @type04:
00018F84 4A28 0038                  		tst.b	sto_active(a0)
00018F88 6600                       		bne.s	@isactive04
00018F8A 4A68 003A                  		tst.w	$3A(a0)
00018F8E 6700                       		beq.s	@loc_15EBE
00018F90 5168 003A                  		subq.w	#8,$3A(a0)
00018F94 6000                       		bra.s	@loc_15EF0
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            @loc_15EBE:
00018F96 5368 0036                  		subq.w	#1,$36(a0)
00018F9A 6A00                       		bpl.s	@loc_15EF0
00018F9C 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FA2 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FA8                            
00018FA8                            @isactive04:
00018FA8 3028 003A                  		move.w	$3A(a0),d0
00018FAC B068 003C                  		cmp.w	$3C(a0),d0
00018FB0 6700                       		beq.s	@loc_15EE0
00018FB2 5068 003A                  		addq.w	#8,$3A(a0)
00018FB6 6000                       		bra.s	@loc_15EF0
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            @loc_15EE0:
00018FB8 5368 0036                  		subq.w	#1,$36(a0)
00018FBC 6A00                       		bpl.s	@loc_15EF0
00018FBE 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FC4 4228 0038                  		clr.b	sto_active(a0)
00018FC8                            
00018FC8                            @loc_15EF0:
00018FC8 3028 003A                  		move.w	$3A(a0),d0
00018FCC 0828 0000 0022             		btst	#0,obStatus(a0)
00018FD2 6700                       		beq.s	@noflip04
00018FD4 4440                       		neg.w	d0
00018FD6 0640 0038                  		addi.w	#$38,d0
00018FDA                            
00018FDA                            	@noflip04:
00018FDA 3228 0030                  		move.w	sto_origY(a0),d1
00018FDE D240                       		add.w	d0,d1
00018FE0 3141 000C                  		move.w	d1,obY(a0)
00018FE4 4E75                       		rts	
00018FE6                            ; ===========================================================================
00018FE6                            
00018FE6                            @type05:
00018FE6 4A28 0038                  		tst.b	sto_active(a0)
00018FEA 6600                       		bne.s	@loc_15F3E
00018FEC 45F8 F7E0                  		lea	(f_switch).w,a2
00018FF0 7000                       		moveq	#0,d0
00018FF2 1028 003E                  		move.b	$3E(a0),d0
00018FF6 0832 0000 0000             		btst	#0,(a2,d0.w)
00018FFC 6700                       		beq.s	@locret_15F5C
00018FFE 117C 0001 0038             		move.b	#1,sto_active(a0)
00019004 45F8 FC00                  		lea	(v_objstate).w,a2
00019008 7000                       		moveq	#0,d0
0001900A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001900E 6700                       		beq.s	@loc_15F3E
00019010 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019016                            
00019016                            @loc_15F3E:
00019016 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0001901E 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00019026 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
0001902C 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019032 6700                       		beq.s	@loc_15F5E
00019034                            
00019034                            @locret_15F5C:
00019034 4E75                       		rts	
00019036                            ; ===========================================================================
00019036                            
00019036                            @loc_15F5E:
00019036 4228 0028                  		clr.b	obSubtype(a0)
0001903A 4228 0038                  		clr.b	sto_active(a0)
0001903E 4E75                       		rts	
0001903E 4E75                       		rts	
00019040                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019040                            ; ---------------------------------------------------------------------------
00019040                            ; Sprite mappings - stomper and	platforms (SBZ)
00019040                            ; ---------------------------------------------------------------------------
00019040                            Map_Stomp_internal:
00019040 0000                       		dc.w @door-Map_Stomp_internal
00019042 0000                       		dc.w @stomper-Map_Stomp_internal
00019044 0000                       		dc.w @stomper-Map_Stomp_internal
00019046 0000                       		dc.w @stomper-Map_Stomp_internal
00019048 0000                       		dc.w @bigdoor-Map_Stomp_internal
0001904A 04                         @door:		dc.b 4
0001904B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019050 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00019055 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001905A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001905F 08                         @stomper:	dc.b 8
00019060 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00019065 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001906A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001906F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00019074 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019079 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001907E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019083 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019088 0E                         @bigdoor:	dc.b $E
00019089 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
0001908E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019093 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00019098 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001909D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000190A2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000190A7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000190AC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000190B1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000190B6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000190BB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000190C0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000190C5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000190CA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000190D0 00                         		even
000190D0 00                         		even
000190D0                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000190D0                            ; ---------------------------------------------------------------------------
000190D0                            ; Object 6C - vanishing	platforms (SBZ)
000190D0                            ; ---------------------------------------------------------------------------
000190D0                            
000190D0                            VanishPlatform:
000190D0 7000                       		moveq	#0,d0
000190D2 1028 0024                  		move.b	obRoutine(a0),d0
000190D6 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
000190DA 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
000190DE                            ; ===========================================================================
000190DE 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
000190E0 0000                       		dc.w VanP_Vanish-VanP_Index
000190E2 0000                       		dc.w VanP_Appear-VanP_Index
000190E4 0000                       		dc.w loc_16068-VanP_Index
000190E6                            
000190E6 =00000030                  vanp_timer:	equ $30		; counter for time until event
000190E6 =00000032                  vanp_timelen:	equ $32		; time between events (general)
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            VanP_Main:	; Routine 0
000190E6 5C28 0024                  		addq.b	#6,obRoutine(a0)
000190EA 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000190F2 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
000190F8 0028 0004 0001             		ori.b	#4,obRender(a0)
000190FE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019104 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001910A 7000                       		moveq	#0,d0
0001910C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019110 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019114 5240                       		addq.w	#1,d0		; add 1
00019116 EF48                       		lsl.w	#7,d0		; multiply by $80
00019118 3200                       		move.w	d0,d1
0001911A 5340                       		subq.w	#1,d0
0001911C 3140 0030                  		move.w	d0,vanp_timer(a0)
00019120 3140 0032                  		move.w	d0,vanp_timelen(a0)
00019124 7000                       		moveq	#0,d0
00019126 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001912A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001912E 0641 0080                  		addi.w	#$80,d1
00019132 C0C1                       		mulu.w	d1,d0
00019134 E088                       		lsr.l	#8,d0
00019136 3140 0036                  		move.w	d0,$36(a0)
0001913A 5341                       		subq.w	#1,d1
0001913C 3141 0038                  		move.w	d1,$38(a0)
00019140                            
00019140                            loc_16068:	; Routine 6
00019140 3038 FE04                  		move.w	(v_framecount).w,d0
00019144 9068 0036                  		sub.w	$36(a0),d0
00019148 C068 0038                  		and.w	$38(a0),d0
0001914C 6600                       		bne.s	@animate
0001914E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019152 6000                       		bra.s	VanP_Vanish
00019154                            ; ===========================================================================
00019154                            
00019154                            @animate:
00019154 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001915A 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00019160 6000 879A                  		bra.w	RememberState
00019164                            ; ===========================================================================
00019164                            
00019164                            VanP_Vanish:	; Routine 2
00019164                            VanP_Appear:	; Routine 4
00019164 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019168 6A00                       		bpl.s	@wait
0001916A 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019170 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019174 6700                       		beq.s	@isvanishing	; if yes, branch
00019176 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001917C                            
0001917C                            	@isvanishing:
0001917C 0868 0000 001C             		bchg	#0,obAnim(a0)
00019182                            
00019182                            	@wait:
00019182 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019188 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001918E 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019194 6600                       		bne.s	@notsolid	; if yes, branch
00019196 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001919C 6600                       		bne.s	@loc_160D6
0001919E 7200                       		moveq	#0,d1
000191A0 1228 0014                  		move.b	obActWid(a0),d1
000191A4 4EB9 0000 9094             		jsr	(PlatformObject).l
000191AA 6000 8750                  		bra.w	RememberState
000191AE                            ; ===========================================================================
000191AE                            
000191AE                            @loc_160D6:
000191AE 7200                       		moveq	#0,d1
000191B0 1228 0014                  		move.b	obActWid(a0),d1
000191B4 4EB9 0000 9208             		jsr	(ExitPlatform).l
000191BA 3428 0008                  		move.w	obX(a0),d2
000191BE 4EB9 0000 9772             		jsr	(MvSonicOnPtfm2).l
000191C4 6000 8736                  		bra.w	RememberState
000191C8                            ; ===========================================================================
000191C8                            
000191C8                            @notsolid:
000191C8 0828 0003 0022             		btst	#3,obStatus(a0)
000191CE 6700                       		beq.s	@display
000191D0 43F8 D000                  		lea	(v_player).w,a1
000191D4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191DA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191E0 117C 0002 0024             		move.b	#2,obRoutine(a0)
000191E6 4228 0025                  		clr.b	obSolid(a0)
000191EA                            
000191EA                            	@display:
000191EA 6000 8710                  		bra.w	RememberState
000191EA 6000 8710                  		bra.w	RememberState
000191EE                            		include	"_anim\SBZ Vanishing Platforms.asm"
000191EE                            ; ---------------------------------------------------------------------------
000191EE                            ; Animation script - vanishing platforms (SBZ)
000191EE                            ; ---------------------------------------------------------------------------
000191EE 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000191F0 0000                       		dc.w @appear-Ani_Van
000191F2 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
000191FA 00                         		even
000191FA 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019202 00                         		even
00019202 00                         		even
00019202                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019202                            ; ---------------------------------------------------------------------------
00019202                            ; Sprite mappings - vanishing platforms	(SBZ)
00019202                            ; ---------------------------------------------------------------------------
00019202                            Map_VanP_internal:
00019202 0000                       		dc.w @whole-Map_VanP_internal
00019204 0000                       		dc.w @half-Map_VanP_internal
00019206 0000                       		dc.w @quarter-Map_VanP_internal
00019208 0000                       		dc.w @gone-Map_VanP_internal
0001920A 01                         @whole:		dc.b 1
0001920B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019210 01                         @half:		dc.b 1
00019211 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00019216 01                         @quarter:	dc.b 1
00019217 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001921C 00                         @gone:		dc.b 0
0001921E 00                         		even
0001921E 00                         		even
0001921E                            		include	"_incObj\6E Electrocuter.asm"
0001921E                            ; ---------------------------------------------------------------------------
0001921E                            ; Object 6E - electrocution orbs (SBZ)
0001921E                            ; ---------------------------------------------------------------------------
0001921E                            
0001921E                            Electro:
0001921E 7000                       		moveq	#0,d0
00019220 1028 0024                  		move.b	obRoutine(a0),d0
00019224 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019228 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
0001922C                            ; ===========================================================================
0001922C 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
0001922E 0000                       		dc.w Elec_Shock-Elec_Index
00019230                            
00019230 =00000034                  elec_freq:	equ $34		; frequency
00019230                            ; ===========================================================================
00019230                            
00019230                            Elec_Main:	; Routine 0
00019230 5428 0024                  		addq.b	#2,obRoutine(a0)
00019234 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
0001923C 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019242 0028 0004 0001             		ori.b	#4,obRender(a0)
00019248 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001924E 7000                       		moveq	#0,d0
00019250 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019254 E948                       		lsl.w	#4,d0		; multiply by $10
00019256 5340                       		subq.w	#1,d0
00019258 3140 0034                  		move.w	d0,elec_freq(a0)
0001925C                            
0001925C                            Elec_Shock:	; Routine 2
0001925C 3038 FE04                  		move.w	(v_framecount).w,d0
00019260 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019264 6600                       		bne.s	@animate	; if not, branch
00019266                            
00019266 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001926C 4A28 0001                  		tst.b	obRender(a0)
00019270 6A00                       		bpl.s	@animate
0001927C                            
0001927C                            	@animate:
0001927C 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019282 4EB9 0000 CA32             		jsr	(AnimateSprite).l
00019288 117C 0000 0020             		move.b	#0,obColType(a0)
0001928E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019294 6600                       		bne.s	@display	; if not, branch
00019296 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001929C                            
0001929C                            	@display:
0001929C 6000 865E                  		bra.w	RememberState
0001929C 6000 865E                  		bra.w	RememberState
000192A0                            		include	"_anim\Electrocuter.asm"
000192A0                            ; ---------------------------------------------------------------------------
000192A0                            ; Animation script - electrocution orbs (SBZ)
000192A0                            ; ---------------------------------------------------------------------------
000192A0 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000192A2 0000                       		dc.w byte_161D0-Ani_Elec
000192A4 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000192A8 00                         		even
000192A8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000192B8                            		even
000192B8                            		even
000192B8                            Map_Elec:	include	"_maps\Electrocuter.asm"
000192B8                            ; --------------------------------------------------------------------------------
000192B8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000192B8                            ; --------------------------------------------------------------------------------
000192B8                            
000192B8                            SME_KiF9w:	
000192B8 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000192BC 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000192C0 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000192C4 02                         SME_KiF9w_C:	dc.b 2	
000192C5 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000192CA 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192CF 03                         SME_KiF9w_17:	dc.b 3	
000192D0 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192D5 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192DA 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192DF 05                         SME_KiF9w_27:	dc.b 5	
000192E0 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192E5 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192EA 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192EF F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000192F4 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000192F9 04                         SME_KiF9w_41:	dc.b 4	
000192FA F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000192FF 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019304 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019309 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001930E 06                         SME_KiF9w_56:	dc.b 6	
0001930F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019314 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019319 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
0001931E F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019323 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019328 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
0001932D 04                         SME_KiF9w_75:	dc.b 4	
0001932E F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019333 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019338 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
0001933D F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019342                            		even
00019342                            		even
00019342                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019342                            ; ---------------------------------------------------------------------------
00019342                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019342                            ; ---------------------------------------------------------------------------
00019342                            
00019342                            SpinConvey:
00019342 7000                       		moveq	#0,d0
00019344 1028 0024                  		move.b	obRoutine(a0),d0
00019348 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001934C 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001936C                            
0001936C                            SpinC_Display:
0001936C 4EF9 0000 F986             		jmp	(DisplaySprite).l
00019372                            ; ===========================================================================
00019372                            
00019372                            loc_1629A:
00019372 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019378 6600                       		bne.s	SpinC_Act1or2	; if not, branch
0001937A 0C40 FF80                  		cmpi.w	#-$80,d0
0001937E 64EC                       		bcc.s	SpinC_Display
00019380                            
00019380                            SpinC_Act1or2:
00019380 1028 002F                  		move.b	$2F(a0),d0
00019384 6A00                       		bpl.s	SpinC_Delete
00019386 0240 007F                  		andi.w	#$7F,d0
0001938A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001938E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019394                            
00019394                            SpinC_Delete:
00019394 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001939A                            ; ===========================================================================
0001939A 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001939C 0000                       		dc.w loc_163D8-SpinC_Index
0001939E                            ; ===========================================================================
0001939E                            
0001939E                            SpinC_Main:	; Routine 0
0001939E 1028 0028                  		move.b	obSubtype(a0),d0
000193A2 6B00 0000                  		bmi.w	loc_16380
000193A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000193AA 217C 0001 8A12 0004        		move.l	#Map_Spin,obMap(a0)
000193B2 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193B8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000193BE 0028 0004 0001             		ori.b	#4,obRender(a0)
000193C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193CA 7000                       		moveq	#0,d0
000193CC 1028 0028                  		move.b	obSubtype(a0),d0
000193D0 3200                       		move.w	d0,d1
000193D2 E648                       		lsr.w	#3,d0
000193D4 0240 001E                  		andi.w	#$1E,d0
000193D8 45FA 0000                  		lea	off_164A6(pc),a2
000193DC D4F2 0000                  		adda.w	(a2,d0.w),a2
000193E0 315A 0038                  		move.w	(a2)+,$38(a0)
000193E4 315A 0030                  		move.w	(a2)+,$30(a0)
000193E8 214A 003C                  		move.l	a2,$3C(a0)
000193EC 0241 000F                  		andi.w	#$F,d1
000193F0 E549                       		lsl.w	#2,d1
000193F2 1141 0038                  		move.b	d1,$38(a0)
000193F6 117C 0004 003A             		move.b	#4,$3A(a0)
000193FC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019400 6700                       		beq.s	loc_16356
00019402 117C 0001 003B             		move.b	#1,$3B(a0)
00019408 4428 003A                  		neg.b	$3A(a0)
0001940C 7200                       		moveq	#0,d1
0001940E 1228 0038                  		move.b	$38(a0),d1
00019412 D228 003A                  		add.b	$3A(a0),d1
00019416 B228 0039                  		cmp.b	$39(a0),d1
0001941A 6500                       		bcs.s	loc_16352
0001941C 1001                       		move.b	d1,d0
0001941E 7200                       		moveq	#0,d1
00019420 4A00                       		tst.b	d0
00019422 6A00                       		bpl.s	loc_16352
00019424 1228 0039                  		move.b	$39(a0),d1
00019428 5901                       		subq.b	#4,d1
0001942A                            
0001942A                            loc_16352:
0001942A 1141 0038                  		move.b	d1,$38(a0)
0001942E                            
0001942E                            loc_16356:
0001942E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019434 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001943A 4A41                       		tst.w	d1
0001943C 6600                       		bne.s	loc_1636C
0001943E 117C 0001 001C             		move.b	#1,obAnim(a0)
00019444                            
00019444                            loc_1636C:
00019444 0C41 0008                  		cmpi.w	#8,d1
00019448 6600                       		bne.s	loc_16378
0001944A 117C 0000 001C             		move.b	#0,obAnim(a0)
00019450                            
00019450                            loc_16378:
00019450 6100 B522                  		bsr.w	LCon_ChangeDir
00019454 6000 0000                  		bra.w	loc_163D8
00019458                            ; ===========================================================================
00019458                            
00019458                            loc_16380:
00019458 1140 002F                  		move.b	d0,$2F(a0)
0001945C 0240 007F                  		andi.w	#$7F,d0
00019460 45F8 F7C1                  		lea	(v_obj63).w,a2
00019464 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001946A 6700                       		beq.s	loc_1639A
0001946C 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00019472                            ; ===========================================================================
00019472                            
00019472                            loc_1639A:
00019472 D040                       		add.w	d0,d0
00019474 0240 001E                  		andi.w	#$1E,d0
00019478 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001947C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019482 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019486 321A                       		move.w	(a2)+,d1
00019488 2248                       		movea.l	a0,a1
0001948A 6000                       		bra.s	SpinC_LoadPform
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            SpinC_Loop:
0001948C 4EB9 0000 FE12             		jsr	(FindFreeObj).l
00019492 6600                       		bne.s	loc_163D0
00019494                            
00019494                            SpinC_LoadPform:
00019494 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019498 335A 0008                  		move.w	(a2)+,obX(a1)
0001949C 335A 000C                  		move.w	(a2)+,obY(a1)
000194A0 301A                       		move.w	(a2)+,d0
000194A2 1340 0028                  		move.b	d0,obSubtype(a1)
000194A6                            
000194A6                            loc_163D0:
000194A6 51C9 FFE4                  		dbf	d1,SpinC_Loop
000194AA                            
000194AA 588F                       		addq.l	#4,sp
000194AC 4E75                       		rts	
000194AE                            ; ===========================================================================
000194AE                            
000194AE                            loc_163D8:	; Routine 2
000194AE 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000194B4 4EB9 0000 CA32             		jsr	(AnimateSprite).l
000194BA 4A28 001A                  		tst.b	obFrame(a0)
000194BE 6600                       		bne.s	loc_16404
000194C0 3F28 0008                  		move.w	obX(a0),-(sp)
000194C4 6100 0000                  		bsr.w	loc_16424
000194C8 323C 001B                  		move.w	#$1B,d1
000194CC 343C 0007                  		move.w	#7,d2
000194D0 3602                       		move.w	d2,d3
000194D2 5243                       		addq.w	#1,d3
000194D4 381F                       		move.w	(sp)+,d4
000194D6 6000 88BC                  		bra.w	SolidObject
000194DA                            ; ===========================================================================
000194DA                            
000194DA                            loc_16404:
000194DA 0828 0003 0022             		btst	#3,obStatus(a0)
000194E0 6700                       		beq.s	loc_16420
000194E2 43F8 D000                  		lea	(v_objspace).w,a1
000194E6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000194EC 08A8 0003 0022             		bclr	#3,obStatus(a0)
000194F2 4228 0025                  		clr.b	obSolid(a0)
000194F6                            
000194F6                            loc_16420:
000194F6 6000 0000                  		bra.w	loc_16424
000194FA                            
000194FA                            loc_16424:
000194FA 3028 0008                  		move.w	obX(a0),d0
000194FE B068 0034                  		cmp.w	$34(a0),d0
00019502 6600                       		bne.s	loc_16484
00019504 3028 000C                  		move.w	obY(a0),d0
00019508 B068 0036                  		cmp.w	$36(a0),d0
0001950C 6600                       		bne.s	loc_16484
0001950E 7200                       		moveq	#0,d1
00019510 1228 0038                  		move.b	$38(a0),d1
00019514 D228 003A                  		add.b	$3A(a0),d1
00019518 B228 0039                  		cmp.b	$39(a0),d1
0001951C 6500                       		bcs.s	loc_16456
0001951E 1001                       		move.b	d1,d0
00019520 7200                       		moveq	#0,d1
00019522 4A00                       		tst.b	d0
00019524 6A00                       		bpl.s	loc_16456
00019526 1228 0039                  		move.b	$39(a0),d1
0001952A 5901                       		subq.b	#4,d1
0001952C                            
0001952C                            loc_16456:
0001952C 1141 0038                  		move.b	d1,$38(a0)
00019530 2268 003C                  		movea.l	$3C(a0),a1
00019534 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001953A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019540 4A41                       		tst.w	d1
00019542 6600                       		bne.s	loc_16474
00019544 117C 0001 001C             		move.b	#1,obAnim(a0)
0001954A                            
0001954A                            loc_16474:
0001954A 0C41 0008                  		cmpi.w	#8,d1
0001954E 6600                       		bne.s	loc_16480
00019550 117C 0000 001C             		move.b	#0,obAnim(a0)
00019556                            
00019556                            loc_16480:
00019556 6100 B41C                  		bsr.w	LCon_ChangeDir
0001955A                            
0001955A                            loc_16484:
0001955A 4EF9 0000 F972             		jmp	(SpeedToPos).l
0001955A 4EF9 0000 F972             		jmp	(SpeedToPos).l
00019560                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019560                            ; ---------------------------------------------------------------------------
00019560                            ; Animation script - platform on conveyor belt (SBZ)
00019560                            ; ---------------------------------------------------------------------------
00019560 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019562 0000                       		dc.w @still-Ani_SpinConvey
00019564 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019571 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00019578 00                         		even
00019578 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001957C 00                         		even
0001957C 00                         		even
0001957C                            
0001957C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019582 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019588 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001959C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000195B0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000195C4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000195D8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000195EC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019600                            ; ===========================================================================
00019600                            
00019600                            		include	"_incObj\70 Girder Block.asm"
00019600                            ; ---------------------------------------------------------------------------
00019600                            ; Object 70 - large girder block (SBZ)
00019600                            ; ---------------------------------------------------------------------------
00019600                            
00019600                            Girder:
00019600 7000                       		moveq	#0,d0
00019602 1028 0024                  		move.b	obRoutine(a0),d0
00019606 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
0001960A 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001960E                            ; ===========================================================================
0001960E 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019610 0000                       		dc.w Gird_Action-Gird_Index
00019612                            
00019612 =00000016                  gird_height:	equ $16
00019612 =00000032                  gird_origX:	equ $32		; original x-axis position
00019612 =00000030                  gird_origY:	equ $30		; original y-axis position
00019612 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019612 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019612 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019612                            ; ===========================================================================
00019612                            
00019612                            Gird_Main:	; Routine 0
00019612 5428 0024                  		addq.b	#2,obRoutine(a0)
00019616 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001961E 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019624 0028 0004 0001             		ori.b	#4,obRender(a0)
0001962A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019630 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019636 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001963C 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019642 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019648 6100 0000                  		bsr.w	Gird_ChgMove
0001964C                            
0001964C                            Gird_Action:	; Routine 2
0001964C 3F28 0008                  		move.w	obX(a0),-(sp)
00019650 4A68 003A                  		tst.w	gird_delay(a0)
00019654 6700                       		beq.s	@beginmove
00019656 5368 003A                  		subq.w	#1,gird_delay(a0)
0001965A 6600                       		bne.s	@solid
0001965C                            
0001965C                            	@beginmove:
0001965C 4EB9 0000 F972             		jsr	(SpeedToPos).l
00019662 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019666 6600                       		bne.s	@solid		; if time remains, branch
00019668 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001966C                            
0001966C                            	@solid:
0001966C 381F                       		move.w	(sp)+,d4
0001966E 4A28 0001                  		tst.b	obRender(a0)
00019672 6A00                       		bpl.s	@chkdel
00019674 7200                       		moveq	#0,d1
00019676 1228 0014                  		move.b	obActWid(a0),d1
0001967A 0641 000B                  		addi.w	#$B,d1
0001967E 7400                       		moveq	#0,d2
00019680 1428 0016                  		move.b	gird_height(a0),d2
00019684 3602                       		move.w	d2,d3
00019686 5243                       		addq.w	#1,d3
00019688 6100 870A                  		bsr.w	SolidObject
0001968C                            
0001968C                            	@chkdel:
000196A8 4EF9 0000 F986             		jmp	(DisplaySprite).l
000196AE                            
000196AE                            	@delete:
000196AE 4EF9 0000 F9C6             		jmp	(DeleteObject).l
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            Gird_ChgMove:
000196B4 1028 0038                  		move.b	gird_set(a0),d0
000196B8 0240 0018                  		andi.w	#$18,d0
000196BC 43F9 0000 0000             		lea	(@settings).l,a1
000196C2 43F1 0000                  		lea	(a1,d0.w),a1
000196C6 3159 0010                  		move.w	(a1)+,obVelX(a0)
000196CA 3159 0012                  		move.w	(a1)+,obVelY(a0)
000196CE 3159 0034                  		move.w	(a1)+,gird_time(a0)
000196D2 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000196D6 317C 0007 003A             		move.w	#7,gird_delay(a0)
000196DC 4E75                       		rts	
000196DE                            ; ===========================================================================
000196DE                            @settings:	;   x-speed, y-speed, duration
000196DE 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000196E6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000196EE FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000196F6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000196F6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000196FE                            Map_Gird:	include	"_maps\Girder Block.asm"
000196FE                            ; ---------------------------------------------------------------------------
000196FE                            ; Sprite mappings - large girder block (SBZ)
000196FE                            ; ---------------------------------------------------------------------------
000196FE                            Map_Gird_internal:
000196FE 0000                       		dc.w @girder-Map_Gird_internal
00019700 0C                         @girder:	dc.b $C
00019701 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019706 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001970B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019710 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019715 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001971A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001971F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019724 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019729 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001972E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019733 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019738 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001973E 00                         		even
0001973E 00                         		even
0001973E                            		include	"_incObj\72 Teleporter.asm"
0001973E                            ; ---------------------------------------------------------------------------
0001973E                            ; Object 72 - teleporter (SBZ)
0001973E                            ; ---------------------------------------------------------------------------
0001973E                            
0001973E                            Teleport:
0001973E 7000                       		moveq	#0,d0
00019740 1028 0024                  		move.b	obRoutine(a0),d0
00019744 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019748 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019768 4E75                       		rts	
0001976A                            
0001976A                            	@delete:
0001976A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00019770                            ; ===========================================================================
00019770 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019772 0000                       		dc.w loc_166C8-Tele_Index
00019774 0000                       		dc.w loc_1675E-Tele_Index
00019776 0000                       		dc.w loc_16798-Tele_Index
00019778                            ; ===========================================================================
00019778                            
00019778                            Tele_Main:	; Routine 0
00019778 5428 0024                  		addq.b	#2,obRoutine(a0)
0001977C 1028 0028                  		move.b	obSubtype(a0),d0
00019780 D040                       		add.w	d0,d0
00019782 0240 001E                  		andi.w	#$1E,d0
00019786 45FA 0000                  		lea	Tele_Data(pc),a2
0001978A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001978E 315A 003A                  		move.w	(a2)+,$3A(a0)
00019792 214A 003C                  		move.l	a2,$3C(a0)
00019796 315A 0036                  		move.w	(a2)+,$36(a0)
0001979A 315A 0038                  		move.w	(a2)+,$38(a0)
0001979E                            
0001979E                            loc_166C8:	; Routine 2
0001979E 43F8 D000                  		lea	(v_player).w,a1
000197A2 3029 0008                  		move.w	obX(a1),d0
000197A6 9068 0008                  		sub.w	obX(a0),d0
000197AA 0828 0000 0022             		btst	#0,obStatus(a0)
000197B0 6700                       		beq.s	loc_166E0
000197B2 0640 000F                  		addi.w	#$F,d0
000197B6                            
000197B6                            loc_166E0:
000197B6 0C40 0010                  		cmpi.w	#$10,d0
000197BA 6400                       		bcc.s	locret_1675C
000197BC 3229 000C                  		move.w	obY(a1),d1
000197C0 9268 000C                  		sub.w	obY(a0),d1
000197C4 0641 0020                  		addi.w	#$20,d1
000197C8 0C41 0040                  		cmpi.w	#$40,d1
000197CC 6400                       		bcc.s	locret_1675C
000197CE 4A38 F7C8                  		tst.b	(f_lockmulti).w
000197D2 6600                       		bne.s	locret_1675C
000197D4 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000197DA 6600                       		bne.s	loc_1670E
000197DC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000197E2 6500                       		bcs.s	locret_1675C
000197E4                            
000197E4                            loc_1670E:
000197E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000197E8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000197EE 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000197F4 337C 0800 0020             		move.w	#$800,obInertia(a1)
000197FA 337C 0000 0010             		move.w	#0,obVelX(a1)
00019800 337C 0000 0012             		move.w	#0,obVelY(a1)
00019806 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001980C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019812 08E9 0001 0022             		bset	#1,obStatus(a1)
00019818 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001981E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019824 4228 0032                  		clr.b	$32(a0)
00019832                            
00019832                            locret_1675C:
00019832 4E75                       		rts	
00019834                            ; ===========================================================================
00019834                            
00019834                            loc_1675E:	; Routine 4
00019834 43F8 D000                  		lea	(v_player).w,a1
00019838 1028 0032                  		move.b	$32(a0),d0
0001983C 5428 0032                  		addq.b	#2,$32(a0)
00019840 4EB9 0000 3A36             		jsr	(CalcSine).l
00019846 EA40                       		asr.w	#5,d0
00019848 3428 000C                  		move.w	obY(a0),d2
0001984C 9440                       		sub.w	d0,d2
0001984E 3342 000C                  		move.w	d2,obY(a1)
00019852 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019858 6600                       		bne.s	locret_16796
0001985A 6100 0000                  		bsr.w	sub_1681C
0001985E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001986C                            
0001986C                            locret_16796:
0001986C 4E75                       		rts	
0001986E                            ; ===========================================================================
0001986E                            
0001986E                            loc_16798:	; Routine 6
0001986E 588F                       		addq.l	#4,sp
00019870 43F8 D000                  		lea	(v_player).w,a1
00019874 5328 002E                  		subq.b	#1,$2E(a0)
00019878 6A00                       		bpl.s	loc_167DA
0001987A 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019880 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019886 7200                       		moveq	#0,d1
00019888 1228 003A                  		move.b	$3A(a0),d1
0001988C 5801                       		addq.b	#4,d1
0001988E B228 003B                  		cmp.b	$3B(a0),d1
00019892 6500                       		bcs.s	loc_167C2
00019894 7200                       		moveq	#0,d1
00019896 6000                       		bra.s	loc_16800
00019898                            ; ===========================================================================
00019898                            
00019898                            loc_167C2:
00019898 1141 003A                  		move.b	d1,$3A(a0)
0001989C 2468 003C                  		movea.l	$3C(a0),a2
000198A0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000198A6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000198AC 6000 0000                  		bra.w	sub_1681C
000198B0                            ; ===========================================================================
000198B0                            
000198B0                            loc_167DA:
000198B0 2429 0008                  		move.l	obX(a1),d2
000198B4 2629 000C                  		move.l	obY(a1),d3
000198B8 3029 0010                  		move.w	obVelX(a1),d0
000198BC 48C0                       		ext.l	d0
000198BE E180                       		asl.l	#8,d0
000198C0 D480                       		add.l	d0,d2
000198C2 3029 0012                  		move.w	obVelY(a1),d0
000198C6 48C0                       		ext.l	d0
000198C8 E180                       		asl.l	#8,d0
000198CA D680                       		add.l	d0,d3
000198CC 2342 0008                  		move.l	d2,obX(a1)
000198D0 2343 000C                  		move.l	d3,obY(a1)
000198D4 4E75                       		rts	
000198D6                            ; ===========================================================================
000198D6                            
000198D6                            loc_16800:
000198D6 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000198DC 4228 0024                  		clr.b	obRoutine(a0)
000198E0 4238 F7C8                  		clr.b	(f_lockmulti).w
000198E4 337C 0000 0010             		move.w	#0,obVelX(a1)
000198EA 337C 0200 0012             		move.w	#$200,obVelY(a1)
000198F0 4E75                       		rts	
000198F2                            
000198F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F2                            
000198F2                            
000198F2                            sub_1681C:
000198F2 7000                       		moveq	#0,d0
000198F4 343C 1000                  		move.w	#$1000,d2
000198F8 3028 0036                  		move.w	$36(a0),d0
000198FC 9069 0008                  		sub.w	obX(a1),d0
00019900 6C00                       		bge.s	loc_16830
00019902 4440                       		neg.w	d0
00019904 4442                       		neg.w	d2
00019906                            
00019906                            loc_16830:
00019906 7200                       		moveq	#0,d1
00019908 363C 1000                  		move.w	#$1000,d3
0001990C 3228 0038                  		move.w	$38(a0),d1
00019910 9269 000C                  		sub.w	obY(a1),d1
00019914 6C00                       		bge.s	loc_16844
00019916 4441                       		neg.w	d1
00019918 4443                       		neg.w	d3
0001991A                            
0001991A                            loc_16844:
0001991A B240                       		cmp.w	d0,d1
0001991C 6500                       		bcs.s	loc_1687A
0001991E 7200                       		moveq	#0,d1
00019920 3228 0038                  		move.w	$38(a0),d1
00019924 9269 000C                  		sub.w	obY(a1),d1
00019928 4841                       		swap	d1
0001992A 83C3                       		divs.w	d3,d1
0001992C 7000                       		moveq	#0,d0
0001992E 3028 0036                  		move.w	$36(a0),d0
00019932 9069 0008                  		sub.w	obX(a1),d0
00019936 6700                       		beq.s	loc_16866
00019938 4840                       		swap	d0
0001993A 81C1                       		divs.w	d1,d0
0001993C                            
0001993C                            loc_16866:
0001993C 3340 0010                  		move.w	d0,obVelX(a1)
00019940 3343 0012                  		move.w	d3,obVelY(a1)
00019944 4A41                       		tst.w	d1
00019946 6A00                       		bpl.s	loc_16874
00019948 4441                       		neg.w	d1
0001994A                            
0001994A                            loc_16874:
0001994A 3141 002E                  		move.w	d1,$2E(a0)
0001994E 4E75                       		rts	
00019950                            ; ===========================================================================
00019950                            
00019950                            loc_1687A:
00019950 7000                       		moveq	#0,d0
00019952 3028 0036                  		move.w	$36(a0),d0
00019956 9069 0008                  		sub.w	obX(a1),d0
0001995A 4840                       		swap	d0
0001995C 81C2                       		divs.w	d2,d0
0001995E 7200                       		moveq	#0,d1
00019960 3228 0038                  		move.w	$38(a0),d1
00019964 9269 000C                  		sub.w	obY(a1),d1
00019968 6700                       		beq.s	loc_16898
0001996A 4841                       		swap	d1
0001996C 83C0                       		divs.w	d0,d1
0001996E                            
0001996E                            loc_16898:
0001996E 3341 0012                  		move.w	d1,obVelY(a1)
00019972 3342 0010                  		move.w	d2,obVelX(a1)
00019976 4A40                       		tst.w	d0
00019978 6A00                       		bpl.s	loc_168A6
0001997A 4440                       		neg.w	d0
0001997C                            
0001997C                            loc_168A6:
0001997C 3140 002E                  		move.w	d0,$2E(a0)
00019980 4E75                       		rts	
00019982                            ; End of function sub_1681C
00019982                            
00019982                            ; ===========================================================================
00019982 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019988 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001998E 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019992 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019998 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001999E 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000199A4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000199AA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000199B0 0884 0298 0894             		dc.w $884, $298, $894
000199B6 0270 0894 0190             		dc.w $270, $894, $190
000199BC 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000199C2 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000199C8 1184 0498 1158             		dc.w $1184, $498, $1158
000199CE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000199D4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000199DA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000199E0 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000199E6 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000199EC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000199F2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000199F8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000199FE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019A04 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A04 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A0A                            
00019A0A                            		include	"_incObj\78 Caterkiller.asm"
00019A0A                            ; ---------------------------------------------------------------------------
00019A0A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019A0A                            ; ---------------------------------------------------------------------------
00019A0A                            
00019A0A                            Caterkiller:
00019A0A 7000                       		moveq	#0,d0
00019A0C 1028 0024                  		move.b	obRoutine(a0),d0
00019A10 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019A14 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019A18                            ; ===========================================================================
00019A18 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019A1A 0000                       		dc.w Cat_Head-Cat_Index
00019A1C 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A1E 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019A20 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A22 0000                       		dc.w Cat_Delete-Cat_Index
00019A24 0000                       		dc.w loc_16CC0-Cat_Index
00019A26                            
00019A26 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019A26                            ; ===========================================================================
00019A26                            
00019A26                            locret_16950:
00019A26 4E75                       		rts	
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            Cat_Main:	; Routine 0
00019A28 117C 0007 0016             		move.b	#7,obHeight(a0)
00019A2E 117C 0008 0017             		move.b	#8,obWidth(a0)
00019A34 4EB9 0000 F93A             		jsr	(ObjectFall).l
00019A3A 4EB9 0001 7EF0             		jsr	(ObjFloorDist).l
00019A40 4A41                       		tst.w	d1
00019A42 6AE2                       		bpl.s	locret_16950
00019A44 D368 000C                  		add.w	d1,obY(a0)
00019A48 4268 0012                  		clr.w	obVelY(a0)
00019A4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019A50 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019A58 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019A5E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019A64 6700                       		beq.s	@isscrapbrain
00019A66 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019A6C                            
00019A6C                            	@isscrapbrain:
00019A6C 0228 0003 0001             		andi.b	#3,obRender(a0)
00019A72 0028 0004 0001             		ori.b	#4,obRender(a0)
00019A78 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019A7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019A84 117C 0008 0014             		move.b	#8,obActWid(a0)
00019A8A 117C 000B 0020             		move.b	#$B,obColType(a0)
00019A90 3428 0008                  		move.w	obX(a0),d2
00019A94 7A0C                       		moveq	#$C,d5
00019A96 0828 0000 0022             		btst	#0,obStatus(a0)
00019A9C 6700                       		beq.s	@noflip
00019A9E 4445                       		neg.w	d5
00019AA0                            
00019AA0                            	@noflip:
00019AA0 1C3C 0004                  		move.b	#4,d6
00019AA4 7600                       		moveq	#0,d3
00019AA6 7804                       		moveq	#4,d4
00019AA8 2448                       		movea.l	a0,a2
00019AAA 7202                       		moveq	#2,d1
00019AAC                            
00019AAC                            Cat_Loop:
00019AAC 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
00019AB2 6600 0000                  			bne.w	Cat_ChkGone
00019AB6 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019ABA 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019ABE 5406                       		addq.b	#2,d6		; alternate between the two
00019AC0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019AC6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019ACC 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019AD2 137C 0008 0014             		move.b	#8,obActWid(a1)
00019AD8 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019ADE D445                       		add.w	d5,d2
00019AE0 3342 0008                  		move.w	d2,obX(a1)
00019AE4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019AEA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019AF0 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019AF6 137C 0008 001A             		move.b	#8,obFrame(a1)
00019AFC 234A 003C                  		move.l	a2,cat_parent(a1)
00019B00 1344 003C                  		move.b	d4,cat_parent(a1)
00019B04 5804                       		addq.b	#4,d4
00019B06 2449                       		movea.l	a1,a2
00019B08                            
00019B08                            	@fail:
00019B08 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019B0C                            
00019B0C 117C 0007 002A             		move.b	#7,$2A(a0)
00019B12 4228 003C                  		clr.b	cat_parent(a0)
00019B16                            
00019B16                            Cat_Head:	; Routine 2
00019B16 4A28 0022                  		tst.b	obStatus(a0)
00019B1A 6B00 0000                  		bmi.w	loc_16C96
00019B1E 7000                       		moveq	#0,d0
00019B20 1028 0025                  		move.b	ob2ndRout(a0),d0
00019B24 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019B28 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019B2C 1228 002B                  		move.b	$2B(a0),d1
00019B30 6A00                       		bpl.s	@display
00019B32 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B38 1028 0026                  		move.b	obAngle(a0),d0
00019B3C 0240 007F                  		andi.w	#$7F,d0
00019B40 5828 0026                  		addq.b	#4,obAngle(a0)
00019B44 1031 0000                  		move.b	(a1,d0.w),d0
00019B48 6A00                       		bpl.s	@animate
00019B4A 08A8 0007 002B             		bclr	#7,$2B(a0)
00019B50 6000                       		bra.s	@display
00019B52                            
00019B52                            	@animate:
00019B52 0201 0010                  		andi.b	#$10,d1
00019B56 D001                       		add.b	d1,d0
00019B58 1140 001A                  		move.b	d0,obFrame(a0)
00019B5C                            
00019B5C                            	@display:
00019B7A 4EF9 0000 F986             		jmp	(DisplaySprite).l
00019B80                            
00019B80                            	Cat_ChkGone:
00019B80 45F8 FC00                  		lea	(v_objstate).w,a2
00019B84 7000                       		moveq	#0,d0
00019B86 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B8A 6700                       		beq.s	@delete
00019B8C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019B92                            
00019B92                            	@delete:
00019B92 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019B98 4E75                       		rts	
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            Cat_Delete:	; Routine $A
00019B9A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
00019BA0                            ; ===========================================================================
00019BA0 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019BA2 0000                       		dc.w loc_16B02-Cat_Index2
00019BA4                            ; ===========================================================================
00019BA4                            
00019BA4                            @wait:
00019BA4 5328 002A                  		subq.b	#1,$2A(a0)
00019BA8 6B00                       		bmi.s	@move
00019BAA 4E75                       		rts	
00019BAC                            ; ===========================================================================
00019BAC                            
00019BAC                            @move:
00019BAC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019BB0 117C 0010 002A             		move.b	#$10,$2A(a0)
00019BB6 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019BBC 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019BC2 0868 0004 002B             		bchg	#4,$2B(a0)
00019BC8 6600                       		bne.s	loc_16AFC
00019BCA 4268 0010                  		clr.w	obVelX(a0)
00019BCE 4468 001C                  		neg.w	obAnim(a0)
00019BD2                            
00019BD2                            loc_16AFC:
00019BD2 08E8 0007 002B             		bset	#7,$2B(a0)
00019BD8                            
00019BD8                            loc_16B02:
00019BD8 5328 002A                  		subq.b	#1,$2A(a0)
00019BDC 6B00                       		bmi.s	@loc_16B5E
00019BDE 4A68 0010                  			tst.w	obVelX(a0)
00019BE2 6700                       			beq.s	@notmoving
00019BE4 2428 0008                  			move.l	obX(a0),d2
00019BE8 2602                       			move.l	d2,d3
00019BEA 3028 0010                  		move.w	obVelX(a0),d0
00019BEE 0828 0000 0022             		btst	#0,obStatus(a0)
00019BF4 6700                       		beq.s	@noflip
00019BF6 4440                       		neg.w	d0
00019BF8                            
00019BF8                            	@noflip:
00019BF8 48C0                       		ext.l	d0
00019BFA E180                       		asl.l	#8,d0
00019BFC D480                       		add.l	d0,d2
00019BFE 2142 0008                  		move.l	d2,obX(a0)
00019C02 4843                       			swap	d3
00019C04 B668 0008                  			cmp.w	obX(a0),d3
00019C08 6700                       			beq.s	@notmoving
00019C0A 4EB9 0001 7EF0             			jsr	(ObjFloorDist).l
00019C10 0C41 FFF8                  			cmpi.w	#-8,d1
00019C14 6D00                       			blt.s	@loc_16B70
00019C16 0C41 000C                  			cmpi.w	#$C,d1
00019C1A 6C00                       			bge.s	@loc_16B70
00019C1C D368 000C                  			add.w	d1,obY(a0)
00019C20 7000                       		moveq	#0,d0
00019C22 1028 003C                  		move.b	cat_parent(a0),d0
00019C26 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C2A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C30 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C34                            
00019C34                            	@notmoving:
00019C34 4E75                       		rts	
00019C36                            ; ===========================================================================
00019C36                            
00019C36                            @loc_16B5E:
00019C36 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019C3A 117C 0007 002A             		move.b	#7,$2A(a0)
00019C40 4268 0010                  			clr.w	obVelX(a0)
00019C44 4268 001C                  			clr.w	obAnim(a0)
00019C48 4E75                       		rts	
00019C4A                            ; ===========================================================================
00019C4A                            
00019C4A                            @loc_16B70:
00019C4A 7000                       			moveq	#0,d0
00019C4C 1028 003C                  			move.b	cat_parent(a0),d0
00019C50 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019C56 4468 000A                  			neg.w	obX+2(a0)
00019C5A 6700                       			beq.s	@loc_1730A
00019C5C 0828 0000 0022             			btst	#0,obStatus(a0)
00019C62 6700                       			beq.s	@loc_1730A
00019C64 5368 0008                  			subq.w	#1,obX(a0)
00019C68 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C6C 7000                       			moveq	#0,d0
00019C6E 1028 003C                  			move.b	cat_parent(a0),d0
00019C72 4230 002C                  			clr.b	$2C(a0,d0)
00019C76                            	@loc_1730A:
00019C76 0868 0000 0022             			bchg	#0,obStatus(a0)
00019C7C 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019C82 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C86 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C8C 4E75                       		rts	
00019C8E                            ; ===========================================================================
00019C8E                            
00019C8E                            Cat_BodySeg2:	; Routine 6
00019C8E 2268 003C                  		movea.l	cat_parent(a0),a1
00019C92 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019C98 6A00                       		bpl.s	Cat_BodySeg1
00019C9A 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019CA0 1028 0026                  		move.b	obAngle(a0),d0
00019CA4 0240 007F                  		andi.w	#$7F,d0
00019CA8 5828 0026                  		addq.b	#4,obAngle(a0)
00019CAC 4A31 0004                  		tst.b	4(a1,d0.w)
00019CB0 6A00                       		bpl.s	Cat_AniBody
00019CB2 5828 0026                  		addq.b	#4,obAngle(a0)
00019CB6                            
00019CB6                            Cat_AniBody:
00019CB6 1031 0000                  		move.b	(a1,d0.w),d0
00019CBA 5000                       		addq.b	#8,d0
00019CBC 1140 001A                  		move.b	d0,obFrame(a0)
00019CC0                            
00019CC0                            Cat_BodySeg1:	; Routine 4, 8
00019CC0 2268 003C                  		movea.l	cat_parent(a0),a1
00019CC4 4A28 0022                  		tst.b	obStatus(a0)
00019CC8 6B00 0000                  		bmi.w	loc_16C90
00019CCC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019CD2 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019CD8 6700 0000                  		beq.w	loc_16C64
00019CDC 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019CE2 3029 0010                  		move.w	obVelX(a1),d0
00019CE6 D068 001C                  			add.w	obAnim(a0),d0
00019CEA 3140 0010                  		move.w	d0,obVelX(a0)
00019CEE 2428 0008                  		move.l	obX(a0),d2
00019CF2 2602                       		move.l	d2,d3
00019CF4 3028 0010                  		move.w	obVelX(a0),d0
00019CF8 0828 0000 0022             		btst	#0,obStatus(a0)
00019CFE 6700                       		beq.s	loc_16C0C
00019D00 4440                       		neg.w	d0
00019D02                            
00019D02                            loc_16C0C:
00019D02 48C0                       		ext.l	d0
00019D04 E180                       		asl.l	#8,d0
00019D06 D480                       		add.l	d0,d2
00019D08 2142 0008                  		move.l	d2,obX(a0)
00019D0C 4843                       		swap	d3
00019D0E B668 0008                  		cmp.w	obX(a0),d3
00019D12 6700                       		beq.s	loc_16C64
00019D14 7000                       		moveq	#0,d0
00019D16 1028 003C                  		move.b	cat_parent(a0),d0
00019D1A 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019D1E 0C01 0080                  		cmpi.b	#$80,d1
00019D22 6600                       		bne.s	loc_16C50
00019D24 1181 002C                  			move.b	d1,$2C(a0,d0)
00019D28 4468 000A                  			neg.w	obX+2(a0)
00019D2C 6700                       			beq.s	locj_173E4
00019D2E 0828 0000 0022             			btst	#0,obStatus(a0)
00019D34 6700                       			beq.s	locj_173E4
00019D36 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019D3C 6600                       			bne.s	locj_173E4
00019D3E 5368 0008                  			subq.w	#1,obX(a0)
00019D42 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D46 7000                       			moveq	#0,d0
00019D48 1028 003C                  			move.b	cat_parent(a0),d0
00019D4C 4230 002C                  			clr.b	$2C(a0,d0)
00019D50                            	locj_173E4:
00019D50 0868 0000 0022             		bchg	#0,obStatus(a0)
00019D56 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019D5C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D60 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D66 6000                       		bra.s	loc_16C64
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_16C50:
00019D68 4881                       		ext.w	d1
00019D6A D368 000C                  		add.w	d1,obY(a0)
00019D6E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D72 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D78 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019D7C                            
00019D7C                            loc_16C64:
00019D7C 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019D82 6700                       		beq.s	loc_16C90
00019D84 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019D88 6700                       		beq.s	loc_16C7C
00019D8A 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019D90 6600                       		bne.s	loc_16C82
00019D92                            
00019D92                            loc_16C7C:
00019D92 4229 0020                  		clr.b    $20(a1)
00019D96 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019D9C                            
00019D9C                            loc_16C82:
00019D9C 4EF9 0000 F986             		jmp	(DisplaySprite).l
00019DA2                            
00019DA2                            ; ===========================================================================
00019DA2 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            loc_16C90:
00019DAA 08E9 0007 0022             		bset	#7,obStatus(a1)
00019DB0                            
00019DB0                            loc_16C96:
00019DB0 7000                       		moveq	#0,d0
00019DB2 1028 0024                  		move.b	obRoutine(a0),d0
00019DB6 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019DBA 0828 0000 0022             		btst	#0,obStatus(a0)
00019DC0 6700                       		beq.s	loc_16CAA
00019DC2 4440                       		neg.w	d0
00019DC4                            
00019DC4                            loc_16CAA:
00019DC4 3140 0010                  		move.w	d0,obVelX(a0)
00019DC8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DCE 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019DD4 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019DDA                            
00019DDA                            loc_16CC0:	; Routine $C
00019DDA 4EB9 0000 F93A             		jsr	(ObjectFall).l
00019DE0 4A68 0012                  		tst.w	obVelY(a0)
00019DE4 6B00                       		bmi.s	loc_16CE0
00019DE6 4EB9 0001 7EF0             		jsr	(ObjFloorDist).l
00019DEC 4A41                       		tst.w	d1
00019DEE 6A00                       		bpl.s	loc_16CE0
00019DF0 D368 000C                  		add.w	d1,obY(a0)
00019DF4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DFA                            
00019DFA                            loc_16CE0:
00019DFA 4A28 0001                  		tst.b	obRender(a0)
00019DFE 6A00 FD80                  		bpl.w	Cat_ChkGone
00019E02 4EF9 0000 F986             		jmp	(DisplaySprite).l
00019E02 4EF9 0000 F986             		jmp	(DisplaySprite).l
00019E08                            		include	"_anim\Caterkiller.asm"
00019E08                            ; ---------------------------------------------------------------------------
00019E08                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019E08                            ; ---------------------------------------------------------------------------
00019E08 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019E18 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019E28 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019E38 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019E48 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019E58 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019E68 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019E78 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019E88                            		even
00019E88                            		even
00019E88                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019E88                            ; ---------------------------------------------------------------------------
00019E88                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019E88                            ; ---------------------------------------------------------------------------
00019E88                            Map_Cat_internal:
00019E88 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019E8A 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019E8C 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019E8E 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019E90 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019E92 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019E94 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019E96 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019E98 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019E9A 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019E9C 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019E9E 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019EA0 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019EA2 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019EA4 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019EA6 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019EA8 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019EAA 0000                       		dc.w byte_16E04-Map_Cat_internal
00019EAC 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019EAE 0000                       		dc.w byte_16E10-Map_Cat_internal
00019EB0 0000                       		dc.w byte_16E16-Map_Cat_internal
00019EB2 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019EB4 0000                       		dc.w byte_16E22-Map_Cat_internal
00019EB6 0000                       		dc.w byte_16E28-Map_Cat_internal
00019EB8 01                         byte_16D9E:	dc.b 1
00019EB9 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019EBE 01                         byte_16DA4:	dc.b 1
00019EBF F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019EC4 01                         byte_16DAA:	dc.b 1
00019EC5 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019ECA 01                         byte_16DB0:	dc.b 1
00019ECB EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019ED0 01                         byte_16DB6:	dc.b 1
00019ED1 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019ED6 01                         byte_16DBC:	dc.b 1
00019ED7 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019EDC 01                         byte_16DC2:	dc.b 1
00019EDD EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019EE2 01                         byte_16DC8:	dc.b 1
00019EE3 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019EE8 01                         byte_16DCE:	dc.b 1
00019EE9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019EEE 01                         byte_16DD4:	dc.b 1
00019EEF F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019EF4 01                         byte_16DDA:	dc.b 1
00019EF5 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019EFA 01                         byte_16DE0:	dc.b 1
00019EFB F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019F00 01                         byte_16DE6:	dc.b 1
00019F01 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019F06 01                         byte_16DEC:	dc.b 1
00019F07 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019F0C 01                         byte_16DF2:	dc.b 1
00019F0D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019F12 01                         byte_16DF8:	dc.b 1
00019F13 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019F18 01                         byte_16DFE:	dc.b 1
00019F19 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019F1E 01                         byte_16E04:	dc.b 1
00019F1F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019F24 01                         byte_16E0A:	dc.b 1
00019F25 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019F2A 01                         byte_16E10:	dc.b 1
00019F2B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019F30 01                         byte_16E16:	dc.b 1
00019F31 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019F36 01                         byte_16E1C:	dc.b 1
00019F37 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019F3C 01                         byte_16E22:	dc.b 1
00019F3D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019F42 01                         byte_16E28:	dc.b 1
00019F43 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019F48                            		even
00019F48                            		even
00019F48                            
00019F48                            		include	"_incObj\79 Lamppost.asm"
00019F48                            ; ---------------------------------------------------------------------------
00019F48                            ; Object 79 - lamppost
00019F48                            ; ---------------------------------------------------------------------------
00019F48                            
00019F48                            Lamppost:
00019F48 7000                       		moveq	#0,d0
00019F4A 1028 0024                  		move.b	obRoutine(a0),d0
00019F4E 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019F52 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019F56 4EF9 0001 18FC             		jmp	(RememberState).l
00019F5C                            ; ===========================================================================
00019F5C 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019F5E 0000                       		dc.w Lamp_Blue-Lamp_Index
00019F60 0000                       		dc.w Lamp_Finish-Lamp_Index
00019F62 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019F64                            
00019F64 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019F64 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019F64 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019F64                            ; ===========================================================================
00019F64                            
00019F64                            Lamp_Main:	; Routine 0
00019F64 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F68 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019F70 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019F76 117C 0004 0001             		move.b	#4,obRender(a0)
00019F7C 117C 0008 0014             		move.b	#8,obActWid(a0)
00019F82 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019F88 45F8 FC00                  		lea	(v_objstate).w,a2
00019F8C 7000                       		moveq	#0,d0
00019F8E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F92 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019F98 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019F9E 6600                       		bne.s	@red
00019FA0 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FA4 0201 007F                  		andi.b	#$7F,d1
00019FA8 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019FAC 0202 007F                  		andi.b	#$7F,d2
00019FB0 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FB2 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019FB4                            
00019FB4                            @red:
00019FB4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FBA 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019FC0 117C 0003 001A             		move.b	#3,obFrame(a0)
00019FC6 4E75                       		rts	
00019FC8                            
00019FC8                            ; ===========================================================================
00019FC8                            
00019FC8                            Lamp_Blue:	; Routine 2
00019FC8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019FCC 6600 0000                  		bne.w	@donothing	; if yes, branch
00019FD0 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019FD4 6B00 0000                  		bmi.w	@donothing
00019FD8 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FDC 0201 007F                  		andi.b	#$7F,d1
00019FE0 1428 0028                  		move.b	obSubtype(a0),d2
00019FE4 0202 007F                  		andi.b	#$7F,d2
00019FE8 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FEA 6500                       		bcs.s	@chkhit		; if yes, branch
00019FEC 45F8 FC00                  		lea	(v_objstate).w,a2
00019FF0 7000                       		moveq	#0,d0
00019FF2 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FF6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FFC 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A002 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A008 6000 0000                  		bra.w	@donothing
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            @chkhit:
0001A00C 3038 D008                  		move.w	(v_player+obX).w,d0
0001A010 9068 0008                  		sub.w	obX(a0),d0
0001A014 5040                       		addq.w	#8,d0
0001A016 0C40 0010                  		cmpi.w	#$10,d0
0001A01A 6400 0000                  		bcc.w	@donothing
0001A01E 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A022 9068 000C                  		sub.w	obY(a0),d0
0001A026 0640 0040                  		addi.w	#$40,d0
0001A02A 0C40 0068                  		cmpi.w	#$68,d0
0001A02E 6400                       		bcc.s	@donothing
0001A030                            
0001A03A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A03E 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001A044 6600                       		bne.s	@fail
0001A046 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A04A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A050 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A056 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A05C 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A062 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A06A 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A070 137C 0004 0001             		move.b	#4,obRender(a1)
0001A076 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A07C 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A082 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A088 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A08E                            
0001A08E                            	@fail:
0001A08E 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A094 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A098 45F8 FC00                  		lea	(v_objstate).w,a2
0001A09C 7000                       		moveq	#0,d0
0001A09E 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0A2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0A8                            
0001A0A8                            	@donothing:
0001A0A8 4E75                       		rts	
0001A0AA                            ; ===========================================================================
0001A0AA                            
0001A0AA                            Lamp_Finish:	; Routine 4	
0001A0AA 4E75                       		rts	
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            Lamp_Twirl:	; Routine 6
0001A0AC 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A0B0 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A0B2 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0B8                            
0001A0B8                            	@continue:
0001A0B8 1028 0026                  		move.b	obAngle(a0),d0
0001A0BC 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A0C2 0400 0040                  		subi.b	#$40,d0
0001A0C6 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A0CC C3FC 0C00                  		muls.w	#$C00,d1
0001A0D0 4841                       		swap	d1
0001A0D2 D268 0030                  		add.w	lamp_origX(a0),d1
0001A0D6 3141 0008                  		move.w	d1,obX(a0)
0001A0DA C1FC 0C00                  		muls.w	#$C00,d0
0001A0DE 4840                       		swap	d0
0001A0E0 D068 0032                  		add.w	lamp_origY(a0),d0
0001A0E4 3140 000C                  		move.w	d0,obY(a0)
0001A0E8 4E75                       		rts	
0001A0EA                            ; ===========================================================================
0001A0EA                            ; ---------------------------------------------------------------------------
0001A0EA                            ; Subroutine to	store information when you hit a lamppost
0001A0EA                            ; ---------------------------------------------------------------------------
0001A0EA                            
0001A0EA                            Lamp_StoreInfo:
0001A0EA 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A0F0 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A0F6 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A0FC 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A102 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A108 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A10E 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A114 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A11A 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A120 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A126 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A12C 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A132 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A138 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A13E 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A144 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A14A 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A150 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A156 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A15C 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A162 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A168 4E75                       		rts	
0001A16A                            
0001A16A                            ; ---------------------------------------------------------------------------
0001A16A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A16A                            ; ---------------------------------------------------------------------------
0001A16A                            
0001A16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A16A                            
0001A16A                            
0001A16A                            Lamp_LoadInfo:
0001A16A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A170 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A176 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A17C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A182 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A188 4278 FE20                  		clr.w	(v_rings).w
0001A18C 4238 FE1B                  		clr.b	(v_lifecount).w
0001A190 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A196 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A19C 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A1A0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A1A6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A1AC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A1B2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A1B8 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A1BE 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A1C4 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A1CA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A1D0 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A1D6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A1DC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A1E2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A1E8 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A1EE 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A1F4 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A1F6                            
0001A1F6 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A1FC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A202 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A208                            
0001A208                            	@notlabyrinth:
0001A208 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A20C 6A00                       		bpl.s	locret_170F6
0001A20E 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A212 0440 00A0                  		subi.w	#$A0,d0
0001A216 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A21A                            
0001A21A                            locret_170F6:
0001A21A 4E75                       		rts	
0001A21A 4E75                       		rts	
0001A21C                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A21C                            ; --------------------------------------------------------------------------------
0001A21C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A21C                            ; --------------------------------------------------------------------------------
0001A21C                            
0001A21C                            SME_JfaKr:	
0001A21C 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A220 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A224 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A226 0A                         SME_JfaKr_A:	dc.b $A	
0001A227 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A22C E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A231 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A236 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A23B F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A240 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A245 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A24A 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A24F 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A254 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A259 08                         SME_JfaKr_3D:	dc.b 8	
0001A25A E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A25F E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A264 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A269 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A26E 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A273 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A278 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A27D 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A282 02                         SME_JfaKr_66:	dc.b 2	
0001A283 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A288 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A28D 0A                         SME_JfaKr_71:	dc.b $A	
0001A28E E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A293 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A298 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A29D F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2A2 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2A7 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2AC 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2B1 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2B6 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2BB D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A2C0 0A                         SME_JfaKr_A4:	dc.b $A	
0001A2C1 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2C6 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2CB F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2D0 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2D5 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2DA 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2DF 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2E4 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2E9 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2EE D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A2F4 00                         		even
0001A2F4 00                         		even
0001A2F4                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A2F4                            ; ---------------------------------------------------------------------------
0001A2F4                            ; Object 7D - hidden points at the end of a level
0001A2F4                            ; ---------------------------------------------------------------------------
0001A2F4                            
0001A2F4                            HiddenBonus:
0001A2F4 7000                       		moveq	#0,d0
0001A2F6 1028 0024                  		move.b	obRoutine(a0),d0
0001A2FA 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A2FE 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A302                            ; ===========================================================================
0001A302 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A304 0000                       		dc.w Bonus_Display-Bonus_Index
0001A306                            
0001A306 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A306                            ; ===========================================================================
0001A306                            
0001A306                            Bonus_Main:	; Routine 0
0001A306 7410                       		moveq	#$10,d2
0001A308 3602                       		move.w	d2,d3
0001A30A D643                       		add.w	d3,d3
0001A30C 43F8 D000                  		lea	(v_player).w,a1
0001A310 3029 0008                  		move.w	obX(a1),d0
0001A314 9068 0008                  		sub.w	obX(a0),d0
0001A318 D042                       		add.w	d2,d0
0001A31A B043                       		cmp.w	d3,d0
0001A31C 6400                       		bcc.s	bonu_chkdel
0001A31E 3229 000C                  		move.w	obY(a1),d1
0001A322 9268 000C                  		sub.w	obY(a0),d1
0001A326 D242                       		add.w	d2,d1
0001A328 B243                       		cmp.w	d3,d1
0001A32A 6400                       		bcc.s	bonu_chkdel
0001A32C 4A78 FE08                  		tst.w	(v_debuguse).w
0001A330 6600                       		bne.s	bonu_chkdel
0001A332 4A38 F7CD                  		tst.b	(f_bigring).w
0001A336 6600                       		bne.s	bonu_chkdel
0001A338 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A33C 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A344 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A34A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A350 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A356 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A35C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A362 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A372 7000                       		moveq	#0,d0
0001A374 1028 0028                  		move.b	obSubtype(a0),d0
0001A378 D040                       		add.w	d0,d0
0001A37A 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A37E 4EB9 0000 0000             		jsr	(AddPoints).l
0001A384                            
0001A384                            bonu_chkdel:
0001A3A0 4E75                       		rts	
0001A3A2                            
0001A3A2                            	@delete:
0001A3A2 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001A3A8                            
0001A3A8                            ; ===========================================================================
0001A3A8 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A3AA 03E8                       		dc.w 1000
0001A3AC 0064                       		dc.w 100
0001A3AE 000A                       		dc.w 10
0001A3B0                            ; ===========================================================================
0001A3B0                            
0001A3B0                            Bonus_Display:	; Routine 2
0001A3B0 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A3B4 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A3D2 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001A3D8                            
0001A3D8                            Bonus_Display_Delete:	
0001A3D8 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001A3D8 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001A3DE                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A3DE                            ; ---------------------------------------------------------------------------
0001A3DE                            ; Sprite mappings - hidden points at the end of	a level
0001A3DE                            ; ---------------------------------------------------------------------------
0001A3DE                            Map_Bonus_internal:
0001A3DE 0000                       		dc.w @blank-Map_Bonus_internal
0001A3E0 0000                       		dc.w @10000-Map_Bonus_internal
0001A3E2 0000                       		dc.w @1000-Map_Bonus_internal
0001A3E4 0000                       		dc.w @100-Map_Bonus_internal
0001A3E6 00                         @blank:		dc.b 0
0001A3E7 01                         @10000:		dc.b 1
0001A3E8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A3ED 01                         @1000:		dc.b 1
0001A3EE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A3F3 01                         @100:		dc.b 1
0001A3F4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A3FA 00                         		even
0001A3FA 00                         		even
0001A3FA                            
0001A3FA                            		include	"_incObj\8A Credits.asm"
0001A3FA                            ; ---------------------------------------------------------------------------
0001A3FA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A3FA                            ; ---------------------------------------------------------------------------
0001A3FA                            
0001A3FA                            CreditsText:
0001A3FA 7000                       		moveq	#0,d0
0001A3FC 1028 0024                  		move.b	obRoutine(a0),d0
0001A400 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A404 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A408                            ; ===========================================================================
0001A408 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A40A 0000                       		dc.w Cred_Display-Cred_Index
0001A40C                            ; ===========================================================================
0001A40C                            
0001A40C                            Cred_Main:	; Routine 0
0001A40C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A410 317C 0120 0008             		move.w	#$120,obX(a0)
0001A416 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A41C 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A424 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A42A 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A42E 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A432 117C 0000 0001             		move.b	#0,obRender(a0)
0001A438 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A43E                            
0001A43E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A444 6600                       		bne.s	Cred_Display	; if not, branch
0001A446                            
0001A446 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A44C 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A452 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A456 6700                       		beq.s	Cred_Display	; if not, branch
0001A458 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A45E 6600                       		bne.s	Cred_Display	; if not, branch
0001A460 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A466 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A46C 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001A472                            ; ===========================================================================
0001A472                            
0001A472                            Cred_Display:	; Routine 2
0001A472 4EF9 0000 F986             		jmp	DisplaySprite
0001A472 4EF9 0000 F986             		jmp	DisplaySprite
0001A478                            Map_Cred:	include	"_maps\Credits.asm"
0001A478                            ; ---------------------------------------------------------------------------
0001A478                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A478                            ; ---------------------------------------------------------------------------
0001A478                            Map_Cred_internal:
0001A478 0000                       		dc.w @staff-Map_Cred_internal
0001A47A 0000                       		dc.w @gameplan-Map_Cred_internal
0001A47C 0000                       		dc.w @program-Map_Cred_internal
0001A47E 0000                       		dc.w @character-Map_Cred_internal
0001A480 0000                       		dc.w @design-Map_Cred_internal
0001A482 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A484 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A486 0000                       		dc.w @thanks-Map_Cred_internal
0001A488 0000                       		dc.w @presentedby-Map_Cred_internal
0001A48A 0000                       		dc.w @tryagain-Map_Cred_internal
0001A48C 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A48E 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A48F F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A494 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A499 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A49E F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A4A3 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A4A8 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A4AD F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A4B2 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A4B7 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A4BC F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A4C1 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A4C6 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A4CB F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A4D0 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A4D5 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A4D6 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A4DB 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A4E0 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A4E5 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A4EA 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4EF 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A4F4 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A4F9 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A4FE 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A503                            
0001A503 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A508 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A50D B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A512 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A517 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A51C 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A51D 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A522 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A527 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A52C 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A531 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A536 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A53B 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A540                            
0001A540 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A545 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A54A B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A54F B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A554 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A559 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A55E B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A563 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A568                            
0001A568 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A56D D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A572                            
0001A572 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A577 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A57C D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A581 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A586 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A58B D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A590                            
0001A590 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A595 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A59A F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A59F 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A5A0 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A5A5 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5AA 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A5AF                            
0001A5AF B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5B4 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5B9 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5BE B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5C3 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A5C8 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A5C9 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A5CE 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A5D3 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A5D8 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A5DD 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A5E2 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A5E7                            
0001A5E7 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5EC B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5F1 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5F6 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5FB B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A600 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A601 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A606 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A60B 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A610 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A615 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A61A 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A61F 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A624 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A629 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A62E 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A633                            
0001A633 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A638 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A63D B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A642 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A647 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A64C B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A651 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A656 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A65B                            
0001A65B D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A660 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A665 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A66A D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A66F D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A674 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A679 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A67E D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A683 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A688 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A68D 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A68E D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A693 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A698 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A69D D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A6A2 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A6A7 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A6AC D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A6B1 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A6B6 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A6BB D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A6C0 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A6C5 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A6CA 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A6CF 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A6D4 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A6D9 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A6DE 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A6E3 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A6E8 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A6ED 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A6F2 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A6F7 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A6FC 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A701 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A702 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A707 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A70C 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A711 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A716 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A71B 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A720 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A725 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A72A                            
0001A72A B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A72F B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A734 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A739 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A73E B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A743 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A748                            
0001A748 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A74D D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A752 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A757 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A758 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A75D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A762 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A767 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A76C 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A771 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A776 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A77B 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A780 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A785                            
0001A785 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A78A B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A78F                            
0001A78F D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A794 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A799 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A79E D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A7A3 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A7A8 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A7A9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A7AE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A7B3 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A7B8 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A7BD 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A7C2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A7C7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A7CC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A7D1 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A7D2 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A7D7 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A7DC E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A7E1 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A7E6 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A7EB E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A7F0                            
0001A7F0 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A7F5 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A7FA 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A7FF 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A804 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A809 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A80E 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A813 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A818                            		even
0001A818                            		even
0001A818                            
0001A818                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A818                            ; ---------------------------------------------------------------------------
0001A818                            ; Object 3D - Eggman (GHZ)
0001A818                            ; ---------------------------------------------------------------------------
0001A818                            
0001A818                            BossGreenHill:
0001A818 7000                       		moveq	#0,d0
0001A81A 1028 0024                  		move.b	obRoutine(a0),d0
0001A81E 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A822 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A826                            ; ===========================================================================
0001A826 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A828 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A82A 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A82C 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A82E                            
0001A82E 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A830 0401                       		dc.b 4,	1
0001A832 0607                       		dc.b 6,	7
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            BGHZ_Main:	; Routine 0
0001A834 45F9 0001 A82E             		lea	(BGHZ_ObjData).l,a2
0001A83A 2248                       		movea.l	a0,a1
0001A83C 7202                       		moveq	#2,d1
0001A83E 6000                       		bra.s	BGHZ_LoadBoss
0001A840                            ; ===========================================================================
0001A840                            
0001A840                            BGHZ_Loop:
0001A840 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001A846 6600                       		bne.s	loc_17772
0001A848                            
0001A848                            BGHZ_LoadBoss:
0001A848 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A84C 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A850 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A856 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A85C 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A864 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A86A 137C 0004 0001             		move.b	#4,obRender(a1)
0001A870 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A876 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A87C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A880 2348 0034                  		move.l	a0,$34(a1)
0001A884 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A888                            
0001A888                            loc_17772:
0001A888 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A88E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A894 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A89A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A8A0                            
0001A8A0                            
0001A8A0                            BGHZ_ShipMain:	; Routine 2
0001A8A0 7000                       		moveq	#0,d0
0001A8A2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A8A6 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A8AA 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A8AE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A8B4 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001A8BA 1028 0022                  		move.b	obStatus(a0),d0
0001A8BE 0200 0003                  		andi.b	#3,d0
0001A8C2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A8C8 8128 0001                  		or.b	d0,obRender(a0)
0001A8CC 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001A8D2                            ; ===========================================================================
0001A8D2 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A8D4 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A8D6 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A8D8 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A8DA 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A8DC 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A8DE 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A8E0                            ; ===========================================================================
0001A8E0                            
0001A8E0                            BGHZ_ShipStart:
0001A8E0 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A8E6 6100 0000                  		bsr.w	BossMove
0001A8EA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A8F0 6600                       		bne.s	loc_177E6
0001A8F2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A8F8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A8FC                            
0001A8FC                            loc_177E6:
0001A8FC 1028 003F                  		move.b	$3F(a0),d0
0001A900 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A906 EC40                       		asr.w	#6,d0
0001A908 D068 0038                  		add.w	$38(a0),d0
0001A90C 3140 000C                  		move.w	d0,obY(a0)
0001A910 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A916 5428 003F                  		addq.b	#2,$3F(a0)
0001A91A 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A920 6400                       		bcc.s	locret_1784A
0001A922 4A28 0022                  		tst.b	obStatus(a0)
0001A926 6B00                       		bmi.s	loc_1784C
0001A928 4A28 0020                  		tst.b	obColType(a0)
0001A92C 6600                       		bne.s	locret_1784A
0001A92E 4A28 003E                  		tst.b	$3E(a0)
0001A932 6600                       		bne.s	BGHZ_ShipFlash
0001A934 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A944                            
0001A944                            BGHZ_ShipFlash:
0001A944 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A948 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A94A 4A51                       		tst.w	(a1)
0001A94C 6600                       		bne.s	loc_1783C
0001A94E 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A952                            
0001A952                            loc_1783C:
0001A952 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A954 5328 003E                  		subq.b	#1,$3E(a0)
0001A958 6600                       		bne.s	locret_1784A
0001A95A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A960                            
0001A960                            locret_1784A:
0001A960 4E75                       		rts	
0001A962                            ; ===========================================================================
0001A962                            
0001A962                            loc_1784C:
0001A962 7064                       		moveq	#100,d0
0001A964 6100 0000                  		bsr.w	AddPoints
0001A968 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A96E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A974 4E75                       		rts	
0001A974 4E75                       		rts	
0001A976                            
0001A976                            ; ---------------------------------------------------------------------------
0001A976                            ; Defeated boss	subroutine
0001A976                            ; ---------------------------------------------------------------------------
0001A976                            
0001A976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A976                            
0001A976                            
0001A976                            BossDefeated:
0001A976 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A97A 0200 0007                  		andi.b	#7,d0
0001A97E 6600                       		bne.s	locret_178A2
0001A980 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001A986 6600                       		bne.s	locret_178A2
0001A988 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A98C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A992 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A998 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001A99E 3200                       		move.w	d0,d1
0001A9A0 7200                       		moveq	#0,d1
0001A9A2 1200                       		move.b	d0,d1
0001A9A4 E409                       		lsr.b	#2,d1
0001A9A6 0441 0020                  		subi.w	#$20,d1
0001A9AA D369 0008                  		add.w	d1,obX(a1)
0001A9AE E048                       		lsr.w	#8,d0
0001A9B0 E608                       		lsr.b	#3,d0
0001A9B2 D169 000C                  		add.w	d0,obY(a1)
0001A9B6                            
0001A9B6                            locret_178A2:
0001A9B6 4E75                       		rts	
0001A9B8                            ; End of function BossDefeated
0001A9B8                            
0001A9B8                            ; ---------------------------------------------------------------------------
0001A9B8                            ; Subroutine to	move a boss
0001A9B8                            ; ---------------------------------------------------------------------------
0001A9B8                            
0001A9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9B8                            
0001A9B8                            
0001A9B8                            BossMove:
0001A9B8 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A9BE E188                       		lsl.l	#8,d0
0001A9C0 D1A8 0030                  		add.l	d0,$30(a0)
0001A9C4 E18A                       		lsl.l	#8,d2
0001A9C6 D5A8 0038                  		add.l	d2,$38(a0)
0001A9CA 4E75                       		rts
0001A9CC                            ; End of function BossMove
0001A9CC                            
0001A9CC                            ; ===========================================================================
0001A9CC                            
0001A9CC                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A9CC                            
0001A9CC                            BGHZ_MakeBall:
0001A9CC 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A9D2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A9D8 6100 FFDE                  		bsr.w	BossMove
0001A9DC 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A9E2 6600                       		bne.s	loc_17916
0001A9E4 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A9EA 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A9F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9F4 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001A9FA 6600                       		bne.s	loc_17910
0001A9FC 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AA00 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AA06 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AA0C 2348 0034                  		move.l	a0,$34(a1)
0001AA10                            
0001AA10                            loc_17910:
0001AA10 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AA16                            
0001AA16                            loc_17916:
0001AA16 6000 FEE4                  		bra.w	loc_177E6
0001AA1A                            ; ===========================================================================
0001AA1A                            
0001AA1A                            BGHZ_ShipMove:
0001AA1A 5368 003C                  		subq.w	#1,$3C(a0)
0001AA1E 6A00                       		bpl.s	BGHZ_Reverse
0001AA20 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA24 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA2A 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AA30 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001AA36 6600                       		bne.s	BGHZ_Reverse
0001AA38 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AA3E 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AA44                            
0001AA44                            BGHZ_Reverse:
0001AA44 0828 0000 0022             		btst	#0,obStatus(a0)
0001AA4A 6600                       		bne.s	loc_17950
0001AA4C 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AA50                            
0001AA50                            loc_17950:
0001AA50 6000 FEAA                  		bra.w	loc_177E6
0001AA54                            ; ===========================================================================
0001AA54                            
0001AA54                            loc_17954:
0001AA54 5368 003C                  		subq.w	#1,$3C(a0)
0001AA58 6B00                       		bmi.s	loc_17960
0001AA5A 6100 FF5C                  		bsr.w	BossMove
0001AA5E 6000                       		bra.s	loc_17976
0001AA60                            ; ===========================================================================
0001AA60                            
0001AA60                            loc_17960:
0001AA60 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AA66 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA6C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AA70 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AA76                            
0001AA76                            loc_17976:
0001AA76 6000 FE84                  		bra.w	loc_177E6
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            loc_1797A:
0001AA7A 5368 003C                  		subq.w	#1,$3C(a0)
0001AA7E 6B00                       		bmi.s	loc_17984
0001AA80 6000 FEF4                  		bra.w	BossDefeated
0001AA84                            ; ===========================================================================
0001AA84                            
0001AA84                            loc_17984:
0001AA84 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AA8A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AA90 4268 0010                  		clr.w	obVelX(a0)
0001AA94 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA98 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AA9E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AAA2 6600                       		bne.s	locret_179AA
0001AAA4 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AAAA                            
0001AAAA                            locret_179AA:
0001AAAA 4E75                       		rts	
0001AAAC                            ; ===========================================================================
0001AAAC                            
0001AAAC                            loc_179AC:
0001AAAC 5268 003C                  		addq.w	#1,$3C(a0)
0001AAB0 6700                       		beq.s	loc_179BC
0001AAB2 6A00                       		bpl.s	loc_179C2
0001AAB4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AABA 6000                       		bra.s	loc_179EE
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            loc_179BC:
0001AABC 4268 0012                  		clr.w	obVelY(a0)
0001AAC0 6000                       		bra.s	loc_179EE
0001AAC2                            ; ===========================================================================
0001AAC2                            
0001AAC2                            loc_179C2:
0001AAC2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AAC8 6500                       		bcs.s	loc_179DA
0001AACA 6700                       		beq.s	loc_179E0
0001AACC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AAD2 6500                       		bcs.s	loc_179EE
0001AAD4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AAD8 6000                       		bra.s	loc_179EE
0001AADA                            ; ===========================================================================
0001AADA                            
0001AADA                            loc_179DA:
0001AADA 5168 0012                  		subq.w	#8,obVelY(a0)
0001AADE 6000                       		bra.s	loc_179EE
0001AAE0                            ; ===========================================================================
0001AAE0                            
0001AAE0                            loc_179E0:
0001AAE0 4268 0012                          clr.w    obVelY(a0)
0001AAE4 4A38 FE2D                          tst.b     (v_invinc).w
0001AAE8 6600                               bne.s   @boss_invinc
0001AAEA 4A38 FE2E                          tst.b     (v_shoes).w
0001AAEE 6600                               bne.s   @boss_shoes
0001AAF0                            
0001AAF0 1038 F5C6                          move.b   (v_Saved_music),d0
0001AAF4 6000 0000                          bra.w      @boss_play
0001AAF8                            
0001AAF8                            @boss_invinc:
0001AAF8 103C 0000                          move.b #bgm_Invincible,d0
0001AAFC                            
0001AAFC                            @boss_shoes:
0001AAFC 103C 0000                          move.b #bgm_Ending,d0
0001AB00                            
0001AB00                            @boss_play:
0001AB00 4EB8 124E                          jsr PlaySound
0001AB04                            
0001AB04                            loc_179EE:
0001AB04 6100 FEB2                  		bsr.w	BossMove
0001AB08 6000 FDF2                  		bra.w	loc_177E6
0001AB0C                            ; ===========================================================================
0001AB0C                            
0001AB0C                            loc_179F6:
0001AB0C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AB12 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB18 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001AB1E 6700                       		beq.s	loc_17A10
0001AB20 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AB24 6000                       		bra.s	loc_17A16
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_17A10:
0001AB26 4A28 0001                  		tst.b	obRender(a0)
0001AB2A 6A00                       		bpl.s	BGHZ_ShipDel
0001AB2C                            
0001AB2C                            loc_17A16:
0001AB2C 6100 FE8A                  		bsr.w	BossMove
0001AB30 6000 FDCA                  		bra.w	loc_177E6
0001AB34                            ; ===========================================================================
0001AB34                            
0001AB34                            BGHZ_ShipDel:
0001AB34 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001AB3A                            ; ===========================================================================
0001AB3A                            
0001AB3A                            BGHZ_FaceMain:	; Routine 4
0001AB3A 7000                       		moveq	#0,d0
0001AB3C 7201                       		moveq	#1,d1
0001AB3E 2268 0034                  		movea.l	$34(a0),a1
0001AB42 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AB46 5900                       		subq.b	#4,d0
0001AB48 6600                       		bne.s	loc_17A3E
0001AB4A 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AB50 6600                       		bne.s	loc_17A46
0001AB52 7204                       		moveq	#4,d1
0001AB54                            
0001AB54                            loc_17A3E:
0001AB54 5D00                       		subq.b	#6,d0
0001AB56 6B00                       		bmi.s	loc_17A46
0001AB58 720A                       		moveq	#$A,d1
0001AB5A 6000                       		bra.s	loc_17A5A
0001AB5C                            ; ===========================================================================
0001AB5C                            
0001AB5C                            loc_17A46:
0001AB5C 4A29 0020                  		tst.b	obColType(a1)
0001AB60 6600                       		bne.s	loc_17A50
0001AB62 7205                       		moveq	#5,d1
0001AB64 6000                       		bra.s	loc_17A5A
0001AB66                            ; ===========================================================================
0001AB66                            
0001AB66                            loc_17A50:
0001AB66 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AB6C 6500                       		bcs.s	loc_17A5A
0001AB6E 7204                       		moveq	#4,d1
0001AB70                            
0001AB70                            loc_17A5A:
0001AB70 1141 001C                  		move.b	d1,obAnim(a0)
0001AB74 5500                       		subq.b	#2,d0
0001AB76 6600                       		bne.s	BGHZ_FaceDisp
0001AB78 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AB7E 4A28 0001                  		tst.b	obRender(a0)
0001AB82 6A00                       		bpl.s	BGHZ_FaceDel
0001AB84                            
0001AB84                            BGHZ_FaceDisp:
0001AB84 6000                       		bra.s	BGHZ_Display
0001AB86                            ; ===========================================================================
0001AB86                            
0001AB86                            BGHZ_FaceDel:
0001AB86 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            BGHZ_FlameMain:	; Routine 6
0001AB8C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AB92 2268 0034                  		movea.l	$34(a0),a1
0001AB96 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AB9C 6600                       		bne.s	loc_17A96
0001AB9E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ABA4 4A28 0001                  		tst.b	obRender(a0)
0001ABA8 6A00                       		bpl.s	BGHZ_FlameDel
0001ABAA 6000                       		bra.s	BGHZ_FlameDisp
0001ABAC                            ; ===========================================================================
0001ABAC                            
0001ABAC                            loc_17A96:
0001ABAC 3029 0010                  		move.w	obVelX(a1),d0
0001ABB0 6700                       		beq.s	BGHZ_FlameDisp
0001ABB2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ABB8                            
0001ABB8                            BGHZ_FlameDisp:
0001ABB8 6000                       		bra.s	BGHZ_Display
0001ABBA                            ; ===========================================================================
0001ABBA                            
0001ABBA                            BGHZ_FlameDel:
0001ABBA 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            BGHZ_Display:
0001ABC0 2268 0034                  		movea.l	$34(a0),a1
0001ABC4 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001ABCA 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001ABD0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABD6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001ABDC 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001ABE2 1028 0022                  		move.b	obStatus(a0),d0
0001ABE6 0200 0003                  		andi.b	#3,d0
0001ABEA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ABF0 8128 0001                  		or.b	d0,obRender(a0)
0001ABF4 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001ABF4 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001ABFA                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001ABFA                            ; ---------------------------------------------------------------------------
0001ABFA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001ABFA                            ; ---------------------------------------------------------------------------
0001ABFA                            
0001ABFA                            BossBall:
0001ABFA 7000                       		moveq	#0,d0
0001ABFC 1028 0024                  		move.b	obRoutine(a0),d0
0001AC00 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AC04 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AC08                            ; ===========================================================================
0001AC08 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AC0A 0000                       		dc.w GBall_Base-GBall_Index
0001AC0C 0000                       		dc.w GBall_Display2-GBall_Index
0001AC0E 0000                       		dc.w loc_17C68-GBall_Index
0001AC10 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AC12                            ; ===========================================================================
0001AC12                            
0001AC12                            GBall_Main:	; Routine 0
0001AC12 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC16 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AC1C 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AC22 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AC2A 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AC30 45E8 0028                  		lea	obSubtype(a0),a2
0001AC34 14FC 0000                  		move.b	#0,(a2)+
0001AC38 7205                       		moveq	#5,d1
0001AC3A 2248                       		movea.l	a0,a1
0001AC3C 6000                       		bra.s	loc_17B60
0001AC3E                            ; ===========================================================================
0001AC3E                            
0001AC3E                            GBall_MakeLinks:
0001AC3E 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001AC44 6600                       		bne.s	GBall_MakeBall
0001AC46 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AC4C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AC52 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AC56 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AC5C 237C 0000 988C 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AC64 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AC6A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AC70 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AC74                            
0001AC74                            loc_17B60:
0001AC74 3A09                       		move.w	a1,d5
0001AC76 0445 D000                  		subi.w	#$D000,d5
0001AC7A EC4D                       		lsr.w	#6,d5
0001AC7C 0245 007F                  		andi.w	#$7F,d5
0001AC80 14C5                       		move.b	d5,(a2)+
0001AC82 137C 0004 0001             		move.b	#4,obRender(a1)
0001AC88 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AC8E 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AC94 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AC9A 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AC9E                            
0001AC9E                            GBall_MakeBall:
0001AC9E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ACA4 237C 0000 9DE8 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ACAC 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ACB2 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACB8 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ACBE 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ACC4 4E75                       		rts	
0001ACC6                            ; ===========================================================================
0001ACC6                            
0001ACC6 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ACCC                            
0001ACCC                            ; ===========================================================================
0001ACCC                            
0001ACCC                            GBall_Base:	; Routine 2
0001ACCC 47F9 0001 ACC6             		lea	(GBall_PosData).l,a3
0001ACD2 45E8 0028                  		lea	obSubtype(a0),a2
0001ACD6 7C00                       		moveq	#0,d6
0001ACD8 1C1A                       		move.b	(a2)+,d6
0001ACDA                            
0001ACDA                            loc_17BC6:
0001ACDA 7800                       		moveq	#0,d4
0001ACDC 181A                       		move.b	(a2)+,d4
0001ACDE ED4C                       		lsl.w	#6,d4
0001ACE0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ACE6 2244                       		movea.l	d4,a1
0001ACE8 101B                       		move.b	(a3)+,d0
0001ACEA B029 003C                  		cmp.b	$3C(a1),d0
0001ACEE 6700                       		beq.s	loc_17BE0
0001ACF0 5229 003C                  		addq.b	#1,$3C(a1)
0001ACF4                            
0001ACF4                            loc_17BE0:
0001ACF4 51CE FFE4                  		dbf	d6,loc_17BC6
0001ACF8                            
0001ACF8 B029 003C                  		cmp.b	$3C(a1),d0
0001ACFC 6600                       		bne.s	loc_17BFA
0001ACFE 2268 0034                  		movea.l	$34(a0),a1
0001AD02 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AD08 6600                       		bne.s	loc_17BFA
0001AD0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD0E                            
0001AD0E                            loc_17BFA:
0001AD0E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AD14 6700                       		beq.s	GBall_Display
0001AD16 5268 0032                  		addq.w	#1,$32(a0)
0001AD1A                            
0001AD1A                            GBall_Display:
0001AD1A 6100 0000                  		bsr.w	sub_17C2A
0001AD1E 1028 0026                  		move.b	obAngle(a0),d0
0001AD22 4EB9 0000 97FE             		jsr	(Swing_Move2).l
0001AD28 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001AD2E                            ; ===========================================================================
0001AD2E                            
0001AD2E                            GBall_Display2:	; Routine 4
0001AD2E 6100 0000                  		bsr.w	sub_17C2A
0001AD32 4EB9 0000 97BE             		jsr	(Obj48_Move).l
0001AD38 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001AD3E                            
0001AD3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD3E                            
0001AD3E                            
0001AD3E                            sub_17C2A:
0001AD3E 2268 0034                  		movea.l	$34(a0),a1
0001AD42 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AD48 6400                       		bcc.s	loc_17C3C
0001AD4A 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AD50                            
0001AD50                            loc_17C3C:
0001AD50 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AD56 3029 000C                  		move.w	obY(a1),d0
0001AD5A D068 0032                  		add.w	$32(a0),d0
0001AD5E 3140 0038                  		move.w	d0,$38(a0)
0001AD62 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AD68 4A29 0022                  		tst.b	obStatus(a1)
0001AD6C 6A00                       		bpl.s	locret_17C66
0001AD6E 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD72 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD78                            
0001AD78                            locret_17C66:
0001AD78 4E75                       		rts	
0001AD7A                            ; End of function sub_17C2A
0001AD7A                            
0001AD7A                            ; ===========================================================================
0001AD7A                            
0001AD7A                            loc_17C68:	; Routine 6
0001AD7A 2268 0034                  		movea.l	$34(a0),a1
0001AD7E 4A29 0022                  		tst.b	obStatus(a1)
0001AD82 6A00                       		bpl.s	GBall_Display3
0001AD84 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD88 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD8E                            
0001AD8E                            GBall_Display3:
0001AD8E 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            GBall_ChkVanish:; Routine 8
0001AD94 7000                       		moveq	#0,d0
0001AD96 4A28 001A                  		tst.b	obFrame(a0)
0001AD9A 6600                       		bne.s	GBall_Vanish
0001AD9C 5200                       		addq.b	#1,d0
0001AD9E                            
0001AD9E                            GBall_Vanish:
0001AD9E 1140 001A                  		move.b	d0,obFrame(a0)
0001ADA2 2268 0034                  		movea.l	$34(a0),a1
0001ADA6 4A29 0022                  		tst.b	obStatus(a1)
0001ADAA 6A00                       		bpl.s	GBall_Display4
0001ADAC 117C 0000 0020             		move.b	#0,obColType(a0)
0001ADB2 6100 FBC2                  		bsr.w	BossDefeated
0001ADB6 5328 003C                  		subq.b	#1,$3C(a0)
0001ADBA 6A00                       		bpl.s	GBall_Display4
0001ADBC 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ADC0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADC6                            
0001ADC6                            GBall_Display4:
0001ADC6 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001ADC6 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001ADCC                            		include	"_anim\Eggman.asm"
0001ADCC                            ; ---------------------------------------------------------------------------
0001ADCC                            ; Animation script - Eggman (bosses)
0001ADCC                            ; ---------------------------------------------------------------------------
0001ADCC 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ADCE 0000                       		dc.w @facenormal1-Ani_Eggman
0001ADD0 0000                       		dc.w @facenormal2-Ani_Eggman
0001ADD2 0000                       		dc.w @facenormal3-Ani_Eggman
0001ADD4 0000                       		dc.w @facelaugh-Ani_Eggman
0001ADD6 0000                       		dc.w @facehit-Ani_Eggman
0001ADD8 0000                       		dc.w @facepanic-Ani_Eggman
0001ADDA 0000                       		dc.w @blank-Ani_Eggman
0001ADDC 0000                       		dc.w @flame1-Ani_Eggman
0001ADDE 0000                       		dc.w @flame2-Ani_Eggman
0001ADE0 0000                       		dc.w @facedefeat-Ani_Eggman
0001ADE2 0000                       		dc.w @escapeflame-Ani_Eggman
0001ADE4 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ADE8 00                         		even
0001ADE8 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ADEC                            		even
0001ADEC 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ADF0                            		even
0001ADF0 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ADF4                            		even
0001ADF4 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ADF8                            		even
0001ADF8 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001ADFC                            		even
0001ADFC 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AE00                            		even
0001AE00 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AE04 00                         		even
0001AE04 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AE08                            		even
0001AE08 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AE0C                            		even
0001AE0C 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AE10 00                         		even
0001AE10 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AE1C 00                         		even
0001AE1C 00                         		even
0001AE1C                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AE1C                            ; --------------------------------------------------------------------------------
0001AE1C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE1C                            ; --------------------------------------------------------------------------------
0001AE1C                            
0001AE1C                            SME_F_pyS:	
0001AE1C 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AE20 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AE24 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AE28 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AE2C 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AE30 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AE34 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AE36 05                         SME_F_pyS_1A:	dc.b 5	
0001AE37 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AE3C FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AE41 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AE46 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AE4B 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AE50 03                         SME_F_pyS_34:	dc.b 3	
0001AE51 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE56 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AE5B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE60 03                         SME_F_pyS_44:	dc.b 3	
0001AE61 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE66 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AE6B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE70 04                         SME_F_pyS_54:	dc.b 4	
0001AE71 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AE76 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AE7B EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AE80 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE85 04                         SME_F_pyS_69:	dc.b 4	
0001AE86 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AE8B EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AE90 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AE95 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE9A 04                         SME_F_pyS_7E:	dc.b 4	
0001AE9B E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AEA0 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AEA5 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEAA EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEAF 04                         SME_F_pyS_93:	dc.b 4	
0001AEB0 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AEB5 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AEBA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AEBF EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AEC4 07                         SME_F_pyS_A8:	dc.b 7	
0001AEC5 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AECA E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AECF EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AED4 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AED9 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AEDE F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AEE3 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEE8 01                         SME_F_pyS_CC:	dc.b 1	
0001AEE9 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AEEE 01                         SME_F_pyS_D2:	dc.b 1	
0001AEEF 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AEF4 00                         SME_F_pyS_D8:	dc.b 0	
0001AEF5 02                         SME_F_pyS_D9:	dc.b 2	
0001AEF6 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AEFB 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AF00 02                         SME_F_pyS_E4:	dc.b 2	
0001AF01 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AF06 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AF0C 00                         		even
0001AF0C 00                         		even
0001AF0C                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AF0C                            ; ---------------------------------------------------------------------------
0001AF0C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AF0C                            ; ---------------------------------------------------------------------------
0001AF0C                            Map_BossItems_internal:
0001AF0C 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AF0E 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AF10 0000                       		dc.w @cross-Map_BossItems_internal
0001AF12 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AF14 0000                       		dc.w @pipe-Map_BossItems_internal
0001AF16 0000                       		dc.w @spike-Map_BossItems_internal
0001AF18 0000                       		dc.w @legmask-Map_BossItems_internal
0001AF1A 0000                       		dc.w @legs-Map_BossItems_internal
0001AF1C 01                         @chainanchor1:	dc.b 1
0001AF1D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AF22 02                         @chainanchor2:	dc.b 2
0001AF23 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AF28 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AF2E 00                         		even
0001AF2E 01                         @cross:		dc.b 1
0001AF2F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AF34 01                         @widepipe:	dc.b 1
0001AF35 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AF3A 01                         @pipe:		dc.b 1
0001AF3B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AF40 04                         @spike:		dc.b 4
0001AF41 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AF46 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AF4B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AF50 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AF56 00                         		even
0001AF56 02                         @legmask:	dc.b 2
0001AF57 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AF5C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AF62 00                         		even
0001AF62 02                         @legs:		dc.b 2
0001AF63 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AF68 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AF6E 00                         		even
0001AF6E 00                         		even
0001AF6E                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AF6E                            ; ---------------------------------------------------------------------------
0001AF6E                            ; Object 77 - Eggman (LZ)
0001AF6E                            ; ---------------------------------------------------------------------------
0001AF6E                            
0001AF6E                            BossLabyrinth:
0001AF6E 7000                       		moveq	#0,d0
0001AF70 1028 0024                  		move.b	obRoutine(a0),d0
0001AF74 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AF78 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AF7C                            ; ===========================================================================
0001AF7C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AF7E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AF80 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AF82 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AF84                            
0001AF84 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AF86 0401                       		dc.b 4,	1
0001AF88 0607                       		dc.b 6,	7
0001AF8A                            ; ===========================================================================
0001AF8A                            
0001AF8A                            Obj77_Main:	; Routine 0
0001AF8A 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AF90 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AF96 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AF9C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AFA2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFA8 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AFAE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AFB4 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AFB8 2248                       		movea.l	a0,a1
0001AFBA 7202                       		moveq	#2,d1
0001AFBC 6000                       		bra.s	Obj77_LoadBoss
0001AFBE                            ; ===========================================================================
0001AFBE                            
0001AFBE                            Obj77_Loop:
0001AFBE 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001AFC4 6600                       		bne.s	Obj77_ShipMain
0001AFC6 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AFCA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AFD0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AFD6                            
0001AFD6                            Obj77_LoadBoss:
0001AFD6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFDC 4229 0025                  		clr.b	ob2ndRout(a1)
0001AFE0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AFE4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AFE8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AFEE 237C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a1)
0001AFF6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AFFC 137C 0004 0001             		move.b	#4,obRender(a1)
0001B002 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B008 2348 0034                  		move.l	a0,$34(a1)
0001B00C 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B010                            
0001B010                            Obj77_ShipMain:	; Routine 2
0001B010 43F8 D000                  		lea	(v_player).w,a1
0001B014 7000                       		moveq	#0,d0
0001B016 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B01A 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B01E 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B022 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001B028 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001B02E 7003                       		moveq	#3,d0
0001B030 C028 0022                  		and.b	obStatus(a0),d0
0001B034 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B03A 8128 0001                  		or.b	d0,obRender(a0)
0001B03E 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B044                            ; ===========================================================================
0001B044 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B048 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B04C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B050 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            loc_17F1E:
0001B054 3029 0008                  		move.w	obX(a1),d0
0001B058 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B05C 6500                       		bcs.s	loc_17F38
0001B05E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B064 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B06A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B06E                            
0001B06E                            loc_17F38:
0001B06E 6100 F948                  		bsr.w	BossMove
0001B072 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B078 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B07E                            
0001B07E                            loc_17F48:
0001B07E 4A28 003D                  		tst.b	$3D(a0)
0001B082 6600                       		bne.s	loc_17F8E
0001B084 4A28 0022                  		tst.b	obStatus(a0)
0001B088 6B00                       		bmi.s	loc_17F92
0001B08A 4A28 0020                  		tst.b	obColType(a0)
0001B08E 6600                       		bne.s	locret_17F8C
0001B090 4A28 003E                  		tst.b	$3E(a0)
0001B094 6600                       		bne.s	loc_17F70
0001B096 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B0A6                            
0001B0A6                            loc_17F70:
0001B0A6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B0AA 7000                       		moveq	#0,d0
0001B0AC 4A51                       		tst.w	(a1)
0001B0AE 6600                       		bne.s	loc_17F7E
0001B0B0 303C 0EEE                  		move.w	#cWhite,d0
0001B0B4                            
0001B0B4                            loc_17F7E:
0001B0B4 3280                       		move.w	d0,(a1)
0001B0B6 5328 003E                  		subq.b	#1,$3E(a0)
0001B0BA 6600                       		bne.s	locret_17F8C
0001B0BC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B0C2                            
0001B0C2                            locret_17F8C:
0001B0C2 4E75                       		rts	
0001B0C4                            ; ===========================================================================
0001B0C4                            
0001B0C4                            loc_17F8E:
0001B0C4 6000 F8B0                  		bra.w	BossDefeated
0001B0C8                            ; ===========================================================================
0001B0C8                            
0001B0C8                            loc_17F92:
0001B0C8 7064                       		moveq	#100,d0
0001B0CA 6100 0000                  		bsr.w	AddPoints
0001B0CE 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B0D4 4E75                       		rts	
0001B0D6                            ; ===========================================================================
0001B0D6                            
0001B0D6                            loc_17FA0:
0001B0D6 70FE                       		moveq	#-2,d0
0001B0D8 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B0DE 6500                       		bcs.s	loc_17FB6
0001B0E0 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B0E6 4268 0010                  		clr.w	obVelX(a0)
0001B0EA 5240                       		addq.w	#1,d0
0001B0EC                            
0001B0EC                            loc_17FB6:
0001B0EC 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B0F2 6E00                       		bgt.s	loc_17FCA
0001B0F4 317C 0500 0038             		move.w	#$500,$38(a0)
0001B0FA 4268 0012                  		clr.w	obVelY(a0)
0001B0FE 5240                       		addq.w	#1,d0
0001B100                            
0001B100                            loc_17FCA:
0001B100 6600                       		bne.s	loc_17FDC
0001B102 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B108 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B10E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B112                            
0001B112                            loc_17FDC:
0001B112 6000 FF5A                  		bra.w	loc_17F38
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            loc_17FE0:
0001B116 70FE                       		moveq	#-2,d0
0001B118 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B11E 6500                       		bcs.s	loc_17FF6
0001B120 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B126 4268 0010                  		clr.w	obVelX(a0)
0001B12A 5240                       		addq.w	#1,d0
0001B12C                            
0001B12C                            loc_17FF6:
0001B12C 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B132 6E00                       		bgt.s	loc_1800A
0001B134 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B13A 4268 0012                  		clr.w	obVelY(a0)
0001B13E 5240                       		addq.w	#1,d0
0001B140                            
0001B140                            loc_1800A:
0001B140 6600                       		bne.s	loc_1801A
0001B142 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B148 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B14C 4228 003F                  		clr.b	$3F(a0)
0001B150                            
0001B150                            loc_1801A:
0001B150 6000 FF1C                  		bra.w	loc_17F38
0001B154                            ; ===========================================================================
0001B154                            
0001B154                            loc_1801E:
0001B154 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B15A 6E00                       		bgt.s	loc_1804E
0001B15C 317C 0100 0038             		move.w	#$100,$38(a0)
0001B162 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B168 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B16E 4A28 003D                  		tst.b	$3D(a0)
0001B172 6700                       		beq.s	loc_18046
0001B174 E1E8 0010                  		asl	obVelX(a0)
0001B178 E1E8 0012                  		asl	obVelY(a0)
0001B17C                            
0001B17C                            loc_18046:
0001B17C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B180 6000 FEEC                  		bra.w	loc_17F38
0001B184                            ; ===========================================================================
0001B184                            
0001B184                            loc_1804E:
0001B184 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B18A 5428 003F                  		addq.b	#2,$3F(a0)
0001B18E 1028 003F                  		move.b	$3F(a0),d0
0001B192 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B198 4A41                       		tst.w	d1
0001B19A 6A00                       		bpl.s	loc_1806C
0001B19C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1A2                            
0001B1A2                            loc_1806C:
0001B1A2 E840                       		asr.w	#4,d0
0001B1A4 4840                       		swap	d0
0001B1A6 4240                       		clr.w	d0
0001B1A8 D0A8 0030                  		add.l	$30(a0),d0
0001B1AC 4840                       		swap	d0
0001B1AE 3140 0008                  		move.w	d0,obX(a0)
0001B1B2 3028 0012                  		move.w	obVelY(a0),d0
0001B1B6 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B1BA 9268 000C                  		sub.w	obY(a0),d1
0001B1BE 6500                       		bcs.s	loc_180A2
0001B1C0 0441 0048                  		subi.w	#$48,d1
0001B1C4 6500                       		bcs.s	loc_180A2
0001B1C6 E240                       		asr.w	#1,d0
0001B1C8 0441 0028                  		subi.w	#$28,d1
0001B1CC 6500                       		bcs.s	loc_180A2
0001B1CE E240                       		asr.w	#1,d0
0001B1D0 0441 0028                  		subi.w	#$28,d1
0001B1D4 6500                       		bcs.s	loc_180A2
0001B1D6 7000                       		moveq	#0,d0
0001B1D8                            
0001B1D8                            loc_180A2:
0001B1D8 48C0                       		ext.l	d0
0001B1DA E180                       		asl.l	#8,d0
0001B1DC 4A28 003D                  		tst.b	$3D(a0)
0001B1E0 6700                       		beq.s	loc_180AE
0001B1E2 D080                       		add.l	d0,d0
0001B1E4                            
0001B1E4                            loc_180AE:
0001B1E4 D1A8 0038                  		add.l	d0,$38(a0)
0001B1E8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1EE 6000 FE8E                  		bra.w	loc_17F48
0001B1F2                            ; ===========================================================================
0001B1F2                            
0001B1F2                            loc_180BC:
0001B1F2 70FE                       		moveq	#-2,d0
0001B1F4 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B1FA 6500                       		bcs.s	loc_180D2
0001B1FC 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B202 4268 0010                  		clr.w	obVelX(a0)
0001B206 5240                       		addq.w	#1,d0
0001B208                            
0001B208                            loc_180D2:
0001B208 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B20E 6E00                       		bgt.s	loc_180E6
0001B210 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B216 4268 0012                  		clr.w	obVelY(a0)
0001B21A 5240                       		addq.w	#1,d0
0001B21C                            
0001B21C                            loc_180E6:
0001B21C 6600                       		bne.s	loc_180F2
0001B21E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B222 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B228                            
0001B228                            loc_180F2:
0001B228 6000 FE44                  		bra.w	loc_17F38
0001B22C                            ; ===========================================================================
0001B22C                            
0001B22C                            loc_180F6:
0001B22C 4A28 003D                  		tst.b	$3D(a0)
0001B230 6600                       		bne.s	loc_18112
0001B232 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B238 6D00                       		blt.s	loc_18126
0001B23A 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B240 6E00                       		bgt.s	loc_18126
0001B242 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B248                            
0001B248                            loc_18112:
0001B248 4A38 FE2D                          tst.b     (v_invinc).w
0001B24C 6600                               bne.s   @boss_invinc
0001B24E                            
0001B24E 1038 F5C6                          move.b   (v_Saved_music),d0
0001B252 6000 0000                          bra.w      @boss_play
0001B256                            
0001B256                            @boss_invinc:
0001B256 103C 0000                          move.b #bgm_Invincible,d0
0001B25A                            
0001B25A                            @boss_play:
0001B25A 4EB8 124E                          jsr PlaySound
0001B25E 4238 F7AA                          clr.b    (f_lockscreen).w
0001B262 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B268 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B26C                            
0001B26C                            loc_18126:
0001B26C 6000 FE00                  		bra.w	loc_17F38
0001B270                            ; ===========================================================================
0001B270                            
0001B270                            loc_1812A:
0001B270 4A28 003D                  		tst.b	$3D(a0)
0001B274 6600                       		bne.s	loc_18136
0001B276 5328 003C                  		subq.b	#1,$3C(a0)
0001B27A 6600                       		bne.s	loc_1814E
0001B27C                            
0001B27C                            loc_18136:
0001B27C 4228 003C                  		clr.b	$3C(a0)
0001B280 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B286 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B28C 4228 003D                  		clr.b	$3D(a0)
0001B290 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B294                            
0001B294                            loc_1814E:
0001B294 6000 FDD8                  		bra.w	loc_17F38
0001B298                            ; ===========================================================================
0001B298                            
0001B298                            loc_18152:
0001B298 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B29E 6400                       		bcc.s	loc_18160
0001B2A0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B2A4 6000                       		bra.s	loc_18166
0001B2A6                            ; ===========================================================================
0001B2A6                            
0001B2A6                            loc_18160:
0001B2A6 4A28 0001                  		tst.b	obRender(a0)
0001B2AA 6A00                       		bpl.s	Obj77_ShipDel
0001B2AC                            
0001B2AC                            loc_18166:
0001B2AC 6000 FDC0                  		bra.w	loc_17F38
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            Obj77_ShipDel:
0001B2B0 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B2B6                            ; ===========================================================================
0001B2B6                            
0001B2B6                            Obj77_FaceMain:	; Routine 4
0001B2B6 2268 0034                  		movea.l	$34(a0),a1
0001B2BA 1011                       		move.b	(a1),d0
0001B2BC B010                       		cmp.b	(a0),d0
0001B2BE 6600                       		bne.s	Obj77_FaceDel
0001B2C0 7000                       		moveq	#0,d0
0001B2C2 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B2C6 7201                       		moveq	#1,d1
0001B2C8 4A28 003D                  		tst.b	$3D(a0)
0001B2CC 6700                       		beq.s	loc_1818C
0001B2CE 720A                       		moveq	#$A,d1
0001B2D0 6000                       		bra.s	loc_181A0
0001B2D2                            ; ===========================================================================
0001B2D2                            
0001B2D2                            loc_1818C:
0001B2D2 4A29 0020                  		tst.b	obColType(a1)
0001B2D6 6600                       		bne.s	loc_18196
0001B2D8 7205                       		moveq	#5,d1
0001B2DA 6000                       		bra.s	loc_181A0
0001B2DC                            ; ===========================================================================
0001B2DC                            
0001B2DC                            loc_18196:
0001B2DC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B2E2 6500                       		bcs.s	loc_181A0
0001B2E4 7204                       		moveq	#4,d1
0001B2E6                            
0001B2E6                            loc_181A0:
0001B2E6 1141 001C                  		move.b	d1,obAnim(a0)
0001B2EA 0C00 000E                  		cmpi.b	#$E,d0
0001B2EE 6600                       		bne.s	loc_181B6
0001B2F0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B2F6 4A28 0001                  		tst.b	obRender(a0)
0001B2FA 6A00                       		bpl.s	Obj77_FaceDel
0001B2FC                            
0001B2FC                            loc_181B6:
0001B2FC 6000                       		bra.s	Obj77_Display
0001B2FE                            ; ===========================================================================
0001B2FE                            
0001B2FE                            Obj77_FaceDel:
0001B2FE 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B304                            ; ===========================================================================
0001B304                            
0001B304                            Obj77_FlameMain:; Routine 6
0001B304 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B30A 2268 0034                  		movea.l	$34(a0),a1
0001B30E 1011                       		move.b	(a1),d0
0001B310 B010                       		cmp.b	(a0),d0
0001B312 6600                       		bne.s	Obj77_FlameDel
0001B314 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B31A 6600                       		bne.s	loc_181F0
0001B31C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B322 4A28 0001                  		tst.b	1(a0)
0001B326 6A00                       		bpl.s	Obj77_FlameDel
0001B328 6000                       		bra.s	loc_181F0
0001B32A                            ; ===========================================================================
0001B32A 4A69 0010                  		tst.w	obVelX(a1)
0001B32E 6700                       		beq.s	loc_181F0
0001B330 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B336                            
0001B336                            loc_181F0:
0001B336 6000                       		bra.s	Obj77_Display
0001B338                            ; ===========================================================================
0001B338                            
0001B338                            Obj77_FlameDel:
0001B338 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B33E                            ; ===========================================================================
0001B33E                            
0001B33E                            Obj77_Display:
0001B33E 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001B344 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001B34A 2268 0034                  		movea.l	$34(a0),a1
0001B34E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B354 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B35A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B360 7003                       		moveq	#3,d0
0001B362 C028 0022                  		and.b	obStatus(a0),d0
0001B366 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B36C 8128 0001                  		or.b	d0,obRender(a0)
0001B370 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B370 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B376                            		include	"_incObj\73 Boss - Marble.asm"
0001B376                            ; ---------------------------------------------------------------------------
0001B376                            ; Object 73 - Eggman (MZ)
0001B376                            ; ---------------------------------------------------------------------------
0001B376                            
0001B376                            BossMarble:
0001B376 7000                       		moveq	#0,d0
0001B378 1028 0024                  		move.b	obRoutine(a0),d0
0001B37C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B380 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B384                            ; ===========================================================================
0001B384 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B386 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B388 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B38A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B38C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B38E                            
0001B38E 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B392 0401 0200                  		dc.b 4,	1, $02, $00
0001B396 0607 0200                  		dc.b 6,	7, $02, $00
0001B39A 0800 0180                  		dc.b 8,	0, $01, $80
0001B39E                            ; ===========================================================================
0001B39E                            
0001B39E                            Obj73_Main:	; Routine 0
0001B39E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B3A4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B3AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3B0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3B6 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B3BA 2248                       		movea.l	a0,a1
0001B3BC 7203                       		moveq	#3,d1
0001B3BE 6000                       		bra.s	Obj73_LoadBoss
0001B3C0                            ; ===========================================================================
0001B3C0                            
0001B3C0                            Obj73_Loop:
0001B3C0 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001B3C6 6600                       		bne.s	Obj73_ShipMain
0001B3C8 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B3CC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B3D2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B3D8                            
0001B3D8                            Obj73_LoadBoss:
0001B3D8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B3DE 4229 0025                  		clr.b	ob2ndRout(a1)
0001B3E2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B3E6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B3EA 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B3EE 237C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a1)
0001B3F6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B3FC 137C 0004 0001             		move.b	#4,obRender(a1)
0001B402 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B408 2348 0034                  		move.l	a0,$34(a1)
0001B40C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B410                            
0001B410                            Obj73_ShipMain:	; Routine 2
0001B410 7000                       		moveq	#0,d0
0001B412 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B416 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B41A 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B41E 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001B424 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001B42A 7003                       		moveq	#3,d0
0001B42C C028 0022                  		and.b	obStatus(a0),d0
0001B430 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B436 8128 0001                  		or.b	d0,obRender(a0)
0001B43A 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B440                            ; ===========================================================================
0001B440 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B442 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B444 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B446 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B448 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B44A                            ; ===========================================================================
0001B44A                            
0001B44A                            loc_18302:
0001B44A 1028 003F                  		move.b	$3F(a0),d0
0001B44E 5428 003F                  		addq.b	#2,$3F(a0)
0001B452 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B458 E440                       		asr.w	#2,d0
0001B45A 3140 0012                  		move.w	d0,obVelY(a0)
0001B45E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B464 6100 F552                  		bsr.w	BossMove
0001B468 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B46E 6600                       		bne.s	loc_18334
0001B470 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B474 4228 0028                  		clr.b	obSubtype(a0)
0001B478 42A8 0010                  		clr.l	obVelX(a0)
0001B47C                            
0001B47C                            loc_18334:
0001B47C 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B482 1140 0034                  		move.b	d0,$34(a0)
0001B486                            
0001B486                            loc_1833E:
0001B486 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B48C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B492 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B498 6400                       		bcc.s	locret_18390
0001B49A 4A28 0022                  		tst.b	obStatus(a0)
0001B49E 6B00                       		bmi.s	loc_18392
0001B4A0 4A28 0020                  		tst.b	obColType(a0)
0001B4A4 6600                       		bne.s	locret_18390
0001B4A6 4A28 003E                  		tst.b	$3E(a0)
0001B4AA 6600                       		bne.s	loc_18374
0001B4AC 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B4BC                            
0001B4BC                            loc_18374:
0001B4BC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B4C0 7000                       		moveq	#0,d0
0001B4C2 4A51                       		tst.w	(a1)
0001B4C4 6600                       		bne.s	loc_18382
0001B4C6 303C 0EEE                  		move.w	#cWhite,d0
0001B4CA                            
0001B4CA                            loc_18382:
0001B4CA 3280                       		move.w	d0,(a1)
0001B4CC 5328 003E                  		subq.b	#1,$3E(a0)
0001B4D0 6600                       		bne.s	locret_18390
0001B4D2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4D8                            
0001B4D8                            locret_18390:
0001B4D8 4E75                       		rts	
0001B4DA                            ; ===========================================================================
0001B4DA                            
0001B4DA                            loc_18392:
0001B4DA 7064                       		moveq	#100,d0
0001B4DC 6100 0000                  		bsr.w	AddPoints
0001B4E0 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B4E6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B4EC 4268 0010                  		clr.w	obVelX(a0)
0001B4F0 4E75                       		rts	
0001B4F2                            ; ===========================================================================
0001B4F2                            
0001B4F2                            loc_183AA:
0001B4F2 7000                       		moveq	#0,d0
0001B4F4 1028 0028                  		move.b	obSubtype(a0),d0
0001B4F8 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B4FC 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B500 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B506 6000 FF7E                  		bra.w	loc_1833E
0001B50A                            ; ===========================================================================
0001B50A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B50C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B50E 0000                       		dc.w loc_183CA-off_183C2
0001B510 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B512                            ; ===========================================================================
0001B512                            
0001B512                            loc_183CA:
0001B512 4A68 0010                  		tst.w	obVelX(a0)
0001B516 6600                       		bne.s	loc_183FE
0001B518 7040                       		moveq	#$40,d0
0001B51A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B520 6700                       		beq.s	loc_183E6
0001B522 6500                       		bcs.s	loc_183DE
0001B524 4440                       		neg.w	d0
0001B526                            
0001B526                            loc_183DE:
0001B526 3140 0012                  		move.w	d0,obVelY(a0)
0001B52A 6000 F48C                  		bra.w	BossMove
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            loc_183E6:
0001B52E 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B534 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B53A 0828 0000 0022             		btst	#0,obStatus(a0)
0001B540 6600                       		bne.s	loc_183FE
0001B542 4468 0010                  		neg.w	obVelX(a0)
0001B546                            
0001B546                            loc_183FE:
0001B546 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B54C 6400                       		bcc.s	Obj73_MakeLava
0001B54E 6100 F468                  		bsr.w	BossMove
0001B552 5968 0012                  		subq.w	#4,obVelY(a0)
0001B556                            
0001B556                            Obj73_MakeLava:
0001B556 5328 0034                  		subq.b	#1,$34(a0)
0001B55A 6400                       		bcc.s	loc_1845C
0001B55C 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001B562 6600                       		bne.s	loc_1844A
0001B564 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B568 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B56E 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B574 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B57A 80FC 0050                  		divu.w	#$50,d0
0001B57E 4840                       		swap	d0
0001B580 0640 1878                  		addi.w	#$1878,d0
0001B584 3340 0008                  		move.w	d0,obX(a1)
0001B588 EE09                       		lsr.b	#7,d1
0001B58A 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B590                            
0001B590                            loc_1844A:
0001B590 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B596 0200 001F                  		andi.b	#$1F,d0
0001B59A 0600 0040                  		addi.b	#$40,d0
0001B59E 1140 0034                  		move.b	d0,$34(a0)
0001B5A2                            
0001B5A2                            loc_1845C:
0001B5A2 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5A8 6700                       		beq.s	loc_18474
0001B5AA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B5B0 6D00                       		blt.s	locret_1849C
0001B5B2 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B5B8 6000                       		bra.s	loc_18482
0001B5BA                            ; ===========================================================================
0001B5BA                            
0001B5BA                            loc_18474:
0001B5BA 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B5C0 6E00                       		bgt.s	locret_1849C
0001B5C2 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B5C8                            
0001B5C8                            loc_18482:
0001B5C8 4268 0010                  		clr.w	obVelX(a0)
0001B5CC 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B5D2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5D8 6400                       		bcc.s	loc_18498
0001B5DA 4468 0012                  		neg.w	obVelY(a0)
0001B5DE                            
0001B5DE                            loc_18498:
0001B5DE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B5E2                            
0001B5E2                            locret_1849C:
0001B5E2 4E75                       		rts	
0001B5E4                            ; ===========================================================================
0001B5E4                            
0001B5E4                            Obj73_MakeLava2:
0001B5E4 6100 F3D2                  		bsr.w	BossMove
0001B5E8 3028 0038                  		move.w	$38(a0),d0
0001B5EC 0440 022C                  		subi.w	#$22C,d0
0001B5F0 6E00                       		bgt.s	locret_184F4
0001B5F2 303C 022C                  		move.w	#$22C,d0
0001B5F6 4A68 0012                  		tst.w	obVelY(a0)
0001B5FA 6700                       		beq.s	loc_184EA
0001B5FC 4268 0012                  		clr.w	obVelY(a0)
0001B600 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B606 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B60C 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001B612 6600                       		bne.s	loc_184EA
0001B614 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B61A 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B620 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B626 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B62A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B630                            
0001B630                            loc_184EA:
0001B630 5368 003C                  		subq.w	#1,$3C(a0)
0001B634 6600                       		bne.s	locret_184F4
0001B636 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B63A                            
0001B63A                            locret_184F4:
0001B63A 4E75                       		rts	
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            loc_184F6:
0001B63C 5368 003C                  		subq.w	#1,$3C(a0)
0001B640 6B00                       		bmi.s	loc_18500
0001B642 6000 F332                  		bra.w	BossDefeated
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            loc_18500:
0001B646 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B64C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B652 4268 0010                  		clr.w	obVelX(a0)
0001B656 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B65A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B660 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B664 6600                       		bne.s	locret_1852A
0001B666 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B66C 4268 0012                  		clr.w	obVelY(a0)
0001B670                            
0001B670                            locret_1852A:
0001B670 4E75                       		rts	
0001B672                            ; ===========================================================================
0001B672                            
0001B672                            loc_1852C:
0001B672 5268 003C                  		addq.w	#1,$3C(a0)
0001B676 6700                       		beq.s	loc_18544
0001B678 6A00                       		bpl.s	loc_1854E
0001B67A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B680 6400                       		bcc.s	loc_18544
0001B682 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B688 6000                       		bra.s	loc_1857A
0001B68A                            ; ===========================================================================
0001B68A                            
0001B68A                            loc_18544:
0001B68A 4268 0012                  		clr.w	obVelY(a0)
0001B68E 4268 003C                  		clr.w	$3C(a0)
0001B692 6000                       		bra.s	loc_1857A
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            loc_1854E:
0001B694 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B69A 6500                       		bcs.s	loc_18566
0001B69C 6700                       		beq.s	loc_1856C
0001B69E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6A4 6500                       		bcs.s	loc_1857A
0001B6A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6AA 6000                       		bra.s	loc_1857A
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            loc_18566:
0001B6AC 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6B0 6000                       		bra.s	loc_1857A
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            loc_1856C:
0001B6B2 4268 0012                  		clr.w	obVelY(a0)
0001B6C0                            
0001B6C0                            loc_1857A:
0001B6C0 6100 F2F6                  		bsr.w	BossMove
0001B6C4 6000 FDC0                  		bra.w	loc_1833E
0001B6C8                            ; ===========================================================================
0001B6C8                            
0001B6C8                            loc_18582:
0001B6C8 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B6CE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B6D4 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B6DA 6400                       		bcc.s	loc_1859C
0001B6DC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B6E0 6000                       		bra.s	loc_185A2
0001B6E2                            ; ===========================================================================
0001B6E2                            
0001B6E2                            loc_1859C:
0001B6E2 4A28 0001                  		tst.b	obRender(a0)
0001B6E6 6A00                       		bpl.s	Obj73_ShipDel
0001B6E8                            
0001B6E8                            loc_185A2:
0001B6E8 6100 F2CE                  		bsr.w	BossMove
0001B6EC 6000 FD98                  		bra.w	loc_1833E
0001B6F0                            ; ===========================================================================
0001B6F0                            
0001B6F0                            Obj73_ShipDel:
0001B6F0 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            Obj73_FaceMain:	; Routine 4
0001B6F6 7000                       		moveq	#0,d0
0001B6F8 7201                       		moveq	#1,d1
0001B6FA 2268 0034                  		movea.l	$34(a0),a1
0001B6FE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B702 5540                       		subq.w	#2,d0
0001B704 6600                       		bne.s	loc_185D2
0001B706 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B70C 6700                       		beq.s	loc_185DA
0001B70E 4A69 0012                  		tst.w	obVelY(a1)
0001B712 6600                       		bne.s	loc_185DA
0001B714 7204                       		moveq	#4,d1
0001B716 6000                       		bra.s	loc_185EE
0001B718                            ; ===========================================================================
0001B718                            
0001B718                            loc_185D2:
0001B718 5500                       		subq.b	#2,d0
0001B71A 6B00                       		bmi.s	loc_185DA
0001B71C 720A                       		moveq	#$A,d1
0001B71E 6000                       		bra.s	loc_185EE
0001B720                            ; ===========================================================================
0001B720                            
0001B720                            loc_185DA:
0001B720 4A29 0020                  		tst.b	obColType(a1)
0001B724 6600                       		bne.s	loc_185E4
0001B726 7205                       		moveq	#5,d1
0001B728 6000                       		bra.s	loc_185EE
0001B72A                            ; ===========================================================================
0001B72A                            
0001B72A                            loc_185E4:
0001B72A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B730 6500                       		bcs.s	loc_185EE
0001B732 7204                       		moveq	#4,d1
0001B734                            
0001B734                            loc_185EE:
0001B734 1141 001C                  		move.b	d1,obAnim(a0)
0001B738 5900                       		subq.b	#4,d0
0001B73A 6600                       		bne.s	loc_18602
0001B73C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B742 4A28 0001                  		tst.b	obRender(a0)
0001B746 6A00                       		bpl.s	Obj73_FaceDel
0001B748                            
0001B748                            loc_18602:
0001B748 6000                       		bra.s	Obj73_Display
0001B74A                            ; ===========================================================================
0001B74A                            
0001B74A                            Obj73_FaceDel:
0001B74A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            Obj73_FlameMain:; Routine 6
0001B750 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B756 2268 0034                  		movea.l	$34(a0),a1
0001B75A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B760 6D00                       		blt.s	loc_1862A
0001B762 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B768 4A28 0001                  		tst.b	obRender(a0)
0001B76C 6A00                       		bpl.s	Obj73_FlameDel
0001B76E 6000                       		bra.s	loc_18636
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            loc_1862A:
0001B770 4A69 0010                  		tst.w	obVelX(a1)
0001B774 6700                       		beq.s	loc_18636
0001B776 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B77C                            
0001B77C                            loc_18636:
0001B77C 6000                       		bra.s	Obj73_Display
0001B77E                            ; ===========================================================================
0001B77E                            
0001B77E                            Obj73_FlameDel:
0001B77E 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B784                            ; ===========================================================================
0001B784                            
0001B784                            Obj73_Display:
0001B784 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001B78A 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001B790                            
0001B790                            loc_1864A:
0001B790 2268 0034                  		movea.l	$34(a0),a1
0001B794 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B79A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7A0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7A6 7003                       		moveq	#3,d0
0001B7A8 C028 0022                  		and.b	obStatus(a0),d0
0001B7AC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7B2 8128 0001                  		or.b	d0,obRender(a0)
0001B7B6 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B7BC                            ; ===========================================================================
0001B7BC                            
0001B7BC                            Obj73_TubeMain:	; Routine 8
0001B7BC 2268 0034                  		movea.l	$34(a0),a1
0001B7C0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B7C6 6600                       		bne.s	loc_18688
0001B7C8 4A28 0001                  		tst.b	obRender(a0)
0001B7CC 6A00                       		bpl.s	Obj73_TubeDel
0001B7CE                            
0001B7CE                            loc_18688:
0001B7CE 217C 0001 AF0C 0004        		move.l	#Map_BossItems,obMap(a0)
0001B7D6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B7DC 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B7E2 60AC                       		bra.s	loc_1864A
0001B7E4                            ; ===========================================================================
0001B7E4                            
0001B7E4                            Obj73_TubeDel:
0001B7E4 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B7E4 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B7EA                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B7EA                            ; ---------------------------------------------------------------------------
0001B7EA                            ; Object 74 - lava that	Eggman drops (MZ)
0001B7EA                            ; ---------------------------------------------------------------------------
0001B7EA                            
0001B7EA                            BossFire:
0001B7EA 7000                       		moveq	#0,d0
0001B7EC 1028 0024                  		move.b	obRoutine(a0),d0
0001B7F0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B7F4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B7F8 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001B7FE                            ; ===========================================================================
0001B7FE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B800 0000                       		dc.w Obj74_Action-Obj74_Index
0001B802 0000                       		dc.w loc_18886-Obj74_Index
0001B804 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            Obj74_Main:	; Routine 0
0001B806 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B80C 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B812 217C 0000 D684 0004        		move.l	#Map_Fire,obMap(a0)
0001B81A 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B820 117C 0004 0001             		move.b	#4,obRender(a0)
0001B826 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B82C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B832 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B838 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B83C 4A28 0028                  		tst.b	obSubtype(a0)
0001B840 6600                       		bne.s	loc_1870A
0001B842 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B848 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B84C 6000 0000                  		bra.w	loc_18886
0001B850                            ; ===========================================================================
0001B850                            
0001B850                            loc_1870A:
0001B850 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B860                            
0001B860                            Obj74_Action:	; Routine 2
0001B860 7000                       		moveq	#0,d0
0001B862 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B866 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B86A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B86E 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001B874 43F9 0001 084A             		lea	(Ani_Fire).l,a1
0001B87A 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001B880 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B886 6200                       		bhi.s	Obj74_Delete
0001B888 4E75                       		rts	
0001B88A                            ; ===========================================================================
0001B88A                            
0001B88A                            Obj74_Delete:
0001B88A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B890                            ; ===========================================================================
0001B890 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B892 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B894 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B896 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B898                            ; ===========================================================================
0001B898                            
0001B898                            Obj74_Drop:
0001B898 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B89E 5328 0029                  		subq.b	#1,$29(a0)
0001B8A2 6A00                       		bpl.s	locret_18780
0001B8A4 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B8AA 4228 0028                  		clr.b	obSubtype(a0)
0001B8AE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B8B4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B8BA 6100 C634                  		bsr.w	ObjFloorDist
0001B8BE 4A41                       		tst.w	d1
0001B8C0 6A00                       		bpl.s	locret_18780
0001B8C2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B8C6                            
0001B8C6                            locret_18780:
0001B8C6 4E75                       		rts	
0001B8C8                            ; ===========================================================================
0001B8C8                            
0001B8C8                            Obj74_MakeFlame:
0001B8C8 5568 000C                  		subq.w	#2,obY(a0)
0001B8CC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8D2 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B8D8 4268 0012                  		clr.w	obVelY(a0)
0001B8DC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B8E2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8E8 117C 0003 0029             		move.b	#3,$29(a0)
0001B8EE 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001B8F4 6600                       		bne.s	loc_187CA
0001B8F6 47D1                       		lea	(a1),a3
0001B8F8 45D0                       		lea	(a0),a2
0001B8FA 7003                       		moveq	#3,d0
0001B8FC                            
0001B8FC                            Obj74_Loop:
0001B8FC 26DA                       		move.l	(a2)+,(a3)+
0001B8FE 26DA                       		move.l	(a2)+,(a3)+
0001B900 26DA                       		move.l	(a2)+,(a3)+
0001B902 26DA                       		move.l	(a2)+,(a3)+
0001B904 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B908                            
0001B908 4469 0010                  		neg.w	obVelX(a1)
0001B90C 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B910                            
0001B910                            loc_187CA:
0001B910 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B914 4E75                       		rts	
0001B916                            
0001B916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B916                            
0001B916                            
0001B916                            Obj74_Duplicate2:
0001B916 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001B91C 6600                       		bne.s	locret_187EE
0001B91E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B924 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B92A 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B92E 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B934                            
0001B934                            locret_187EE:
0001B934 4E75                       		rts	
0001B936                            ; End of function Obj74_Duplicate2
0001B936                            
0001B936                            ; ===========================================================================
0001B936                            
0001B936                            Obj74_Duplicate:
0001B936 6100 C5B8                  		bsr.w	ObjFloorDist
0001B93A 4A41                       		tst.w	d1
0001B93C 6A00                       		bpl.s	loc_18826
0001B93E 3028 0008                  		move.w	obX(a0),d0
0001B942 0C40 1940                  		cmpi.w	#$1940,d0
0001B946 6E00                       		bgt.s	loc_1882C
0001B948 3228 0030                  		move.w	$30(a0),d1
0001B94C B240                       		cmp.w	d0,d1
0001B94E 6700                       		beq.s	loc_1881E
0001B950 0240 0010                  		andi.w	#$10,d0
0001B954 0241 0010                  		andi.w	#$10,d1
0001B958 B240                       		cmp.w	d0,d1
0001B95A 6700                       		beq.s	loc_1881E
0001B95C 61B8                       		bsr.s	Obj74_Duplicate2
0001B95E 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B964                            
0001B964                            loc_1881E:
0001B964 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B96A 4E75                       		rts	
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            loc_18826:
0001B96C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B970 4E75                       		rts	
0001B972                            ; ===========================================================================
0001B972                            
0001B972                            loc_1882C:
0001B972 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B976 4E75                       		rts	
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            Obj74_FallEdge:
0001B978 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B97E 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B984 3028 0008                  		move.w	obX(a0),d0
0001B988 9068 0032                  		sub.w	$32(a0),d0
0001B98C 6A00                       		bpl.s	loc_1884A
0001B98E 4440                       		neg.w	d0
0001B990                            
0001B990                            loc_1884A:
0001B990 0C40 0012                  		cmpi.w	#$12,d0
0001B994 6600                       		bne.s	loc_18856
0001B996 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B99C                            
0001B99C                            loc_18856:
0001B99C 6100 C552                  		bsr.w	ObjFloorDist
0001B9A0 4A41                       		tst.w	d1
0001B9A2 6A00                       		bpl.s	locret_1887E
0001B9A4 5328 0029                  		subq.b	#1,$29(a0)
0001B9A8 6700                       		beq.s	Obj74_Delete2
0001B9AA 4268 0012                  		clr.w	obVelY(a0)
0001B9AE 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B9B4 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B9BA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9C0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B9C4                            
0001B9C4                            locret_1887E:
0001B9C4 4E75                       		rts	
0001B9C6                            ; ===========================================================================
0001B9C6                            
0001B9C6                            Obj74_Delete2:
0001B9C6 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B9CC                            ; ===========================================================================
0001B9CC                            
0001B9CC                            loc_18886:	; Routine 4
0001B9CC 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9D2 5328 0029                  		subq.b	#1,$29(a0)
0001B9D6 6600                       		bne.s	Obj74_Animate
0001B9D8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B9DE 5968 000C                  		subq.w	#4,obY(a0)
0001B9E2 4228 0020                  		clr.b	obColType(a0)
0001B9E6                            
0001B9E6                            Obj74_Animate:
0001B9E6 43F9 0001 084A             		lea	(Ani_Fire).l,a1
0001B9EC 4EF9 0000 CA32             		jmp	(AnimateSprite).l
0001B9F2                            ; ===========================================================================
0001B9F2                            
0001B9F2                            Obj74_Delete3:	; Routine 6
0001B9F2 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B9F2 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B9F8                            
0001B9F8                            	Obj7A_Delete:
0001B9F8 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001B9FE                            
0001B9FE                            		include	"_incObj\7A Boss - Star Light.asm"
0001B9FE                            ; ---------------------------------------------------------------------------
0001B9FE                            ; Object 7A - Eggman (SLZ)
0001B9FE                            ; ---------------------------------------------------------------------------
0001B9FE                            
0001B9FE                            BossStarLight:
0001B9FE 7000                       		moveq	#0,d0
0001BA00 1028 0024                  		move.b	obRoutine(a0),d0
0001BA04 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BA08 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BA0C                            ; ===========================================================================
0001BA0C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BA0E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BA10 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BA12 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BA14 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BA16                            
0001BA16 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BA1A 0401 0200                  		dc.b 4,	1, $02, $00
0001BA1E 0607 0200                  		dc.b 6,	7, $02, $00
0001BA22 0800 0180                  		dc.b 8,	0, $01, $80
0001BA26                            ; ===========================================================================
0001BA26                            
0001BA26                            Obj7A_Main:
0001BA26 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BA2C 317C 0228 000C             		move.w	#$228,obY(a0)
0001BA32 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA38 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA3E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA44 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA4A 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BA4E 2248                       		movea.l	a0,a1
0001BA50 7203                       		moveq	#3,d1
0001BA52 6000                       		bra.s	Obj7A_LoadBoss
0001BA54                            ; ===========================================================================
0001BA54                            
0001BA54                            Obj7A_Loop:
0001BA54 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001BA5A 6600                       		bne.s	loc_1895C
0001BA5C 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BA60 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA66 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA6C                            
0001BA6C                            Obj7A_LoadBoss:
0001BA6C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BA72 4229 0025                  		clr.b	ob2ndRout(a1)
0001BA76 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BA7A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BA7E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BA82 237C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a1)
0001BA8A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BA90 137C 0004 0001             		move.b	#4,obRender(a1)
0001BA96 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BA9C 2348 0034                  		move.l	a0,$34(a1)
0001BAA0 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BAA4                            
0001BAA4                            loc_1895C:
0001BAA4 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAA8 45E8 002A                  		lea	$2A(a0),a2
0001BAAC 705E                       		moveq	#$5E,d0
0001BAAE 723E                       		moveq	#$3E,d1
0001BAB0                            
0001BAB0                            loc_18968:
0001BAB0 B011                       		cmp.b	(a1),d0
0001BAB2 6600                       		bne.s	loc_18974
0001BAB4 4A29 0028                  		tst.b	obSubtype(a1)
0001BAB8 6700                       		beq.s	loc_18974
0001BABA 34C9                       		move.w	a1,(a2)+
0001BABC                            
0001BABC                            loc_18974:
0001BABC D2FC 0040                  		adda.w	#$40,a1
0001BAC0 51C9 FFEE                  		dbf	d1,loc_18968
0001BAC4                            
0001BAC4                            Obj7A_ShipMain:	; Routine 2
0001BAC4 7000                       		moveq	#0,d0
0001BAC6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BACA 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BACE 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BAD2 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001BAD8 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001BADE 7003                       		moveq	#3,d0
0001BAE0 C028 0022                  		and.b	obStatus(a0),d0
0001BAE4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BAEA 8128 0001                  		or.b	d0,obRender(a0)
0001BAEE 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001BAF4                            ; ===========================================================================
0001BAF4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BAF6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BAF8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BAFA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BAFC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BAFE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BB00                            ; ===========================================================================
0001BB00                            
0001BB00                            loc_189B8:
0001BB00 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BB06 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BB0C 6400                       		bcc.s	loc_189CA
0001BB0E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB12                            
0001BB12                            loc_189CA:
0001BB12 6100 EEA4                  		bsr.w	BossMove
0001BB16 1028 003F                  		move.b	$3F(a0),d0
0001BB1A 5428 003F                  		addq.b	#2,$3F(a0)
0001BB1E 4EB9 0000 3A36             		jsr	(CalcSine).l
0001BB24 EC40                       		asr.w	#6,d0
0001BB26 D068 0038                  		add.w	$38(a0),d0
0001BB2A 3140 000C                  		move.w	d0,obY(a0)
0001BB2E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB34 6000                       		bra.s	loc_189FE
0001BB36                            ; ===========================================================================
0001BB36                            
0001BB36                            loc_189EE:
0001BB36 6100 EE80                  		bsr.w	BossMove
0001BB3A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB40 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB46                            
0001BB46                            loc_189FE:
0001BB46 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BB4C 6400                       		bcc.s	locret_18A44
0001BB4E 4A28 0022                  		tst.b	obStatus(a0)
0001BB52 6B00                       		bmi.s	loc_18A46
0001BB54 4A28 0020                  		tst.b	obColType(a0)
0001BB58 6600                       		bne.s	locret_18A44
0001BB5A 4A28 003E                  		tst.b	$3E(a0)
0001BB5E 6600                       		bne.s	loc_18A28
0001BB60 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB70                            
0001BB70                            loc_18A28:
0001BB70 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB74 7000                       		moveq	#0,d0
0001BB76 4A51                       		tst.w	(a1)
0001BB78 6600                       		bne.s	loc_18A36
0001BB7A 303C 0EEE                  		move.w	#cWhite,d0
0001BB7E                            
0001BB7E                            loc_18A36:
0001BB7E 3280                       		move.w	d0,(a1)
0001BB80 5328 003E                  		subq.b	#1,$3E(a0)
0001BB84 6600                       		bne.s	locret_18A44
0001BB86 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB8C                            
0001BB8C                            locret_18A44:
0001BB8C 4E75                       		rts	
0001BB8E                            ; ===========================================================================
0001BB8E                            
0001BB8E                            loc_18A46:
0001BB8E 7064                       		moveq	#100,d0
0001BB90 6100 0000                  		bsr.w	AddPoints
0001BB94 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BB9A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BBA0 4268 0010                  		clr.w	obVelX(a0)
0001BBA4 4E75                       		rts	
0001BBA6                            ; ===========================================================================
0001BBA6                            
0001BBA6                            loc_18A5E:
0001BBA6 3028 0030                  		move.w	$30(a0),d0
0001BBAA 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BBB0 0828 0000 0022             		btst	#0,obStatus(a0)
0001BBB6 6600                       		bne.s	loc_18A7C
0001BBB8 4468 0010                  		neg.w	obVelX(a0)
0001BBBC 0C40 2008                  		cmpi.w	#$2008,d0
0001BBC0 6E00                       		bgt.s	loc_18A88
0001BBC2 6000                       		bra.s	loc_18A82
0001BBC4                            ; ===========================================================================
0001BBC4                            
0001BBC4                            loc_18A7C:
0001BBC4 0C40 2138                  		cmpi.w	#$2138,d0
0001BBC8 6D00                       		blt.s	loc_18A88
0001BBCA                            
0001BBCA                            loc_18A82:
0001BBCA 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BBD0                            
0001BBD0                            loc_18A88:
0001BBD0 3028 0008                  		move.w	8(a0),d0
0001BBD4 72FF                       		moveq	#-1,d1
0001BBD6 7402                       		moveq	#2,d2
0001BBD8 45E8 002A                  		lea	$2A(a0),a2
0001BBDC 7828                       		moveq	#$28,d4
0001BBDE 4A68 0010                  		tst.w	obVelX(a0)
0001BBE2 6A00                       		bpl.s	loc_18A9E
0001BBE4 4444                       		neg.w	d4
0001BBE6                            
0001BBE6                            loc_18A9E:
0001BBE6 321A                       		move.w	(a2)+,d1
0001BBE8 2641                       		movea.l	d1,a3
0001BBEA 082B 0003 0022             		btst	#3,obStatus(a3)
0001BBF0 6600                       		bne.s	loc_18AB4
0001BBF2 362B 0008                  		move.w	8(a3),d3
0001BBF6 D644                       		add.w	d4,d3
0001BBF8 9640                       		sub.w	d0,d3
0001BBFA 6700                       		beq.s	loc_18AC0
0001BBFC                            
0001BBFC                            loc_18AB4:
0001BBFC 51CA FFE8                  		dbf	d2,loc_18A9E
0001BC00                            
0001BC00 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC04 6000 FF0C                  		bra.w	loc_189CA
0001BC08                            ; ===========================================================================
0001BC08                            
0001BC08                            loc_18AC0:
0001BC08 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC0C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC10 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BC16 6000 FEFA                  		bra.w	loc_189CA
0001BC1A                            ; ===========================================================================
0001BC1A                            
0001BC1A                            Obj7A_MakeBall:
0001BC1A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BC20 6600                       		bne.s	loc_18B36
0001BC22 70FF                       		moveq	#-1,d0
0001BC24 1028 0028                  		move.b	obSubtype(a0),d0
0001BC28 4880                       		ext.w	d0
0001BC2A 6B00                       		bmi.s	loc_18B40
0001BC2C 5540                       		subq.w	#2,d0
0001BC2E 4440                       		neg.w	d0
0001BC30 D040                       		add.w	d0,d0
0001BC32 43E8 002A                  		lea	$2A(a0),a1
0001BC36 3031 0000                  		move.w	(a1,d0.w),d0
0001BC3A 2440                       		movea.l	d0,a2
0001BC3C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BC40 723E                       		moveq	#$3E,d1
0001BC42                            
0001BC42                            loc_18AFA:
0001BC42 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BC46 6700                       		beq.s	loc_18B40
0001BC48 D2FC 0040                  		adda.w	#$40,a1
0001BC4C 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BC50                            
0001BC50 2F08                       		move.l	a0,-(sp)
0001BC52 41D2                       		lea	(a2),a0
0001BC54 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001BC5A 205F                       		movea.l	(sp)+,a0
0001BC5C 6600                       		bne.s	loc_18B40
0001BC5E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BC62 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BC68 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BC6E 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BC74 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BC7A 234A 003C                  		move.l	a2,$3C(a1)
0001BC7E                            
0001BC7E                            loc_18B36:
0001BC7E 5328 003C                  		subq.b	#1,$3C(a0)
0001BC82 6700                       		beq.s	loc_18B40
0001BC84 6000 FEC0                  		bra.w	loc_189FE
0001BC88                            ; ===========================================================================
0001BC88                            
0001BC88                            loc_18B40:
0001BC88 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BC8C 6000 FE84                  		bra.w	loc_189CA
0001BC90                            ; ===========================================================================
0001BC90                            
0001BC90                            loc_18B48:
0001BC90 5328 003C                  		subq.b	#1,$3C(a0)
0001BC94 6B00                       		bmi.s	loc_18B52
0001BC96 6000 ECDE                  		bra.w	BossDefeated
0001BC9A                            ; ===========================================================================
0001BC9A                            
0001BC9A                            loc_18B52:
0001BC9A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC9E 4268 0012                  		clr.w	obVelY(a0)
0001BCA2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCA8 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BCAE 4268 0010                  		clr.w	obVelX(a0)
0001BCB2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BCB8 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BCBC 6600                       		bne.s	loc_18B7C
0001BCBE 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BCC4                            
0001BCC4                            loc_18B7C:
0001BCC4 6000 FE80                  		bra.w	loc_189FE
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            loc_18B80:
0001BCC8 5228 003C                  		addq.b	#1,$3C(a0)
0001BCCC 6700                       		beq.s	loc_18B90
0001BCCE 6A00                       		bpl.s	loc_18B96
0001BCD0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BCD6 6000                       		bra.s	loc_18BC2
0001BCD8                            ; ===========================================================================
0001BCD8                            
0001BCD8                            loc_18B90:
0001BCD8 4268 0012                  		clr.w	obVelY(a0)
0001BCDC 6000                       		bra.s	loc_18BC2
0001BCDE                            ; ===========================================================================
0001BCDE                            
0001BCDE                            loc_18B96:
0001BCDE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BCE4 6500                       		bcs.s	loc_18BAE
0001BCE6 6700                       		beq.s	loc_18BB4
0001BCE8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BCEE 6500                       		bcs.s	loc_18BC2
0001BCF0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCF4 6000                       		bra.s	loc_18BC2
0001BCF6                            ; ===========================================================================
0001BCF6                            
0001BCF6                            loc_18BAE:
0001BCF6 5168 0012                  		subq.w	#8,obVelY(a0)
0001BCFA 6000                       		bra.s	loc_18BC2
0001BCFC                            ; ===========================================================================
0001BCFC                            
0001BCFC                            loc_18BB4:
0001BCFC 4268 0012                          	clr.w    obVelY(a0)
0001BD00 4A38 FE2D                          	tst.b     (v_invinc).w
0001BD04 6600                               	bne.s   @boss_invinc
0001BD06                            
0001BD06 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BD0A 6000 0000                          	bra.w      @boss_play
0001BD0E                            
0001BD0E                            	@boss_invinc:
0001BD0E 103C 0000                          	move.b #bgm_Invincible,d0
0001BD12                            
0001BD12                            	@boss_play:
0001BD12 4EB8 124E                          	jsr PlaySound
0001BD16                            
0001BD16                            loc_18BC2:
0001BD16 6000 FE1E                  		bra.w	loc_189EE
0001BD1A                            ; ===========================================================================
0001BD1A                            
0001BD1A                            loc_18BC6:
0001BD1A 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD20 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD26 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BD2C 6400                       		bcc.s	loc_18BE0
0001BD2E 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD32 6000                       		bra.s	loc_18BE8
0001BD34                            ; ===========================================================================
0001BD34                            
0001BD34                            loc_18BE0:
0001BD34 4A28 0001                  		tst.b	obRender(a0)
0001BD38 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BD3C                            
0001BD3C                            loc_18BE8:
0001BD3C 6100 EC7A                  		bsr.w	BossMove
0001BD40 6000 FDD0                  		bra.w	loc_189CA
0001BD44                            ; ===========================================================================
0001BD44                            
0001BD44                            Obj7A_FaceMain:	; Routine 4
0001BD44 7000                       		moveq	#0,d0
0001BD46 7201                       		moveq	#1,d1
0001BD48 2268 0034                  		movea.l	$34(a0),a1
0001BD4C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BD50 0C00 0006                  		cmpi.b	#6,d0
0001BD54 6B00                       		bmi.s	loc_18C06
0001BD56 720A                       		moveq	#$A,d1
0001BD58 6000                       		bra.s	loc_18C1A
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            loc_18C06:
0001BD5A 4A29 0020                  		tst.b	obColType(a1)
0001BD5E 6600                       		bne.s	loc_18C10
0001BD60 7205                       		moveq	#5,d1
0001BD62 6000                       		bra.s	loc_18C1A
0001BD64                            ; ===========================================================================
0001BD64                            
0001BD64                            loc_18C10:
0001BD64 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BD6A 6500                       		bcs.s	loc_18C1A
0001BD6C 7204                       		moveq	#4,d1
0001BD6E                            
0001BD6E                            loc_18C1A:
0001BD6E 1141 001C                  		move.b	d1,obAnim(a0)
0001BD72 0C00 000A                  		cmpi.b	#$A,d0
0001BD76 6600                       		bne.s	loc_18C32
0001BD78 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BD7E 4A28 0001                  		tst.b	obRender(a0)
0001BD82 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BD86                            
0001BD86                            loc_18C32:
0001BD86 6000                       		bra.s	loc_18C6C
0001BD88                            ; ===========================================================================
0001BD88                            
0001BD88                            Obj7A_FlameMain:; Routine 6
0001BD88 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BD8E 2268 0034                  		movea.l	$34(a0),a1
0001BD92 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BD98 6600                       		bne.s	loc_18C56
0001BD9A 4A28 0001                  		tst.b	obRender(a0)
0001BD9E 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BDA2 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BDA8 6000                       		bra.s	loc_18C6C
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_18C56:
0001BDAA 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BDB0 6E00                       		bgt.s	loc_18C6C
0001BDB2 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BDB8 6D00                       		blt.s	loc_18C6C
0001BDBA 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDC0                            
0001BDC0                            loc_18C6C:
0001BDC0 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001BDC6 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001BDCC                            
0001BDCC                            loc_18C78:
0001BDCC 2268 0034                  		movea.l	$34(a0),a1
0001BDD0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BDD6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BDDC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BDE2 7003                       		moveq	#3,d0
0001BDE4 C028 0022                  		and.b	obStatus(a0),d0
0001BDE8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BDEE 8128 0001                  		or.b	d0,obRender(a0)
0001BDF2 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001BDF8                            ; ===========================================================================
0001BDF8                            
0001BDF8                            Obj7A_TubeMain:	; Routine 8
0001BDF8 2268 0034                  		movea.l	$34(a0),a1
0001BDFC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE02 6600                       		bne.s	loc_18CB8
0001BE04 4A28 0001                  		tst.b	obRender(a0)
0001BE08 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BE0C                            
0001BE0C                            loc_18CB8:
0001BE0C 217C 0001 AF0C 0004        		move.l	#Map_BossItems,obMap(a0)
0001BE14 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BE1A 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BE20 60AA                       		bra.s	loc_18C78
0001BE20 60AA                       		bra.s	loc_18C78
0001BE22                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BE22                            ; ---------------------------------------------------------------------------
0001BE22                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BE22                            ; ---------------------------------------------------------------------------
0001BE22                            
0001BE22                            BossSpikeball:
0001BE22 7000                       		moveq	#0,d0
0001BE24 1028 0024                  		move.b	obRoutine(a0),d0
0001BE28 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BE2C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BE30 3028 0030                  		move.w	$30(a0),d0
0001BE34 0240 FF80                  		andi.w	#$FF80,d0
0001BE38 3238 F700                  		move.w	(v_screenposx).w,d1
0001BE3C 0441 0080                  		subi.w	#$80,d1
0001BE40 0241 FF80                  		andi.w	#$FF80,d1
0001BE44 9041                       		sub.w	d1,d0
0001BE46 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BE4A 0C40 0280                  		cmpi.w	#$280,d0
0001BE4E 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BE52 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001BE58                            ; ===========================================================================
0001BE58 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BE5A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BE5C 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BE5E 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BE60 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BE62 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BE64                            ; ===========================================================================
0001BE64                            
0001BE64                            Obj7B_Main:	; Routine 0
0001BE64 217C 0001 3DFA 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BE6C 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BE72 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE78 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BE7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BE84 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BE8A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BE90 2268 003C                  		movea.l	$3C(a0),a1
0001BE94 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BE9A 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BEA0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BEA6 3028 0008                  		move.w	obX(a0),d0
0001BEAA B069 0008                  		cmp.w	obX(a1),d0
0001BEAE 6E00                       		bgt.s	loc_18D68
0001BEB0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEB6 117C 0002 003A             		move.b	#2,$3A(a0)
0001BEBC                            
0001BEBC                            loc_18D68:
0001BEBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEC0                            
0001BEC0                            Obj7B_Fall:	; Routine 2
0001BEC0 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001BEC6 2268 003C                  		movea.l	$3C(a0),a1
0001BECA 45F9 0000 0000             		lea	(word_19018).l,a2
0001BED0 7000                       		moveq	#0,d0
0001BED2 1029 001A                  		move.b	obFrame(a1),d0
0001BED6 3228 0008                  		move.w	8(a0),d1
0001BEDA 9268 0030                  		sub.w	$30(a0),d1
0001BEDE 6400                       		bcc.s	loc_18D8E
0001BEE0 5440                       		addq.w	#2,d0
0001BEE2                            
0001BEE2                            loc_18D8E:
0001BEE2 D040                       		add.w	d0,d0
0001BEE4 3228 0034                  		move.w	$34(a0),d1
0001BEE8 D272 0000                  		add.w	(a2,d0.w),d1
0001BEEC B268 000C                  		cmp.w	obY(a0),d1
0001BEF0 6E00                       		bgt.s	locret_18DC4
0001BEF2 2268 003C                  		movea.l	$3C(a0),a1
0001BEF6 7202                       		moveq	#2,d1
0001BEF8 0828 0000 0022             		btst	#0,obStatus(a0)
0001BEFE 6700                       		beq.s	loc_18DAE
0001BF00 7200                       		moveq	#0,d1
0001BF02                            
0001BF02                            loc_18DAE:
0001BF02 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BF08 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BF0E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF14 6000 0000                  		bra.w	loc_18FA2
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            locret_18DC4:
0001BF18 4E75                       		rts	
0001BF1A                            ; ===========================================================================
0001BF1A                            
0001BF1A                            loc_18DC6:	; Routine 4
0001BF1A 2268 003C                  		movea.l	$3C(a0),a1
0001BF1E 7000                       		moveq	#0,d0
0001BF20 1028 003A                  		move.b	$3A(a0),d0
0001BF24 9029 003A                  		sub.b	$3A(a1),d0
0001BF28 6700                       		beq.s	loc_18E2A
0001BF2A 6400                       		bcc.s	loc_18DDA
0001BF2C 4400                       		neg.b	d0
0001BF2E                            
0001BF2E                            loc_18DDA:
0001BF2E 323C F7E8                  		move.w	#-$818,d1
0001BF32 343C FEEC                  		move.w	#-$114,d2
0001BF36 0C00 0001                  		cmpi.b	#1,d0
0001BF3A 6700                       		beq.s	loc_18E00
0001BF3C 323C F6A0                  		move.w	#-$960,d1
0001BF40 343C FF0C                  		move.w	#-$F4,d2
0001BF44 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BF4A 6D00                       		blt.s	loc_18E00
0001BF4C 323C F5E0                  		move.w	#-$A20,d1
0001BF50 343C FF80                  		move.w	#-$80,d2
0001BF54                            
0001BF54                            loc_18E00:
0001BF54 3141 0012                  		move.w	d1,obVelY(a0)
0001BF58 3142 0010                  		move.w	d2,obVelX(a0)
0001BF5C 3028 0008                  		move.w	obX(a0),d0
0001BF60 9068 0030                  		sub.w	$30(a0),d0
0001BF64 6400                       		bcc.s	loc_18E16
0001BF66 4468 0010                  		neg.w	obVelX(a0)
0001BF6A                            
0001BF6A                            loc_18E16:
0001BF6A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF70 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BF76 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF7A 6000 0000                  		bra.w	loc_18EAA
0001BF7E                            ; ===========================================================================
0001BF7E                            
0001BF7E                            loc_18E2A:
0001BF7E 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF84 7000                       		moveq	#0,d0
0001BF86 1029 001A                  		move.b	obFrame(a1),d0
0001BF8A 343C 0028                  		move.w	#$28,d2
0001BF8E 3228 0008                  		move.w	obX(a0),d1
0001BF92 9268 0030                  		sub.w	$30(a0),d1
0001BF96 6400                       		bcc.s	loc_18E48
0001BF98 4442                       		neg.w	d2
0001BF9A 5440                       		addq.w	#2,d0
0001BF9C                            
0001BF9C                            loc_18E48:
0001BF9C D040                       		add.w	d0,d0
0001BF9E 3228 0034                  		move.w	$34(a0),d1
0001BFA2 D272 0000                  		add.w	(a2,d0.w),d1
0001BFA6 3141 000C                  		move.w	d1,obY(a0)
0001BFAA D468 0030                  		add.w	$30(a0),d2
0001BFAE 3142 0008                  		move.w	d2,obX(a0)
0001BFB2 4268 000E                  		clr.w	obY+2(a0)
0001BFB6 4268 000A                  		clr.w	obX+2(a0)
0001BFBA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BFBE 6600                       		bne.s	loc_18E7A
0001BFC0 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BFC6 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BFCC 4E75                       		rts	
0001BFCE                            ; ===========================================================================
0001BFCE                            
0001BFCE                            loc_18E7A:
0001BFCE 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BFD4 6600                       		bne.s	loc_18E88
0001BFD6 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BFDC                            
0001BFDC                            loc_18E88:
0001BFDC 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BFE2 6600                       		bne.s	loc_18E96
0001BFE4 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BFEA                            
0001BFEA                            loc_18E96:
0001BFEA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BFEE 6E00                       		bgt.s	locret_18EA8
0001BFF0 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BFF6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BFFC                            
0001BFFC                            locret_18EA8:
0001BFFC 4E75                       		rts	
0001BFFE                            ; ===========================================================================
0001BFFE                            
0001BFFE                            loc_18EAA:	; Routine 6
0001BFFE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C002 707A                       		moveq	#id_BossStarLight,d0
0001C004 7240                       		moveq	#$40,d1
0001C006 743E                       		moveq	#$3E,d2
0001C008                            
0001C008                            loc_18EB4:
0001C008 B011                       		cmp.b	(a1),d0
0001C00A 6700                       		beq.s	loc_18EC0
0001C00C D2C1                       		adda.w	d1,a1
0001C00E 51CA FFF8                  		dbf	d2,loc_18EB4
0001C012                            
0001C012 6000                       		bra.s	loc_18F38
0001C014                            ; ===========================================================================
0001C014                            
0001C014                            loc_18EC0:
0001C014 3029 0008                  		move.w	obX(a1),d0
0001C018 3229 000C                  		move.w	obY(a1),d1
0001C01C 3428 0008                  		move.w	obX(a0),d2
0001C020 3628 000C                  		move.w	obY(a0),d3
0001C024 45FA 0000                  		lea	byte_19022(pc),a2
0001C028 47FA 0000                  		lea	byte_19026(pc),a3
0001C02C 181A                       		move.b	(a2)+,d4
0001C02E 4884                       		ext.w	d4
0001C030 D044                       		add.w	d4,d0
0001C032 181B                       		move.b	(a3)+,d4
0001C034 4884                       		ext.w	d4
0001C036 D444                       		add.w	d4,d2
0001C038 B440                       		cmp.w	d0,d2
0001C03A 6500                       		bcs.s	loc_18F38
0001C03C 181A                       		move.b	(a2)+,d4
0001C03E 4884                       		ext.w	d4
0001C040 D044                       		add.w	d4,d0
0001C042 181B                       		move.b	(a3)+,d4
0001C044 4884                       		ext.w	d4
0001C046 D444                       		add.w	d4,d2
0001C048 B042                       		cmp.w	d2,d0
0001C04A 6500                       		bcs.s	loc_18F38
0001C04C 181A                       		move.b	(a2)+,d4
0001C04E 4884                       		ext.w	d4
0001C050 D244                       		add.w	d4,d1
0001C052 181B                       		move.b	(a3)+,d4
0001C054 4884                       		ext.w	d4
0001C056 D644                       		add.w	d4,d3
0001C058 B641                       		cmp.w	d1,d3
0001C05A 6500                       		bcs.s	loc_18F38
0001C05C 181A                       		move.b	(a2)+,d4
0001C05E 4884                       		ext.w	d4
0001C060 D244                       		add.w	d4,d1
0001C062 181B                       		move.b	(a3)+,d4
0001C064 4884                       		ext.w	d4
0001C066 D644                       		add.w	d4,d3
0001C068 B243                       		cmp.w	d3,d1
0001C06A 6500                       		bcs.s	loc_18F38
0001C06C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C070 4268 0028                  		clr.w	obSubtype(a0)
0001C074 4229 0020                  		clr.b	obColType(a1)
0001C078 5329 0021                  		subq.b	#1,obColProp(a1)
0001C07C 6600                       		bne.s	loc_18F38
0001C07E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C084 4268 0010                  		clr.w	obVelX(a0)
0001C088 4268 0012                  		clr.w	obVelY(a0)
0001C08C                            
0001C08C                            loc_18F38:
0001C08C 4A68 0012                  		tst.w	obVelY(a0)
0001C090 6A00                       		bpl.s	loc_18F5C
0001C092 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001C098 3028 0034                  		move.w	$34(a0),d0
0001C09C 0440 002F                  		subi.w	#$2F,d0
0001C0A0 B068 000C                  		cmp.w	obY(a0),d0
0001C0A4 6E00                       		bgt.s	loc_18F58
0001C0A6 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001C0AC                            
0001C0AC                            loc_18F58:
0001C0AC 6000 FF20                  		bra.w	loc_18E7A
0001C0B0                            ; ===========================================================================
0001C0B0                            
0001C0B0                            loc_18F5C:
0001C0B0 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001C0B6 2268 003C                  		movea.l	$3C(a0),a1
0001C0BA 45F9 0000 0000             		lea	(word_19018).l,a2
0001C0C0 7000                       		moveq	#0,d0
0001C0C2 1029 001A                  		move.b	obFrame(a1),d0
0001C0C6 3228 0008                  		move.w	obX(a0),d1
0001C0CA 9268 0030                  		sub.w	$30(a0),d1
0001C0CE 6400                       		bcc.s	loc_18F7E
0001C0D0 5440                       		addq.w	#2,d0
0001C0D2                            
0001C0D2                            loc_18F7E:
0001C0D2 D040                       		add.w	d0,d0
0001C0D4 3228 0034                  		move.w	$34(a0),d1
0001C0D8 D272 0000                  		add.w	(a2,d0.w),d1
0001C0DC B268 000C                  		cmp.w	obY(a0),d1
0001C0E0 6ECA                       		bgt.s	loc_18F58
0001C0E2 2268 003C                  		movea.l	$3C(a0),a1
0001C0E6 7202                       		moveq	#2,d1
0001C0E8 4A68 0010                  		tst.w	obVelX(a0)
0001C0EC 6B00                       		bmi.s	loc_18F9C
0001C0EE 7200                       		moveq	#0,d1
0001C0F0                            
0001C0F0                            loc_18F9C:
0001C0F0 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C0F6                            
0001C0F6                            loc_18FA2:
0001C0F6 1341 003A                  		move.b	d1,$3A(a1)
0001C0FA 1141 003A                  		move.b	d1,$3A(a0)
0001C0FE B229 001A                  		cmp.b	obFrame(a1),d1
0001C102 6700                       		beq.s	loc_19008
0001C104 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C10A 6700                       		beq.s	loc_19008
0001C10C 4229 0025                  		clr.b	ob2ndRout(a1)
0001C110 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C116 45F8 D000                  		lea	(v_objspace).w,a2
0001C11A 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C120 446A 0012                  		neg.w	obVelY(a2)
0001C124 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C12A 6600                       		bne.s	loc_18FDC
0001C12C E0EA 0012                  		asr	obVelY(a2)
0001C130                            
0001C130                            loc_18FDC:
0001C130 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C136 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C13C 422A 003C                  		clr.b	$3C(a2)
0001C140 2F08                       		move.l	a0,-(sp)
0001C142 41D2                       		lea	(a2),a0
0001C144 4EB9 0001 5FE0             		jsr	(Sonic_ChkRoll).l
0001C14A 205F                       		movea.l	(sp)+,a0
0001C14C 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C15C                            
0001C15C                            loc_19008:
0001C15C 4268 0010                  		clr.w	obVelX(a0)
0001C160 4268 0012                  		clr.w	obVelY(a0)
0001C164 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C168 6000 FE64                  		bra.w	loc_18E7A
0001C16C                            ; ===========================================================================
0001C16C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C176                            		even
0001C176 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C17A                            		even
0001C17A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C17E                            		even
0001C17E                            ; ===========================================================================
0001C17E                            
0001C17E                            Obj7B_Explode:	; Routine 8
0001C17E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C182 4228 0024                  		clr.b	obRoutine(a0)
0001C186 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C18C 6700                       		beq.s	Obj7B_MakeFrag
0001C18E 4E75                       		rts	
0001C190                            ; ===========================================================================
0001C190                            
0001C190                            Obj7B_MakeFrag:
0001C190 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C196 7203                       		moveq	#3,d1
0001C198 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C19C                            
0001C19C                            Obj7B_Loop:
0001C19C 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001C1A2 6600                       		bne.s	loc_1909A
0001C1A4 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C1A8 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C1AE 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C1B6 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C1BC 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C1C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1CE 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C1D2 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C1D6 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C1DC 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C1E2 08E9 0007 0001             		bset	#7,obRender(a1)
0001C1E8 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C1EE                            
0001C1EE                            loc_1909A:
0001C1EE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C1F2                            
0001C1F2 4E75                       		rts	
0001C1F4                            ; ===========================================================================
0001C1F4 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C1F8 FF60 FDC0                  		dc.w -$A0, -$240
0001C1FC 0100 FCC0                  		dc.w $100, -$340
0001C200 00A0 FDC0                  		dc.w $A0, -$240
0001C204                            ; ===========================================================================
0001C204                            
0001C204                            Obj7B_MoveFrag:	; Routine $A
0001C204 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001C20A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C210 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C216 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C21C 7004                       		moveq	#4,d0
0001C21E C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C222 E448                       		lsr.w	#2,d0
0001C224 1140 001A                  		move.b	d0,obFrame(a0)
0001C228 4A28 0001                  		tst.b	1(a0)
0001C22C 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C230 4E75                       		rts	
0001C230 4E75                       		rts	
0001C232                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            Map_BSBall_internal:
0001C232 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C234 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C236 01                         @fireball1:	dc.b 1
0001C237 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C23C 01                         @fireball2:	dc.b 1
0001C23D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C242                            		even
0001C242                            		even
0001C242                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C242                            ; ---------------------------------------------------------------------------
0001C242                            ; Object 75 - Eggman (SYZ)
0001C242                            ; ---------------------------------------------------------------------------
0001C242                            
0001C242                            BossSpringYard:
0001C242 7000                       		moveq	#0,d0
0001C244 1028 0024                  		move.b	obRoutine(a0),d0
0001C248 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C24C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C250                            ; ===========================================================================
0001C250 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C252 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C254 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C256 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C258 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C25A                            
0001C25A 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C25E 0401 0280                  		dc.b 4,	1, $02, $80
0001C262 0607 0280                  		dc.b 6,	7, $02, $80
0001C266 0800 0280                  		dc.b 8,	0, $02, $80
0001C26A                            ; ===========================================================================
0001C26A                            
0001C26A                            Obj75_Main:	; Routine 0
0001C26A 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C270 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C276 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C27C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C282 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C288 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C28E 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C292 2248                       		movea.l	a0,a1
0001C294 7203                       		moveq	#3,d1
0001C296 6000                       		bra.s	Obj75_LoadBoss
0001C298                            ; ===========================================================================
0001C298                            
0001C298                            Obj75_Loop:
0001C298 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001C29E 6600                       		bne.s	Obj75_ShipMain
0001C2A0 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C2A4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2B0                            
0001C2B0                            Obj75_LoadBoss:
0001C2B0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2B6 4229 0025                  		clr.b	ob2ndRout(a1)
0001C2BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C2BE 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C2C2 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C2C6 237C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a1)
0001C2CE 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C2D4 137C 0004 0001             		move.b	#4,obRender(a1)
0001C2DA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C2E0 2348 0034                  		move.l	a0,$34(a1)
0001C2E4 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C2E8                            
0001C2E8                            Obj75_ShipMain:	; Routine 2
0001C2E8 7000                       		moveq	#0,d0
0001C2EA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C2EE 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C2F2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C2F6 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001C2FC 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001C302 7003                       		moveq	#3,d0
0001C304 C028 0022                  		and.b	obStatus(a0),d0
0001C308 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C30E 8128 0001                  		or.b	d0,obRender(a0)
0001C312 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001C318                            ; ===========================================================================
0001C318 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C31C 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C320 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C324                            ; ===========================================================================
0001C324                            
0001C324                            loc_191CC:
0001C324 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C32A 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C330 6400                       		bcc.s	loc_191DE
0001C332 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C336                            
0001C336                            loc_191DE:
0001C336 1028 003F                  		move.b	$3F(a0),d0
0001C33A 5428 003F                  		addq.b	#2,$3F(a0)
0001C33E 4EB9 0000 3A36             		jsr	(CalcSine).l
0001C344 E440                       		asr.w	#2,d0
0001C346 3140 0012                  		move.w	d0,obVelY(a0)
0001C34A                            
0001C34A                            loc_191F2:
0001C34A 6100 E66C                  		bsr.w	BossMove
0001C34E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C354 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C35A                            
0001C35A                            loc_19202:
0001C35A 3028 0008                  		move.w	8(a0),d0
0001C35E 0440 2C00                  		subi.w	#$2C00,d0
0001C362 EA48                       		lsr.w	#5,d0
0001C364 1140 0034                  		move.b	d0,$34(a0)
0001C368 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C36E 6400                       		bcc.s	locret_19256
0001C370 4A28 0022                  		tst.b	obStatus(a0)
0001C374 6B00                       		bmi.s	loc_19258
0001C376 4A28 0020                  		tst.b	obColType(a0)
0001C37A 6600                       		bne.s	locret_19256
0001C37C 4A28 003E                  		tst.b	$3E(a0)
0001C380 6600                       		bne.s	loc_1923A
0001C382 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C392                            
0001C392                            loc_1923A:
0001C392 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C396 7000                       		moveq	#0,d0
0001C398 4A51                       		tst.w	(a1)
0001C39A 6600                       		bne.s	loc_19248
0001C39C 303C 0EEE                  		move.w	#cWhite,d0
0001C3A0                            
0001C3A0                            loc_19248:
0001C3A0 3280                       		move.w	d0,(a1)
0001C3A2 5328 003E                  		subq.b	#1,$3E(a0)
0001C3A6 6600                       		bne.s	locret_19256
0001C3A8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3AE                            
0001C3AE                            locret_19256:
0001C3AE 4E75                       		rts	
0001C3B0                            ; ===========================================================================
0001C3B0                            
0001C3B0                            loc_19258:
0001C3B0 7064                       		moveq	#100,d0
0001C3B2 6100 0000                  		bsr.w	AddPoints
0001C3B6 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C3BC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C3C2 4268 0010                  		clr.w	obVelX(a0)
0001C3C6 4E75                       		rts	
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            loc_19270:
0001C3C8 3028 0030                  		move.w	$30(a0),d0
0001C3CC 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C3D2 0828 0000 0022             		btst	#0,obStatus(a0)
0001C3D8 6600                       		bne.s	loc_1928E
0001C3DA 4468 0010                  		neg.w	obVelX(a0)
0001C3DE 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C3E2 6E00                       		bgt.s	loc_1929E
0001C3E4 6000                       		bra.s	loc_19294
0001C3E6                            ; ===========================================================================
0001C3E6                            
0001C3E6                            loc_1928E:
0001C3E6 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C3EA 6D00                       		blt.s	loc_1929E
0001C3EC                            
0001C3EC                            loc_19294:
0001C3EC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C3F2 4228 003D                  		clr.b	$3D(a0)
0001C3F6                            
0001C3F6                            loc_1929E:
0001C3F6 0440 2C10                  		subi.w	#$2C10,d0
0001C3FA 0240 001F                  		andi.w	#$1F,d0
0001C3FE 0440 001F                  		subi.w	#$1F,d0
0001C402 6A00                       		bpl.s	loc_192AE
0001C404 4440                       		neg.w	d0
0001C406                            
0001C406                            loc_192AE:
0001C406 5340                       		subq.w	#1,d0
0001C408 6E00                       		bgt.s	loc_192E8
0001C40A 4A28 003D                  		tst.b	$3D(a0)
0001C40E 6600                       		bne.s	loc_192E8
0001C410 3238 D008                  		move.w	(v_player+obX).w,d1
0001C414 0441 2C00                  		subi.w	#$2C00,d1
0001C418 EA41                       		asr.w	#5,d1
0001C41A B228 0034                  		cmp.b	$34(a0),d1
0001C41E 6600                       		bne.s	loc_192E8
0001C420 7000                       		moveq	#0,d0
0001C422 1028 0034                  		move.b	$34(a0),d0
0001C426 EB40                       		asl.w	#5,d0
0001C428 0640 2C10                  		addi.w	#$2C10,d0
0001C42C 3140 0030                  		move.w	d0,$30(a0)
0001C430 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C434 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C438 4268 0028                  		clr.w	obSubtype(a0)
0001C43C 4268 0010                  		clr.w	obVelX(a0)
0001C440                            
0001C440                            loc_192E8:
0001C440 6000 FEF4                  		bra.w	loc_191DE
0001C444                            ; ===========================================================================
0001C444                            
0001C444                            loc_192EC:
0001C444 7000                       		moveq	#0,d0
0001C446 1028 0028                  		move.b	obSubtype(a0),d0
0001C44A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C44E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C452                            ; ===========================================================================
0001C452 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C454 0000                       		dc.w loc_19348-off_192FA
0001C456 0000                       		dc.w loc_1938E-off_192FA
0001C458 0000                       		dc.w loc_193D0-off_192FA
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            loc_19302:
0001C45A 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C460 3028 0038                  		move.w	$38(a0),d0
0001C464 0C40 0556                  		cmpi.w	#$556,d0
0001C468 6500                       		bcs.s	loc_19344
0001C46A 317C 0556 0038             		move.w	#$556,$38(a0)
0001C470 4268 003C                  		clr.w	$3C(a0)
0001C474 70FF                       		moveq	#-1,d0
0001C476 3028 0036                  		move.w	$36(a0),d0
0001C47A 6700                       		beq.s	loc_1933C
0001C47C 2240                       		movea.l	d0,a1
0001C47E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C484 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C48A 2348 0034                  		move.l	a0,$34(a1)
0001C48E 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C494                            
0001C494                            loc_1933C:
0001C494 4268 0012                  		clr.w	obVelY(a0)
0001C498 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C49C                            
0001C49C                            loc_19344:
0001C49C 6000 FEAC                  		bra.w	loc_191F2
0001C4A0                            ; ===========================================================================
0001C4A0                            
0001C4A0                            loc_19348:
0001C4A0 5368 003C                  		subq.w	#1,$3C(a0)
0001C4A4 6A00                       		bpl.s	loc_19366
0001C4A6 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4AA 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C4B0 4A68 0036                  		tst.w	$36(a0)
0001C4B4 6600                       		bne.s	loc_19362
0001C4B6 E0E8 0012                  		asr	obVelY(a0)
0001C4BA                            
0001C4BA                            loc_19362:
0001C4BA 7000                       		moveq	#0,d0
0001C4BC 6000                       		bra.s	loc_1937C
0001C4BE                            ; ===========================================================================
0001C4BE                            
0001C4BE                            loc_19366:
0001C4BE 7000                       		moveq	#0,d0
0001C4C0 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C4C6 6E00                       		bgt.s	loc_1937C
0001C4C8 7002                       		moveq	#2,d0
0001C4CA 0828 0001 003D             		btst	#1,$3D(a0)
0001C4D0 6700                       		beq.s	loc_1937C
0001C4D2 4440                       		neg.w	d0
0001C4D4                            
0001C4D4                            loc_1937C:
0001C4D4 D068 0038                  		add.w	$38(a0),d0
0001C4D8 3140 000C                  		move.w	d0,obY(a0)
0001C4DC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C4E2 6000 FE76                  		bra.w	loc_19202
0001C4E6                            ; ===========================================================================
0001C4E6                            
0001C4E6                            loc_1938E:
0001C4E6 303C 04DA                  		move.w	#$4DA,d0
0001C4EA 4A68 0036                  		tst.w	$36(a0)
0001C4EE 6700                       		beq.s	loc_1939C
0001C4F0 0440 0018                  		subi.w	#$18,d0
0001C4F4                            
0001C4F4                            loc_1939C:
0001C4F4 B068 0038                  		cmp.w	$38(a0),d0
0001C4F8 6D00                       		blt.s	loc_193BE
0001C4FA 317C 0008 003C             		move.w	#8,$3C(a0)
0001C500 4A68 0036                  		tst.w	$36(a0)
0001C504 6700                       		beq.s	loc_193B4
0001C506 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C50C                            
0001C50C                            loc_193B4:
0001C50C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C510 4268 0012                  		clr.w	obVelY(a0)
0001C514 6000                       		bra.s	loc_193CC
0001C516                            ; ===========================================================================
0001C516                            
0001C516                            loc_193BE:
0001C516 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C51C 6C00                       		bge.s	loc_193CC
0001C51E 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C524                            
0001C524                            loc_193CC:
0001C524 6000 FE24                  		bra.w	loc_191F2
0001C528                            ; ===========================================================================
0001C528                            
0001C528                            loc_193D0:
0001C528 5368 003C                  		subq.w	#1,$3C(a0)
0001C52C 6E00                       		bgt.s	loc_19406
0001C52E 6B00                       		bmi.s	loc_193EE
0001C530 70FF                       		moveq	#-1,d0
0001C532 3028 0036                  		move.w	$36(a0),d0
0001C536 6700                       		beq.s	loc_193E8
0001C538 2240                       		movea.l	d0,a1
0001C53A 137C 000A 0029             		move.b	#$A,$29(a1)
0001C540                            
0001C540                            loc_193E8:
0001C540 4268 0036                  		clr.w	$36(a0)
0001C544 6000                       		bra.s	loc_19406
0001C546                            ; ===========================================================================
0001C546                            
0001C546                            loc_193EE:
0001C546 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C54C 6600                       		bne.s	loc_19406
0001C54E 4228 0029                  		clr.b	$29(a0)
0001C552 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C556 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C55C 6000                       		bra.s	loc_19446
0001C55E                            ; ===========================================================================
0001C55E                            
0001C55E                            loc_19406:
0001C55E 7001                       		moveq	#1,d0
0001C560 4A68 0036                  		tst.w	$36(a0)
0001C564 6700                       		beq.s	loc_19410
0001C566 7002                       		moveq	#2,d0
0001C568                            
0001C568                            loc_19410:
0001C568 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C56E 6700                       		beq.s	loc_19424
0001C570 6D00                       		blt.s	loc_1941C
0001C572 4440                       		neg.w	d0
0001C574                            
0001C574                            loc_1941C:
0001C574 4A68 0036                  		tst.w	$36(a0)
0001C578 D168 0038                  		add.w	d0,$38(a0)
0001C57C                            
0001C57C                            loc_19424:
0001C57C 7000                       		moveq	#0,d0
0001C57E 4A68 0036                  		tst.w	$36(a0)
0001C582 6700                       		beq.s	loc_19438
0001C584 7002                       		moveq	#2,d0
0001C586 0828 0000 003D             		btst	#0,$3D(a0)
0001C58C 6700                       		beq.s	loc_19438
0001C58E 4440                       		neg.w	d0
0001C590                            
0001C590                            loc_19438:
0001C590 D068 0038                  		add.w	$38(a0),d0
0001C594 3140 000C                  		move.w	d0,obY(a0)
0001C598 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C59E                            
0001C59E                            loc_19446:
0001C59E 6000 FDBA                  		bra.w	loc_19202
0001C5A2                            
0001C5A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5A2                            
0001C5A2                            
0001C5A2                            Obj75_FindBlocks:
0001C5A2 4268 0036                  		clr.w	$36(a0)
0001C5A6 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5AA 703E                       		moveq	#$3E,d0
0001C5AC 7276                       		moveq	#$76,d1
0001C5AE 1428 0034                  		move.b	$34(a0),d2
0001C5B2                            
0001C5B2                            Obj75_FindLoop:
0001C5B2 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C5B4 6600                       		bne.s	loc_1946A	; if not, branch
0001C5B6 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C5BA 6600                       		bne.s	loc_1946A
0001C5BC 3149 0036                  		move.w	a1,$36(a0)
0001C5C0 6000                       		bra.s	locret_19472
0001C5C2                            ; ===========================================================================
0001C5C2                            
0001C5C2                            loc_1946A:
0001C5C2 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C5C6 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C5CA                            
0001C5CA                            locret_19472:
0001C5CA 4E75                       		rts	
0001C5CC                            ; End of function Obj75_FindBlocks
0001C5CC                            
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            loc_19474:
0001C5CC 5368 003C                  		subq.w	#1,$3C(a0)
0001C5D0 6B00                       		bmi.s	loc_1947E
0001C5D2 6000 E3A2                  		bra.w	BossDefeated
0001C5D6                            ; ===========================================================================
0001C5D6                            
0001C5D6                            loc_1947E:
0001C5D6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5DA 4268 0012                  		clr.w	obVelY(a0)
0001C5DE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C5E4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C5EA 4268 0010                  		clr.w	obVelX(a0)
0001C5EE 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C5F4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C5F8 6600                       		bne.s	loc_194A8
0001C5FA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C600                            
0001C600                            loc_194A8:
0001C600 6000 FD58                  		bra.w	loc_19202
0001C604                            ; ===========================================================================
0001C604                            
0001C604                            loc_194AC:
0001C604 5268 003C                  		addq.w	#1,$3C(a0)
0001C608 6700                       		beq.s	loc_194BC
0001C60A 6A00                       		bpl.s	loc_194C2
0001C60C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C612 6000                       		bra.s	loc_194EE
0001C614                            ; ===========================================================================
0001C614                            
0001C614                            loc_194BC:
0001C614 4268 0012                  		clr.w	obVelY(a0)
0001C618 6000                       		bra.s	loc_194EE
0001C61A                            ; ===========================================================================
0001C61A                            
0001C61A                            loc_194C2:
0001C61A 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C620 6500                       		bcs.s	loc_194DA
0001C622 6700                       		beq.s	loc_194E0
0001C624 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C62A 6500                       		bcs.s	loc_194EE
0001C62C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C630 6000                       		bra.s	loc_194EE
0001C632                            ; ===========================================================================
0001C632                            
0001C632                            loc_194DA:
0001C632 5168 0012                  		subq.w	#8,obVelY(a0)
0001C636 6000                       		bra.s	loc_194EE
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            loc_194E0:
0001C638 4268 0012                  		clr.w    obVelY(a0)
0001C63C 4A38 FE2D                          	tst.b     (v_invinc).w
0001C640 6600                               	bne.s   @boss_invinc
0001C642                            
0001C642 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C646 6000 0000                          	bra.w      @boss_play
0001C64A                            
0001C64A                            @boss_invinc:
0001C64A 103C 0000                          	move.b #bgm_Invincible,d0
0001C64E                            
0001C64E                            @boss_play:
0001C64E 4EB8 124E                          	jsr PlaySound
0001C652                            
0001C652                            loc_194EE:
0001C652 6000 FCF6                  		bra.w	loc_191F2
0001C656                            ; ===========================================================================
0001C656                            
0001C656                            loc_194F2:
0001C656 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C65C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C662 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C668 6400                       		bcc.s	loc_1950C
0001C66A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C66E 6000                       		bra.s	loc_19512
0001C670                            ; ===========================================================================
0001C670                            
0001C670                            loc_1950C:
0001C670 4A28 0001                  		tst.b	obRender(a0)
0001C674 6A00                       		bpl.s	Obj75_ShipDelete
0001C676                            
0001C676                            loc_19512:
0001C676 6100 E340                  		bsr.w	BossMove
0001C67A 6000 FCBA                  		bra.w	loc_191DE
0001C67E                            ; ===========================================================================
0001C67E                            
0001C67E                            Obj75_ShipDelete:
0001C67E 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C684                            ; ===========================================================================
0001C684                            
0001C684                            Obj75_FaceMain:	; Routine 4
0001C684 7201                       		moveq	#1,d1
0001C686 2268 0034                  		movea.l	$34(a0),a1
0001C68A 7000                       		moveq	#0,d0
0001C68C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C690 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C694 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C698 1141 001C                  		move.b	d1,obAnim(a0)
0001C69C 1010                       		move.b	(a0),d0
0001C69E B011                       		cmp.b	(a1),d0
0001C6A0 6600                       		bne.s	Obj75_FaceDelete
0001C6A2 6000                       		bra.s	loc_195BE
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            Obj75_FaceDelete:
0001C6A4 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C6AA                            ; ===========================================================================
0001C6AA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C6AE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C6B2 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C6B6                            ; ===========================================================================
0001C6B6                            
0001C6B6                            loc_19552:
0001C6B6 720A                       		moveq	#$A,d1
0001C6B8 4E75                       		rts	
0001C6BA                            ; ===========================================================================
0001C6BA                            
0001C6BA                            loc_19556:
0001C6BA 7206                       		moveq	#6,d1
0001C6BC 4E75                       		rts	
0001C6BE                            ; ===========================================================================
0001C6BE                            
0001C6BE                            loc_1955A:
0001C6BE 7000                       		moveq	#0,d0
0001C6C0 1029 0028                  		move.b	obSubtype(a1),d0
0001C6C4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C6C8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C6CC                            ; ===========================================================================
0001C6CC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C6D0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C6D4                            ; ===========================================================================
0001C6D4                            
0001C6D4                            loc_19570:
0001C6D4 6000                       		bra.s	loc_19574
0001C6D6                            ; ===========================================================================
0001C6D6                            
0001C6D6                            loc_19572:
0001C6D6 7206                       		moveq	#6,d1
0001C6D8                            
0001C6D8                            loc_19574:
0001C6D8 4A29 0020                  		tst.b	obColType(a1)
0001C6DC 6600                       		bne.s	loc_1957E
0001C6DE 7205                       		moveq	#5,d1
0001C6E0 4E75                       		rts	
0001C6E2                            ; ===========================================================================
0001C6E2                            
0001C6E2                            loc_1957E:
0001C6E2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C6E8 6500                       		bcs.s	locret_19588
0001C6EA 7204                       		moveq	#4,d1
0001C6EC                            
0001C6EC                            locret_19588:
0001C6EC 4E75                       		rts	
0001C6EE                            ; ===========================================================================
0001C6EE                            
0001C6EE                            Obj75_FlameMain:; Routine 6
0001C6EE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C6F4 2268 0034                  		movea.l	$34(a0),a1
0001C6F8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C6FE 6600                       		bne.s	loc_195AA
0001C700 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C706 4A28 0001                  		tst.b	1(a0)
0001C70A 6A00                       		bpl.s	Obj75_FlameDelete
0001C70C 6000                       		bra.s	loc_195B6
0001C70E                            ; ===========================================================================
0001C70E                            
0001C70E                            loc_195AA:
0001C70E 4A69 0010                  		tst.w	obVelX(a1)
0001C712 6700                       		beq.s	loc_195B6
0001C714 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C71A                            
0001C71A                            loc_195B6:
0001C71A 6000                       		bra.s	loc_195BE
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            Obj75_FlameDelete:
0001C71C 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C722                            ; ===========================================================================
0001C722                            
0001C722                            loc_195BE:
0001C722 43F9 0001 ADCC             		lea	(Ani_Eggman).l,a1
0001C728 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001C72E 2268 0034                  		movea.l	$34(a0),a1
0001C732 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C738 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C73E                            
0001C73E                            loc_195DA:
0001C73E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C744 7003                       		moveq	#3,d0
0001C746 C028 0022                  		and.b	obStatus(a0),d0
0001C74A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C750 8128 0001                  		or.b	d0,obRender(a0)
0001C754 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001C75A                            ; ===========================================================================
0001C75A                            
0001C75A                            Obj75_SpikeMain:; Routine 8
0001C75A 217C 0001 AF0C 0004        		move.l	#Map_BossItems,obMap(a0)
0001C762 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C768 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C76E 2268 0034                  		movea.l	$34(a0),a1
0001C772 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C778 6600                       		bne.s	loc_1961C
0001C77A 4A28 0001                  		tst.b	obRender(a0)
0001C77E 6A00                       		bpl.s	Obj75_SpikeDelete
0001C780                            
0001C780                            loc_1961C:
0001C780 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C786 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C78C 3028 003C                  		move.w	$3C(a0),d0
0001C790 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C796 6600                       		bne.s	loc_19652
0001C798 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C79E 6700                       		beq.s	loc_1964C
0001C7A0 4A29 0028                  		tst.b	obSubtype(a1)
0001C7A4 6600                       		bne.s	loc_19658
0001C7A6 0C40 0094                  		cmpi.w	#$94,d0
0001C7AA 6C00                       		bge.s	loc_19658
0001C7AC 5E40                       		addq.w	#7,d0
0001C7AE 6000                       		bra.s	loc_19658
0001C7B0                            ; ===========================================================================
0001C7B0                            
0001C7B0                            loc_1964C:
0001C7B0 4A69 003C                  		tst.w	$3C(a1)
0001C7B4 6A00                       		bpl.s	loc_19658
0001C7B6                            
0001C7B6                            loc_19652:
0001C7B6 4A40                       		tst.w	d0
0001C7B8 6F00                       		ble.s	loc_19658
0001C7BA 5B40                       		subq.w	#5,d0
0001C7BC                            
0001C7BC                            loc_19658:
0001C7BC 3140 003C                  		move.w	d0,$3C(a0)
0001C7C0 E440                       		asr.w	#2,d0
0001C7C2 D168 000C                  		add.w	d0,obY(a0)
0001C7C6 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C7CC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C7D2 4228 0020                  		clr.b	obColType(a0)
0001C7D6 2268 0034                  		movea.l	$34(a0),a1
0001C7DA 4A29 0020                  		tst.b	obColType(a1)
0001C7DE 6700                       		beq.s	loc_19688
0001C7E0 4A29 0029                  		tst.b	$29(a1)
0001C7E4 6600                       		bne.s	loc_19688
0001C7E6 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C7EC                            
0001C7EC                            loc_19688:
0001C7EC 6000 FF50                  		bra.w	loc_195DA
0001C7F0                            ; ===========================================================================
0001C7F0                            
0001C7F0                            Obj75_SpikeDelete:
0001C7F0 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C7F0 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C7F6                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C7F6                            ; ---------------------------------------------------------------------------
0001C7F6                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C7F6                            ; ---------------------------------------------------------------------------
0001C7F6                            
0001C7F6                            BossBlock:
0001C7F6 7000                       		moveq	#0,d0
0001C7F8 1028 0024                  		move.b	obRoutine(a0),d0
0001C7FC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C800 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C804                            ; ===========================================================================
0001C804 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C806 0000                       		dc.w Obj76_Action-Obj76_Index
0001C808 0000                       		dc.w loc_19762-Obj76_Index
0001C80A                            ; ===========================================================================
0001C80A                            
0001C80A                            Obj76_Main:	; Routine 0
0001C80A 7800                       		moveq	#0,d4
0001C80C 3A3C 2C10                  		move.w	#$2C10,d5
0001C810 7C09                       		moveq	#9,d6
0001C812 43D0                       		lea	(a0),a1
0001C814 6000                       		bra.s	Obj76_MakeBlock
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            Obj76_Loop:
0001C816 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001C81C 6600                       		bne.s	Obj76_ExitLoop
0001C81E                            
0001C81E                            Obj76_MakeBlock:
0001C81E 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C822 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C82A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C830 137C 0004 0001             		move.b	#4,obRender(a1)
0001C836 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C83C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C842 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C848 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C84C 337C 0582 000C             		move.w	#$582,obY(a1)
0001C852 3344 0028                  		move.w	d4,obSubtype(a1)
0001C856 0644 0101                  		addi.w	#$101,d4
0001C85A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C85E 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C862 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C866                            
0001C866                            Obj76_ExitLoop:
0001C866 4E75                       		rts	
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            Obj76_Action:	; Routine 2
0001C868 1028 0029                  		move.b	$29(a0),d0
0001C86C B028 0028                  		cmp.b	obSubtype(a0),d0
0001C870 6700                       		beq.s	Obj76_Solid
0001C872 4A00                       		tst.b	d0
0001C874 6B00                       		bmi.s	loc_19718
0001C876                            
0001C876                            loc_19712:
0001C876 6100 0000                  		bsr.w	Obj76_Break
0001C87A 6000                       		bra.s	Obj76_Display
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            loc_19718:
0001C87C 2268 0034                  		movea.l	$34(a0),a1
0001C880 4A29 0021                  		tst.b	obColProp(a1)
0001C884 67F0                       		beq.s	loc_19712
0001C886 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C88C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C892 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C898 B2C8                       		cmpa.w	a0,a1
0001C89A 6500                       		bcs.s	Obj76_Display
0001C89C 3029 0012                  		move.w	obVelY(a1),d0
0001C8A0 48C0                       		ext.l	d0
0001C8A2 E080                       		asr.l	#8,d0
0001C8A4 D168 000C                  		add.w	d0,obY(a0)
0001C8A8 6000                       		bra.s	Obj76_Display
0001C8AA                            ; ===========================================================================
0001C8AA                            
0001C8AA                            Obj76_Solid:
0001C8AA 323C 001B                  		move.w	#$1B,d1
0001C8AE 343C 0010                  		move.w	#$10,d2
0001C8B2 363C 0011                  		move.w	#$11,d3
0001C8B6 3828 0008                  		move.w	obX(a0),d4
0001C8BA 4EB9 0001 1D94             		jsr	(SolidObject).l
0001C8C0                            
0001C8C0                            Obj76_Display:
0001C8C0 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001C8C6                            ; ===========================================================================
0001C8C6                            
0001C8C6                            loc_19762:	; Routine 4
0001C8C6 4A28 0001                  		tst.b	obRender(a0)
0001C8CA 6A00                       		bpl.s	Obj76_Delete
0001C8CC 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001C8D2 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            Obj76_Delete:
0001C8D8 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C8DE                            
0001C8DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8DE                            
0001C8DE                            
0001C8DE                            Obj76_Break:
0001C8DE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C8E2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C8E6 7801                       		moveq	#1,d4
0001C8E8 7203                       		moveq	#3,d1
0001C8EA 7438                       		moveq	#$38,d2
0001C8EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C8F0 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C8F6 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C8FC 43D0                       		lea	(a0),a1
0001C8FE 6000                       		bra.s	Obj76_MakeFrag
0001C900                            ; ===========================================================================
0001C900                            
0001C900                            Obj76_LoopFrag:
0001C900 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001C906 6600                       		bne.s	loc_197D4
0001C908                            
0001C908                            Obj76_MakeFrag:
0001C908 45D0                       		lea	(a0),a2
0001C90A 47D1                       		lea	(a1),a3
0001C90C 7603                       		moveq	#3,d3
0001C90E                            
0001C90E                            loc_197AA:
0001C90E 26DA                       		move.l	(a2)+,(a3)+
0001C910 26DA                       		move.l	(a2)+,(a3)+
0001C912 26DA                       		move.l	(a2)+,(a3)+
0001C914 26DA                       		move.l	(a2)+,(a3)+
0001C916 51CB FFF6                  		dbf	d3,loc_197AA
0001C91A                            
0001C91A 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C91E 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C922 361D                       		move.w	(a5)+,d3
0001C924 D769 0008                  		add.w	d3,obX(a1)
0001C928 361D                       		move.w	(a5)+,d3
0001C92A D769 000C                  		add.w	d3,obY(a1)
0001C92E 1344 001A                  		move.b	d4,obFrame(a1)
0001C932 5244                       		addq.w	#1,d4
0001C934 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C938                            
0001C938                            loc_197D4:
0001C942                            ; End of function Obj76_Break
0001C942                            
0001C942                            ; ===========================================================================
0001C942 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C946 0180 FE00                  		dc.w $180, -$200
0001C94A FF00 FF00                  		dc.w -$100, -$100
0001C94E 0100 FF00                  		dc.w $100, -$100
0001C952 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C956 0010 0000                  		dc.w $10, 0
0001C95A 0000 0010                  		dc.w 0,	$10
0001C95E 0010 0010                  		dc.w $10, $10
0001C95E 0010 0010                  		dc.w $10, $10
0001C962                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C962                            ; ---------------------------------------------------------------------------
0001C962                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C962                            ; ---------------------------------------------------------------------------
0001C962                            Map_BossBlock_internal:
0001C962 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C964 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C966 0000                       		dc.w @topright-Map_BossBlock_internal
0001C968 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C96A 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C96C 02                         @wholeblock:	dc.b 2
0001C96D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C972 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C977 00                         		dc.b 0
0001C978 01                         @topleft:	dc.b 1
0001C979 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C97E 01                         @topright:	dc.b 1
0001C97F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C984 01                         @bottomleft:	dc.b 1
0001C985 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C98A 01                         @bottomright:	dc.b 1
0001C98B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C990                            		even
0001C990                            		even
0001C990                            
0001C990                            loc_1982C:
0001C990 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001C996                            
0001C996                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C996                            ; ---------------------------------------------------------------------------
0001C996                            ; Object 82 - Eggman (SBZ2)
0001C996                            ; ---------------------------------------------------------------------------
0001C996                            
0001C996                            ScrapEggman:
0001C996 7000                       		moveq	#0,d0
0001C998 1028 0024                  		move.b	obRoutine(a0),d0
0001C99C 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C9A0 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C9A4                            ; ===========================================================================
0001C9A4 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C9A6 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C9A8 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C9AA                            
0001C9AA 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C9AD 0400 03                    		dc.b 4,	0, 3
0001C9B0                            ; ===========================================================================
0001C9B0                            
0001C9B0                            SEgg_Main:	; Routine 0
0001C9B0 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C9B4 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C9BA 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C9C0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C9C6 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C9CC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C9D2 4228 0025                  		clr.b	ob2ndRout(a0)
0001C9D6 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C9DA 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C9DE 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C9E2 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C9EA 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C9F0 117C 0004 0001             		move.b	#4,obRender(a0)
0001C9F6 08E8 0007 0001             		bset	#7,obRender(a0)
0001C9FC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CA02 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001CA08 6600                       		bne.s	SEgg_Eggman
0001CA0A 2348 0034                  		move.l	a0,$34(a1)
0001CA0E 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CA12 337C 2130 0008             		move.w	#$2130,obX(a1)
0001CA18 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001CA1E 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA22 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CA26 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CA2A 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CA2E 237C 0000 E1B4 0004        		move.l	#Map_But,obMap(a1)
0001CA36 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CA3C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA42 08E9 0007 0001             		bset	#7,obRender(a1)
0001CA48 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA4E 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CA54                            
0001CA54                            SEgg_Eggman:	; Routine 2
0001CA54 7000                       		moveq	#0,d0
0001CA56 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA5A 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CA5E 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CA62 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CA66 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001CA6C 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CA72                            ; ===========================================================================
0001CA72 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CA74 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CA76 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CA78 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CA7A                            ; ===========================================================================
0001CA7A                            
0001CA7A                            SEgg_ChkSonic:
0001CA7A 3028 0008                  		move.w	obX(a0),d0
0001CA7E 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CA82 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CA86 6400                       		bcc.s	loc_19934	; if not, branch
0001CA88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA8C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CA92 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA98                            
0001CA98                            loc_19934:
0001CA98 4EF9 0000 F972             		jmp	(SpeedToPos).l
0001CA9E                            ; ===========================================================================
0001CA9E                            
0001CA9E                            SEgg_PreLeap:
0001CA9E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CAA2 6600                       		bne.s	loc_19954	; if time remains, branch
0001CAA4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAA8 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CAAE 5868 000C                  		addq.w	#4,obY(a0)
0001CAB2 317C 000F 003C             		move.w	#15,$3C(a0)
0001CAB8                            
0001CAB8                            loc_19954:
0001CAB8 60DE                       		bra.s	loc_19934
0001CABA                            ; ===========================================================================
0001CABA                            
0001CABA                            SEgg_Leap:
0001CABA 5368 003C                  		subq.w	#1,$3C(a0)
0001CABE 6E00                       		bgt.s	loc_199D0
0001CAC0 6600                       		bne.s	loc_1996A
0001CAC2 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CAC8 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CACE                            
0001CACE                            loc_1996A:
0001CACE 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001CAD4 6E00                       		bgt.s	loc_19976
0001CAD6 4268 0010                  		clr.w	obVelX(a0)
0001CADA                            
0001CADA                            loc_19976:
0001CADA 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CAE0 4A68 0012                  		tst.w	obVelY(a0)
0001CAE4 6B00                       		bmi.s	SEgg_FindBlocks
0001CAE6 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001CAEC 6500                       		bcs.s	SEgg_FindBlocks
0001CAEE 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CAF4 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001CAFA 6500                       		bcs.s	SEgg_FindBlocks
0001CAFC 317C 059B 000C             		move.w	#$59B,obY(a0)
0001CB02 4268 0012                  		clr.w	obVelY(a0)
0001CB06                            
0001CB06                            SEgg_FindBlocks:
0001CB06 3028 0010                  		move.w	obVelX(a0),d0
0001CB0A 8068 0012                  		or.w	obVelY(a0),d0
0001CB0E 6600                       		bne.s	loc_199D0
0001CB10 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CB14 703E                       		moveq	#$3E,d0
0001CB16 7240                       		moveq	#$40,d1
0001CB18                            
0001CB18                            SEgg_FindLoop:	
0001CB18 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CB1A 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CB1E 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CB22                            
0001CB22 6600                       		bne.s	loc_199D0
0001CB24 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CB2A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB2E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB34                            
0001CB34                            loc_199D0:
0001CB34 6000 FF62                  		bra.w	loc_19934
0001CB38                            ; ===========================================================================
0001CB38                            
0001CB38                            SEgg_Switch:	; Routine 4
0001CB38 7000                       		moveq	#0,d0
0001CB3A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB3E 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CB42 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CB46                            ; ===========================================================================
0001CB46 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CB48 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            loc_199E6:
0001CB4A 2268 0034                  		movea.l	$34(a0),a1
0001CB4E 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CB54 6600                       		bne.s	SEgg_SwDisplay
0001CB56 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CB5C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB60                            
0001CB60                            SEgg_SwDisplay:
0001CB60 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CB60 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CB66                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CB66                            ; ---------------------------------------------------------------------------
0001CB66                            ; Animation script - Eggman (SBZ2)
0001CB66                            ; ---------------------------------------------------------------------------
0001CB66 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CB68 0000                       		dc.w @laugh-Ani_SEgg
0001CB6A 0000                       		dc.w @jump1-Ani_SEgg
0001CB6C 0000                       		dc.w @intube-Ani_SEgg
0001CB6E 0000                       		dc.w @running-Ani_SEgg
0001CB70 0000                       		dc.w @jump2-Ani_SEgg
0001CB72 0000                       		dc.w @starjump-Ani_SEgg
0001CB74 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CB78 00                         		even
0001CB78 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CB7C 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CB84 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CB88 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CB8E 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CB94 00                         		even
0001CB94 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CB98 00                         		even
0001CB98 00                         		even
0001CB98                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CB98                            ; ---------------------------------------------------------------------------
0001CB98                            ; Sprite mappings - Eggman (SBZ2)
0001CB98                            ; ---------------------------------------------------------------------------
0001CB98                            Map_SEgg_internal:
0001CB98 0000                       		dc.w @stand-Map_SEgg_internal
0001CB9A 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CB9C 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CB9E 0000                       		dc.w @jump1-Map_SEgg_internal
0001CBA0 0000                       		dc.w @jump2-Map_SEgg_internal
0001CBA2 0000                       		dc.w @surprise-Map_SEgg_internal
0001CBA4 0000                       		dc.w @starjump-Map_SEgg_internal
0001CBA6 0000                       		dc.w @running1-Map_SEgg_internal
0001CBA8 0000                       		dc.w @running2-Map_SEgg_internal
0001CBAA 0000                       		dc.w @intube-Map_SEgg_internal
0001CBAC 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CBAE 03                         @stand:		dc.b 3
0001CBAF FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBB4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBB9 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBBE 04                         @laugh1:	dc.b 4
0001CBBF E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CBC4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBC9 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBCE FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBD3 00                         		dc.b 0
0001CBD4 04                         @laugh2:	dc.b 4
0001CBD5 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CBDA E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CBDF 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CBE4 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CBE9 00                         		dc.b 0
0001CBEA 04                         @jump1:		dc.b 4
0001CBEB F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CBF0 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CBF5 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CBFA EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CBFF 00                         		dc.b 0
0001CC00 04                         @jump2:		dc.b 4
0001CC01 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC06 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC0B 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CC10 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC15 00                         		dc.b 0
0001CC16 04                         @surprise:	dc.b 4
0001CC17 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC1C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC21 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC26 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CC2B 00                         		dc.b 0
0001CC2C 07                         @starjump:	dc.b 7
0001CC2D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC32 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC37 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC3C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC41 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC46 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CC4B F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CC50 05                         @running1:	dc.b 5
0001CC51 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC56 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC5B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC60 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC65 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC6A 06                         @running2:	dc.b 6
0001CC6B EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CC70 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CC75 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CC7A 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CC7F 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CC84 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CC89 00                         		dc.b 0
0001CC8A 08                         @intube:	dc.b 8
0001CC8B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CC90 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC95 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC9A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CC9F E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CCA4 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CCA9 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CCAE 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CCB3 03                         @cockpit:	dc.b 3
0001CCB4 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CCB9 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CCBE EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CCC4 00                         		even
0001CCC4 00                         		even
0001CCC4                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CCC4                            ; ---------------------------------------------------------------------------
0001CCC4                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CCC4                            ; ---------------------------------------------------------------------------
0001CCC4                            
0001CCC4                            FalseFloor:
0001CCC4 7000                       		moveq	#0,d0
0001CCC6 1028 0024                  		move.b	obRoutine(a0),d0
0001CCCA 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CCCE 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CCD2                            ; ===========================================================================
0001CCD2 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CCD4 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CCD6 0000                       		dc.w loc_19C36-FFloor_Index
0001CCD8 0000                       		dc.w loc_19C62-FFloor_Index
0001CCDA 0000                       		dc.w loc_19C72-FFloor_Index
0001CCDC 0000                       		dc.w loc_19C80-FFloor_Index
0001CCDE                            ; ===========================================================================
0001CCDE                            
0001CCDE                            FFloor_Main:	; Routine 0
0001CCDE 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CCE4 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CCEA 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CCF0 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CCF6 117C 0004 0001             		move.b	#4,obRender(a0)
0001CCFC 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD02 7800                       		moveq	#0,d4
0001CD04 3A3C 2010                  		move.w	#$2010,d5
0001CD08 7C07                       		moveq	#7,d6
0001CD0A 45E8 0030                  		lea	$30(a0),a2
0001CD0E                            
0001CD0E                            FFloor_MakeBlock:
0001CD0E 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001CD14 6600                       		bne.s	FFloor_ExitMake
0001CD16 34C9                       		move.w	a1,(a2)+
0001CD18 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CD1C 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CD24 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CD2A 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD30 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CD36 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CD3C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CD42 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CD46 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CD4C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CD50 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CD56 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CD5A                            
0001CD5A                            FFloor_ExitMake:
0001CD5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD5E 4E75                       		rts	
0001CD60                            ; ===========================================================================
0001CD60                            
0001CD60                            FFloor_ChkBreak:; Routine 2
0001CD60 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CD66 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CD68 4228 001A                  		clr.b	obFrame(a0)
0001CD6C 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CD70                            
0001CD70                            FFloor_Solid:
0001CD70 7000                       		moveq	#0,d0
0001CD72 1028 001A                  		move.b	obFrame(a0),d0
0001CD76 4400                       		neg.b	d0
0001CD78 4880                       		ext.w	d0
0001CD7A 5040                       		addq.w	#8,d0
0001CD7C E940                       		asl.w	#4,d0
0001CD7E 383C 2100                  		move.w	#$2100,d4
0001CD82 9840                       		sub.w	d0,d4
0001CD84 1140 0014                  		move.b	d0,obActWid(a0)
0001CD88 3144 0008                  		move.w	d4,obX(a0)
0001CD8C 720B                       		moveq	#$B,d1
0001CD8E D240                       		add.w	d0,d1
0001CD90 7410                       		moveq	#$10,d2
0001CD92 7611                       		moveq	#$11,d3
0001CD94 4EF9 0001 1D94             		jmp	(SolidObject).l
0001CD9A                            ; ===========================================================================
0001CD9A                            
0001CD9A                            loc_19C36:	; Routine 4
0001CD9A 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CDA0 6400                       		bcc.s	FFloor_Solid2
0001CDA2 70FF                       		moveq	#-1,d0
0001CDA4 1028 001A                  		move.b	obFrame(a0),d0
0001CDA8 4880                       		ext.w	d0
0001CDAA D040                       		add.w	d0,d0
0001CDAC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CDB0 2240                       		movea.l	d0,a1
0001CDB2 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CDB8 5228 001A                  		addq.b	#1,obFrame(a0)
0001CDBC 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CDC2 6700                       		beq.s	loc_19C62
0001CDC4                            
0001CDC4                            FFloor_Solid2:
0001CDC4 60AA                       		bra.s	FFloor_Solid
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            loc_19C62:	; Routine 6
0001CDC6 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CDCC 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CDD2 6000 FBBC                  		bra.w	loc_1982C
0001CDD6                            ; ===========================================================================
0001CDD6                            
0001CDD6                            loc_19C72:	; Routine 8
0001CDD6 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CDDC 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CDDE 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CDE4                            ; ===========================================================================
0001CDE4                            
0001CDE4                            loc_19C80:	; Routine $A
0001CDE4 4A28 0001                  		tst.b	obRender(a0)
0001CDE8 6A00 FBA6                  		bpl.w	loc_1982C
0001CDEC 4EB9 0000 F93A             		jsr	(ObjectFall).l
0001CDF2 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CDF8                            ; ===========================================================================
0001CDF8                            
0001CDF8                            FFloor_Break:
0001CDF8 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CDFC 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CE00 7801                       		moveq	#1,d4
0001CE02 7203                       		moveq	#3,d1
0001CE04 7438                       		moveq	#$38,d2
0001CE06 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE0A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CE10 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CE16 43D0                       		lea	(a0),a1
0001CE18 6000                       		bra.s	FFloor_MakeFrag
0001CE1A                            ; ===========================================================================
0001CE1A                            
0001CE1A                            FFloor_LoopFrag:
0001CE1A 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001CE20 6600                       		bne.s	FFloor_BreakSnd
0001CE22                            
0001CE22                            FFloor_MakeFrag:
0001CE22 45D0                       		lea	(a0),a2
0001CE24 47D1                       		lea	(a1),a3
0001CE26 7603                       		moveq	#3,d3
0001CE28                            
0001CE28                            loc_19CC4:
0001CE28 26DA                       		move.l	(a2)+,(a3)+
0001CE2A 26DA                       		move.l	(a2)+,(a3)+
0001CE2C 26DA                       		move.l	(a2)+,(a3)+
0001CE2E 26DA                       		move.l	(a2)+,(a3)+
0001CE30 51CB FFF6                  		dbf	d3,loc_19CC4
0001CE34                            
0001CE34 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CE38 361D                       		move.w	(a5)+,d3
0001CE3A D769 0008                  		add.w	d3,obX(a1)
0001CE3E 361D                       		move.w	(a5)+,d3
0001CE40 D769 000C                  		add.w	d3,obY(a1)
0001CE44 1344 001A                  		move.b	d4,obFrame(a1)
0001CE48 5244                       		addq.w	#1,d4
0001CE4A 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CE4E                            
0001CE4E                            FFloor_BreakSnd:
0001CE58 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CE5E                            ; ===========================================================================
0001CE5E 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CE62 0120 00C0                  		dc.w $120, $C0
0001CE66 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CE6A 0010 0000                  		dc.w $10, 0
0001CE6E 0000 0010                  		dc.w 0,	$10
0001CE72 0010 0010                  		dc.w $10, $10
0001CE72 0010 0010                  		dc.w $10, $10
0001CE76                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CE76                            ; ---------------------------------------------------------------------------
0001CE76                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CE76                            ; ---------------------------------------------------------------------------
0001CE76                            Map_FFloor_internal:
0001CE76 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CE78 0000                       		dc.w @topleft-Map_FFloor_internal
0001CE7A 0000                       		dc.w @topright-Map_FFloor_internal
0001CE7C 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CE7E 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CE80 01                         @wholeblock:	dc.b 1
0001CE81 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CE86 02                         @topleft:	dc.b 2
0001CE87 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CE8C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CE91 00                         		dc.b 0
0001CE92 02                         @topright:	dc.b 2
0001CE93 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CE98 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CE9D 00                         		dc.b 0
0001CE9E 02                         @bottomleft:	dc.b 2
0001CE9F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CEA4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CEA9 00                         		dc.b 0
0001CEAA 02                         @bottomright:	dc.b 2
0001CEAB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CEB0 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CEB6 00                         		even
0001CEB6 00                         		even
0001CEB6                            		include	"_incObj\85 Boss - Final.asm"
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            ; Object 85 - Eggman (FZ)
0001CEB6                            ; ---------------------------------------------------------------------------
0001CEB6                            
0001CEB6                            Obj85_Delete:
0001CEB6 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001CEBC                            ; ===========================================================================
0001CEBC                            
0001CEBC                            BossFinal:
0001CEBC 7000                       		moveq	#0,d0
0001CEBE 1028 0024                  		move.b	obRoutine(a0),d0
0001CEC2 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CEC6 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CECA                            ; ===========================================================================
0001CECA 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CECC 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CECE 0000                       		dc.w loc_1A38E-Obj85_Index
0001CED0 0000                       		dc.w loc_1A346-Obj85_Index
0001CED2 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CED4 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CED6 0000                       		dc.w loc_1A264-Obj85_Index
0001CED8                            
0001CED8 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CEDE 0001 CB98                  		dc.l Map_SEgg		; mappings pointer
0001CEE2 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CEE8 0000 0000                  		dc.l Map_EggCyl
0001CEEC 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CEF2 0000 0000                  		dc.l Map_FZLegs
0001CEF6 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CEFC 0001 CB98                  		dc.l Map_SEgg
0001CF00 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF06 0001 AE1C                  		dc.l Map_Eggman
0001CF0A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF10 0001 AE1C                  		dc.l Map_Eggman
0001CF14                            
0001CF14                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CF14 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CF1A 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CF20 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CF26 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CF2C 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CF32 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CF38                            ; ===========================================================================
0001CF38                            
0001CF38                            Obj85_Main:	; Routine 0
0001CF38 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CF3C 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CF40 2248                       		movea.l	a0,a1
0001CF42 7205                       		moveq	#5,d1
0001CF44 6000                       		bra.s	Obj85_LoadBoss
0001CF46                            ; ===========================================================================
0001CF46                            
0001CF46                            Obj85_Loop:
0001CF46 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001CF4C 6600                       		bne.s	loc_19E20
0001CF4E                            
0001CF4E                            Obj85_LoadBoss:
0001CF4E 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CF52 335A 0008                  		move.w	(a2)+,obX(a1)
0001CF56 335A 000C                  		move.w	(a2)+,obY(a1)
0001CF5A 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CF5E 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CF62 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CF66 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CF6A 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CF6E 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CF72 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CF76 137C 0004 0001             		move.b	#4,obRender(a1)
0001CF7C 08E8 0007 0001             		bset	#7,obRender(a0)
0001CF82 2348 0034                  		move.l	a0,$34(a1)
0001CF86 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CF8A                            
0001CF8A                            loc_19E20:
0001CF8A 45E8 0036                  		lea	$36(a0),a2
0001CF8E 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001CF94 6600                       		bne.s	loc_19E5A
0001CF96 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CF9A 3489                       		move.w	a1,(a2)
0001CF9C 2348 0034                  		move.l	a0,$34(a1)
0001CFA0 45E8 0038                  		lea	$38(a0),a2
0001CFA4 7400                       		moveq	#0,d2
0001CFA6 7203                       		moveq	#3,d1
0001CFA8                            
0001CFA8                            loc_19E3E:
0001CFA8 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001CFAE 6600                       		bne.s	loc_19E5A
0001CFB0 34C9                       		move.w	a1,(a2)+
0001CFB2 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CFB6 2348 0034                  		move.l	a0,$34(a1)
0001CFBA 1342 0028                  		move.b	d2,obSubtype(a1)
0001CFBE 5442                       		addq.w	#2,d2
0001CFC0 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CFC4                            
0001CFC4                            loc_19E5A:
0001CFC4 317C 0000 0034             		move.w	#0,$34(a0)
0001CFCA 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CFD0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFD6                            
0001CFD6                            Obj85_Eggman:	; Routine 2
0001CFD6 7000                       		moveq	#0,d0
0001CFD8 1028 0034                  		move.b	$34(a0),d0
0001CFDC 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CFE0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CFE4 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001CFEA                            ; ===========================================================================
0001CFEA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CFEE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CFF2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CFF6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CFFA                            ; ===========================================================================
0001CFFA                            
0001CFFA                            loc_19E90:
0001CFFA 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CFFE 6600                       		bne.s	loc_19EA2
0001D000 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D006 6500                       		bcs.s	loc_19EA2
0001D008 5428 0034                  		addq.b	#2,$34(a0)
0001D00C                            
0001D00C                            loc_19EA2:
0001D00C 52B8 F636                  		addq.l	#1,(v_random).w
0001D010 4E75                       		rts	
0001D012                            ; ===========================================================================
0001D012                            
0001D012                            loc_19EA8:
0001D012 4A68 0030                  		tst.w	$30(a0)
0001D016 6A00                       		bpl.s	loc_19F10
0001D018 4268 0030                  		clr.w	$30(a0)
0001D01C 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001D022 0240 000C                  		andi.w	#$C,d0
0001D026 3200                       		move.w	d0,d1
0001D028 5441                       		addq.w	#2,d1
0001D02A 4A80                       		tst.l	d0
0001D02C 6A00                       		bpl.s	loc_19EC6
0001D02E C340                       		exg	d1,d0
0001D030                            
0001D030                            loc_19EC6:
0001D030 43FA 0000                  		lea	word_19FD6(pc),a1
0001D034 3031 0000                  		move.w	(a1,d0.w),d0
0001D038 3231 1000                  		move.w	(a1,d1.w),d1
0001D03C 3140 0030                  		move.w	d0,$30(a0)
0001D040 74FF                       		moveq	#-1,d2
0001D042 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D046 2242                       		movea.l	d2,a1
0001D048 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D04E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D054 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D058 2242                       		movea.l	d2,a1
0001D05A 137C 0001 0029             		move.b	#1,$29(a1)
0001D060 337C 0000 0030             		move.w	#0,$30(a1)
0001D066 317C 0001 0032             		move.w	#1,$32(a0)
0001D06C 4228 0035                  		clr.b	$35(a0)
0001D07A                            
0001D07A                            loc_19F10:
0001D07A 4A68 0032                  		tst.w	$32(a0)
0001D07E 6B00 0000                  		bmi.w	loc_19FA6
0001D082 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D088 3038 D008                  		move.w	(v_player+obX).w,d0
0001D08C 9068 0008                  		sub.w	obX(a0),d0
0001D090 6500                       		bcs.s	loc_19F2E
0001D092 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D098                            
0001D098                            loc_19F2E:
0001D098 323C 002B                  		move.w	#$2B,d1
0001D09C 343C 0014                  		move.w	#$14,d2
0001D0A0 363C 0014                  		move.w	#$14,d3
0001D0A4 3828 0008                  		move.w	obX(a0),d4
0001D0A8 4EB9 0001 1D94             		jsr	(SolidObject).l
0001D0AE 4A44                       		tst.w	d4
0001D0B0 6E00                       		bgt.s	loc_19F50
0001D0B2                            
0001D0B2                            loc_19F48:
0001D0B2 4A28 0035                  		tst.b	$35(a0)
0001D0B6 6600                       		bne.s	loc_19F88
0001D0B8 6000                       		bra.s	loc_19F96
0001D0BA                            ; ===========================================================================
0001D0BA                            
0001D0BA                            loc_19F50:
0001D0BA 5E78 F636                  		addq.w	#7,(v_random).w
0001D0BE 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D0C4 66EC                       		bne.s	loc_19F48
0001D0C6 303C 0300                  		move.w	#$300,d0
0001D0CA 0828 0000 0022             		btst	#0,obStatus(a0)
0001D0D0 6600                       		bne.s	loc_19F6A
0001D0D2 4440                       		neg.w	d0
0001D0D4                            
0001D0D4                            loc_19F6A:
0001D0D4 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D0D8 4A28 0035                  		tst.b	$35(a0)
0001D0DC 6600                       		bne.s	loc_19F88
0001D0DE 5328 0021                  		subq.b	#1,obColProp(a0)
0001D0E2 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D0E8 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0EE                            
0001D0EE                            loc_19F88:
0001D0EE 5328 0035                  		subq.b	#1,$35(a0)
0001D0F2 6700                       		beq.s	loc_19F96
0001D0F4 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D0FA 6000                       		bra.s	loc_19F9C
0001D0FC                            ; ===========================================================================
0001D0FC                            
0001D0FC                            loc_19F96:
0001D0FC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D102                            
0001D102                            loc_19F9C:
0001D102 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001D106 4EF9 0000 CA32             		jmp	(AnimateSprite).l
0001D10C                            ; ===========================================================================
0001D10C                            
0001D10C                            loc_19FA6:
0001D10C 4A28 0021                  		tst.b	obColProp(a0)
0001D110 6700                       		beq.s	loc_19FBC
0001D112 5428 0034                  		addq.b	#2,$34(a0)
0001D116 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D11C 4268 0032                  		clr.w	$32(a0)
0001D120 4E75                       		rts	
0001D122                            ; ===========================================================================
0001D122                            
0001D122                            loc_19FBC:
0001D122 7064                       			moveq	#100,d0
0001D124 6100 0000                  			bsr.w	AddPoints
0001D128 117C 0006 0034             		move.b	#6,$34(a0)
0001D12E 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D134 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D13A 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D140 4E75                       		rts	
0001D142                            ; ===========================================================================
0001D142 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D152                            ; ===========================================================================
0001D152                            
0001D152                            loc_19FE6:
0001D152 70FF                       		moveq	#-1,d0
0001D154 3028 0036                  		move.w	$36(a0),d0
0001D158 2240                       		movea.l	d0,a1
0001D15A 4A68 0030                  		tst.w	$30(a0)
0001D15E 6A00                       		bpl.s	loc_1A000
0001D160 4268 0030                  		clr.w	$30(a0)
0001D164 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D16A 6100                       		bsr.s	loc_1A020
0001D16C                            
0001D16C                            loc_1A000:
0001D16C 700F                       		moveq	#$F,d0
0001D16E C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D172 6600                       		bne.s	loc_1A00A
0001D174 6100                       		bsr.s	loc_1A020
0001D176                            
0001D176                            loc_1A00A:
0001D176 4A68 0032                  		tst.w	$32(a0)
0001D17A 6700                       		beq.s	locret_1A01E
0001D17C 5528 0034                  		subq.b	#2,$34(a0)
0001D180 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D186 4268 0032                  		clr.w	$32(a0)
0001D18A                            
0001D18A                            locret_1A01E:
0001D18A 4E75                       		rts	
0001D18C                            ; ===========================================================================
0001D18C                            
0001D18C                            loc_1A020:
0001D196                            ; ===========================================================================
0001D196                            
0001D196                            loc_1A02A:
0001D196 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D19C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1A2 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001D1A8 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D1AE 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1B4 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D1BA 6500                       		bcs.s	loc_1A070
0001D1BC 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D1C2 5428 0034                  		addq.b	#2,$34(a0)
0001D1C6 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D1CC 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D1D2 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D1D8 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D1DC                            
0001D1DC                            loc_1A070:
0001D1DC 6000 0000                  		bra.w	loc_1A166
0001D1E0                            ; ===========================================================================
0001D1E0                            
0001D1E0                            loc_1A074:
0001D1E0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1E6 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D1EC 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001D1F2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1F8 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D1FE 6500                       		bcs.s	loc_1A09A
0001D200 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D206                            
0001D206                            loc_1A09A:
0001D206 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D20C 3028 0008                  		move.w	obX(a0),d0
0001D210 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D214 6A00                       		bpl.s	loc_1A0B4
0001D216 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D21C 6000 0000                  		bra.w	loc_1A0F2
0001D220                            ; ===========================================================================
0001D220                            
0001D220                            loc_1A0B4:
0001D220 0440 0070                  		subi.w	#$70,d0
0001D224 6500                       		bcs.s	loc_1A0F2
0001D226 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D22C 5140                       		subq.w	#8,d0
0001D22E 6500                       		bcs.s	loc_1A0F2
0001D230 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D236 5140                       		subq.w	#8,d0
0001D238 6500                       		bcs.s	loc_1A0F2
0001D23A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D240 5140                       		subq.w	#8,d0
0001D242 6500                       		bcs.s	loc_1A0F2
0001D244 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D24A 5140                       		subq.w	#8,d0
0001D24C 6500                       		bcs.s	loc_1A0F2
0001D24E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D254 0440 0038                  		subi.w	#$38,d0
0001D258 6500                       		bcs.s	loc_1A0F2
0001D25A 4268 0010                  		clr.w	obVelX(a0)
0001D25E                            
0001D25E                            loc_1A0F2:
0001D25E 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D264 6500                       		bcs.s	loc_1A110
0001D266 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D26C 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D272 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D278 5428 0034                  		addq.b	#2,$34(a0)
0001D27C                            
0001D27C                            loc_1A110:
0001D27C 6000                       		bra.s	loc_1A15C
0001D27E                            ; ===========================================================================
0001D27E                            
0001D27E                            loc_1A112:
0001D27E 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001D284 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D28A 6500                       		bcs.s	loc_1A124
0001D28C 4268 0010                  		clr.w	obVelX(a0)
0001D290                            
0001D290                            loc_1A124:
0001D290 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D296 4A68 0012                  		tst.w	obVelY(a0)
0001D29A 6B00                       		bmi.s	loc_1A142
0001D29C 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D2A2 6500                       		bcs.s	loc_1A142
0001D2A4 317C 0592 000C             		move.w	#$592,obY(a0)
0001D2AA 4268 0012                  		clr.w	obVelY(a0)
0001D2AE                            
0001D2AE                            loc_1A142:
0001D2AE 3028 0010                  		move.w	obVelX(a0),d0
0001D2B2 8068 0012                  		or.w	obVelY(a0),d0
0001D2B6 6600                       		bne.s	loc_1A15C
0001D2B8 5428 0034                  		addq.b	#2,$34(a0)
0001D2BC 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D2C2 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D2C8                            
0001D2C8                            loc_1A15C:
0001D2C8 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D2CC 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001D2D2                            
0001D2D2                            loc_1A166:
0001D2D2 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D2D8 6C00                       		bge.s	loc_1A172
0001D2DA 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D2DE                            
0001D2DE                            loc_1A172:
0001D2DE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D2E4 6C00                       		bge.s	locret_1A190
0001D2E6 323C 001B                  		move.w	#$1B,d1
0001D2EA 343C 0070                  		move.w	#$70,d2
0001D2EE 363C 0071                  		move.w	#$71,d3
0001D2F2 3828 0008                  		move.w	obX(a0),d4
0001D2F6 4EF9 0001 1D94             		jmp	(SolidObject).l
0001D2FC                            ; ===========================================================================
0001D2FC                            
0001D2FC                            locret_1A190:
0001D2FC 4E75                       		rts	
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1A192:
0001D2FE 217C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a0)
0001D306 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D30C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D312 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D318 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001D31E 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D324 6400                       		bcc.s	loc_1A1D0
0001D326 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D32C 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D332 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D338 5428 0034                  		addq.b	#2,$34(a0)
0001D33C                            
0001D33C                            loc_1A1D0:
0001D33C 6000 FF8A                  		bra.w	loc_1A15C
0001D340                            ; ===========================================================================
0001D340                            
0001D340                            loc_1A1D4:
0001D340 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D346 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001D34C 4A68 0030                  		tst.w	$30(a0)
0001D350 6600                       		bne.s	loc_1A1FC
0001D352 4A28 0020                  		tst.b	obColType(a0)
0001D356 6600                       		bne.s	loc_1A216
0001D358 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D35E 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D364                            
0001D364                            loc_1A1FC:
0001D364 5368 0030                  		subq.w	#1,$30(a0)
0001D368 6600                       		bne.s	loc_1A216
0001D36A 4A28 0022                  		tst.b	obStatus(a0)
0001D36E 6A00                       		bpl.s	loc_1A210
0001D370 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D376 6000                       		bra.s	loc_1A216
0001D378                            ; ===========================================================================
0001D378                            
0001D378                            loc_1A210:
0001D378 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D37E                            
0001D37E                            loc_1A216:
0001D37E 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D384 6D00                       		blt.s	loc_1A23A
0001D386 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D38C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D392 4278 D020                  		clr.w	(v_player+obInertia).w
0001D396 4A68 0012                  		tst.w	obVelY(a0)
0001D39A 6A00                       		bpl.s	loc_1A248
0001D39C 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D3A2                            
0001D3A2                            loc_1A23A:
0001D3A2 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D3A8 6D00                       		blt.s	loc_1A248
0001D3AA 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D3B0                            
0001D3B0                            loc_1A248:
0001D3B0 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D3B6 6500                       		bcs.s	loc_1A260
0001D3B8 4A28 0001                  		tst.b	obRender(a0)
0001D3BC 6B00                       		bmi.s	loc_1A260
0001D3BE 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D3C4 6000 FAF0                  		bra.w	Obj85_Delete
0001D3C8                            ; ===========================================================================
0001D3C8                            
0001D3C8                            loc_1A260:
0001D3C8 6000 FEFE                  		bra.w	loc_1A15C
0001D3CC                            ; ===========================================================================
0001D3CC                            
0001D3CC                            loc_1A264:	; Routine 4
0001D3CC 2268 0034                  		movea.l	$34(a0),a1
0001D3D0 1011                       		move.b	(a1),d0
0001D3D2 B010                       		cmp.b	(a0),d0
0001D3D4 6600 FAE0                  		bne.w	Obj85_Delete
0001D3D8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D3DE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3E4 6C00                       		bge.s	loc_1A280
0001D3E6 6000                       		bra.s	loc_1A2A6
0001D3E8                            ; ===========================================================================
0001D3E8                            
0001D3E8                            loc_1A280:
0001D3E8 4A69 0010                  		tst.w	obVelX(a1)
0001D3EC 6700                       		beq.s	loc_1A28C
0001D3EE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D3F4                            
0001D3F4                            loc_1A28C:
0001D3F4 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D3F8 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001D3FE                            
0001D3FE                            loc_1A296:
0001D3FE 2268 0034                  		movea.l	$34(a0),a1
0001D402 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D408 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D40E                            
0001D40E                            loc_1A2A6:
0001D40E 2268 0034                  		movea.l	$34(a0),a1
0001D412 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D418 7003                       		moveq	#3,d0
0001D41A C028 0022                  		and.b	obStatus(a0),d0
0001D41E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D424 8128 0001                  		or.b	d0,obRender(a0)
0001D428 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001D42E                            ; ===========================================================================
0001D42E                            
0001D42E                            loc_1A2C6:	; Routine 6
0001D42E 2268 0034                  		movea.l	$34(a0),a1
0001D432 1011                       		move.b	(a1),d0
0001D434 B010                       		cmp.b	(a0),d0
0001D436 6600 FA7E                  		bne.w	Obj85_Delete
0001D43A 0CA9 0001 AE1C 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D442 6700                       		beq.s	loc_1A2E4
0001D444 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D44A 60C2                       		bra.s	loc_1A2A6
0001D44C                            ; ===========================================================================
0001D44C                            
0001D44C                            loc_1A2E4:
0001D44C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D452 4A29 0021                  		tst.b	obColProp(a1)
0001D456 6F00                       		ble.s	loc_1A312
0001D458 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D45E 217C 0001 AE1C 0004        		move.l	#Map_Eggman,obMap(a0)
0001D466 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D46C 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D470 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001D476 6000 FF86                  		bra.w	loc_1A296
0001D47A                            ; ===========================================================================
0001D47A                            
0001D47A                            loc_1A312:
0001D47A 4A28 0001                  		tst.b	1(a0)
0001D47E 6A00 FA36                  		bpl.w	Obj85_Delete
0001D482 6100 D4F2                  		bsr.w	BossDefeated
0001D486 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D48C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D492 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D49A 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D4A0 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D4A4 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001D4AA 6000 FF52                  		bra.w	loc_1A296
0001D4AE                            ; ===========================================================================
0001D4AE                            
0001D4AE                            loc_1A346:	; Routine 8
0001D4AE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D4B4 2268 0034                  		movea.l	$34(a0),a1
0001D4B8 0CA9 0001 AE1C 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D4C0 6700                       		beq.s	loc_1A35E
0001D4C2 6000 FF4A                  		bra.w	loc_1A2A6
0001D4C6                            ; ===========================================================================
0001D4C6                            
0001D4C6                            loc_1A35E:
0001D4C6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4CC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4D2 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D4D6 6600                       		bne.s	loc_1A376
0001D4D8 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D4DE                            
0001D4DE                            loc_1A376:
0001D4DE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D4E2 6E00                       		bgt.s	loc_1A38A
0001D4E4 5228 001A                  		addq.b	#1,obFrame(a0)
0001D4E8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D4EE 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D4F2                            
0001D4F2                            loc_1A38A:
0001D4F2 6000 FF0A                  		bra.w	loc_1A296
0001D4F6                            ; ===========================================================================
0001D4F6                            
0001D4F6                            loc_1A38E:	; Routine $A
0001D4F6 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D4FC 3038 D008                  		move.w	(v_player+obX).w,d0
0001D500 9068 0008                  		sub.w	obX(a0),d0
0001D504 6500                       		bcs.s	loc_1A3A6
0001D506 4A28 0001                  		tst.b	obRender(a0)
0001D50A 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D50E                            
0001D50E                            loc_1A3A6:
0001D50E 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001D514                            ; ===========================================================================
0001D514                            
0001D514                            loc_1A3AC:	; Routine $C
0001D514 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D51A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D520 2268 0034                  		movea.l	$34(a0),a1
0001D524 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D52A 6600                       		bne.s	loc_1A3D0
0001D52C 0CA9 0001 AE1C 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D534 6700 F980                  		beq.w	Obj85_Delete
0001D538                            
0001D538                            loc_1A3D0:
0001D538 6000 FED4                  		bra.w	loc_1A2A6
0001D53C                            		
0001D53C                            BossModeMusic:
0001D53C 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D542 6600 0000                  		bne.w	NormalMode
0001D546 4EF9 0000 0000             		jmp	PinchMode
0001D54C                            
0001D54C                            NormalMode:
0001D54C 303C 00AC                  		move.w	#$AC,d0
0001D550 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D556 4E75                       		rts
0001D558                            
0001D558                            PinchMode:
0001D558 303C 0094                  		move.w	#$94,d0
0001D55C 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D562 303C 00E2                  		move.w	#$E2,d0
0001D566 4EB9 0000 124E             		jsr	(PlaySound).l
0001D56C 4E75                       		rts		
0001D56C 4E75                       		rts		
0001D56E                            		include	"_anim\FZ Eggman in Ship.asm"
0001D56E                            ; ---------------------------------------------------------------------------
0001D56E                            ; Animation script - Eggman (FZ)
0001D56E                            ; ---------------------------------------------------------------------------
0001D56E 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D570 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D574                            		even
0001D574                            		even
0001D574                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            Map_FZDamaged_internal:
0001D574 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D576 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D578 06                         @damage1:	dc.b 6
0001D579 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D57E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D583 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D588 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D58D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D592 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D597 06                         @damage2:	dc.b 6
0001D598 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D59D EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D5A2 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D5A7 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D5AC FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D5B1 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D5B6                            		even
0001D5B6                            		even
0001D5B6                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D5B6                            ; ---------------------------------------------------------------------------
0001D5B6                            Map_FZLegs_internal:
0001D5B6 0000                       		dc.w @extended-Map_FZLegs_internal
0001D5B8 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D5BA 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D5BC 02                         @extended:	dc.b 2
0001D5BD 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D5C2 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D5C7 03                         @halfway:	dc.b 3
0001D5C8 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D5CD 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D5D2 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D5D7 02                         @retracted:	dc.b 2
0001D5D8 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D5DD 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D5E2                            		even
0001D5E2                            		even
0001D5E2                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D5E2                            ; ---------------------------------------------------------------------------
0001D5E2                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D5E2                            ; ---------------------------------------------------------------------------
0001D5E2                            
0001D5E2                            Obj84_Delete:
0001D5E2 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001D5E8                            ; ===========================================================================
0001D5E8                            
0001D5E8                            EggmanCylinder:
0001D5E8 7000                       		moveq	#0,d0
0001D5EA 1028 0024                  		move.b	obRoutine(a0),d0
0001D5EE 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D5F2 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D5F6                            ; ===========================================================================
0001D5F6 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D5F8 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D5FA 0000                       		dc.w loc_1A57E-Obj84_Index
0001D5FC                            
0001D5FC 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D600 2550 0620                  		dc.w $2550, $620
0001D604 2490 04C0                  		dc.w $2490, $4C0
0001D608 2510 04C0                  		dc.w $2510, $4C0
0001D60C                            ; ===========================================================================
0001D60C                            
0001D60C                            Obj84_Main:	; Routine
0001D60C 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D610 7000                       		moveq	#0,d0
0001D612 1028 0028                  		move.b	obSubtype(a0),d0
0001D616 D040                       		add.w	d0,d0
0001D618 D2C0                       		adda.w	d0,a1
0001D61A 117C 0004 0001             		move.b	#4,obRender(a0)
0001D620 08E8 0007 0001             		bset	#7,obRender(a0)
0001D626 08E8 0004 0001             		bset	#4,obRender(a0)
0001D62C 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D632 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D63A 3159 0008                  		move.w	(a1)+,obX(a0)
0001D63E 3151 000C                  		move.w	(a1),obY(a0)
0001D642 3159 0038                  		move.w	(a1)+,$38(a0)
0001D646 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D64C 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D652 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D658 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D65E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D664 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D668                            
0001D668                            loc_1A4CE:	; Routine 2
0001D668 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D66E 6F00                       		ble.s	loc_1A4DC
0001D670 08E8 0001 0001             		bset	#1,obRender(a0)
0001D676                            
0001D676                            loc_1A4DC:
0001D676 42A8 003C                  		clr.l	$3C(a0)
0001D67A 4A28 0029                  		tst.b	$29(a0)
0001D67E 6700                       		beq.s	loc_1A4EA
0001D680 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D684                            
0001D684                            loc_1A4EA:
0001D684 2028 003C                  		move.l	$3C(a0),d0
0001D688 2228 0038                  		move.l	$38(a0),d1
0001D68C D280                       		add.l	d0,d1
0001D68E 4841                       		swap	d1
0001D690 3141 000C                  		move.w	d1,obY(a0)
0001D694 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D69A 6600                       		bne.s	loc_1A524
0001D69C 4A68 0030                  		tst.w	$30(a0)
0001D6A0 6A00                       		bpl.s	loc_1A524
0001D6A2 70F6                       		moveq	#-$A,d0
0001D6A4 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D6AA 6F00                       		ble.s	loc_1A514
0001D6AC 700E                       		moveq	#$E,d0
0001D6AE                            
0001D6AE                            loc_1A514:
0001D6AE D240                       		add.w	d0,d1
0001D6B0 2268 0034                  		movea.l	$34(a0),a1
0001D6B4 3341 000C                  		move.w	d1,obY(a1)
0001D6B8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D6BE                            
0001D6BE                            loc_1A524:
0001D6BE 323C 002B                  		move.w	#$2B,d1
0001D6C2 343C 0060                  		move.w	#$60,d2
0001D6C6 363C 0061                  		move.w	#$61,d3
0001D6CA 3828 0008                  		move.w	obX(a0),d4
0001D6CE 4EB9 0001 1D94             		jsr	(SolidObject).l
0001D6D4 7000                       		moveq	#0,d0
0001D6D6 3228 003C                  		move.w	$3C(a0),d1
0001D6DA 6A00                       		bpl.s	loc_1A550
0001D6DC 4441                       		neg.w	d1
0001D6DE 5141                       		subq.w	#8,d1
0001D6E0 6500                       		bcs.s	loc_1A55C
0001D6E2 5200                       		addq.b	#1,d0
0001D6E4 E841                       		asr.w	#4,d1
0001D6E6 D041                       		add.w	d1,d0
0001D6E8 6000                       		bra.s	loc_1A55C
0001D6EA                            ; ===========================================================================
0001D6EA                            
0001D6EA                            loc_1A550:
0001D6EA 0441 0027                  		subi.w	#$27,d1
0001D6EE 6500                       		bcs.s	loc_1A55C
0001D6F0 5200                       		addq.b	#1,d0
0001D6F2 E841                       		asr.w	#4,d1
0001D6F4 D041                       		add.w	d1,d0
0001D6F6                            
0001D6F6                            loc_1A55C:
0001D6F6 1140 001A                  		move.b	d0,obFrame(a0)
0001D6FA 3038 D008                  		move.w	(v_player+obX).w,d0
0001D6FE 9068 0008                  		sub.w	obX(a0),d0
0001D702 6B00                       		bmi.s	loc_1A578
0001D704 0440 0140                  		subi.w	#$140,d0
0001D708 6B00                       		bmi.s	loc_1A578
0001D70A 4A28 0001                  		tst.b	obRender(a0)
0001D70E 6A00 FED2                  		bpl.w	Obj84_Delete
0001D712                            
0001D712                            loc_1A578:
0001D712 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001D718                            ; ===========================================================================
0001D718                            
0001D718                            loc_1A57E:	; Routine 4
0001D718 7000                       		moveq	#0,d0
0001D71A 1028 0028                  		move.b	obSubtype(a0),d0
0001D71E 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D722 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D726 6000 FF5C                  		bra.w	loc_1A4EA
0001D72A                            ; ===========================================================================
0001D72A 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D72C 0000                       		dc.w loc_1A598-off_1A590
0001D72E 0000                       		dc.w loc_1A604-off_1A590
0001D730 0000                       		dc.w loc_1A604-off_1A590
0001D732                            ; ===========================================================================
0001D732                            
0001D732                            loc_1A598:
0001D732 4A28 0029                  		tst.b	$29(a0)
0001D736 6600                       		bne.s	loc_1A5D4
0001D738 2268 0034                  		movea.l	$34(a0),a1
0001D73C 4A29 0021                  		tst.b	obColProp(a1)
0001D740 6600                       		bne.s	loc_1A5B4
0001D742 6100 D232                  		bsr.w	BossDefeated
0001D746 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D74E                            
0001D74E                            loc_1A5B4:
0001D74E 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D756 6400                       		bcc.s	locret_1A602
0001D758 42A8 003C                  		clr.l	$3C(a0)
0001D75C 2268 0034                  		movea.l	$34(a0),a1
0001D760 5369 0032                  		subq.w	#1,$32(a1)
0001D764 4269 0030                  		clr.w	$30(a1)
0001D768 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D76C 4E75                       		rts	
0001D76E                            ; ===========================================================================
0001D76E                            
0001D76E                            loc_1A5D4:
0001D76E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D774 6C00                       		bge.s	loc_1A5E4
0001D776 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D77E                            
0001D77E                            loc_1A5E4:
0001D77E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D786 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D78C 6E00                       		bgt.s	locret_1A602
0001D78E 4268 003E                  		clr.w	$3E(a0)
0001D792 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D798 4228 0029                  		clr.b	$29(a0)
0001D79C                            
0001D79C                            locret_1A602:
0001D79C 4E75                       		rts	
0001D79E                            ; ===========================================================================
0001D79E                            
0001D79E                            loc_1A604:
0001D79E 08E8 0001 0001             		bset	#1,obRender(a0)
0001D7A4 4A28 0029                  		tst.b	$29(a0)
0001D7A8 6600                       		bne.s	loc_1A646
0001D7AA 2268 0034                  		movea.l	$34(a0),a1
0001D7AE 4A29 0021                  		tst.b	obColProp(a1)
0001D7B2 6600                       		bne.s	loc_1A626
0001D7B4 6100 D1C0                  		bsr.w	BossDefeated
0001D7B8 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D7C0                            
0001D7C0                            loc_1A626:
0001D7C0 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D7C8 6400                       		bcc.s	locret_1A674
0001D7CA 42A8 003C                  		clr.l	$3C(a0)
0001D7CE 2268 0034                  		movea.l	$34(a0),a1
0001D7D2 5369 0032                  		subq.w	#1,$32(a1)
0001D7D6 4269 0030                  		clr.w	$30(a1)
0001D7DA 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D7DE 4E75                       		rts	
0001D7E0                            ; ===========================================================================
0001D7E0                            
0001D7E0                            loc_1A646:
0001D7E0 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D7E6 6D00                       		blt.s	loc_1A656
0001D7E8 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D7F0                            
0001D7F0                            loc_1A656:
0001D7F0 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D7F8 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D7FE 6D00                       		blt.s	locret_1A674
0001D800 4268 003E                  		clr.w	$3E(a0)
0001D804 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D80A 4228 0029                  		clr.b	$29(a0)
0001D80E                            
0001D80E                            locret_1A674:
0001D80E 4E75                       		rts	
0001D80E 4E75                       		rts	
0001D810                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D810                            ; --------------------------------------------------------------------------------
0001D810                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D810                            ; --------------------------------------------------------------------------------
0001D810                            
0001D810                            SME_SCUpI:	
0001D810 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D814 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D818 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D81C 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D820 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D824 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D828 06                         SME_SCUpI_18:	dc.b 6	
0001D829 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D82E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D833 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D838 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D83D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D842 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D847 08                         SME_SCUpI_37:	dc.b 8	
0001D848 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D84D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D852 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D857 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D85C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D861 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D866 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D86B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D870 0A                         SME_SCUpI_60:	dc.b $A	
0001D871 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D876 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D87B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D880 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D885 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D88A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D88F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D894 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D899 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D89E A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8A3 0C                         SME_SCUpI_93:	dc.b $C	
0001D8A4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8A9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8AE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8B3 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8B8 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8BD D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8C2 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8C7 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8CC F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8D1 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8D6 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8DB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8E0 0D                         SME_SCUpI_D0:	dc.b $D	
0001D8E1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8E6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8EB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8F0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8F5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8FA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8FF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D904 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D909 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D90E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D913 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D918 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D91D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D922 0E                         SME_SCUpI_112:	dc.b $E	
0001D923 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D928 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D92D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D932 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D937 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D93C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D941 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D946 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D94B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D950 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D955 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D95A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D95F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D964 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D969 0E                         SME_SCUpI_159:	dc.b $E	
0001D96A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D96F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D974 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D979 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D97E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D983 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D988 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D98D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D992 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D997 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D99C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9A1 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9A6 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9AB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9B0 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D9B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9B6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9BB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9C0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9C5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9CA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9CF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9D4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9D9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9DE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9E3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9E8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9ED 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9F2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9F7 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D9F8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9FD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA02 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA07 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA0C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA11 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA16 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA1B F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA20 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA25 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA2A 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA2F 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA34 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA39 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA3E 0E                         SME_SCUpI_22E:	dc.b $E	
0001DA3F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA44 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA49 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA4E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA53 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA58 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA5D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA62 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA67 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA6C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA71 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA76 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA7B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA80 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA85 0E                         SME_SCUpI_275:	dc.b $E	
0001DA86 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA8B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA90 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA95 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA9A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA9F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAA4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAA9 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAAE F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAB3 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DAB8 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DABD 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAC2 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAC7 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DACC 02                         SME_SCUpI_2BC:	dc.b 2	
0001DACD F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DAD2 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DAD8 00                         		even
0001DAD8 00                         		even
0001DAD8                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DAD8                            ; ---------------------------------------------------------------------------
0001DAD8                            ; Object 86 - energy balls (FZ)
0001DAD8                            ; ---------------------------------------------------------------------------
0001DAD8                            
0001DAD8                            BossPlasma:
0001DAD8 7000                       		moveq	#0,d0
0001DADA 1028 0024                  		move.b	obRoutine(a0),d0
0001DADE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DAE2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DAE6                            ; ===========================================================================
0001DAE6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DAE8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DAEA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DAEC 0000                       		dc.w loc_1A962-Obj86_Index
0001DAEE 0000                       		dc.w loc_1A982-Obj86_Index
0001DAF0                            ; ===========================================================================
0001DAF0                            
0001DAF0                            Obj86_Main:	; Routine 0
0001DAF0 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DAF6 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DAFC 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DB02 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DB0A 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB10 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DB16 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DB1C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DB22 117C 0004 0001             		move.b	#4,obRender(a0)
0001DB28 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB2E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB32                            
0001DB32                            Obj86_Generator:; Routine 2
0001DB32 2268 0034                  		movea.l	$34(a0),a1
0001DB36 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DB3C 6600                       		bne.s	loc_1A850
0001DB3E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DB42 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DB48 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001DB4E                            ; ===========================================================================
0001DB4E                            
0001DB4E                            loc_1A850:
0001DB4E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB54 4A28 0029                  		tst.b	$29(a0)
0001DB58 6700                       		beq.s	loc_1A86C
0001DB5A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB5E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB64 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DB6A                            
0001DB6A                            loc_1A86C:
0001DB6A 323C 0013                  		move.w	#$13,d1
0001DB6E 343C 0008                  		move.w	#8,d2
0001DB72 363C 0011                  		move.w	#$11,d3
0001DB76 3828 0008                  		move.w	obX(a0),d4
0001DB7A 4EB9 0001 1D94             		jsr	(SolidObject).l
0001DB80 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB84 9068 0008                  		sub.w	obX(a0),d0
0001DB88 6B00                       		bmi.s	loc_1A89A
0001DB8A 0440 0140                  		subi.w	#$140,d0
0001DB8E 6B00                       		bmi.s	loc_1A89A
0001DB90 4A28 0001                  		tst.b	obRender(a0)
0001DB94 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DB98                            
0001DB98                            loc_1A89A:
0001DB98 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DB9C 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001DBA2 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001DBA8                            ; ===========================================================================
0001DBA8                            
0001DBA8                            Obj86_MakeBalls:; Routine 4
0001DBA8 4A28 0029                  		tst.b	$29(a0)
0001DBAC 6700 0000                  		beq.w	loc_1A954
0001DBB0 4228 0029                  		clr.b	$29(a0)
0001DBB4 D068 0030                  		add.w	$30(a0),d0
0001DBB8 0240 001E                  		andi.w	#$1E,d0
0001DBBC D4C0                       		adda.w	d0,a2
0001DBBE 5868 0030                  		addq.w	#4,$30(a0)
0001DBC2 4268 0032                  		clr.w	$32(a0)
0001DBC6 7403                       		moveq	#3,d2
0001DBC8                            
0001DBC8                            Obj86_Loop:
0001DBC8 4EB9 0000 FE28             		jsr	(FindNextFreeObj).l
0001DBCE 6600 0000                  		bne.w	loc_1A954
0001DBD2 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DBD6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DBDC 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DBE2 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DBE8 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DBEE 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DBF6 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DBFC 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DC02 137C 0000 0020             		move.b	#0,obColType(a1)
0001DC08 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DC0E 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DC14 137C 0004 0001             		move.b	#4,obRender(a1)
0001DC1A 08E9 0007 0001             		bset	#7,obRender(a1)
0001DC20 2348 0034                  		move.l	a0,$34(a1)
0001DC24 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DC2A 3228 0032                  		move.w	$32(a0),d1
0001DC2E C3FC FFB1                  		muls.w	#-$4F,d1
0001DC32 0641 2578                  		addi.w	#$2578,d1
0001DC36 0240 001F                  		andi.w	#$1F,d0
0001DC3A 0440 0010                  		subi.w	#$10,d0
0001DC3E D041                       		add.w	d1,d0
0001DC40 3340 0030                  		move.w	d0,$30(a1)
0001DC44 5268 0032                  		addq.w	#1,$32(a0)
0001DC48 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DC4E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DC52                            
0001DC52                            loc_1A954:
0001DC52 4A68 0032                  		tst.w	$32(a0)
0001DC56 6600                       		bne.s	loc_1A95E
0001DC58 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC5C                            
0001DC5C                            loc_1A95E:
0001DC5C 6000 FF0C                  		bra.w	loc_1A86C
0001DC60                            ; ===========================================================================
0001DC60                            
0001DC60                            loc_1A962:	; Routine 6
0001DC60 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DC66 4A68 0038                  		tst.w	$38(a0)
0001DC6A 6600                       		bne.s	loc_1A97E
0001DC6C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DC72 2268 0034                  		movea.l	$34(a0),a1
0001DC76 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DC7C                            
0001DC7C                            loc_1A97E:
0001DC7C 6000 FEEC                  		bra.w	loc_1A86C
0001DC80                            ; ===========================================================================
0001DC80                            
0001DC80                            loc_1A982:	; Routine 8
0001DC80 7000                       		moveq	#0,d0
0001DC82 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DC86 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DC8A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DC8E 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DC92 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001DC98 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001DC9E                            ; ===========================================================================
0001DC9E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DCA0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DCA2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DCA4                            ; ===========================================================================
0001DCA4                            
0001DCA4                            loc_1A9A6:
0001DCA4 3028 0030                  		move.w	$30(a0),d0
0001DCA8 9068 0008                  		sub.w	obX(a0),d0
0001DCAC E940                       		asl.w	#4,d0
0001DCAE 3140 0010                  		move.w	d0,obVelX(a0)
0001DCB2 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DCB8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCBC 4E75                       		rts	
0001DCBE                            ; ===========================================================================
0001DCBE                            
0001DCBE                            loc_1A9C0:
0001DCBE 4A68 0010                  		tst.w	obVelX(a0)
0001DCC2 6700                       		beq.s	loc_1A9E6
0001DCC4 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001DCCA 3028 0008                  		move.w	obX(a0),d0
0001DCCE 9068 0030                  		sub.w	$30(a0),d0
0001DCD2 6400                       		bcc.s	loc_1A9E6
0001DCD4 4268 0010                  		clr.w	obVelX(a0)
0001DCD8 D168 0008                  		add.w	d0,obX(a0)
0001DCDC 2268 0034                  		movea.l	$34(a0),a1
0001DCE0 5369 0032                  		subq.w	#1,$32(a1)
0001DCE4                            
0001DCE4                            loc_1A9E6:
0001DCE4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DCEA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DCEE 6600                       		bne.s	locret_1AA1C
0001DCF0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCF4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DCFA 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DD00 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD06 7000                       		moveq	#0,d0
0001DD08 3038 D008                  		move.w	(v_player+obX).w,d0
0001DD0C 9068 0008                  		sub.w	obX(a0),d0
0001DD10 3140 0010                  		move.w	d0,obVelX(a0)
0001DD14 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DD1A                            
0001DD1A                            locret_1AA1C:
0001DD1A 4E75                       		rts	
0001DD1C                            ; ===========================================================================
0001DD1C                            
0001DD1C                            loc_1AA1E:
0001DD1C 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001DD22 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DD28 6400                       		bcc.s	loc_1AA34
0001DD2A 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD2E 6700                       		beq.s	loc_1AA34
0001DD30 4E75                       		rts	
0001DD32                            ; ===========================================================================
0001DD32                            
0001DD32                            loc_1AA34:
0001DD32 2268 0034                  		movea.l	$34(a0),a1
0001DD36 5369 0038                  		subq.w	#1,$38(a1)
0001DD3A 6000 F8A6                  		bra.w	Obj84_Delete
0001DD3A 6000 F8A6                  		bra.w	Obj84_Delete
0001DD3E                            		include	"_anim\Plasma Ball Launcher.asm"
0001DD3E                            ; ---------------------------------------------------------------------------
0001DD3E                            ; Animation script - energy ball launcher (FZ)
0001DD3E                            ; ---------------------------------------------------------------------------
0001DD3E 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DD40 0000                       		dc.w @redsparking-Ani_PLaunch
0001DD42 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DD44 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DD48 00                         		even
0001DD48 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DD4E                            		even
0001DD4E 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DD54                            		even
0001DD54                            		even
0001DD54                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DD54                            ; ---------------------------------------------------------------------------
0001DD54                            ; Sprite mappings - energy ball	launcher (FZ)
0001DD54                            ; ---------------------------------------------------------------------------
0001DD54                            Map_PLaunch_internal:
0001DD54 0000                       		dc.w @red-Map_PLaunch_internal
0001DD56 0000                       		dc.w @white-Map_PLaunch_internal
0001DD58 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DD5A 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DD5C 01                         @red:		dc.b 1
0001DD5D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DD62 01                         @white:		dc.b 1
0001DD63 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DD68 01                         @sparking1:	dc.b 1
0001DD69 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DD6E 01                         @sparking2:	dc.b 1
0001DD6F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DD74                            		even
0001DD74                            		even
0001DD74                            		include	"_anim\Plasma Balls.asm"
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            ; Animation script - energy balls (FZ)
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DD76 0000                       		dc.w @short-Ani_Plasma
0001DD78 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DD87 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DD96 0A05 FF                    		dc.b $A, 5, afEnd
0001DD9A 00                         		even
0001DD9A 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DDA4                            		even
0001DDA4                            		even
0001DDA4                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            ; Sprite mappings - energy balls (FZ)
0001DDA4                            ; ---------------------------------------------------------------------------
0001DDA4                            Map_Plasma_internal:
0001DDA4 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DDA6 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DDA8 0000                       		dc.w @white1-Map_Plasma_internal
0001DDAA 0000                       		dc.w @white2-Map_Plasma_internal
0001DDAC 0000                       		dc.w @white3-Map_Plasma_internal
0001DDAE 0000                       		dc.w @white4-Map_Plasma_internal
0001DDB0 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DDB2 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DDB4 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DDB6 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DDB8 0000                       		dc.w @blank-Map_Plasma_internal
0001DDBA 02                         @fuzzy1:	dc.b 2
0001DDBB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DDC0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DDC5 02                         @fuzzy2:	dc.b 2
0001DDC6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DDCB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DDD0 02                         @white1:	dc.b 2
0001DDD1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DDD6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DDDB 02                         @white2:	dc.b 2
0001DDDC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DDE1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DDE6 02                         @white3:	dc.b 2
0001DDE7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DDEC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DDF1 02                         @white4:	dc.b 2
0001DDF2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DDF7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DDFC 01                         @fuzzy3:	dc.b 1
0001DDFD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DE02 01                         @fuzzy4:	dc.b 1
0001DE03 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DE08 02                         @fuzzy5:	dc.b 2
0001DE09 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DE0E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DE13 02                         @fuzzy6:	dc.b 2
0001DE14 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DE19 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DE1E 00                         @blank:		dc.b 0
0001DE20 00                         		even
0001DE20 00                         		even
0001DE20                            
0001DE20                            		include	"_incObj\3E Prison Capsule.asm"
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20                            ; Object 3E - prison capsule
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20                            
0001DE20                            Prison:
0001DE20 7000                       		moveq	#0,d0
0001DE22 1028 0024                  		move.b	obRoutine(a0),d0
0001DE26 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DE2A 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DE4A 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001DE50                            
0001DE50                            	@delete:
0001DE50 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001DE56                            ; ===========================================================================
0001DE56 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DE58 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DE5A 0000                       		dc.w Pri_Switched-Pri_Index
0001DE5C 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE5E 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE60 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE62 0000                       		dc.w Pri_Animals-Pri_Index
0001DE64 0000                       		dc.w Pri_EndAct-Pri_Index
0001DE66                            
0001DE66 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DE66                            
0001DE66 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DE6A 040C 0501                  		dc.b 4,	$C, 5, 1
0001DE6E 0610 0403                  		dc.b 6,	$10, 4,	3
0001DE72 0810 0305                  		dc.b 8,	$10, 3,	5
0001DE76                            ; ===========================================================================
0001DE76                            
0001DE76                            Pri_Main:	; Routine 0
0001DE76 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DE7E 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DE84 117C 0004 0001             		move.b	#4,obRender(a0)
0001DE8A 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DE90 7000                       		moveq	#0,d0
0001DE92 1028 0028                  		move.b	obSubtype(a0),d0
0001DE96 E548                       		lsl.w	#2,d0
0001DE98 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DE9C 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DEA0 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DEA4 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DEA8 3028 0018                  		move.w obPriority(a0),d0 
0001DEAC E248                       		lsr.w #1,d0 
0001DEAE 0240 0380                  		andi.w #$380,d0 
0001DEB2 3140 0018                  		move.w d0,obPriority(a0)		
0001DEB6 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DEBA 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DEBE 6600                       		bne.s	@not02		; if not, branch
0001DEC0                            
0001DEC0 117C 0006 0020             		move.b	#6,obColType(a0)
0001DEC6 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DECC                            
0001DECC                            	@not02:
0001DECC 4E75                       		rts	
0001DECE                            ; ===========================================================================
0001DECE                            
0001DECE                            Pri_BodyMain:	; Routine 2
0001DECE 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DED4 6700                       		beq.s	@chkopened
0001DED6 323C 002B                  		move.w	#$2B,d1
0001DEDA 343C 0018                  		move.w	#$18,d2
0001DEDE 363C 0018                  		move.w	#$18,d3
0001DEE2 3828 0008                  		move.w	obX(a0),d4
0001DEE6 4EF9 0001 1D94             		jmp	(SolidObject).l
0001DEEC                            ; ===========================================================================
0001DEEC                            
0001DEEC                            @chkopened:
0001DEEC 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DEF0 6700                       		beq.s	@open		; if yes, branch
0001DEF2 4228 0025                  		clr.b	ob2ndRout(a0)
0001DEF6 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DEFC 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF02                            
0001DF02                            	@open:
0001DF02 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DF08 4E75                       		rts	
0001DF0A                            ; ===========================================================================
0001DF0A                            
0001DF0A                            Pri_Switched:	; Routine 4
0001DF0A 323C 0017                  		move.w	#$17,d1
0001DF0E 343C 0008                  		move.w	#8,d2
0001DF12 363C 0008                  		move.w	#8,d3
0001DF16 3828 0008                  		move.w	obX(a0),d4
0001DF1A 4EB9 0001 1D94             		jsr	(SolidObject).l
0001DF20 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DF26 4EB9 0000 CA32             		jsr	(AnimateSprite).l
0001DF2C 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DF32 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DF36 6700                       		beq.s	@open2		; if yes, branch
0001DF38                            
0001DF38 5068 000C                  		addq.w	#8,obY(a0)
0001DF3C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DF42 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DF48 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DF4C 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DF50 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DF56 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DF5C 4228 0025                  		clr.b	ob2ndRout(a0)
0001DF60 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF66 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF6C                            
0001DF6C                            	@open2:
0001DF6C 4E75                       		rts	
0001DF6E                            ; ===========================================================================
0001DF6E                            
0001DF6E                            Pri_Explosion:	; Routine 6, 8, $A
0001DF6E 7007                       		moveq	#7,d0
0001DF70 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DF74 6600                       		bne.s	@noexplosion
0001DF76 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001DF7C 6600                       		bne.s	@noexplosion
0001DF7E 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DF82 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF88 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF8E 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DF94 7200                       		moveq	#0,d1
0001DF96 1200                       		move.b	d0,d1
0001DF98 E409                       		lsr.b	#2,d1
0001DF9A 0441 0020                  		subi.w	#$20,d1
0001DF9E D369 0008                  		add.w	d1,obX(a1)
0001DFA2 E048                       		lsr.w	#8,d0
0001DFA4 E608                       		lsr.b	#3,d0
0001DFA6 D169 000C                  		add.w	d0,obY(a1)
0001DFAA                            
0001DFAA                            	@noexplosion:
0001DFAA 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DFAE 6700                       		beq.s	@makeanimal
0001DFB0 4E75                       		rts	
0001DFB2                            ; ===========================================================================
0001DFB2                            
0001DFB2                            @makeanimal:
0001DFB2 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DFB8 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DFBE 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DFC4 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DFCA 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DFD0 7C07                       		moveq	#7,d6
0001DFD2 3A3C 009A                  		move.w	#$9A,d5
0001DFD6 78E4                       		moveq	#-$1C,d4
0001DFD8                            
0001DFD8                            	@loop:
0001DFD8 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001DFDE 6600                       		bne.s	@fail
0001DFE0 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DFE4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DFEA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DFF0 D969 0008                  		add.w	d4,obX(a1)
0001DFF4 5E44                       		addq.w	#7,d4
0001DFF6 3345 0036                  		move.w	d5,$36(a1)
0001DFFA 5145                       		subq.w	#8,d5
0001DFFC 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E000                            
0001E000                            	@fail:
0001E000 4E75                       		rts	
0001E002                            ; ===========================================================================
0001E002                            
0001E002                            Pri_Animals:	; Routine $C
0001E002 7007                       		moveq	#7,d0
0001E004 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E008 6600                       		bne.s	@noanimal
0001E00A 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001E010 6600                       		bne.s	@noanimal
0001E012 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E016 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E01C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E022 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001E028 0240 001F                  		andi.w	#$1F,d0
0001E02C 5D40                       		subq.w	#6,d0
0001E02E 4A41                       		tst.w	d1
0001E030 6A00                       		bpl.s	@ispositive
0001E032 4440                       		neg.w	d0
0001E034                            
0001E034                            	@ispositive:
0001E034 D169 0008                  		add.w	d0,obX(a1)
0001E038 337C 000C 0036             		move.w	#$C,$36(a1)
0001E03E                            
0001E03E                            	@noanimal:
0001E03E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E042 6600                       		bne.s	@wait
0001E044 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E048 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E04E                            
0001E04E                            	@wait:
0001E04E 4E75                       		rts	
0001E050                            ; ===========================================================================
0001E050                            
0001E050                            Pri_EndAct:	; Routine $E
0001E050 703E                       		moveq	#$3E,d0
0001E052 7228                       		moveq	#id_Animals,d1
0001E054 7440                       		moveq	#$40,d2
0001E056 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E05A                            
0001E05A                            	@findanimal:
0001E05A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E05C 6700                       		beq.s	@found		; if yes, branch
0001E05E D2C2                       		adda.w	d2,a1		; next object RAM
0001E060 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E064                            
0001E064 4EB9 0001 10B6             		jsr	(GotThroughAct1).l
0001E06A 4EF9 0000 F9C6             		jmp	(DeleteObject).l
0001E070                            
0001E070                            	@found:
0001E070 4E75                       		rts	
0001E070 4E75                       		rts	
0001E072                            		include	"_anim\Prison Capsule.asm"
0001E072                            ; ---------------------------------------------------------------------------
0001E072                            ; Animation script - prison capsule
0001E072                            ; ---------------------------------------------------------------------------
0001E072 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E074 0000                       		dc.w @switchflash-Ani_Pri
0001E076 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E07A                            		even
0001E07A                            		even
0001E07A                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E07A                            ; ---------------------------------------------------------------------------
0001E07A                            ; Sprite mappings - prison capsule
0001E07A                            ; ---------------------------------------------------------------------------
0001E07A                            Map_Pri_internal:
0001E07A 0000                       		dc.w @capsule-Map_Pri_internal
0001E07C 0000                       		dc.w @switch1-Map_Pri_internal
0001E07E 0000                       		dc.w @broken-Map_Pri_internal
0001E080 0000                       		dc.w @switch2-Map_Pri_internal
0001E082 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E084 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E086 0000                       		dc.w @blank-Map_Pri_internal
0001E088 07                         @capsule:	dc.b 7
0001E089 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E08E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E093 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E098 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E09D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E0A2 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0A7 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0AC 01                         @switch1:	dc.b 1
0001E0AD F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E0B2 06                         @broken:	dc.b 6
0001E0B3 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E0B8 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E0BD 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E0C2 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E0C7 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0CC 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0D1 01                         @switch2:	dc.b 1
0001E0D2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E0D7 02                         @unusedthing1:	dc.b 2
0001E0D8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E0DD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E0E2 01                         @unusedthing2:	dc.b 1
0001E0E3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E0E8 00                         @blank:		dc.b 0
0001E0EA 00                         		even
0001E0EA 00                         		even
0001E0EA                            
0001E0EA                            		include	"_incObj\sub ReactToItem.asm"
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            ; Subroutine to react to obColType(a0)
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            
0001E0EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0EA                            
0001E0EA                            
0001E0EA                            ReactToItem:
0001E0EA 4E71                       		nop	
0001E0EC 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E0F0 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E0F4 5142                       		subq.w	#8,d2
0001E0F6 7A00                       		moveq	#0,d5
0001E0F8 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E0FC 5705                       		subq.b	#3,d5
0001E0FE 9645                       		sub.w	d5,d3
0001E100 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E106 6600                       		bne.s	@notducking	; if not, branch
0001E108 0643 000C                  		addi.w	#$C,d3
0001E10C 7A0A                       		moveq	#$A,d5
0001E10E                            
0001E10E                            	@notducking:
0001E10E 383C 0010                  		move.w	#$10,d4
0001E112 DA45                       		add.w	d5,d5
0001E114 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E118 3C3C 005F                  		move.w	#$5F,d6
0001E11C                            
0001E11C                            @loop:
0001E11C 4A29 0001                  		tst.b	obRender(a1)
0001E120 6A00                       		bpl.s	@next
0001E122 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E126 6600                       		bne.s	@proximity	; if nonzero, branch
0001E128                            
0001E128                            	@next:
0001E128 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E12C 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E130                            
0001E130 7000                       		moveq	#0,d0
0001E132 4E75                       		rts	
0001E134                            ; ===========================================================================
0001E134                            @sizes:		;   width, height
0001E134 1414                       		dc.b  $14, $14		; $01
0001E136 0C14                       		dc.b   $C, $14		; $02
0001E138 140C                       		dc.b  $14,  $C		; $03
0001E13A 0410                       		dc.b	4, $10		; $04
0001E13C 0C12                       		dc.b   $C, $12		; $05
0001E13E 1010                       		dc.b  $10, $10		; $06
0001E140 0606                       		dc.b	6,   6		; $07
0001E142 180C                       		dc.b  $18,  $C		; $08
0001E144 0C10                       		dc.b   $C, $10		; $09
0001E146 100C                       		dc.b  $10,  $C		; $0A
0001E148 0808                       		dc.b	8,   8		; $0B
0001E14A 1410                       		dc.b  $14, $10		; $0C
0001E14C 1408                       		dc.b  $14,   8		; $0D
0001E14E 0E0E                       		dc.b   $E,  $E		; $0E
0001E150 1818                       		dc.b  $18, $18		; $0F
0001E152 2810                       		dc.b  $28, $10		; $10
0001E154 1018                       		dc.b  $10, $18		; $11
0001E156 0810                       		dc.b	8, $10		; $12
0001E158 2070                       		dc.b  $20, $70		; $13
0001E15A 4020                       		dc.b  $40, $20		; $14
0001E15C 8020                       		dc.b  $80, $20		; $15
0001E15E 2020                       		dc.b  $20, $20		; $16
0001E160 0808                       		dc.b	8,   8		; $17
0001E162 0404                       		dc.b	4,   4		; $18
0001E164 2008                       		dc.b  $20,   8		; $19
0001E166 0C0C                       		dc.b   $C,  $C		; $1A
0001E168 0804                       		dc.b	8,   4		; $1B
0001E16A 1804                       		dc.b  $18,   4		; $1C
0001E16C 2804                       		dc.b  $28,   4		; $1D
0001E16E 0408                       		dc.b	4,   8		; $1E
0001E170 0418                       		dc.b	4, $18		; $1F
0001E172 0428                       		dc.b	4, $28		; $20
0001E174 0420                       		dc.b	4, $20		; $21
0001E176 1818                       		dc.b  $18, $18		; $22
0001E178 0C18                       		dc.b   $C, $18		; $23
0001E17A 4808                       		dc.b  $48,   8		; $24
0001E17C                            ; ===========================================================================
0001E17C                            
0001E17C                            @proximity:
0001E17C 0240 003F                  		andi.w	#$3F,d0
0001E180 D040                       		add.w	d0,d0
0001E182 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E186 7200                       		moveq	#0,d1
0001E188 121A                       		move.b	(a2)+,d1
0001E18A 3029 0008                  		move.w	obX(a1),d0
0001E18E 9041                       		sub.w	d1,d0
0001E190 9042                       		sub.w	d2,d0
0001E192 6400                       		bcc.s	@outsidex	; branch if not touching
0001E194 D241                       		add.w	d1,d1
0001E196 D041                       		add.w	d1,d0
0001E198 6500                       		bcs.s	@withinx	; branch if touching
0001E19A 6000 FF8C                  		bra.w	@next
0001E19E                            ; ===========================================================================
0001E19E                            
0001E19E                            @outsidex:
0001E19E 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1A2 B044                       		cmp.w	d4,d0
0001E1A4 6200 FF82                  		bhi.w	@next
0001E1A8                            
0001E1A8                            @withinx:
0001E1A8 7200                       		moveq	#0,d1
0001E1AA 121A                       		move.b	(a2)+,d1
0001E1AC 3029 000C                  		move.w	obY(a1),d0
0001E1B0 9041                       		sub.w	d1,d0
0001E1B2 9043                       		sub.w	d3,d0
0001E1B4 6400                       		bcc.s	@outsidey	; branch if not touching
0001E1B6 D241                       		add.w	d1,d1
0001E1B8 D240                       		add.w	d0,d1
0001E1BA 6500                       		bcs.s	@withiny	; branch if touching
0001E1BC 6000 FF6A                  		bra.w	@next
0001E1C0                            
0001E1C0                            ; ===========================================================================
0001E1C0                            
0001E1C0                            @outsidey:
0001E1C0 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1C4 B045                       		cmp.w	d5,d0
0001E1C6 6200 FF60                  		bhi.w	@next
0001E1CA                            
0001E1CA                            @withiny:
0001E1CA                            	@chktype:
0001E1CA 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E1D0 6600 0000                          	bne	NotGHZReact  ;TIS
0001E1D4 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E1D8 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E1DC 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1E0 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E1E4 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1E8 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E1EC 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1F0                            NotGHZReact:                      ;TIS
0001E1F0 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E1F4 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E1F8 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E1FC 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E200 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E204 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E206 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E20A                            
0001E20A                            ; obColType is $40-$7F (powerups)
0001E20A                            
0001E20A 1029 0020                  		move.b	obColType(a1),d0
0001E20E 0200 003F                  		andi.b	#$3F,d0
0001E212 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E216 6700                       		beq.s	React_Monitor	; if yes, branch
0001E218 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E21E 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E222 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E226                            
0001E226                            	@invincible:
0001E226 4E75                       		rts	
0001E228                            ; ===========================================================================
0001E228                            
0001E228                            React_Monitor:
0001E228 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E22C 6A00                       		bpl.s	@movingdown	; if not, branch
0001E22E                            
0001E22E 3028 000C                  		move.w	obY(a0),d0
0001E232 0440 0010                  		subi.w	#$10,d0
0001E236 B069 000C                  		cmp.w	obY(a1),d0
0001E23A 6500                       		bcs.s	@donothing
0001E23C 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E240 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E246 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E24A 6600                       		bne.s	@donothing
0001E24C 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E250 4E75                       		rts	
0001E252                            ; ===========================================================================
0001E252                            
0001E252                            @movingdown:
0001E252 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E258 6600                       		bne.s	@donothing
0001E25A 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E25E 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E262                            
0001E262                            	@donothing:
0001E262 4E75                       		rts	
0001E264                            ; ===========================================================================
0001E264                            
0001E264                            React_Enemy:
0001E264 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E268 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E26A 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E270 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E274 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E27A 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E27E                            
0001E27E                            	@donthurtsonic:
0001E27E 4A29 0021                  		tst.b	obColProp(a1)
0001E282 6700                       		beq.s	breakenemy
0001E284                            
0001E284 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E288 4468 0012                  		neg.w	obVelY(a0)
0001E28C E0E8 0010                  		asr	obVelX(a0)
0001E290 E0E8 0012                  		asr	obVelY(a0)
0001E294 137C 0000 0020             		move.b	#0,obColType(a1)
0001E29A 5329 0021                  		subq.b	#1,obColProp(a1)
0001E29E 6600                       		bne.s	@flagnotclear
0001E2A0 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2A6                            
0001E2A6                            	@flagnotclear:
0001E2A6 4E75                       		rts	
0001E2A8                            ; ===========================================================================
0001E2A8                            
0001E2A8                            breakenemy:
0001E2A8 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2AE 7000                       		moveq	#0,d0
0001E2B0 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E2B4 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E2B8 0C40 0006                  		cmpi.w	#6,d0
0001E2BC 6500                       		bcs.s	@bonusokay
0001E2BE 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E2C0                            
0001E2C0                            	@bonusokay:
0001E2C0 3340 003E                  		move.w	d0,$3E(a1)
0001E2C4 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E2C8 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E2CE 6500                       		bcs.s	@lessthan16	; if not, branch
0001E2D0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E2D4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E2DA                            
0001E2DA                            	@lessthan16:
0001E2DA 6100 0000                  		bsr.w	AddPoints
0001E2DE 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E2E2 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E2E8 4A68 0012                  		tst.w	obVelY(a0)
0001E2EC 6B00                       		bmi.s	@bouncedown
0001E2EE 3028 000C                  		move.w	obY(a0),d0
0001E2F2 B069 000C                  		cmp.w	obY(a1),d0
0001E2F6 6400                       		bcc.s	@bounceup
0001E2F8 4468 0012                  		neg.w	obVelY(a0)
0001E2FC 4E75                       		rts	
0001E2FE                            ; ===========================================================================
0001E2FE                            
0001E2FE                            	@bouncedown:
0001E2FE 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E304 4E75                       		rts	
0001E306                            
0001E306                            	@bounceup:
0001E306 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E30C 4E75                       		rts	
0001E30E                            
0001E30E 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E316                            
0001E316                            ; ===========================================================================
0001E316                            
0001E316                            React_Caterkiller:
0001E316 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E31C                            
0001E31C                            React_ChkHurt:
0001E31C 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E320 6700                       		beq.s	notinvincible	; if not, branch
0001E322                            
0001E322                            	isflashing:
0001E322 70FF                       		moveq	#-1,d0
0001E324 4E75                       		rts	
0001E326                            ; ===========================================================================
0001E326                            
0001E326                            	notinvincible:
0001E326 4E71                       		nop	
0001E328 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E32C 66F4                       		bne.s	isflashing	; if yes, branch
0001E32E 2449                       		movea.l	a1,a2
0001E330                            
0001E330                            ; End of function ReactToItem
0001E330                            ; continue straight to HurtSonic
0001E330                            
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            ; Hurting Sonic	subroutine
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            
0001E330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E330                            
0001E330                            
0001E330                            HurtSonic:
0001E330 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E334 6600                       		bne.s	@hasshield	; if yes, branch
0001E336 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E33A 6600                       		bne.s	@hasshield	; if yes, branch
0001E33C 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E340 6600                       		bne.s	@hasshield	; if yes, branch
0001E342 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E346 6600                       		bne.s	@hasshield	; if yes, branch
0001E348 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E34C 6700 0000                  		beq.w	@norings	; if not, branch
0001E350                            
0001E350 4EB9 0000 FE12             		jsr	(FindFreeObj).l
0001E356 6600                       		bne.s	@hasshield
0001E358 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E35C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E362 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E368                            
0001E368                            	@hasshield:
0001E368 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E36E 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E370 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E374 6700 FFAC                  		beq.w	isflashing
0001E378 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E37C 6700 FFA4                  		beq.w	isflashing
0001E380                            
0001E380                            	@hasrshield:
0001E380 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E386 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E388 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E38C 6700 FF94                  		beq.w 	isflashing
0001E390 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E394 6700 FF8C                  		beq.w 	isflashing
0001E398 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E39C 6700 FF84                  		beq.w 	isflashing
0001E3A0 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E3A4 6700 FF7C                  		beq.w 	isflashing
0001E3A8 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E3AC 6700 FF74                  		beq.w 	isflashing
0001E3B0 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E3B4 6700 FF6C                  		beq.w 	isflashing
0001E3B8 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E3BC 6700 FF64                  		beq.w 	isflashing
0001E3C0 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E3C4 6700 FF5C                  		beq.w 	isflashing
0001E3C8                            
0001E3C8                            	@hasspshield:
0001E3C8 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E3CE 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E3D0 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E3D4 6700 FF4C                  		beq.w 	isflashing
0001E3D8 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E3DC 6700 FF44                  		beq.w 	isflashing
0001E3E0 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E3E4 6700 FF3C                  		beq.w 	isflashing
0001E3E8 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E3EC 6700 FF34                  		beq.w 	isflashing
0001E3F0 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E3F4 6700 FF2C                  		beq.w 	isflashing
0001E3F8 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E3FC 6700 FF24                  		beq.w 	isflashing
0001E400 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E404 6700 FF1C                  		beq.w 	isflashing
0001E408 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E40C 6700 FF14                  		beq.w 	isflashing
0001E410 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E414 6700 FF0C                  		beq.w 	isflashing
0001E418 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E41C 6700 FE8A                  		beq.w 	breakenemy
0001E420 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E424 6700 FE82                  		beq.w 	breakenemy
0001E428 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E42C 6700 FE7A                  		beq.w 	breakenemy
0001E430 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E434 6700 FE72                  		beq.w 	breakenemy
0001E438 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E43C 6700 FE6A                  		beq.w 	breakenemy
0001E440                            
0001E440                            
0001E440                            	@hurtcont:
0001E440 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E446 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E44C 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E452                            		
0001E452 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E458 6700                       		beq.s	@hurtcont2	;if not, branch
0001E45A 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E45E                            		
0001E45E                            	@hurtcont2:
0001E45E 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E464 4EB9 0001 63D2             		jsr		Sonic_ResetOnFloor
0001E46A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E470 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E476 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E47C 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E482 6700                       		beq.s	@isdry		; if not, branch
0001E484                            
0001E484 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E48A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E490                            
0001E490                            	@isdry:
0001E490 3028 0008                  		move.w	obX(a0),d0
0001E494 B06A 0008                  		cmp.w	obX(a2),d0
0001E498 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E49A 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E49E                            
0001E49E                            	@isleft:
0001E49E 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E4A4 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E4AA 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E4B0 317C 0120 0030             		move.w	#$120,$30(a0)
0001E4B6 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E4BA 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4BC 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E4C0 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C2 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E4C8 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E4CE 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E4D4 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E4D8 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E4DC 6600                       		bne.s	@sound		; if not, branch
0001E4DE 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E4E2 6600                       		bne.s	@sound		; if not, branch
0001E4E4 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E4E8                            
0001E4E8                            	@sound:
0001E4E8 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E4EE 70FF                       		moveq	#-1,d0
0001E4F0 4E75                       		rts	
0001E4F2                            
0001E4F2                            	@hurtelec:
0001E4F2 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E4F8 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E4FE 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E502 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E506 66E0                       		bne.s	@sound		; if not, branch
0001E508 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E50C 66DA                       		bne.s	@sound		; if not, branch
0001E50E 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E512                            ; ===========================================================================
0001E512                            
0001E512                            @norings:
0001E512 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E516 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E51A                            
0001E51A                            ; ---------------------------------------------------------------------------
0001E51A                            ; Subroutine to	kill Sonic
0001E51A                            ; ---------------------------------------------------------------------------
0001E51A                            
0001E51A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E51A                            
0001E51A                            
0001E51A                            KillSonic:
0001E51A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E51E 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E522 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E528 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E52E 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E534 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E53A 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E540 4EB9 0001 63D2             		jsr		Sonic_ResetOnFloor
0001E546 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E54C 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E552 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E558 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E55E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E564 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E568 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E56A 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E56E 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E570 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E576 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E57C 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E580 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E584 6600                       		bne.s	@sound
0001E586 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E58A                            
0001E58A                            	@sound:
0001E58A 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E590                            
0001E590                            	@dontdie:
0001E590 70FF                       		moveq	#-1,d0
0001E592 4E75                       		rts	
0001E594                            ; End of function KillSonic
0001E594                            Kill_Lava:	
0001E594 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E59A 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E5A0 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E5A4 4EB9 0000 1254                 jsr		(PlaySound_Special).l
0001E5AA                            
0001E5AA                            
0001E5AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5AA                            
0001E5AA                            
0001E5AA                            React_Special:
0001E5AA 1229 0020                  		move.b	obColType(a1),d1
0001E5AE 0201 003F                  		andi.b	#$3F,d1
0001E5B2 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E5B6 6700                       		beq.s	@caterkiller	; if yes, branch
0001E5B8 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E5BC 6700                       		beq.s	@yadrin		; if yes, branch
0001E5BE 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E5C2 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5C4 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E5C8 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5CA 4E75                       		rts	
0001E5CC                            ; ===========================================================================
0001E5CC                            
0001E5CC                            @caterkiller:
0001E5CC 6000 FD48                  		bra.w	React_Caterkiller
0001E5D0                            ; ===========================================================================
0001E5D0                            
0001E5D0                            @yadrin:
0001E5D0 9A40                       		sub.w	d0,d5
0001E5D2 0C45 0008                  		cmpi.w	#8,d5
0001E5D6 6400                       		bcc.s	@normalenemy
0001E5D8 3029 0008                  		move.w	obX(a1),d0
0001E5DC 5940                       		subq.w	#4,d0
0001E5DE 0829 0000 0022             		btst	#0,obStatus(a1)
0001E5E4 6700                       		beq.s	@noflip
0001E5E6 0440 0010                  		subi.w	#$10,d0
0001E5EA                            
0001E5EA                            	@noflip:
0001E5EA 9042                       		sub.w	d2,d0
0001E5EC 6400                       		bcc.s	@loc_1B13C
0001E5EE 0640 0018                  		addi.w	#$18,d0
0001E5F2 6500                       		bcs.s	@loc_1B140
0001E5F4 6000                       		bra.s	@normalenemy
0001E5F6                            ; ===========================================================================
0001E5F6                            
0001E5F6                            	@loc_1B13C:
0001E5F6 B044                       		cmp.w	d4,d0
0001E5F8 6200                       		bhi.s	@normalenemy
0001E5FA                            
0001E5FA                            	@loc_1B140:
0001E5FA 6000 FD20                  		bra.w	React_ChkHurt
0001E5FE                            ; ===========================================================================
0001E5FE                            
0001E5FE                            	@normalenemy:
0001E5FE 6000 FC64                  		bra.w	React_Enemy
0001E602                            ; ===========================================================================
0001E602                            
0001E602                            @D7orE1:
0001E602 5229 0021                  		addq.b	#1,obColProp(a1)
0001E606 4E75                       		rts	
0001E608                            ; End of function React_Special
0001E608                            
0001E608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E608                            
0001E608                            React_ChkWaterTag:
0001E608 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E60E 6600 0000                  		bne	NotWaterTag
0001E612 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E618                            	NotWaterTag:
0001E618 4E75                       		rts
0001E61A                            
0001E61A                            React_WaterTag:
0001E61A 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E620 6700 0000                  		beq	SkipWaterTag
0001E624 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E62A                            	SkipWaterTag:
0001E62A 4E75                       		rts
0001E62A 4E75                       		rts
0001E62C                            
0001E62C                            ; ---------------------------------------------------------------------------
0001E62C                            ; Subroutine to	show the special stage layout
0001E62C                            ; ---------------------------------------------------------------------------
0001E62C                            
0001E62C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E62C                            
0001E62C                            
0001E62C                            SS_ShowLayout:
0001E62C 6100 0000                  		bsr.w	SS_AniWallsRings
0001E630 6100 0000                  		bsr.w	SS_AniItems
0001E634 3F05                       		move.w	d5,-(sp)
0001E636 43F8 8000                  		lea	($FFFF8000).w,a1
0001E63A 1038 F780                  		move.b	(v_ssangle).w,d0
0001E63E 0200 00FC                  		andi.b	#$FC,d0
0001E642 4EB9 0000 3A36             		jsr	(CalcSine).l
0001E648 3800                       		move.w	d0,d4
0001E64A 3A01                       		move.w	d1,d5
0001E64C C9FC 0018                  		muls.w	#$18,d4
0001E650 CBFC 0018                  		muls.w	#$18,d5
0001E654 7400                       		moveq	#0,d2
0001E656 3438 F700                  		move.w	(v_screenposx).w,d2
0001E65A 84FC 0018                  		divu.w	#$18,d2
0001E65E 4842                       		swap	d2
0001E660 4442                       		neg.w	d2
0001E662 0642 FF4C                  		addi.w	#-$B4,d2
0001E666 7600                       		moveq	#0,d3
0001E668 3638 F704                  		move.w	(v_screenposy).w,d3
0001E66C 86FC 0018                  		divu.w	#$18,d3
0001E670 4843                       		swap	d3
0001E672 4443                       		neg.w	d3
0001E674 0643 FF4C                  		addi.w	#-$B4,d3
0001E678 3E3C 000F                  		move.w	#$F,d7
0001E67C                            
0001E67C                            loc_1B19E:
0001E67C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E680 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E684 4440                       		neg.w	d0
0001E686 C3C2                       		muls.w	d2,d1
0001E688 C1C3                       		muls.w	d3,d0
0001E68A 2C00                       		move.l	d0,d6
0001E68C DC81                       		add.l	d1,d6
0001E68E 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E692 C1C2                       		muls.w	d2,d0
0001E694 C3C3                       		muls.w	d3,d1
0001E696 D280                       		add.l	d0,d1
0001E698 2406                       		move.l	d6,d2
0001E69A 3C3C 000F                  		move.w	#$F,d6
0001E69E                            
0001E69E                            loc_1B1C0:
0001E69E 2002                       		move.l	d2,d0
0001E6A0 E080                       		asr.l	#8,d0
0001E6A2 32C0                       		move.w	d0,(a1)+
0001E6A4 2001                       		move.l	d1,d0
0001E6A6 E080                       		asr.l	#8,d0
0001E6A8 32C0                       		move.w	d0,(a1)+
0001E6AA D485                       		add.l	d5,d2
0001E6AC D284                       		add.l	d4,d1
0001E6AE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E6B2                            
0001E6B2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E6B6 0643 0018                  		addi.w	#$18,d3
0001E6BA 51CF FFC0                  		dbf	d7,loc_1B19E
0001E6BE                            
0001E6BE 3A1F                       		move.w	(sp)+,d5
0001E6C0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E6C6 7000                       		moveq	#0,d0
0001E6C8 3038 F704                  		move.w	(v_screenposy).w,d0
0001E6CC 80FC 0018                  		divu.w	#$18,d0
0001E6D0 C0FC 0080                  		mulu.w	#$80,d0
0001E6D4 D1C0                       		adda.l	d0,a0
0001E6D6 7000                       		moveq	#0,d0
0001E6D8 3038 F700                  		move.w	(v_screenposx).w,d0
0001E6DC 80FC 0018                  		divu.w	#$18,d0
0001E6E0 D0C0                       		adda.w	d0,a0
0001E6E2 49F8 8000                  		lea	($FFFF8000).w,a4
0001E6E6 3E3C 000F                  		move.w	#$F,d7
0001E6EA                            
0001E6EA                            loc_1B20C:
0001E6EA 3C3C 000F                  		move.w	#$F,d6
0001E6EE                            
0001E6EE                            loc_1B210:
0001E6EE 7000                       		moveq	#0,d0
0001E6F0 1018                       		move.b	(a0)+,d0
0001E6F2 6700                       		beq.s	loc_1B268
0001E6F4 0C00 004E                  		cmpi.b	#$4E,d0
0001E6F8 6200                       		bhi.s	loc_1B268
0001E6FA 3614                       		move.w	(a4),d3
0001E6FC 0643 0120                  		addi.w	#$120,d3
0001E700 0C43 0070                  		cmpi.w	#$70,d3
0001E704 6500                       		blo.s	loc_1B268
0001E706 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E70A 6400                       		bhs.s	loc_1B268
0001E70C 342C 0002                  		move.w	2(a4),d2
0001E710 0642 00F0                  		addi.w	#$F0,d2
0001E714 0C42 0070                  		cmpi.w	#$70,d2
0001E718 6500                       		blo.s	loc_1B268
0001E71A 0C42 0170                  		cmpi.w	#$170,d2
0001E71E 6400                       		bhs.s	loc_1B268
0001E720 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E726 E748                       		lsl.w	#3,d0
0001E728 4BF5 0000                  		lea	(a5,d0.w),a5
0001E72C 225D                       		movea.l	(a5)+,a1
0001E72E 321D                       		move.w	(a5)+,d1
0001E730 D241                       		add.w	d1,d1
0001E732 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E736 365D                       		movea.w	(a5)+,a3
0001E738 7200                       		moveq	#0,d1
0001E73A 1219                       		move.b	(a1)+,d1
0001E73C 5301                       		subq.b	#1,d1
0001E73E 6B00                       		bmi.s	loc_1B268
0001E740 4EB9 0000 FAEA             		jsr	(BuildSpr_Normal).l
0001E746                            
0001E746                            loc_1B268:
0001E746 584C                       		addq.w	#4,a4
0001E748 51CE FFA4                  		dbf	d6,loc_1B210
0001E74C                            
0001E74C 41E8 0070                  		lea	$70(a0),a0
0001E750 51CF FF98                  		dbf	d7,loc_1B20C
0001E754                            
0001E754 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E758 0C05 0050                  		cmpi.b	#$50,d5
0001E75C 6700                       		beq.s	loc_1B288
0001E75E 24BC 0000 0000             		move.l	#0,(a2)
0001E764 4E75                       		rts	
0001E766                            ; ===========================================================================
0001E766                            
0001E766                            loc_1B288:
0001E766 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E76C 4E75                       		rts	
0001E76E                            ; End of function SS_ShowLayout
0001E76E                            
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E                            ; Subroutine to	animate	walls and rings	in the special stage
0001E76E                            ; ---------------------------------------------------------------------------
0001E76E                            
0001E76E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E76E                            
0001E76E                            
0001E76E                            SS_AniWallsRings:
0001E76E 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E774 7000                       		moveq	#0,d0
0001E776 1038 F780                  		move.b	(v_ssangle).w,d0
0001E77A E408                       		lsr.b	#2,d0
0001E77C 0240 000F                  		andi.w	#$F,d0
0001E780 7223                       		moveq	#$23,d1
0001E782                            
0001E782                            loc_1B2A4:
0001E782 3280                       		move.w	d0,(a1)
0001E784 5049                       		addq.w	#8,a1
0001E786 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E78A                            
0001E78A 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E790 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E794 6A00                       		bpl.s	loc_1B2C8
0001E796 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E79C 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E7A0 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E7A6                            
0001E7A6                            loc_1B2C8:
0001E7A6 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E7AC 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E7B0 6A00                       		bpl.s	loc_1B2E4
0001E7B2 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E7B8 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E7BC 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E7C2                            
0001E7C2                            loc_1B2E4:
0001E7C2 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E7C6 1340 0138                  		move.b	d0,$138(a1)
0001E7CA 1340 0160                  		move.b	d0,$160(a1)
0001E7CE 1340 0148                  		move.b	d0,$148(a1)
0001E7D2 1340 0150                  		move.b	d0,$150(a1)
0001E7D6 1340 01D8                  		move.b	d0,$1D8(a1)
0001E7DA 1340 01E0                  		move.b	d0,$1E0(a1)
0001E7DE 1340 01E8                  		move.b	d0,$1E8(a1)
0001E7E2 1340 01F0                  		move.b	d0,$1F0(a1)
0001E7E6 1340 01F8                  		move.b	d0,$1F8(a1)
0001E7EA 1340 0200                  		move.b	d0,$200(a1)
0001E7EE 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E7F2 6A00                       		bpl.s	loc_1B326
0001E7F4 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E7FA 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E7FE 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E804                            
0001E804                            loc_1B326:
0001E804 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E808 1340 0168                  		move.b	d0,$168(a1)
0001E80C 1340 0170                  		move.b	d0,$170(a1)
0001E810 1340 0178                  		move.b	d0,$178(a1)
0001E814 1340 0180                  		move.b	d0,$180(a1)
0001E818 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E81C 6A00                       		bpl.s	loc_1B350
0001E81E 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E824 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E828 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E82E                            
0001E82E                            loc_1B350:
0001E82E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E834 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E83A 7000                       		moveq	#0,d0
0001E83C 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E840 D040                       		add.w	d0,d0
0001E842 41F0 0000                  		lea	(a0,d0.w),a0
0001E846 3290                       		move.w	(a0),(a1)
0001E848 3368 0002 0008             		move.w	2(a0),8(a1)
0001E84E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E854 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E85A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E860 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E866 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E86C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E872 D0FC 0020                  		adda.w	#$20,a0
0001E876 D2FC 0048                  		adda.w	#$48,a1
0001E87A 3290                       		move.w	(a0),(a1)
0001E87C 3368 0002 0008             		move.w	2(a0),8(a1)
0001E882 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E888 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E88E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E894 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E89A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8A0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8A6 D0FC 0020                  		adda.w	#$20,a0
0001E8AA D2FC 0048                  		adda.w	#$48,a1
0001E8AE 3290                       		move.w	(a0),(a1)
0001E8B0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8B6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8BC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8C2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8C8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8CE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8D4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8DA D0FC 0020                  		adda.w	#$20,a0
0001E8DE D2FC 0048                  		adda.w	#$48,a1
0001E8E2 3290                       		move.w	(a0),(a1)
0001E8E4 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8EA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8F0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8F6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8FC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E902 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E908 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E90E D0FC 0020                  		adda.w	#$20,a0
0001E912 D2FC 0048                  		adda.w	#$48,a1
0001E916 4E75                       		rts	
0001E918                            ; End of function SS_AniWallsRings
0001E918                            
0001E918                            ; ===========================================================================
0001E918 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E928 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E938 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E948 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E958 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E968 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E978 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E988 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            ; Subroutine to	remove items when you collect them in the special stage
0001E998                            ; ---------------------------------------------------------------------------
0001E998                            
0001E998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E998                            
0001E998                            
0001E998                            SS_RemoveCollectedItem:
0001E998 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E99E 303C 001F                  		move.w	#$1F,d0
0001E9A2                            
0001E9A2                            loc_1B4C4:
0001E9A2 4A12                       		tst.b	(a2)
0001E9A4 6700                       		beq.s	locret_1B4CE
0001E9A6 504A                       		addq.w	#8,a2
0001E9A8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E9AC                            
0001E9AC                            locret_1B4CE:
0001E9AC 4E75                       		rts	
0001E9AE                            ; End of function SS_RemoveCollectedItem
0001E9AE                            
0001E9AE                            ; ---------------------------------------------------------------------------
0001E9AE                            ; Subroutine to	animate	special	stage items when you touch them
0001E9AE                            ; ---------------------------------------------------------------------------
0001E9AE                            
0001E9AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9AE                            
0001E9AE                            
0001E9AE                            SS_AniItems:
0001E9AE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E9B4 3E3C 001F                  		move.w	#$1F,d7
0001E9B8                            
0001E9B8                            loc_1B4DA:
0001E9B8 7000                       		moveq	#0,d0
0001E9BA 1010                       		move.b	(a0),d0
0001E9BC 6700                       		beq.s	loc_1B4E8
0001E9BE E548                       		lsl.w	#2,d0
0001E9C0 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E9C4 4E91                       		jsr	(a1)
0001E9C6                            
0001E9C6                            loc_1B4E8:
0001E9C6 5048                       		addq.w	#8,a0
0001E9C8                            
0001E9C8                            loc_1B4EA:
0001E9C8 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E9CC                            
0001E9CC 4E75                       		rts	
0001E9CE                            ; End of function SS_AniItems
0001E9CE                            
0001E9CE                            ; ===========================================================================
0001E9CE 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E9D2 0000 0000                  		dc.l SS_AniBumper
0001E9D6 0000 0000                  		dc.l SS_Ani1Up
0001E9DA 0000 0000                  		dc.l SS_AniReverse
0001E9DE 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E9E2 0000 0000                  		dc.l SS_AniGlassBlock
0001E9E6                            ; ===========================================================================
0001E9E6                            
0001E9E6                            SS_AniRingSparks:
0001E9E6 5328 0002                  		subq.b	#1,2(a0)
0001E9EA 6A00                       		bpl.s	locret_1B530
0001E9EC 117C 0005 0002             		move.b	#5,2(a0)
0001E9F2 7000                       		moveq	#0,d0
0001E9F4 1028 0003                  		move.b	3(a0),d0
0001E9F8 5228 0003                  		addq.b	#1,3(a0)
0001E9FC 2268 0004                  		movea.l	4(a0),a1
0001EA00 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EA04 1280                       		move.b	d0,(a1)
0001EA06 6600                       		bne.s	locret_1B530
0001EA08 4290                       		clr.l	(a0)
0001EA0A 42A8 0004                  		clr.l	4(a0)
0001EA0E                            
0001EA0E                            locret_1B530:
0001EA0E 4E75                       		rts	
0001EA10                            ; ===========================================================================
0001EA10 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EA16                            ; ===========================================================================
0001EA16                            
0001EA16                            SS_AniBumper:
0001EA16 5328 0002                  		subq.b	#1,2(a0)
0001EA1A 6A00                       		bpl.s	locret_1B566
0001EA1C 117C 0007 0002             		move.b	#7,2(a0)
0001EA22 7000                       		moveq	#0,d0
0001EA24 1028 0003                  		move.b	3(a0),d0
0001EA28 5228 0003                  		addq.b	#1,3(a0)
0001EA2C 2268 0004                  		movea.l	4(a0),a1
0001EA30 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EA34 6600                       		bne.s	loc_1B564
0001EA36 4290                       		clr.l	(a0)
0001EA38 42A8 0004                  		clr.l	4(a0)
0001EA3C 12BC 0025                  		move.b	#$25,(a1)
0001EA40 4E75                       		rts	
0001EA42                            ; ===========================================================================
0001EA42                            
0001EA42                            loc_1B564:
0001EA42 1280                       		move.b	d0,(a1)
0001EA44                            
0001EA44                            locret_1B566:
0001EA44 4E75                       		rts	
0001EA46                            ; ===========================================================================
0001EA46 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EA4C                            ; ===========================================================================
0001EA4C                            
0001EA4C                            SS_Ani1Up:
0001EA4C 5328 0002                  		subq.b	#1,2(a0)
0001EA50 6A00                       		bpl.s	locret_1B596
0001EA52 117C 0005 0002             		move.b	#5,2(a0)
0001EA58 7000                       		moveq	#0,d0
0001EA5A 1028 0003                  		move.b	3(a0),d0
0001EA5E 5228 0003                  		addq.b	#1,3(a0)
0001EA62 2268 0004                  		movea.l	4(a0),a1
0001EA66 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EA6A 1280                       		move.b	d0,(a1)
0001EA6C 6600                       		bne.s	locret_1B596
0001EA6E 4290                       		clr.l	(a0)
0001EA70 42A8 0004                  		clr.l	4(a0)
0001EA74                            
0001EA74                            locret_1B596:
0001EA74 4E75                       		rts	
0001EA76                            ; ===========================================================================
0001EA76 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EA7C                            ; ===========================================================================
0001EA7C                            
0001EA7C                            SS_AniReverse:
0001EA7C 5328 0002                  		subq.b	#1,2(a0)
0001EA80 6A00                       		bpl.s	locret_1B5CC
0001EA82 117C 0007 0002             		move.b	#7,2(a0)
0001EA88 7000                       		moveq	#0,d0
0001EA8A 1028 0003                  		move.b	3(a0),d0
0001EA8E 5228 0003                  		addq.b	#1,3(a0)
0001EA92 2268 0004                  		movea.l	4(a0),a1
0001EA96 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EA9A 6600                       		bne.s	loc_1B5CA
0001EA9C 4290                       		clr.l	(a0)
0001EA9E 42A8 0004                  		clr.l	4(a0)
0001EAA2 12BC 002B                  		move.b	#$2B,(a1)
0001EAA6 4E75                       		rts	
0001EAA8                            ; ===========================================================================
0001EAA8                            
0001EAA8                            loc_1B5CA:
0001EAA8 1280                       		move.b	d0,(a1)
0001EAAA                            
0001EAAA                            locret_1B5CC:
0001EAAA 4E75                       		rts	
0001EAAC                            ; ===========================================================================
0001EAAC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EAB2                            ; ===========================================================================
0001EAB2                            
0001EAB2                            SS_AniEmeraldSparks:
0001EAB2 5328 0002                  		subq.b	#1,2(a0)
0001EAB6 6A00                       		bpl.s	locret_1B60C
0001EAB8 117C 0005 0002             		move.b	#5,2(a0)
0001EABE 7000                       		moveq	#0,d0
0001EAC0 1028 0003                  		move.b	3(a0),d0
0001EAC4 5228 0003                  		addq.b	#1,3(a0)
0001EAC8 2268 0004                  		movea.l	4(a0),a1
0001EACC 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EAD0 1280                       		move.b	d0,(a1)
0001EAD2 6600                       		bne.s	locret_1B60C
0001EAD4 4290                       		clr.l	(a0)
0001EAD6 42A8 0004                  		clr.l	4(a0)
0001EADA 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EAEA                            
0001EAEA                            locret_1B60C:
0001EAEA 4E75                       		rts	
0001EAEC                            ; ===========================================================================
0001EAEC 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EAF2                            ; ===========================================================================
0001EAF2                            
0001EAF2                            SS_AniGlassBlock:
0001EAF2 5328 0002                  		subq.b	#1,2(a0)
0001EAF6 6A00                       		bpl.s	locret_1B640
0001EAF8 117C 0001 0002             		move.b	#1,2(a0)
0001EAFE 7000                       		moveq	#0,d0
0001EB00 1028 0003                  		move.b	3(a0),d0
0001EB04 5228 0003                  		addq.b	#1,3(a0)
0001EB08 2268 0004                  		movea.l	4(a0),a1
0001EB0C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EB10 1280                       		move.b	d0,(a1)
0001EB12 6600                       		bne.s	locret_1B640
0001EB14 12A8 0004                  		move.b	4(a0),(a1)
0001EB18 4290                       		clr.l	(a0)
0001EB1A 42A8 0004                  		clr.l	4(a0)
0001EB1E                            
0001EB1E                            locret_1B640:
0001EB1E 4E75                       		rts	
0001EB20                            ; ===========================================================================
0001EB20 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EB2A                            
0001EB2A                            ; ---------------------------------------------------------------------------
0001EB2A                            ; Special stage	layout pointers
0001EB2A                            ; ---------------------------------------------------------------------------
0001EB2A                            SS_LayoutIndex:
0001EB2A 0000 0000                  		dc.l SS_1
0001EB2E 0000 0000                  		dc.l SS_2
0001EB32 0000 0000                  		dc.l SS_3
0001EB36 0000 0000                  		dc.l SS_4
0001EB3A 0000 0000                  		dc.l SS_5
0001EB3E 0000 0000                  		dc.l SS_6
0001EB42                            		even
0001EB42                            
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            ; Special stage start locations
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            ; Special stage start locations
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            
0001EB42                            		incbin	"startpos\ss1.bin"
0001EB46                            		incbin	"startpos\ss2.bin"
0001EB4A                            		incbin	"startpos\ss3.bin"
0001EB4E                            		incbin	"startpos\ss4.bin"
0001EB52                            		incbin	"startpos\ss5.bin"
0001EB56                            		incbin	"startpos\ss6.bin"
0001EB5A                            		even
0001EB5A                            		even
0001EB5A                            
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A                            ; Subroutine to	load special stage layout
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A                            
0001EB5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB5A                            
0001EB5A                            
0001EB5A                            SS_Load:
0001EB5A 7000                       		moveq	#0,d0
0001EB5C 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EB60 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EB64 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EB6A 6500                       		blo.s	SS_ChkEmldNum
0001EB6C 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EB72                            
0001EB72                            SS_ChkEmldNum:
0001EB72 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EB78 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EB7A 7200                       		moveq	#0,d1
0001EB7C 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EB80 5301                       		subq.b	#1,d1
0001EB82 6500                       		blo.s	SS_LoadData
0001EB84 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EB88                            
0001EB88                            SS_ChkEmldLoop:	
0001EB88 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EB8C 6600                       		bne.s	SS_ChkEmldRepeat
0001EB8E 60CA                       		bra.s	SS_Load
0001EB90                            ; ===========================================================================
0001EB90                            
0001EB90                            SS_ChkEmldRepeat:
0001EB90 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EB94                            
0001EB94                            SS_LoadData:
0001EB94 E548                       		lsl.w	#2,d0
0001EB96 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EB9A 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EB9E 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EBA2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EBA6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EBAC 303C 0000                  		move.w	#0,d0
0001EBB0 4EB9 0000 188C             		jsr	(EniDec).l
0001EBB6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EBBC 303C 0FFF                  		move.w	#$FFF,d0
0001EBC0                            
0001EBC0                            SS_ClrRAM3:
0001EBC0 4299                       		clr.l	(a1)+
0001EBC2 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EBC6                            
0001EBC6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EBCC 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EBD2 723F                       		moveq	#$3F,d1
0001EBD4                            
0001EBD4                            loc_1B6F6:
0001EBD4 743F                       		moveq	#$3F,d2
0001EBD6                            
0001EBD6                            loc_1B6F8:
0001EBD6 12D8                       		move.b	(a0)+,(a1)+
0001EBD8 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EBDC                            
0001EBDC 43E9 0040                  		lea	$40(a1),a1
0001EBE0 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EBE4                            
0001EBE4 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EBEA 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EBF0 724D                       		moveq	#$4D,d1
0001EBF2                            
0001EBF2                            loc_1B714:
0001EBF2 22D8                       		move.l	(a0)+,(a1)+
0001EBF4 32FC 0000                  		move.w	#0,(a1)+
0001EBF8 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EBFE 32D8                       		move.w	(a0)+,(a1)+
0001EC00 51C9 FFF0                  		dbf	d1,loc_1B714
0001EC04                            
0001EC04 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EC0A 323C 003F                  		move.w	#$3F,d1
0001EC0E                            
0001EC0E                            loc_1B730:
0001EC0E                            
0001EC0E 4299                       		clr.l	(a1)+
0001EC10 51C9 FFFC                  		dbf	d1,loc_1B730
0001EC14                            
0001EC14 4E75                       		rts	
0001EC16                            ; End of function SS_Load
0001EC16                            
0001EC16                            ; ===========================================================================
0001EC16                            
0001EC16                            SS_MapIndex:
0001EC16                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16                            ; Special stage	mappings and VRAM pointers
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EC1A 0142                       	dc.w $142		; VRAM setting
0001EC1C 0000 0000                  	dc.l Map_SSWalls
0001EC20 0142                       	dc.w $142
0001EC22 0000 0000                  	dc.l Map_SSWalls
0001EC26 0142                       	dc.w $142
0001EC28 0000 0000                  	dc.l Map_SSWalls
0001EC2C 0142                       	dc.w $142
0001EC2E 0000 0000                  	dc.l Map_SSWalls
0001EC32 0142                       	dc.w $142
0001EC34 0000 0000                  	dc.l Map_SSWalls
0001EC38 0142                       	dc.w $142
0001EC3A 0000 0000                  	dc.l Map_SSWalls
0001EC3E 0142                       	dc.w $142
0001EC40 0000 0000                  	dc.l Map_SSWalls
0001EC44 0142                       	dc.w $142
0001EC46 0000 0000                  	dc.l Map_SSWalls
0001EC4A 0142                       	dc.w $142
0001EC4C 0000 0000                  	dc.l Map_SSWalls
0001EC50 2142                       	dc.w $2142
0001EC52 0000 0000                  	dc.l Map_SSWalls
0001EC56 2142                       	dc.w $2142
0001EC58 0000 0000                  	dc.l Map_SSWalls
0001EC5C 2142                       	dc.w $2142
0001EC5E 0000 0000                  	dc.l Map_SSWalls
0001EC62 2142                       	dc.w $2142
0001EC64 0000 0000                  	dc.l Map_SSWalls
0001EC68 2142                       	dc.w $2142
0001EC6A 0000 0000                  	dc.l Map_SSWalls
0001EC6E 2142                       	dc.w $2142
0001EC70 0000 0000                  	dc.l Map_SSWalls
0001EC74 2142                       	dc.w $2142
0001EC76 0000 0000                  	dc.l Map_SSWalls
0001EC7A 2142                       	dc.w $2142
0001EC7C 0000 0000                  	dc.l Map_SSWalls
0001EC80 2142                       	dc.w $2142
0001EC82 0000 0000                  	dc.l Map_SSWalls
0001EC86 4142                       	dc.w $4142
0001EC88 0000 0000                  	dc.l Map_SSWalls
0001EC8C 4142                       	dc.w $4142
0001EC8E 0000 0000                  	dc.l Map_SSWalls
0001EC92 4142                       	dc.w $4142
0001EC94 0000 0000                  	dc.l Map_SSWalls
0001EC98 4142                       	dc.w $4142
0001EC9A 0000 0000                  	dc.l Map_SSWalls
0001EC9E 4142                       	dc.w $4142
0001ECA0 0000 0000                  	dc.l Map_SSWalls
0001ECA4 4142                       	dc.w $4142
0001ECA6 0000 0000                  	dc.l Map_SSWalls
0001ECAA 4142                       	dc.w $4142
0001ECAC 0000 0000                  	dc.l Map_SSWalls
0001ECB0 4142                       	dc.w $4142
0001ECB2 0000 0000                  	dc.l Map_SSWalls
0001ECB6 4142                       	dc.w $4142
0001ECB8 0000 0000                  	dc.l Map_SSWalls
0001ECBC 6142                       	dc.w $6142
0001ECBE 0000 0000                  	dc.l Map_SSWalls
0001ECC2 6142                       	dc.w $6142
0001ECC4 0000 0000                  	dc.l Map_SSWalls
0001ECC8 6142                       	dc.w $6142
0001ECCA 0000 0000                  	dc.l Map_SSWalls
0001ECCE 6142                       	dc.w $6142
0001ECD0 0000 0000                  	dc.l Map_SSWalls
0001ECD4 6142                       	dc.w $6142
0001ECD6 0000 0000                  	dc.l Map_SSWalls
0001ECDA 6142                       	dc.w $6142
0001ECDC 0000 0000                  	dc.l Map_SSWalls
0001ECE0 6142                       	dc.w $6142
0001ECE2 0000 0000                  	dc.l Map_SSWalls
0001ECE6 6142                       	dc.w $6142
0001ECE8 0000 0000                  	dc.l Map_SSWalls
0001ECEC 6142                       	dc.w $6142
0001ECEE 0001 0EAA                  	dc.l Map_Bump
0001ECF2 023B                       	dc.w $23B
0001ECF4 0000 0000                  	dc.l Map_SS_R
0001ECF8 0570                       	dc.w $570
0001ECFA 0000 0000                  	dc.l Map_SS_R
0001ECFE 0251                       	dc.w $251
0001ED00 0000 0000                  	dc.l Map_SS_R
0001ED04 0370                       	dc.w $370
0001ED06 0000 0000                  	dc.l Map_SS_Up
0001ED0A 0263                       	dc.w $263
0001ED0C 0000 0000                  	dc.l Map_SS_Down
0001ED10 0263                       	dc.w $263
0001ED12 0000 0000                  	dc.l Map_SS_R
0001ED16 22F0                       	dc.w $22F0
0001ED18 0000 0000                  	dc.l Map_SS_Glass
0001ED1C 0470                       	dc.w $470
0001ED1E 0000 0000                  	dc.l Map_SS_Glass
0001ED22 05F0                       	dc.w $5F0
0001ED24 0000 0000                  	dc.l Map_SS_Glass
0001ED28 65F0                       	dc.w $65F0
0001ED2A 0000 0000                  	dc.l Map_SS_Glass
0001ED2E 25F0                       	dc.w $25F0
0001ED30 0000 0000                  	dc.l Map_SS_Glass
0001ED34 45F0                       	dc.w $45F0
0001ED36 0000 0000                  	dc.l Map_SS_R
0001ED3A 02F0                       	dc.w $2F0
0001ED3C 0101 0EAA                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001ED40 023B                       	dc.w $23B
0001ED42 0201 0EAA                  	dc.l Map_Bump+$2000000
0001ED46 023B                       	dc.w $23B
0001ED48 0000 0000                  	dc.l Map_SS_R
0001ED4C 0797                       	dc.w $797
0001ED4E 0000 0000                  	dc.l Map_SS_R
0001ED52 07A0                       	dc.w $7A0
0001ED54 0000 0000                  	dc.l Map_SS_R
0001ED58 07A9                       	dc.w $7A9
0001ED5A 0000 0000                  	dc.l Map_SS_R
0001ED5E 0797                       	dc.w $797
0001ED60 0000 0000                  	dc.l Map_SS_R
0001ED64 07A0                       	dc.w $7A0
0001ED66 0000 0000                  	dc.l Map_SS_R
0001ED6A 07A9                       	dc.w $7A9
0001ED6C 0000 BFE2                  	dc.l Map_Ring
0001ED70 2798                       	dc.w $2798
0001ED72 0000 0000                  	dc.l Map_SS_Chaos3
0001ED76 0770                       	dc.w $770
0001ED78 0000 0000                  	dc.l Map_SS_Chaos3
0001ED7C 2770                       	dc.w $2770
0001ED7E 0000 0000                  	dc.l Map_SS_Chaos3
0001ED82 4770                       	dc.w $4770
0001ED84 0000 0000                  	dc.l Map_SS_Chaos3
0001ED88 6770                       	dc.w $6770
0001ED8A 0000 0000                  	dc.l Map_SS_Chaos1
0001ED8E 0770                       	dc.w $770
0001ED90 0000 0000                  	dc.l Map_SS_Chaos2
0001ED94 0770                       	dc.w $770
0001ED96 0000 0000                  	dc.l Map_SS_R
0001ED9A 04F0                       	dc.w $4F0
0001ED9C 0400 BFE2                  	dc.l Map_Ring+$4000000
0001EDA0 2798                       	dc.w $2798
0001EDA2 0500 BFE2                  	dc.l Map_Ring+$5000000
0001EDA6 2798                       	dc.w $2798
0001EDA8 0600 BFE2                  	dc.l Map_Ring+$6000000
0001EDAC 2798                       	dc.w $2798
0001EDAE 0700 BFE2                  	dc.l Map_Ring+$7000000
0001EDB2 2798                       	dc.w $2798
0001EDB4 0000 0000                  	dc.l Map_SS_Glass
0001EDB8 23F0                       	dc.w $23F0
0001EDBA 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EDBE 23F0                       	dc.w $23F0
0001EDC0 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EDC4 23F0                       	dc.w $23F0
0001EDC6 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EDCA 23F0                       	dc.w $23F0
0001EDCC 0000 0000                  	dc.l Map_SS_R+$2000000
0001EDD0 04F0                       	dc.w $4F0
0001EDD2 0000 0000                  	dc.l Map_SS_Glass
0001EDD6 05F0                       	dc.w $5F0
0001EDD8 0000 0000                  	dc.l Map_SS_Glass
0001EDDC 65F0                       	dc.w $65F0
0001EDDE 0000 0000                  	dc.l Map_SS_Glass
0001EDE2 25F0                       	dc.w $25F0
0001EDE4 0000 0000                  	dc.l Map_SS_Glass
0001EDE8 45F0                       	dc.w $45F0
0001EDE8 45F0                       	dc.w $45F0
0001EDEA                            
0001EDEA                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EDEA                            ; ---------------------------------------------------------------------------
0001EDEA                            ; Sprite mappings - special stage "R" block
0001EDEA                            ; ---------------------------------------------------------------------------
0001EDEA                            Map_SS_R_internal:
0001EDEA 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EDEC 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EDEE 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EDF0 01                         byte_1B912:	dc.b 1
0001EDF1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EDF6 01                         byte_1B918:	dc.b 1
0001EDF7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EDFC 00                         byte_1B91E:	dc.b 0
0001EDFE 00                         		even
0001EDFE 00                         		even
0001EDFE                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EDFE                            ; ---------------------------------------------------------------------------
0001EDFE                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EDFE                            ; ---------------------------------------------------------------------------
0001EDFE                            Map_SS_Glass_internal:
0001EDFE 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EE00 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EE02 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EE04 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EE06 01                         byte_1B928:	dc.b 1
0001EE07 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE0C 01                         byte_1B92E:	dc.b 1
0001EE0D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EE12 01                         byte_1B934:	dc.b 1
0001EE13 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EE18 01                         byte_1B93A:	dc.b 1
0001EE19 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EE1E                            		even
0001EE1E                            		even
0001EE1E                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EE1E                            ; ---------------------------------------------------------------------------
0001EE1E                            ; Sprite mappings - special stage "UP" block
0001EE1E                            ; ---------------------------------------------------------------------------
0001EE1E                            Map_SS_Up_internal:
0001EE1E 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EE20 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EE22 01                         byte_1B944:	dc.b 1
0001EE23 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE28 01                         byte_1B94A:	dc.b 1
0001EE29 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE2E                            		even
0001EE2E                            		even
0001EE2E                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EE2E                            ; ---------------------------------------------------------------------------
0001EE2E                            ; Sprite mappings - special stage "DOWN" block
0001EE2E                            ; ---------------------------------------------------------------------------
0001EE2E                            Map_SS_Down_internal:
0001EE2E 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EE30 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EE32 01                         byte_1B954:	dc.b 1
0001EE33 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE38 01                         byte_1B95A:	dc.b 1
0001EE39 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE3E                            		even
0001EE3E                            		even
0001EE3E                            		include	"_maps\SS Chaos Emeralds.asm"
0001EE3E                            ; ---------------------------------------------------------------------------
0001EE3E                            ; Sprite mappings - special stage chaos	emeralds
0001EE3E                            ; ---------------------------------------------------------------------------
0001EE3E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EE40 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EE42 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EE44 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EE46 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EE48 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EE4A 01                         byte_1B96C:	dc.b 1
0001EE4B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EE50 01                         byte_1B972:	dc.b 1
0001EE51 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EE56 01                         byte_1B978:	dc.b 1
0001EE57 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EE5C 01                         byte_1B97E:	dc.b 1
0001EE5D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EE62                            		even
0001EE62                            		even
0001EE62                            
0001EE62                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EE62                            ; ---------------------------------------------------------------------------
0001EE62                            ; Object 09 - Sonic (special stage)
0001EE62                            ; ---------------------------------------------------------------------------
0001EE62                            
0001EE62                            SonicSpecial:
0001EE62 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EE66 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EE68 6100 0000                  		bsr.w	SS_FixCamera
0001EE6C 6000 0000                  		bra.w	DebugMode
0001EE70                            ; ===========================================================================
0001EE70                            
0001EE70                            Obj09_Normal:
0001EE70 7000                       		moveq	#0,d0
0001EE72 1028 0024                  		move.b	obRoutine(a0),d0
0001EE76 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EE7A 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EE7E                            ; ===========================================================================
0001EE7E 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EE80 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EE82 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EE84 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EE86                            ; ===========================================================================
0001EE86                            
0001EE86                            Obj09_Main:	; Routine 0
0001EE86 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE8A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EE90 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EE96 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EE9E 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EEA4 117C 0004 0001             		move.b	#4,obRender(a0)
0001EEAA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EEB0 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EEB6 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EEBC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EEC2                            
0001EEC2                            Obj09_ChkDebug:	; Routine 2
0001EEC2 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EEC6 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EEC8 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EECE 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EED0 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EED6                            
0001EED6                            Obj09_NoDebug:
0001EED6 117C 0000 0030             		move.b	#0,$30(a0)
0001EEDC 7000                       		moveq	#0,d0
0001EEDE 1028 0022                  		move.b	obStatus(a0),d0
0001EEE2 0240 0002                  		andi.w	#2,d0
0001EEE6 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EEEA 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EEEE 4EB9 0001 6984             		jsr	(Sonic_LoadGfx).l
0001EEF4 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001EEFA                            ; ===========================================================================
0001EEFA 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EEFC 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EEFE                            ; ===========================================================================
0001EEFE                            
0001EEFE                            Obj09_OnWall:
0001EEFE 6100 0000                  		bsr.w	Obj09_Jump
0001EF02 6100 0000                  		bsr.w	Obj09_Move
0001EF06 6100 0000                  		bsr.w	Obj09_Fall
0001EF0A 6000                       		bra.s	Obj09_Display
0001EF0C                            ; ===========================================================================
0001EF0C                            
0001EF0C                            Obj09_InAir:
0001EF0C 6100 0000                  		bsr.w	nullsub_2
0001EF10 6100 0000                  		bsr.w	Obj09_Move
0001EF14 6100 0000                  		bsr.w	Obj09_Fall
0001EF18                            
0001EF18                            Obj09_Display:
0001EF18 6100 0000                  		bsr.w	Obj09_ChkItems
0001EF1C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EF20 4EB9 0000 F972             		jsr	(SpeedToPos).l
0001EF26 6100 0000                  		bsr.w	SS_FixCamera
0001EF2A 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF2E D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF32 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF36 4EB9 0001 65EC             		jsr	(Sonic_Animate).l
0001EF3C 4E75                       		rts	
0001EF3E                            
0001EF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF3E                            
0001EF3E                            
0001EF3E                            Obj09_Move:
0001EF3E 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EF44 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EF46 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EF4A                            
0001EF4A                            Obj09_ChkRight:
0001EF4A 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EF50 6700                       		beq.s	loc_1BA78	; if not, branch
0001EF52 6100 0000                  		bsr.w	Obj09_MoveRight
0001EF56                            
0001EF56                            loc_1BA78:
0001EF56 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF5A 0200 000C                  		andi.b	#btnL+btnR,d0
0001EF5E 6600                       		bne.s	loc_1BAA8
0001EF60 3028 0020                  		move.w	obInertia(a0),d0
0001EF64 6700                       		beq.s	loc_1BAA8
0001EF66 6B00                       		bmi.s	loc_1BA9A
0001EF68 0440 000C                  		subi.w	#$C,d0
0001EF6C 6400                       		bcc.s	loc_1BA94
0001EF6E 303C 0000                  		move.w	#0,d0
0001EF72                            
0001EF72                            loc_1BA94:
0001EF72 3140 0020                  		move.w	d0,obInertia(a0)
0001EF76 6000                       		bra.s	loc_1BAA8
0001EF78                            ; ===========================================================================
0001EF78                            
0001EF78                            loc_1BA9A:
0001EF78 0640 000C                  		addi.w	#$C,d0
0001EF7C 6400                       		bcc.s	loc_1BAA4
0001EF7E 303C 0000                  		move.w	#0,d0
0001EF82                            
0001EF82                            loc_1BAA4:
0001EF82 3140 0020                  		move.w	d0,obInertia(a0)
0001EF86                            
0001EF86                            loc_1BAA8:
0001EF86 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF8A 0600 0020                  		addi.b	#$20,d0
0001EF8E 0200 00C0                  		andi.b	#$C0,d0
0001EF92 4400                       		neg.b	d0
0001EF94 4EB9 0000 3A36             		jsr	(CalcSine).l
0001EF9A C3E8 0020                  		muls.w	obInertia(a0),d1
0001EF9E D3A8 0008                  		add.l	d1,obX(a0)
0001EFA2 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EFA6 D1A8 000C                  		add.l	d0,obY(a0)
0001EFAA 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EFAE 2428 000C                  		move.l	obY(a0),d2
0001EFB2 2628 0008                  		move.l	obX(a0),d3
0001EFB6 6100 0000                  		bsr.w	sub_1BCE8
0001EFBA 6700                       		beq.s	loc_1BAF2
0001EFBC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFC0 93A8 0008                  		sub.l	d1,obX(a0)
0001EFC4 91A8 000C                  		sub.l	d0,obY(a0)
0001EFC8 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EFCE 4E75                       		rts	
0001EFD0                            ; ===========================================================================
0001EFD0                            
0001EFD0                            loc_1BAF2:
0001EFD0 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFD4 4E75                       		rts	
0001EFD6                            ; End of function Obj09_Move
0001EFD6                            
0001EFD6                            
0001EFD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFD6                            
0001EFD6                            
0001EFD6                            Obj09_MoveLeft:
0001EFD6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EFDC 3028 0020                  		move.w	obInertia(a0),d0
0001EFE0 6700                       		beq.s	loc_1BB06
0001EFE2 6A00                       		bpl.s	loc_1BB1A
0001EFE4                            
0001EFE4                            loc_1BB06:
0001EFE4 0440 000C                  		subi.w	#$C,d0
0001EFE8 0C40 F800                  		cmpi.w	#-$800,d0
0001EFEC 6E00                       		bgt.s	loc_1BB14
0001EFEE 303C F800                  		move.w	#-$800,d0
0001EFF2                            
0001EFF2                            loc_1BB14:
0001EFF2 3140 0020                  		move.w	d0,obInertia(a0)
0001EFF6 4E75                       		rts	
0001EFF8                            ; ===========================================================================
0001EFF8                            
0001EFF8                            loc_1BB1A:
0001EFF8 0440 0040                  		subi.w	#$40,d0
0001EFFC 6400                       		bcc.s	loc_1BB22
0001EFFE 4E71                       		nop	
0001F000                            
0001F000                            loc_1BB22:
0001F000 3140 0020                  		move.w	d0,obInertia(a0)
0001F004 4E75                       		rts	
0001F006                            ; End of function Obj09_MoveLeft
0001F006                            
0001F006                            
0001F006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F006                            
0001F006                            
0001F006                            Obj09_MoveRight:
0001F006 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F00C 3028 0020                  		move.w	obInertia(a0),d0
0001F010 6B00                       		bmi.s	loc_1BB48
0001F012 0640 000C                  		addi.w	#$C,d0
0001F016 0C40 0800                  		cmpi.w	#$800,d0
0001F01A 6D00                       		blt.s	loc_1BB42
0001F01C 303C 0800                  		move.w	#$800,d0
0001F020                            
0001F020                            loc_1BB42:
0001F020 3140 0020                  		move.w	d0,obInertia(a0)
0001F024 6000                       		bra.s	locret_1BB54
0001F026                            ; ===========================================================================
0001F026                            
0001F026                            loc_1BB48:
0001F026 0640 0040                  		addi.w	#$40,d0
0001F02A 6400                       		bcc.s	loc_1BB50
0001F02C 4E71                       		nop	
0001F02E                            
0001F02E                            loc_1BB50:
0001F02E 3140 0020                  		move.w	d0,obInertia(a0)
0001F032                            
0001F032                            locret_1BB54:
0001F032 4E75                       		rts	
0001F034                            ; End of function Obj09_MoveRight
0001F034                            
0001F034                            
0001F034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F034                            
0001F034                            
0001F034                            Obj09_Jump:
0001F034 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F038 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F03C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F03E 1038 F780                  		move.b	(v_ssangle).w,d0
0001F042 0200 00FC                  		andi.b	#$FC,d0
0001F046 4400                       		neg.b	d0
0001F048 0400 0040                  		subi.b	#$40,d0
0001F04C 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F052 C3FC 0680                  		muls.w	#$680,d1
0001F056 E081                       		asr.l	#8,d1
0001F058 3141 0010                  		move.w	d1,obVelX(a0)
0001F05C C1FC 0680                  		muls.w	#$680,d0
0001F060 E080                       		asr.l	#8,d0
0001F062 3140 0012                  		move.w	d0,obVelY(a0)
0001F066 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F076                            
0001F076                            Obj09_NoJump:
0001F076 4E75                       		rts	
0001F078                            ; End of function Obj09_Jump
0001F078                            
0001F078                            
0001F078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F078                            
0001F078                            
0001F078                            nullsub_2:
0001F078 4E75                       		rts	
0001F07A                            ; End of function nullsub_2
0001F07A                            
0001F07A                            ; ===========================================================================
0001F07A                            ; ---------------------------------------------------------------------------
0001F07A                            ; unused subroutine to limit Sonic's upward vertical speed
0001F07A                            ; ---------------------------------------------------------------------------
0001F07A 323C FC00                  		move.w	#-$400,d1
0001F07E B268 0012                  		cmp.w	obVelY(a0),d1
0001F082 6F00                       		ble.s	locret_1BBB4
0001F084 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F088 0200 0070                  		andi.b	#btnABC,d0
0001F08C 6600                       		bne.s	locret_1BBB4
0001F08E 3141 0012                  		move.w	d1,obVelY(a0)
0001F092                            
0001F092                            locret_1BBB4:
0001F092 4E75                       		rts	
0001F094                            ; ---------------------------------------------------------------------------
0001F094                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F094                            ; ---------------------------------------------------------------------------
0001F094                            
0001F094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F094                            
0001F094                            
0001F094                            SS_FixCamera:
0001F094 3428 000C                  		move.w	obY(a0),d2
0001F098 3628 0008                  		move.w	obX(a0),d3
0001F09C 3038 F700                  		move.w	(v_screenposx).w,d0
0001F0A0 0443 00A0                  		subi.w	#$A0,d3
0001F0A4 6500                       		bcs.s	loc_1BBCE
0001F0A6 9043                       		sub.w	d3,d0
0001F0A8 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F0AC                            
0001F0AC                            loc_1BBCE:
0001F0AC 3038 F704                  		move.w	(v_screenposy).w,d0
0001F0B0 0442 0070                  		subi.w	#$70,d2
0001F0B4 6500                       		bcs.s	locret_1BBDE
0001F0B6 9042                       		sub.w	d2,d0
0001F0B8 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F0BC                            
0001F0BC                            locret_1BBDE:
0001F0BC 4E75                       		rts	
0001F0BE                            ; End of function SS_FixCamera
0001F0BE                            
0001F0BE                            ; ===========================================================================
0001F0BE                            
0001F0BE                            Obj09_ExitStage:
0001F0BE 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F0C4 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F0CA 6600                       		bne.s	loc_1BBF4
0001F0CC 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F0D2                            
0001F0D2                            loc_1BBF4:
0001F0D2 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F0D8 6D00                       		blt.s	loc_1BC12
0001F0DA 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F0E0 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F0E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F0EA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F0F0                            
0001F0F0                            loc_1BC12:
0001F0F0 3038 F780                  		move.w	(v_ssangle).w,d0
0001F0F4 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F0F8 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F0FC 4EB9 0001 65EC             		jsr	(Sonic_Animate).l
0001F102 4EB9 0001 6984             		jsr	(Sonic_LoadGfx).l
0001F108 6100 FF8A                  		bsr.w	SS_FixCamera
0001F10C 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001F112                            ; ===========================================================================
0001F112                            
0001F112                            Obj09_Exit2:
0001F112 5368 0038                  		subq.w	#1,$38(a0)
0001F116 6600                       		bne.s	loc_1BC40
0001F118 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F11E                            
0001F11E                            loc_1BC40:
0001F11E 4EB9 0001 65EC             		jsr	(Sonic_Animate).l
0001F124 4EB9 0001 6984             		jsr	(Sonic_LoadGfx).l
0001F12A 6100 FF68                  		bsr.w	SS_FixCamera
0001F12E 4EF9 0000 F986             		jmp	(DisplaySprite).l
0001F134                            
0001F134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F134                            
0001F134                            
0001F134                            Obj09_Fall:
0001F134 2428 000C                  		move.l	obY(a0),d2
0001F138 2628 0008                  		move.l	obX(a0),d3
0001F13C 1038 F780                  		move.b	(v_ssangle).w,d0
0001F140 0200 00FC                  		andi.b	#$FC,d0
0001F144 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F14A 3828 0010                  		move.w	obVelX(a0),d4
0001F14E 48C4                       		ext.l	d4
0001F150 E184                       		asl.l	#8,d4
0001F152 C1FC 002A                  		muls.w	#$2A,d0
0001F156 D084                       		add.l	d4,d0
0001F158 3828 0012                  		move.w	obVelY(a0),d4
0001F15C 48C4                       		ext.l	d4
0001F15E E184                       		asl.l	#8,d4
0001F160 C3FC 002A                  		muls.w	#$2A,d1
0001F164 D284                       		add.l	d4,d1
0001F166 D680                       		add.l	d0,d3
0001F168 6100 0000                  		bsr.w	sub_1BCE8
0001F16C 6700                       		beq.s	loc_1BCB0
0001F16E 9680                       		sub.l	d0,d3
0001F170 7000                       		moveq	#0,d0
0001F172 3140 0010                  		move.w	d0,obVelX(a0)
0001F176 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F17C D481                       		add.l	d1,d2
0001F17E 6100 0000                  		bsr.w	sub_1BCE8
0001F182 6700                       		beq.s	loc_1BCC6
0001F184 9481                       		sub.l	d1,d2
0001F186 7200                       		moveq	#0,d1
0001F188 3141 0012                  		move.w	d1,obVelY(a0)
0001F18C 4E75                       		rts	
0001F18E                            ; ===========================================================================
0001F18E                            
0001F18E                            loc_1BCB0:
0001F18E D481                       		add.l	d1,d2
0001F190 6100 0000                  		bsr.w	sub_1BCE8
0001F194 6700                       		beq.s	loc_1BCD4
0001F196 9481                       		sub.l	d1,d2
0001F198 7200                       		moveq	#0,d1
0001F19A 3141 0012                  		move.w	d1,obVelY(a0)
0001F19E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F1A4                            
0001F1A4                            loc_1BCC6:
0001F1A4 E080                       		asr.l	#8,d0
0001F1A6 E081                       		asr.l	#8,d1
0001F1A8 3140 0010                  		move.w	d0,obVelX(a0)
0001F1AC 3141 0012                  		move.w	d1,obVelY(a0)
0001F1B0 4E75                       		rts	
0001F1B2                            ; ===========================================================================
0001F1B2                            
0001F1B2                            loc_1BCD4:
0001F1B2 E080                       		asr.l	#8,d0
0001F1B4 E081                       		asr.l	#8,d1
0001F1B6 3140 0010                  		move.w	d0,obVelX(a0)
0001F1BA 3141 0012                  		move.w	d1,obVelY(a0)
0001F1BE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1C4 4E75                       		rts	
0001F1C6                            ; End of function Obj09_Fall
0001F1C6                            
0001F1C6                            
0001F1C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1C6                            
0001F1C6                            
0001F1C6                            sub_1BCE8:
0001F1C6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F1CC 7800                       		moveq	#0,d4
0001F1CE 4842                       		swap	d2
0001F1D0 3802                       		move.w	d2,d4
0001F1D2 4842                       		swap	d2
0001F1D4 0644 0044                  		addi.w	#$44,d4
0001F1D8 88FC 0018                  		divu.w	#$18,d4
0001F1DC C8FC 0080                  		mulu.w	#$80,d4
0001F1E0 D3C4                       		adda.l	d4,a1
0001F1E2 7800                       		moveq	#0,d4
0001F1E4 4843                       		swap	d3
0001F1E6 3803                       		move.w	d3,d4
0001F1E8 4843                       		swap	d3
0001F1EA 0644 0014                  		addi.w	#$14,d4
0001F1EE 88FC 0018                  		divu.w	#$18,d4
0001F1F2 D2C4                       		adda.w	d4,a1
0001F1F4 7A00                       		moveq	#0,d5
0001F1F6 1819                       		move.b	(a1)+,d4
0001F1F8 6100                       		bsr.s	sub_1BD30
0001F1FA 1819                       		move.b	(a1)+,d4
0001F1FC 6100                       		bsr.s	sub_1BD30
0001F1FE D2FC 007E                  		adda.w	#$7E,a1
0001F202 1819                       		move.b	(a1)+,d4
0001F204 6100                       		bsr.s	sub_1BD30
0001F206 1819                       		move.b	(a1)+,d4
0001F208 6100                       		bsr.s	sub_1BD30
0001F20A 4A05                       		tst.b	d5
0001F20C 4E75                       		rts	
0001F20E                            ; End of function sub_1BCE8
0001F20E                            
0001F20E                            
0001F20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F20E                            
0001F20E                            
0001F20E                            sub_1BD30:
0001F20E 6700                       		beq.s	locret_1BD44
0001F210 0C04 0028                  		cmpi.b	#$28,d4
0001F214 6700                       		beq.s	locret_1BD44
0001F216 0C04 003A                  		cmpi.b	#$3A,d4
0001F21A 6500                       		bcs.s	loc_1BD46
0001F21C 0C04 004B                  		cmpi.b	#$4B,d4
0001F220 6400                       		bcc.s	loc_1BD46
0001F222                            
0001F222                            locret_1BD44:
0001F222 4E75                       		rts	
0001F224                            ; ===========================================================================
0001F224                            
0001F224                            loc_1BD46:
0001F224 1144 0030                  		move.b	d4,$30(a0)
0001F228 2149 0032                  		move.l	a1,$32(a0)
0001F22C 7AFF                       		moveq	#-1,d5
0001F22E 4E75                       		rts	
0001F230                            ; End of function sub_1BD30
0001F230                            
0001F230                            
0001F230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F230                            
0001F230                            
0001F230                            Obj09_ChkItems:
0001F230 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F236 7800                       		moveq	#0,d4
0001F238 3828 000C                  		move.w	obY(a0),d4
0001F23C 0644 0050                  		addi.w	#$50,d4
0001F240 88FC 0018                  		divu.w	#$18,d4
0001F244 C8FC 0080                  		mulu.w	#$80,d4
0001F248 D3C4                       		adda.l	d4,a1
0001F24A 7800                       		moveq	#0,d4
0001F24C 3828 0008                  		move.w	obX(a0),d4
0001F250 0644 0020                  		addi.w	#$20,d4
0001F254 88FC 0018                  		divu.w	#$18,d4
0001F258 D2C4                       		adda.w	d4,a1
0001F25A 1811                       		move.b	(a1),d4
0001F25C 6600                       		bne.s	Obj09_ChkCont
0001F25E 4A28 003A                  		tst.b	$3A(a0)
0001F262 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F266 7800                       		moveq	#0,d4
0001F268 4E75                       		rts	
0001F26A                            ; ===========================================================================
0001F26A                            
0001F26A                            Obj09_ChkCont:
0001F26A 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F26E 6600                       		bne.s	Obj09_Chk1Up
0001F270 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F274 6600                       		bne.s	Obj09_GetCont
0001F276 14BC 0001                  		move.b	#1,(a2)
0001F27A 2549 0004                  		move.l	a1,4(a2)
0001F27E                            
0001F27E                            Obj09_GetCont:
0001F27E 4EB9 0000 BB4A             		jsr	(CollectRing).l
0001F284 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F28A 6500                       		bcs.s	Obj09_NoCont
0001F28C 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F292 6600                       		bne.s	Obj09_NoCont
0001F294 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F2A2                            
0001F2A2                            Obj09_NoCont:
0001F2A2 7800                       		moveq	#0,d4
0001F2A4 4E75                       		rts	
0001F2A6                            ; ===========================================================================
0001F2A6                            
0001F2A6                            Obj09_Chk1Up:
0001F2A6 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F2AA 6600                       		bne.s	Obj09_ChkEmer
0001F2AC 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F2B0 6600                       		bne.s	Obj09_Get1Up
0001F2B2 14BC 0003                  		move.b	#3,(a2)
0001F2B6 2549 0004                  		move.l	a1,4(a2)
0001F2BA                            
0001F2BA                            Obj09_Get1Up:
0001F2BA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F2BE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F2CC 7800                       		moveq	#0,d4
0001F2CE 4E75                       		rts	
0001F2D0                            ; ===========================================================================
0001F2D0                            
0001F2D0                            Obj09_ChkEmer:
0001F2D0 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F2D4 6500                       		bcs.s	Obj09_ChkGhost
0001F2D6 0C04 0040                  		cmpi.b	#$40,d4
0001F2DA 6200                       		bhi.s	Obj09_ChkGhost
0001F2DC 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F2E0 6600                       		bne.s	Obj09_GetEmer
0001F2E2 14BC 0005                  		move.b	#5,(a2)
0001F2E6 2549 0004                  		move.l	a1,4(a2)
0001F2EA                            
0001F2EA                            Obj09_GetEmer:
0001F2EA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F2F0 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F2F2 0404 003B                  		subi.b	#$3B,d4
0001F2F6 7000                       		moveq	#0,d0
0001F2F8 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F2FC 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F300 1584 0000                  		move.b	d4,(a2,d0.w)
0001F304 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F308                            
0001F308                            Obj09_NoEmer:
0001F312 7800                       		moveq	#0,d4
0001F314 4E75                       		rts	
0001F316                            ; ===========================================================================
0001F316                            
0001F316                            Obj09_ChkGhost:
0001F316 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F31A 6600                       		bne.s	Obj09_ChkGhostTag
0001F31C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F322                            
0001F322                            Obj09_ChkGhostTag:
0001F322 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F326 6600                       		bne.s	Obj09_NoGhost
0001F328 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F32E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F330 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F336                            
0001F336                            Obj09_NoGhost:
0001F336 78FF                       		moveq	#-1,d4
0001F338 4E75                       		rts	
0001F33A                            ; ===========================================================================
0001F33A                            
0001F33A                            Obj09_MakeGhostSolid:
0001F33A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F340 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F342 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F348 723F                       		moveq	#$3F,d1
0001F34A                            
0001F34A                            Obj09_GhostLoop2:
0001F34A 743F                       		moveq	#$3F,d2
0001F34C                            
0001F34C                            Obj09_GhostLoop:
0001F34C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F350 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F352 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F356                            
0001F356                            Obj09_NoReplace:
0001F356 5249                       		addq.w	#1,a1
0001F358 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F35C 43E9 0040                  		lea	$40(a1),a1
0001F360 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F364                            
0001F364                            Obj09_GhostNotSolid:
0001F364 4228 003A                  		clr.b	$3A(a0)
0001F368 7800                       		moveq	#0,d4
0001F36A 4E75                       		rts	
0001F36C                            ; End of function Obj09_ChkItems
0001F36C                            
0001F36C                            
0001F36C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F36C                            
0001F36C                            
0001F36C                            Obj09_ChkItems2:
0001F36C 1028 0030                  		move.b	$30(a0),d0
0001F370 6600                       		bne.s	Obj09_ChkBumper
0001F372 5328 0036                  		subq.b	#1,$36(a0)
0001F376 6A00                       		bpl.s	loc_1BEA0
0001F378 117C 0000 0036             		move.b	#0,$36(a0)
0001F37E                            
0001F37E                            loc_1BEA0:
0001F37E 5328 0037                  		subq.b	#1,$37(a0)
0001F382 6A00                       		bpl.s	locret_1BEAC
0001F384 117C 0000 0037             		move.b	#0,$37(a0)
0001F38A                            
0001F38A                            locret_1BEAC:
0001F38A 4E75                       		rts	
0001F38C                            ; ===========================================================================
0001F38C                            
0001F38C                            Obj09_ChkBumper:
0001F38C 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F390 6600                       		bne.s	Obj09_GOAL
0001F392 2228 0032                  		move.l	$32(a0),d1
0001F396 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F39C 3401                       		move.w	d1,d2
0001F39E 0241 007F                  		andi.w	#$7F,d1
0001F3A2 C2FC 0018                  		mulu.w	#$18,d1
0001F3A6 0441 0014                  		subi.w	#$14,d1
0001F3AA EE4A                       		lsr.w	#7,d2
0001F3AC 0242 007F                  		andi.w	#$7F,d2
0001F3B0 C4FC 0018                  		mulu.w	#$18,d2
0001F3B4 0442 0044                  		subi.w	#$44,d2
0001F3B8 9268 0008                  		sub.w	obX(a0),d1
0001F3BC 9468 000C                  		sub.w	obY(a0),d2
0001F3C0 4EB9 0000 3CC8             		jsr	(CalcAngle).l
0001F3C6 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F3CC C3FC F900                  		muls.w	#-$700,d1
0001F3D0 E081                       		asr.l	#8,d1
0001F3D2 3141 0010                  		move.w	d1,obVelX(a0)
0001F3D6 C1FC F900                  		muls.w	#-$700,d0
0001F3DA E080                       		asr.l	#8,d0
0001F3DC 3140 0012                  		move.w	d0,obVelY(a0)
0001F3E0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F3E6 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F3EA 6600                       		bne.s	Obj09_BumpSnd
0001F3EC 14BC 0002                  		move.b	#2,(a2)
0001F3F0 2028 0032                  		move.l	$32(a0),d0
0001F3F4 5380                       		subq.l	#1,d0
0001F3F6 2540 0004                  		move.l	d0,4(a2)
0001F3FA                            
0001F3FA                            Obj09_BumpSnd:
0001F404                            ; ===========================================================================
0001F404                            
0001F404                            Obj09_GOAL:
0001F404 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F408 6600                       		bne.s	Obj09_UPblock
0001F40A 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F418 4E75                       		rts	
0001F41A                            ; ===========================================================================
0001F41A                            
0001F41A                            Obj09_UPblock:
0001F41A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F41E 6600                       		bne.s	Obj09_DOWNblock
0001F420 4A28 0036                  		tst.b	$36(a0)
0001F424 6600 0000                  		bne.w	Obj09_NoGlass
0001F428 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F42E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F434 6700                       		beq.s	Obj09_UPsnd
0001F436 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F43A 2268 0032                  		movea.l	$32(a0),a1
0001F43E 5389                       		subq.l	#1,a1
0001F440 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F444                            
0001F444                            Obj09_UPsnd:
0001F44E                            ; ===========================================================================
0001F44E                            
0001F44E                            Obj09_DOWNblock:
0001F44E 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F452 6600                       		bne.s	Obj09_Rblock
0001F454 4A28 0036                  		tst.b	$36(a0)
0001F458 6600 0000                  		bne.w	Obj09_NoGlass
0001F45C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F462 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F468 6600                       		bne.s	Obj09_DOWNsnd
0001F46A E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F46E 2268 0032                  		movea.l	$32(a0),a1
0001F472 5389                       		subq.l	#1,a1
0001F474 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F478                            
0001F478                            Obj09_DOWNsnd:
0001F482                            ; ===========================================================================
0001F482                            
0001F482                            Obj09_Rblock:
0001F482 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F486 6600                       		bne.s	Obj09_ChkGlass
0001F488 4A28 0037                  		tst.b	$37(a0)
0001F48C 6600 0000                  		bne.w	Obj09_NoGlass
0001F490 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F496 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F49A 6600                       		bne.s	Obj09_RevStage
0001F49C 14BC 0004                  		move.b	#4,(a2)
0001F4A0 2028 0032                  		move.l	$32(a0),d0
0001F4A4 5380                       		subq.l	#1,d0
0001F4A6 2540 0004                  		move.l	d0,4(a2)
0001F4AA                            
0001F4AA                            Obj09_RevStage:
0001F4AA 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F4B8                            ; ===========================================================================
0001F4B8                            
0001F4B8                            Obj09_ChkGlass:
0001F4B8 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F4BC 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F4BE 0C00 002E                  		cmpi.b	#$2E,d0
0001F4C2 6700                       		beq.s	Obj09_Glass
0001F4C4 0C00 002F                  		cmpi.b	#$2F,d0
0001F4C8 6700                       		beq.s	Obj09_Glass
0001F4CA 0C00 0030                  		cmpi.b	#$30,d0
0001F4CE 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F4D0                            
0001F4D0                            Obj09_Glass:
0001F4D0 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F4D4 6600                       		bne.s	Obj09_GlassSnd
0001F4D6 14BC 0006                  		move.b	#6,(a2)
0001F4DA 2268 0032                  		movea.l	$32(a0),a1
0001F4DE 5389                       		subq.l	#1,a1
0001F4E0 2549 0004                  		move.l	a1,4(a2)
0001F4E4 1011                       		move.b	(a1),d0
0001F4E6 5200                       		addq.b	#1,d0		; change glass type when touched
0001F4E8 0C00 0030                  		cmpi.b	#$30,d0
0001F4EC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F4EE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F4F0                            
0001F4F0                            Obj09_GlassUpdate:
0001F4F0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F4F4                            
0001F4F4                            Obj09_GlassSnd:
0001F4FE                            ; ===========================================================================
0001F4FE                            
0001F4FE                            Obj09_NoGlass:
0001F4FE 4E75                       		rts	
0001F500                            ; End of function Obj09_ChkItems2
0001F500                            ; End of function Obj09_ChkItems2
0001F500                            
0001F500                            		include	"_incObj\10.asm"
0001F500                            ; ---------------------------------------------------------------------------
0001F500                            ; Object 10 - After-Image
0001F500                            ; ---------------------------------------------------------------------------
0001F500                            
0001F500                            Obj10:
0001F500 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F506 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F50A                            
0001F50A 7000                             moveq   #0,d0
0001F50C 1028 0024                        move.b   obRoutine(a0),d0
0001F510 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F514 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F518                            
0001F518                            ; ===========================================================================
0001F518                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F518                            ; ===========================================================================
0001F518                            Afterimage_Index:
0001F518 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F51E 0000                             dc.w AfterimageStart-Afterimage_Index
0001F520 0000                             dc.w NoAfterImage-Afterimage_Index
0001F522 0000                             dc.w NoAfterImage-Afterimage_Index
0001F524 0000                             dc.w NoAfterImage-Afterimage_Index
0001F526 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F528 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F52A                            ; ===========================================================================
0001F52A                            NoAfterImage:
0001F52A 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F52E 4E75                             rts
0001F530                            ; ===========================================================================
0001F530                            AfterimageStart:
0001F530 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F536 6000                             bra.s   Afterimage_Show
0001F538                            ; ===========================================================================
0001F538                            AfterimageLPrio:
0001F538 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F53C                            ; ===========================================================================
0001F53C                            Afterimage_Show:
0001F53C 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F540 4EB9 0000 3A10                   jsr   (RandomNumber).l         ; get a random number
0001F546 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F54A 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F54C 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F54E                            
0001F54E                            AfterimageException:
0001F54E 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F554 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F55A 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F560 4EF9 0000 F986                   jmp   DisplaySprite
0001F566                            ; ===========================================================================
0001F566                            AfterimageEnd:
0001F566 4EF9 0000 F9C6                   jmp   DeleteObject
0001F566 4EF9 0000 F9C6                   jmp   DeleteObject
0001F56C                            
0001F56C                            		include	"_inc\AnimateLevelGfx.asm"
0001F56C                            ; ---------------------------------------------------------------------------
0001F56C                            ; Subroutine to	animate	level graphics
0001F56C                            ; ---------------------------------------------------------------------------
0001F56C                            
0001F56C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F56C                            
0001F56C                            
0001F56C                            AnimateLevelGfx:
0001F56C                            		;tst.w	(f_pause).w	; is the game paused?
0001F56C                            		;bne.s	@ispaused	; if yes, branch
0001F56C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F572 6100 0000                  		bsr.w	AniArt_GiantRing
0001F576 7000                       		moveq	#0,d0
0001F578 1038 FE10                  		move.b	(v_zone).w,d0
0001F57C D040                       		add.w	d0,d0
0001F57E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F582 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F586                            
0001F586                            	@ispaused:
0001F586 4E75                       		rts	
0001F588                            
0001F588                            ; ===========================================================================
0001F588 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F58C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F590 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F594 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F596                            ; ===========================================================================
0001F596                            ; ---------------------------------------------------------------------------
0001F596                            ; Animated pattern routine - Green Hill
0001F596                            ; ---------------------------------------------------------------------------
0001F596                            
0001F596                            AniArt_GHZ:
0001F596                            
0001F596                            AniArt_GHZ_Waterfall:
0001F596                            
0001F596 =00000008                  @size:		equ 8	; number of tiles per frame
0001F596                            
0001F596 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F59A 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F59C                            
0001F59C 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F5A2 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F5A8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F5AC 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F5B0 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F5B4 6700                       		beq.s	@isframe0	; branch if frame 0
0001F5B6 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F5BA                            
0001F5BA                            	@isframe0:
0001F5C4 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F5C8 6000 0000                  		bra.w	LoadTiles
0001F5CC                            ; ===========================================================================
0001F5CC                            
0001F5CC                            AniArt_GHZ_Bigflower:
0001F5CC                            
0001F5CC =00000010                  @size:		equ 16	; number of tiles per frame
0001F5CC                            
0001F5CC 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F5D0 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F5D2                            
0001F5D2 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F5D8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F5DE 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5E2 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F5E6 0240 0001                  		andi.w	#1,d0
0001F5EA 6700                       		beq.s	@isframe0
0001F5EC 43E9 0200                  		lea	@size*$20(a1),a1
0001F5F0                            
0001F5F0                            	@isframe0:
0001F5FA 323C 000F                  		move.w	#@size-1,d1
0001F5FE 6000 0000                  		bra.w	LoadTiles
0001F602                            ; ===========================================================================
0001F602                            
0001F602                            AniArt_GHZ_Smallflower:
0001F602                            
0001F602 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F602                            
0001F602 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F606 6A00                       		bpl.s	@end
0001F608                            
0001F608 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F60E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F612 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F616 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F61A 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F61E 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F622 6600                       		bne.s	@isframe1	; if not, branch
0001F624 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F62A                            
0001F62A                            	@isframe1:
0001F62A EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F62C 3200                       		move.w	d0,d1
0001F62E D040                       		add.w	d0,d0
0001F630 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F63C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F642 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F646 323C 000B                  		move.w	#@size-1,d1
0001F64A 6100 0000                  		bsr.w	LoadTiles
0001F64E                            
0001F64E                            @end:
0001F64E 4E75                       		rts	
0001F650                            
0001F650 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F654                            ; ===========================================================================
0001F654                            ; ---------------------------------------------------------------------------
0001F654                            ; Animated pattern routine - Marble
0001F654                            ; ---------------------------------------------------------------------------
0001F654                            
0001F654                            AniArt_MZ:
0001F654                            
0001F654                            AniArt_MZ_Lava:
0001F654                            
0001F654 =00000008                  @size:		equ 8	; number of tiles per frame
0001F654                            
0001F654 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F658 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F65A                            
0001F65A 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F660 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F666 7000                       		moveq	#0,d0
0001F668 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F66C 5200                       		addq.b	#1,d0		; increment frame counter
0001F66E 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F672 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F674 7000                       		moveq	#0,d0
0001F676                            
0001F676                            	@frame01or2:
0001F676 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F67A C0FC 0100                  		mulu.w	#@size*$20,d0
0001F67E D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F68A 323C 0007                  		move.w	#@size-1,d1
0001F68E 6100 0000                  		bsr.w	LoadTiles
0001F692                            
0001F692                            AniArt_MZ_Magma:
0001F692 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F696 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F698                            		
0001F698 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F69E 7000                       		moveq	#0,d0
0001F6A0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F6A4 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F6AA EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F6AC D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F6B8 7600                       		moveq	#0,d3
0001F6BA 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F6BE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F6C2 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F6C6 343C 0003                  		move.w	#3,d2
0001F6CA                            
0001F6CA                            	@loop:
0001F6CA 3003                       		move.w	d3,d0
0001F6CC D040                       		add.w	d0,d0
0001F6CE 0240 001E                  		andi.w	#$1E,d0
0001F6D2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F6D8 3033 0000                  		move.w	(a3,d0.w),d0
0001F6DC 47F3 0000                  		lea	(a3,d0.w),a3
0001F6E0 224C                       		movea.l	a4,a1
0001F6E2 323C 001F                  		move.w	#$1F,d1
0001F6E6 4E93                       		jsr	(a3)
0001F6E8 5843                       		addq.w	#4,d3
0001F6EA 51CA FFDE                  		dbf	d2,@loop
0001F6EE 4E75                       		rts	
0001F6F0                            ; ===========================================================================
0001F6F0                            
0001F6F0                            AniArt_MZ_Torch:
0001F6F0                            
0001F6F0 =00000006                  @size:		equ 6	; number of tiles per frame
0001F6F0                            
0001F6F0 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F6F4 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F6F8                            		
0001F6F8 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F6FE 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F704 7000                       		moveq	#0,d0
0001F706 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F70A 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F70E 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F714 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F718 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F724 323C 0005                  		move.w	#@size-1,d1
0001F728 6000 0000                  		bra.w	LoadTiles
0001F72C                            
0001F72C                            @end:
0001F72C 4E75                       		rts	
0001F72E                            ; ===========================================================================
0001F72E                            ; ---------------------------------------------------------------------------
0001F72E                            ; Animated pattern routine - Scrap Brain
0001F72E                            ; ---------------------------------------------------------------------------
0001F72E                            
0001F72E                            AniArt_SBZ:
0001F72E                            
0001F72E =0000000C                  @size:		equ 12	; number of tiles per frame
0001F72E                            
0001F72E 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F732 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F734                            		
0001F734 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F738 6000                       		bra.s	@chk_smokepuff2
0001F73A                            ; ===========================================================================
0001F73A                            
0001F73A                            @smokepuff:
0001F73A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F73E 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F740                            		
0001F740 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F746 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F756 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F75A 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F75E 0240 0007                  		andi.w	#7,d0
0001F762 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F764 5340                       		subq.w	#1,d0
0001F766 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F76A 43F1 0000                  		lea	(a1,d0.w),a1
0001F76E 323C 000B                  		move.w	#@size-1,d1
0001F772 6000 0000                  		bra.w	LoadTiles
0001F776                            ; ===========================================================================
0001F776                            
0001F776                            @untilnextpuff:
0001F776 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F77C                            
0001F77C                            @clearsky:
0001F77C 323C 0005                  		move.w	#(@size/2)-1,d1
0001F780 6100 0000                  		bsr.w	LoadTiles
0001F784 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F78A 323C 0005                  		move.w	#(@size/2)-1,d1
0001F78E 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F792                            ; ===========================================================================
0001F792                            
0001F792                            @chk_smokepuff2:
0001F792 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F796 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F798                            		
0001F798 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F79C 6000                       		bra.s	@end
0001F79E                            ; ===========================================================================
0001F79E                            
0001F79E                            @smokepuff2:
0001F79E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7A2 6A00                       		bpl.s	@end		; branch if not 0
0001F7A4                            		
0001F7A4 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F7AA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F7BA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7BE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F7C2 0240 0007                  		andi.w	#7,d0
0001F7C6 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F7C8 5340                       		subq.w	#1,d0
0001F7CA C0FC 0180                  		mulu.w	#@size*$20,d0
0001F7CE 43F1 0000                  		lea	(a1,d0.w),a1
0001F7D2 323C 000B                  		move.w	#@size-1,d1
0001F7D6 6000 0000                  		bra.w	LoadTiles
0001F7DA                            ; ===========================================================================
0001F7DA                            
0001F7DA                            @untilnextpuff2:
0001F7DA 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F7E0 609A                       		bra.s	@clearsky
0001F7E2                            ; ===========================================================================
0001F7E2                            
0001F7E2                            @end:
0001F7E2 4E75                       		rts	
0001F7E4                            ; ===========================================================================
0001F7E4                            ; ---------------------------------------------------------------------------
0001F7E4                            ; Animated pattern routine - ending sequence
0001F7E4                            ; ---------------------------------------------------------------------------
0001F7E4                            
0001F7E4                            AniArt_Ending:
0001F7E4                            
0001F7E4                            AniArt_Ending_BigFlower:
0001F7E4                            
0001F7E4 =00000010                  @size:		equ 16	; number of tiles per frame
0001F7E4                            
0001F7E4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7E8 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F7EA                            		
0001F7EA 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F7F0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F7F6 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F7FA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7FE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F802 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F806 6700                       		beq.s	@isframe0	; branch if frame 0
0001F808 43E9 0200                  		lea	@size*$20(a1),a1
0001F80C 45EA 0200                  		lea	@size*$20(a2),a2
0001F810                            
0001F810                            	@isframe0:
0001F81A 323C 000F                  		move.w	#@size-1,d1
0001F81E 6100 0000                  		bsr.w	LoadTiles
0001F822 224A                       		movea.l	a2,a1
0001F82E 323C 000F                  		move.w	#@size-1,d1
0001F832 6000 0000                  		bra.w	LoadTiles
0001F836                            ; ===========================================================================
0001F836                            
0001F836                            AniArt_Ending_SmallFlower:
0001F836                            
0001F836 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F836                            
0001F836 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F83A 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F83C                            		
0001F83C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F842 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F846 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F84A 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F84E 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F852 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F854 3200                       		move.w	d0,d1
0001F856 D040                       		add.w	d0,d0
0001F858 D041                       		add.w	d1,d0		; multiply by 3
0001F864 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F86A 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F86E 323C 000B                  		move.w	#@size-1,d1
0001F872 6000 0000                  		bra.w	LoadTiles
0001F876                            ; ===========================================================================
0001F876 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F87E                            ; ===========================================================================
0001F87E                            
0001F87E                            AniArt_Ending_Flower3:
0001F87E                            
0001F87E =00000010                  @size:		equ 16	; number of tiles per frame
0001F87E                            
0001F87E 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F882 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F884                            		
0001F884 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F88A 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F88E 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F892 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F896 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F89A E148                       		lsl.w	#8,d0		; multiply by $100
0001F89C D040                       		add.w	d0,d0		; multiply by 2
0001F8A8 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F8AC 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8B0 323C 000F                  		move.w	#@size-1,d1
0001F8B4 6000 0000                  		bra.w	LoadTiles
0001F8B8                            ; ===========================================================================
0001F8B8 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F8BC                            ; ===========================================================================
0001F8BC                            
0001F8BC                            AniArt_Ending_Flower4:
0001F8BC                            
0001F8BC =00000010                  @size:		equ 16	; number of tiles per frame
0001F8BC                            
0001F8BC 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F8C0 6A00                       		bpl.s	@end		; branch if not 0
0001F8C2                            		
0001F8C2 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F8C8 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F8CC 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F8D0 0240 0003                  		andi.w	#3,d0
0001F8D4 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F8D8 E148                       		lsl.w	#8,d0		; multiply by $100
0001F8DA D040                       		add.w	d0,d0		; multiply by 2
0001F8E6 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F8EA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8EE 323C 000F                  		move.w	#@size-1,d1
0001F8F2 6000 0000                  		bra.w	LoadTiles
0001F8F6                            ; ===========================================================================
0001F8F6                            
0001F8F6                            @end:
0001F8F6 4E75                       		rts	
0001F8F8                            ; ===========================================================================
0001F8F8                            
0001F8F8                            AniArt_none:
0001F8F8 4E75                       		rts	
0001F8FA                            
0001F8FA                            ; ---------------------------------------------------------------------------
0001F8FA                            ; Subroutine to	transfer graphics to VRAM
0001F8FA                            
0001F8FA                            ; input:
0001F8FA                            ;	a1 = source address
0001F8FA                            ;	a6 = vdp_data_port ($C00000)
0001F8FA                            ;	d1 = number of tiles to load (minus one)
0001F8FA                            ; ---------------------------------------------------------------------------
0001F8FA                            
0001F8FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F8FA                            
0001F8FA                            
0001F8FA                            LoadTiles:
0001F8FA 2C99                       		move.l	(a1)+,(a6)
0001F8FC 2C99                       		move.l	(a1)+,(a6)
0001F8FE 2C99                       		move.l	(a1)+,(a6)
0001F900 2C99                       		move.l	(a1)+,(a6)
0001F902 2C99                       		move.l	(a1)+,(a6)
0001F904 2C99                       		move.l	(a1)+,(a6)
0001F906 2C99                       		move.l	(a1)+,(a6)
0001F908 2C99                       		move.l	(a1)+,(a6)
0001F90A 51C9 FFEE                  		dbf	d1,LoadTiles
0001F90E 4E75                       		rts	
0001F910                            ; End of function LoadTiles
0001F910                            
0001F910                            ; ===========================================================================
0001F910                            ; ---------------------------------------------------------------------------
0001F910                            ; Animated pattern routine - more Marble Zone
0001F910                            ; ---------------------------------------------------------------------------
0001F910 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F914 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F918 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F91C 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F920 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F924 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F928 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F92C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F930                            ; ===========================================================================
0001F930                            
0001F930                            loc_1C3EE:
0001F930 2C91                       		move.l	(a1),(a6)
0001F932 43E9 0010                  		lea	$10(a1),a1
0001F936 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F93A 4E75                       		rts	
0001F93C                            ; ===========================================================================
0001F93C                            
0001F93C                            loc_1C3FA:
0001F93C 2029 0002                  		move.l	2(a1),d0
0001F940 1029 0001                  		move.b	1(a1),d0
0001F944 E098                       		ror.l	#8,d0
0001F946 2C80                       		move.l	d0,(a6)
0001F948 43E9 0010                  		lea	$10(a1),a1
0001F94C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F950 4E75                       		rts	
0001F952                            ; ===========================================================================
0001F952                            
0001F952                            loc_1C410:
0001F952 2CA9 0002                  		move.l	2(a1),(a6)
0001F956 43E9 0010                  		lea	$10(a1),a1
0001F95A 51C9 FFF6                  		dbf	d1,loc_1C410
0001F95E 4E75                       		rts	
0001F960                            ; ===========================================================================
0001F960                            
0001F960                            loc_1C41E:
0001F960 2029 0004                  		move.l	4(a1),d0
0001F964 1029 0003                  		move.b	3(a1),d0
0001F968 E098                       		ror.l	#8,d0
0001F96A 2C80                       		move.l	d0,(a6)
0001F96C 43E9 0010                  		lea	$10(a1),a1
0001F970 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F974 4E75                       		rts	
0001F976                            ; ===========================================================================
0001F976                            
0001F976                            loc_1C434:
0001F976 2CA9 0004                  		move.l	4(a1),(a6)
0001F97A 43E9 0010                  		lea	$10(a1),a1
0001F97E 51C9 FFF6                  		dbf	d1,loc_1C434
0001F982 4E75                       		rts	
0001F984                            ; ===========================================================================
0001F984                            
0001F984                            loc_1C442:
0001F984 2029 0006                  		move.l	6(a1),d0
0001F988 1029 0005                  		move.b	5(a1),d0
0001F98C E098                       		ror.l	#8,d0
0001F98E 2C80                       		move.l	d0,(a6)
0001F990 43E9 0010                  		lea	$10(a1),a1
0001F994 51C9 FFEE                  		dbf	d1,loc_1C442
0001F998 4E75                       		rts	
0001F99A                            ; ===========================================================================
0001F99A                            
0001F99A                            loc_1C458:
0001F99A 2CA9 0006                  		move.l	6(a1),(a6)
0001F99E 43E9 0010                  		lea	$10(a1),a1
0001F9A2 51C9 FFF6                  		dbf	d1,loc_1C458
0001F9A6 4E75                       		rts	
0001F9A8                            ; ===========================================================================
0001F9A8                            
0001F9A8                            loc_1C466:
0001F9A8 2029 0008                  		move.l	8(a1),d0
0001F9AC 1029 0007                  		move.b	7(a1),d0
0001F9B0 E098                       		ror.l	#8,d0
0001F9B2 2C80                       		move.l	d0,(a6)
0001F9B4 43E9 0010                  		lea	$10(a1),a1
0001F9B8 51C9 FFEE                  		dbf	d1,loc_1C466
0001F9BC 4E75                       		rts	
0001F9BE                            ; ===========================================================================
0001F9BE                            
0001F9BE                            loc_1C47C:
0001F9BE 2CA9 0008                  		move.l	8(a1),(a6)
0001F9C2 43E9 0010                  		lea	$10(a1),a1
0001F9C6 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F9CA 4E75                       		rts	
0001F9CC                            ; ===========================================================================
0001F9CC                            
0001F9CC                            loc_1C48A:
0001F9CC 2029 000A                  		move.l	$A(a1),d0
0001F9D0 1029 0009                  		move.b	9(a1),d0
0001F9D4 E098                       		ror.l	#8,d0
0001F9D6 2C80                       		move.l	d0,(a6)
0001F9D8 43E9 0010                  		lea	$10(a1),a1
0001F9DC 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F9E0 4E75                       		rts	
0001F9E2                            ; ===========================================================================
0001F9E2                            
0001F9E2                            loc_1C4A0:
0001F9E2 2CA9 000A                  		move.l	$A(a1),(a6)
0001F9E6 43E9 0010                  		lea	$10(a1),a1
0001F9EA 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F9EE 4E75                       		rts	
0001F9F0                            ; ===========================================================================
0001F9F0                            
0001F9F0                            loc_1C4AE:
0001F9F0 2029 000C                  		move.l	$C(a1),d0
0001F9F4 1029 000B                  		move.b	$B(a1),d0
0001F9F8 E098                       		ror.l	#8,d0
0001F9FA 2C80                       		move.l	d0,(a6)
0001F9FC 43E9 0010                  		lea	$10(a1),a1
0001FA00 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FA04 4E75                       		rts	
0001FA06                            ; ===========================================================================
0001FA06                            
0001FA06                            loc_1C4C4:
0001FA06 2CA9 000C                  		move.l	$C(a1),(a6)
0001FA0A 43E9 0010                  		lea	$10(a1),a1
0001FA0E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FA12 4E75                       		rts	
0001FA14                            ; ===========================================================================
0001FA14                            
0001FA14                            loc_1C4D2:
0001FA14 2029 000C                  		move.l	$C(a1),d0
0001FA18 E198                       		rol.l	#8,d0
0001FA1A 1011                       		move.b	0(a1),d0
0001FA1C 2C80                       		move.l	d0,(a6)
0001FA1E 43E9 0010                  		lea	$10(a1),a1
0001FA22 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FA26 4E75                       		rts	
0001FA28                            ; ===========================================================================
0001FA28                            
0001FA28                            loc_1C4E8:
0001FA28 3CA9 000E                  		move.w	$E(a1),(a6)
0001FA2C 3C91                       		move.w	0(a1),(a6)
0001FA2E 43E9 0010                  		lea	$10(a1),a1
0001FA32 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FA36 4E75                       		rts	
0001FA38                            ; ===========================================================================
0001FA38                            
0001FA38                            loc_1C4FA:
0001FA38 2011                       		move.l	0(a1),d0
0001FA3A 1029 000F                  		move.b	$F(a1),d0
0001FA3E E098                       		ror.l	#8,d0
0001FA40 2C80                       		move.l	d0,(a6)
0001FA42 43E9 0010                  		lea	$10(a1),a1
0001FA46 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FA4A 4E75                       		rts	
0001FA4C                            
0001FA4C                            ; ---------------------------------------------------------------------------
0001FA4C                            ; Animated pattern routine - giant ring
0001FA4C                            ; ---------------------------------------------------------------------------
0001FA4C                            
0001FA4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA4C                            
0001FA4C                            
0001FA4C                            AniArt_GiantRing:
0001FA4C                            
0001FA4C =0000000E                  @size:		equ 14
0001FA4C                            
0001FA4C 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FA50 6600                       		bne.s	@loadTiles		; If so, get to work
0001FA52 4E75                       		rts	
0001FA54                            ; ===========================================================================
0001FA54                            ; loc_1C518:
0001FA54                            @loadTiles:
0001FA54 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FA5A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FA60 7000                       		moveq	#0,d0
0001FA62 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FA66 43F1 0000                  		lea	(a1,d0.w),a1
0001FA6A                            		; Turn VRAM address into VDP command
0001FA6A 0640 8000                  		addi.w	#$8000,d0
0001FA6E E588                       		lsl.l	#2,d0
0001FA70 E448                       		lsr.w	#2,d0
0001FA72 0040 4000                  		ori.w	#$4000,d0
0001FA76 4840                       		swap	d0
0001FA78                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FA78 2D40 0004                  		move.l	d0,4(a6)
0001FA7C                            
0001FA7C 323C 000D                  		move.w	#@size-1,d1
0001FA80 6000 FE78                  		bra.w	LoadTiles
0001FA84                            
0001FA84                            ; End of function AniArt_GiantRing
0001FA84                            ; End of function AniArt_GiantRing
0001FA84                            
0001FA84                            		include	"_incObj\21 HUD.asm"
0001FA84                            ; ---------------------------------------------------------------------------
0001FA84                            ; Object 21 - SCORE, TIME, RINGS
0001FA84                            ; ---------------------------------------------------------------------------
0001FA84                            
0001FA84                            HUD:
0001FA84 7000                       		moveq	#0,d0
0001FA86 1028 0024                  		move.b	obRoutine(a0),d0
0001FA8A 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FA8E 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FA92                            ; ===========================================================================
0001FA92 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FA94 0000                       		dc.w HUD_Flash-HUD_Index
0001FA96                            ; ===========================================================================
0001FA96                            
0001FA96                            HUD_Main:	; Routine 0
0001FA96 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FA9A 317C 0090 0008             		move.w	#$90,obX(a0)
0001FAA0 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FAA6 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FAAE 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FAB4 117C 0000 0001             		move.b	#0,obRender(a0)
0001FABA 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FAC0                            
0001FAC0                            HUD_Flash:	; Routine 2
0001FAC0 7000                       		moveq	#0,d0
0001FAC2 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FAC8 6600                       		bne.s	@display
0001FACA 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FACE 6600                       		bne.s	@norings	; if so, branch
0001FAD0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FAD2                            ; ===========================================================================
0001FAD2                            
0001FAD2                            @norings:
0001FAD2 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FAD8 6600                       		bne.s	@display	; if not, branch
0001FADA 5440                       		addq.w	#2,d0		; make time counter flash red
0001FADC                            
0001FADC                            	@display:
0001FADC 1140 001A                  		move.b	d0,obFrame(a0)
0001FAE0 4EF9 0000 F986             		jmp	DisplaySprite
0001FAE0 4EF9 0000 F986             		jmp	DisplaySprite
0001FAE6                            Map_HUD:	include	"_maps\HUD.asm"
0001FAE6                            ; ---------------------------------------------------------------------------
0001FAE6                            ; Sprite mappings - SCORE, TIME, RINGS
0001FAE6                            ; ---------------------------------------------------------------------------
0001FAE6                            Map_HUD_internal:
0001FAE6 0000                       		dc.w @allyellow-Map_HUD_internal
0001FAE8 0000                       		dc.w @ringred-Map_HUD_internal
0001FAEA 0000                       		dc.w @timered-Map_HUD_internal
0001FAEC 0000                       		dc.w @allred-Map_HUD_internal
0001FAEE 0A                         @allyellow:	dc.b $A
0001FAEF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FAF4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FAF9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FAFE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB03 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB08 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB0D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB12 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB17 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB1C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB21 00                         		dc.b 0
0001FB22 0A                         @ringred:	dc.b $A
0001FB23 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB28 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB2D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB32 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB37 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB3C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FB41 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FB46 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB4B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB50 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB55 00                         		dc.b 0
0001FB56 0A                         @timered:	dc.b $A
0001FB57 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB5C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB61 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB66 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB6B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB70 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB75 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB7A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB7F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB84 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB89 00                         		dc.b 0
0001FB8A 0A                         @allred:	dc.b $A
0001FB8B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB90 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB95 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB9A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB9F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBA4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FBA9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FBAE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FBB3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FBB8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FBBE 00                         		even
0001FBBE 00                         		even
0001FBBE                            
0001FBBE                            ; ---------------------------------------------------------------------------
0001FBBE                            ; Add points subroutine
0001FBBE                            ; ---------------------------------------------------------------------------
0001FBBE                            
0001FBBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBBE                            
0001FBBE                            
0001FBBE                            AddPoints:
0001FBBE 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FBC4                            
0001FBC4                            
0001FBC4 47F8 FE26                  			lea     (v_score).w,a3
0001FBC8 D193                       			add.l   d0,(a3)
0001FBCA 223C 000F 423F             			move.l  #999999,d1
0001FBD0 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FBD2 6200                       			bhi.s   @belowmax ; if yes, branch
0001FBD4 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FBD6                            		@belowmax:
0001FBD6 2013                       			move.l  (a3),d0
0001FBD8 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FBDC 6500                       			blo.s   @noextralife ; if not, branch
0001FBDE                            
0001FBDE 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FBE6 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FBEA 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FBEC 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FBF0 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FBFE                            
0001FBFE                            @locret_1C6B6:
0001FBFE                            @noextralife:
0001FBFE 4E75                       		rts	
0001FC00                            ; End of function AddPoints
0001FC00                            
0001FC00                            		include	"_inc\HUD_Update.asm"
0001FC00                            ; ---------------------------------------------------------------------------
0001FC00                            ; Subroutine to	update the HUD
0001FC00                            ; ---------------------------------------------------------------------------
0001FC00                            
0001FC00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC00                            
0001FC00                            hudVRAM:	macro loc
0001FC00                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FC00                            		endm
0001FC00                            
0001FC00                            
0001FC00                            HUD_Update:
0001FC00 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FC04 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FC08 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FC0C 6700                       		beq.s	@chkrings	; if not, branch
0001FC0E                            
0001FC0E 4238 FE1F                  		clr.b	(f_scorecount).w
0001FC12 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FC18 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FC1C 6100 0000                  		bsr.w	Hud_Score
0001FC20                            
0001FC20                            	@chkrings:
0001FC20 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FC24 6700                       		beq.s	@chktime	; if not, branch
0001FC26 6A00                       		bpl.s	@notzero
0001FC28 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FC2C                            
0001FC2C                            	@notzero:
0001FC2C 4238 FE1D                  		clr.b	(f_ringcount).w
0001FC30 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FC36 7200                       		moveq	#0,d1
0001FC38 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FC3C 6100 0000                  		bsr.w	Hud_Rings
0001FC40                            
0001FC40                            	@chktime:
0001FC40 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FC44 6700                       		beq.s	@chklives	; if not, branch
0001FC46 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FC4A 6600                       		bne.s	@chklives	; if yes, branch
0001FC4C 43F8 FE22                  		lea	(v_time).w,a1
0001FC50 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FC56 6700                       		beq.s	TimeOver	; if yes, branch
0001FC58                            
0001FC58 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FC5A 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC5E 6500                       		bcs.s	@chklives
0001FC60 12BC 0000                  		move.b	#0,(a1)
0001FC64 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FC66 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC6A 6500                       		bcs.s	@updatetime
0001FC6C 12BC 0000                  		move.b	#0,(a1)
0001FC70 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FC72 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FC76 6500                       		bcs.s	@updatetime
0001FC78 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FC7C                            
0001FC7C                            	@updatetime:
0001FC7C 203C 5E40 0003             		hudVRAM	$DE40
0001FC82 7200                       		moveq	#0,d1
0001FC84 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FC88 6100 0000                  		bsr.w	Hud_Mins
0001FC8C 203C 5EC0 0003             		hudVRAM	$DEC0
0001FC92 7200                       		moveq	#0,d1
0001FC94 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FC98 6100 0000                  		bsr.w	Hud_Secs
0001FC9C                            
0001FC9C                            	@chklives:
0001FC9C 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FCA0 6700                       		beq.s	@chkbonus	; if not, branch
0001FCA2 4238 FE1C                  		clr.b	(f_lifecount).w
0001FCA6 6100 0000                  		bsr.w	Hud_Lives
0001FCAA                            
0001FCAA                            	@chkbonus:
0001FCAA 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FCAE 6700                       		beq.s	@finish		; if not, branch
0001FCB0 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FCBE 7200                       		moveq	#0,d1
0001FCC0 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FCC4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCC8 7200                       		moveq	#0,d1
0001FCCA 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FCCE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCD2                            
0001FCD2                            	@finish:
0001FCD2 4E75                       		rts	
0001FCD4                            ; ===========================================================================
0001FCD4                            
0001FCD4                            TimeOver:
0001FCD4 4238 FE1E                  		clr.b	(f_timecount).w
0001FCD8 41F8 D000                  		lea	(v_player).w,a0
0001FCDC 2448                       		movea.l	a0,a2
0001FCDE 6100 E83A                  		bsr.w	KillSonic
0001FCE2 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FCE8 4E75                       		rts	
0001FCEA                            ; ===========================================================================
0001FCEA                            
0001FCEA                            HudDebug:
0001FCEA 6100 0000                  		bsr.w	HudDb_XY
0001FCEE 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FCF2 6700                       		beq.s	@objcounter	; if not, branch
0001FCF4 6A00                       		bpl.s	@notzero
0001FCF6 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FCFA                            
0001FCFA                            	@notzero:
0001FCFA 4238 FE1D                  		clr.b	(f_ringcount).w
0001FCFE 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD04 7200                       		moveq	#0,d1
0001FD06 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD0A 6100 0000                  		bsr.w	Hud_Rings
0001FD0E                            
0001FD0E                            	@objcounter:
0001FD0E 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FD14 7200                       		moveq	#0,d1
0001FD16 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FD1A 6100 0000                  		bsr.w	Hud_Secs
0001FD1E 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD22 6700                       		beq.s	@chkbonus	; if not, branch
0001FD24 4238 FE1C                  		clr.b	(f_lifecount).w
0001FD28 6100 0000                  		bsr.w	Hud_Lives
0001FD2C                            
0001FD2C                            	@chkbonus:
0001FD2C 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FD30 6700                       		beq.s	@finish		; if not, branch
0001FD32 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FD40 7200                       		moveq	#0,d1
0001FD42 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FD46 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD4A 7200                       		moveq	#0,d1
0001FD4C 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FD50 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD54                            
0001FD54                            	@finish:
0001FD54 4E75                       		rts	
0001FD56                            ; End of function HUD_Update
0001FD56                            
0001FD56                            ; ---------------------------------------------------------------------------
0001FD56                            ; Subroutine to	load "0" on the	HUD
0001FD56                            ; ---------------------------------------------------------------------------
0001FD56                            
0001FD56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD56                            
0001FD56                            
0001FD56                            Hud_LoadZero:
0001FD60 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FD64 343C 0002                  		move.w	#2,d2
0001FD68 6000                       		bra.s	loc_1C83E
0001FD6A                            ; End of function Hud_LoadZero
0001FD6A                            
0001FD6A                            ; ---------------------------------------------------------------------------
0001FD6A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FD6A                            ; ---------------------------------------------------------------------------
0001FD6A                            
0001FD6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD6A                            
0001FD6A                            
0001FD6A                            Hud_Base:
0001FD6A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FD70 6100 0000                  		bsr.w	Hud_Lives
0001FD7E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FD82 343C 000E                  		move.w	#$E,d2
0001FD86                            
0001FD86                            loc_1C83E:
0001FD86 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD8A                            
0001FD8A                            loc_1C842:
0001FD8A 323C 000F                  		move.w	#$F,d1
0001FD8E 101A                       		move.b	(a2)+,d0
0001FD90 6B00                       		bmi.s	loc_1C85E
0001FD92 4880                       		ext.w	d0
0001FD94 EB48                       		lsl.w	#5,d0
0001FD96 47F1 0000                  		lea	(a1,d0.w),a3
0001FD9A                            
0001FD9A                            loc_1C852:
0001FD9A 2C9B                       		move.l	(a3)+,(a6)
0001FD9C 51C9 FFFC                  		dbf	d1,loc_1C852
0001FDA0                            
0001FDA0                            loc_1C858:
0001FDA0 51CA FFE8                  		dbf	d2,loc_1C842
0001FDA4                            
0001FDA4 4E75                       		rts	
0001FDA6                            ; ===========================================================================
0001FDA6                            
0001FDA6                            loc_1C85E:
0001FDA6 2CBC 0000 0000             		move.l	#0,(a6)
0001FDAC 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FDB0                            
0001FDB0 60EE                       		bra.s	loc_1C858
0001FDB2                            ; End of function Hud_Base
0001FDB2                            
0001FDB2                            ; ===========================================================================
0001FDB2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FDBE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FDC2                            ; ---------------------------------------------------------------------------
0001FDC2                            ; Subroutine to	load debug mode	numbers	patterns
0001FDC2                            ; ---------------------------------------------------------------------------
0001FDC2                            
0001FDC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDC2                            
0001FDC2                            
0001FDC2                            HudDb_XY:
0001FDCC 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FDD0 4841                       		swap	d1
0001FDD2 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FDD6 6100                       		bsr.s	HudDb_XY2
0001FDD8 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FDDC 4841                       		swap	d1
0001FDDE 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FDE2                            ; End of function HudDb_XY
0001FDE2                            
0001FDE2                            
0001FDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDE2                            
0001FDE2                            
0001FDE2                            HudDb_XY2:
0001FDE2 7C07                       		moveq	#7,d6
0001FDE4 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FDEA                            
0001FDEA                            HudDb_XYLoop:
0001FDEA E959                       		rol.w	#4,d1
0001FDEC 3401                       		move.w	d1,d2
0001FDEE 0242 000F                  		andi.w	#$F,d2
0001FDF2 0C42 000A                  		cmpi.w	#$A,d2
0001FDF6 6500                       		bcs.s	loc_1C8B2
0001FDF8 5E42                       		addq.w	#7,d2
0001FDFA                            
0001FDFA                            loc_1C8B2:
0001FDFA EB4A                       		lsl.w	#5,d2
0001FDFC 47F1 2000                  		lea	(a1,d2.w),a3
0001FE00 2C9B                       		move.l	(a3)+,(a6)
0001FE02 2C9B                       		move.l	(a3)+,(a6)
0001FE04 2C9B                       		move.l	(a3)+,(a6)
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C 2C9B                       		move.l	(a3)+,(a6)
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 4841                       		swap	d1
0001FE12 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FE16                            
0001FE16 4E75                       		rts	
0001FE18                            ; End of function HudDb_XY2
0001FE18                            
0001FE18                            ; ---------------------------------------------------------------------------
0001FE18                            ; Subroutine to	load rings numbers patterns
0001FE18                            ; ---------------------------------------------------------------------------
0001FE18                            
0001FE18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE18                            
0001FE18                            
0001FE18                            Hud_Rings:
0001FE18 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FE1E 7C02                       		moveq	#2,d6
0001FE20 6000                       		bra.s	Hud_LoadArt
0001FE22                            ; End of function Hud_Rings
0001FE22                            
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22                            ; Subroutine to	load score numbers patterns
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22                            
0001FE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE22                            
0001FE22                            
0001FE22                            Hud_Score:
0001FE22 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FE28 7C05                       		moveq	#5,d6
0001FE2A                            
0001FE2A                            Hud_LoadArt:
0001FE2A 7800                       		moveq	#0,d4
0001FE2C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE30                            
0001FE30                            Hud_ScoreLoop:
0001FE30 7400                       		moveq	#0,d2
0001FE32 261A                       		move.l	(a2)+,d3
0001FE34                            
0001FE34                            loc_1C8EC:
0001FE34 9283                       		sub.l	d3,d1
0001FE36 6500                       		bcs.s	loc_1C8F4
0001FE38 5242                       		addq.w	#1,d2
0001FE3A 60F8                       		bra.s	loc_1C8EC
0001FE3C                            ; ===========================================================================
0001FE3C                            
0001FE3C                            loc_1C8F4:
0001FE3C D283                       		add.l	d3,d1
0001FE3E 4A42                       		tst.w	d2
0001FE40 6700                       		beq.s	loc_1C8FE
0001FE42 383C 0001                  		move.w	#1,d4
0001FE46                            
0001FE46                            loc_1C8FE:
0001FE46 4A44                       		tst.w	d4
0001FE48 6700                       		beq.s	loc_1C92C
0001FE4A ED4A                       		lsl.w	#6,d2
0001FE4C 2D40 0004                  		move.l	d0,4(a6)
0001FE50 47F1 2000                  		lea	(a1,d2.w),a3
0001FE54 2C9B                       		move.l	(a3)+,(a6)
0001FE56 2C9B                       		move.l	(a3)+,(a6)
0001FE58 2C9B                       		move.l	(a3)+,(a6)
0001FE5A 2C9B                       		move.l	(a3)+,(a6)
0001FE5C 2C9B                       		move.l	(a3)+,(a6)
0001FE5E 2C9B                       		move.l	(a3)+,(a6)
0001FE60 2C9B                       		move.l	(a3)+,(a6)
0001FE62 2C9B                       		move.l	(a3)+,(a6)
0001FE64 2C9B                       		move.l	(a3)+,(a6)
0001FE66 2C9B                       		move.l	(a3)+,(a6)
0001FE68 2C9B                       		move.l	(a3)+,(a6)
0001FE6A 2C9B                       		move.l	(a3)+,(a6)
0001FE6C 2C9B                       		move.l	(a3)+,(a6)
0001FE6E 2C9B                       		move.l	(a3)+,(a6)
0001FE70 2C9B                       		move.l	(a3)+,(a6)
0001FE72 2C9B                       		move.l	(a3)+,(a6)
0001FE74                            
0001FE74                            loc_1C92C:
0001FE74 0680 0040 0000             		addi.l	#$400000,d0
0001FE7A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FE7E                            
0001FE7E 4E75                       		rts	
0001FE80                            
0001FE80                            ; End of function Hud_Score
0001FE80                            ; End of function Hud_Score
0001FE80                            
0001FE80                            ; ---------------------------------------------------------------------------
0001FE80                            ; Subroutine to	load countdown numbers on the continue screen
0001FE80                            ; ---------------------------------------------------------------------------
0001FE80                            
0001FE80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE80                            
0001FE80                            
0001FE80                            ContScrCounter:
0001FE8A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FE90 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FE96 7C01                       		moveq	#1,d6
0001FE98 7800                       		moveq	#0,d4
0001FE9A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FE9E                            
0001FE9E                            ContScr_Loop:
0001FE9E 7400                       		moveq	#0,d2
0001FEA0 261A                       		move.l	(a2)+,d3
0001FEA2                            
0001FEA2                            loc_1C95A:
0001FEA2 9283                       		sub.l	d3,d1
0001FEA4 6500                       		blo.s	loc_1C962
0001FEA6 5242                       		addq.w	#1,d2
0001FEA8 60F8                       		bra.s	loc_1C95A
0001FEAA                            ; ===========================================================================
0001FEAA                            
0001FEAA                            loc_1C962:
0001FEAA D283                       		add.l	d3,d1
0001FEAC ED4A                       		lsl.w	#6,d2
0001FEAE 47F1 2000                  		lea	(a1,d2.w),a3
0001FEB2 2C9B                       		move.l	(a3)+,(a6)
0001FEB4 2C9B                       		move.l	(a3)+,(a6)
0001FEB6 2C9B                       		move.l	(a3)+,(a6)
0001FEB8 2C9B                       		move.l	(a3)+,(a6)
0001FEBA 2C9B                       		move.l	(a3)+,(a6)
0001FEBC 2C9B                       		move.l	(a3)+,(a6)
0001FEBE 2C9B                       		move.l	(a3)+,(a6)
0001FEC0 2C9B                       		move.l	(a3)+,(a6)
0001FEC2 2C9B                       		move.l	(a3)+,(a6)
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 2C9B                       		move.l	(a3)+,(a6)
0001FECA 2C9B                       		move.l	(a3)+,(a6)
0001FECC 2C9B                       		move.l	(a3)+,(a6)
0001FECE 2C9B                       		move.l	(a3)+,(a6)
0001FED0 2C9B                       		move.l	(a3)+,(a6)
0001FED2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FED6                            
0001FED6 4E75                       		rts	
0001FED8                            ; End of function ContScrCounter
0001FED8                            
0001FED8                            ; ===========================================================================
0001FED8                            
0001FED8                            		include	"_inc\HUD (part 2).asm"
0001FED8                            ; ---------------------------------------------------------------------------
0001FED8                            ; HUD counter sizes
0001FED8                            ; ---------------------------------------------------------------------------
0001FED8 0001 86A0                  Hud_100000:	dc.l 100000
0001FEDC 0000 2710                  Hud_10000:	dc.l 10000
0001FEE0 0000 03E8                  Hud_1000:	dc.l 1000
0001FEE4 0000 0064                  Hud_100:	dc.l 100
0001FEE8 0000 000A                  Hud_10:		dc.l 10
0001FEEC 0000 0001                  Hud_1:		dc.l 1
0001FEF0                            
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0                            ; Subroutine to	load time numbers patterns
0001FEF0                            ; ---------------------------------------------------------------------------
0001FEF0                            
0001FEF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEF0                            
0001FEF0                            
0001FEF0                            Hud_Mins:
0001FEF0 45F9 0001 FEEC             		lea	(Hud_1).l,a2
0001FEF6 7C00                       		moveq	#0,d6
0001FEF8 6000                       		bra.s	loc_1C9BA
0001FEFA                            ; End of function Hud_Mins
0001FEFA                            
0001FEFA                            
0001FEFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEFA                            
0001FEFA                            
0001FEFA                            Hud_Secs:
0001FEFA 45F9 0001 FEE8             		lea	(Hud_10).l,a2
0001FF00 7C01                       		moveq	#1,d6
0001FF02                            
0001FF02                            loc_1C9BA:
0001FF02 7800                       		moveq	#0,d4
0001FF04 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF08                            
0001FF08                            Hud_TimeLoop:
0001FF08 7400                       		moveq	#0,d2
0001FF0A 261A                       		move.l	(a2)+,d3
0001FF0C                            
0001FF0C                            loc_1C9C4:
0001FF0C 9283                       		sub.l	d3,d1
0001FF0E 6500                       		bcs.s	loc_1C9CC
0001FF10 5242                       		addq.w	#1,d2
0001FF12 60F8                       		bra.s	loc_1C9C4
0001FF14                            ; ===========================================================================
0001FF14                            
0001FF14                            loc_1C9CC:
0001FF14 D283                       		add.l	d3,d1
0001FF16 4A42                       		tst.w	d2
0001FF18 6700                       		beq.s	loc_1C9D6
0001FF1A 383C 0001                  		move.w	#1,d4
0001FF1E                            
0001FF1E                            loc_1C9D6:
0001FF1E ED4A                       		lsl.w	#6,d2
0001FF20 2D40 0004                  		move.l	d0,4(a6)
0001FF24 47F1 2000                  		lea	(a1,d2.w),a3
0001FF28 2C9B                       		move.l	(a3)+,(a6)
0001FF2A 2C9B                       		move.l	(a3)+,(a6)
0001FF2C 2C9B                       		move.l	(a3)+,(a6)
0001FF2E 2C9B                       		move.l	(a3)+,(a6)
0001FF30 2C9B                       		move.l	(a3)+,(a6)
0001FF32 2C9B                       		move.l	(a3)+,(a6)
0001FF34 2C9B                       		move.l	(a3)+,(a6)
0001FF36 2C9B                       		move.l	(a3)+,(a6)
0001FF38 2C9B                       		move.l	(a3)+,(a6)
0001FF3A 2C9B                       		move.l	(a3)+,(a6)
0001FF3C 2C9B                       		move.l	(a3)+,(a6)
0001FF3E 2C9B                       		move.l	(a3)+,(a6)
0001FF40 2C9B                       		move.l	(a3)+,(a6)
0001FF42 2C9B                       		move.l	(a3)+,(a6)
0001FF44 2C9B                       		move.l	(a3)+,(a6)
0001FF46 2C9B                       		move.l	(a3)+,(a6)
0001FF48 0680 0040 0000             		addi.l	#$400000,d0
0001FF4E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FF52                            
0001FF52 4E75                       		rts	
0001FF54                            ; End of function Hud_Secs
0001FF54                            
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54                            ; Subroutine to	load time/ring bonus numbers patterns
0001FF54                            ; ---------------------------------------------------------------------------
0001FF54                            
0001FF54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF54                            
0001FF54                            
0001FF54                            Hud_TimeRingBonus:
0001FF54 45F9 0001 FEE0             		lea	(Hud_1000).l,a2
0001FF5A 7C03                       		moveq	#3,d6
0001FF5C 7800                       		moveq	#0,d4
0001FF5E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF62                            
0001FF62                            Hud_BonusLoop:
0001FF62 7400                       		moveq	#0,d2
0001FF64 261A                       		move.l	(a2)+,d3
0001FF66                            
0001FF66                            loc_1CA1E:
0001FF66 9283                       		sub.l	d3,d1
0001FF68 6500                       		bcs.s	loc_1CA26
0001FF6A 5242                       		addq.w	#1,d2
0001FF6C 60F8                       		bra.s	loc_1CA1E
0001FF6E                            ; ===========================================================================
0001FF6E                            
0001FF6E                            loc_1CA26:
0001FF6E D283                       		add.l	d3,d1
0001FF70 4A42                       		tst.w	d2
0001FF72 6700                       		beq.s	loc_1CA30
0001FF74 383C 0001                  		move.w	#1,d4
0001FF78                            
0001FF78                            loc_1CA30:
0001FF78 4A44                       		tst.w	d4
0001FF7A 6700                       		beq.s	Hud_ClrBonus
0001FF7C ED4A                       		lsl.w	#6,d2
0001FF7E 47F1 2000                  		lea	(a1,d2.w),a3
0001FF82 2C9B                       		move.l	(a3)+,(a6)
0001FF84 2C9B                       		move.l	(a3)+,(a6)
0001FF86 2C9B                       		move.l	(a3)+,(a6)
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 2C9B                       		move.l	(a3)+,(a6)
0001FF8C 2C9B                       		move.l	(a3)+,(a6)
0001FF8E 2C9B                       		move.l	(a3)+,(a6)
0001FF90 2C9B                       		move.l	(a3)+,(a6)
0001FF92 2C9B                       		move.l	(a3)+,(a6)
0001FF94 2C9B                       		move.l	(a3)+,(a6)
0001FF96 2C9B                       		move.l	(a3)+,(a6)
0001FF98 2C9B                       		move.l	(a3)+,(a6)
0001FF9A 2C9B                       		move.l	(a3)+,(a6)
0001FF9C 2C9B                       		move.l	(a3)+,(a6)
0001FF9E 2C9B                       		move.l	(a3)+,(a6)
0001FFA0 2C9B                       		move.l	(a3)+,(a6)
0001FFA2                            
0001FFA2                            loc_1CA5A:
0001FFA2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FFA6                            
0001FFA6 4E75                       		rts	
0001FFA8                            ; ===========================================================================
0001FFA8                            
0001FFA8                            Hud_ClrBonus:
0001FFA8 7A0F                       		moveq	#$F,d5
0001FFAA                            
0001FFAA                            Hud_ClrBonusLoop:
0001FFAA 2CBC 0000 0000             		move.l	#0,(a6)
0001FFB0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FFB4                            
0001FFB4 60EC                       		bra.s	loc_1CA5A
0001FFB6                            ; End of function Hud_TimeRingBonus
0001FFB6                            
0001FFB6                            ; ---------------------------------------------------------------------------
0001FFB6                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FFB6                            ; ---------------------------------------------------------------------------
0001FFB6                            
0001FFB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFB6                            
0001FFB6                            
0001FFB6                            Hud_Lives:
0001FFB6 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FFBC 7200                       		moveq	#0,d1
0001FFBE 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FFC2 45F9 0001 FEE8             		lea	(Hud_10).l,a2
0001FFC8 7C01                       		moveq	#1,d6
0001FFCA 7800                       		moveq	#0,d4
0001FFCC 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FFD0                            
0001FFD0                            Hud_LivesLoop:
0001FFD0 2D40 0004                  		move.l	d0,4(a6)
0001FFD4 7400                       		moveq	#0,d2
0001FFD6 261A                       		move.l	(a2)+,d3
0001FFD8                            
0001FFD8                            loc_1CA90:
0001FFD8 9283                       		sub.l	d3,d1
0001FFDA 6500                       		bcs.s	loc_1CA98
0001FFDC 5242                       		addq.w	#1,d2
0001FFDE 60F8                       		bra.s	loc_1CA90
0001FFE0                            ; ===========================================================================
0001FFE0                            
0001FFE0                            loc_1CA98:
0001FFE0 D283                       		add.l	d3,d1
0001FFE2 4A42                       		tst.w	d2
0001FFE4 6700                       		beq.s	loc_1CAA2
0001FFE6 383C 0001                  		move.w	#1,d4
0001FFEA                            
0001FFEA                            loc_1CAA2:
0001FFEA 4A44                       		tst.w	d4
0001FFEC 6700                       		beq.s	Hud_ClrLives
0001FFEE                            
0001FFEE                            loc_1CAA6:
0001FFEE EB4A                       		lsl.w	#5,d2
0001FFF0 47F1 2000                  		lea	(a1,d2.w),a3
0001FFF4 2C9B                       		move.l	(a3)+,(a6)
0001FFF6 2C9B                       		move.l	(a3)+,(a6)
0001FFF8 2C9B                       		move.l	(a3)+,(a6)
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000 2C9B                       		move.l	(a3)+,(a6)
00020002 2C9B                       		move.l	(a3)+,(a6)
00020004                            
00020004                            loc_1CABC:
00020004 0680 0040 0000             		addi.l	#$400000,d0
0002000A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0002000E                            
0002000E 4E75                       		rts	
00020010                            ; ===========================================================================
00020010                            
00020010                            Hud_ClrLives:
00020010 4A46                       		tst.w	d6
00020012 67DA                       		beq.s	loc_1CAA6
00020014 7A07                       		moveq	#7,d5
00020016                            
00020016                            Hud_ClrLivesLoop:
00020016 2CBC 0000 0000             		move.l	#0,(a6)
0002001C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020020 60E2                       		bra.s	loc_1CABC
00020022                            ; End of function Hud_Lives
00020022                            ; End of function Hud_Lives
00020022                            
00020022                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020322                            		even
00020322                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020462                            		even
00020462                            
00020462                            		include	"_incObj\DebugMode.asm"
00020462                            ; ---------------------------------------------------------------------------
00020462                            ; When debug mode is currently in use
00020462                            ; ---------------------------------------------------------------------------
00020462                            
00020462                            DebugMode:
00020462 7000                       		moveq	#0,d0
00020464 1038 FE08                  		move.b	(v_debuguse).w,d0
00020468 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0002046C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020470                            ; ===========================================================================
00020470 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020472 0000                       		dc.w Debug_Action-Debug_Index
00020474                            ; ===========================================================================
00020474                            
00020474                            Debug_Main:	; Routine 0
00020474 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020478 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0002047E 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020484 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
0002048A 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020490 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020496 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
0002049C 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000204A2 117C 0000 001A             		move.b	#0,obFrame(a0)
000204A8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000204AE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000204B4 6600                       		bne.s	@islevel	; if not, branch
000204B6                            
000204B6 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000204BC 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000204C2 7006                       		moveq	#6,d0		; use 6th debug	item list
000204C4 6000                       		bra.s	@selectlist
000204C6                            ; ===========================================================================
000204C6                            
000204C6                            @islevel:
000204C6 7000                       		moveq	#0,d0
000204C8 1038 FE10                  		move.b	(v_zone).w,d0
000204CC                            
000204CC                            @selectlist:
000204CC 45F9 0000 0000             		lea	(DebugList).l,a2
000204D2 D040                       		add.w	d0,d0
000204D4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000204D8 3C1A                       		move.w	(a2)+,d6
000204DA BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000204DE 6200                       		bhi.s	@noreset	; if not, branch
000204E0 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000204E6                            
000204E6                            	@noreset:
000204E6 6100 0000                  		bsr.w	Debug_ShowItem
000204EA 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000204F0 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000204F6                            
000204F6                            Debug_Action:	; Routine 2
000204F6 7006                       		moveq	#6,d0
000204F8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000204FE 6700                       		beq.s	@isntlevel
00020500                            
00020500 7000                       		moveq	#0,d0
00020502 1038 FE10                  		move.b	(v_zone).w,d0
00020506                            
00020506                            	@isntlevel:
00020506 45F9 0000 0000             		lea	(DebugList).l,a2
0002050C D040                       		add.w	d0,d0
0002050E D4F2 0000                  		adda.w	(a2,d0.w),a2
00020512 3C1A                       		move.w	(a2)+,d6
00020514 6100 0000                  		bsr.w	Debug_Control
00020518 4EF9 0000 F986             		jmp	(DisplaySprite).l
0002051E                            
0002051E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002051E                            
0002051E                            
0002051E                            Debug_Control:
0002051E 7800                       		moveq	#0,d4
00020520 323C 0001                  		move.w	#1,d1
00020524 1838 F605                  		move.b	(v_jpadpress1).w,d4
00020528 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
0002052C 6600                       		bne.s	@dirpressed	; if yes, branch
0002052E                            
0002052E 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020532 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
00020536 6600                       		bne.s	@dirheld	; if yes, branch
00020538                            
00020538 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002053E 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
00020544 6000 0000                  		bra.w	Debug_ChgItem
00020548                            ; ===========================================================================
00020548                            
00020548                            @dirheld:
00020548 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
0002054C 6600                       		bne.s	loc_1D01C
0002054E 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020554 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020558 6600                       		bne.s	@dirpressed
0002055A 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020560                            
00020560                            @dirpressed:
00020560 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020564                            
00020564                            loc_1D01C:
00020564 7200                       		moveq	#0,d1
00020566 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0002056A 5241                       		addq.w	#1,d1
0002056C 4841                       		swap	d1
0002056E E881                       		asr.l	#4,d1
00020570 2428 000C                  		move.l	obY(a0),d2
00020574 2628 0008                  		move.l	obX(a0),d3
00020578 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
0002057C 6700                       		beq.s	loc_1D03C	; if not, branch
0002057E 9481                       		sub.l	d1,d2
00020580 6400                       		bcc.s	loc_1D03C
00020582 7400                       		moveq	#0,d2
00020584                            
00020584                            loc_1D03C:
00020584 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020588 6700                       		beq.s	loc_1D052	; if not, branch
0002058A D481                       		add.l	d1,d2
0002058C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020592 6500                       		bcs.s	loc_1D052
00020594 243C 07FF 0000             		move.l	#$7FF0000,d2
0002059A                            
0002059A                            loc_1D052:
0002059A 0804 0002                  		btst	#bitL,d4
0002059E 6700                       		beq.s	loc_1D05E
000205A0 9681                       		sub.l	d1,d3
000205A2 6400                       		bcc.s	loc_1D05E
000205A4 7600                       		moveq	#0,d3
000205A6                            
000205A6                            loc_1D05E:
000205A6 0804 0003                  		btst	#bitR,d4
000205AA 6700                       		beq.s	loc_1D066
000205AC D681                       		add.l	d1,d3
000205AE                            
000205AE                            loc_1D066:
000205AE 2142 000C                  		move.l	d2,obY(a0)
000205B2 2143 0008                  		move.l	d3,obX(a0)
000205B6                            
000205B6                            Debug_ChgItem:
000205B6 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000205BC 6700                       		beq.s	@createitem	; if not, branch
000205BE 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205C4 6700                       		beq.s	@nextitem	; if not, branch
000205C6 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000205CA 6400                       		bcc.s	@display
000205CC DD38 FE06                  		add.b	d6,(v_debugitem).w
000205D0 6000                       		bra.s	@display
000205D2                            ; ===========================================================================
000205D2                            
000205D2                            @nextitem:
000205D2 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000205D8 6700                       		beq.s	@createitem	; if not, branch
000205DA 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000205DE BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000205E2 6200                       		bhi.s	@display
000205E4 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000205EA                            
000205EA                            	@display:
000205EA 6000 0000                  		bra.w	Debug_ShowItem
000205EE                            ; ===========================================================================
000205EE                            
000205EE                            @createitem:
000205EE 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205F4 6700                       		beq.s	@backtonormal	; if not, branch
000205F6 4EB9 0000 FE12             		jsr	(FindFreeObj).l
000205FC 6600                       		bne.s	@backtonormal
000205FE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020604 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002060A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002060E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020614 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002061A 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020620 7000                       		moveq	#0,d0
00020622 1038 FE06                  		move.b	(v_debugitem).w,d0
00020626 E748                       		lsl.w	#3,d0
00020628 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0002062E 4E75                       		rts	
00020630                            ; ===========================================================================
00020630                            
00020630                            @backtonormal:
00020630 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
00020636 6700                       		beq.s	@stayindebug	; if not, branch
00020638 7000                       		moveq	#0,d0
0002063A 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0002063E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020646 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002064C 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020650 3140 000A                  		move.w	d0,obX+2(a0)
00020654 3140 000E                  		move.w	d0,obY+2(a0)
00020658 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0002065E 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020664 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0002066A 6600                       		bne.s	@stayindebug	; if not, branch
0002066C                            
0002066C 4278 F780                  		clr.w	(v_ssangle).w
00020670 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020676 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002067E 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020684 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
0002068A 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020690 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020696                            
00020696                            	@stayindebug:
00020696 4E75                       		rts	
00020698                            ; End of function Debug_Control
00020698                            
00020698                            
00020698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020698                            
00020698                            
00020698                            Debug_ShowItem:
00020698 7000                       		moveq	#0,d0
0002069A 1038 FE06                  		move.b	(v_debugitem).w,d0
0002069E E748                       		lsl.w	#3,d0
000206A0 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000206A6 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000206AC 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000206B2 4E75                       		rts	
000206B4                            ; End of function Debug_ShowItem
000206B4                            ; End of function Debug_ShowItem
000206B4                            		include	"_inc\DebugList.asm"
000206B4                            ; ---------------------------------------------------------------------------
000206B4                            ; Debug	mode item lists
000206B4                            ; ---------------------------------------------------------------------------
000206B4                            DebugList:
000206B4 0000                       	dc.w @GHZ-DebugList
000206B6 0000                       	dc.w @LZ-DebugList
000206B8 0000                       	dc.w @MZ-DebugList
000206BA 0000                       	dc.w @SLZ-DebugList
000206BC 0000                       	dc.w @SYZ-DebugList
000206BE 0000                       	dc.w @SBZ-DebugList
000206C0 0000                       	dc.w @Ending-DebugList
000206C2                            
000206C2                            dbug:	macro map,object,subtype,frame,vram
000206C2                            	dc.l map+(object<<24)
000206C2                            	dc.b subtype,frame
000206C2                            	dc.w vram
000206C2                            	endm
000206C2                            
000206C2                            @GHZ:
000206C2 0000                       	dc.w (@GHZend-@GHZ-2)/8
000206C4                            
000206C4                            ;		mappings	object		subtype	frame	VRAM setting
000206C4 2500 BFE2 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000206CC 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206D4 1F00 B3C2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206DC 2200 B84C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206E4 2B00 CEE4 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000206EC 3600 F330 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206F4 1800 9D7C 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000206FC 3B00 F456 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020704 4001 19EE 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
0002070C 4101 00A4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020714 4201 02CA 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
0002071C 4401 05D8 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020724 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002072C 4B00 C032 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020734 7D01 A3DE 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0002073C                            	@GHZend:
0002073C                            
0002073C                            @LZ:
0002073C 0000                       	dc.w (@LZend-@LZ-2)/8
0002073E                            
0002073E                            ;		mappings	object		subtype	frame	VRAM setting
0002073E 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020746 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002074E 4101 00A4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020756 2C00 CF8A 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0002075E 2D00 D176 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020766 1601 43A2 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0002076E 1601 43A2 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020776 3300 E5F4 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0002077E 3200 E1B4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020786 3600 F330 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002078E 5201 2478 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020796 6101 45CA 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
0002079E 6101 45CA 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000207A6 6101 45CA 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000207AE 6201 471E 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000207B6 6101 45CA 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000207BE 6101 45CA 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000207C6 6301 4A80 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000207CE 6001 42EC 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000207D6 6401 4DCE 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000207DE 6501 4F56 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000207E6 6501 4F56 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000207EE 0B01 3738 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000207F6 0C01 3808 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000207FE 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020806                            	@LZend:
00020806                            
00020806                            @MZ:
00020806 0000                       	dc.w (@MZend-@MZ-2)/8
00020808                            
00020808                            ;		mappings	object		subtype	frame	VRAM setting
00020808 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020810 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020818 2200 B84C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020820 3600 F330 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020828 4101 00A4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020830 1300 D684 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
00020838 4601 0C88 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020840 6E01 92B8 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020848 6A01 8C70 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020850 3300 E5F4 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020858 1E00 AADA 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020860 5101 21AC 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020868 5201 2422 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020870 5300 A3BE 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020878 5401 1554 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020880 5501 2616 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020888 7801 9E88 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020890 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020898                            	@MZend:
00020898                            
00020898                            @SLZ:
00020898 0000                       	dc.w (@SLZend-@SLZ-2)/8
0002089A                            
0002089A                            ;		mappings	object		subtype	frame	VRAM setting
0002089A 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208A2 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208AA 5901 3160 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000208B2 5300 A3BE 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000208BA 1800 9DDA 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000208C2 5A01 329A 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000208CA 5B01 3452 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000208D2 5D01 3A26 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000208DA 5E01 3DB8 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000208E2 4101 00A4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208EA 1300 D684 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000208F2 1C00 A4DC 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000208FA 5F01 4036 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020902 6001 42EC 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0002090A 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020912                            	@SLZend:
00020912                            
00020912                            @SYZ:
00020912 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020914                            
00020914                            ;		mappings	object		subtype	frame	VRAM setting
00020914 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002091C 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020924 3600 F330 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002092C 4101 00A4 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020934 4301 052A 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0002093C 1201 0D06 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020944 4701 0EAA 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
0002094C 1F00 B3C2 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020954 2200 B84C 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002095C 5001 1C7E 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020964 1800 9DC8 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
0002096C 5601 2B20 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020974 3200 E1B4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002097C 7801 9E88 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020984 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002098C                            	@SYZend:
0002098C                            
0002098C                            @SBZ:
0002098C 0000                       	dc.w (@SBZend-@SBZ-2)/8
0002098E                            
0002098E                            ;		mappings	object		subtype	frame	VRAM setting
0002098E 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020996 2600 C7A8 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002099E 5F01 4036 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209A6 6001 42EC 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000209AE 7801 9E88 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000209B6 1501 2EBC 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000209BE 6701 875E E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000209C6 5201 2422 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000209CE 3200 E1B4 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000209D6 6901 89B8 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000209DE 6901 8A12 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000209E6 6A01 8C70 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000209EE 5300 A3BE 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000209F6 5201 2422 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
000209FE 6B01 9040 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020A06 2A00 A66C 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020A0E 6B01 9040 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020A16 6A01 8C70 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020A1E 6B01 9040 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020A26 6A01 8C70 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020A2E 6B01 9040 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020A36 6C01 9202 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020A3E 6D01 097A 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020A46 6D01 097A 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020A4E 6E01 92B8 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020A56 7001 96FE 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020A5E 7101 38CC 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020A66 1E00 AADA 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020A6E 7901 A21C 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A76                            	@SBZend:
00020A76                            
00020A76                            @Ending:
00020A76 0000                       	dc.w (@Endingend-@Ending-2)/8
00020A78                            
00020A78                            ;		mappings	object		subtype	frame	VRAM setting
00020A78 2500 BFE2 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A80 2500 BFE2 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020A88                            	@Endingend:
00020A88                            
00020A88                            	even
00020A88                            	even
00020A88                            		include	"_inc\LevelHeaders.asm"
00020A88                            ; ---------------------------------------------------------------------------
00020A88                            ; Level Headers
00020A88                            ; ---------------------------------------------------------------------------
00020A88                            
00020A88                            LevelHeaders:
00020A88                            
00020A88                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020A88                            	dc.l (plc1<<24)+lvlgfx
00020A88                            	dc.l (plc2<<24)+sixteen
00020A88                            	dc.l twofivesix
00020A88                            	dc.b 0, music, pal, pal
00020A88                            	endm
00020A88                            
00020A88                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020A88                            ; music (unused), palette (unused), palette
00020A88                            
00020A88                            ;		1st PLC				2nd PLC				256x256 data			palette
00020A88                            ;				level gfx*			16x16 data			music*
00020A88                            
00020A88 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020A98 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020AA8 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020AB8 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020AC8 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020AD8 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020AE8 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020AF8                            	even
00020AF8                            
00020AF8                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AF8                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AF8                            		include	"_inc\Pattern Load Cues.asm"
00020AF8                            ; ---------------------------------------------------------------------------
00020AF8                            ; Pattern load cues
00020AF8                            ; ---------------------------------------------------------------------------
00020AF8                            ArtLoadCues:
00020AF8                            
00020AF8 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020AFA 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020AFC 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020AFE 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020B00                            PLC_Levels:
00020B00 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020B02 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020B04 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020B06 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020B08 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020B0A 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020B0C 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020B0E 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020B10 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020B12 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020B14 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020B16 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020B18 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020B1A 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020B1C 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020B1E 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020B20 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020B22                            PLC_Animals:
00020B22 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020B24 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020B26 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020B28 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020B2A 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020B2C 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020B2E 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020B30 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020B32 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020B34 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020B36 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020B38 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020B3A                            
00020B3A                            plcm:	macro gfx,vram
00020B3A                            	dc.l gfx
00020B3A                            	dc.w vram
00020B3A                            	endm
00020B3A                            
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A                            ; Pattern load cues - standard block 1
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020B3C 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020B42 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020B48 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020B4E 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020B54 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020B5A                            	PLC_Mainend:
00020B5A                            ; ---------------------------------------------------------------------------
00020B5A                            ; Pattern load cues - standard block 2
00020B5A                            ; ---------------------------------------------------------------------------
00020B5A 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020B5C 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020B62                            	PLC_Main2end:
00020B62                            ; ---------------------------------------------------------------------------
00020B62                            ; Pattern load cues - explosion
00020B62                            ; ---------------------------------------------------------------------------
00020B62 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020B64 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020B6A                            	PLC_Explodeend:
00020B6A                            ; ---------------------------------------------------------------------------
00020B6A                            ; Pattern load cues - game/time	over
00020B6A                            ; ---------------------------------------------------------------------------
00020B6A 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020B6C 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020B72                            	PLC_GameOverend:
00020B72                            ; ---------------------------------------------------------------------------
00020B72                            ; Pattern load cues - Green Hill
00020B72                            ; ---------------------------------------------------------------------------
00020B72 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020B74 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020B7A 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020B80 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020B86 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020B8C 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020B92 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020B98 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020B9E 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020BA4 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020BAA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BB0 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BB6 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BBC                            
00020BBC 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020BBE 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020BC4 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020BCA 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020BD0 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020BD6 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020BDC 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020BE2                            	PLC_GHZ2end:
00020BE2                            ; ---------------------------------------------------------------------------
00020BE2                            ; Pattern load cues - Labyrinth
00020BE2                            ; ---------------------------------------------------------------------------
00020BE2 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020BE4 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020BEA                            		;plcm	Nem_LzBlock1, $3C00	; block
00020BEA                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020BEA                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BEA 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020BF0 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020BF6 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020BFC 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C02 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020C08 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020C0E 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020C14 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020C1A                            
00020C1A 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020C1C 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020C22 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020C28 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020C2E 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020C34 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020C3A 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020C40 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020C46 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C4C 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020C52 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C58 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C5E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C64                            	PLC_LZ2end:
00020C64                            ; ---------------------------------------------------------------------------
00020C64                            ; Pattern load cues - Marble
00020C64                            ; ---------------------------------------------------------------------------
00020C64 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020C66 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020C6C 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020C72 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020C78 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020C7E 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020C84 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020C8A 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C90 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C96 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020C9C 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CA2                            
00020CA2 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020CA4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CAA 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020CB0                            		;plcm	Nem_MzSwitch, $A260	; switch
00020CB0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CB6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CBC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CC2 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020CC8 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CCE                            	PLC_MZ2end:
00020CCE                            ; ---------------------------------------------------------------------------
00020CCE                            ; Pattern load cues - Star Light
00020CCE                            ; ---------------------------------------------------------------------------
00020CCE 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020CD0 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020CD6 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CDC 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020CE2 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CE8 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020CEE 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020CF4 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CFA 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D00 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D06 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D0C                            
00020D0C 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020D0E 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020D14 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020D1A 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020D20 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020D26 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020D2C 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020D32                            	PLC_SLZ2end:
00020D32                            ; ---------------------------------------------------------------------------
00020D32                            ; Pattern load cues - Spring Yard
00020D32                            ; ---------------------------------------------------------------------------
00020D32 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020D34 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020D3A                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D3A                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020D3A 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D40 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D46 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020D4C 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020D52 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020D58 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020D5E                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020D5E                            
00020D5E 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020D60                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020D60 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020D66 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020D6C 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020D72                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020D72 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020D78                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020D78 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D7E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D84 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D8A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D90                            	PLC_SYZ2end:
00020D90                            ; ---------------------------------------------------------------------------
00020D90                            ; Pattern load cues - Scrap Brain
00020D90                            ; ---------------------------------------------------------------------------
00020D90 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020D92 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020D98 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020D9E                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D9E                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020D9E                            		;plcm	Nem_Girder, $5E00	; girder
00020D9E 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020DA4 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020DAA                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020DAA 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020DB0 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020DB6 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020DBC 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020DC2                            
00020DC2 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020DC4                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020DC4 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DCA 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020DD0                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020DD0 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DD6 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020DDC 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020DE2 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020DE8 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020DEE 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DF4 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DFA 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E00                            	PLC_SBZ2end:
00020E00                            ; ---------------------------------------------------------------------------
00020E00                            ; Pattern load cues - title card
00020E00                            ; ---------------------------------------------------------------------------
00020E00 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020E02 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020E08                            	PLC_TitleCardend:
00020E08                            ; ---------------------------------------------------------------------------
00020E08                            ; Pattern load cues - act 3 boss
00020E08                            ; ---------------------------------------------------------------------------
00020E08 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E0A 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E10 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E16 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E1C 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020E22 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020E28 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E2E                            	PLC_Bossend:
00020E2E                            ; ---------------------------------------------------------------------------
00020E2E                            ; Pattern load cues - act 1/2 signpost
00020E2E                            ; ---------------------------------------------------------------------------
00020E2E 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020E30 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020E36 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020E3C 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020E42                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020E42                            	PLC_Signpostend:
00020E42                            ; ---------------------------------------------------------------------------
00020E42                            ; Pattern load cues - beta special stage warp effect
00020E42                            ; ---------------------------------------------------------------------------
00020E42                            PLC_Warp:
00020E42                            	PLC_Warpend:
00020E42                            ; ---------------------------------------------------------------------------
00020E42                            ; Pattern load cues - special stage
00020E42                            ; ---------------------------------------------------------------------------
00020E42 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020E44 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020E4A 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020E50 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020E56 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020E5C 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020E62 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020E68 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020E6E 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020E74 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020E7A 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020E80 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020E86 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020E8C 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020E92 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020E98                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020E98                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020E98                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020E98                            	PLC_SpeStageend:
00020E98                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020E98                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020E98                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020E98                            ; ---------------------------------------------------------------------------
00020E98                            ; Pattern load cues - GHZ animals
00020E98                            ; ---------------------------------------------------------------------------
00020E98 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020E9A 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020EA0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020EA6                            	PLC_GHZAnimalsend:
00020EA6                            ; ---------------------------------------------------------------------------
00020EA6                            ; Pattern load cues - LZ animals
00020EA6                            ; ---------------------------------------------------------------------------
00020EA6 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020EA8 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020EAE 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EB4                            	PLC_LZAnimalsend:
00020EB4                            ; ---------------------------------------------------------------------------
00020EB4                            ; Pattern load cues - MZ animals
00020EB4                            ; ---------------------------------------------------------------------------
00020EB4 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020EB6 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020EBC 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EC2                            	PLC_MZAnimalsend:
00020EC2                            ; ---------------------------------------------------------------------------
00020EC2                            ; Pattern load cues - SLZ animals
00020EC2                            ; ---------------------------------------------------------------------------
00020EC2 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020EC4 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020ECA 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020ED0                            	PLC_SLZAnimalsend:
00020ED0                            ; ---------------------------------------------------------------------------
00020ED0                            ; Pattern load cues - SYZ animals
00020ED0                            ; ---------------------------------------------------------------------------
00020ED0 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020ED2 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020ED8 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EDE                            	PLC_SYZAnimalsend:
00020EDE                            ; ---------------------------------------------------------------------------
00020EDE                            ; Pattern load cues - SBZ animals
00020EDE                            ; ---------------------------------------------------------------------------
00020EDE 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020EE0 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020EE6 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EEC                            	PLC_SBZAnimalsend:
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC                            ; Pattern load cues - special stage results screen
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020EEE 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020EF4 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020EFA                            	PLC_SpeStResultend:
00020EFA                            ; ---------------------------------------------------------------------------
00020EFA                            ; Pattern load cues - ending sequence
00020EFA                            ; ---------------------------------------------------------------------------
00020EFA 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020EFC 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020F02 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020F08 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020F0E                            		;plcm	Nem_EndFlower, $7400	; flowers
00020F0E 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F14 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020F1A 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020F20 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020F26 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020F2C 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020F32 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020F38 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020F3E 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020F44 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020F4A                            	PLC_Endingend:
00020F4A                            ; ---------------------------------------------------------------------------
00020F4A                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020F4A                            ; ---------------------------------------------------------------------------
00020F4A 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020F4C 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F52 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020F58 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020F5E                            	PLC_TryAgainend:
00020F5E                            ; ---------------------------------------------------------------------------
00020F5E                            ; Pattern load cues - Eggman on SBZ 2
00020F5E                            ; ---------------------------------------------------------------------------
00020F5E 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020F60 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020F66 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020F6C 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020F72                            	PLC_EggmanSBZ2end:
00020F72                            ; ---------------------------------------------------------------------------
00020F72                            ; Pattern load cues - final boss
00020F72                            ; ---------------------------------------------------------------------------
00020F72 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020F74 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020F7A 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020F80 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F86 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020F8C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F92                            	PLC_FZBossend:
00020F92                            ; ---------------------------------------------------------------------------
00020F92                            ; Pattern load cues - Eggman
00020F92                            ; ---------------------------------------------------------------------------
00020F92 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F94 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F9A 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020FA0 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020FA6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020FAC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020FB2 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020FB8                            	PLC_Eggend:
00020FB8                            		even
00020FB8                            ; ---------------------------------------------------------------------------
00020FB8                            ; Pattern load cue IDs
00020FB8                            ; ---------------------------------------------------------------------------
00020FB8 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020FB8 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020FB8 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020FB8 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020FB8 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020FB8 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020FB8 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020FB8 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020FB8 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020FB8 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020FB8 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020FB8 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020FB8 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020FB8 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020FB8 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020FB8 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020FB8 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020FB8 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020FB8 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020FB8 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020FB8 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020FB8 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020FB8 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020FB8 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020FB8 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020FB8 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020FB8 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020FB8 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020FB8 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020FB8 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020FB8 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020FB8 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020FB8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FB8 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FB8                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AB6                            		even		
00024AB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024B74                            		even
00024B74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002501C                            		even
0002501C                            
0002501C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            
0002501C                            SME_Lx_Kl:	
0002501C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025020 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025024 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025028 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002502C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025030 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025034 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025038 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002503C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025040 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025044 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025048 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002504C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025050 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025054 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025058 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002505C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025060 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025064 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025068 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002506C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025070 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025074 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025078 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002507C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025080 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025084 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025088 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002508C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025090 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025094 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025098 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002509C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000250A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000250A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000250A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000250AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000250B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000250B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000250B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000250BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000250C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000250C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000250C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000250CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000250D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000250D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000250D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000250DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000250E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000250E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000250E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000250EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000250F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000250F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000250F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000250FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025100 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025104 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025108 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002510C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025110 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025114 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025118 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002511C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025120 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025124 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025128 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002512C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025130 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025134 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025138 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002513C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025140 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025144 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025148 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002514C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025150 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025154 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025158 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002515C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002515E 00                         SME_Lx_Kl_142:	dc.b 0	
0002515F 04                         SME_Lx_Kl_143:	dc.b 4	
00025160 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025165 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002516A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002516F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025174 09                         SME_Lx_Kl_158:	dc.b 9	
00025175 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002517A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002517F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025184 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025189 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002518E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025193 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025198 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002519D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000251A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000251A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000251C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000251CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000251D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000251D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000251D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000251DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000251E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000251EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000251EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000251F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000251F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000251FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000251FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025200 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025205 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002520A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002520B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025210 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025215 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002521A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002521F 02                         SME_Lx_Kl_203:	dc.b 2	
00025220 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025225 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002522A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002522B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025230 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025235 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002523A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002523B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025240 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025245 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002524A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002524B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025250 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025255 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002525A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002525B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025260 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025265 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002526A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002526F 03                         SME_Lx_Kl_253:	dc.b 3	
00025270 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025275 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002527A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002527F 07                         SME_Lx_Kl_263:	dc.b 7	
00025280 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025285 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002528A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002528F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025294 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025299 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002529E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000252A3 05                         SME_Lx_Kl_287:	dc.b 5	
000252A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000252A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000252AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000252B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000252B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000252BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000252BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000252C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000252C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000252C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000252CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000252D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000252D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000252D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000252DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000252E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000252E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000252ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000252EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000252F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000252F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000252F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000252FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025303 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025308 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025309 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002530E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025313 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025318 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002531D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025322 05                         SME_Lx_Kl_306:	dc.b 5	
00025323 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025328 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002532D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025332 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025337 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002533C 06                         SME_Lx_Kl_320:	dc.b 6	
0002533D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025342 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025347 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002534C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025351 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025356 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002535B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002535C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025361 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025366 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002536B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025370 03                         SME_Lx_Kl_354:	dc.b 3	
00025371 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025376 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002537B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025380 05                         SME_Lx_Kl_364:	dc.b 5	
00025381 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025386 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002538B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025390 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025395 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002539A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002539B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000253A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000253A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000253AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000253AF 03                         SME_Lx_Kl_393:	dc.b 3	
000253B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000253B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000253BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000253BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000253C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000253C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000253CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000253CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000253D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000253D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000253DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000253DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000253E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000253E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000253EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000253EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000253F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000253F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000253FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000253FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025404 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025405 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002540A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002540F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025414 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025419 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002541E 04                         SME_Lx_Kl_402:	dc.b 4	
0002541F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025424 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025429 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002542E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025433 02                         SME_Lx_Kl_417:	dc.b 2	
00025434 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025439 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002543E 03                         SME_Lx_Kl_422:	dc.b 3	
0002543F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025444 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025449 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002544E 03                         SME_Lx_Kl_432:	dc.b 3	
0002544F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025454 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025459 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002545E 06                         SME_Lx_Kl_442:	dc.b 6	
0002545F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025464 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025469 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002546E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025473 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025478 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002547D 06                         SME_Lx_Kl_461:	dc.b 6	
0002547E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025483 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025488 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002548D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025492 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025497 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002549C 04                         SME_Lx_Kl_480:	dc.b 4	
0002549D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000254A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000254A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000254AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000254B1 03                         SME_Lx_Kl_495:	dc.b 3	
000254B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000254B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000254BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000254C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000254C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000254CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000254D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000254D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000254DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000254DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000254E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000254EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000254F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000254F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000254F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000254FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025500 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025501 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025506 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002550B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025510 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025515 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002551A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002551B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025520 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025525 02                         SME_Lx_Kl_509:	dc.b 2	
00025526 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002552B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025530 02                         SME_Lx_Kl_514:	dc.b 2	
00025531 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025536 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002553B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002553C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025541 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025546 02                         SME_Lx_Kl_52A:	dc.b 2	
00025547 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002554C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025551 02                         SME_Lx_Kl_535:	dc.b 2	
00025552 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025557 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002555C 02                         SME_Lx_Kl_540:	dc.b 2	
0002555D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025562 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025567 02                         SME_Lx_Kl_54B:	dc.b 2	
00025568 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002556D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025572 04                         SME_Lx_Kl_556:	dc.b 4	
00025573 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025578 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002557D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025582 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025587 03                         SME_Lx_Kl_56B:	dc.b 3	
00025588 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002558D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025592 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025597 03                         SME_Lx_Kl_57B:	dc.b 3	
00025598 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002559D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000255A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000255B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000255CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000255DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000255ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000255F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000255FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025602 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025607 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025608 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002560D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025612 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025613 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025618 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002561D 02                         SME_Lx_Kl_601:	dc.b 2	
0002561E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025623 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025628 02                         SME_Lx_Kl_60C:	dc.b 2	
00025629 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002562E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025633 02                         SME_Lx_Kl_617:	dc.b 2	
00025634 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025639 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002563E 02                         SME_Lx_Kl_622:	dc.b 2	
0002563F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025644 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025649 02                         SME_Lx_Kl_62D:	dc.b 2	
0002564A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002564F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025654 04                         SME_Lx_Kl_638:	dc.b 4	
00025655 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002565A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002565F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025664 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025669 03                         SME_Lx_Kl_64D:	dc.b 3	
0002566A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002566F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025674 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025679 02                         SME_Lx_Kl_65D:	dc.b 2	
0002567A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002567F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025684 03                         SME_Lx_Kl_668:	dc.b 3	
00025685 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002568A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002568F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025694 04                         SME_Lx_Kl_678:	dc.b 4	
00025695 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002569A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002569F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000256AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000256BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000256C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000256D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000256E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000256F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000256FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000256FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025704 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025709 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002570E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025713 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025718 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002571D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025722 09                         SME_Lx_Kl_706:	dc.b 9	
00025723 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025728 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002572D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025732 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025737 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002573C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025741 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025746 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002574B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025750 03                         SME_Lx_Kl_734:	dc.b 3	
00025751 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025756 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002575B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025760 03                         SME_Lx_Kl_744:	dc.b 3	
00025761 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025766 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002576B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025770 03                         SME_Lx_Kl_754:	dc.b 3	
00025771 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025776 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002577B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025780 05                         SME_Lx_Kl_764:	dc.b 5	
00025781 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025786 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002578B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025790 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025795 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002579A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002579B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000257AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000257BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000257C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000257C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000257CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000257D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000257DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000257DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000257E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000257EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000257F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000257F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000257FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025803 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025804 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025809 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002580E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025813 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025818 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025819 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002581E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025823 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025828 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002582D 04                         SME_Lx_Kl_811:	dc.b 4	
0002582E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025833 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025838 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002583D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025842 01                         SME_Lx_Kl_826:	dc.b 1	
00025843 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025848 01                         SME_Lx_Kl_82C:	dc.b 1	
00025849 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002584E 01                         SME_Lx_Kl_832:	dc.b 1	
0002584F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025854 01                         SME_Lx_Kl_838:	dc.b 1	
00025855 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002585A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002585B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025860 01                         SME_Lx_Kl_844:	dc.b 1	
00025861 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025866 01                         SME_Lx_Kl_84A:	dc.b 1	
00025867 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002586C 03                         SME_Lx_Kl_850:	dc.b 3	
0002586D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025872 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025877 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002587C 01                         SME_Lx_Kl_860:	dc.b 1	
0002587D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025882 02                         SME_Lx_Kl_866:	dc.b 2	
00025883 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025888 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002588D 01                         SME_Lx_Kl_871:	dc.b 1	
0002588E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025893 02                         SME_Lx_Kl_877:	dc.b 2	
00025894 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025899 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002589E 01                         SME_Lx_Kl_882:	dc.b 1	
0002589F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258A4 04                         SME_Lx_Kl_888:	dc.b 4	
000258A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000258AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000258B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000258BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000258C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000258C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000258CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000258D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000258D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000258DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000258DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000258E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000258E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000258ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000258F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000258F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000258FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025902 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025907 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025908 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002590D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025912 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025913 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025918 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002591D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025922 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025927 04                         SME_Lx_Kl_90B:	dc.b 4	
00025928 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002592D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025932 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025937 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002593C 04                         SME_Lx_Kl_920:	dc.b 4	
0002593D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025942 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025947 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002594C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025951 09                         SME_Lx_Kl_935:	dc.b 9	
00025952 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025957 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002595C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025961 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025966 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002596B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025970 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025975 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002597A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002597F 03                         SME_Lx_Kl_963:	dc.b 3	
00025980 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025985 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002598A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002598F 03                         SME_Lx_Kl_973:	dc.b 3	
00025990 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025995 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002599A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002599F 02                         SME_Lx_Kl_983:	dc.b 2	
000259A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000259A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000259AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000259AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000259AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000259CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000259D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000259D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000259F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000259F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025A0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025A1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025A2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025A38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025A3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025A3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025A43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025A48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025A49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025A53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025A58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025A59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025A63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025A68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025A69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025A6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025A73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025A78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025A79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025A89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025A8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025A93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025A98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025A9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025A9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025AA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025AA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025AAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025AB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025AB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025ABC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025AC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025AC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025ACC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025ADB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025ADC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025AE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025AF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025AF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025AF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025AFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025B0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025B25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025B30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025B35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025B3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025B3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025B44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025B49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025B4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025B5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025B5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025B64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025B69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025B6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025B73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025B74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025B7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025B84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025B89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025B8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025B8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025B9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025BAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025BB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025BB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025BBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025BBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025BC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025BC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025BCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025BCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025BD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025BD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025BDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025BE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025BE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025BED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025BF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025BF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025BFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025C02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025C21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025C26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025C2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025C30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025C31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025C36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025C3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025C40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025C45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025C4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025C4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025C54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025C55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025C5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025C5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025C60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025C6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025C74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025C75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025C7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025C85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025C8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025C94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025C95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025C9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025C9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025CA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025CA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025CAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025CB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025CB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025CBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025CC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025CC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025CCC                            		even
00025CCC                            		even
00025CCC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025CCC                            ; --------------------------------------------------------------------------------
00025CCC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025CCC                            
00025CCC                            SME_vJmm3:	
00025CCC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025CD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025CD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025CD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025CDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025CE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025CE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025CE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025CEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025CF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025CF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025CF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025CFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025D00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025D04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025D08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025D0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025D10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025D14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025D18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025D1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025D20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025D24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025D28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025D2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025D30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025D34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025D38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025D3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025D40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025D44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025D48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025D4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025D50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025D54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025D58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025D5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025D60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025D64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025D68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025D6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025D70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025D74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025D78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025D7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025D80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025D84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025D88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025D8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025D90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025D94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025D98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025D9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025DA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025DA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025DA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025DAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025DB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025DB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025DB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025DBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025DC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025DC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025DC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025DCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025DD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025DD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025DD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025DDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025DE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025DE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025DE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025DEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025DF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025DF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025DF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025DFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025E00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025E04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025E08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025E0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025E0E 00                         SME_vJmm3_142:	dc.b 0	
00025E0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025E18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025E2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025E40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025E49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025E50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025E57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025E60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025E65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025E6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025E73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025E7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025E83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025E8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025E99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025EA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025EAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025EB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025EBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025EC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025EC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025ED2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025EDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025EEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025EF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025EFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025F05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025F0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025F15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025F20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025F29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025F2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025F33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025F3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025F47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025F4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025F53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025F5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025F67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025F74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025F7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025F84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025F8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025F98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025F9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025FAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025FAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025FB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025FB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025FBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025FC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025FC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025FCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025FD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025FDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025FE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025FE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025FF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025FF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026000 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026007 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002600E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026013 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026018 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002601D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026022 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026027 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002602C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026031 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026036 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002603F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026046 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002604B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026052 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002605B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026062 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026067 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002606E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026075 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002607C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002608F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000260A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000260A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000260B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000260B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000260C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000260C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000260D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000260DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000260E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000260EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000260F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026101 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002610A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002610D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026110 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026113 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026116 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026119 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002611C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002611F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026126 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026129 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002612E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026131 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026136 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026139 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026142 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026151 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002615C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026163 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026168 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026171 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002617A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026183 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026196 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002619D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000261A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000261A9 00                         SME_vJmm3_4DD:	dc.b 0	
000261AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000261BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000261CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000261D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000261DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000261EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026200 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026207 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026210 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026221 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002622A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026233 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002623E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026249 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002624E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026259 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026260 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002626B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026270 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026277 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002627E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026285 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002628A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026291 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000262A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000262B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000262BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000262CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000262D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000262D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000262E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000262E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000262F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000262F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000262F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000262F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000262FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026300 00                         		even
00026300 00                         		even
00026300                            
00026300                            ; ---------------------------------------------------------------------------
00026300                            ; Uncompressed graphics	- Sonic
00026300                            ; ---------------------------------------------------------------------------
00026300                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C900                            		even
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            ; Compressed graphics - various
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CC60                            		even
0003CC60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CFC0                            		even
0003CFC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D320                            		even
0003D320                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D680                            		even
0003D680                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DB00                            		even
0003DB00                            
0003DB00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            ; Sprite mappings - walls of the special stage
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            Map_SSWalls_internal:
0003DB00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DB02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DB04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DB06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DB08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DB0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DB0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DB0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DB10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DB12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DB14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DB16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DB18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DB1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DB1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DB1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DB20 01                         byte_2C584:	dc.b 1
0003DB21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DB26 01                         byte_2C58A:	dc.b 1
0003DB27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DB2C 01                         byte_2C590:	dc.b 1
0003DB2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DB32 01                         byte_2C596:	dc.b 1
0003DB33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DB38 01                         byte_2C59C:	dc.b 1
0003DB39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DB3E 01                         byte_2C5A2:	dc.b 1
0003DB3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DB44 01                         byte_2C5A8:	dc.b 1
0003DB45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DB4A 01                         byte_2C5AE:	dc.b 1
0003DB4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DB50 01                         byte_2C5B4:	dc.b 1
0003DB51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DB56 01                         byte_2C5BA:	dc.b 1
0003DB57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DB5C 01                         byte_2C5C0:	dc.b 1
0003DB5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DB62 01                         byte_2C5C6:	dc.b 1
0003DB63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DB68 01                         byte_2C5CC:	dc.b 1
0003DB69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DB6E 01                         byte_2C5D2:	dc.b 1
0003DB6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DB74 01                         byte_2C5D8:	dc.b 1
0003DB75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DB7A 01                         byte_2C5DE:	dc.b 1
0003DB7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DB80                            		even
0003DB80                            		even
0003DB80                            
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            ; Compressed graphics - special stage
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E4B8                            		even
0003E4B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E5EC                            		even
0003E5EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F27C                            		even
0003F27C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F57C                            		even
0003F57C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FA70                            		even
0003FA70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FB5E                            		even
0003FB5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FC2E                            		even
0003FC2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FD24                            		even
0003FD24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FD82                            		even
0003FD82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FE14                            		even
0003FE14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FED6                            		even
0003FED6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FFA4                            		even
0003FFA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040070                            		even
00040070                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040138                            		even
00040138                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040202                            		even
00040202                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000402D2                            		even
000402D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000404C6                            		even
000404C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004062E                            		even
0004062E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000406DE                            		even
000406DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000407B8                            		even
000407B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004083C                            		even
0004083C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000409BA                            		even
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            ; Compressed graphics - GHZ stuff
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040A1C                            		even
00040A1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040B36                            		even
00040B36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040C54                            		even
00040C54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040C9C                            		even
00040C9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040E3A                            		even
00040E3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040EB6                            		even
00040EB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000410CA                            		even
000410CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000411F6                            		even
000411F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004134A                            		even
0004134A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000413FA                            		even
000413FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004145A                            		even
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            ; Compressed graphics - LZ stuff
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041532                            		even
00041532                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041D26                            		even
00041D26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041EB8 00                         		even
00041EB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042022                            		even
00042022                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042662 00                         		even
00042662                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042704 00                         		even
00042704                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042788                            		even
00042788                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000428E4                            		even
000428E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004296A                            		even
0004296A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042AD8                            		even
00042AD8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042FBA                            		even
00042FBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
0004312A                            		even
0004312A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000433E2                            		even
000433E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043528                            		even
00043528                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043652                            		even
00043652                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000437D8 00                         		even
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            ; Compressed graphics - MZ stuff
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043A66                            		even
00043A66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043B24                            		even
00043B24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043BFC                            		even
00043BFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043C50                            		even
00043C50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043F6E 00                         		even
00043F6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044884                            		even
00044884                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044A1A                            		even
00044A1A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044AA2                            		even
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            ; Compressed graphics - SLZ stuff
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044CDE                            		even
00044CDE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044E24                            		even
00044E24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00045068                            		even
00045068                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00045104 00                         		even
00045104                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000451E6                            		even
000451E6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000453C8                            		even
000453C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000454D4                            		even
000454D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045578                            		even
00045578                            ; ---------------------------------------------------------------------------
00045578                            ; Compressed graphics - SYZ stuff
00045578                            ; ---------------------------------------------------------------------------
00045578                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045708                            		even
00045708                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004576A                            		even
0004576A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004583A 00                         		even
0004583A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045AC8                            		even
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            ; Compressed graphics - SBZ stuff
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045B1C                            		even
00045B1C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045DB8                            		even
00045DB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045FA8                            		even
00045FA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046146                            		even
00046146                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046476                            		even
00046476                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046654                            		even
00046654                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000466AC                            		even
000466AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004685E 00                         		even
0004685E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004695C                            		even
0004695C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046AEA                            		even
00046AEA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046B84                            		even
00046B84                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046BDC                            		even
00046BDC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046CD8                            		even
00046CD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046DEE                            		even
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            ; Compressed graphics - enemies
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047236 00                         		even
00047236                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047726 00                         		even
00047726                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047A0A 00                         		even
00047A0A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047D7E 00                         		even
00047D7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047F66                            		even
00047F66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048694 00                         		even
00048694                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004891C 00                         		even
0004891C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048BB8 00                         		even
00048BB8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0004918C                            		even
0004918C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004941E                            		even
0004941E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049A68 00                         		even
00049A68                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049EA4                            		even
00049EA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A1B2 00                         		even
0004A1B2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A412                            		even
0004A412                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A710                            		even
0004A710                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A93C 00                         		even
0004A93C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AACA                            		even
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            ; Compressed graphics - various
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B118 00                         		even
0004B118                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B290 00                         		even
0004B290                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B3B4                            		even
0004B3B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B508 00                         		even
0004B508                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B9B2                            		even
0004B9B2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C026                            		even
0004C026                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C0C0 00                         		even
0004C0C0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C252                            		even
0004C252                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C370 00                         		even
0004C370                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C45C                            		even
0004C45C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C9D4 00                         		even
0004C9D4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CABE                            		even
0004CABE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CC32                            		even
0004CC32                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CFBA 00                         		even
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            ; Compressed graphics - continue screen
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D26A                            		even
0004D26A                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D4A4                            		even
0004D4A4                            ; ---------------------------------------------------------------------------
0004D4A4                            ; Compressed graphics - animals
0004D4A4                            ; ---------------------------------------------------------------------------
0004D4A4                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D5FC                            		even
0004D5FC                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D758                            		even
0004D758                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D8D4                            		even
0004D8D4                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D9F0                            		even
0004D9F0                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DB6A                            		even
0004DB6A                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DCA4                            		even
0004DCA4                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DE00                            		even
0004DE00                            ; ---------------------------------------------------------------------------
0004DE00                            ; Compressed graphics - primary patterns and block mappings
0004DE00                            ; ---------------------------------------------------------------------------
0004DE00                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E802                            		even
0004E802                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000500AA                            		even
000500AA                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005163A                            		even
0005163A                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053A24                            		even
00053A24                            Blk16_TS:	incbin	"map16\TS.bin"
00053CA8                            		even
00053CA8                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054DE6                            		even
00054DE6                            Blk256_TS:	incbin	"map256\TS.bin"
00055994                            		even
00055994                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056C10                            		even
00056C10                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A0E2                            		even
0005A0E2                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D5A0                            		even
0005D5A0                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DD8E                            		even
0005DD8E                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00060826                            		even
00060826                            		incbin	"map256\MZ (JP1).bin"
000627D0                            		even
000627D0                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062E52                            		even
00062E52                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
000668BC                            		even
000668BC                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068CC6                            		even
00068CC6                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0006984C                            		even
0006984C                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CC3C                            		even
0006CC3C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DFEC                            		even
0006DFEC                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EBE6                            		even
0006EBE6                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071428                            		even
00071428                            		incbin	"map256\SBZ (JP1).bin"
00071FB4                            		even
00071FB4                            ; ---------------------------------------------------------------------------
00071FB4                            ; Compressed graphics - bosses and ending sequence
00071FB4                            ; ---------------------------------------------------------------------------
00071FB4                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00072830 00                         		even
00072830                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072B1A                            		even
00072B1A                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007339E                            		even
0007339E                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073BCA                            		even
00073BCA                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074398 00                         		even
00074398                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074918                            		even
00074918                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074A38                            		even
00074A38                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074C40 00                         		even
00074C40                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075E1E                            		even
00075E1E                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076762                            		even
00076762                            		even
00076762                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076CF2                            		even
00076CF2                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076F7A                            		even
00076F7A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077578                            		even
00077578                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077800                            		even
00077800                            
00077800 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00077840                            ; ---------------------------------------------------------------------------
00077840                            ; Collision data
00077840                            ; ---------------------------------------------------------------------------
00077840                            AngleMap:	incbin	"collide\Angle Map.bin"
00077940                            		even
00077940                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00078940                            		even
00078940                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00079940                            		even
00079940                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079AFE 00                         		even
00079AFE                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079DBC                            		even
00079DBC                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079F36 00                         		even
00079F36                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A12A                            		even
0007A12A                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A316 00                         		even
0007A316                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A4E6 00                         		even
0007A4E6                            ; ---------------------------------------------------------------------------
0007A4E6                            ; Special Stage layouts
0007A4E6                            ; ---------------------------------------------------------------------------
0007A4E6                            SS_1:		incbin	"sslayout\1.bin"
0007A760                            		even
0007A760                            SS_2:		incbin	"sslayout\2.bin"
0007AB72                            		even
0007AB72                            SS_3:		incbin	"sslayout\3.bin"
0007AECE                            		even
0007AECE                            SS_4:		incbin	"sslayout\4.bin"
0007B3A8                            		even
0007B3A8                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B858                            			even
0007B858                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BB4A                            		even
0007BB4A                            ; ---------------------------------------------------------------------------
0007BB4A                            ; Animated uncompressed graphics
0007BB4A                            ; ---------------------------------------------------------------------------
0007BB4A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BD4A                            		even
0007BD4A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C14A                            		even
0007C14A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C5CA                            		even
0007C5CA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C8CA                            		even
0007C8CA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CECA                            		even
0007CECA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D1CA                            		even
0007D1CA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DC4A                            		even
0007DC4A                            
0007DC4A                            ; ---------------------------------------------------------------------------
0007DC4A                            ; Level	layout index
0007DC4A                            ; ---------------------------------------------------------------------------
0007DC4A                            Level_Index:
0007DC4A                            		; GHZ
0007DC4A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DC50 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DC56 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DC5C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DC62                            		; LZ
0007DC62 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DC68 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DC6E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DC74 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DC7A                            		; MZ
0007DC7A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DC80 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DC86 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DC8C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DC92                            		; SLZ
0007DC92 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC98 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC9E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DCA4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DCAA                            		; SYZ
0007DCAA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DCB0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DCB6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DCBC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DCC2                            		; SBZ
0007DCC2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DCC8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DCCE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DCD4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DCDA                            		; Ending
0007DCDA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DCE0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DCE6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DCEC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DCF2                            
0007DCF2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DF24                            		even
0007DF24 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DF28                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007E04A                            		even
0007E04A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007E04E                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E2D0                            		even
0007E2D0                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E312                            		even
0007E312 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E316 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E31A                            
0007E31A                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E3DC                            		even
0007E3DC                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E4DE                            		even
0007E4DE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E4E2                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E57C                            		even
0007E57C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E580                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E69A                            		even
0007E69A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E69E                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E758                            		even
0007E758 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E75C                            
0007E75C                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E84E                            		even
0007E84E                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E970                            		even
0007E970                            Level_MZ2:	incbin	"levels\mz2.bin"
0007EA62                            		even
0007EA62                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007EB84                            		even
0007EB84 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007EB88                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EBFA                            		even
0007EBFA                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007ED1C                            		even
0007ED1C 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007ED20 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007ED24                            
0007ED24                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EE36                            		even
0007EE36                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EEB0                            		even
0007EEB0                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EFA0                            		even
0007EFA0                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007F0BA                            		even
0007F0BA 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F0BE                            
0007F0BE                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F1C2                            		even
0007F1C2                            		incbin	"levels\syzbg (JP1).bin"
0007F1FC                            		even
0007F1FC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F200                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F304                            		even
0007F304 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F308                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F462 00                         		even
0007F462 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F466 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F46A                            
0007F46A                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F58C                            		even
0007F58C                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F5CA                            		even
0007F5CA                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F70C                            		even
0007F70C                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F876                            		even
0007F876 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F87A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F87E                            Level_End:	incbin	"levels\ending.bin"
0007F8AE 00                         		even
0007F8AE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F8B2                            
0007F8B2                            
0007F8B2                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000804F2                            		even
000804F2                            
00080500                            
00080500                            ; ---------------------------------------------------------------------------
00080500                            ; Sprite locations index
00080500                            ; ---------------------------------------------------------------------------
00080500                            ObjPos_Index:
00080500                            		; GHZ
00080500 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080504 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080508 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008050C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080510                            		; LZ
00080510 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080514 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080518 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008051C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080520                            		; MZ
00080520 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080524 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080528 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008052C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080530                            		; SLZ
00080530 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080534 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080538 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008053C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080540                            		; SYZ
00080540 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080544 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080548 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008054C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080550                            		; SBZ
00080550 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080554 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080558 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008055C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080560                            		; Ending
00080560 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080564 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080568 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008056C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080570                            		; --- Put extra object data here. ---
00080570                            ObjPosLZPlatform_Index:
00080570 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080574 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080578 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008057C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080580                            ObjPosSBZPlatform_Index:
00080580 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080584 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080588 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008058C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080590 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080596                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080BF6                            		even
00080BF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00081046                            		even
00081046                            		incbin	"objpos\ghz3 (JP1).bin"
00081256                            		even
00081256                            		incbin	"objpos\lz1 (JP1).bin"
0008128C                            		even
0008128C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000815CE                            		even
000815CE                            		incbin	"objpos\lz3 (JP1).bin"
00081B92                            		even
00081B92                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082222                            		even
00082222                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082254                            		even
00082254                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00082286                            		even
00082286                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000822B8                            		even
000822B8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000822EA                            		even
000822EA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082334                            		even
00082334                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082372                            		even
00082372                            		incbin	"objpos\mz1 (JP1).bin"
00082954                            		even
00082954                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082D32                            		even
00082D32                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082F84                            		even
00082F84                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000834B8                            		even
000834B8                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083926                            		even
00083926                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083F08                            		even
00083F08                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083F62                            		even
00083F62                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083F8C                            		even
00083F8C                            		incbin	"objpos\syz3 (JP1).bin"
00083FBC                            		even
00083FBC                            		incbin	"objpos\sbz1 (JP1).bin"
00084004                            		even
00084004                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
0008402E                            		even
0008402E                            ObjPos_FZ:	incbin	"objpos\fz.bin"
0008406A                            		even
0008406A                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
0008409C                            		even
0008409C                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000840CE                            		even
000840CE                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084100                            		even
00084100                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084132                            		even
00084132                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00084164                            		even
00084164                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
0008419C                            		even
0008419C                            ObjPos_End:	incbin	"objpos\ending.bin"
000842F8                            		even
000842F8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000842FE                            
000842FE                            		dcb.b $63C,$FF
0008493A                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0008493A                            
0008493A                            SoundDriver:	include "s1.sounddriver.asm"
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Modified (early?) SMPS 68k Type 1b
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Go_SoundTypes:
0008493A 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0008493E                            ; Go_SoundD0:
0008493E 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084942 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084946 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0008494A                            ; off_719A0:
0008494A 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0008494E 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084952                            ; ---------------------------------------------------------------------------
00084952                            ; PSG instruments used in music
00084952                            ; ---------------------------------------------------------------------------
00084952                            PSG_Index:
00084952 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0008495E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008496A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084976                            PSG1:		incbin	"sound/psg/psg1.bin"
0008498D                            PSG2:		incbin	"sound/psg/psg2.bin"
00084994                            PSG3:		incbin	"sound/psg/psg3.bin"
000849A5                            PSG4:		incbin	"sound/psg/psg4.bin"
000849B0                            PSG6:		incbin	"sound/psg/psg6.bin"
000849BF                            PSG5:		incbin	"sound/psg/psg5.bin"
000849E9                            PSG7:		incbin	"sound/psg/psg7.bin"
00084A05                            PSG8:		incbin	"sound/psg/psg8.bin"
00084A2D                            PSG9:		incbin	"sound/psg/psg9.bin"
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            ; New tempos for songs during speed shoes
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084A3E                            ; tempos while speed shoes are active. If you don't want that, you should add
00084A3E                            ; their "correct" sped-up main tempos to the list.
00084A3E                            ; byte_71A94:
00084A3E                            SpeedUpIndex:
00084A3E 07                         		dc.b 7		; GHZ
00084A3F 72                         		dc.b $72	; LZ
00084A40 73                         		dc.b $73	; MZ
00084A41 26                         		dc.b $26	; SLZ
00084A42 15                         		dc.b $15	; SYZ
00084A43 08                         		dc.b 8		; SBZ
00084A44 FF                         		dc.b $FF	; Invincibility
00084A45 05                         		dc.b 5		; Extra Life
00084A46                            		;dc.b ?		; Special Stage
00084A46                            		;dc.b ?		; Title Screen
00084A46                            		;dc.b ?		; Ending
00084A46                            		;dc.b ?		; Boss
00084A46                            		;dc.b ?		; FZ
00084A46                            		;dc.b ?		; Sonic Got Through
00084A46                            		;dc.b ?		; Game Over
00084A46                            		;dc.b ?		; Continue Screen
00084A46                            		;dc.b ?		; Credits
00084A46                            		;dc.b ?		; Drowning
00084A46                            		;dc.b ?		; Get Emerald
00084A46                            
00084A46                            ; ---------------------------------------------------------------------------
00084A46                            ; Music	Pointers
00084A46                            ; ---------------------------------------------------------------------------
00084A46                            MusicIndex:
00084A46 0000 0000                  ptr_mus81:	dc.l Music81
00084A4A 0000 0000                  ptr_mus82:	dc.l Music82
00084A4E 0000 0000                  ptr_mus83:	dc.l Music83
00084A52 0000 0000                  ptr_mus84:	dc.l Music84
00084A56 0000 0000                  ptr_mus85:	dc.l Music85
00084A5A 0000 0000                  ptr_mus86:	dc.l Music86
00084A5E 0000 0000                  ptr_mus87:	dc.l Music87
00084A62 0000 0000                  ptr_mus88:	dc.l Music88
00084A66 0000 0000                  ptr_mus89:	dc.l Music89
00084A6A 0000 0000                  ptr_mus8A:	dc.l Music8A
00084A6E 0000 0000                  ptr_mus8B:	dc.l Music8B
00084A72 0000 0000                  ptr_mus8C:	dc.l Music8C
00084A76 0000 0000                  ptr_mus8D:	dc.l Music8D
00084A7A 0000 0000                  ptr_mus8E:	dc.l Music8E
00084A7E 0000 0000                  ptr_mus8F:	dc.l Music8F
00084A82 0000 0000                  ptr_mus90:	dc.l Music90
00084A86 0000 0000                  ptr_mus91:	dc.l Music91
00084A8A 0000 0000                  ptr_mus92:	dc.l Music92
00084A8E 0000 0000                  ptr_mus93:	dc.l Music93
00084A92 0000 0000                  ptr_mus94:	dc.l Music94
00084A96 0000 0000                  ptr_mus95:	dc.l Music95
00084A9A 0000 0000                  ptr_mus96:	dc.l Music96
00084A9E 0000 0000                  ptr_mus97:	dc.l Music97
00084AA2 0000 0000                  ptr_mus98:	dc.l Music98
00084AA6                            ptr_musend
00084AA6                            ; ---------------------------------------------------------------------------
00084AA6                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084AA6                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084AA6                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084AA6                            ; any music or SFX can override it (as long as it can override whatever was
00084AA6                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084AA6                            ; will only override special SFX and music will only override music.
00084AA6                            ; ---------------------------------------------------------------------------
00084AA6                            ; SoundTypes:
00084AA6                            SoundPriorities:
00084AA6 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084AB5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084AC5 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084AD5 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084AE5 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084AF5 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084B05 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084B0A                            
00084B0A                            ; ---------------------------------------------------------------------------
00084B0A                            ; Subroutine to update music more than once per frame
00084B0A                            ; (Called by horizontal & vert. interrupts)
00084B0A                            ; ---------------------------------------------------------------------------
00084B0A                            
00084B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B0A                            
00084B0A                            ; sub_71B4C:
00084B0A                            UpdateMusic:
00084B0A 33FC 0100 00A1 1100        		stopZ80
00084B12 4E71                       		nop	
00084B14 4E71                       		nop	
00084B16 4E71                       		nop	
00084B18                            ; loc_71B5A:
00084B18                            @updateloop:
00084B18 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084B20 66F6                       		bne.s	@updateloop			; If so, wait
00084B22                            
00084B22 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084B2A 6700                       		beq.s	@driverinput			; Branch if yes
00084B2C 33FC 0000 00A1 1100        		startZ80
00084B34 4E71                       		nop	
00084B36 4E71                       		nop	
00084B38 4E71                       		nop	
00084B3A 4E71                       		nop	
00084B3C 4E71                       		nop	
00084B3E 60CA                       		bra.s	UpdateMusic
00084B40                            ; ===========================================================================
00084B40                            ; loc_71B82:
00084B40                            @driverinput:
00084B40 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084B46 422E 000E                  		clr.b	f_voice_selector(a6)
00084B4A 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084B4E 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084B52 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084B56 6600                       		bne.s	@skipdelay
00084B58 4EBA 0000                  		jsr	TempoWait(pc)
00084B5C                            ; loc_71B9E:
00084B5C                            @skipdelay:
00084B5C 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084B60 6700                       		beq.s	@skipfadeout
00084B62 4EBA 0000                  		jsr	DoFadeOut(pc)
00084B66                            ; loc_71BA8:
00084B66                            @skipfadeout:
00084B66 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084B6A 6700                       		beq.s	@skipfadein
00084B6C 4EBA 0000                  		jsr	DoFadeIn(pc)
00084B70                            ; loc_71BB2:
00084B70                            @skipfadein:
00084B70                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084B70 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084B74 6700                       		beq.s	@nosndinput		; if not, branch
00084B76 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084B7A                            ; loc_71BBC:
00084B7A                            @nosndinput:
00084B7A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084B80 6700                       		beq.s	@nonewsound		; If yes, branch
00084B82 4EBA 0000                  		jsr	PlaySoundID(pc)
00084B86                            ; loc_71BC8:
00084B86                            @nonewsound:
00084B86 4A38 C901                  		tst.b	($FFFFC901).w
00084B8A 6700                       		beq.s	@cont
00084B8C 5338 C901                  		subq.b	#1,($FFFFC901).w
00084B90                            		
00084B90                            @cont:
00084B90 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084B94 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084B96 6A00                       		bpl.s	@dacdone		; Branch if not
00084B98 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084B9C                            ; loc_71BD4:
00084B9C                            @dacdone:
00084B9C 422E 0008                  		clr.b	f_updating_dac(a6)
00084BA0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084BA2                            ; loc_71BDA:
00084BA2                            @bgmfmloop:
00084BA2 DAFC 0030                  		adda.w	#TrackSz,a5
00084BA6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BA8 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084BAA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084BAE                            ; loc_71BE6:
00084BAE                            @bgmfmnext:
00084BAE 51CF FFF2                  		dbf	d7,@bgmfmloop
00084BB2                            
00084BB2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084BB4                            ; loc_71BEC:
00084BB4                            @bgmpsgloop:
00084BB4 DAFC 0030                  		adda.w	#TrackSz,a5
00084BB8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BBA 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084BBC 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084BC0                            ; loc_71BF8:
00084BC0                            @bgmpsgnext:
00084BC0 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084BC4                            
00084BC4 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084BCA 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084BCC                            ; loc_71C04:
00084BCC                            @sfxfmloop:
00084BCC DAFC 0030                  		adda.w	#TrackSz,a5
00084BD0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BD2 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084BD4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084BD8                            ; loc_71C10:
00084BD8                            @sfxfmnext:
00084BD8 51CF FFF2                  		dbf	d7,@sfxfmloop
00084BDC                            
00084BDC 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084BDE                            ; loc_71C16:
00084BDE                            @sfxpsgloop:
00084BDE DAFC 0030                  		adda.w	#TrackSz,a5
00084BE2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BE4 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084BE6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084BEA                            ; loc_71C22:
00084BEA                            @sfxpsgnext:
00084BEA 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084BEE                            		
00084BEE 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084BF4 DAFC 0030                  		adda.w	#TrackSz,a5
00084BF8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BFA 6A00                       		bpl.s	@specfmdone		; Branch if not
00084BFC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084C00                            ; loc_71C38:
00084C00                            @specfmdone:
00084C00 DAFC 0030                  		adda.w	#TrackSz,a5
00084C04 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084C06 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084C08 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084C0C                            ; loc_71C44:
00084C0C                            DoStartZ80:
00084C0C 33FC 0000 00A1 1100        		startZ80
00084C14 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084C1A 6700                       		beq.s @end ; if not, branch
00084C1C 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084C22 6600                       		bne.s @end ; if not, branch
00084C24 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084C2A 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084C2E                            
00084C2E                            	@end:
00084C2E 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084C32 4E75                       		rts
00084C34                            ; End of function UpdateMusic
00084C34                            
00084C34                            
00084C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C34                            
00084C34                            ; sub_71C4E: UpdateDAC:
00084C34                            DACUpdateTrack:
00084C34 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084C38 6600                       		bne.s	@locret				; Return if not
00084C3A 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084C40                            ;DACDoNext:
00084C40 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084C44                            ; loc_71C5E:
00084C44                            @sampleloop:
00084C44 7A00                       		moveq	#0,d5
00084C46 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084C48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084C4C 6500                       		blo.s	@notcoord	; Branch if not
00084C4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084C52 60F0                       		bra.s	@sampleloop
00084C54                            ; ===========================================================================
00084C54                            ; loc_71C6E:
00084C54                            @notcoord:
00084C54 4A05                       		tst.b	d5			; Is it a sample?
00084C56 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084C58 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084C5C 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084C5E 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084C60 534C                       		subq.w	#1,a4			; Put byte back
00084C62 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084C68 6000                       		bra.s	@gotsampleduration
00084C6A                            ; ===========================================================================
00084C6A                            ; loc_71C84:
00084C6A                            @gotduration:
00084C6A 4EBA 0000                  		jsr	SetDuration(pc)
00084C6E                            ; loc_71C88:
00084C6E                            @gotsampleduration:
00084C6E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084C72 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C76 6600                       		bne.s	@locret			; Return if yes
00084C78 7000                       		moveq	#0,d0
00084C7A 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084C7E 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084C82 6700                       		beq.s	@locret			; Return if yes
00084C84 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084C88 6600                       		bne.s	@timpani		; Various timpani
00084C8A 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084C90                            ; locret_71CAA:
00084C90                            @locret:
00084C90 4E75                       		rts	
00084C92                            ; ===========================================================================
00084C92                            ; loc_71CAC:
00084C92                            @timpani:
00084C92 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084C96 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084C9A                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084C9A                            		; use this value from then on.
00084C9A 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084CA0 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084CA8 4E75                       		rts	
00084CAA                            ; End of function DACUpdateTrack
00084CAA                            
00084CAA                            ; ===========================================================================
00084CAA                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084CAA                            ; Also, $8C-$8D are so slow you may want to skip them.
00084CAA                            ; byte_71CC4:
00084CAA 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084CB0                            
00084CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CB0                            
00084CB0                            ; sub_71CCA:
00084CB0                            FMUpdateTrack:
00084CB0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084CB4 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084CB6 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084CBA 4EBA 0000                  		jsr	FMDoNext(pc)
00084CBE 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084CC2 6000 0000                  		bra.w	FMNoteOn
00084CC6                            ; ===========================================================================
00084CC6                            ; loc_71CE0:
00084CC6                            @notegoing:
00084CC6 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084CCA 4EBA 0000                  		jsr	DoModulation(pc)
00084CCE 6000 0000                  		bra.w	FMUpdateFreq
00084CD2                            ; End of function FMUpdateTrack
00084CD2                            
00084CD2                            
00084CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CD2                            
00084CD2                            ; sub_71CEC:
00084CD2                            FMDoNext:
00084CD2 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084CD6 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084CDA                            ; loc_71CF4:
00084CDA                            @noteloop:
00084CDA 7A00                       		moveq	#0,d5
00084CDC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084CDE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084CE2 6500                       		blo.s	@gotnote	; Branch if not
00084CE4 4EBA 0000                  		jsr	CoordFlag(pc)
00084CE8 60F0                       		bra.s	@noteloop
00084CEA                            ; ===========================================================================
00084CEA                            ; loc_71D04:
00084CEA                            @gotnote:
00084CEA 4EBA 0000                  		jsr	FMNoteOff(pc)
00084CEE 4A05                       		tst.b	d5		; Is this a note?
00084CF0 6A00                       		bpl.s	@gotduration	; Branch if not
00084CF2 4EBA 0000                  		jsr	FMSetFreq(pc)
00084CF6 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084CF8 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084CFA 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084CFC 6000 0000                  		bra.w	FinishTrackUpdate
00084D00                            ; ===========================================================================
00084D00                            ; loc_71D1A:
00084D00                            @gotduration:
00084D00 4EBA 0000                  		jsr	SetDuration(pc)
00084D04 6000 0000                  		bra.w	FinishTrackUpdate
00084D08                            ; End of function FMDoNext
00084D08                            
00084D08                            
00084D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D08                            
00084D08                            ; sub_71D22:
00084D08                            FMSetFreq:
00084D08 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084D0C 6700                       		beq.s	TrackSetRest
00084D0E DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084D12 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084D16 E34D                       		lsl.w	#1,d5
00084D18 41FA 0000                  		lea	FMFrequencies(pc),a0
00084D1C 3C30 5000                  		move.w	(a0,d5.w),d6
00084D20 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084D24 4E75                       		rts	
00084D26                            ; End of function FMSetFreq
00084D26                            
00084D26                            
00084D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D26                            
00084D26                            ; sub_71D40:
00084D26                            SetDuration:
00084D26 1005                       		move.b	d5,d0
00084D28 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084D2C                            ; loc_71D46:
00084D2C                            @multloop:
00084D2C 5301                       		subq.b	#1,d1
00084D2E 6700                       		beq.s	@donemult
00084D30 D005                       		add.b	d5,d0
00084D32 60F8                       		bra.s	@multloop
00084D34                            ; ===========================================================================
00084D34                            ; loc_71D4E:
00084D34                            @donemult:
00084D34 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084D38 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084D3C 4E75                       		rts	
00084D3E                            ; End of function SetDuration
00084D3E                            
00084D3E                            ; ===========================================================================
00084D3E                            ; loc_71D58:
00084D3E                            TrackSetRest:
00084D3E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084D42 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084D46                            
00084D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D46                            
00084D46                            ; sub_71D60:
00084D46                            FinishTrackUpdate:
00084D46 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084D4A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084D50 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084D54 6600                       		bne.s	@locret				; If so, branch
00084D56 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084D5C 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084D60 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084D64 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084D66 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084D6A 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084D6E 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084D72 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084D76 1018                       		move.b	(a0)+,d0			; Get steps
00084D78 E208                       		lsr.b	#1,d0				; Halve them
00084D7A 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084D7E 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084D82                            ; locret_71D9C:
00084D82                            @locret:
00084D82 4E75                       		rts	
00084D84                            ; End of function FinishTrackUpdate
00084D84                            
00084D84                            
00084D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D84                            
00084D84                            ; sub_71D9E: NoteFillUpdate
00084D84                            NoteTimeoutUpdate:
00084D84 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084D88 6700                       		beq.s	@locret
00084D8A 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084D8E 6600                       		bne.s	@locret				; Return if it hasn't expired
00084D90 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084D94 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084D98 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084D9C 4EBA 0000                  		jsr	FMNoteOff(pc)
00084DA0 584F                       		addq.w	#4,sp				; Do not return to caller
00084DA2 4E75                       		rts	
00084DA4                            ; ===========================================================================
00084DA4                            ; loc_71DBE:
00084DA4                            @psgnoteoff:
00084DA4 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084DA8 584F                       		addq.w	#4,sp		; Do not return to caller
00084DAA                            ; locret_71DC4:
00084DAA                            @locret:
00084DAA 4E75                       		rts	
00084DAC                            ; End of function NoteTimeoutUpdate
00084DAC                            
00084DAC                            
00084DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DAC                            
00084DAC                            ; sub_71DC6:
00084DAC                            DoModulation:
00084DAC 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084DAE 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084DB2 6700                       		beq.s	@locret				; Return if not
00084DB4 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084DB8 6700                       		beq.s	@waitdone			; If yes, branch
00084DBA 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084DBE 4E75                       		rts	
00084DC0                            ; ===========================================================================
00084DC0                            ; loc_71DDA:
00084DC0                            @waitdone:
00084DC0 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084DC4 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084DC6 4E75                       		rts	
00084DC8                            ; ===========================================================================
00084DC8                            ; loc_71DE2:
00084DC8                            @updatemodulation:
00084DC8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084DCC 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084DD2 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084DD6 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084DD8 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084DDE 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084DE2 4E75                       		rts	
00084DE4                            ; ===========================================================================
00084DE4                            ; loc_71DFE:
00084DE4                            @calcfreq:
00084DE4 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084DE8 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084DEC 4886                       		ext.w	d6
00084DEE DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084DF2 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084DF6 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084DFA 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084DFC                            ; locret_71E16:
00084DFC                            @locret:
00084DFC 4E75                       		rts	
00084DFE                            ; End of function DoModulation
00084DFE                            
00084DFE                            
00084DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DFE                            
00084DFE                            ; sub_71E18:
00084DFE                            FMPrepareNote:
00084DFE 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084E02 6600                       		bne.s	locret_71E48		; Return if so
00084E04 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084E08 6700                       		beq.s	FMSetRest		; Branch if zero
00084E0A                            ; loc_71E24:
00084E0A                            FMUpdateFreq:
00084E0A 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084E0E 4880                       		ext.w	d0
00084E10 DC40                       		add.w	d0,d6			; Add note frequency
00084E12 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084E16 6600                       		bne.s	locret_71E48		; Return if so
00084E18 3206                       		move.w	d6,d1
00084E1A E049                       		lsr.w	#8,d1
00084E1C 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084E20 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084E24 1206                       		move.b	d6,d1
00084E26 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084E2A 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084E2E                            ; locret_71E48:
00084E2E                            locret_71E48:
00084E2E 4E75                       		rts	
00084E30                            ; ===========================================================================
00084E30                            ; loc_71E4A:
00084E30                            FMSetRest:
00084E30 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084E34 4E75                       		rts	
00084E36                            ; End of function FMPrepareNote
00084E36                            
00084E36                            ; ===========================================================================
00084E36                            ; loc_71E50:
00084E36                            PauseMusic:
00084E36 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084E38 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084E3E 6700 0000                  		beq.w	@unpausedallfm
00084E42 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084E48 7602                       		moveq	#2,d3
00084E4A 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084E4E 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084E50                            ; loc_71E6A:
00084E50                            @killpanloop:
00084E50 4EBA 0000                  		jsr	WriteFMI(pc)
00084E54 4EBA 0000                  		jsr	WriteFMII(pc)
00084E58 5200                       		addq.b	#1,d0
00084E5A 51CB FFF4                  		dbf	d3,@killpanloop
00084E5E                            
00084E5E 7602                       		moveq	#2,d3
00084E60 7028                       		moveq	#$28,d0		; Key on/off register
00084E62                            ; loc_71E7C:
00084E62                            @noteoffloop:
00084E62 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084E64 4EBA 0000                  		jsr	WriteFMI(pc)
00084E68 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084E6A 4EBA 0000                  		jsr	WriteFMI(pc)
00084E6E 51CB FFF2                  		dbf	d3,@noteoffloop
00084E72                            
00084E72 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084E76 6000 FD94                  		bra.w	DoStartZ80
00084E7A                            ; ===========================================================================
00084E7A                            ; loc_71E94:
00084E7A                            @unpausemusic:
00084E7A 422E 0003                  		clr.b	f_pausemusic(a6)
00084E7E 7630                       		moveq	#TrackSz,d3
00084E80 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084E84 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084E86                            ; loc_71EA0:
00084E86                            @bgmfmloop:
00084E86 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084E8A 6700                       		beq.s	@bgmfmnext		; Branch if not
00084E8C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084E90 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084E92 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084E96 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084E9A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084E9E                            ; loc_71EB8:
00084E9E                            @bgmfmnext:
00084E9E DAC3                       		adda.w	d3,a5
00084EA0 51CC FFE4                  		dbf	d4,@bgmfmloop
00084EA4                            
00084EA4 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084EA8 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084EAA                            ; loc_71EC4:
00084EAA                            @sfxfmloop:
00084EAA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084EAE 6700                       		beq.s	@sfxfmnext		; Branch if not
00084EB0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084EB4 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084EB6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084EBA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084EBE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084EC2                            ; loc_71EDC:
00084EC2                            @sfxfmnext:
00084EC2 DAC3                       		adda.w	d3,a5
00084EC4 51CC FFE4                  		dbf	d4,@sfxfmloop
00084EC8                            
00084EC8 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084ECC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084ED0 6700                       		beq.s	@unpausedallfm		; Branch if not
00084ED2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084ED6 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084ED8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084EDC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084EE0 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084EE4                            ; loc_71EFE:
00084EE4                            @unpausedallfm:
00084EE4 6000 FD26                  		bra.w	DoStartZ80
00084EE8                            
00084EE8                            ; ---------------------------------------------------------------------------
00084EE8                            ; Subroutine to	play a sound or	music track
00084EE8                            ; ---------------------------------------------------------------------------
00084EE8                            
00084EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EE8                            
00084EE8                            ; Sound_Play:
00084EE8                            CycleSoundQueue:
00084EE8 2079 0008 493A             		movea.l	(Go_SoundPriorities).l,a0
00084EEE 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084EF2 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084EF4 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084EF6                            ; loc_71F12:
00084EF6                            @inputloop:
00084EF6 1011                       		move.b	(a1),d0			; move track number to d0
00084EF8 1200                       		move.b	d0,d1
00084EFA 4219                       		clr.b	(a1)+			; Clear entry
00084EFC 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084F00 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084F02 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084F08 6700                       		beq.s	@havesound		; If yes, branch
00084F0A 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084F0E 6000                       		bra.s	@nextinput
00084F10                            ; ===========================================================================
00084F10                            ; loc_71F2C:
00084F10                            @havesound:
00084F10 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084F14 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084F18 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084F1A 6500                       		blo.s	@nextinput		; Branch if yes
00084F1C 1602                       		move.b	d2,d3			; Store new priority
00084F1E 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084F22                            ; loc_71F3E:
00084F22                            @nextinput:
00084F22 51CC FFD2                  		dbf	d4,@inputloop
00084F26                            
00084F26 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084F28 6B00                       		bmi.s	@locret
00084F2A 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084F2C                            ; locret_71F4A:
00084F2C                            @locret:
00084F2C 4E75                       		rts	
00084F2E                            ; End of function CycleSoundQueue
00084F2E                            
00084F2E                            
00084F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F2E                            
00084F2E                            ; Sound_ChkValue:
00084F2E                            PlaySoundID:
00084F2E 7E00                       		moveq	#0,d7
00084F30 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084F34 6700 0000                  		beq.w	StopAllSound
00084F38 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084F3A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084F40                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084F40                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084F40                            		; See LevSel_NoCheat for more.
00084F40 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084F44 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084F48 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084F4C 6500 0000                  		blo.w	@locret			; Return if yes
00084F50 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084F54 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084F58 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084F5C 6500 0000                  		blo.w	@locret			; Return if yes
00084F60 0C07 00D1                  		cmpi.b	#$D1,d7
00084F64 6500 0000                  		bcs.w	Sound_PlaySpecial
00084F68 0C07 00DF                  		cmp.b	#$DF,d7
00084F6C 6F00 0000                  		ble.w	Sound_D1toDF
00084F70 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084F74 6500 0000                  		blo.w	@locret			; Return if yes
00084F78 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084F7C 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084F7E                            ; locret_71F8C:
00084F7E                            @locret:
00084F7E 4E75                       		rts	
00084F80                            ; ===========================================================================
00084F80                            
00084F80                            Sound_E0toE4:
00084F80 0407 00E0                  		subi.b	#flg__First,d7
00084F84 E54F                       		lsl.w	#2,d7
00084F86 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084F8A                            ; ===========================================================================
00084F8A                            
00084F8A                            Sound_ExIndex:
00084F8A 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084F8E 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084F92 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084F96 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084F9A 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084F9E                            ptr_flgend
00084F9E                            ; ===========================================================================
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Play "Say-gaa" PCM sound
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Sound_E1: PlaySega:
00084F9E                            PlaySegaSound:
00084F9E 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084FA6 33FC 0000 00A1 1100        		startZ80
00084FAE 323C 0011                  		move.w	#$11,d1
00084FB2                            ; loc_71FC0:
00084FB2                            @busyloop_outer:
00084FB2 303C FFFF                  		move.w	#-1,d0
00084FB6                            ; loc_71FC4:
00084FB6                            @busyloop:
00084FB6 4E71                       		nop	
00084FB8 51C8 FFFC                  		dbf	d0,@busyloop
00084FBC                            
00084FBC 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084FC0                            
00084FC0 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084FC2 4E75                       		rts	
00084FC4                            ; ===========================================================================
00084FC4                            ; ---------------------------------------------------------------------------
00084FC4                            ; Play music track $81-$9F
00084FC4                            ; ---------------------------------------------------------------------------
00084FC4                            ; Sound_81to9F:
00084FC4                            Sound_PlayBGM:
00084FC4 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084FC8 6600                       		bne.s	@bgmnot1up		; if not, branch
00084FCA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084FCE 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084FD2 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084FD6 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084FD8                            ; loc_71FE6:
00084FD8                            @clearsfxloop:
00084FD8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084FDC DAFC 0030                  		adda.w	#TrackSz,a5
00084FE0 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084FE4                            
00084FE4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084FE8 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084FEA                            ; loc_71FF8:
00084FEA                            @cleartrackplayloop:
00084FEA 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084FEE DAFC 0030                  		adda.w	#TrackSz,a5
00084FF2 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084FF6                            
00084FF6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084FF8 204E                       		movea.l	a6,a0
00084FFA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084FFE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00085002                            ; loc_72012:
00085002                            @backupramloop:
00085002 22D8                       		move.l	(a0)+,(a1)+
00085004 51C8 FFFC                  		dbf	d0,@backupramloop
00085008                            
00085008 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
0008500E 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00085010 6000                       		bra.s	@bgm_loadMusic
00085012                            ; ===========================================================================
00085012                            ; loc_72024:
00085012                            @bgmnot1up:
00085012 422E 0027                  		clr.b	f_1up_playing(a6)
00085016 422E 0026                  		clr.b	v_fadein_counter(a6)
0008501A                            ; loc_7202C:
0008501A                            @bgm_loadMusic:
0008501A 4EBA 0000                  		jsr	InitMusicPlayback(pc)
0008501E 2879 0008 494A             		movea.l	(Go_SpeedUpIndex).l,a4
00085024 0407 0081                  		subi.b	#bgm__First,d7
00085028 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
0008502E 2879 0008 4942             		movea.l	(Go_MusicIndex).l,a4
00085034 E54F                       		lsl.w	#2,d7
00085036 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0008503A 7000                       		moveq	#0,d0
0008503C 3014                       		move.w	(a4),d0			; load voice pointer
0008503E D08C                       		add.l	a4,d0			; It is a relative pointer
00085040 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00085044 102C 0005                  		move.b	5(a4),d0		; load tempo
00085048 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
0008504C                            		;tst.b	f_speedup(a6)
0008504C                            		;beq.s	@nospeedshoes
0008504C                            		;move.b	v_speeduptempo(a6),d0
0008504C                            ; loc_72068:
0008504C                            ;@nospeedshoes:
0008504C 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00085050 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00085054 7200                       		moveq	#0,d1
00085056 264C                       		movea.l	a4,a3
00085058 5C4C                       		addq.w	#6,a4			; Point past header
0008505A 7E00                       		moveq	#0,d7
0008505C 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00085060 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00085064 5307                       		subq.b	#1,d7
00085066 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0008506A 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
0008506E 7C30                       		moveq	#TrackSz,d6
00085070 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00085074 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00085078 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0008507C                            ; loc_72098:
0008507C                            @bmg_fmloadloop:
0008507C 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085080 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085084 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085088 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008508C 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00085090 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085094 7000                       		moveq	#0,d0
00085096 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00085098 D08B                       		add.l	a3,d0				; Relative pointer
0008509A 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0008509E 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000850A2 D2C6                       		adda.w	d6,a1
000850A4 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000850A8                            		
000850A8 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000850AE 6600                       		bne.s	@silencefm6
000850B0 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000850B2 7200                       		moveq	#0,d1		; Disable DAC
000850B4 4EBA 0000                  		jsr	WriteFMI(pc)
000850B8 6000 0000                  		bra.w	@bgm_fmdone
000850BC                            ; ===========================================================================
000850BC                            ; loc_720D8:
000850BC                            @silencefm6:
000850BC 7028                       		moveq	#$28,d0		; Key on/off register
000850BE 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000850C0 4EBA 0000                  		jsr	WriteFMI(pc)
000850C4 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000850C8 727F                       		moveq	#$7F,d1		; Total silence
000850CA 4EBA 0000                  		jsr	WriteFMII(pc)
000850CE 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000850D2 727F                       		moveq	#$7F,d1		; Total silence
000850D4 4EBA 0000                  		jsr	WriteFMII(pc)
000850D8 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000850DC 727F                       		moveq	#$7F,d1		; Total silence
000850DE 4EBA 0000                  		jsr	WriteFMII(pc)
000850E2 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000850E6 727F                       		moveq	#$7F,d1		; Total silence
000850E8 4EBA 0000                  		jsr	WriteFMII(pc)
000850EC 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000850F0 123C 00C0                  		move.b	#$C0,d1		; Stereo
000850F4 4EBA 0000                  		jsr	WriteFMII(pc)
000850F8                            ; loc_72114:
000850F8                            @bgm_fmdone:
000850F8 7E00                       		moveq	#0,d7
000850FA 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000850FE 6700                       		beq.s	@bgm_psgdone	; branch if zero
00085100 5307                       		subq.b	#1,d7
00085102 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00085106 45FA 0000                  		lea	PSGInitBytes(pc),a2
0008510A                            ; loc_72126:
0008510A                            @bgm_psgloadloop:
0008510A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0008510E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085112 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085116 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008511A 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0008511E 7000                       		moveq	#0,d0
00085120 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00085122 D08B                       		add.l	a3,d0				; Relative pointer
00085124 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085128 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
0008512C 101C                       		move.b	(a4)+,d0			; load redundant byte
0008512E 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00085132 D2C6                       		adda.w	d6,a1
00085134 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00085138                            ; loc_72154:
00085138                            @bgm_psgdone:
00085138 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
0008513C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
0008513E                            ; loc_7215A:
0008513E                            @sfxstoploop:
0008513E 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00085140 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00085144 7000                       		moveq	#0,d0
00085146 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0008514A 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
0008514C 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
0008514E E508                       		lsl.b	#2,d0			; Convert to index
00085150 6000                       		bra.s	@gotchannelindex
00085152                            ; ===========================================================================
00085152                            ; loc_7216E:
00085152                            @sfxpsgchannel:
00085152 E608                       		lsr.b	#3,d0		; Convert to index
00085154                            ; loc_72170:
00085154                            @gotchannelindex:
00085154 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00085158 2070 0000                  		movea.l	(a0,d0.w),a0
0008515C 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00085160                            ; loc_7217C:
00085160                            @sfxnext:
00085160 D2C6                       		adda.w	d6,a1
00085162 51CF FFDA                  		dbf	d7,@sfxstoploop
00085166                            
00085166 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008516A 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
0008516C 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085172                            ; loc_7218E:
00085172                            @checkspecialpsg:
00085172 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085176 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00085178 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008517E                            ; loc_7219A:
0008517E                            @sendfmnoteoff:
0008517E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085182 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00085184                            ; loc_721A0:
00085184                            @fmnoteoffloop:
00085184 4EBA 0000                  		jsr	FMNoteOff(pc)
00085188 DAC6                       		adda.w	d6,a5
0008518A 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
0008518E 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00085190                            ; loc_721AC:
00085190                            @psgnoteoffloop:
00085190 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085194 DAC6                       		adda.w	d6,a5
00085196 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
0008519A                            ; loc_721B6:
0008519A                            @locdblret:
0008519A 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
0008519C 4E75                       		rts	
0008519E                            ; ===========================================================================
0008519E                            ; byte_721BA:
0008519E 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000851A6 00                         		even
000851A6                            ; byte_721C2:
000851A6 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000851AA 00                         		even
000851AA                            ; ===========================================================================
000851AA                            ; ---------------------------------------------------------------------------
000851AA                            ; Play Spin Dash sound effect
000851AA                            ; ---------------------------------------------------------------------------
000851AA                            Sound_D1toDF:
000851AA 4A2E 0027                  		tst.b	$27(a6)
000851AE 6600 0000                  		bne.w	loc_722C6
000851B2 4A2E 0004                  		tst.b	4(a6)
000851B6 6600 0000                  		bne.w	loc_722C6
000851BA 4A2E 0024                  		tst.b	$24(a6)
000851BE 6600 0000                  		bne.w	loc_722C6
000851C2 4238 C900                  		clr.b	($FFFFC900).w
000851C6 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
000851CA 6600                       		bne.s	@cont3	; if not, branch
000851CC 3F00                       		move.w	d0,-(sp)
000851CE 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000851D2 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000851D6 6600                       		bne.s	@cont1		; if it is, branch
000851D8 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
000851DC                            		
000851DC                            @cont1:
000851DC 5200                       		addq.b	#1,d0
000851DE 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
000851E2 6400                       		bcc.s	@cont2		; if it has, branch
000851E4 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
000851E8                            		
000851E8                            @cont2:
000851E8 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
000851EE 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000851F4 301F                       		move.w	(sp)+,d0
000851F6                            		
000851F6                            @cont3:	
000851F6 2079 0008 4946             		movea.l	(Go_SoundIndex).l,a0
000851FC 0407 00A0                  		sub.b	#$A0,d7
00085200 6000                       		bra.s	SoundEffects_Common
00085202                            ; ---------------------------------------------------------------------------
00085202                            ; Play normal sound effect
00085202                            ; ---------------------------------------------------------------------------
00085202                            ; Sound_A0toCF:
00085202                            Sound_PlaySFX:
00085202 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085206 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008520A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008520E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085212 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085216 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008521A 4238 C900                  		clr.b	($FFFFC900).w
0008521E 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085222 6600                       		bne.s	Sound_notB5		; if not, branch
00085224 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085228 6600                       		bne.s	loc_721EE		; Branch if not
0008522A 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0008522E                            
0008522E                            loc_721EE:
0008522E 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085234                            
00085234                            Sound_notB5:
00085234 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00085238 6600                       		bne.s	Sound_notA7		; if not, branch
0008523A 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0008523E 6600 0000                  		bne.w	locret_722C4			; Return if not
00085242 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00085248                            		
00085248                            Sound_notA7:
00085248 2079 0008 4946             		movea.l	(Go_SoundIndex).l,a0
0008524E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00085252                            
00085252                            SoundEffects_Common:		
00085252 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00085254 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00085258 224B                       		movea.l	a3,a1
0008525A 7200                       		moveq	#0,d1
0008525C 3219                       		move.w	(a1)+,d1		; Voice pointer
0008525E D28B                       		add.l	a3,d1			; Relative pointer
00085260 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00085262                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00085262                            		; index entry is above $3F will cause a crash. This is actually the same way that
00085262                            		; this bug is fixed in Ristar's driver.
00085262 7E00                       		moveq	#0,d7	
00085264 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00085266 5307                       		subq.b	#1,d7
00085268 7C30                       		moveq	#TrackSz,d6
0008526A                            
0008526A                            loc_72228:
0008526A 7600                       		moveq	#0,d3
0008526C 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00085270 1803                       		move.b	d3,d4
00085272 6B00                       		bmi.s	loc_72244	; Branch if PSG
00085274 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00085276 E54B                       		lsl.w	#2,d3
00085278 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008527C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085280 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00085284 6000                       		bra.s	loc_7226E
00085286                            ; ===========================================================================
00085286                            
00085286                            loc_72244:
00085286 E64B                       		lsr.w	#3,d3
00085288 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008528C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085290 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00085294 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085298 6600                       		bne.s	loc_7226E	; Branch if not
0008529A 1004                       		move.b	d4,d0
0008529C 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000852A0 13C0 00C0 0011             		move.b	d0,(psg_input).l
000852A6 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000852AA 13C0 00C0 0011             		move.b	d0,(psg_input).l
000852B0                            
000852B0                            loc_7226E:
000852B0 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000852B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000852B8 244D                       		movea.l	a5,a2
000852BA 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000852BC                            
000852BC                            loc_72276:
000852BC 429A                       		clr.l	(a2)+
000852BE 51C8 FFFC                  		dbf	d0,loc_72276
000852C2                            
000852C2 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000852C4 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000852C8 7000                       		moveq	#0,d0
000852CA 3019                       		move.w	(a1)+,d0			; Track data pointer
000852CC D08B                       		add.l	a3,d0				; Relative pointer
000852CE 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000852D2 3B59 0008                  		move.w	(a1)+,8(a5)
000852D6 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000852DA 6700                       		beq.s	@cont		; if not, branch
000852DC 3F00                       		move.w	d0,-(sp)
000852DE 1038 C902                  		move.b	($FFFFC902).w,d0
000852E2 D12D 0008                  		add.b	d0,8(a5)
000852E6 301F                       		move.w	(sp)+,d0
000852E8                            		
000852E8                            @cont:
000852E8 1B7C 0001 000E             		move.b	#1,$E(a5)
000852EE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000852F2 4A04                       		tst.b	d4				; Is this a PSG channel?
000852F4 6B00                       		bmi.s	loc_722A8		; Branch if yes
000852F6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000852FC 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085300                            
00085300                            loc_722A8:
00085300 51CF FF68                  		dbf	d7,loc_72228
00085304                            
00085304 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085308 6A00                       		bpl.s	loc_722B8				; Branch if not
0008530A 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085310                            
00085310                            loc_722B8:
00085310 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085314 6A00                       		bpl.s	locret_722C4						; Branch if not
00085316 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008531C                            
0008531C                            locret_722C4:
0008531C 4E75                       		rts	
0008531E                            ; ===========================================================================
0008531E                            
0008531E                            loc_722C6:
0008531E 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085320 4E75                       		rts	
00085322                            ; ===========================================================================
00085322                            ; ---------------------------------------------------------------------------
00085322                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085322                            ; ---------------------------------------------------------------------------
00085322                            ; dword_722CC: BGMChannelRAM:
00085322                            SFX_BGMChannelRAM:
00085322 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085326 0000 0000                  		dc.l 0
0008532A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008532E 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085332 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00085336 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008533A 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0008533E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085342                            ; dword_722EC: SFXChannelRAM:
00085342                            SFX_SFXChannelRAM:
00085342 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00085346 0000 0000                  		dc.l 0
0008534A 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008534E 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085352 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085356 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0008535A 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0008535E 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085362                            ; ===========================================================================
00085362                            ; ---------------------------------------------------------------------------
00085362                            ; Play GHZ waterfall sound
00085362                            ; ---------------------------------------------------------------------------
00085362                            ; Sound_D0toDF:
00085362                            Sound_PlaySpecial:
00085362 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085366 6600 0000                  		bne.w	@locret			; Return if so
0008536A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008536E 6600 0000                  		bne.w	@locret			; Exit if it is
00085372 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085376 6600 0000                  		bne.w	@locret			; Exit if it is
0008537A 2079 0008 493E             		movea.l	(Go_SpecSoundIndex).l,a0
00085380 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00085384 E54F                       		lsl.w	#2,d7
00085386 2670 7000                  		movea.l	(a0,d7.w),a3
0008538A 224B                       		movea.l	a3,a1
0008538C 7000                       		moveq	#0,d0
0008538E 3019                       		move.w	(a1)+,d0			; Voice pointer
00085390 D08B                       		add.l	a3,d0				; Relative pointer
00085392 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085396 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085398                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085398                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085398 7E00                       		moveq	#0,d7	
0008539A 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0008539C 5307                       		subq.b	#1,d7
0008539E 7C30                       		moveq	#TrackSz,d6
000853A0                            ; loc_72348:
000853A0                            @sfxloadloop:
000853A0 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000853A4 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000853A6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853AC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000853B0 6000                       		bra.s	@sfxinitpsg
000853B2                            ; ===========================================================================
000853B2                            ; loc_7235A:
000853B2                            @sfxoverridepsg:
000853B2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853B8 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000853BC                            ; loc_72364:
000853BC                            @sfxinitpsg:
000853BC 244D                       		movea.l	a5,a2
000853BE 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000853C0                            ; loc_72368:
000853C0                            @clearsfxtrackram:
000853C0 429A                       		clr.l	(a2)+
000853C2 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000853C6                            
000853C6 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000853C8 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000853CC 7000                       		moveq	#0,d0
000853CE 3019                       		move.w	(a1)+,d0			; Track data pointer
000853D0 D08B                       		add.l	a3,d0				; Relative pointer
000853D2 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000853D6 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000853DA 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000853E0 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000853E4 4A04                       		tst.b	d4				; Is this a PSG channel?
000853E6 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000853E8 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000853EE                            ; loc_72396:
000853EE                            @sfxpsginitdone:
000853EE 51CF FFB0                  		dbf	d7,@sfxloadloop
000853F2                            
000853F2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000853F6 6A00                       		bpl.s	@doneoverride					; Branch if not
000853F8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853FE                            ; loc_723A6:
000853FE                            @doneoverride:
000853FE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085402 6A00                       		bpl.s	@locret						; Branch if not
00085404 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008540A 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
0008540E 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085414 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085418 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008541E                            ; locret_723C6:
0008541E                            @locret:
0008541E 4E75                       		rts	
00085420                            ; End of function PlaySoundID
00085420                            
00085420                            ; ===========================================================================
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; The first block would have been used for overriding the music tracks
00085420                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085420                            ; The third block would be used to set up the Special SFX
00085420                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085420                            ; and would be checked for if they're currently playing
00085420                            ; If they are, then the third block would be used again, this time to mark
00085420                            ; the new tracks as 'currently playing'
00085420                            
00085420                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085420                            
00085420                            ; BGMFM4PSG3RAM:
00085420                            ;SpecSFX_BGMChannelRAM:
00085420 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085424 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085428                            ; SFXFM4PSG3RAM:
00085428                            ;SpecSFX_SFXChannelRAM:
00085428 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008542C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085430                            ; SpecialSFXFM4PSG3RAM:
00085430                            ;SpecSFX_SpecSFXChannelRAM:
00085430 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085434 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00085438                            
00085438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085438                            
00085438                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00085438                            StopSFX:
00085438 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008543A 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008543E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085440                            ; loc_723EA:
00085440                            @trackloop:
00085440 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085442 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00085446 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008544A 7600                       		moveq	#0,d3
0008544C 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00085450 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085452 4EBA 0000                  		jsr	FMNoteOff(pc)
00085456 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0008545A 6600                       		bne.s	@getfmpointer					; Branch if not
0008545C 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085460 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085462                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085462                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085462                            		; is playing its sound!
00085462 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085466 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0008546A 6000                       		bra.s	@gotfmpointer
0008546C                            ; ===========================================================================
0008546C                            ; loc_72416:
0008546C                            @getfmpointer:
0008546C 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008546E E50B                       		lsl.b	#2,d3
00085470 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085474 264D                       		movea.l	a5,a3
00085476 2A70 3000                  		movea.l	(a0,d3.w),a5
0008547A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008547E                            ; loc_72428:
0008547E                            @gotfmpointer:
0008547E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085482 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085486 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008548A 4EBA 0000                  		jsr	SetVoice(pc)
0008548E 2A4B                       		movea.l	a3,a5
00085490 6000                       		bra.s	@nexttrack
00085492                            ; ===========================================================================
00085492                            ; loc_7243C:
00085492                            @trackpsg:
00085492 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085496 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0008549A 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008549E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000854A0 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000854A4 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000854A6 E60B                       		lsr.b	#3,d3
000854A8 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000854AC 2070 3000                  		movea.l	(a0,d3.w),a0
000854B0                            ; loc_7245A:
000854B0                            @gotpsgpointer:
000854B0 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000854B4 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000854B8 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000854BE 6600                       		bne.s	@nexttrack			; Branch if not
000854C0 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000854C8                            ; loc_72472:
000854C8                            @nexttrack:
000854C8 DAFC 0030                  		adda.w	#TrackSz,a5
000854CC 51CF FF72                  		dbf	d7,@trackloop
000854D0                            
000854D0 4E75                       		rts	
000854D2                            ; End of function StopSFX
000854D2                            
000854D2                            
000854D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854D2                            
000854D2                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000854D2                            StopSpecialSFX:
000854D2 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000854D6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854D8 6A00                       		bpl.s	@fadedfm		; Branch if not
000854DA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000854DE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000854E2 6600                       		bne.s	@fadedfm		; Branch if not
000854E4 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000854E8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000854EC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000854F0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000854F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854F6 6A00                       		bpl.s	@fadedfm		; Branch if not
000854F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000854FC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085500 4EBA 0000                  		jsr	SetVoice(pc)
00085504                            ; loc_724AE:
00085504                            @fadedfm:
00085504 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085508 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008550A 6A00                       		bpl.s	@fadedpsg		; Branch if not
0008550C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085510 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085514 6600                       		bne.s	@fadedpsg		; Return if not
00085516 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008551A 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
0008551E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085522 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085526 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085528 6A00                       		bpl.s	@fadedpsg		; Return if not
0008552A 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085530 6600                       		bne.s	@fadedpsg			; Return if not
00085532 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008553A                            ; locret_724E4:
0008553A                            @fadedpsg:
0008553A 4E75                       		rts	
0008553C                            ; End of function StopSpecialSFX
0008553C                            
0008553C                            ; ===========================================================================
0008553C                            ; ---------------------------------------------------------------------------
0008553C                            ; Fade out music
0008553C                            ; ---------------------------------------------------------------------------
0008553C                            ; Sound_E0:
0008553C                            FadeOutMusic:
0008553C 4EBA FEFA                  		jsr	StopSFX(pc)
00085540 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085544 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008554A 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00085550 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085554 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085558 4E75                       		rts	
0008555A                            
0008555A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008555A                            
0008555A                            ; sub_72504:
0008555A                            DoFadeOut:
0008555A 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0008555E 6700                       		beq.s	@continuefade		; Branch if yes
00085560 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085564 4E75                       		rts	
00085566                            ; ===========================================================================
00085566                            ; loc_72510:
00085566                            @continuefade:
00085566 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0008556A 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008556E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085574 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085578 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008557A                            ; loc_72524:
0008557A                            @fmloop:
0008557A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008557C 6A00                       		bpl.s	@nextfm			; Branch if not
0008557E 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085582 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085584 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085588 6000                       		bra.s	@nextfm
0008558A                            ; ===========================================================================
0008558A                            ; loc_72534:
0008558A                            @sendfmtl:
0008558A 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008558E                            ; loc_72538:
0008558E                            @nextfm:
0008558E DAFC 0030                  		adda.w	#TrackSz,a5
00085592 51CF FFE6                  		dbf	d7,@fmloop
00085596                            
00085596 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085598                            ; loc_72542:
00085598                            @psgloop:
00085598 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008559A 6A00                       		bpl.s	@nextpsg		; branch if not
0008559C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000855A0 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000855A6 6500                       		blo.s	@sendpsgvol		; Branch if not
000855A8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000855AC 6000                       		bra.s	@nextpsg
000855AE                            ; ===========================================================================
000855AE                            ; loc_72558:
000855AE                            @sendpsgvol:
000855AE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000855B2 4EBA 0000                  		jsr	SetPSGVolume(pc)
000855B6                            ; loc_72560:
000855B6                            @nextpsg:
000855B6 DAFC 0030                  		adda.w	#TrackSz,a5
000855BA 51CF FFDC                  		dbf	d7,@psgloop
000855BE                            
000855BE 4E75                       		rts	
000855C0                            ; End of function DoFadeOut
000855C0                            
000855C0                            
000855C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855C0                            
000855C0                            ; sub_7256A:
000855C0                            FMSilenceAll:
000855C0 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000855C2 7028                       		moveq	#$28,d0		; FM key on/off register
000855C4                            ; loc_7256E:
000855C4                            @noteoffloop:
000855C4 1203                       		move.b	d3,d1
000855C6 4EBA 0000                  		jsr	WriteFMI(pc)
000855CA 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
000855CC 4EBA 0000                  		jsr	WriteFMI(pc)
000855D0 51CB FFF2                  		dbf	d3,@noteoffloop
000855D4                            
000855D4 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000855D6 727F                       		moveq	#$7F,d1		; ... to total attenuation...
000855D8 7802                       		moveq	#2,d4		; ... for all 3 channels...
000855DA                            ; loc_72584:
000855DA                            @channelloop:
000855DA 7603                       		moveq	#3,d3		; ... for all operators on each channel...
000855DC                            ; loc_72586:
000855DC                            @channeltlloop:
000855DC 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
000855E0 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
000855E4 5840                       		addq.w	#4,d0		; Next TL operator
000855E6 51CB FFF4                  		dbf	d3,@channeltlloop
000855EA                            
000855EA 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
000855EE 51CC FFEA                  		dbf	d4,@channelloop
000855F2                            
000855F2 4E75                       		rts	
000855F4                            ; End of function FMSilenceAll
000855F4                            
000855F4                            ; ===========================================================================
000855F4                            ; ---------------------------------------------------------------------------
000855F4                            ; Stop music
000855F4                            ; ---------------------------------------------------------------------------
000855F4                            ; Sound_E4: StopSoundAndMusic:
000855F4                            StopAllSound:
000855F4 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000855F6 123C 0080                  		move.b	#$80,d1		; Enable DAC
000855FA 4EBA 0000                  		jsr	WriteFMI(pc)
000855FE 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085600 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085602 4EBA 0000                  		jsr	WriteFMI(pc)
00085606 204E                       		movea.l	a6,a0
00085608                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085608                            		; Remove the '-$10' to fix this.
00085608 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0008560C                            ; loc_725B6:
0008560C                            @clearramloop:
0008560C 4298                       		clr.l	(a0)+
0008560E 51C8 FFFC                  		dbf	d0,@clearramloop
00085612                            
00085612 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085618 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0008561C 6000 0000                  		bra.w	PSGSilenceAll
00085620                            
00085620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085620                            
00085620                            ; sub_725CA:
00085620                            InitMusicPlayback:
00085620 204E                       		movea.l	a6,a0
00085622                            		; Save several values
00085622 1216                       		move.b	v_sndprio(a6),d1
00085624 142E 0027                  		move.b	f_1up_playing(a6),d2
00085628 162E 002A                  		move.b	f_speedup(a6),d3
0008562C 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085630                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085630 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085634 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00085638                            ; loc_725E4:
00085638                            @clearramloop:
00085638 4298                       		clr.l	(a0)+
0008563A 51C8 FFFC                  		dbf	d0,@clearramloop
0008563E                            
0008563E                            		; Restore the values saved above
0008563E 1C81                       		move.b	d1,v_sndprio(a6)
00085640 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085644 1D43 002A                  		move.b	d3,f_speedup(a6)
00085648 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0008564C 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00085650 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085656                            		; DANGER! This silences ALL channels, even the ones being used
00085656                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085656                            		; doesn't affect SFX channels, either.
00085656                            		; This should be replaced with an 'rts'.
00085656 4EBA FF68                  		jsr	FMSilenceAll(pc)
0008565A 6000 0000                  		bra.w	PSGSilenceAll
0008565E                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0008565E                            		; don't do a very good job of setting up the music tracks.
0008565E                            		; Tracks that aren't defined in a music file's header don't have
0008565E                            		; their channels defined, meaning @sendfmnoteoff won't silence
0008565E                            		; hardware properly. In combination with removing the above
0008565E                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0008565E                            		; notes.
0008565E                            		; To fix this, I suggest using this code, instead of an 'rts':
0008565E                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0008565E                            		;lea	FMDACInitBytes(pc),a2
0008565E                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0008565E                            		;bsr.s	@writeloop
0008565E                            		;lea	PSGInitBytes(pc),a2
0008565E                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0008565E                            
0008565E                            ;@writeloop:
0008565E                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0008565E                            		;lea	TrackSz(a1),a1		; Next track
0008565E                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0008565E                            
0008565E                            		;rts
0008565E                            	
0008565E                            ; End of function InitMusicPlayback
0008565E                            
0008565E                            
0008565E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008565E                            
0008565E                            ; sub_7260C:
0008565E                            TempoWait:
0008565E 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085664 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085668 7030                       		moveq	#TrackSz,d0
0008566A 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008566C                            ; loc_7261A:
0008566C                            @tempoloop:
0008566C 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008566E D0C0                       		adda.w	d0,a0	; Advance to next track
00085670 51C9 FFFA                  		dbf	d1,@tempoloop
00085674                            
00085674 4E75                       		rts	
00085676                            ; End of function TempoWait
00085676                            
00085676                            ; ===========================================================================
00085676                            ; ---------------------------------------------------------------------------
00085676                            ; Speed	up music
00085676                            ; ---------------------------------------------------------------------------
00085676                            ; Sound_E2:
00085676                            SpeedUpMusic:
00085676 4A2E 0027                  		tst.b	f_1up_playing(a6)
0008567A 6600                       		bne.s	@speedup_1up
0008567C 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085682 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085688 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008568E 4E75                       		rts	
00085690                            ; ===========================================================================
00085690                            ; loc_7263E:
00085690                            @speedup_1up:
00085690 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085696 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008569C 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000856A2 4E75                       		rts	
000856A4                            ; ===========================================================================
000856A4                            ; ---------------------------------------------------------------------------
000856A4                            ; Change music back to normal speed
000856A4                            ; ---------------------------------------------------------------------------
000856A4                            ; Sound_E3:
000856A4                            SlowDownMusic:
000856A4 4A2E 0027                  		tst.b	f_1up_playing(a6)
000856A8 6600                       		bne.s	@slowdown_1up
000856AA 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000856B0 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000856B6 422E 002A                  		clr.b	f_speedup(a6)
000856BA 4E75                       		rts	
000856BC                            ; ===========================================================================
000856BC                            ; loc_7266A:
000856BC                            @slowdown_1up:
000856BC 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000856C2 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000856C8 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000856CC 4E75                       		rts	
000856CE                            
000856CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856CE                            
000856CE                            ; sub_7267C:
000856CE                            DoFadeIn:
000856CE 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000856D2 6700                       		beq.s	@continuefade		; Branch if yes
000856D4 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000856D8 4E75                       		rts	
000856DA                            ; ===========================================================================
000856DA                            ; loc_72688:
000856DA                            @continuefade:
000856DA 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000856DE 6700                       		beq.s	@fadedone		; Branch if yes
000856E0 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000856E4 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000856EA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000856EE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000856F0                            ; loc_7269E:
000856F0                            @fmloop:
000856F0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000856F2 6A00                       		bpl.s	@nextfm			; Branch if not
000856F4 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000856F8 4EBA 0000                  		jsr	SendVoiceTL(pc)
000856FC                            ; loc_726AA:
000856FC                            @nextfm:
000856FC DAFC 0030                  		adda.w	#TrackSz,a5
00085700 51CF FFEE                  		dbf	d7,@fmloop
00085704 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085706                            ; loc_726B4:
00085706                            @psgloop:
00085706 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085708 6A00                       		bpl.s	@nextpsg		; Branch if not
0008570A 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008570E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085712 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085716 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085718 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008571A                            ; loc_726C8:
0008571A                            @sendpsgvol:
0008571A 4EBA 0000                  		jsr	SetPSGVolume(pc)
0008571E                            ; loc_726CC:
0008571E                            @nextpsg:
0008571E DAFC 0030                  		adda.w	#TrackSz,a5
00085722 51CF FFE2                  		dbf	d7,@psgloop
00085726 4E75                       		rts	
00085728                            ; ===========================================================================
00085728                            ; loc_726D6:
00085728                            @fadedone:
00085728 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0008572E 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085732 4E75                       		rts	
00085734                            ; End of function DoFadeIn
00085734                            
00085734                            ; ===========================================================================
00085734                            ; loc_726E2:
00085734                            FMNoteOn:
00085734 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085738 6600                       		bne.s	@locret		; Return if so
0008573A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008573E 6600                       		bne.s	@locret		; Return if so
00085740 7028                       		moveq	#$28,d0		; Note on/off register
00085742 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00085746 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008574A 6000 0000                  		bra.w	WriteFMI
0008574E                            ; ===========================================================================
0008574E                            ; locret_726FC:
0008574E                            @locret:
0008574E 4E75                       		rts	
00085750                            
00085750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085750                            
00085750                            ; sub_726FE:
00085750                            FMNoteOff:
00085750 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085754 6600                       		bne.s	locret_72714	; Return if yes
00085756 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008575A 6600                       		bne.s	locret_72714	; Return if yes
0008575C                            ; loc_7270A:
0008575C                            SendFMNoteOff:
0008575C 7028                       		moveq	#$28,d0		; Note on/off register
0008575E 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085762 6000 0000                  		bra.w	WriteFMI
00085766                            ; ===========================================================================
00085766                            
00085766                            locret_72714:
00085766 4E75                       		rts	
00085768                            ; End of function FMNoteOff
00085768                            
00085768                            ; ===========================================================================
00085768                            ; loc_72716:
00085768                            WriteFMIorIIMain:
00085768 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008576C 6600                       		bne.s	@locret		; Return if yes
0008576E 6000 0000                  		bra.w	WriteFMIorII
00085772                            ; ===========================================================================
00085772                            ; locret_72720:
00085772                            @locret:
00085772 4E75                       		rts	
00085774                            
00085774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085774                            
00085774                            ; sub_72722:
00085774                            WriteFMIorII:
00085774 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0008577A 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008577C D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00085780                            ; End of function WriteFMIorII
00085780                            
00085780                            
00085780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085780                            
00085780                            ; The reason I think this is an *early* SMPS 68k Type 1b
00085780                            ; is because this subroutine is the one from Type 1a:
00085780                            ; other Type 1b drivers have a newer, optimised version.
00085780                            ; The driver itself is Type 1b, with this odd exception.
00085780                            
00085780                            ; sub_7272E:
00085780                            WriteFMI:
00085780 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085786 0802 0007                  		btst	#7,d2		; Is FM busy?
0008578A 66F4                       		bne.s	WriteFMI	; Loop if so
0008578C 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085792 4E71                       		nop	
00085794 4E71                       		nop	
00085796 4E71                       		nop	
00085798                            ; loc_72746:
00085798                            @waitloop:
00085798 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008579E 0802 0007                  		btst	#7,d2		; Is FM busy?
000857A2 66F4                       		bne.s	@waitloop	; Loop if so
000857A4                            
000857A4 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000857AA 4E75                       		rts	
000857AC                            ; End of function WriteFMI
000857AC                            
000857AC                            ; ===========================================================================
000857AC                            ; loc_7275A:
000857AC                            WriteFMIIPart:
000857AC 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000857B0 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000857B4 D002                       		add.b	d2,d0			; Add in to destination register
000857B6                            
000857B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857B6                            
000857B6                            ; sub_72764:
000857B6                            WriteFMII:
000857B6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000857BC 0802 0007                  		btst	#7,d2		; Is FM busy?
000857C0 66F4                       		bne.s	WriteFMII	; Loop if so
000857C2 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000857C8 4E71                       		nop	
000857CA 4E71                       		nop	
000857CC 4E71                       		nop	
000857CE                            ; loc_7277C:
000857CE                            @waitloop:
000857CE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000857D4 0802 0007                  		btst	#7,d2		; Is FM busy?
000857D8 66F4                       		bne.s	@waitloop	; Loop if so
000857DA                            
000857DA 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000857E0 4E75                       		rts	
000857E2                            ; End of function WriteFMII
000857E2                            
000857E2                            ; ===========================================================================
000857E2                            ; ---------------------------------------------------------------------------
000857E2                            ; FM Note Values: b-0 to a#8
000857E2                            ; ---------------------------------------------------------------------------
000857E2                            ; word_72790: FM_Notes:
000857E2                            FMFrequencies:
000857E2 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000857FA 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085812 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008582A 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085842 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0008585A 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085872 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0008588A 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000858A2                            
000858A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858A2                            
000858A2                            ; sub_72850:
000858A2                            PSGUpdateTrack:
000858A2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000858A6 6600                       		bne.s	@notegoing
000858A8 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000858AC 4EBA 0000                  		jsr	PSGDoNext(pc)
000858B0 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000858B4 6000 0000                  		bra.w	PSGDoVolFX
000858B8                            ; ===========================================================================
000858B8                            ; loc_72866:
000858B8                            @notegoing:
000858B8 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000858BC 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000858C0 4EBA F4EA                  		jsr	DoModulation(pc)
000858C4 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000858C8 4E75                       		rts
000858CA                            ; End of function PSGUpdateTrack
000858CA                            
000858CA                            
000858CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858CA                            
000858CA                            ; sub_72878:
000858CA                            PSGDoNext:
000858CA 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000858CE 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000858D2                            ; loc_72880:
000858D2                            @noteloop:
000858D2 7A00                       		moveq	#0,d5
000858D4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000858D6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000858DA 6500                       		blo.s	@gotnote	; Branch if not
000858DC 4EBA 0000                  		jsr	CoordFlag(pc)
000858E0 60F0                       		bra.s	@noteloop
000858E2                            ; ===========================================================================
000858E2                            ; loc_72890:
000858E2                            @gotnote:
000858E2 4A05                       		tst.b	d5		; Is it a note?
000858E4 6A00                       		bpl.s	@gotduration	; Branch if not
000858E6 4EBA 0000                  		jsr	PSGSetFreq(pc)
000858EA 1A1C                       		move.b	(a4)+,d5	; Get another byte
000858EC 4A05                       		tst.b	d5		; Is it a duration?
000858EE 6A00                       		bpl.s	@gotduration	; Branch if yes
000858F0 534C                       		subq.w	#1,a4		; Put byte back
000858F2 6000 F452                  		bra.w	FinishTrackUpdate
000858F6                            ; ===========================================================================
000858F6                            ; loc_728A4:
000858F6                            @gotduration:
000858F6 4EBA F42E                  		jsr	SetDuration(pc)
000858FA 6000 F44A                  		bra.w	FinishTrackUpdate
000858FE                            ; End of function PSGDoNext
000858FE                            
000858FE                            
000858FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858FE                            
000858FE                            ; sub_728AC:
000858FE                            PSGSetFreq:
000858FE 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085902 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085904 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085908 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0008590C E34D                       		lsl.w	#1,d5
0008590E 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085912 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085918 6000 F42C                  		bra.w	FinishTrackUpdate
0008591C                            ; ===========================================================================
0008591C                            ; loc_728CA:
0008591C                            @restpsg:
0008591C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085920 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085926 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0008592A 6000 0000                  		bra.w	PSGNoteOff
0008592E                            ; End of function PSGSetFreq
0008592E                            
0008592E                            
0008592E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008592E                            
0008592E                            ; sub_728DC:
0008592E                            PSGDoNoteOn:
0008592E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085932 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085934                            ; End of function PSGDoNoteOn
00085934                            
00085934                            
00085934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085934                            
00085934                            ; sub_728E2:
00085934                            PSGUpdateFreq:
00085934 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085938 4880                       		ext.w	d0
0008593A DC40                       		add.w	d0,d6		; Add to frequency
0008593C 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085940 6600                       		bne.s	@locret		; Return if yes
00085942 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085946 6600                       		bne.s	@locret		; Return if yes
00085948 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0008594C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085950 6600                       		bne.s	@notnoise	; Branch if not
00085952 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085956                            ; loc_72904:
00085956                            @notnoise:
00085956 3206                       		move.w	d6,d1
00085958 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0008595C 8001                       		or.b	d1,d0		; Latch tone data to channel
0008595E E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085960 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085964 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008596A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085970                            ; locret_7291E:
00085970                            @locret:
00085970 4E75                       		rts	
00085972                            ; End of function PSGUpdateFreq
00085972                            
00085972                            ; ===========================================================================
00085972                            ; loc_72920:
00085972                            PSGSetRest:
00085972 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085976 4E75                       		rts	
00085978                            
00085978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085978                            
00085978                            ; sub_72926:
00085978                            PSGUpdateVolFX:
00085978 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0008597C 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085980                            ; loc_7292E:
00085980                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085980 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085984 7000                       		moveq	#0,d0
00085986 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0008598A 6700                       		beq.s	SetPSGVolume
0008598C 2079 0008 494E             		movea.l	(Go_PSGIndex).l,a0
00085992 5340                       		subq.w	#1,d0
00085994 E548                       		lsl.w	#2,d0
00085996 2070 0000                  		movea.l	(a0,d0.w),a0
0008599A 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0008599E 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000859A2 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000859A6 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000859AA 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000859AC 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000859B0 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000859B2                            ; loc_72960:
000859B2                            @gotflutter:
000859B2 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000859B4 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000859B8 6500                       		blo.s	SetPSGVolume	; Branch if not
000859BA 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000859BC                            ; End of function PSGUpdateVolFX
000859BC                            
000859BC                            
000859BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859BC                            
000859BC                            ; sub_7296A:
000859BC                            SetPSGVolume:
000859BC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000859C0 6600                       		bne.s	locret_7298A	; Return if so
000859C2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859C6 6600                       		bne.s	locret_7298A	; Return if so
000859C8 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000859CC 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000859CE                            ; loc_7297C:
000859CE                            PSGSendVolume:
000859CE 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000859D2 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000859D6 13C6 00C0 0011             		move.b	d6,(psg_input).l
000859DC                            
000859DC                            locret_7298A:
000859DC 4E75                       		rts	
000859DE                            ; ===========================================================================
000859DE                            ; loc_7298C: PSGCheckNoteFill:
000859DE                            PSGCheckNoteTimeout:
000859DE 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000859E2 67EA                       		beq.s	PSGSendVolume			; Branch if not
000859E4 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000859E8 66E4                       		bne.s	PSGSendVolume			; Branch if not
000859EA 4E75                       		rts	
000859EC                            ; End of function SetPSGVolume
000859EC                            
000859EC                            ; ===========================================================================
000859EC                            ; loc_7299A: FlutterDone:
000859EC                            VolEnvHold:
000859EC 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000859F0 4E75                       		rts	
000859F2                            
000859F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859F2                            
000859F2                            ; sub_729A0:
000859F2                            PSGNoteOff:
000859F2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859F6 6600                       		bne.s	locret_729B4	; Return if so
000859F8                            ; loc_729A6:
000859F8                            SendPSGNoteOff:
000859F8 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000859FC 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085A00 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085A06                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085A06                            		; risk of music accidentally playing noise because it can't detect if
00085A06                            		; the PSG4/noise channel needs muting on track initialisation.
00085A06                            		; S&K's driver fixes it by doing this:
00085A06 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085A0A 6600                       		bne.s	locret_729B4
00085A0C 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085A14                            
00085A14                            locret_729B4:
00085A14 4E75                       		rts	
00085A16                            ; End of function PSGNoteOff
00085A16                            
00085A16                            
00085A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A16                            
00085A16                            ; sub_729B6:
00085A16                            PSGSilenceAll:
00085A16 41F9 00C0 0011             		lea	(psg_input).l,a0
00085A1C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085A20 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085A24 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085A28 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085A2C 4E75                       		rts	
00085A2E                            ; End of function PSGSilenceAll
00085A2E                            
00085A2E                            ; ===========================================================================
00085A2E                            ; word_729CE:
00085A2E                            PSGFrequencies:
00085A2E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085A3E 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085A4E 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085A5E 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085A6E 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085A7E 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085A8E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085A9E 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085AAE 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085ABA                            
00085ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085ABA                            
00085ABA                            ; sub_72A5A:
00085ABA                            CoordFlag:
00085ABA 0445 00E0                  		subi.w	#$E0,d5
00085ABE E54D                       		lsl.w	#2,d5
00085AC0 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085AC4                            ; End of function CoordFlag
00085AC4                            
00085AC4                            ; ===========================================================================
00085AC4                            ; loc_72A64:
00085AC4                            coordflagLookup:
00085AC4 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085AC8                            ; ===========================================================================
00085AC8 6000 0000                  		bra.w	cfDetune		; $E1
00085ACC                            ; ===========================================================================
00085ACC 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085AD0                            ; ===========================================================================
00085AD0 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085AD4                            ; ===========================================================================
00085AD4 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085AD8                            ; ===========================================================================
00085AD8 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085ADC                            ; ===========================================================================
00085ADC 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085AE0                            ; ===========================================================================
00085AE0 6000 0000                  		bra.w	cfHoldNote		; $E7
00085AE4                            ; ===========================================================================
00085AE4 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085AE8                            ; ===========================================================================
00085AE8 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085AEC                            ; ===========================================================================
00085AEC 6000 0000                  		bra.w	cfSetTempo		; $EA
00085AF0                            ; ===========================================================================
00085AF0 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085AF4                            ; ===========================================================================
00085AF4 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085AF8                            ; ===========================================================================
00085AF8 6000 0000                  		bra.w	cfClearPush		; $ED
00085AFC                            ; ===========================================================================
00085AFC 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085B00                            ; ===========================================================================
00085B00 6000 0000                  		bra.w	cfSetVoice		; $EF
00085B04                            ; ===========================================================================
00085B04 6000 0000                  		bra.w	cfModulation		; $F0
00085B08                            ; ===========================================================================
00085B08 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085B0C                            ; ===========================================================================
00085B0C 6000 0000                  		bra.w	cfStopTrack		; $F2
00085B10                            ; ===========================================================================
00085B10 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085B14                            ; ===========================================================================
00085B14 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085B18                            ; ===========================================================================
00085B18 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085B1C                            ; ===========================================================================
00085B1C 6000 0000                  		bra.w	cfJumpTo		; $F6
00085B20                            ; ===========================================================================
00085B20 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085B24                            ; ===========================================================================
00085B24 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085B28                            ; ===========================================================================
00085B28 6000 0000                  		bra.w	cfOpF9			; $F9
00085B2C                            ; ===========================================================================
00085B2C                            ; loc_72ACC:
00085B2C                            cfPanningAMSFMS:
00085B2C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085B2E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085B32 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085B34 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085B38 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085B3C 8200                       		or.b	d0,d1			; Mask in new value
00085B3E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085B42 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085B46 6000 FC20                  		bra.w	WriteFMIorIIMain
00085B4A                            ; ===========================================================================
00085B4A                            
00085B4A                            locret_72AEA:
00085B4A 4E75                       		rts	
00085B4C                            ; ===========================================================================
00085B4C                            ; loc_72AEC: cfAlterNotes:
00085B4C                            cfDetune:
00085B4C 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085B50 4E75                       		rts	
00085B52                            ; ===========================================================================
00085B52                            ; loc_72AF2: cfUnknown1:
00085B52                            cfSetCommunication:
00085B52 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085B56 4E75                       		rts	
00085B58                            ; ===========================================================================
00085B58                            ; loc_72AF8:
00085B58                            cfJumpReturn:
00085B58 7000                       		moveq	#0,d0
00085B5A 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085B5E 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085B62 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085B6A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085B6C 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085B6E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085B72 4E75                       		rts	
00085B74                            ; ===========================================================================
00085B74                            ; loc_72B14:
00085B74                            cfFadeInToPrevious:
00085B74 204E                       		movea.l	a6,a0
00085B76 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085B7A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085B7E                            ; loc_72B1E:
00085B7E                            @restoreramloop:
00085B7E 20D9                       		move.l	(a1)+,(a0)+
00085B80 51C8 FFFC                  		dbf	d0,@restoreramloop
00085B84                            
00085B84 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085B8A 264D                       		movea.l	a5,a3
00085B8C 1C3C 0028                  		move.b	#$28,d6
00085B90 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085B94 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085B96 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085B9A                            ; loc_72B3A:
00085B9A                            @fmloop:
00085B9A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085B9E 6700                       		beq.s	@nextfm		; Branch if not
00085BA0 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085BA4 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085BA8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085BAC 6600                       		bne.s	@nextfm		; Branch if yes
00085BAE 7000                       		moveq	#0,d0
00085BB0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085BB4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085BB8 4EBA 0000                  		jsr	SetVoice(pc)
00085BBC                            ; loc_72B5C:
00085BBC                            @nextfm:
00085BBC DAFC 0030                  		adda.w	#TrackSz,a5
00085BC0 51CF FFD8                  		dbf	d7,@fmloop
00085BC4                            
00085BC4 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085BC6                            ; loc_72B66:
00085BC6                            @psgloop:
00085BC6 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085BCA 6700                       		beq.s	@nextpsg	; Branch if not
00085BCC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085BD0 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085BD4 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085BD8                            ; loc_72B78:
00085BD8                            @nextpsg:
00085BD8 DAFC 0030                  		adda.w	#TrackSz,a5
00085BDC 51CF FFE8                  		dbf	d7,@psgloop
00085BE0                            		
00085BE0 2A4B                       		movea.l	a3,a5
00085BE2 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085BE8 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085BEE 422E 0027                  		clr.b	f_1up_playing(a6)
00085BF2 33FC 0000 00A1 1100        		startZ80
00085BFA 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085BFC 4E75                       		rts	
00085BFE                            ; ===========================================================================
00085BFE                            ; loc_72B9E:
00085BFE                            cfSetTempoDivider:
00085BFE 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085C02 4E75                       		rts	
00085C04                            ; ===========================================================================
00085C04                            ; loc_72BA4: cfSetVolume:
00085C04                            cfChangeFMVolume:
00085C04 101C                       		move.b	(a4)+,d0		; Get parameter
00085C06 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085C0A 6000 0000                  		bra.w	SendVoiceTL
00085C0E                            ; ===========================================================================
00085C0E                            ; loc_72BAE: cfPreventAttack:
00085C0E                            cfHoldNote:
00085C0E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085C12 4E75                       		rts	
00085C14                            ; ===========================================================================
00085C14                            ; loc_72BB4: cfNoteFill
00085C14                            cfNoteTimeout:
00085C14 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085C18 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085C1C 4E75                       		rts	
00085C1E                            ; ===========================================================================
00085C1E                            ; loc_72BBE: cfAddKey:
00085C1E                            cfChangeTransposition:
00085C1E 101C                       		move.b	(a4)+,d0		; Get parameter
00085C20 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085C24 4E75                       		rts	
00085C26                            ; ===========================================================================
00085C26                            ; loc_72BC6:
00085C26                            cfSetTempo:
00085C26 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085C2A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085C2E 4E75                       		rts	
00085C30                            ; ===========================================================================
00085C30                            ; loc_72BD0: cfSetTempoMod:
00085C30                            cfSetTempoDividerAll:
00085C30 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085C34 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085C36 7230                       		moveq	#TrackSz,d1
00085C38 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085C3A                            ; loc_72BDA:
00085C3A                            @trackloop:
00085C3A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085C3E D0C1                       		adda.w	d1,a0
00085C40 51CA FFF8                  		dbf	d2,@trackloop
00085C44                            
00085C44 4E75                       		rts	
00085C46                            ; ===========================================================================
00085C46                            ; loc_72BE6: cfChangeVolume:
00085C46                            cfChangePSGVolume:
00085C46 101C                       		move.b	(a4)+,d0		; Get volume change
00085C48 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085C4C 4E75                       		rts	
00085C4E                            ; ===========================================================================
00085C4E                            ; loc_72BEE:
00085C4E                            cfClearPush:
00085C4E 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085C52 4E75                       		rts	
00085C54                            ; ===========================================================================
00085C54                            ; loc_72BF4:
00085C54                            cfStopSpecialFM4:
00085C54 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085C58 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085C5C 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085C60 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085C64 6B00                       		bmi.s	@locexit					; Branch if yes
00085C66 264D                       		movea.l	a5,a3
00085C68 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085C6C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085C70 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085C74 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085C78 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085C7C 4EBA 0000                  		jsr	SetVoice(pc)
00085C80 2A4B                       		movea.l	a3,a5
00085C82                            ; loc_72C22:
00085C82                            @locexit:
00085C82 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085C84 4E75                       		rts	
00085C86                            ; ===========================================================================
00085C86                            ; loc_72C26:
00085C86                            cfSetVoice:
00085C86 7000                       		moveq	#0,d0
00085C88 101C                       		move.b	(a4)+,d0		; Get new voice
00085C8A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085C8E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085C92 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085C96 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085C9A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085C9E 6700                       		beq.s	SetVoice		; If yes, branch
00085CA0 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085CA4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085CA8 6B00                       		bmi.s	SetVoice		; If yes, branch
00085CAA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085CAE                            
00085CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085CAE                            
00085CAE                            ; sub_72C4E:
00085CAE                            SetVoice:
00085CAE 5340                       		subq.w	#1,d0
00085CB0 6B00                       		bmi.s	@havevoiceptr
00085CB2 323C 0019                  		move.w	#25,d1
00085CB6                            ; loc_72C56:
00085CB6                            @voicemultiply:
00085CB6 D2C1                       		adda.w	d1,a1
00085CB8 51C8 FFFC                  		dbf	d0,@voicemultiply
00085CBC                            ; loc_72C5C:
00085CBC                            @havevoiceptr:
00085CBC 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085CBE 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085CC2 1801                       		move.b	d1,d4
00085CC4 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085CC8 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085CCC 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085CD0 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085CD2                            ; loc_72C72:
00085CD2                            @sendvoiceloop:
00085CD2 101A                       		move.b	(a2)+,d0
00085CD4 1219                       		move.b	(a1)+,d1
00085CD6 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085CDA 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085CDE                            
00085CDE 7A03                       		moveq	#3,d5
00085CE0 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085CE4 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085CE8 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085CEC                            ; loc_72C8C:
00085CEC                            @sendtlloop:
00085CEC 101A                       		move.b	(a2)+,d0
00085CEE 1219                       		move.b	(a1)+,d1
00085CF0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085CF2 6400                       		bcc.s	@sendtl		; Branch if not
00085CF4 D203                       		add.b	d3,d1		; Include additional attenuation
00085CF6                            ; loc_72C96:
00085CF6                            @sendtl:
00085CF6 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085CFA 51CD FFF0                  		dbf	d5,@sendtlloop
00085CFE                            		
00085CFE 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085D02 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085D06 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085D0A                            
00085D0A                            locret_72CAA:
00085D0A 4E75                       		rts	
00085D0C                            ; End of function SetVoice
00085D0C                            
00085D0C                            ; ===========================================================================
00085D0C                            ; byte_72CAC:
00085D0C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085D14                            
00085D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085D14                            
00085D14                            ; sub_72CB4:
00085D14                            SendVoiceTL:
00085D14 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085D18 6600                       		bne.s	@locret		; Return if so
00085D1A 7000                       		moveq	#0,d0
00085D1C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085D20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085D24 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085D28 6700                       		beq.s	@gotvoiceptr
00085D2A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085D2A                            		; of a6!
00085D2A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085D2E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085D32 6B00                       		bmi.s	@gotvoiceptr
00085D34 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085D38                            ; loc_72CD8:
00085D38                            @gotvoiceptr:
00085D38 5340                       		subq.w	#1,d0
00085D3A 6B00                       		bmi.s	@gotvoice
00085D3C 323C 0019                  		move.w	#25,d1
00085D40                            ; loc_72CE0:
00085D40                            @voicemultiply:
00085D40 D2C1                       		adda.w	d1,a1
00085D42 51C8 FFFC                  		dbf	d0,@voicemultiply
00085D46                            ; loc_72CE6:
00085D46                            @gotvoice:
00085D46 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085D4A 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085D4E 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085D52 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085D56 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085D5A 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085D5E 6B00                       		bmi.s	@locret				; If negative, stop
00085D60 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085D62                            ; loc_72D02:
00085D62                            @sendtlloop:
00085D62 101A                       		move.b	(a2)+,d0
00085D64 1219                       		move.b	(a1)+,d1
00085D66 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085D68 6400                       		bcc.s	@senttl		; Branch if not
00085D6A D203                       		add.b	d3,d1		; Include additional attenuation
00085D6C 6500                       		bcs.s	@senttl		; Branch on overflow
00085D6E 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085D72                            ; loc_72D12:
00085D72                            @senttl:
00085D72 51CD FFEE                  		dbf	d5,@sendtlloop
00085D76                            ; locret_72D16:
00085D76                            @locret:
00085D76 4E75                       		rts	
00085D78                            ; End of function SendVoiceTL
00085D78                            
00085D78                            ; ===========================================================================
00085D78                            ; byte_72D18:
00085D78                            FMInstrumentOperatorTable:
00085D78 30                         		dc.b  $30		; Detune/multiple operator 1
00085D79 38                         		dc.b  $38		; Detune/multiple operator 3
00085D7A 34                         		dc.b  $34		; Detune/multiple operator 2
00085D7B 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085D7C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085D7D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085D7E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085D7F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085D80 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085D81 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085D82 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085D83 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085D84 70                         		dc.b  $70		; Secondary decay rate operator 1
00085D85 78                         		dc.b  $78		; Secondary decay rate operator 3
00085D86 74                         		dc.b  $74		; Secondary decay rate operator 2
00085D87 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085D88 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085D89 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085D8A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085D8B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085D8C                            FMInstrumentOperatorTable_End
00085D8C                            ; byte_72D2C:
00085D8C                            FMInstrumentTLTable:
00085D8C 40                         		dc.b  $40		; Total level operator 1
00085D8D 48                         		dc.b  $48		; Total level operator 3
00085D8E 44                         		dc.b  $44		; Total level operator 2
00085D8F 4C                         		dc.b  $4C		; Total level operator 4
00085D90                            FMInstrumentTLTable_End
00085D90                            ; ===========================================================================
00085D90                            ; loc_72D30:
00085D90                            cfModulation:
00085D90 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085D94 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085D98 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085D9C 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085DA0 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085DA4 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085DA6 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085DA8 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085DAC 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085DB0 4E75                       		rts	
00085DB2                            ; ===========================================================================
00085DB2                            ; loc_72D52:
00085DB2                            cfEnableModulation:
00085DB2 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085DB6 4E75                       		rts	
00085DB8                            ; ===========================================================================
00085DB8                            ; loc_72D58:
00085DB8                            cfStopTrack:
00085DB8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085DBC 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085DC0 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085DC4 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085DC6 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085DCA 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085DCE 4EBA F980                  		jsr	FMNoteOff(pc)
00085DD2 6000                       		bra.s	@stoppedchannel
00085DD4                            ; ===========================================================================
00085DD4                            ; loc_72D74:
00085DD4                            @stoppsg:
00085DD4 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085DD8                            ; loc_72D78:
00085DD8                            @stoppedchannel:
00085DD8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085DDC 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085DE0 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085DE2 7000                       		moveq	#0,d0
00085DE4 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085DE8 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085DEA 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085DEE 264D                       		movea.l	a5,a3
00085DF0 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085DF4 6600                       		bne.s	@getpointer		; Branch if not
00085DF6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085DFA 6A00                       		bpl.s	@getpointer		; Branch if not
00085DFC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085E00 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085E04 6000                       		bra.s	@gotpointer
00085E06                            ; ===========================================================================
00085E06                            ; loc_72DA8:
00085E06                            @getpointer:
00085E06 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085E08 E508                       		lsl.b	#2,d0
00085E0A 2A70 0000                  		movea.l	(a0,d0.w),a5
00085E0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085E10 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085E12 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085E16                            ; loc_72DB8:
00085E16                            @gotpointer:
00085E16 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085E1A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085E1E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085E22 4EBA FE8A                  		jsr	SetVoice(pc)
00085E26                            ; loc_72DC8:
00085E26                            @novoiceupd:
00085E26 2A4B                       		movea.l	a3,a5
00085E28 6000                       		bra.s	@locexit
00085E2A                            ; ===========================================================================
00085E2A                            ; loc_72DCC:
00085E2A                            @getpsgptr:
00085E2A 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085E2E 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085E30 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085E32 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085E36 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085E38 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085E3C 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085E3E                            ; loc_72DE0:
00085E3E                            @getchannelptr:
00085E3E 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085E42 E608                       		lsr.b	#3,d0
00085E44 2070 0000                  		movea.l	(a0,d0.w),a0
00085E48                            ; loc_72DEA:
00085E48                            @gotchannelptr:
00085E48 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085E4C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085E50 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085E56 6600                       		bne.s	@locexit			; Branch if not
00085E58 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085E60                            ; loc_72E02:
00085E60                            @locexit:
00085E60 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085E62 4E75                       		rts	
00085E64                            ; ===========================================================================
00085E64                            ; loc_72E06:
00085E64                            cfSetPSGNoise:
00085E64 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085E6A 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085E6E 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085E72 6600                       		bne.s	@locret				; Return if yes
00085E74 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085E7C                            ; locret_72E1E:
00085E7C                            @locret:
00085E7C 4E75                       		rts	
00085E7E                            ; ===========================================================================
00085E7E                            ; loc_72E20:
00085E7E                            cfDisableModulation:
00085E7E 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085E82 4E75                       		rts	
00085E84                            ; ===========================================================================
00085E84                            ; loc_72E26:
00085E84                            cfSetPSGTone:
00085E84 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085E88 4E75                       		rts	
00085E8A                            ; ===========================================================================
00085E8A                            ; loc_72E2C:
00085E8A                            cfJumpTo:
00085E8A 101C                       		move.b	(a4)+,d0	; High byte of offset
00085E8C E148                       		lsl.w	#8,d0		; Shift it into place
00085E8E 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085E90 D8C0                       		adda.w	d0,a4		; Add to current position
00085E92 534C                       		subq.w	#1,a4		; Put back one byte
00085E94 4E75                       		rts	
00085E96                            ; ===========================================================================
00085E96                            ; loc_72E38:
00085E96                            cfRepeatAtPos:
00085E96 7000                       		moveq	#0,d0
00085E98 101C                       		move.b	(a4)+,d0			; Loop index
00085E9A 121C                       		move.b	(a4)+,d1			; Repeat count
00085E9C 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085EA0 6600                       		bne.s	@loopexists			; Branch if yes
00085EA2 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085EA6                            ; loc_72E48:
00085EA6                            @loopexists:
00085EA6 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085EAA 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085EAC 544C                       		addq.w	#2,a4				; Skip target address
00085EAE 4E75                       		rts	
00085EB0                            ; ===========================================================================
00085EB0                            ; loc_72E52:
00085EB0                            cfJumpToGosub:
00085EB0 7000                       		moveq	#0,d0
00085EB2 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085EB6 5900                       		subq.b	#4,d0				; Add space for another target
00085EB8 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085EBC 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085EC0 60C8                       		bra.s	cfJumpTo
00085EC2                            ; ===========================================================================
00085EC2                            ; loc_72E64:
00085EC2                            cfOpF9:
00085EC2 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085EC6 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085ECA 4EBA F8B4                  		jsr	WriteFMI(pc)
00085ECE 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085ED2 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085ED6 6000 F8A8                  		bra.w	WriteFMI
00085EDA                            ; ===========================================================================
00085EDA                            
00085EDA                            Kos_Z80:
00085EDA                            		incbin	"sound\z80.bin", 0, $15
00085EEF 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085EF0                            		incbin	"sound\z80.bin", $16, 6
00085EF6 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085EF7                            		incbin	"sound\z80.bin", $1D, $93
00085F8A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085F8C                            		incbin	"sound\z80.bin", $B2, 1
00085F8D 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085F8F                            		incbin	"sound\z80.bin", $B5, $16AB
00087630                            		even
00087630                            
00087630                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088954 00                         		even
00088954                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A1DC                            		even
0008A1DC                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091B5C 00                         		even
00091B5C                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00093370 00                         		even
00093370                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00094116                            		even
00094116                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000954CE                            		even
000954CE                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095DC6 00                         		even
00095DC6                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095DC6                            extralifejingle_Header:
00095DC6                            	smpsHeaderStartSong 1
00095DC8 0703                       	smpsHeaderChan      $07, $03
00095DCA 0100                       	smpsHeaderTempo     $01, $00
00095DCC                            
00095DD0 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095DD4 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095DD8 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095DDC 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095DE0 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095DE4 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095DFA                            
00095DFA                            ; DAC Data
00095DFA                            extralifejingle_DAC:
00095DFA 807F 55                    	dc.b	nRst, $7F, $55
00095DFD E4                         	smpsFade
00095DFE                            ; PSG1 Data
00095DFE                            extralifejingle_PSG1:
00095DFE                            ; PSG2 Data
00095DFE                            extralifejingle_PSG2:
00095DFE                            ; PSG3 Data
00095DFE                            extralifejingle_PSG3:
00095DFE F2                         	smpsStop
00095DFF                            
00095DFF                            ; FM1 Data
00095DFF                            extralifejingle_FM1:
00095DFF EF00                       	smpsSetvoice        $00
00095E01 E616                       	smpsAlterVol        $16
00095E03 E0C0                       	smpsPan             panCenter, $00
00095E05 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095E11 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095E15 F2                         	smpsStop
00095E16                            
00095E16                            ; FM2 Data
00095E16                            extralifejingle_FM2:
00095E16 EF01                       	smpsSetvoice        $01
00095E18 E616                       	smpsAlterVol        $16
00095E1A E0C0                       	smpsPan             panCenter, $00
00095E1C B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095E28 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095E2C F2                         	smpsStop
00095E2D                            
00095E2D                            ; FM3 Data
00095E2D                            extralifejingle_FM3:
00095E2D EF01                       	smpsSetvoice        $01
00095E2F E616                       	smpsAlterVol        $16
00095E31 E0C0                       	smpsPan             panCenter, $00
00095E33 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095E3F B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095E43 F2                         	smpsStop
00095E44                            
00095E44                            ; FM4 Data
00095E44                            extralifejingle_FM4:
00095E44 EF02                       	smpsSetvoice        $02
00095E46 E0C0                       	smpsPan             panCenter, $00
00095E48 8001                       	dc.b	nRst, $01
00095E4A E616                       	smpsAlterVol        $16
00095E4C BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095E58 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095E5C F2                         	smpsStop
00095E5D                            
00095E5D                            ; FM5 Data
00095E5D                            extralifejingle_FM5:
00095E5D EF03                       	smpsSetvoice        $03
00095E5F E602                       	smpsAlterVol        $02
00095E61 E0C0                       	smpsPan             panCenter, $00
00095E63 8001                       	dc.b	nRst, $01
00095E65 EF05                       	smpsSetvoice        $05
00095E67 E60A                       	smpsAlterVol        $0A
00095E69 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095E75 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095E81 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095E8D C1C4 80                    	dc.b	nE5, nG5, nRst
00095E90 F2                         	smpsStop
00095E91                            
00095E91                            ; FM6 Data
00095E91                            extralifejingle_FM6:
00095E91 EF04                       	smpsSetvoice        $04
00095E93 E607                       	smpsAlterVol        $07
00095E95 E0C0                       	smpsPan             panCenter, $00
00095E97 8001                       	dc.b	nRst, $01
00095E99 EF06                       	smpsSetvoice        $06
00095E9B E6F9                       	smpsAlterVol        $F9
00095E9D A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095EA4 F2                         	smpsStop
00095EA5                            
00095EA5                            extralifejingle_Voices:
00095EA5                            ;	Voice $00
00095EA5                            ;	$3A
00095EA5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095EA5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095EA5                            	smpsVcAlgorithm     $02
00095EA5                            	smpsVcFeedback      $07
00095EA5                            	smpsVcUnusedBits    $00
00095EA5                            	smpsVcDetune        $03, $07, $07, $03
00095EA5                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095EA5                            	smpsVcRateScale     $00, $00, $00, $00
00095EA5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095EA5                            	smpsVcAmpMod        $00, $00, $00, $00
00095EA5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095EA5                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EA5                            	smpsVcDecayLevel    $00, $00, $00, $00
00095EA5                            	smpsVcReleaseRate   $05, $03, $03, $03
00095EBE                            
00095EBE                            ;	Voice $01
00095EBE                            ;	$3A
00095EBE                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095EBE                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095EBE                            	smpsVcAlgorithm     $02
00095EBE                            	smpsVcFeedback      $07
00095EBE                            	smpsVcUnusedBits    $00
00095EBE                            	smpsVcDetune        $03, $07, $07, $03
00095EBE                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095EBE                            	smpsVcRateScale     $00, $00, $00, $00
00095EBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095EBE                            	smpsVcAmpMod        $00, $00, $00, $00
00095EBE                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095EBE                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EBE                            	smpsVcDecayLevel    $00, $00, $00, $00
00095EBE                            	smpsVcReleaseRate   $05, $03, $03, $03
00095ED7                            
00095ED7                            ;	Voice $02
00095ED7                            ;	$3A
00095ED7                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095ED7                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095ED7                            	smpsVcAlgorithm     $02
00095ED7                            	smpsVcFeedback      $07
00095ED7                            	smpsVcUnusedBits    $00
00095ED7                            	smpsVcDetune        $03, $07, $07, $03
00095ED7                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095ED7                            	smpsVcRateScale     $00, $00, $00, $00
00095ED7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095ED7                            	smpsVcAmpMod        $00, $00, $00, $00
00095ED7                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095ED7                            	smpsVcDecayRate2    $00, $00, $00, $00
00095ED7                            	smpsVcDecayLevel    $00, $00, $00, $00
00095ED7                            	smpsVcReleaseRate   $05, $03, $03, $03
00095EF0                            
00095EF0                            ;	Voice $03
00095EF0                            ;	$00
00095EF0                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095EF0                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095EF0                            	smpsVcAlgorithm     $00
00095EF0                            	smpsVcFeedback      $00
00095EF0                            	smpsVcUnusedBits    $00
00095EF0                            	smpsVcDetune        $00, $00, $00, $00
00095EF0                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095EF0                            	smpsVcRateScale     $00, $00, $00, $00
00095EF0                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095EF0                            	smpsVcAmpMod        $00, $00, $00, $00
00095EF0                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095EF0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EF0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095EF0                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095F09                            
00095F09                            ;	Voice $04
00095F09                            ;	$03
00095F09                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095F09                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095F09                            	smpsVcAlgorithm     $03
00095F09                            	smpsVcFeedback      $00
00095F09                            	smpsVcUnusedBits    $00
00095F09                            	smpsVcDetune        $03, $04, $04, $06
00095F09                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095F09                            	smpsVcRateScale     $00, $00, $00, $00
00095F09                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095F09                            	smpsVcAmpMod        $00, $00, $00, $00
00095F09                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095F09                            	smpsVcDecayRate2    $06, $04, $00, $01
00095F09                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095F09                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095F22                            
00095F22                            ;	Voice $05
00095F22                            ;	$34
00095F22                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095F22                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095F22                            	smpsVcAlgorithm     $04
00095F22                            	smpsVcFeedback      $06
00095F22                            	smpsVcUnusedBits    $00
00095F22                            	smpsVcDetune        $07, $00, $07, $03
00095F22                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095F22                            	smpsVcRateScale     $00, $01, $00, $02
00095F22                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095F22                            	smpsVcAmpMod        $00, $00, $00, $00
00095F22                            	smpsVcDecayRate1    $08, $07, $07, $14
00095F22                            	smpsVcDecayRate2    $00, $00, $00, $00
00095F22                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095F22                            	smpsVcReleaseRate   $07, $07, $04, $06
00095F3B                            
00095F3B                            ;	Voice $06
00095F3B                            ;	$30
00095F3B                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095F3B                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095F3B                            	smpsVcAlgorithm     $00
00095F3B                            	smpsVcFeedback      $06
00095F3B                            	smpsVcUnusedBits    $00
00095F3B                            	smpsVcDetune        $00, $00, $00, $00
00095F3B                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095F3B                            	smpsVcRateScale     $01, $00, $00, $02
00095F3B                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095F3B                            	smpsVcAmpMod        $00, $00, $00, $00
00095F3B                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095F3B                            	smpsVcDecayRate2    $08, $05, $18, $08
00095F3B                            	smpsVcDecayLevel    $01, $00, $00, $06
00095F3B                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095F54                            
00095F54                            
00095F54                            		even
00095F54                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000967AC 00                         		even
000967AC                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096CCC                            		even
00096CCC                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096F8E 00                         		even
00096F8E                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097DE6                            		even
00097DE6                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00098032 00                         		even
00098032                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098368 00                         		even
00098368                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098514 00                         		even
00098514                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098722 00                         		even
00098722                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098A06 00                         		even
00098A06                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00099136 00                         		even
00099136                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099204                            		even
00099204                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099672 00                         		even
00099672                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A168                            		even
0009A168                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AD4A                            		even
0009AD4A                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009C050 00                         		even
0009C050                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009C050                            PasswordEntry_Header:
0009C050                            	smpsHeaderStartSong 3
0009C052 0603                       	smpsHeaderChan      $06, $03
0009C054 0105                       	smpsHeaderTempo     $01, $05
0009C056                            
0009C05A 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009C05E 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009C062 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009C066 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009C06A 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009C080                            
0009C080                            ; FM1 Data
0009C080                            PasswordEntry_FM1:
0009C080 EF00                       	smpsSetvoice        $00
0009C087                            
0009C087                            PasswordEntry_Jump00:
0009C087 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009C093 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009C09F C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009C0AB C918 CB                    	dc.b	nC6, $18, nD6
0009C0AE F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009C0B1                            
0009C0B1                            ; FM2 Data
0009C0B1                            PasswordEntry_FM2:
0009C0B1 EF01                       	smpsSetvoice        $01
0009C0B3                            
0009C0B3                            PasswordEntry_Jump03:
0009C0B3 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009C0BF AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009C0CB AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C0D7 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C0E1 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C0E4                            
0009C0E4                            ; FM3 Data
0009C0E4                            PasswordEntry_FM3:
0009C0E4 E080                       	smpsPan             panLeft, $00
0009C0E6 EF02                       	smpsSetvoice        $02
0009C0E8                            
0009C0E8                            PasswordEntry_Jump02:
0009C0E8 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C0F4 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C100 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C10C C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C118 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C124 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C130 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C13C C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C148 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C154 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C160 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C168 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C16B                            
0009C16B                            ; FM4 Data
0009C16B                            PasswordEntry_FM4:
0009C16B E040                       	smpsPan             panRight, $00
0009C16D EF02                       	smpsSetvoice        $02
0009C16F                            
0009C16F                            PasswordEntry_Jump01:
0009C16F C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C17B BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C187 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C193 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C19F BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C1AB BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C1B7 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C1C3 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C1CF BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C1DB BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C1E7 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C1EF F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C1F2                            
0009C1F2                            ; FM5 Data
0009C1F2                            PasswordEntry_FM5:
0009C1F2 EF00                       	smpsSetvoice        $00
0009C1F4 E1FB                       	smpsAlterNote       $FB
0009C1F6 800C                       	dc.b	nRst, $0C
0009C1F8 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C1FB                            
0009C1FB                            ; PSG1 Data
0009C1FB                            PasswordEntry_PSG1:
0009C1FB C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C207 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C213 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C21F CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C22B C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C237 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C243 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C247 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C24A                            
0009C24A                            ; PSG2 Data
0009C24A                            PasswordEntry_PSG2:
0009C24A E1FF                       	smpsAlterNote       $FF
0009C24C 800C                       	dc.b	nRst, $0C
0009C24E F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C251                            
0009C251                            ; PSG3 Data
0009C251                            PasswordEntry_PSG3:
0009C251 F502                       	smpsPSGvoice        fTone_02
0009C253 F3E7                       	smpsPSGform         $E7
0009C255 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C261 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C26D C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C274 F503                       	smpsPSGvoice        fTone_03
0009C276 C5                         	dc.b	nAb5
0009C277 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C27A                            
0009C27A                            ; DAC Data
0009C27A                            PasswordEntry_DAC:
0009C27A 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C286 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C28E F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C293 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C29F 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C2A7                            
0009C2A7                            PasswordEntry_Loop00:
0009C2A7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C2B3 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C2BB F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C2C0 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C2CC 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C2D6 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C2D9                            
0009C2D9                            PasswordEntry_Voices:
0009C2D9                            ;	Voice $00
0009C2D9                            ;	$04
0009C2D9                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C2D9                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C2D9                            	smpsVcAlgorithm     $04
0009C2D9                            	smpsVcFeedback      $00
0009C2D9                            	smpsVcUnusedBits    $00
0009C2D9                            	smpsVcDetune        $00, $00, $00, $00
0009C2D9                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C2D9                            	smpsVcRateScale     $00, $00, $00, $00
0009C2D9                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C2D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2D9                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C2D9                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C2D9                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C2D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2F2                            
0009C2F2                            ;	Voice $01
0009C2F2                            ;	$39
0009C2F2                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C2F2                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C2F2                            	smpsVcAlgorithm     $01
0009C2F2                            	smpsVcFeedback      $07
0009C2F2                            	smpsVcUnusedBits    $00
0009C2F2                            	smpsVcDetune        $00, $04, $06, $00
0009C2F2                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C2F2                            	smpsVcRateScale     $01, $01, $01, $00
0009C2F2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C2F2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2F2                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C2F2                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C2F2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C2F2                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C30B                            
0009C30B                            ;	Voice $02
0009C30B                            ;	$2C
0009C30B                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C30B                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C30B                            	smpsVcAlgorithm     $04
0009C30B                            	smpsVcFeedback      $05
0009C30B                            	smpsVcUnusedBits    $00
0009C30B                            	smpsVcDetune        $00, $02, $00, $04
0009C30B                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C30B                            	smpsVcRateScale     $00, $00, $00, $00
0009C30B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C30B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C30B                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C30B                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C30B                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C30B                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C324                            
0009C324                            
0009C324                            		even		
0009C324                            ; ---------------------------------------------------------------------------
0009C324                            ; Sound	effect pointers
0009C324                            ; ---------------------------------------------------------------------------
0009C324                            SoundIndex:
0009C324 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C328 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C32C 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C330 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C334 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C338 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C33C 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C340 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C344 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C348 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C34C 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C350 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C354 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C358 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C35C 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C360 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C364 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C368 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C36C 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C370 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C374 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C378 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C37C 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C380 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C384 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C388 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C38C 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C390 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C394 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C398 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C39C 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C3A0 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C3A4 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C3A8 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C3AC 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C3B0 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C3B4 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C3B8 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C3BC 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C3C0 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C3C4 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C3C8 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C3CC 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C3D0 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C3D4 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C3D8 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C3DC 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C3E0 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C3E4                            ptr_sndend
0009C3E4                            ; ---------------------------------------------------------------------------
0009C3E4                            ; Special sound effect pointers
0009C3E4                            ; ---------------------------------------------------------------------------
0009C3E4                            SpecSoundIndex:
0009C3E4 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C3E8 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C3EC 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C3F0 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C3F4 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C3F8 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C3FC                            ptr_specend
0009C3FC                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C3FC                            SndA0_Jump_Header:
0009C3FC                            	smpsHeaderStartSong 1
0009C3FE 01                         	smpsHeaderTempoSFX  $01
0009C3FF 01                         	smpsHeaderChanSFX   $01
0009C400                            
0009C406                            
0009C406                            ; PSG2 Data
0009C406                            SndA0_Jump_PSG2:
0009C406 F500                       	smpsPSGvoice        $00
0009C408 9E05                       	dc.b	nF2, $05
0009C40F A315                       	dc.b	nBb2, $15
0009C411 F2                         	smpsStop
0009C412                            
0009C412                            ; Song seems to not use any FM voices
0009C412                            SndA0_Jump_Voices:
0009C412                            SndA0_Jump_Voices:
0009C412                            		even
0009C412                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C43C                            		even
0009C43C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C43C                            SndDF_Header:
0009C43C                            	smpsHeaderStartSong 3
0009C43E 01                         	smpsHeaderTempoSFX  $01
0009C43F 01                         	smpsHeaderChanSFX   $01
0009C440                            
0009C446                            
0009C446                            ; FM5 Data
0009C446                            SndDF_FM5:
0009C446 EF00                       	smpsSetvoice        $00
0009C448                            
0009C448                            SndDF_Loop00:
0009C448 F800 00                    	smpsCall            SndDF_Call00
0009C44B E905                       	smpsAlterPitch $05
0009C44D E608                       	smpsFMAlterVol      $08
0009C44F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C454 E9EC                       	smpsAlterPitch $EC
0009C456 E6E0                       	smpsFMAlterVol      $E0
0009C458 F2                         	smpsStop
0009C459                            
0009C459                            SndDF_Call00:
0009C459 9902                       	dc.b	nC2, $02
0009C45B E901                       	smpsAlterPitch $01
0009C45D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C462 E9F6                       	smpsAlterPitch $F6
0009C464 E3                         	smpsReturn
0009C465                            
0009C465                            SndDF_Voices:
0009C465                            ;	Voice $00
0009C465                            ;	$07
0009C465                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C465                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C465                            	smpsVcAlgorithm     $07
0009C465                            	smpsVcFeedback      $00
0009C465                            	smpsVcUnusedBits    $00
0009C465                            	smpsVcDetune        $00, $00, $00, $00
0009C465                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C465                            	smpsVcRateScale     $00, $00, $00, $00
0009C465                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C465                            	smpsVcAmpMod        $00, $00, $00, $00
0009C465                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C465                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C465                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C465                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C47E                            		even
0009C47E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C4B0                            		even
0009C4B0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C4F4 00                         		even
0009C4F4                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C4F4                            SndD2_Header:
0009C4F4                            	smpsHeaderStartSong 3
0009C4F6 01                         	smpsHeaderTempoSFX  $01
0009C4F7 01                         	smpsHeaderChanSFX   $01
0009C4F8                            
0009C4FE                            
0009C4FE                            ; FM4 Data
0009C4FE                            SndD2_FM4:
0009C4FE EF00                       	smpsSetvoice        $00
0009C505 C645                       	dc.b	nA5, $45
0009C507 F2                         	smpsStop
0009C508                            
0009C508                            SndD2_Voices:
0009C508                            ;	Voice $00
0009C508                            ;	$04
0009C508                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C508                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C508                            	smpsVcAlgorithm     $04
0009C508                            	smpsVcFeedback      $00
0009C508                            	smpsVcUnusedBits    $00
0009C508                            	smpsVcDetune        $04, $00, $00, $02
0009C508                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C508                            	smpsVcRateScale     $00, $00, $00, $00
0009C508                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C508                            	smpsVcAmpMod        $00, $00, $00, $00
0009C508                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C508                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C508                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C508                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C522 00                         		even
0009C522                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C552                            		even
0009C552                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C582                            		even
0009C582                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C5B6                            		even
0009C5B6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C5C8                            		even
0009C5C8                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C5C8                            SndA2_Header:
0009C5C8                            	smpsHeaderStartSong 3
0009C5CA 01                         	smpsHeaderTempoSFX  $01
0009C5CB 02                         	smpsHeaderChanSFX   $02
0009C5CC                            
0009C5D8                            
0009C5D8                            ; FM3 Data
0009C5D8                            SndA2_FM3:
0009C5D8 EF00                       	smpsSetvoice        $00
0009C5DF 8106                       	dc.b	nC0, $06
0009C5E1                            
0009C5E1                            SndA2_Loop00:
0009C5E1 810E                       	dc.b	nC0, $0E
0009C5E3 E60E                       	smpsAlterVol      $0E
0009C5E5 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C5EA F2                         	smpsStop
0009C5EB                            
0009C5EB                            ; FM4 Data
0009C5EB                            SndA2_FM4:
0009C5EB EF01                       	smpsSetvoice        $01
0009C5ED A606 14                    	dc.b	nCs3, $06, $14
0009C5F0 F2                         	smpsStop
0009C5F1                            
0009C5F1                            SndA2_Voices:
0009C5F1                            ;	Voice $00
0009C5F1                            ;	$F9
0009C5F1                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C5F1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C5F1                            	smpsVcAlgorithm     $01
0009C5F1                            	smpsVcFeedback      $07
0009C5F1                            	smpsVcUnusedBits    $03
0009C5F1                            	smpsVcDetune        $03, $01, $03, $02
0009C5F1                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C5F1                            	smpsVcRateScale     $00, $00, $00, $00
0009C5F1                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C5F1                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5F1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C5F1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C5F1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C5F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C60A                            
0009C60A                            ;	Voice $01
0009C60A                            ;	$00
0009C60A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C60A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C60A                            	smpsVcAlgorithm     $00
0009C60A                            	smpsVcFeedback      $00
0009C60A                            	smpsVcUnusedBits    $00
0009C60A                            	smpsVcDetune        $00, $00, $00, $00
0009C60A                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C60A                            	smpsVcRateScale     $00, $00, $03, $03
0009C60A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C60A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C60A                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C60A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C60A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C60A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C624 00                         		even
0009C624                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C624                            Sound_3E_Header:
0009C624                            	smpsHeaderStartSong 3
0009C626 01                         	smpsHeaderTempoSFX  $01
0009C627 01                         	smpsHeaderChanSFX   $01
0009C628                            
0009C62E                            
0009C62E                            ; FM5 Data
0009C62E                            Sound_3E_3F_40_41_FM5:
0009C62E EF00                       	smpsSetvoice        $00
0009C630 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C635 F2                         	smpsStop
0009C636                            
0009C636                            Sound_3E_Voices:
0009C636                            ;	Voice $00
0009C636                            ;	$0C
0009C636                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C636                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C636                            	smpsVcAlgorithm     $04
0009C636                            	smpsVcFeedback      $01
0009C636                            	smpsVcUnusedBits    $00
0009C636                            	smpsVcDetune        $03, $03, $02, $00
0009C636                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C636                            	smpsVcRateScale     $00, $00, $00, $00
0009C636                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C636                            	smpsVcAmpMod        $00, $00, $00, $00
0009C636                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C636                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C636                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C636                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C64F                            
0009C64F                            
0009C650 00                         		even
0009C650                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C684                            		even
0009C684                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C6BA                            		even
0009C6BA                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C6BA                            Sound_70_Header:
0009C6BA                            	smpsHeaderStartSong 3
0009C6BC 01                         	smpsHeaderTempoSFX  $01
0009C6BD 02                         	smpsHeaderChanSFX   $02
0009C6BE                            
0009C6CA                            
0009C6CA                            ; FM5 Data
0009C6CA                            Sound_70_FM5:
0009C6CA EF00                       	smpsSetvoice        $00
0009C6CC 8001                       	dc.b	nRst, $01
0009C6D3 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C6D7 F2                         	smpsStop
0009C6D8                            
0009C6D8                            ; PSG3 Data
0009C6D8                            Sound_70_PSG3:
0009C6D8 F500                       	smpsPSGvoice        sTone_0D
0009C6DA 800B                       	dc.b	nRst, $0B
0009C6DC F3E7                       	smpsPSGform         $E7
0009C6DE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C6E1                            
0009C6E1                            Sound_70_Loop00:
0009C6E1 02                         	dc.b	$02
0009C6E2 EC01                       	smpsPSGAlterVol     $01
0009C6E4 E7                         	dc.b	smpsNoAttack
0009C6E5 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C6EA F2                         	smpsStop
0009C6EB                            
0009C6EB                            Sound_70_Voices:
0009C6EB                            ;	Voice $00
0009C6EB                            ;	$FA
0009C6EB                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C6EB                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C6EB                            	smpsVcAlgorithm     $02
0009C6EB                            	smpsVcFeedback      $07
0009C6EB                            	smpsVcUnusedBits    $03
0009C6EB                            	smpsVcDetune        $00, $00, $00, $00
0009C6EB                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C6EB                            	smpsVcRateScale     $00, $00, $00, $00
0009C6EB                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C6EB                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6EB                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C6EB                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C6EB                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C6EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C704                            
0009C704                            
0009C704                            		even
0009C704                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C732                            		even
0009C732                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C764                            		even
0009C764                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C790                            		even
0009C790                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C7E0                            		even
0009C7E0                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C82A                            		even
0009C82A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C886                            		even
0009C886                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C8B4                            		even
0009C8B4                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C8B4                            SpikesSFX_Header:
0009C8B4                            	smpsHeaderStartSong 3
0009C8B6 01                         	smpsHeaderTempoSFX  $01
0009C8B7 02                         	smpsHeaderChanSFX   $02
0009C8B8                            
0009C8C4                            
0009C8C4                            ; FM6 Data
0009C8C4                            SndB7_FM4:
0009C8C4 EF01                       	smpsSetvoice        $01
0009C8CB B105                       	dc.b	nC4, $05
0009C8CD F1                         	smpsModOn
0009C8CE E10A                       	smpsAlterNote       $0A
0009C8D0 E601                       	smpsAlterVol        $01
0009C8D2 F2                         	smpsStop
0009C8D3                            
0009C8D3                            ; FM5 Data
0009C8D3                            SndB7_FM5:
0009C8D3 8005                       	dc.b	nRst, $05			 
0009C8D5 EF00                       	smpsSetvoice        $00
0009C8D7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C8DD F2                         	smpsStop
0009C8DE                            
0009C8DE                            SndB7_Voices:
0009C8DE                            ;	Voice $00
0009C8DE                            ;	$34
0009C8DE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C8DE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C8DE                            	smpsVcAlgorithm     $04
0009C8DE                            	smpsVcFeedback      $06
0009C8DE                            	smpsVcUnusedBits    $00
0009C8DE                            	smpsVcDetune        $0D, $00, $00, $00
0009C8DE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C8DE                            	smpsVcRateScale     $00, $00, $00, $00
0009C8DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8DE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C8DE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C8DE                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C8DE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C8F7                            
0009C8F7                            ;	Voice $01
0009C8F7                            ;	$FA
0009C8F7                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C8F7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C8F7                            	smpsVcAlgorithm     $02
0009C8F7                            	smpsVcFeedback      $07
0009C8F7                            	smpsVcUnusedBits    $03
0009C8F7                            	smpsVcDetune        $03, $01, $03, $02
0009C8F7                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C8F7                            	smpsVcRateScale     $00, $00, $00, $00
0009C8F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8F7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8F7                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C8F7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C8F7                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C8F7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C910                            		even
0009C910                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C94C                            		even
0009C94C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C94C                            SndBD_Header:
0009C94C                            	smpsHeaderStartSong 3
0009C94E 01                         	smpsHeaderTempoSFX  $01
0009C94F 01                         	smpsHeaderChanSFX   $01
0009C950                            
0009C956                            
0009C956                            ; FM6 Data
0009C956                            SndBD_FM3:
0009C956 EF00                       	smpsSetvoice        $00
0009C958                            
0009C958                            SndBD_Loop00:
0009C958 C009                       	dc.b	nEb5, $09
0009C95A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C95F F2                         	smpsStop
0009C960                            
0009C960                            SndBD_Voices:
0009C960                            ;	Voice $00
0009C960                            ;	$02
0009C960                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C960                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C960                            	smpsVcAlgorithm     $02
0009C960                            	smpsVcFeedback      $00
0009C960                            	smpsVcUnusedBits    $00
0009C960                            	smpsVcDetune        $00, $02, $05, $00
0009C960                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C960                            	smpsVcRateScale     $00, $00, $00, $00
0009C960                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C960                            	smpsVcAmpMod        $00, $00, $00, $00
0009C960                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C960                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C960                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C960                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C97A 00                         		even
0009C97A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C97A                            Sound_59_Header:
0009C97A                            	smpsHeaderStartSong 3
0009C97C 01                         	smpsHeaderTempoSFX  $01
0009C97D 04                         	smpsHeaderChanSFX   $04
0009C97E                            
0009C996                            
0009C996                            ; FM3 Data
0009C996                            Sound_59_FM3:
0009C996 E040                       	smpsPan             panRight, $00
0009C998 8002                       	dc.b	nRst, $02
0009C99A F600 00                    	smpsJump            Sound_59_FM4
0009C99D                            
0009C99D                            ; FM5 Data
0009C99D                            Sound_59_FM5:
0009C99D E080                       	smpsPan             panLeft, $00
0009C99F 8001                       	dc.b	nRst, $01
0009C9A1                            
0009C9A1                            ; FM4 Data
0009C9A1                            Sound_59_FM4:
0009C9A1 EF00                       	smpsSetvoice        $00
0009C9A8 8110                       	dc.b	nC0, $10
0009C9AA F2                         	smpsStop
0009C9AB                            
0009C9AB                            ; PSG3 Data
0009C9AB                            Sound_59_PSG3:
0009C9B0 F3E7                       	smpsPSGform         $E7
0009C9B2                            
0009C9B2                            Sound_59_Loop00:
0009C9B2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C9B5 EC03                       	smpsPSGAlterVol     $03
0009C9B7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C9BC F2                         	smpsStop
0009C9BD                            
0009C9BD                            Sound_59_Voices:
0009C9BD                            ;	Voice $00
0009C9BD                            ;	$F9
0009C9BD                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C9BD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C9BD                            	smpsVcAlgorithm     $01
0009C9BD                            	smpsVcFeedback      $07
0009C9BD                            	smpsVcUnusedBits    $03
0009C9BD                            	smpsVcDetune        $03, $01, $03, $02
0009C9BD                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C9BD                            	smpsVcRateScale     $00, $00, $00, $00
0009C9BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9BD                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9BD                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C9BD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C9BD                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C9BD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9D6                            
0009C9D6                            
0009C9D6                            		even
0009C9D6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C9FE                            		even
0009C9FE                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009CA2A                            		even
0009CA2A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009CA2A                            Sound_B6_Header:
0009CA2A                            	smpsHeaderStartSong 3
0009CA2C 01                         	smpsHeaderTempoSFX  $01
0009CA2D 02                         	smpsHeaderChanSFX   $02
0009CA2E                            
0009CA3A                            
0009CA3A                            ; FM5 Data
0009CA3A                            Sound_B6_FM5:
0009CA3A EF00                       	smpsSetvoice        $00
0009CA41 CD0F                       	dc.b	nE6, $0F
0009CA43 F2                         	smpsStop
0009CA44                            
0009CA44                            ; PSG3 Data
0009CA44                            Sound_B6_PSG3:
0009CA44 F507                       	smpsPSGvoice        sTone_1D
0009CA46 8006                       	dc.b	nRst, $06
0009CA4D F3E7                       	smpsPSGform         $E7
0009CA4F CD4F                       	dc.b	nE6, $4F
0009CA51 F2                         	smpsStop
0009CA52                            
0009CA52                            Sound_B6_Voices:
0009CA52                            ;	Voice $00
0009CA52                            ;	$3D
0009CA52                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009CA52                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009CA52                            	smpsVcAlgorithm     $05
0009CA52                            	smpsVcFeedback      $07
0009CA52                            	smpsVcUnusedBits    $00
0009CA52                            	smpsVcDetune        $00, $00, $00, $00
0009CA52                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009CA52                            	smpsVcRateScale     $00, $00, $00, $00
0009CA52                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA52                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA52                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009CA52                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009CA52                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CA52                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA6B                            
0009CA6B                            
0009CA6C 00                         		even
0009CA6C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009CAC0                            		even
0009CAC0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009CAFA                            		even
0009CAFA                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009CB6C                            		even
0009CB6C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009CB9A                            		even
0009CB9A                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009CBD4                            		even
0009CBD4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009CBD4                            SndC1_Header:
0009CBD4                            	smpsHeaderStartSong 3
0009CBD6 01                         	smpsHeaderTempoSFX  $01
0009CBD7 01                         	smpsHeaderChanSFX   $01
0009CBD8                            
0009CBDE                            
0009CBDE                            ; FM4 Data
0009CBDE                            SndC1_FM4:
0009CBDE EF00                       	smpsSetvoice        $00
0009CBE0 D506 40                    	dc.b	nC7, $06, $40
0009CBE3 F2                         	smpsStop
0009CBE4                            
0009CBE4                            SndC1_Voices:
0009CBE4                            ;	Voice $00
0009CBE4                            ;	$38
0009CBE4                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009CBE4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009CBE4                            	smpsVcAlgorithm     $00
0009CBE4                            	smpsVcFeedback      $07
0009CBE4                            	smpsVcUnusedBits    $00
0009CBE4                            	smpsVcDetune        $00, $00, $00, $00
0009CBE4                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009CBE4                            	smpsVcRateScale     $00, $00, $00, $00
0009CBE4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CBE4                            	smpsVcAmpMod        $00, $00, $00, $00
0009CBE4                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009CBE4                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CBE4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CBE4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CBFE 00                         		even
0009CBFE                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CC78                            		even
0009CC78                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CCA0                            		even
0009CCA0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CCA0                            Sound_B0_Header:
0009CCA0                            	smpsHeaderStartSong 3
0009CCA2 01                         	smpsHeaderTempoSFX  $01
0009CCA3 03                         	smpsHeaderChanSFX   $03
0009CCA4                            
0009CCB6                            
0009CCB6                            ; FM5 Data
0009CCB6                            Sound_B0_FM5:
0009CCB6 EF00                       	smpsSetvoice        $00
0009CCB8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CCBE F2                         	smpsStop
0009CCBF                            
0009CCBF                            ; FM4 Data
0009CCBF                            Sound_B0_FM4:
0009CCBF EF01                       	smpsSetvoice        $01
0009CCC1 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CCC5 F2                         	smpsStop
0009CCC6                            
0009CCC6                            ; FM3 Data
0009CCC6                            Sound_B0_FM3:
0009CCC6 EF02                       	smpsSetvoice        $02
0009CCC8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CCCF F2                         	smpsStop
0009CCD0                            
0009CCD0                            Sound_B0_Voices:
0009CCD0                            ;	Voice $00
0009CCD0                            ;	$3B
0009CCD0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CCD0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CCD0                            	smpsVcAlgorithm     $03
0009CCD0                            	smpsVcFeedback      $07
0009CCD0                            	smpsVcUnusedBits    $00
0009CCD0                            	smpsVcDetune        $00, $00, $00, $00
0009CCD0                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CCD0                            	smpsVcRateScale     $02, $00, $00, $00
0009CCD0                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CCD0                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCD0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CCD0                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCD0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CCD0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCE9                            
0009CCE9                            ;	Voice $01
0009CCE9                            ;	$04
0009CCE9                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CCE9                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CCE9                            	smpsVcAlgorithm     $04
0009CCE9                            	smpsVcFeedback      $00
0009CCE9                            	smpsVcUnusedBits    $00
0009CCE9                            	smpsVcDetune        $04, $07, $07, $03
0009CCE9                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CCE9                            	smpsVcRateScale     $00, $00, $00, $00
0009CCE9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCE9                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCE9                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CCE9                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CCE9                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CCE9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD02                            
0009CD02                            ;	Voice $02
0009CD02                            ;	$3C
0009CD02                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CD02                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CD02                            	smpsVcAlgorithm     $04
0009CD02                            	smpsVcFeedback      $07
0009CD02                            	smpsVcUnusedBits    $00
0009CD02                            	smpsVcDetune        $00, $00, $00, $00
0009CD02                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CD02                            	smpsVcRateScale     $00, $00, $00, $00
0009CD02                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CD02                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD02                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CD02                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CD02                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CD02                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD1B                            
0009CD1B                            
0009CD1C 00                         		even
0009CD1C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CD5E                            		even
0009CD5E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CD8C                            		even
0009CD8C                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CD9E                            		even
0009CD9E                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CDCC                            		even
0009CDCC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CDFA                            		even
0009CDFA                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CE46                            		even
0009CE46                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CE46                            Spring_Header:
0009CE46                            	smpsHeaderStartSong 1
0009CE48 01                         	smpsHeaderTempoSFX  $01
0009CE49 01                         	smpsHeaderChanSFX   $01
0009CE4A                            
0009CE50                            
0009CE50                            ; FM6 Data
0009CE50                            Spring_FM6:
0009CE50 EF00                       	smpsSetvoice        $00
0009CE52 8001                       	dc.b	nRst, $01
0009CE59 B006                       	dc.b	nB3, $06
0009CE5B F4                         	smpsModOff
0009CE5C EF01                       	smpsSetvoice        $01
0009CE5E                            
0009CE5E                            Spring_Loop00:
0009CE5E BD02                       	dc.b	nC5, $02
0009CE60 E601                       	smpsAlterVol      $01
0009CE62 E7                         	dc.b	smpsNoAttack
0009CE63 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CE68 F2                         	smpsStop
0009CE69                            
0009CE69                            Spring_Voices:
0009CE69                            ;	Voice $00
0009CE69                            ;	$20
0009CE69                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CE69                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CE69                            	smpsVcAlgorithm     $00
0009CE69                            	smpsVcFeedback      $04
0009CE69                            	smpsVcUnusedBits    $00
0009CE69                            	smpsVcDetune        $03, $03, $03, $03
0009CE69                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CE69                            	smpsVcRateScale     $02, $02, $03, $03
0009CE69                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CE69                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE69                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CE69                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CE69                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CE69                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE82                            
0009CE82                            ;	Voice $01
0009CE82                            ;	$20
0009CE82                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CE82                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CE82                            	smpsVcAlgorithm     $00
0009CE82                            	smpsVcFeedback      $04
0009CE82                            	smpsVcUnusedBits    $00
0009CE82                            	smpsVcDetune        $03, $03, $03, $03
0009CE82                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CE82                            	smpsVcRateScale     $02, $02, $02, $02
0009CE82                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CE82                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE82                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CE82                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CE82                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CE82                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE9C 00                         		even
0009CE9C                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CE9C                            Snd99_Header:
0009CE9C                            	smpsHeaderStartSong 3
0009CE9E 01                         	smpsHeaderTempoSFX  $01
0009CE9F 01                         	smpsHeaderChanSFX   $01
0009CEA0                            
0009CEA6                            
0009CEA6                            ; FM4 Data
0009CEA6                            Snd99_FM4:
0009CEA6 EF00                       	smpsSetvoice        $00
0009CEA8 B502                       	dc.b	nE4, $02
0009CEAA F2                         	smpsStop
0009CEAB                            
0009CEAB                            Snd99_Voices:
0009CEAB                            ;	Voice $00
0009CEAB                            ;	$07
0009CEAB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CEAB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CEAB                            	smpsVcAlgorithm     $07
0009CEAB                            	smpsVcFeedback      $00
0009CEAB                            	smpsVcUnusedBits    $00
0009CEAB                            	smpsVcDetune        $00, $00, $00, $00
0009CEAB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CEAB                            	smpsVcRateScale     $00, $00, $00, $00
0009CEAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CEAB                            	smpsVcAmpMod        $00, $00, $00, $00
0009CEAB                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CEAB                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CEAB                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CEAB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CEC4                            		even
0009CEC4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CEF2                            		even
0009CEF2                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CEF2                            SignpostCD_Header:
0009CEF2                            	smpsHeaderStartSong 3
0009CEF4 01                         	smpsHeaderTempoSFX  $01
0009CEF5 02                         	smpsHeaderChanSFX   $02
0009CEF6                            
0009CF02                            
0009CF02                            ; FM5 Data
0009CF02                            Snd9D_FM5:
0009CF02 8004                       	dc.b	nRst, $04
0009CF04                            
0009CF04                            ; FM4 Data
0009CF04                            Snd9D_FM4:
0009CF04 EF00                       	smpsSetvoice        $00
0009CF06                            
0009CF06                            Snd9D_Loop00:
0009CF06 B405                       	dc.b	nEb4, $05
0009CF08 E604                       	smpsFMAlterVol      $04
0009CF0A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CF0F F2                         	smpsStop
0009CF10                            
0009CF10                            Snd9D_Voices:
0009CF10                            ;	Voice $00
0009CF10                            ;	$F4
0009CF10                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CF10                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CF10                            	smpsVcAlgorithm     $04
0009CF10                            	smpsVcFeedback      $06
0009CF10                            	smpsVcUnusedBits    $03
0009CF10                            	smpsVcDetune        $00, $00, $00, $00
0009CF10                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CF10                            	smpsVcRateScale     $00, $00, $00, $00
0009CF10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF10                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF10                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CF10                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CF10                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CF10                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF2A 00                         		even
0009CF2A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CF64                            		even
0009CF64                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CF64                            Sound_41_Header:
0009CF64                            	smpsHeaderStartSong 3
0009CF66 01                         	smpsHeaderTempoSFX  $01
0009CF67 01                         	smpsHeaderChanSFX   $01
0009CF68                            
0009CF6E                            	
0009CF6E                            Sound41_FM5:
0009CF6E EF00                       	smpsSetvoice        $00
0009CF70 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CF75 F2                         	smpsStop
0009CF76                            
0009CF76                            Sound_41_Voices:
0009CF76                            ;	Voice $00
0009CF76                            ;	$36
0009CF76                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CF76                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CF76                            	smpsVcAlgorithm     $06
0009CF76                            	smpsVcFeedback      $06
0009CF76                            	smpsVcUnusedBits    $00
0009CF76                            	smpsVcDetune        $00, $00, $01, $00
0009CF76                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CF76                            	smpsVcRateScale     $00, $00, $00, $00
0009CF76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF76                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF76                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CF76                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CF76                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CF76                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF8F                            
0009CF8F                            
0009CF90 00                         		even
0009CF90                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CF90                            Snd9B_Header:
0009CF90                            	smpsHeaderStartSong 3
0009CF92 01                         	smpsHeaderTempoSFX  $01
0009CF93 01                         	smpsHeaderChanSFX   $01
0009CF94                            
0009CF9A                            
0009CF9A                            ; FM5 Data
0009CF9A                            Snd9B_FM5:
0009CF9A EF00                       	smpsSetvoice        $00
0009CF9C 8001                       	dc.b	nRst, $01
0009CFA3 CA25                       	dc.b	nCs6, $25
0009CFA5 F4                         	smpsModOff
0009CFA6                            
0009CFA6                            Snd9B_Loop00:
0009CFA6 E7                         	dc.b	smpsNoAttack
0009CFA7 E601                       	smpsFMAlterVol      $01
0009CFA9 D102                       	dc.b	nAb6, $02
0009CFAB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CFB0 F2                         	smpsStop
0009CFB1                            
0009CFB1                            Snd9B_Voices:
0009CFB1                            ;	Voice $00
0009CFB1                            ;	$3C
0009CFB1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CFB1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CFB1                            	smpsVcAlgorithm     $04
0009CFB1                            	smpsVcFeedback      $07
0009CFB1                            	smpsVcUnusedBits    $00
0009CFB1                            	smpsVcDetune        $00, $00, $04, $00
0009CFB1                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CFB1                            	smpsVcRateScale     $00, $00, $00, $00
0009CFB1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CFB1                            	smpsVcAmpMod        $00, $00, $00, $00
0009CFB1                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CFB1                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CFB1                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CFB1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CFCA                            
0009CFCA                            
0009CFCA                            		even		
0009CFCA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009D062                            		even
0009D062                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009D06E                            		even				
0009D06E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009D0AA                            		even			
0009D0AA                            		; Don't let Sega sample cross $8000-byte boundary
0009D0AA                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1254                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2186                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1184                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 1302                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 1302                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 188C                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 188C                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 188C                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 2430                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1254                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A04                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20E0                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A04                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A6                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B04 4E75                       		rts
000A6B06                            ; ===========================================================================
000A6B06                            ; loc_90B6:
000A6B06                            OptionScreen_Select_Not1P:
000A6B06 5300                       		subq.b	#1,d0
000A6B08 6600                       		bne.s	OptionScreen_Select_Other
000A6B0A 60B4                       		bra.s	OptionScreen_Main
000A6B0C                            ; ===========================================================================
000A6B0C                            ; loc_90D8:
000A6B0C                            OptionScreen_Select_Other:
000A6B0C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B12 4E75                       		rts
000A6B14                            
000A6B14                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B14                            
000A6B14                            ;sub_90E0:
000A6B14                            OptionScreen_Controls:
000A6B14 7400                       		moveq	#0,d2
000A6B16 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B1A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B22 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B24 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B26 6400                       		bcc.s	Option_Controls_Down
000A6B28 143C 0002                  		move.b	#2,d2
000A6B2C                            
000A6B2C                            Option_Controls_Down:
000A6B2C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B30 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B32 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B34 0C02 0003                  		cmpi.b	#3,d2
000A6B38 6500                       		blo.s	Option_Controls_Refresh
000A6B3A 7400                       		moveq	#0,d2
000A6B3C                            
000A6B3C                            Option_Controls_Refresh:
000A6B3C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B40 E54A                       		lsl.w	#2,d2
000A6B42 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B46 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B4A 3411                       		move.w	(a1),d2
000A6B4C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B50 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B52 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B54 6400                       		bcc.s	Option_Controls_Right
000A6B56 1403                       		move.b	d3,d2
000A6B58                            
000A6B58                            Option_Controls_Right:
000A6B58 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B5C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B60 B403                       		cmp.b	d3,d2
000A6B62 6300                       		bls.s	Option_Controls_Button_A
000A6B64 7400                       		moveq	#0,d2
000A6B66                            
000A6B66                            Option_Controls_Button_A:
000A6B66 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B6A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B6C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B70 B403                       		cmp.b	d3,d2
000A6B72 6300                       		bls.s	Option_Controls_Refresh2
000A6B74 7400                       		moveq	#0,d2
000A6B76                            
000A6B76                            Option_Controls_Refresh2:
000A6B76 3282                       		move.w	d2,(a1)
000A6B78                            
000A6B78                            Option_Controls_NoMove:
000A6B78 4E75                       		rts
000A6B7A                            ; End of function OptionScreen_Controls
000A6B7A                            
000A6B7A                            ; ===========================================================================
000A6B7A                            ; word_917A:
000A6B7A                            OptionScreen_Choices:
000A6B7A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B82 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B86                            		even
000A6B86                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B86                            
000A6B86                            
000A6B86                            OptionScreen_DrawSelected:
000A6B86 6100 0000                  		bsr.w	loc_9268
000A6B8A 7200                       		moveq	#0,d1
000A6B8C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B90 E749                       		lsl.w	#3,d1
000A6B92 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B98 47F3 1000                  		lea	(a3,d1.w),a3
000A6B9C 303C 6000                  		move.w	#$6000,d0
000A6BA0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA6 225B                       		movea.l	(a3)+,a1
000A6BA8 6100 FE7C                  		bsr.w	MenuScreenTextToRAM
000A6BAC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BB2 7200                       		moveq	#0,d1
000A6BB4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BBA 6700                       		beq.s	loc_9186
000A6BBC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BC0 E549                       		lsl.w	#2,d1
000A6BC2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BCA 3211                       		move.w	(a1),d1
000A6BCC E549                       		lsl.w	#2,d1
000A6BCE                            
000A6BCE                            loc_9186:		
000A6BCE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BD2 6100 FE52                  		bsr.w	MenuScreenTextToRAM
000A6BD6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD6                            		;bne.s	loc2_9186
000A6BD6                            		;lea	($FFFF00C2).l,a2
000A6BD6                            		;bsr.w	loc_9296
000A6BD6                            
000A6BD6                            loc2_9186:		
000A6BD6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BDC 201B                       		move.l	(a3)+,d0
000A6BDE 7215                       		moveq	#$15,d1
000A6BE0 7407                       		moveq	#7,d2
000A6BE2 4EF8 12D8                  		jmp	TilemapToVRAM
000A6BE6                            ; ===========================================================================
000A6BE6                            
000A6BE6                            OptionScreen_DrawUnselected:
000A6BE6 6100 0000                  		bsr.w	loc_9268
000A6BEA 7200                       		moveq	#0,d1
000A6BEC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BF0 E749                       		lsl.w	#3,d1
000A6BF2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BFC 7000                       		moveq	#0,d0
000A6BFE 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C04 225B                       		movea.l	(a3)+,a1
000A6C06 6100 FE1E                  		bsr.w	MenuScreenTextToRAM
000A6C0A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C10 7200                       		moveq	#0,d1
000A6C12 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C18 6700                       		beq.s	loc2_91F8
000A6C1A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1E E549                       		lsl.w	#2,d1
000A6C20 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C24 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C28 3211                       		move.w	(a1),d1
000A6C2A E549                       		lsl.w	#2,d1
000A6C2C                            
000A6C2C                            loc2_91F8		
000A6C2C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C30 6100 FDF4                  		bsr.w	MenuScreenTextToRAM
000A6C34                            		;cmpi.b	#2,(Options_menu_box).w
000A6C34                            		;bne.s	loc3_91F8
000A6C34                            		;lea	($FFFF0222).l,a2
000A6C34                            		;bsr.w	loc_9296
000A6C34                            
000A6C34                            loc3_91F8		
000A6C34 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C3A 201B                       		move.l	(a3)+,d0
000A6C3C 7215                       		moveq	#$15,d1
000A6C3E 7407                       		moveq	#7,d2
000A6C40 4EF8 12D8                  		jmp	TilemapToVRAM
000A6C44                            ; ===========================================================================
000A6C44                            
000A6C44                            loc_9268:
000A6C44 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C4A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4E 6A00                       		bpl.s	loc2_9268
000A6C50 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C56                            
000A6C56                            loc2_9268:
000A6C56 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C5A 6700                       		beq.s	loc3_9268
000A6C5C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C62                            
000A6C62                            loc3_9268:
000A6C62 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C68 6600                       		bne.s	loc4_9268		; rts
000A6C6A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C70                            
000A6C70                            loc4_9268:
000A6C70 4E75                       		rts
000A6C72                            ; ===========================================================================
000A6C72                            
000A6C72                            loc_9296:
000A6C72 4E75                       		rts
000A6C74                            
000A6C74                            Dynamic_Menu:
000A6C74 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C78                            
000A6C78                            loc_3FF30:
000A6C78 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C7A                            
000A6C7A                            loc_3FF32:
000A6C7A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C7C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7E 7000                       	moveq	#0,d0
000A6C80 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C84 B02A 0006                  	cmp.b	6(a2),d0
000A6C88 6500                       	blo.s	loc_3FF48
000A6C8A 7000                       	moveq	#0,d0
000A6C8C 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C90                            
000A6C90                            loc_3FF48:
000A6C90 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C94 1692                       	move.b	(a2),(a3)	; set timer
000A6C96 6A00                       	bpl.s	loc_3FF56
000A6C98 D040                       	add.w	d0,d0
000A6C9A 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9E                            
000A6C9E                            loc_3FF56:
000A6C9E 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CA2 EB48                       	lsl.w	#5,d0
000A6CA4 342A 0004                  	move.w	4(a2),d2
000A6CA8 2212                       	move.l	(a2),d1
000A6CAA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CB0 D280                       	add.l	d0,d1
000A6CB2 7600                       	moveq	#0,d3
000A6CB4 162A 0007                  	move.b	7(a2),d3
000A6CB8 E94B                       	lsl.w	#4,d3
000A6CBA 4EB9 0000 142A             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CC0                            
000A6CC0                            loc_3FF78:
000A6CC0 102A 0006                  	move.b	6(a2),d0
000A6CC4 4A12                       	tst.b	(a2)
000A6CC6 6A00                       	bpl.s	loc_3FF82
000A6CC8 D000                       	add.b	d0,d0
000A6CCA                            
000A6CCA                            loc_3FF82:
000A6CCA 5200                       	addq.b	#1,d0
000A6CCC 0240 00FE                  	andi.w	#$FE,d0
000A6CD0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD4 544B                       	addq.w	#2,a3
000A6CD6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CDA 4E75                       	rts
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ; MENU ANIMATION SCRIPT
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ;word_87C6:
000A6CDC                            Anim_SonicMilesBG:
000A6CDC 0000                       	dc.w   0
000A6CDE                            ; Sonic/Miles animated background
000A6CDE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CE2 0020                       	dc.w $20
000A6CE4 06                         	dc.b 6
000A6CE5 0A                         	dc.b $A
000A6CE6 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE8 0A05                       	dc.b  $A,  5	; 2
000A6CEA 1405                       	dc.b $14,  5	; 4
000A6CEC 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEE 1405                       	dc.b $14,  5	; 8
000A6CF0 0A05                       	dc.b  $A,  5	; 10	
000A6CF2                            ; ===========================================================================
000A6CF2                            ; off_92BA:
000A6CF2                            OptScrBoxData:
000A6CF2                            
000A6CF2 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF6 4192                       		dc.w $4192
000A6CF8 0003                       		dc.w 3
000A6CFA 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFE 4592                       		dc.w $4592
000A6D00 0003                       		dc.w 3
000A6D02 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D06 4992                       		dc.w $4992
000A6D08 0003                       		dc.w 3
000A6D0A                            
000A6D0A                            off_92D2:
000A6D0A 0000 0000                  		dc.l TextOptScr_Default
000A6D0E 0000 0000                  		dc.l TextOptScr_Original
000A6D12 0000 0000                  		dc.l TextOptScr_Beta
000A6D16 0000 0000                  		dc.l TextOptScr_Midnight
000A6D1A 0000 0000                  		dc.l TextOptScr_C2
000A6D1E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D22 0000 0000                  		dc.l TextOptScr_RHS
000A6D26 0000 0000                  		dc.l TextOptScr_Socket
000A6D2A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D32                            off_92DE:
000A6D32 0000 0000                  		dc.l TextOptScr_Default
000A6D36 0000 0000                  		dc.l TextOptScr_Original
000A6D3A 0000 0000                  		dc.l TextOptScr_Beta
000A6D3E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D42 0000 0000                  		dc.l TextOptScr_C2
000A6D46 0000 0000                  		dc.l TextOptScr_Clackers
000A6D4A 0000 0000                  		dc.l TextOptScr_RHS
000A6D4E 0000 0000                  		dc.l TextOptScr_Socket
000A6D52 0000 0000                  		dc.l TextOptScr_Cringe
000A6D56 0000 0000                  		dc.l TextOptScr_Dark	
000A6D5A                            off_92EA:
000A6D5A 0000 0000                  		dc.l TextOptScr_On
000A6D5E 0000 0000                  		dc.l TextOptScr_Off
000A6D62                            off_92F2:
000A6D62 0000 0000                  		dc.l TextOptScr_Null
000A6D66 0000 0000                  		dc.l TextOptScr_Null2
000A6D6A                            ; ===========================================================================
000A6D6A                            
000A6E89                            ; ============================================================================
000A6E89                            
000A6E89                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A738A 00                         		even
000A738A                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7536                            		even
000A7536                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AA0                            		even
000A7AA0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B20                            		even
000A7B20                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B4C                            		even
000A7B4C                            		even
000A7B4C                            
000A7B4C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253D0                                        even
001253D0                            
001253D0                            Art_Dust:	incbin	artunc\spindust.bin
00126D10                            
00126D10                            ; ===============================================================
00126D10                            ; ---------------------------------------------------------------
00126D10                            ; Error handling module
00126D10                            ; ---------------------------------------------------------------
00126D10                             
00126D10 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D14 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1E 01                                 dc.b    1               ; extended stack frame
00126D20 00                                 even
00126D20                             
00126D20 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D24 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D32 01                                 dc.b    1               ; extended stack frame
00126D34 00                                 even
00126D34                             
00126D34 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D38 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D4C 00                                 dc.b    0               ; extended stack frame
00126D4E 00                                 even
00126D4E                             
00126D4E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D52 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5E 00                                 dc.b    0               ; extended stack frame
00126D60 00                                 even
00126D60                             
00126D60 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D64 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D74 00                                 dc.b    0               ; extended stack frame
00126D76 00                                 even
00126D76                             
00126D76 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D7A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D8C 00                                 dc.b    0               ; extended stack frame
00126D8E 00                                 even
00126D8E                             
00126D8E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D92 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA6 00                                 dc.b    0               ; extended stack frame
00126DA8 00                                 even
00126DA8                             
00126DA8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DAC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DB2 00                                 dc.b    0               ; extended stack frame
00126DB4 00                                 even
00126DB4                             
00126DB4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DCB 00                                 dc.b    0               ; extended stack frame
00126DCC                                    even
00126DCC                             
00126DCC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DD0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DE3 00                                 dc.b    0               ; extended stack frame
00126DE4                                    even
00126DE4                             
00126DE4 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE8 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF8 00                                 dc.b    0               ; extended stack frame
00126DFA 00                                 even
00126DFA                             
00126DFA                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DE                            
001275DE                            ; end of 'ROM'
001275DE                            		even
001275DE                            EndOfRom:
001275DE                            
001275DE                            
