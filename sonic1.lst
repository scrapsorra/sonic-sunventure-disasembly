00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F16 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F1C                            
00000F1C                            	@nochg:
00000F1C 4A78 F614                  		tst.w	(v_demolength).w
00000F20 6700 0000                  		beq.w	@end
00000F24 5378 F614                  		subq.w	#1,(v_demolength).w
00000F28                            
00000F28                            	@end:
00000F28 4E75                       		rts	
00000F2A                            
00000F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2A                            
00000F2A                            
00000F2A                            sub_106E:
00000F2A 33FC 0100 00A1 1100        		stopZ80
00000F32 0839 0000 00A1 1100 66F6   		waitZ80
00000F3C 6100 0000                  		bsr.w	ReadJoypads
00000F40 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F44 6600                       		bne.s	@waterabove	; if yes, branch
00000F46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6A 6000                       		bra.s	@waterbelow
00000F6C                            
00000F6C                            	@waterabove:
00000F6C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F90                            
00000F90                            	@waterbelow:
00000F90 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB4 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FD8 33FC 0000 00A1 1100        		startZ80
00000FE0 4E75                       		rts	
00000FE2                            ; End of function sub_106E
00000FE2                            
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            ; Horizontal interrupt
00000FE2                            ; ---------------------------------------------------------------------------
00000FE2                            
00000FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE2                            
00000FE2                            
00000FE2                            HBlank:
00000FE2 46FC 2700                  		disable_ints
00000FE6 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEA 6700                       		beq.s	@nochg		; if not, branch
00000FEC 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FF6 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00000FFC 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001000 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001008 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100A 2298                       		move.l	(a0)+,(a1)
0000100C 2298                       		move.l	(a0)+,(a1)
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000104E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001052 4A38 F64F                  		tst.b	($FFFFF64F).w
00001056 6600                       		bne.s	loc_119E
00001058                            
00001058                            	@nochg:
00001058 4E73                       		rte	
0000105A                            ; ===========================================================================
0000105A                            
0000105A                            loc_119E:
0000105A 4238 F64F                  		clr.b	($FFFFF64F).w
0000105E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001062 6100 FC98                  		bsr.w	Demo_Time	
00001066 4EB9 0000 0000             		jsr	(UpdateMusic).l
0000106C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001070 4E73                       		rte	
00001072                            ; End of function HBlank
00001072                            
00001072                            ; ---------------------------------------------------------------------------
00001072                            ; Subroutine to	initialise joypads
00001072                            ; ---------------------------------------------------------------------------
00001072                            
00001072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001072                            
00001072                            
00001072                            JoypadInit:
00001072 33FC 0100 00A1 1100        		stopZ80
0000107A 0839 0000 00A1 1100 66F6   		waitZ80
00001084 7040                       		moveq	#$40,d0
00001086 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000108C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001092 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
00001098 33FC 0000 00A1 1100        		startZ80
000010A0 4E75                       		rts	
000010A2                            ; End of function JoypadInit
000010A2                            
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; Subroutine to	read joypad input, and send it to the RAM
000010A2                            ; ---------------------------------------------------------------------------
000010A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A2                            
000010A2                            
000010A2                            ReadJoypads:
000010A2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010AC 6100                       		bsr.s	@read		; do the first joypad
000010AE 5449                       		addq.w	#2,a1		; do the second	joypad
000010B0                            
000010B0                            	@read:
000010B0 12BC 0000                  		move.b	#0,(a1)
000010B4 4E71                       		nop	
000010B6 4E71                       		nop	
000010B8 1011                       		move.b	(a1),d0
000010BA E508                       		lsl.b	#2,d0
000010BC 0200 00C0                  		andi.b	#$C0,d0
000010C0 12BC 0040                  		move.b	#$40,(a1)
000010C4 4E71                       		nop	
000010C6 4E71                       		nop	
000010C8 1211                       		move.b	(a1),d1
000010CA 0201 003F                  		andi.b	#$3F,d1
000010CE 8001                       		or.b	d1,d0
000010D0 4600                       		not.b	d0
000010D2 1210                       		move.b	(a0),d1
000010D4 B101                       		eor.b	d0,d1
000010D6 10C0                       		move.b	d0,(a0)+
000010D8 C200                       		and.b	d0,d1
000010DA 10C1                       		move.b	d1,(a0)+
000010DC 4E75                       		rts	
000010DE                            ; End of function ReadJoypads
000010DE                            
000010DE                            
000010DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010DE                            
000010DE                            
000010DE                            VDPSetupGame:
000010DE 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E4 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F0 7E12                       		moveq	#$12,d7
000010F2                            
000010F2                            	@setreg:
000010F2 309A                       		move.w	(a2)+,(a0)
000010F4 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010F8                            
000010F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000010FE 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001102 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001108 7000                       		moveq	#0,d0
0000110A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001114 3E3C 003F                  		move.w	#$3F,d7
00001118                            
00001118                            	@clrCRAM:
00001118 3280                       		move.w	d0,(a1)
0000111A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000111E                            
0000111E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001122 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001126 2F01                       		move.l	d1,-(sp)
00001128 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114A                            
0000114A                            	@waitforDMA:
0000114A 3215                       		move.w	(a5),d1
0000114C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001150 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001152                            
00001152 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
00001156 221F                       		move.l	(sp)+,d1
00001158 4E75                       		rts	
0000115A                            ; End of function VDPSetupGame
0000115A                            
0000115A                            ; ===========================================================================
0000115A 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
0000115C 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
0000115E 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001160 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001162 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001164 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
00001166 8600                       		dc.w $8600		; unused
00001168 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116A 8800                       		dc.w $8800		; unused
0000116C 8900                       		dc.w $8900		; unused
0000116E 8A00                       		dc.w $8A00		; default H.interrupt register
00001170 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001172 8C81                       		dc.w $8C81		; 40-cell display mode
00001174 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
00001176 8E00                       		dc.w $8E00		; unused
00001178 8F02                       		dc.w $8F02		; set VDP increment size
0000117A 9001                       		dc.w $9001		; 64-cell hscroll size
0000117C 9100                       		dc.w $9100		; window horizontal position
0000117E 9200                       		dc.w $9200		; window vertical position
00001180                            
00001180                            ; ---------------------------------------------------------------------------
00001180                            ; Subroutine to	clear the screen
00001180                            ; ---------------------------------------------------------------------------
00001180                            
00001180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001180                            
00001180                            
00001180                            ClearScreen:
00001180 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A2                            
000011A2                            	@wait1:
000011A2 3215                       		move.w	(a5),d1
000011A4 0801 0001                  		btst	#1,d1
000011A8 66F8                       		bne.s	@wait1
000011AA                            
000011AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011AE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D0                            
000011D0                            	@wait2:
000011D0 3215                       		move.w	(a5),d1
000011D2 0801 0001                  		btst	#1,d1
000011D6 66F8                       		bne.s	@wait2
000011D8                            
000011D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000011DC 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E0 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E4                            
000011E4 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011E8 7000                       		moveq	#0,d0
000011EA 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011EE                            
000011EE                            	@clearsprites:
000011EE 22C0                       		move.l	d0,(a1)+
000011F0 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F4                            
000011F4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011F8 7000                       		moveq	#0,d0
000011FA 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
000011FE                            
000011FE                            	@clearhscroll:
000011FE 22C0                       		move.l	d0,(a1)+
00001200 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001204 4E75                       		rts	
00001206                            ; End of function ClearScreen
00001206                            
00001206                            ; ---------------------------------------------------------------------------
00001206                            ; Subroutine to	load the sound driver
00001206                            ; ---------------------------------------------------------------------------
00001206                            
00001206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001206                            
00001206                            
00001206                            SoundDriverLoad:
00001206 4E71                       		nop	
00001208 33FC 0100 00A1 1100        		stopZ80
00001210 33FC 0100 00A1 1200        		resetZ80
00001218 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000121E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001224 6100 0000                  		bsr.w	KosDec		; decompress
00001228 33FC 0000 00A1 1200        		resetZ80a
00001230 4E71                       		nop	
00001232 4E71                       		nop	
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 33FC 0100 00A1 1200        		resetZ80
00001240 33FC 0000 00A1 1100        		startZ80
00001248 4E75                       		rts	
0000124A                            ; End of function SoundDriverLoad
0000124A                            
0000124A                            		include	"_incObj\sub PlaySound.asm"
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            ; Subroutine to	play a music track
0000124A                            
0000124A                            ; input:
0000124A                            ;	d0 = track to play
0000124A                            ; ---------------------------------------------------------------------------
0000124A                            
0000124A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124A                            
0000124A                            
0000124A                            PlaySound:
0000124A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000124E 4E75                       		rts	
00001250                            ; End of function PlaySound
00001250                            
00001250                            ; ---------------------------------------------------------------------------
00001250                            ; Subroutine to	play a sound effect
00001250                            ; ---------------------------------------------------------------------------
00001250                            
00001250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001250                            
00001250                            
00001250                            PlaySound_Special:
00001250 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001254 4E75                       		rts	
00001256                            ; End of function PlaySound_Special
00001256                            
00001256                            ; ===========================================================================
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Unused sound/music subroutine
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            PlaySound_Unused:
00001256 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125A 4E75                       		rts	
0000125A 4E75                       		rts	
0000125C                            		include	"_inc\PauseGame.asm"
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            ; Subroutine to	pause the game
0000125C                            ; ---------------------------------------------------------------------------
0000125C                            
0000125C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000125C                            
0000125C                            
0000125C                            PauseGame:
0000125C 4E71                       		nop	
0000125E 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001262 6700                       		beq.s	Unpause		; if not, branch
00001264 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
00001268 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126A 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001270 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001272                            
00001272                            Pause_StopGame:
00001272 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
00001278 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
0000127E                            
0000127E                            Pause_Loop:
0000127E 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001284 6100 0000                  		bsr.w	WaitForVBla
00001288 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
0000128C 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000128E 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001294 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001296 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
0000129C 4E71                       		nop	
0000129E 6000                       		bra.s	Pause_EndMusic
000012A0                            ; ===========================================================================
000012A0                            
000012A0                            Pause_ChkBC:
000012A0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012A6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012A8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012AE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B0                            
000012B0                            Pause_ChkStart:
000012B0 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012B6 67C6                       		beq.s	Pause_Loop	; if not, branch
000012B8                            
000012B8                            Pause_EndMusic:
000012B8 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012BE                            
000012BE                            Unpause:
000012BE 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C4                            
000012C4                            Pause_DoNothing:
000012C4 4E75                       		rts	
000012C6                            ; ===========================================================================
000012C6                            
000012C6                            Pause_SlowMo:
000012C6 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012CC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D2 4E75                       		rts	
000012D4                            ; End of function PauseGame
000012D4                            ; End of function PauseGame
000012D4                            
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D4                            
000012D4                            ; input:
000012D4                            ;	a1 = tile map address
000012D4                            ;	d0 = VRAM address
000012D4                            ;	d1 = width (cells)
000012D4                            ;	d2 = height (cells)
000012D4                            ; ---------------------------------------------------------------------------
000012D4                            
000012D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D4                            
000012D4                            
000012D4                            TilemapToVRAM:
000012D4 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DA 283C 0080 0000             		move.l	#$800000,d4
000012E0                            
000012E0                            	Tilemap_Line:
000012E0 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E4 3601                       		move.w	d1,d3
000012E6                            
000012E6                            	Tilemap_Cell:
000012E6 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012E8 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012EC D084                       		add.l	d4,d0		; goto next line
000012EE 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F2 4E75                       		rts	
000012F4                            ; End of function TilemapToVRAM
000012F4                            
000012F4                            		include	"_inc\Nemesis Decompression.asm"
000012F4                            ; ==============================================================================
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Nemesis decompression routine
000012F4                            ; ------------------------------------------------------------------------------
000012F4                            ; Optimized by vladikcomper
000012F4                            ; ------------------------------------------------------------------------------
000012F4                             
000012F4                            NemDec_RAM:
000012F4 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012F8 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
000012FC 6000                           bra.s   NemDec_Main
000012FE                             
000012FE                            ; ------------------------------------------------------------------------------
000012FE                            NemDec:
000012FE 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001302 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001308 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000130C                             
0000130C                            NemDec_Main:
0000130C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001310 3418                           move.w  (a0)+,d2        ; get number of patterns
00001312 6A00                           bpl.s   @0          ; are we in Mode 0?
00001314 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001318 E74A                       @0  lsl.w   #3,d2
0000131A 3A42                           movea.w d2,a5
0000131C 7607                           moveq   #7,d3
0000131E 7400                           moveq   #0,d2
00001320 7800                           moveq   #0,d4
00001322 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001326 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001328 E145                           asl.w   #8,d5           ; shift up by a byte
0000132A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000132C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001330 6100                           bsr.s   NemDec2
00001332 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001336 4E75                           rts
00001338                             
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001338                            ; ---------------------------------------------------------------------------
00001338                             
00001338                            NemDec2:
00001338 3E06                           move.w  d6,d7
0000133A 5147                           subq.w  #8,d7           ; get shift value
0000133C 3205                           move.w  d5,d1
0000133E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001340 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001344 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001346 0241 00FF                      andi.w  #$FF,d1
0000134A D241                           add.w   d1,d1
0000134C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001350 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001354 6400                           bcc.s   @0          ; if not, branch
00001356 5046                           addq.w  #8,d6
00001358 E145                           asl.w   #8,d5
0000135A 1A18                           move.b  (a0)+,d5        ; read next byte
0000135C 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001360 3001                           move.w  d1,d0
00001362 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
00001366 0240 00F0                      andi.w  #$F0,d0
0000136A                             
0000136A                            NemDec_GetRepeatCount:
0000136A E848                           lsr.w   #4,d0           ; get repeat count
0000136C                             
0000136C                            NemDec_WritePixel:
0000136C E98C                           lsl.l   #4,d4           ; shift up by a nybble
0000136E 8801                           or.b    d1,d4           ; write pixel
00001370 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001374 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
00001376                            ; ---------------------------------------------------------------------------
00001376                             
00001376                            NemPCD_NewRow:
00001376 7800                           moveq   #0,d4           ; reset row
00001378 7607                           moveq   #7,d3           ; reset nybble counter
0000137A                             
0000137A                            NemDec_WritePixelLoop:
0000137A 51C8 FFF0                      dbf d0,NemDec_WritePixel
0000137E 60B8                           bra.s   NemDec2
00001380                            ; ---------------------------------------------------------------------------
00001380                             
00001380                            NemDec_InlineData:
00001380 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001382 0C46 0009                      cmpi.w  #9,d6
00001386 6400                           bcc.s   @0
00001388 5046                           addq.w  #8,d6
0000138A E145                           asl.w   #8,d5
0000138C 1A18                           move.b  (a0)+,d5
0000138E 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001390 3205                           move.w  d5,d1
00001392 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001394 3001                           move.w  d1,d0
00001396 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139A 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
0000139E 0C46 0009                      cmpi.w  #9,d6
000013A2 64C6                           bcc.s   NemDec_GetRepeatCount
000013A4 5046                           addq.w  #8,d6
000013A6 E145                           asl.w   #8,d5
000013A8 1A18                           move.b  (a0)+,d5
000013AA 60BE                           bra.s   NemDec_GetRepeatCount
000013AC                             
000013AC                            ; ---------------------------------------------------------------------------
000013AC                            ; Subroutines to output decompressed entry
000013AC                            ; Selected depending on current decompression mode
000013AC                            ; ---------------------------------------------------------------------------
000013AC                             
000013AC                            NemPCD_WriteRowToVDP:
000013AC                            loc_1502:
000013AC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013AE 534D                           subq.w  #1,a5
000013B0 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B2 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B4 4E75                           rts
000013B6                            ; ---------------------------------------------------------------------------
000013B6                             
000013B6                            NemPCD_WriteRowToVDP_XOR:
000013B6 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013B8 2882                           move.l  d2,(a4)         ; and write the result
000013BA 534D                           subq.w  #1,a5
000013BC 380D                           move.w  a5,d4
000013BE 66B6                           bne.s   NemPCD_NewRow
000013C0 4E75                           rts
000013C2                            ; ---------------------------------------------------------------------------
000013C2                             
000013C2                            NemDec_WriteRowToRAM:
000013C2 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C4 534D                           subq.w  #1,a5
000013C6 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013C8 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CA 4E75                           rts
000013CC                            ; ---------------------------------------------------------------------------
000013CC                             
000013CC                            NemDec_WriteRowToRAM_XOR:
000013CC B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013CE 28C2                           move.l  d2,(a4)+        ; and write the result
000013D0 534D                           subq.w  #1,a5
000013D2 380D                           move.w  a5,d4
000013D4 66A0                           bne.s   NemPCD_NewRow
000013D6 4E75                           rts
000013D8                             
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013D8                            ; ---------------------------------------------------------------------------
000013D8                             
000013D8                            NemDec_BuildCodeTable:
000013D8 1018                           move.b  (a0)+,d0        ; read first byte
000013DA                             
000013DA                            @ChkEnd:
000013DA 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013DE 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E0 4E75                           rts
000013E2                            ; ---------------------------------------------------------------------------
000013E2                             
000013E2                            @NewPalIndex:
000013E2 3E00                           move.w  d0,d7
000013E4                             
000013E4                            @ItemLoop:
000013E4 1018                           move.b  (a0)+,d0        ; read next byte
000013E6 6BF2                           bmi.s   @ChkEnd         ; ~~
000013E8 1200                           move.b  d0,d1
000013EA 0247 000F                      andi.w  #$F,d7          ; get palette index
000013EE 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F2 8E41                           or.w    d1,d7           ; combine the two
000013F4 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013F8 1200                           move.b  d0,d1
000013FA E149                           lsl.w   #8,d1
000013FC 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
000013FE 7208                           moveq   #8,d1
00001400 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001402 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001404 1018                           move.b  (a0)+,d0        ; get code
00001406 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001408 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000140C 60D6                           bra.s   @ItemLoop       ; repeat
0000140E                            ; ---------------------------------------------------------------------------
0000140E                             
0000140E                            @ItemShortCode:
0000140E 1018                           move.b  (a0)+,d0        ; get code
00001410 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001412 D040                           add.w   d0,d0           ; get index into code table
00001414 7A01                           moveq   #1,d5
00001416 E36D                           lsl.w   d1,d5
00001418 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000141E                             
0000141E                            @ItemShortCodeLoop:
0000141E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001420 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001424 60BE                           bra.s   @ItemLoop
00001424 60BE                           bra.s   @ItemLoop
00001426                            
00001426                              
00001426                                pusho	; buffer local label symbol config
00001426                                opt ws+  ; change local label symbol to '.'
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO ResetDMAQueue
00001426                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001426                            ; Performs all queued DMA transfers and clears the DMA queue.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a1,a5	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE InitDMAQueue
00001426                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001426                            ; Must be called before the queue is used, and the queue expects that only it
00001426                            ; write to this region of RAM.
00001426                            ;
00001426                            ; Output:
00001426                            ; 	a0,d0,d1	trashed
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001426                            ; Queues a DMA with parameters given in registers.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	AssumeSourceAddressInBytes (default 1)
00001426                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001426                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001426                            ; 	Use128kbSafeDMA (default 0)
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001426                            ; 		set to 0)
00001426                            ; 	d2	Destination address
00001426                            ; 	d3	Transfer length (in words)
00001426                            ; Output:
00001426                            ; 	d0,d1,d2,d3,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001426                            ; * 184(29/9) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; With Use128kbSafeDMA = 1, runs in:
00001426                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001426                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001426                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001426                            ;   fills the queue (second piece is discarded)
00001426                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001426                            ;   space for both pieces (both pieces queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001426                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001426                            ; edited to make sure the adresss given is correct.
00001426                            ;
00001426                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001426                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001426                            ; discarded. However, all callers must be edited to make sure the adresss given
00001426                            ; in the correct form. You can use the dmaSource function for that.
00001426                            ; ---------------------------------------------------------------------------
00001426                            ; MACRO QueueStaticDMA
00001426                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001426                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001426                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001426                            ;
00001426                            ; Options:
00001426                            ; 	UseVIntSafeDMA (default 0)
00001426                            ; Input:
00001426                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001426                            ; Output:
00001426                            ; 	d0,a1	trashed
00001426                            ;
00001426                            ; With the default settings, runs in:
00001426                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001426                            ; * 122(21/8) cycles otherwise (DMA queued)
00001426                            ;
00001426                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressInBytes
00001426                            ;
00001426                            ; This option makes the function work as a drop-in replacement of the original
00001426                            ; functions. If you modify all callers to supply a position in words instead of
00001426                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001426 =00000001                  AssumeSourceAddressInBytes = 1
00001426                            ; ===========================================================================
00001426                            ; option: AssumeSourceAddressIsRAMSafe
00001426                            ;
00001426                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001426                            ; source address is given to the function in a way that makes them safe to use
00001426                            ; with RAM sources. You need to edit all callers to ensure this.
00001426                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001426 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001426                            ; ===========================================================================
00001426                            ; option: UseRAMSourceSafeDMA
00001426                            ;
00001426                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001426                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001426                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001426 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001426                            ; ===========================================================================
00001426                            ; option: Use128kbSafeDMA
00001426                            ;
00001426                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001426                            ; disabled by default because you can simply align the art in ROM and avoid the
00001426                            ; issue altogether. It is here so that you have a high-performance routine to do
00001426                            ; the job in situations where you can't align it in ROM.
00001426 =00000001                  Use128kbSafeDMA = 1
00001426                            ; ===========================================================================
00001426                            ; option UseVIntSafeDMA
00001426                            ;
00001426                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001426                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001426                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001426                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001426                            ; restore interrupts after.
00001426 =00000000                  UseVIntSafeDMA = 0
00001426                            ; ===========================================================================
00001426                            
00001426                            
00001426                            ; Convenience macros, for increased maintainability of the code.
00001426 =00000027                  DMA = %100111
00001426 =00000021                  VRAM = %100001
00001426                            ; Like vdpComm, but starting from an address contained in a register
00001426 =00000001                  vdpCommReg_defined = 1
00001426                            vdpCommReg macro reg,type,rwd,clr
00001426                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001426                            	if ((\type&\rwd)&3)<>0
00001426                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001426                            	endif
00001426                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001426                            	swap	\reg								; Put all bits in proper places
00001426                            	if \clr <> 0
00001426                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001426                            	endif
00001426                            	if ((\type&\rwd)&$FC)=$20
00001426                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001426                            	elseif ((\type&\rwd)&$FC)<>0
00001426                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001426                            	endif
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  intMacros_defined = 1
00001426                            enableInts macro
00001426                            	move	#$2300,sr
00001426                            	endm
00001426                            
00001426                            disableInts macro
00001426                            	move	#$2700,sr
00001426                            	endm
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000001                  DMAEntry_defined = 1
00001426                                    rsreset
00001426 =00000000                  DMAEntry.Reg94:		rs.b	1
00001426                            			  
00001426 =00000001                  DMAEntry.Size:      rs.b    0
00001426 =00000001                  DMAEntry.SizeH:		rs.b	1
00001426 =00000002                  DMAEntry.Reg93:		rs.b	1
00001426 =00000003                  DMAEntry.Source:    rs.b    0
00001426 =00000003                  DMAEntry.SizeL:		rs.b	1
00001426 =00000004                  DMAEntry.Reg97:		rs.b	1
00001426 =00000005                  DMAEntry.SrcH:		rs.b	1
00001426 =00000006                  DMAEntry.Reg96:		rs.b	1
00001426 =00000007                  DMAEntry.SrcM:		rs.b	1
00001426 =00000008                  DMAEntry.Reg95:		rs.b	1
00001426 =00000009                  DMAEntry.SrcL:		rs.b	1
00001426 =0000000A                  DMAEntry.Command:	rs.l	1
00001426 =0000000E                  DMAEntry.len:   rs.w    0
00001426                            ; ---------------------------------------------------------------------------
00001426 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001426                            ; ---------------------------------------------------------------------------
00001426                            						
00001426                            										   
00001426                            									   
00001426                            	  
00001426                            																			 
00001426                            							  
00001426 =00000001                  QueueStaticDMA_defined = 1
00001426                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001426                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001426                            ; crosses a 128kB boundary, or has size 0.
00001426                            QueueStaticDMA macro src,length,dest
00001426                                local   len
00001426                            		if ((\src)&1)<>0
00001426                            			inform 3,"DMA queued from odd source \1!"
00001426                            		endif
00001426                            		if ((\length)&1)<>0
00001426                            			inform 3,"DMA an odd number of bytes \2!"
00001426                            		endif
00001426                            		if (\length)=0
00001426                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001426                            		endif
00001426                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001426                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001426                            		endif
00001426                            	  
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	sr,-(sp)										; Save current interrupt mask
00001426                            		disableInts												; Mask off interrupts
00001426                            	endif ; UseVIntSafeDMA=1
00001426                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001426                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001426                            	beq.s	.done												; Return if there's no more room in the buffer
00001426                            	len: = ((length>>1)&$7FFF)
00001426                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001426                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001426                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001426                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001426                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001426                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001426                            .done:
00001426                            	if UseVIntSafeDMA=1
00001426                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001426                            	endif ;UseVIntSafeDMA=1
00001426                            	endm
00001426                            
00001426                                
00001426                            
00001426                            ; ---------------------------------------------------------------------------
00001426                            ResetDMAQueue: macro
00001426                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001426                            	endm
00001426                            ; ===========================================================================
00001426                            
00001426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001426                            
00001426                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001426                            Add_To_DMA_Queue:
00001426                            QueueDMATransfer:
00001426 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001430                            
00001430 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001432 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001436 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143A 7000                       	moveq	#0,d0											; We need a zero on d0
0000143C                            
0000143C                            		; Detect if transfer crosses 128KB boundary
0000143C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000143C                            		; (1) d3.w = 0 => 128kB transfer
0000143C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000143C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000143C                            		; (2) d3.w != 0
0000143C                            		;   (a) if there is carry on d1.w + d3.w
0000143C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000143C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000143C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000143C                            		; The reason this works is that carry on d1.w + d3.w means that
0000143C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000143C                            		; d1.w + d3.w > $10000.
0000143C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000143E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001440 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001442                            	; It does not cross a 128kB boundary. So just finish writing it.
00001442 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001446                            
00001446                            .finishxfer:
00001446                            	; Command to specify destination address and begin DMA
00001446 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001452 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
00001456 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
00001458 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
0000145C                            
0000145C                            .done:
0000145C 4E75                       	rts
0000145E                            ; ---------------------------------------------------------------------------
0000145E                            .doubletransfer:
0000145E                            		; We need to split the DMA into two parts, since it crosses a 128kB block
0000145E D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001460 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001464                            
00001464 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
00001468 67DC                       		beq.s	.finishxfer									; Branch if not
0000146A                            
0000146A                            		; Get second transfer's source, destination, and length
0000146A 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
0000146C D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
0000146E D040                       		add.w	d0,d0										; Convert to number of bytes
00001470 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001472                            
00001472                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001472                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001480 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001484                            
00001484                            		; Do second transfer
00001484 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
00001488 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
0000148C                            
0000148C                            		; Command to specify destination address and begin DMA
00001496 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149A 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
0000149C                            
0000149C 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A0 4E75                       		rts
000014A2                            ; End of function QueueDMATransfer
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            ; Subroutine for issuing all VDP commands that were queued
000014A2                            ; (by earlier calls to QueueDMATransfer)
000014A2                            ; Resets the queue when it's done
000014A2                            ; ---------------------------------------------------------------------------
000014A2                            
000014A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A2                            
000014A2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A2                            Process_DMA_Queue:
000014A2                            ProcessDMAQueue:
000014A2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014A6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AA                            ; ---------------------------------------------------------------------------
000014AA                            .jump_table:
000014AA 4E75                       	rts
000014AC                            	rept 6
000014AC                            		trap	#0											; Just in case
000014AC 4E40 4E40 4E40 4E40 4E40+  	endr
000014B8                            ; ---------------------------------------------------------------------------
000014B8 =00000001                      c: = 1
000014B8                            	rept QueueSlotCount
000014B8                            		lea	(vdp_control_port).l,a5
000014B8                            		lea	(VDP_Command_Buffer).w,a1
000014B8                            		if c<>QueueSlotCount
000014B8                            			bra.w	.jump0 - c*8
000014B8                            		endif
000014B8                                c: = c + 1
000015B0                            ; ---------------------------------------------------------------------------
000015B0                            	rept QueueSlotCount
000015B0                            		move.l	(a1)+,(a5)									; Transfer length
000015B0                            		move.l	(a1)+,(a5)									; Source address high
000015B0                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B0                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B0 2A99 2A99 2A99 3A99 2A99+  	endr
00001640                            
00001640                            .jump0:
00001640 31FC C800 C8FC             	ResetDMAQueue
00001646 4E75                       	rts
00001648                            ; End of function ProcessDMAQueue
00001648                            ; ===========================================================================
00001648                            
00001648                            ; ---------------------------------------------------------------------------
00001648                            ; Subroutine for initializing the DMA queue.
00001648                            ; ---------------------------------------------------------------------------
00001648                            
00001648                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001648                            
00001648                            InitDMAQueue:
00001648 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000164C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000164E 223C 9397 9695             	move.l	#$93979695,d1
00001654 =00000000                      c: = 0
00001654                            	rept QueueSlotCount
00001654                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001654                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001654                                c: = c + DMAEntry.len
00001654 1080 03C8 0002 1140 000E+  	endr
000016E2                            
000016E2 31FC C800 C8FC             	ResetDMAQueue
000016E8 4E75                       	rts
000016EA                            ; End of function ProcessDMAQueue
000016EA                            ; ===========================================================================
000016EA                            
000016EA                            
000016EA                                popo	; buffer local label symbol config
000016EA                            
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ARGUMENTS
000016EA                            ; d0 = index of PLC list
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            ; LoadPLC:
000016EA                            AddPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
000016FE 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001702                            
00001702                            	@findspace:
00001702 4A92                       		tst.l	(a2)		; is space available in RAM?
00001704 6700                       		beq.s	@copytoRAM	; if yes, branch
00001706 5C4A                       		addq.w	#6,a2		; if not, try next space
00001708 60F8                       		bra.s	@findspace
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            @copytoRAM:
0000170A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000170C 6B00                       		bmi.s	@skip
0000170E                            
0000170E                            	@loop:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001712 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001716                            
00001716                            	@skip:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171A 4E75                       		rts	
0000171C                            ; End of function AddPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            ; Queue pattern load requests, but clear the PLQ first
0000171C                            
0000171C                            ; ARGUMENTS
0000171C                            ; d0 = index of PLC list (see ArtLoadCues)
0000171C                            
0000171C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000171C                            ;	  (or hacker) is responsible for making sure that no more than
0000171C                            ;	  16 load requests are copied into the buffer.
0000171C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000171C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000171C                            
0000171C                            ; LoadPLC2:
0000171C                            NewPLC:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001730 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001732 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001736 3019                       		move.w	(a1)+,d0	; get length of PLC
00001738 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173A                            
0000173A                            	@loop:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000173E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001742                            
00001742                            	@skip:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function NewPLC
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001748                            
00001748                            
00001748                            ClearPLC:
00001748 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000174C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000174E                            
0000174E                            	@loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,@loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC:
00001756 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175A 6700                       		beq.s	Rplc_Exit
0000175C 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001760 6600                       		bne.s	Rplc_Exit
00001762 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001766 47F9 0000 13AC             		lea	(NemPCD_WriteRowToVDP).l,a3
0000176C 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001780 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001792 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            Rplc_Exit:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            ; sub_165E:
000017C8                            ProcessDPLC2:
000017C8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:
000017E0 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017F8 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001814                            
00001814                            loc_16AA:
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000181C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000182C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:
00001846 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function ProcessDPLC2
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            QuickPLC:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; get length of PLC
00001868                            
00001868                            	Qplc_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000187E 6100 FA7E                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001886 4E75                       		rts	
00001888                            ; End of function QuickPLC
00001888                            
00001888                            		include	"_inc\Enigma Decompression.asm"
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            
00001888                            ; input:
00001888                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001888                            ;	a0 = source address
00001888                            ;	a1 = destination address
00001888                            
00001888                            ; usage:
00001888                            ;	lea	(source).l,a0
00001888                            ;	lea	(destination).l,a1
00001888                            ;	move.w	#arttile,d0
00001888                            ;	bsr.w	EniDec
00001888                            
00001888                            ; See http://www.segaretro.org/Enigma_compression for format description
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3		; store starting art tile
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2		; store incremental copy word
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4		; store literal copy word
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018A6 7C10                       		moveq	#16,d6		; initial shift value
000018A8                            ; loc_173E:
000018A8                            Eni_Loop:
000018A8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018B6 3401                       		move.w	d1,d2		; and copy it
000018B8 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018BC 6400                       		bhs.s	@sevenbitentry
000018BE 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            ; loc_1758:
000018C2                            @sevenbitentry:
000018C2 6100 0000                  		bsr.w	EniDec_FetchByte
000018C6 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            ; loc_1768:
000018D2                            EniDec_00:
000018D2 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D4 524A                       		addq.w	#1,a2		; increment it
000018D6 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DA 60CC                       		bra.s	Eni_Loop
000018DC                            ; ===========================================================================
000018DC                            ; loc_1772:
000018DC                            EniDec_01:
000018DC 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018DE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E2 60C4                       		bra.s	Eni_Loop
000018E4                            ; ===========================================================================
000018E4                            ; loc_177A:
000018E4                            EniDec_100:
000018E4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018E8                            ; loc_177E:
000018E8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EA 51CA FFFC                  		dbf	d2,@loop	; repeat
000018EE                            
000018EE 60B8                       		bra.s	Eni_Loop
000018F0                            ; ===========================================================================
000018F0                            ; loc_1786:
000018F0                            EniDec_101:
000018F0 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F4                            ; loc_178A:
000018F4 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018F6 5241                       		addq.w	#1,d1		; increment
000018F8 51CA FFFA                  		dbf	d2,@loop	; repeat
000018FC                            
000018FC 60AA                       		bra.s	Eni_Loop
000018FE                            ; ===========================================================================
000018FE                            ; loc_1794:
000018FE                            EniDec_110:
000018FE 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001902                            ; loc_1798:
00001902 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001904 5341                       		subq.w	#1,d1		; decrement
00001906 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190A                            
0000190A 609C                       		bra.s	Eni_Loop
0000190C                            ; ===========================================================================
0000190C                            ; loc_17A2:
0000190C                            EniDec_111:
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	EniDec_Done
00001912                            ; loc_17A8:
00001912 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001916 32C1                       		move.w	d1,(a1)+	; copy it
00001918 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000191C                            
0000191C 608A                       		bra.s	Eni_Loop
0000191E                            ; ===========================================================================
0000191E                            ; loc_17B4:
0000191E                            EniDec_Index:
0000191E 60B2                       		bra.s	EniDec_00
00001920 60B0                       		bra.s	EniDec_00
00001922 60B8                       		bra.s	EniDec_01
00001924 60B6                       		bra.s	EniDec_01
00001926 60BC                       		bra.s	EniDec_100
00001928 60C6                       		bra.s	EniDec_101
0000192A 60D2                       		bra.s	EniDec_110
0000192C 60DE                       		bra.s	EniDec_111
0000192E                            ; ===========================================================================
0000192E                            ; loc_17C4:
0000192E                            EniDec_Done:
0000192E 5348                       		subq.w	#1,a0		; go back by one byte
00001930 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001934 6600                       		bne.s	@notnewbyte	; if not, branch
00001936 5348                       		subq.w	#1,a0		; and another one if needed
00001938                            ; loc_17CE:
00001938                            @notnewbyte:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000193C 6400                       		bcc.s	@evenbyte	; if not, branch
0000193E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001940                            ; loc_17D6:
00001940                            @evenbyte:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            
00001946                            ; ---------------------------------------------------------------------------
00001946                            ; Part of the Enigma decompressor
00001946                            ; Fetches an inline copy value and stores it in d1
00001946                            ; ---------------------------------------------------------------------------
00001946                            
00001946                            ; =============== S U B R O U T I N E =======================================
00001946                            
00001946                            ; loc_17DC:
00001946                            EniDec_FetchInlineValue:
00001946 360B                       		move.w	a3,d3		; copy starting art tile
00001948 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194A D201                       		add.b	d1,d1		; is the priority bit set?
0000194C 6400                       		bcc.s	@skippriority	; if not, branch
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001952 6700                       		beq.s	@skippriority	; if not, branch
00001954 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
00001958                            ; loc_17EE:
00001958                            @skippriority:
00001958 D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195A 6400                       		bcc.s	@skiphighpal	; if not, branch
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	@skiphighpal
00001962 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001966                            ; loc_17FC:
00001966                            @skiphighpal:
00001966 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001968 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	@skiplowpal
00001970 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001974                            ; loc_180A:
00001974                            @skiplowpal:
00001974 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001976 6400                       		bcc.s	@skipyflip	; if not, branch
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	@skipyflip
0000197E 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001982                            ; loc_1818:
00001982                            @skipyflip:
00001982 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001984 6400                       		bcc.s	@skipxflip	; if not, branch
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	@skipxflip
0000198C 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001990                            ; loc_1826:
00001990                            @skipxflip:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001996 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#16,d6
0000199E 4447                       		neg.w	d7		; calculate bit deficit
000019A0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A2 1A10                       		move.b	(a0),d5		; get next byte
000019A4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019AE                            ; loc_1844:
000019AE                            @maskvalue:
000019AE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019B6 D243                       		add.w	d3,d1		; add starting art tile
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5	; get next word
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            ; loc_1856:
000019C0                            @enoughbits:
000019C0 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C2 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019CC D243                       		add.w	d3,d1	; add starting art tile
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	EniDec_FetchByte
000019D2                            ; ===========================================================================
000019D2                            ; loc_1868:
000019D2                            @justenough:
000019D2 7C10                       		moveq	#16,d6	; reset shift value
000019D4 60D8                       		bra.s	@maskvalue
000019D6                            ; ===========================================================================
000019D6                            ; word_186C:
000019D6                            EniDec_Masks:
000019D6 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019DE 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019E6 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019EE 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            ; sub_188C:
000019F6                            EniDec_FetchByte:
000019F6 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019F8 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000019FC 6400                       		bhs.s	@locret	; if not, branch
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            @locret:
00001A04 4E75                       		rts	
00001A06                            ; End of function EniDec_FetchByte
00001A06                            ; End of function EniDec_FetchByte
00001A06                            		include	"_inc\Kosinski Decompression.asm"
00001A06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A06                            ; (sometimes called KOZINSKI decompression)
00001A06                            ;
00001A06                            ; ARGUMENTS:
00001A06                            ; a0 = source address
00001A06                            ; a1 = destination address
00001A06                            ;
00001A06                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A06                            ; New faster version by written by vladikcomper, with additional improvements by
00001A06                            ; MarkeyJester and Flamewing
00001A06                            ; Converted to ASM68K by Beta Filter.
00001A06                            ; ---------------------------------------------------------------------------
00001A06 =00000001                  Kos_UseLUT: equ 1
00001A06 =00000003                  Kos_LoopUnroll: equ 3
00001A06 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A06                            
00001A06                            Kos_RunBitStream macro
00001A06                                dbra    d2,@skip\@
00001A06                                moveq   #7,d2                   ; Set repeat count to 8.
00001A06                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A06                                not.w   d3                      ; Have all 16 bits been used up?
00001A06                                bne.s   @skip\@                   ; Branch if not.
00001A06                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A06                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A06                                if Kos_UseLUT=1
00001A06                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A06                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A06                                endif
00001A06                            @skip\@
00001A06                                endm
00001A06                            
00001A06                            Kos_ReadBit macro
00001A06                                if Kos_UseLUT=1
00001A06                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A06                                else
00001A06                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A06                                endif
00001A06                                endm
00001A06                            ; ===========================================================================
00001A06                            ; KozDec@193A:
00001A06                            KosDec:
00001A06 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A08 7000                           moveq   #0,d0
00001A0A 7200                           moveq   #0,d1
00001A0C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A10 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A12 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A14 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A18 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A1C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A1E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A20 6000                           bra.s   @FetchNewCode
00001A22                            ; ---------------------------------------------------------------------------
00001A22                            @FetchCodeLoop:
00001A22                                ; Code 1 (Uncompressed byte).
00001A3A 12D8                           move.b  (a0)+,(a1)+
00001A3C                            
00001A3C                            @FetchNewCode:
00001A3E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A40                            
00001A40                                ; Codes 00 and 01.
00001A40 7AFF                           moveq   #-1,d5
00001A42 4BD1                           lea (a1),a5
00001A5E 6500 0000                      bcs.w   @Code_01
00001A62                            
00001A62                                ; Code 00 (Dictionary ref. short).
00001A7C 6500                           bcs.s   @Copy45
00001A98 6500                           bcs.s   @Copy3
00001AB2 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB4 DAC5                           adda.w  d5,a5
00001AB6 12DD                           move.b  (a5)+,(a1)+
00001AB8 12DD                           move.b  (a5)+,(a1)+
00001ABA 6080                           bra.s   @FetchNewCode
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            @Copy3:
00001AD4 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AD6 DAC5                           adda.w  d5,a5
00001AD8 12DD                           move.b  (a5)+,(a1)+
00001ADA 12DD                           move.b  (a5)+,(a1)+
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 6000 FF5C                      bra.w   @FetchNewCode
00001AE2                            ; ---------------------------------------------------------------------------
00001AE2                            @Copy45:
00001AFC 6500                           bcs.s   @Copy5
00001B16 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B18 DAC5                           adda.w  d5,a5
00001B1A 12DD                           move.b  (a5)+,(a1)+
00001B1C 12DD                           move.b  (a5)+,(a1)+
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 6000 FF18                      bra.w   @FetchNewCode
00001B26                            ; ---------------------------------------------------------------------------
00001B26                            @Copy5:
00001B3E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B40 DAC5                           adda.w  d5,a5
00001B42 12DD                           move.b  (a5)+,(a1)+
00001B44 12DD                           move.b  (a5)+,(a1)+
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 6000 FEEE                      bra.w   @FetchNewCode
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            ; ---------------------------------------------------------------------------
00001B50                            @Code_01:
00001B50 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B52                                ; Code 01 (Dictionary ref. long / special).
00001B6A 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B6C 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B6E 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B70 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B72 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B74 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B76 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B78                            
00001B78                                ; special mode (extended counter)
00001B78 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7A 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B7C 5304                           subq.b  #1,d4
00001B7E 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B82                            
00001B82 DAC5                           adda.w  d5,a5
00001B84 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B86 3C04                           move.w  d4,d6
00001B88 4646                           not.w   d6
00001B8A CC47                           and.w   d7,d6
00001B8C DC46                           add.w   d6,d6
00001B8E E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B90 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B94                            ; ---------------------------------------------------------------------------
00001B94                            @largecopy:
00001B94                                rept (1<<Kos_LoopUnroll)
00001B94                                move.b  (a5)+,(a1)+
00001B94 12DD 12DD 12DD 12DD 12DD+      endr
00001BA4 51CC FFEE                      dbra    d4,@largecopy
00001BA8 6000 FE92                      bra.w   @FetchNewCode
00001BAC                            ; ---------------------------------------------------------------------------
00001BAC                            @StreamCopy:
00001BAC DAC5                           adda.w  d5,a5
00001BAE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB0 BF44                           eor.w   d7,d4
00001BB2 D844                           add.w   d4,d4
00001BB4 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BB8                            ; ---------------------------------------------------------------------------
00001BB8                            @mediumcopy:
00001BB8                                rept 8
00001BB8                                move.b  (a5)+,(a1)+
00001BB8 12DD 12DD 12DD 12DD 12DD+      endr
00001BC8 6000 FE72                      bra.w   @FetchNewCode
00001BCC                            ; ---------------------------------------------------------------------------
00001BCC                            @Quit:
00001BCC 4E75                           rts                             ; End of function KosDec.
00001BCE                            ; ===========================================================================
00001BCE                            KosDec_ByteMap:
00001BCE 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BDE 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BEE 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001BFE 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C0E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C1E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C2E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C3E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C4E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C5E 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C6E 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C7E 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C8E 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001C9E 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CAE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CBE 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CCE                            ; ===========================================================================
00001CCE                            ; ===========================================================================
00001CCE                            
00001CCE                            		include	"_inc\PaletteCycle.asm"
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            ; Palette cycling routine loading subroutine
00001CCE                            ; ---------------------------------------------------------------------------
00001CCE                            
00001CCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CCE                            
00001CCE                            
00001CCE                            PaletteCycle:
00001CCE 7400                       		moveq	#0,d2
00001CD0 7000                       		moveq	#0,d0
00001CD2 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CD6 D040                       		add.w	d0,d0
00001CD8 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CDC 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE0                            ; End of function PaletteCycle
00001CE0                            
00001CE0                            ; ===========================================================================
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0                            ; Palette cycling routines
00001CE0                            ; ---------------------------------------------------------------------------
00001CE0 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE2 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE4 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CE6 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CE8 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CEC 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CEE                            
00001CEE                            
00001CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CEE                            
00001CEE                            
00001CEE                            PCycle_Title:
00001CEE 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF4 6000                       		bra.s	PCycGHZ_Go
00001CF6                            ; ===========================================================================
00001CF6                            
00001CF6                            PCycle_GHZ:
00001CF6 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001CFC                            
00001CFC                            PCycGHZ_Go:
00001CFC 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D00 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D02                            
00001D02 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D08 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D0C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D10 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D14 E748                       		lsl.w	#3,d0
00001D16 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D22                            
00001D22                            PCycGHZ_Skip:
00001D22 4E75                       		rts	
00001D24                            ; End of function PCycle_GHZ
00001D24                            
00001D24                            
00001D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D24                            
00001D24                            
00001D24                            PCycle_LZ:
00001D24                            ; Waterfalls
00001D24 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D28 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2A                            
00001D2A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D30 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D34 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D38 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D3C E748                       		lsl.w	#3,d0
00001D3E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D44 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D4C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D52                            
00001D52                            	PCycLZ_NotSBZ3:
00001D52 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D5E 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D66 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            PCycLZ_Skip1:
00001D6A                            ; Conveyor belts
00001D6A                            		;move.w	(v_framecount).w,d0
00001D6A                            		;andi.w	#7,d0
00001D6A                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6A                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6A                            		;moveq	#1,d1
00001D6A                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6A                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6A                            		;neg.w	d1
00001D6A                            
00001D6A                            	;PCycLZ_NoRev:
00001D6A                            		;move.w	(v_pal_buffer).w,d0
00001D6A                            		;andi.w	#3,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;cmpi.w	#3,d0
00001D6A                            		;bcs.s	loc_1A0A
00001D6A                            		;move.w	d0,d1
00001D6A                            		;moveq	#0,d0
00001D6A                            		;tst.w	d1
00001D6A                            		;bpl.s	loc_1A0A
00001D6A                            		;moveq	#2,d0
00001D6A                            
00001D6A                            ;loc_1A0A:
00001D6A                            		;move.w	d0,(v_pal_buffer).w
00001D6A                            		;add.w	d0,d0
00001D6A                            		;move.w	d0,d1
00001D6A                            		;add.w	d0,d0
00001D6A                            		;add.w	d1,d0
00001D6A                            		;lea	(Pal_LZCyc2).l,a0
00001D6A                            		;lea	(v_pal_dry+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            		;lea	(Pal_LZCyc3).l,a0
00001D6A                            		;lea	(v_pal_water+$76).w,a1
00001D6A                            		;move.l	(a0,d0.w),(a1)+
00001D6A                            		;move.w	4(a0,d0.w),(a1)
00001D6A                            
00001D6A                            ;PCycLZ_Skip2:
00001D6A 4E75                       		rts	
00001D6C                            ; End of function PCycle_LZ
00001D6C                            
00001D6C                            ; ===========================================================================
00001D6C 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D74                            ; ===========================================================================
00001D74                            
00001D74                            PCycle_MZ:
00001D74 4E75                       		rts	
00001D76                            
00001D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D76                            
00001D76                            
00001D76                            PalCycle_SLZ:
00001D76 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7A 6A00                       		bpl.s	locret_1A80
00001D7C 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D82 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D86 5240                       		addq.w	#1,d0
00001D88 0C40 0006                  		cmpi.w	#6,d0
00001D8C 6500                       		bcs.s	loc_1A60
00001D8E 7000                       		moveq	#0,d0
00001D90                            
00001D90                            loc_1A60:
00001D90 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D94 3200                       		move.w	d0,d1
00001D96 D241                       		add.w	d1,d1
00001D98 D041                       		add.w	d1,d0
00001D9A D040                       		add.w	d0,d0
00001D9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB0                            
00001DB0                            locret_1A80:
00001DB0 4E75                       		rts	
00001DB2                            ; End of function PalCycle_SLZ
00001DB2                            
00001DB2                            
00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            
00001DB2                            
00001DB2                            PalCycle_SYZ:
00001DB2 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DB6 6A00                       		bpl.s	locret_1AC6
00001DB8 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DBE 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC2 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DC6 0240 0003                  		andi.w	#3,d0
00001DCA E548                       		lsl.w	#2,d0
00001DCC 3200                       		move.w	d0,d1
00001DCE D040                       		add.w	d0,d0
00001DD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DD6 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DE8 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DF6                            
00001DF6                            locret_1AC6:
00001DF6 4E75                       		rts	
00001DF8                            ; End of function PalCycle_SYZ
00001DF8                            
00001DF8                            
00001DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DF8                            
00001DF8                            
00001DF8                            PalCycle_SBZ:
00001DF8 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001DFE 4A38 FE11                  		tst.b	(v_act).w
00001E02 6700                       		beq.s	loc_1ADA
00001E04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0A                            
00001E0A                            loc_1ADA:
00001E0A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E0E 321A                       		move.w	(a2)+,d1
00001E10                            
00001E10                            loc_1AE0:
00001E10 5311                       		subq.b	#1,(a1)
00001E12 6B00                       		bmi.s	loc_1AEA
00001E14 5489                       		addq.l	#2,a1
00001E16 5C8A                       		addq.l	#6,a2
00001E18 6000                       		bra.s	loc_1B06
00001E1A                            ; ===========================================================================
00001E1A                            
00001E1A                            loc_1AEA:
00001E1A 12DA                       		move.b	(a2)+,(a1)+
00001E1C 1011                       		move.b	(a1),d0
00001E1E 5200                       		addq.b	#1,d0
00001E20 B01A                       		cmp.b	(a2)+,d0
00001E22 6500                       		bcs.s	loc_1AF6
00001E24 7000                       		moveq	#0,d0
00001E26                            
00001E26                            loc_1AF6:
00001E26 12C0                       		move.b	d0,(a1)+
00001E28 0240 000F                  		andi.w	#$F,d0
00001E2C D040                       		add.w	d0,d0
00001E2E 305A                       		movea.w	(a2)+,a0
00001E30 365A                       		movea.w	(a2)+,a3
00001E32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E36                            
00001E36                            loc_1B06:
00001E36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E3E 6A00                       		bpl.s	locret_1B64
00001E40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E46 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E4C 4A38 FE11                  		tst.b	(v_act).w
00001E50 6700                       		beq.s	loc_1B2E
00001E52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E58 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E5E                            
00001E5E                            loc_1B2E:
00001E5E 72FF                       		moveq	#-1,d1
00001E60 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E64 6700                       		beq.s	loc_1B38
00001E66 4441                       		neg.w	d1
00001E68                            
00001E68                            loc_1B38:
00001E68 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E6C 0240 0003                  		andi.w	#3,d0
00001E70 D041                       		add.w	d1,d0
00001E72 0C40 0003                  		cmpi.w	#3,d0
00001E76 6500                       		bcs.s	loc_1B52
00001E78 3200                       		move.w	d0,d1
00001E7A 7000                       		moveq	#0,d0
00001E7C 4A41                       		tst.w	d1
00001E7E 6A00                       		bpl.s	loc_1B52
00001E80 7002                       		moveq	#2,d0
00001E82                            
00001E82                            loc_1B52:
00001E82 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E86 D040                       		add.w	d0,d0
00001E88 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E94                            
00001E94                            locret_1B64:
00001E94 4E75                       		rts	
00001E96                            ; End of function PalCycle_SBZ
00001E96                            ; End of function PalCycle_SBZ
00001E96                            
00001E96                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EB6                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001ED6                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EF6                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F08                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F82                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FA6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FC6                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FD6                            
00001FD6                            		include	"_inc\SBZ Palette Scripts.asm"
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            ; Scrap Brain Zone palette cycling script
00001FD6                            ; ---------------------------------------------------------------------------
00001FD6                            
00001FD6                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FD6                            	dc.b duration, colors
00001FD6                            	dc.w paladdress, ramaddress
00001FD6                            	endm
00001FD6                            
00001FD6                            ; duration in frames, number of colors, palette address, RAM address
00001FD6                            
00001FD6                            Pal_SBZCycList1:
00001FD6 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FD8 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FDE 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE4 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEA 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FF6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001FFC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002002 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002008 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000200E                            end_SBZCycList1:
0000200E                            	even
0000200E                            
0000200E                            Pal_SBZCycList2:
0000200E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002010 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002016 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000201C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002022 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002028 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000202E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002034 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203A                            end_SBZCycList2:
0000203A                            	even
0000203A                            	even
0000203A                            
0000203A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002076                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002086                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002096                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020B6                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C0                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D0                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            ; Subroutine to	fade in from black
000020DC                            ; ---------------------------------------------------------------------------
000020DC                            
000020DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020DC                            
000020DC                            
000020DC                            PaletteFadeIn:
000020DC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E2                            
000020E2                            PalFadeIn_Alt:				; start position and size are already set
000020E2 7000                       		moveq	#0,d0
000020E4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000020EC D0C0                       		adda.w	d0,a0
000020EE 7200                       		moveq	#cBlack,d1
000020F0 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F4                            
000020F4                            	@fill:
000020F4 30C1                       		move.w	d1,(a0)+
000020F6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FA                            
000020FA 383C 0015                  		move.w	#$15,d4
000020FE                            
000020FE                            	@mainloop:
000020FE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002104 6100 0000                  		bsr.w	WaitForVBla
00002108 6100                       		bsr.s	FadeIn_FromBlack
0000210A 6100 F64A                  		bsr.w	RunPLC
0000210E 51CC FFEE                  		dbf	d4,@mainloop
00002112 4E75                       		rts	
00002114                            ; End of function PaletteFadeIn
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            FadeIn_FromBlack:
00002114 7000                       		moveq	#0,d0
00002116 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000211E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212A                            
0000212A                            	@addcolour:
0000212A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000212C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002130                            
00002130 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002136 6600                       		bne.s	@exit		; if not, branch
00002138                            
00002138 7000                       		moveq	#0,d0
0000213A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000213E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002142 1038 F626                  		move.b	(v_pfade_start).w,d0
00002146 D0C0                       		adda.w	d0,a0
00002148 D2C0                       		adda.w	d0,a1
0000214A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000214E                            
0000214E                            	@addcolour2:
0000214E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002150 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002154                            
00002154                            @exit:
00002154 4E75                       		rts	
00002156                            ; End of function FadeIn_FromBlack
00002156                            
00002156                            
00002156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002156                            
00002156                            
00002156                            FadeIn_AddColour:
00002156                            @addblue:
00002156 3419                       		move.w	(a1)+,d2
00002158 3610                       		move.w	(a0),d3
0000215A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000215C 6700                       		beq.s	@next		; if yes, branch
0000215E 3203                       		move.w	d3,d1
00002160 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002164 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002166 6200                       		bhi.s	@addgreen	; if yes, branch
00002168 30C1                       		move.w	d1,(a0)+	; update palette
0000216A 4E75                       		rts	
0000216C                            ; ===========================================================================
0000216C                            
0000216C                            @addgreen:
0000216C 3203                       		move.w	d3,d1
0000216E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002172 B242                       		cmp.w	d2,d1
00002174 6200                       		bhi.s	@addred
00002176 30C1                       		move.w	d1,(a0)+	; update palette
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            @addred:
0000217A 5458                       		addq.w	#2,(a0)+	; increase red value
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @next:
0000217E 5448                       		addq.w	#2,a0		; next colour
00002180 4E75                       		rts	
00002182                            ; End of function FadeIn_AddColour
00002182                            
00002182                            
00002182                            ; ---------------------------------------------------------------------------
00002182                            ; Subroutine to fade out to black
00002182                            ; ---------------------------------------------------------------------------
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            PaletteFadeOut:
00002182 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002188 383C 0015                  		move.w	#$15,d4
0000218C                            
0000218C                            	@mainloop:
0000218C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002192 6100 0000                  		bsr.w	WaitForVBla
00002196 6100                       		bsr.s	FadeOut_ToBlack
00002198 6100 F5BC                  		bsr.w	RunPLC
0000219C 51CC FFEE                  		dbf	d4,@mainloop
000021A0 4E75                       		rts	
000021A2                            ; End of function PaletteFadeOut
000021A2                            
000021A2                            
000021A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A2                            
000021A2                            
000021A2                            FadeOut_ToBlack:
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021A8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B2                            
000021B2                            	@decolour:
000021B2 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B4 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021B8                            
000021B8 7000                       		moveq	#0,d0
000021BA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021BE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C2 D0C0                       		adda.w	d0,a0
000021C4 1038 F627                  		move.b	(v_pfade_size).w,d0
000021C8                            
000021C8                            	@decolour2:
000021C8 6100                       		bsr.s	FadeOut_DecColour
000021CA 51C8 FFFC                  		dbf	d0,@decolour2
000021CE 4E75                       		rts	
000021D0                            ; End of function FadeOut_ToBlack
000021D0                            
000021D0                            
000021D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D0                            
000021D0                            
000021D0                            FadeOut_DecColour:
000021D0                            @dered:
000021D0 3410                       		move.w	(a0),d2
000021D2 6700                       		beq.s	@next
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 6700                       		beq.s	@degreen
000021DC 5558                       		subq.w	#2,(a0)+	; decrease red value
000021DE 4E75                       		rts	
000021E0                            ; ===========================================================================
000021E0                            
000021E0                            @degreen:
000021E0 3202                       		move.w	d2,d1
000021E2 0241 00E0                  		andi.w	#$E0,d1
000021E6 6700                       		beq.s	@deblue
000021E8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021EC 4E75                       		rts	
000021EE                            ; ===========================================================================
000021EE                            
000021EE                            @deblue:
000021EE 3202                       		move.w	d2,d1
000021F0 0241 0E00                  		andi.w	#$E00,d1
000021F4 6700                       		beq.s	@next
000021F6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FA 4E75                       		rts	
000021FC                            ; ===========================================================================
000021FC                            
000021FC                            @next:
000021FC 5448                       		addq.w	#2,a0
000021FE 4E75                       		rts	
00002200                            ; End of function FadeOut_DecColour
00002200                            
00002200                            ; ---------------------------------------------------------------------------
00002200                            ; Subroutine to	fade in from white (Special Stage)
00002200                            ; ---------------------------------------------------------------------------
00002200                            
00002200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002200                            
00002200                            
00002200                            PaletteWhiteIn:
00002200 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002206 7000                       		moveq	#0,d0
00002208 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000220C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002210 D0C0                       		adda.w	d0,a0
00002212 323C 0EEE                  		move.w	#cWhite,d1
00002216 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221A                            
0000221A                            	@fill:
0000221A 30C1                       		move.w	d1,(a0)+
0000221C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002220                            
00002220 383C 0015                  		move.w	#$15,d4
00002224                            
00002224                            	@mainloop:
00002224 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222A 6100 0000                  		bsr.w	WaitForVBla
0000222E 6100                       		bsr.s	WhiteIn_FromWhite
00002230 6100 F524                  		bsr.w	RunPLC
00002234 51CC FFEE                  		dbf	d4,@mainloop
00002238 4E75                       		rts	
0000223A                            ; End of function PaletteWhiteIn
0000223A                            
0000223A                            
0000223A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223A                            
0000223A                            
0000223A                            WhiteIn_FromWhite:
0000223A 7000                       		moveq	#0,d0
0000223C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002240 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002244 1038 F626                  		move.b	(v_pfade_start).w,d0
00002248 D0C0                       		adda.w	d0,a0
0000224A D2C0                       		adda.w	d0,a1
0000224C 1038 F627                  		move.b	(v_pfade_size).w,d0
00002250                            
00002250                            	@decolour:
00002250 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002252 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002256                            
00002256 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000225C 6600                       		bne.s	@exit		; if not, branch
0000225E 7000                       		moveq	#0,d0
00002260 41F8 FA80                  		lea	(v_pal_water).w,a0
00002264 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002268 1038 F626                  		move.b	(v_pfade_start).w,d0
0000226C D0C0                       		adda.w	d0,a0
0000226E D2C0                       		adda.w	d0,a1
00002270 1038 F627                  		move.b	(v_pfade_size).w,d0
00002274                            
00002274                            	@decolour2:
00002274 6100                       		bsr.s	WhiteIn_DecColour
00002276 51C8 FFFC                  		dbf	d0,@decolour2
0000227A                            
0000227A                            	@exit:
0000227A 4E75                       		rts	
0000227C                            ; End of function WhiteIn_FromWhite
0000227C                            
0000227C                            
0000227C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227C                            
0000227C                            
0000227C                            WhiteIn_DecColour:
0000227C                            @deblue:
0000227C 3419                       		move.w	(a1)+,d2
0000227E 3610                       		move.w	(a0),d3
00002280 B642                       		cmp.w	d2,d3
00002282 6700                       		beq.s	@next
00002284 3203                       		move.w	d3,d1
00002286 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228A 6500                       		blo.s	@degreen
0000228C B242                       		cmp.w	d2,d1
0000228E 6500                       		blo.s	@degreen
00002290 30C1                       		move.w	d1,(a0)+
00002292 4E75                       		rts	
00002294                            ; ===========================================================================
00002294                            
00002294                            @degreen:
00002294 3203                       		move.w	d3,d1
00002296 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229A 6500                       		blo.s	@dered
0000229C B242                       		cmp.w	d2,d1
0000229E 6500                       		blo.s	@dered
000022A0 30C1                       		move.w	d1,(a0)+
000022A2 4E75                       		rts	
000022A4                            ; ===========================================================================
000022A4                            
000022A4                            @dered:
000022A4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @next:
000022A8 5448                       		addq.w	#2,a0
000022AA 4E75                       		rts	
000022AC                            ; End of function WhiteIn_DecColour
000022AC                            
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            ; Subroutine to fade to white (Special Stage)
000022AC                            ; ---------------------------------------------------------------------------
000022AC                            
000022AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AC                            
000022AC                            
000022AC                            PaletteWhiteOut:
000022AC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B2 383C 0015                  		move.w	#$15,d4
000022B6                            
000022B6                            	@mainloop:
000022B6 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022BC 6100 0000                  		bsr.w	WaitForVBla
000022C0 6100                       		bsr.s	WhiteOut_ToWhite
000022C2 6100 F492                  		bsr.w	RunPLC
000022C6 51CC FFEE                  		dbf	d4,@mainloop
000022CA 4E75                       		rts	
000022CC                            ; End of function PaletteWhiteOut
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteOut_ToWhite:
000022CC 7000                       		moveq	#0,d0
000022CE 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D2 1038 F626                  		move.b	(v_pfade_start).w,d0
000022D6 D0C0                       		adda.w	d0,a0
000022D8 1038 F627                  		move.b	(v_pfade_size).w,d0
000022DC                            
000022DC                            	@addcolour:
000022DC 6100                       		bsr.s	WhiteOut_AddColour
000022DE 51C8 FFFC                  		dbf	d0,@addcolour
000022E2                            
000022E2 7000                       		moveq	#0,d0
000022E4 41F8 FA80                  		lea	(v_pal_water).w,a0
000022E8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022EC D0C0                       		adda.w	d0,a0
000022EE 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F2                            
000022F2                            	@addcolour2:
000022F2 6100                       		bsr.s	WhiteOut_AddColour
000022F4 51C8 FFFC                  		dbf	d0,@addcolour2
000022F8 4E75                       		rts	
000022FA                            ; End of function WhiteOut_ToWhite
000022FA                            
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            WhiteOut_AddColour:
000022FA                            @addred:
000022FA 3410                       		move.w	(a0),d2
000022FC 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002300 6700                       		beq.s	@next
00002302 3202                       		move.w	d2,d1
00002304 0241 000E                  		andi.w	#$E,d1
00002308 0C41 000E                  		cmpi.w	#cRed,d1
0000230C 6700                       		beq.s	@addgreen
0000230E 5458                       		addq.w	#2,(a0)+	; increase red value
00002310 4E75                       		rts	
00002312                            ; ===========================================================================
00002312                            
00002312                            @addgreen:
00002312 3202                       		move.w	d2,d1
00002314 0241 00E0                  		andi.w	#$E0,d1
00002318 0C41 00E0                  		cmpi.w	#cGreen,d1
0000231C 6700                       		beq.s	@addblue
0000231E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002322 4E75                       		rts	
00002324                            ; ===========================================================================
00002324                            
00002324                            @addblue:
00002324 3202                       		move.w	d2,d1
00002326 0241 0E00                  		andi.w	#$E00,d1
0000232A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000232E 6700                       		beq.s	@next
00002330 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002334 4E75                       		rts	
00002336                            ; ===========================================================================
00002336                            
00002336                            @next:
00002336 5448                       		addq.w	#2,a0
00002338 4E75                       		rts	
0000233A                            ; End of function WhiteOut_AddColour
0000233A                            
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette cycling routine - Sega logo
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            
0000233A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233A                            
0000233A                            
0000233A                            PalCycle_Sega:
0000233A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000233E 6600                       		bne.s	loc_206A
00002340 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002344 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234A 7205                       		moveq	#5,d1
0000234C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002350                            
00002350                            loc_2020:
00002350 6A00                       		bpl.s	loc_202A
00002352 5448                       		addq.w	#2,a0
00002354 5341                       		subq.w	#1,d1
00002356 5440                       		addq.w	#2,d0
00002358 60F6                       		bra.s	loc_2020
0000235A                            ; ===========================================================================
0000235A                            
0000235A                            loc_202A:
0000235A 3400                       		move.w	d0,d2
0000235C 0242 001E                  		andi.w	#$1E,d2
00002360 6600                       		bne.s	loc_2034
00002362 5440                       		addq.w	#2,d0
00002364                            
00002364                            loc_2034:
00002364 0C40 0060                  		cmpi.w	#$60,d0
00002368 6400                       		bhs.s	loc_203E
0000236A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000236E                            
0000236E                            loc_203E:
0000236E 5440                       		addq.w	#2,d0
00002370 51C9 FFE8                  		dbf	d1,loc_202A
00002374                            
00002374 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002378 5440                       		addq.w	#2,d0
0000237A 3400                       		move.w	d0,d2
0000237C 0242 001E                  		andi.w	#$1E,d2
00002380 6600                       		bne.s	loc_2054
00002382 5440                       		addq.w	#2,d0
00002384                            
00002384                            loc_2054:
00002384 0C40 0064                  		cmpi.w	#$64,d0
00002388 6D00                       		blt.s	loc_2062
0000238A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002390 70F4                       		moveq	#-$C,d0
00002392                            
00002392                            loc_2062:
00002392 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002396 7001                       		moveq	#1,d0
00002398 4E75                       		rts	
0000239A                            ; ===========================================================================
0000239A                            
0000239A                            loc_206A:
0000239A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000239E 6A00                       		bpl.s	loc_20BC
000023A0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023A6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AA 0640 000C                  		addi.w	#$C,d0
000023AE 0C40 0030                  		cmpi.w	#$30,d0
000023B2 6500                       		blo.s	loc_2088
000023B4 7000                       		moveq	#0,d0
000023B6 4E75                       		rts	
000023B8                            ; ===========================================================================
000023B8                            
000023B8                            loc_2088:
000023B8 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023BC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C2 41F0 0000                  		lea	(a0,d0.w),a0
000023C6 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CA 22D8                       		move.l	(a0)+,(a1)+
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 3298                       		move.w	(a0)+,(a1)
000023D0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D4 7000                       		moveq	#0,d0
000023D6 722C                       		moveq	#$2C,d1
000023D8                            
000023D8                            loc_20A8:
000023D8 3400                       		move.w	d0,d2
000023DA 0242 001E                  		andi.w	#$1E,d2
000023DE 6600                       		bne.s	loc_20B2
000023E0 5440                       		addq.w	#2,d0
000023E2                            
000023E2                            loc_20B2:
000023E2 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E6 5440                       		addq.w	#2,d0
000023E8 51C9 FFEE                  		dbf	d1,loc_20A8
000023EC                            
000023EC                            loc_20BC:
000023EC 7001                       		moveq	#1,d0
000023EE 4E75                       		rts	
000023F0                            ; End of function PalCycle_Sega
000023F0                            
000023F0                            ; ===========================================================================
000023F0                            
000023F0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000023FC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load palettes
0000242C                            
0000242C                            ; input:
0000242C                            ;	d0 = index number for palette
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Subroutines to load pallets
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            
0000242C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242C                            
0000242C                            PalLoad1:
0000242C 1238 FE11                  		move.b ($FFFFFE11),d1
00002430 43F9 0000 0000             		lea (PalPointers).l,a1
00002436 0C01 0000                  		cmp.b #0,d1
0000243A 6700 0000                  		beq.w PalLoad1_Continue
0000243E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002444 0C01 0001                  		cmp.b #1,d1
00002448 6700 0000                  		beq.w PalLoad1_Continue
0000244C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002452                            
00002452                            PalLoad1_Continue:
00002452 E748                       		lsl.w #3,d0
00002454 D2C0                       		adda.w d0,a1
00002456 2459                       		movea.l (a1)+,a2
00002458 3659                       		movea.w (a1)+,a3
0000245A D6FC 0080                  		adda.w #$80,a3
0000245E 3E19                       		move.w (a1)+,d7
00002460                            
00002460                            loc_2110:
00002460 26DA                       		move.l (a2)+,(a3)+
00002462 51CF FFFC                  		dbf d7,loc_2110
00002466 4E75                       		rts
00002468                             ; End of function PalLoad1
00002468                            
00002468                            
00002468                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002468                            
00002468                            PalLoad2:
00002468 1238 FE11                  		move.b ($FFFFFE11),d1
0000246C 43F9 0000 0000             		lea (PalPointers).l,a1
00002472 0C01 0000                  		cmp.b #0,d1
00002476 6700 0000                  		beq.w PalLoad2_Continue
0000247A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002480 0C01 0001                  		cmp.b #1,d1
00002484 6700 0000                  		beq.w PalLoad2_Continue
00002488 43F9 0000 0000             		lea (PalPointers3).l,a1
0000248E                            
0000248E                            
0000248E                            PalLoad2_Continue:
0000248E E748                       		lsl.w #3,d0
00002490 D2C0                       		adda.w d0,a1
00002492 2459                       		movea.l (a1)+,a2
00002494 3659                       		movea.w (a1)+,a3
00002496 3E19                       		move.w (a1)+,d7
00002498                            
00002498                            loc_2128:
00002498 26DA                       		move.l (a2)+,(a3)+
0000249A 51CF FFFC                  		dbf d7,loc_2128
0000249E 4E75                       		rts
000024A0                            ; End of function PalLoad2
000024A0                            
000024A0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A0                            
000024A0                            
000024A0                            PalLoad_Loop: ;Quick load - TIS
000024A0                                    
000024A0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024A6 4E75                               rts
000024A8                            
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            ; Underwater pallet loading subroutine
000024A8                            ; ---------------------------------------------------------------------------
000024A8                            
000024A8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A8                            
000024A8                            PalLoad3_Water:
000024A8 1238 FE11                  		move.b ($FFFFFE11),d1
000024AC 43F9 0000 0000             		lea (PalPointers).l,a1
000024B2 0C01 0000                  		cmp.b #0,d1
000024B6 6700 0000                  		beq.w PalLoad3_Continue
000024BA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C0 0C01 0001                  		cmp.b #1,d1
000024C4 6700 0000                  		beq.w PalLoad3_Continue
000024C8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024CE                            
000024CE                            PalLoad3_Continue:
000024CE E748                       		lsl.w #3,d0
000024D0 D2C0                       		adda.w d0,a1
000024D2 2459                       		movea.l (a1)+,a2
000024D4 3659                       		movea.w (a1)+,a3
000024D6 96FC 0080                  		suba.w #$80,a3
000024DA 3E19                       		move.w (a1)+,d7
000024DC                            
000024DC                            loc_2144:
000024DC 26DA                       		move.l (a2)+,(a3)+
000024DE 51CF FFFC                  		dbf d7,loc_2144
000024E2 4E75                       		rts
000024E4                            ; End of function PalLoad3_Water
000024E4                            
000024E4                            
000024E4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E4                            
000024E4                            
000024E4                            PalLoad4_Water:
000024E4 1238 FE11                  		move.b ($FFFFFE11),d1
000024E8 43F9 0000 0000             		lea (PalPointers).l,a1
000024EE 0C01 0000                  		cmp.b #0,d1
000024F2 6700 0000                  		beq.w PalLoad4_Continue
000024F6 43F9 0000 0000             		lea (PalPointers2).l,a1
000024FC 0C01 0001                  		cmp.b #1,d1
00002500 6700 0000                  		beq.w PalLoad4_Continue
00002504 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250A                            
0000250A                            PalLoad4_Continue:
0000250A E748                       		lsl.w #3,d0
0000250C D2C0                       		adda.w d0,a1
0000250E 2459                       		movea.l (a1)+,a2
00002510 3659                       		movea.w (a1)+,a3
00002512 96FC 0100                  		suba.w #$100,a3
00002516 3E19                       		move.w (a1)+,d7
00002518                            loc_2160:
00002518 26DA                       		move.l (a2)+,(a3)+
0000251A 51CF FFFC                  		dbf d7,loc_2160
0000251E 4E75                       		rts
00002520                             ; End of function PalLoad4_Water
00002520                            
00002520                            ; ===========================================================================
00002520                            
00002520                            		include	"_inc\Palette Pointers.asm"
00002520                            ; ---------------------------------------------------------------------------
00002520                            ; Palette pointers
00002520                            ; ---------------------------------------------------------------------------
00002520                            
00002520                            palp:	macro paladdress,ramaddress,colors
00002520                            	dc.l paladdress
00002520                            	dc.w ramaddress, (colors>>1)-1
00002520                            	endm
00002520                            
00002520                            PalPointers:
00002520                            
00002520                            ; palette address, RAM address, colors
00002520                            
00002520 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002528 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002530 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002538 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002540                            Pal_Levels:
00002540 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002548 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002550 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002558 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002560 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002568 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002570 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002578 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002580 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002588 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002590 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002598 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025A8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B0 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025B8 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C0 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025C8 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D0 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025D8 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E0 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F0 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025F8 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002600 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002608 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002610 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002618 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002620 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002628 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002630 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002638 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002640 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002648 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002650 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
00002658 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002660 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
00002668 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002670 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
00002678 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002680 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
00002688 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002690 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
00002698 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A0                            			even
000026A0                            
000026A0                            PalPointers2:
000026A0                            
000026A0                            ; palette address, RAM address, colors
000026A0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026A8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B0 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026B8 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C0                            Pal_Levels_2:
000026C0 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026C8 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026D8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026E8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026F8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002700 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002708 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002710 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002718 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002728 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002730 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002738 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002740 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002748 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002750 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002758 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002760 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002768 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002770 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002778 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002780 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002788 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002790 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002798 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027A8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B0 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027B8 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027C8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002800 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002808 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002810 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002818 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002820                            			even
00002820                            			
00002820                            PalPointers3:
00002820                            			
00002820                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002820 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002828 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002830 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002838 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002840                            Pal_Levels_3:
00002840 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002848 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002850 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002858 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002860 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002868 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002870 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002878 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002880 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002888 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002890 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002898 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028A8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C0 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028C8 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D0 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028D8 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E0 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028E8 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F0 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028F8 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002900 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002908 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002910 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002918 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002920 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002928 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002930 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002938 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002940 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002948 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002950 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002958 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002960 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002968 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002970 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002978 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002980 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002988 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002998 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A0                            			even
000029A0                            
000029A0                            
000029A0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers2.asm"
000029A0                            		
000029A0                            		;include	"_inc\Palette Pointers3.asm"
000029A0                            		
000029A0                            
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            ; Palette data
000029A0                            ; ---------------------------------------------------------------------------
000029A0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A20                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B20                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B40                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C00                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C60                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D20                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D80                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E00                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E80                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F00                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F60                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003020                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003080                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003140                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003200                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003260                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003320                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003400                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003480                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003560                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003620                            Pal_Options:	incbin	"palette\Options.bin"
000036A0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003700                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003720                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003740                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003760                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003780                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003800                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003820                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003840                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003860                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003880                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003900                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003920                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003940                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003960                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003980                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            ; Subroutine to	wait for VBlank routines to complete
00003A00                            ; ---------------------------------------------------------------------------
00003A00                            
00003A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A00                            
00003A00                            
00003A00                            WaitForVBla:
00003A00 46FC 2300                  		enable_ints
00003A04                            
00003A04                            	@wait:
00003A04 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A08 66FA                       		bne.s	@wait		; if not, branch
00003A0A 4E75                       		rts	
00003A0C                            ; End of function WaitForVBla
00003A0C                            
00003A0C                            		include	"_incObj\sub RandomNumber.asm"
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A0C                            ; ---------------------------------------------------------------------------
00003A0C                            
00003A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A0C                            
00003A0C                            
00003A0C                            RandomNumber:
00003A0C 2238 F636                  		move.l	(v_random).w,d1
00003A10 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A12 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A18                            
00003A18                            	@scramble:
00003A18 2001                       		move.l	d1,d0
00003A1A E581                       		asl.l	#2,d1
00003A1C D280                       		add.l	d0,d1
00003A1E E781                       		asl.l	#3,d1
00003A20 D280                       		add.l	d0,d1
00003A22 3001                       		move.w	d1,d0
00003A24 4841                       		swap	d1
00003A26 D041                       		add.w	d1,d0
00003A28 3200                       		move.w	d0,d1
00003A2A 4841                       		swap	d1
00003A2C 21C1 F636                  		move.l	d1,(v_random).w
00003A30 4E75                       		rts	
00003A30 4E75                       		rts	
00003A32                            		include	"_incObj\sub CalcSine.asm"
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            ; Subroutine calculate a sine
00003A32                            
00003A32                            ; input:
00003A32                            ;	d0 = angle
00003A32                            
00003A32                            ; output:
00003A32                            ;	d0 = sine
00003A32                            ;	d1 = cosine
00003A32                            ; ---------------------------------------------------------------------------
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            CalcSine:
00003A32 0240 00FF                          andi.w  #$FF,d0
00003A36 5040                               addq.w  #8,d0
00003A38 D040                               add.w   d0,d0
00003A3A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A3E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A42 4E75                               rts
00003A44                            ; End of function CalcSine
00003A44                            
00003A44                            ; ===========================================================================
00003A44                            
00003A44                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC4                            
00003CC4                            ; ===========================================================================
00003CC4                            ; ===========================================================================
00003CC4                            		include	"_incObj\sub CalcAngle.asm"
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            ; Subroutine calculate an angle
00003CC4                            
00003CC4                            ; input:
00003CC4                            ;	d1 = x-axis distance
00003CC4                            ;	d2 = y-axis distance
00003CC4                            
00003CC4                            ; output:
00003CC4                            ;	d0 = angle
00003CC4                            ; ---------------------------------------------------------------------------
00003CC4                            
00003CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC4                            
00003CC4                            
00003CC4                            CalcAngle:
00003CC4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CC8 7600                       		moveq	#0,d3
00003CCA 7800                       		moveq	#0,d4
00003CCC 3601                       		move.w	d1,d3
00003CCE 3802                       		move.w	d2,d4
00003CD0 8843                       		or.w	d3,d4
00003CD2 6700                       		beq.s	loc_2D04
00003CD4 3802                       		move.w	d2,d4
00003CD6 4A43                       		tst.w	d3
00003CD8 6A00 0000                  		bpl.w	loc_2CC2
00003CDC 4443                       		neg.w	d3
00003CDE                            
00003CDE                            loc_2CC2:
00003CDE 4A44                       		tst.w	d4
00003CE0 6A00 0000                  		bpl.w	loc_2CCA
00003CE4 4444                       		neg.w	d4
00003CE6                            
00003CE6                            loc_2CCA:
00003CE6 B843                       		cmp.w	d3,d4
00003CE8 6400 0000                  		bcc.w	loc_2CDC
00003CEC E18C                       		lsl.l	#8,d4
00003CEE 88C3                       		divu.w	d3,d4
00003CF0 7000                       		moveq	#0,d0
00003CF2 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CF6 6000                       		bra.s	loc_2CE6
00003CF8                            ; ===========================================================================
00003CF8                            
00003CF8                            loc_2CDC:
00003CF8 E18B                       		lsl.l	#8,d3
00003CFA 86C4                       		divu.w	d4,d3
00003CFC 7040                       		moveq	#$40,d0
00003CFE 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D02                            
00003D02                            loc_2CE6:
00003D02 4A41                       		tst.w	d1
00003D04 6A00 0000                  		bpl.w	loc_2CF2
00003D08 4440                       		neg.w	d0
00003D0A 0640 0080                  		addi.w	#$80,d0
00003D0E                            
00003D0E                            loc_2CF2:
00003D0E 4A42                       		tst.w	d2
00003D10 6A00 0000                  		bpl.w	loc_2CFE
00003D14 4440                       		neg.w	d0
00003D16 0640 0100                  		addi.w	#$100,d0
00003D1A                            
00003D1A                            loc_2CFE:
00003D1A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D1E 4E75                       		rts	
00003D20                            ; ===========================================================================
00003D20                            
00003D20                            loc_2D04:
00003D20 303C 0040                  		move.w	#$40,d0
00003D24 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D28 4E75                       		rts	
00003D2A                            ; End of function CalcAngle
00003D2A                            
00003D2A                            ; ===========================================================================
00003D2A                            
00003D2A                            Angle_Data:	incbin	"misc\angles.bin"
00003E2C                            
00003E2C                            ; ===========================================================================
00003E2C                            ; ===========================================================================
00003E2C                            
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            ; Sega screen
00003E2C                            ; ---------------------------------------------------------------------------
00003E2C                            
00003E2C                            GM_Sega:
00003E34 6100 D912                  		bsr.w	ClearPLC
00003E38 6100 E348                  		bsr.w	PaletteFadeOut
00003E3C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E42 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E46 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E4E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E52 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E56 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5A 46FC 2700                  		disable_ints
00003E5E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E62 0200 00BF                  		andi.b	#$BF,d0
00003E66 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E6C 6100 D312                  		bsr.w	ClearScreen
00003E7A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E80 6100 D47C                  		bsr.w	NemDec
00003E84 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E90 303C 0000                  		move.w	#0,d0
00003E94 6100 D9F2                  		bsr.w	EniDec
00003E98                            
00003E98 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EAC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC0                            
00003EC0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC4 6B00                       			bmi.s   @loadpal
00003EC6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDA                            
00003EDA                            	@loadpal:
00003EDA 7000                       		moveq	#palid_SegaBG,d0
00003EDC 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EE6 7E3F                               moveq    #$3F,d7
00003EE8                             
00003EE8                                .loop:
00003EE8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EEC 51CF FFFA                          dbf        d7,.loop
00003EF0 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF4 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F00 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F06 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F0C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F10 0000 0040                  		ori.b	#$40,d0
00003F14 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1A                            
00003F1A                            Sega_WaitPal:
00003F1A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F20 6100 FADE                  		bsr.w	WaitForVBla
00003F24 6100 E414                  		bsr.w	PalCycle_Sega
00003F28 66F0                       		bne.s	Sega_WaitPal
00003F2A                            
00003F32 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F38 6100 FAC6                  		bsr.w	WaitForVBla
00003F3C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F42                            
00003F42                            Sega_WaitEnd:
00003F42 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F48 6100 FAB6                  		bsr.w	WaitForVBla
00003F4C 4A78 F614                  		tst.w	(v_demolength).w
00003F50 6700                       		beq.s	Sega_GotoTitle
00003F52 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F58 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5A                            
00003F5A                            Sega_GotoTitle:
00003F5A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F60 4E75                       		rts	
00003F62                            ; ===========================================================================
00003F62                            
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            ; Title	screen
00003F62                            ; ---------------------------------------------------------------------------
00003F62                            
00003F62                            GM_Title:
00003F6A 6100 D7DC                  		bsr.w	ClearPLC
00003F6E 6100 E212                  		bsr.w	PaletteFadeOut
00003F72 46FC 2700                  		disable_ints
00003F76 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F80 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F84 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F88 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F8C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F90 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F98 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003F9C 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA0 6100 D1DE                  		bsr.w	ClearScreen
00003FA4 4EB9 0000 0000             		jsr		SHC2022 
00003FAA                            
00003FAA 43F8 D000                  		lea	(v_objspace).w,a1
00003FAE 7000                       		moveq	#0,d0
00003FB0 323C 07FF                  		move.w	#$7FF,d1
00003FB4                            
00003FB4                            	Tit_ClrObj1:
00003FB4 22C0                       		move.l	d0,(a1)+
00003FB6 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBA                            
00003FC4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCA 6100 D332                  		bsr.w	NemDec
00003FD8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FDE 6100 D31E                  		bsr.w	NemDec
00003FE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FE8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FEE 303C 0000                  		move.w	#0,d0
00003FF2 6100 D894                  		bsr.w	EniDec
00003FF6                            
00003FF6 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400A                            
0000400A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000400E 7000                       		moveq	#cBlack,d0
00004010 323C 001F                  		move.w	#$1F,d1
00004014                            
00004014                            	Tit_ClrPal:
00004014 22C0                       		move.l	d0,(a1)+
00004016 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401A                            
0000401A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004020 6100 E40A                  		bsr.w	PalLoad1
00004024 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004030 4EB9 0000 0000             		jsr	(BuildSprites).l
00004036 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403A 46FC 2700                  		disable_ints
00004048 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000404E 6100 D2AE                  		bsr.w	NemDec
0000405C 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004062 6100 D29A                  		bsr.w	NemDec
00004066 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004074 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
0000407A 323C 028F                  		move.w	#$28F,d1
0000407E                            
0000407E                            	Tit_LoadText:
0000407E 3C9D                       		move.w	(a5)+,(a6)
00004080 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004084                            
00004084 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000408A 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004090 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004096 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000409C 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040A2 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040A8 6100 0000                  		bsr.w	LevelSizeLoad
000040AC 6100 0000                  		bsr.w	DeformLayers
000040B0 43F8 B000                  		lea	(v_16x16).w,a1
000040B4 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040BA 303C 0000                  		move.w	#0,d0
000040BE 6100 D7C8                  		bsr.w	EniDec
000040C2 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040C8 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040CE 6100 D936                  		bsr.w	KosDec
000040D2 6100 0000                  		bsr.w	LevelLayoutLoad
000040D6 6100 E0AA                  		bsr.w	PaletteFadeOut
000040DA 46FC 2700                  		disable_ints
000040DE 6100 D0A0                  		bsr.w	ClearScreen
000040E2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000040E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040EE 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000040F2 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000040F6 343C 6000                  		move.w	#$6000,d2
000040FA 6100 0000                  		bsr.w	DrawChunks
000040FE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004104 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000410A 303C 0000                  		move.w	#0,d0
0000410E 6100 D778                  		bsr.w	EniDec
00004112                            
00004112 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004126                            
00004130 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004136 6100 D1C6                  		bsr.w	NemDec
0000413A 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000413C 6100 E2EE                  		bsr.w	PalLoad1
00004148 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000414E 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004154 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004158 7000                       		moveq	#0,d0
0000415A 323C 0007                  		move.w	#7,d1
0000415E                            
0000415E                            	Tit_ClrObj2:
0000415E 22C0                       		move.l	d0,(a1)+
00004160 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004164                            
00004164 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000416A 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004170 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004174                            
00004174 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004178 6A00                       			bpl.s   @isjap		; if yes, branch
0000417A                            
0000417A 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004180 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004186                            	@isjap:
00004186 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000418C 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004192 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004198 6100 0000                  		bsr.w	DeformLayers
0000419C 4EB9 0000 0000             		jsr	(BuildSprites).l
000041A2 7000                       		moveq	#plcid_Main,d0
000041A4 6100 D576                  		bsr.w	NewPLC
000041A8 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041AE 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041B4 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041B8 0000 0040                  		ori.b	#$40,d0
000041BC 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041C2 6100 DF18                  		bsr.w	PaletteFadeIn
000041C6                            
000041C6                            Tit_MainLoop:
000041C6 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041CC 6100 F832                  		bsr.w	WaitForVBla
000041D0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041D6 6100 0000                  		bsr.w	DeformLayers
000041DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000041E0 6100 DB0C                  		bsr.w	PCycle_Title
000041E4 6100 D570                  		bsr.w	RunPLC
000041E8 3038 D008                  		move.w	(v_objspace+obX).w,d0
000041EC 5440                       		addq.w	#2,d0
000041EE 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
000041F2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
000041F6 6500                       		blo.s	Tit_ChkRegion	; if not, branch
000041F8                            
000041F8 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000041FE 4E75                       		rts	
00004200                            ; ===========================================================================
00004200                            
00004200                            Tit_ChkRegion:
00004200 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004204 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004206                            
00004206 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000420C 6000                       		bra.s	Tit_EnterCheat
0000420E                            
0000420E                            	Tit_RegionJap:
0000420E 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004214                            
00004214                            Tit_EnterCheat:
00004214 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004218 D0C0                       		adda.w	d0,a0
0000421A 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000421E 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004222 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004224 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004226 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000422A 4A00                       		tst.b	d0
0000422C 6600                       		bne.s	Tit_CountC
0000422E 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004232 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004236 E249                       		lsr.w	#1,d1
00004238 0241 0003                  		andi.w	#3,d1
0000423C 6700                       		beq.s	Tit_PlayRing
0000423E 4A38 FFF8                  		tst.b	(v_megadrive).w
00004242 6A00                       		bpl.s	Tit_PlayRing
00004244 7201                       		moveq	#1,d1
00004246 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000424A                            
0000424A                            	Tit_PlayRing:
0000424A 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004258 6000                       		bra.s	Tit_CountC
0000425A                            ; ===========================================================================
0000425A                            
0000425A                            Tit_ResetCheat:
0000425A 4A00                       		tst.b	d0
0000425C 6700                       		beq.s	Tit_CountC
0000425E 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004264 6700                       		beq.s	Tit_CountC
00004266 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000426C                            
0000426C                            Tit_CountC:
0000426C 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004270 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004274 6700                       		beq.s	loc_3230	; if not, branch
00004276 4EF9 0000 0000             		jmp		MenuScreen ; increment C counter
0000427C                            
0000427C                            loc_3230:
0000427C 4A78 F614                  		tst.w	(v_demolength).w
00004280 6700 0000                  		beq.w	GotoDemo
00004284 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000428A 6700 FF3A                  		beq.w	Tit_MainLoop	; if not, branch
0000428E                            
0000428E                            Tit_ChkLevSel:
0000428E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004292 6700 0000                  		beq.w	PlayLevel	; if not, play level
00004296 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
0000429C 6700 0000                  		beq.w	PlayLevel	; if not, play level
000042A0                            
000042A0 7002                       		moveq	#palid_LevelSel,d0
000042A2 6100 E1C4                  		bsr.w	PalLoad2	; load level select palette
000042A6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042AA 7000                       		moveq	#0,d0
000042AC 323C 00DF                  		move.w	#$DF,d1
000042B0                            
000042B0                            	Tit_ClrScroll1:
000042B0 22C0                       		move.l	d0,(a1)+
000042B2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042B6                            
000042B6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042BA 46FC 2700                  		disable_ints
000042BE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042CE 323C 03FF                  		move.w	#$3FF,d1
000042D2                            
000042D2                            	Tit_ClrScroll2:
000042D2 2C80                       		move.l	d0,(a6)
000042D4 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
000042D8                            
000042D8 6100 0000                  		bsr.w	LevSelTextLoad
000042DC                            
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            ; Level	Select
000042DC                            ; ---------------------------------------------------------------------------
000042DC                            
000042DC                            LevelSelect:
000042DC 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042E2 6100 F71C                  		bsr.w	WaitForVBla
000042E6 6100 0000                  		bsr.w	LevSelControls
000042EA 6100 D46A                  		bsr.w	RunPLC
000042EE 4AB8 F680                  		tst.l	(v_plc_buffer).w
000042F2 66E8                       		bne.s	LevelSelect
000042F4 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
000042FA 67E0                       		beq.s	LevelSelect	; if not, branch
000042FC 3038 FF82                  		move.w	(v_levselitem).w,d0
00004300 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004304 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004306 3038 FF84                  		move.w	(v_levselsound).w,d0
0000430A 0640 0080                  		addi.w	#$80,d0
0000430E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004312 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004314 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004318 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000431A                            
0000431A                            LevSel_PlaySnd:
0000431A 6100 CF34                  		bsr.w	PlaySound_Special
0000431E 60BC                       		bra.s	LevelSelect
00004320                            ; ===========================================================================
00004320                            
00004320                            LevSel_Ending:
00004320 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004326 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000432C 4E75                       		rts	
0000432E                            ; ===========================================================================
0000432E                            
0000432E                            LevSel_Credits:
0000432E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000433C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004342 4E75                       		rts	
00004344                            ; ===========================================================================
00004344                            
00004344                            LevSel_Level_SS:
00004344 D040                       		add.w	d0,d0
00004346 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000434A 6B00 FF90                  		bmi.w	LevelSelect
0000434E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004352 6600                       		bne.s	LevSel_Level	; if not, branch
00004354 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000435A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000435E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004364 7000                       		moveq	#0,d0
00004366 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000436A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000436E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004372 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
0000437A 4E75                       		rts	
0000437C                            ; ===========================================================================
0000437C                            
0000437C                            LevSel_Level:
0000437C 0240 3FFF                  		andi.w	#$3FFF,d0
00004380 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004384                            
00004384                            PlayLevel:
00004384 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000438A 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004390 7000                       		moveq	#0,d0
00004392 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004396 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439A 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000439E 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043A2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043A6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043AA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043AE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043B4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043C4 4E75                       		rts	
000043C6                            ; ===========================================================================
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            ; Level	select - level pointers
000043C6                            ; ---------------------------------------------------------------------------
000043C6                            		; correct level order
000043C6 0000                       		dc.b id_GHZ, 0
000043C8 0001                       		dc.b id_GHZ, 1
000043CA 0002                       		dc.b id_GHZ, 2
000043CC 0200                       		dc.b id_MZ, 0
000043CE 0201                       		dc.b id_MZ, 1
000043D0 0202                       		dc.b id_MZ, 2
000043D2 0400                       		dc.b id_SYZ, 0
000043D4 0401                       		dc.b id_SYZ, 1
000043D6 0402                       		dc.b id_SYZ, 2
000043D8 0100                       		dc.b id_LZ, 0
000043DA 0101                       		dc.b id_LZ, 1
000043DC 0102                       		dc.b id_LZ, 2
000043DE 0300                       		dc.b id_SLZ, 0
000043E0 0301                       		dc.b id_SLZ, 1
000043E2 0302                       		dc.b id_SLZ, 2
000043E4 0500                       		dc.b id_SBZ, 0
000043E6 0501                       		dc.b id_SBZ, 1
000043E8 0103                       		dc.b id_LZ, 3
000043EA 0502                       		dc.b id_SBZ, 2
000043EC 0700                       		dc.b id_SS, 0		; Special Stage
000043EE 8000                       		dc.w $8000		; Sound Test
000043F0                            		even
000043F0                            ; ---------------------------------------------------------------------------
000043F0                            ; Level	select codes
000043F0                            ; ---------------------------------------------------------------------------
000043F0 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000043F8                            		even
000043F8                            
000043F8 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000043FE                            		even
000043FE                            ; ===========================================================================
000043FE                            
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            ; Demo mode
000043FE                            ; ---------------------------------------------------------------------------
000043FE                            
000043FE                            GotoDemo:
000043FE 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004404                            
00004404                            loc_33B6:
00004404 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000440A 6100 F5F4                  		bsr.w	WaitForVBla
0000440E 6100 0000                  		bsr.w	DeformLayers
00004412 6100 D8BA                  		bsr.w	PaletteCycle
00004416 6100 D33E                  		bsr.w	RunPLC
0000441A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000441E 5440                       		addq.w	#2,d0
00004420 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004424 0C40 1C00                  		cmpi.w	#$1C00,d0
00004428 6500                       		blo.s	loc_33E4
0000442A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004430 4E75                       		rts	
00004432                            ; ===========================================================================
00004432                            
00004432                            loc_33E4:
00004432 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004438 6600 FE54                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000443C 4A78 F614                  		tst.w	(v_demolength).w
00004440 6600 FFC2                  		bne.w	loc_33B6
0000444C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004450 0240 0007                  		andi.w	#7,d0
00004454 D040                       		add.w	d0,d0
00004456 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000445A 31C0 FE10                  		move.w	d0,(v_zone).w
0000445E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004462 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004468 6500                       		blo.s	loc_3422	; if yes, branch
0000446A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00004470                            
00004470                            loc_3422:
00004470 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004476 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
0000447C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00004480 6600                       		bne.s	Demo_Level	; if not, branch
00004482 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004488 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
0000448C 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00004490                            
00004490                            Demo_Level:
00004490 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004496 7000                       		moveq	#0,d0
00004498 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000449C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044A4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044AC 4E75                       		rts	
000044AE                            ; ===========================================================================
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            ; Levels used in demos
000044AE                            ; ---------------------------------------------------------------------------
000044AE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Subroutine to	change what you're selecting in the level select
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            LevSelControls:
000044B6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044BA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044C0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044C4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044C6                            
000044C6                            LevSel_UpDown:
000044C6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044CC 1238 F604                  		move.b	(v_jpadhold1).w,d1
000044D0 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
000044D4 6700                       		beq.s	LevSel_SndTest	; if not, branch
000044D6 3038 FF82                  		move.w	(v_levselitem).w,d0
000044DA 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
000044DE 6700                       		beq.s	LevSel_Down	; if not, branch
000044E0 5340                       		subq.w	#1,d0		; move up 1 selection
000044E2 6400                       		bhs.s	LevSel_Down
000044E4 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
000044E6                            
000044E6                            LevSel_Down:
000044E6 0801 0001                  		btst	#bitDn,d1	; is down pressed?
000044EA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000044EC 5240                       		addq.w	#1,d0		; move down 1 selection
000044EE 0C40 0015                  		cmpi.w	#$15,d0
000044F2 6500                       		blo.s	LevSel_Refresh
000044F4 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000044F6                            
000044F6                            LevSel_Refresh:
000044F6 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000044FA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            
00004500                            LevSel_SndTest:
00004500 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004506 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004508 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000450C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004510 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004512 3038 FF84                  		move.w	(v_levselsound).w,d0
00004516 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000451A 6700                       		beq.s	LevSel_Right	; if not, branch
0000451C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000451E 6400                       		bhs.s	LevSel_Right
00004520 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
00004522                            
00004522                            LevSel_Right:
00004522 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004526 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004528 5240                       		addq.w	#1,d0		; add 1	to sound test
0000452A 0C40 0050                  		cmpi.w	#$50,d0
0000452E 6500                       		blo.s	LevSel_Refresh2
00004530 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004532                            
00004532                            LevSel_Refresh2:
00004532 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004536 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000453A                            
0000453A                            LevSel_NoMove:
0000453A 4E75                       		rts	
0000453C                            ; End of function LevSelControls
0000453C                            
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            ; Subroutine to load level select text
0000453C                            ; ---------------------------------------------------------------------------
0000453C                            
0000453C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000453C                            
0000453C                            
0000453C                            LevSelTextLoad:
0000453C                            
0000453C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000453C                            					; $E210 is a VRAM address
0000453C                            
0000453C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004542 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004548 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000454E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004552 7214                       		moveq	#$14,d1		; number of lines of text
00004554                            
00004554                            	LevSel_DrawAll:
00004554 2D44 0004                  		move.l	d4,4(a6)
00004558 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000455C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004562 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004566                            
00004566 7000                       		moveq	#0,d0
00004568 3038 FF82                  		move.w	(v_levselitem).w,d0
0000456C 3200                       		move.w	d0,d1
0000456E 283C 6210 0003             		move.l	#textpos,d4
00004574 EF48                       		lsl.w	#7,d0
00004576 4840                       		swap	d0
00004578 D880                       		add.l	d0,d4
0000457A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004580 E749                       		lsl.w	#3,d1
00004582 3001                       		move.w	d1,d0
00004584 D241                       		add.w	d1,d1
00004586 D240                       		add.w	d0,d1
00004588 D2C1                       		adda.w	d1,a1
0000458A 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
0000458E 2D44 0004                  		move.l	d4,4(a6)
00004592 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004596 363C E680                  		move.w	#$E680,d3
0000459A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045A0 6600                       		bne.s	LevSel_DrawSnd
000045A2 363C C680                  		move.w	#$C680,d3
000045A6                            
000045A6                            LevSel_DrawSnd:
000045B0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045B4 0640 0080                  		addi.w	#$80,d0
000045B8 1400                       		move.b	d0,d2
000045BA E808                       		lsr.b	#4,d0
000045BC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045C0 1002                       		move.b	d2,d0
000045C2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045C6 4E75                       		rts	
000045C8                            ; End of function LevSelTextLoad
000045C8                            
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            LevSel_ChgSnd:
000045C8 0240 000F                  		andi.w	#$F,d0
000045CC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000045D0 6500                       		blo.s	LevSel_Numb	; if not, branch
000045D2 5E00                       		addi.b	#7,d0		; use alpha characters
000045D4                            
000045D4                            	LevSel_Numb:
000045D4 D043                       		add.w	d3,d0
000045D6 3C80                       		move.w	d0,(a6)
000045D8 4E75                       		rts	
000045DA                            ; End of function LevSel_ChgSnd
000045DA                            
000045DA                            
000045DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DA                            
000045DA                            
000045DA                            LevSel_ChgLine:
000045DA 7417                       		moveq	#$17,d2		; number of characters per line
000045DC                            
000045DC                            	LevSel_LineLoop:
000045DC 7000                       		moveq	#0,d0
000045DE 1019                       		move.b	(a1)+,d0	; get character
000045E0 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
000045E2 3CBC 0000                  		move.w	#0,(a6)		; use blank character
000045E6 51CA FFF4                  		dbf	d2,LevSel_LineLoop
000045EA 4E75                       		rts	
000045EC                            
000045EC                            
000045EC                            	LevSel_CharOk:
000045EC D043                       		add.w	d3,d0		; combine char with VRAM setting
000045EE 3C80                       		move.w	d0,(a6)		; send to VRAM
000045F0 51CA FFEA                  		dbf	d2,LevSel_LineLoop
000045F4 4E75                       		rts	
000045F6                            ; End of function LevSel_ChgLine
000045F6                            
000045F6                            ; ===========================================================================
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            ; Level	select menu text
000045F6                            ; ---------------------------------------------------------------------------
000045F6                            		incbin	"misc\Level Select Text (JP1).bin"
000047EE                            		even
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            ; Music	playlist
000047EE                            ; ---------------------------------------------------------------------------
000047EE                            MusicList:
000047EE 00                         		dc.b bgm_GHZ    ; GHZ1
000047EF 00                                 	dc.b bgm_LZ    ; GHZ2
000047F0 00                                 	dc.b bgm_LZ   ; GHZ3
000047F1 00                                 	dc.b bgm_LZ    ; GHZ4
000047F2 00                                 	dc.b bgm_Stop    ; LZ1
000047F3 00                                 	dc.b bgm_Stop   ; LZ2
000047F4 00                                 	dc.b bgm_Stop    ; LZ3
000047F5 00                                 	dc.b bgm_SBZ3    ; LZ4
000047F6 00                                 	dc.b bgm_MZ    ; MZ1
000047F7 00                                 	dc.b bgm_SBZ    ; MZ2
000047F8 00                                 	dc.b bgm_SBZ    ; MZ3
000047F9 00                                 	dc.b bgm_SBZ    ; MZ4
000047FA 00                                 	dc.b bgm_LZ    ; SLZ1
000047FB 00                                 	dc.b bgm_LZ    ; SLZ2
000047FC 00                                 	dc.b bgm_LZ    ; SLZ3
000047FD 00                                 	dc.b bgm_LZ    ; SLZ4
000047FE 00                                 	dc.b bgm_SYZ    ; SYZ1
000047FF 00                                 	dc.b bgm_SLZ    ; SYZ2
00004800 00                                 	dc.b bgm_SLZ    ; SYZ3
00004801 00                                 	dc.b bgm_SLZ    ; SYZ4
00004802 00                                 	dc.b bgm_SBZ    ; SBZ1
00004803 00                                 	dc.b bgm_SBZ    ; SBZ2
00004804 00                                 	dc.b bgm_FZ		; SBZ3
00004805 00                                 	dc.b bgm_SBZ    ; SBZ4
00004806 00                                 	dc.b bgm_GHZ    ; GHZ1
00004807 00                                 	dc.b bgm_GHZ    ; GHZ1
00004808 00                                 	dc.b bgm_GHZ    ; GHZ1
00004809 00                                 	dc.b bgm_GHZ    ; GHZ1
0000480A                                    	even
0000480A                            ; ===========================================================================
0000480A                            
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            ; Level
0000480A                            ; ---------------------------------------------------------------------------
0000480A                            
0000480A                            GM_Level:
0000480A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004810 4A78 FFF0                  		tst.w	(f_demo).w
00004814 6B00                       		bmi.s	Level_NoMusicFade
0000481E                            
0000481E                            	Level_NoMusicFade:
0000481E 6100 CF28                  		bsr.w	ClearPLC
00004822 6100 D95E                  		bsr.w	PaletteFadeOut
00004826 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000482A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000482C 46FC 2700                  		disable_ints
0000483A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004840 6100 CABC                  		bsr.w	NemDec
00004844 46FC 2300                  		enable_ints
00004848 7000                       		moveq	#0,d0
0000484A 1038 FE10                  		move.b	(v_zone).w,d0
0000484E E948                       		lsl.w	#4,d0
00004850 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004856 45F2 0000                  		lea	(a2,d0.w),a2
0000485A 7000                       		moveq	#0,d0
0000485C 1012                       		move.b	(a2),d0
0000485E 6700                       		beq.s	loc_37FC
00004860 6100 CE88                  		bsr.w	AddPLC		; load level patterns
00004864                            
00004864                            loc_37FC:
00004864 7000                       		moveq	#plcid_Main2,d0
00004866 6100 CE82                  		bsr.w	AddPLC		; load standard	patterns
0000486A                            
0000486A                            Level_ClrRam:
0000486A 43F8 D000                  		lea	(v_objspace).w,a1
0000486E 7000                       		moveq	#0,d0
00004870 323C 07FF                  		move.w	#$7FF,d1
00004874                            
00004874                            	Level_ClrObjRam:
00004874 22C0                       		move.l	d0,(a1)+
00004876 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000487A                            
0000487A 43F8 F628                  		lea	($FFFFF628).w,a1
0000487E 7000                       		moveq	#0,d0
00004880 323C 0015                  		move.w	#$15,d1
00004884                            
00004884                            	Level_ClrVars1:
00004884 22C0                       		move.l	d0,(a1)+
00004886 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000488A                            
0000488A 43F8 F700                  		lea	(v_screenposx).w,a1
0000488E 7000                       		moveq	#0,d0
00004890 323C 003F                  		move.w	#$3F,d1
00004894                            
00004894                            	Level_ClrVars2:
00004894 22C0                       		move.l	d0,(a1)+
00004896 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000489A                            
0000489A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 0047                  		move.w	#$47,d1
000048A4                            
000048A4                            	Level_ClrVars3:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048AA                            
000048AA 46FC 2700                  		disable_ints
000048AE 6100 C8D0                  		bsr.w	ClearScreen
000048B2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048B8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048C4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048C8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048CC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000048D0 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000048D4 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000048DA 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000048DE 31FC C800 C8FC             		ResetDMAQueue	
000048E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000048EA 6600                       		bne.s	Level_LoadPal	; if not, branch
000048EC                            
000048EC 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
000048F0 7000                       		moveq	#0,d0
000048F2 1038 FE11                  		move.b	(v_act).w,d0
000048F6 D040                       		add.w	d0,d0
000048F8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000048FE 3031 0000                  		move.w	(a1,d0.w),d0
00004902 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004906 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000490A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000490E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004912 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004916 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000491C                            
0000491C                            Level_LoadPal:
0000491C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004922 46FC 2300                  		move	#$2300,sr
00004926 4EB9 0000 0000             		jsr		LoadPlayerPal
0000492C 6100 DB3A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004930 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004936 6600                       		bne.s	Level_GetBgm	; if not, branch
00004938 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000493E 6100 DB68                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004942 4A38 FE30                  		tst.b	($FFFFFE30).w
00004946 6700                       		beq.s	Level_GetBgm
00004948 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000494E                            
0000494E                            	Level_GetBgm:
0000494E 4A78 FFF0                  		tst.w	(f_demo).w
00004952 6B00                               	bmi.s	Level_SkipTtlCard
00004954 7000                               	moveq	#0,d0
00004956 3038 FE10                  		move.w	(v_zone).w,d0
0000495A E418                       		ror.b	#2,d0
0000495C EC48                       		lsr.w   #6,d0
0000495E 43F9 0000 47EE                     	lea	(MusicList).l,a1 ; load    music playlist
00004964 1031 0000                          	move.b	(a1,d0.w),d0
00004968 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000496C 6100 C8DC                          	bsr.w	PlaySound    ; play music
00004970 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004976                            
00004976                            
00004976                            Level_TtlCardLoop:
00004976 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
0000497C 6100 F082                  		bsr.w	WaitForVBla
00004980 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004986 4EB9 0000 0000             		jsr	(BuildSprites).l
0000498C 6100 CDC8                  		bsr.w	RunPLC
00004990 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004994 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004998 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
0000499A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
0000499E 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049A0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049A6                            
000049A6                            	Level_SkipTtlCard:
000049A6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049AC 6100 DA7E                  		bsr.w	PalLoad1	; load Sonic's palette
000049B0 6100 0000                  		bsr.w	LevelSizeLoad
000049B4 6100 0000                  		bsr.w	DeformLayers
000049B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049BE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049C2 6100 0000                  		bsr.w	LoadTilesFromStart
000049C6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049CC 6100 0000                  		bsr.w	ColIndexLoad
000049D0 6100 0000                  		bsr.w	LZWaterFeatures
000049D4 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000049DA 4A78 FFF0                  		tst.w	(f_demo).w
000049DE 6B00                       		bmi.s	Level_ChkDebug
000049E0 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000049E6                            
000049E6                            Level_ChkDebug:
000049E6 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000049EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000049EC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
000049F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000049F4 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000049FA                            
000049FA                            Level_ChkWater:
000049FA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A00 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A06 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A0C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A0E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A14 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A1A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A20 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A26                            
00004A26                            Level_LoadObj:
00004A26 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A2C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A32 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A38 7000                       		moveq	#0,d0
00004A3A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A3E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A40 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A44 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A48 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A4C                            
00004A4C                            	Level_SkipClr:
00004A4C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A50 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A54 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A58 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A5C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A60 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A64 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A68 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A6C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004A70 31C0 FE02                  		move.w	d0,(f_restart).w
00004A74 31C0 FE04                  		move.w	d0,(v_framecount).w
00004A78 6100 0000                  		bsr.w	OscillateNumInit
00004A7C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004A82 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004A88 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004A8E 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004A94 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004A9A 7000                       		moveq	#0,d0
00004A9C 1038 FE10                  		move.b	(v_zone).w,d0
00004AA0 E548                       		lsl.w	#2,d0
00004AA2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004AAA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004AAC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AB2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AB6 5340                       		subq.w	#1,d0
00004AB8 E548                       		lsl.w	#2,d0
00004ABA 2271 0000                  		movea.l	(a1,d0.w),a1
00004ABE                            
00004ABE                            Level_Demo:
00004ABE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AC4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AC8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004ACE 4A78 FFF0                  		tst.w	(f_demo).w
00004AD2 6A00                       		bpl.s	Level_ChkWaterPal
00004AD4 31FC 021C F614             		move.w	#540,(v_demolength).w
00004ADA 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004AE0 6600                       		bne.s	Level_ChkWaterPal
00004AE2 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004AE8                            
00004AE8                            Level_ChkWaterPal:
00004AE8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004AEE 6600                       		bne.s	Level_Delay	; if not, branch
00004AF0 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004AF2 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004AF8 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004AFA 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004AFC                            
00004AFC                            	Level_WtrNotSbz:
00004AFC 6100 D9E6                  		bsr.w	PalLoad4_Water
00004B00                            
00004B00                            Level_Delay:
00004B00 323C 0003                  		move.w	#3,d1
00004B04                            
00004B04                            	Level_DelayLoop:
00004B04 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B0A 6100 EEF4                  		bsr.w	WaitForVBla
00004B0E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B12                            
00004B12 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B18 6100 D5C8                  		bsr.w	PalFadeIn_Alt
00004B1C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B20 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B22 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B26 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B2A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B2E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B32 6000                       		bra.s	Level_StartGame
00004B34                            ; ===========================================================================
00004B34                            
00004B34                            Level_ClrCardArt:
00004B34 7000                       		moveq	#plcid_Explode,d0
00004B36 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion gfx
00004B3C 7000                       		moveq	#0,d0
00004B3E 1038 FE10                  		move.b	(v_zone).w,d0
00004B42 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B46 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B4C                            
00004B4C                            Level_StartGame:
00004B4C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B52                            
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            ; Main level loop (when	all title card and loading sequences are finished)
00004B52                            ; ---------------------------------------------------------------------------
00004B52                            
00004B52                            Level_MainLoop:
00004B52 6100 C708                  		bsr.w	PauseGame
00004B56 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B5C 6100 EEA2                  		bsr.w	WaitForVBla
00004B60 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B64 6100 0000                  		bsr.w	MoveSonicInDemo
00004B68 6100 0000                  		bsr.w	LZWaterFeatures
00004B6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B72 4A78 FE02                  			tst.w   (f_restart).w
00004B76 6600 FC92                  			bne     GM_Level
00004B7A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004B7E 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004B80 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004B86 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004B88                            
00004B88                            	Level_DoScroll:
00004B88 6100 0000                  		bsr.w	DeformLayers
00004B8C                            
00004B8C                            	Level_SkipScroll:
00004B8C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B92 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B98 6100 D134                  		bsr.w	PaletteCycle
00004B9C 6100 CBB8                  		bsr.w	RunPLC
00004BA0 6100 0000                  		bsr.w	OscillateNumDo
00004BA4 6100 0000                  		bsr.w	SynchroAnimate
00004BA8 6100 0000                  		bsr.w	SignpostArtLoad
00004BAC                            
00004BAC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BB2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BB4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BBA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BBE 4E75                       		rts	
00004BC0                            ; ===========================================================================
00004BC0                            
00004BC0                            Level_ChkDemo:
00004BC0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BC4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BC6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BCA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BCC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BD2 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004BD6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BDC 4E75                       		rts	
00004BDE                            ; ===========================================================================
00004BDE                            
00004BDE                            Level_EndDemo:
00004BDE 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE4 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004BE6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004BEC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004BF0 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004BF2 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004BF8                            
00004BF8                            Level_FadeDemo:
00004BF8 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004BFE 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C04 4278 F794                  		clr.w	(v_palchgspeed).w
00004C08                            
00004C08                            	Level_FDLoop:
00004C08 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C0E 6100 EDF0                  		bsr.w	WaitForVBla
00004C12 6100 0000                  		bsr.w	MoveSonicInDemo
00004C16 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C1C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C22 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C28 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C2C 6A00                       		bpl.s	loc_3BC8
00004C2E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C34 6100 D56C                  		bsr.w	FadeOut_ToBlack
00004C38                            
00004C38                            loc_3BC8:
00004C38 4A78 F614                  		tst.w	(v_demolength).w
00004C3C 66CA                       		bne.s	Level_FDLoop
00004C3E 4E75                       		rts	
00004C40                            ; ===========================================================================
00004C40                            
00004C40                            		include	"_inc\LZWaterFeatures.asm"
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            
00004C40                            LZWaterFeatures:
00004C40 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C46 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C48 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C4C 6600                       			bne.s	@setheight
00004C4E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C54 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C56                            
00004C56 6100 0000                  		bsr.w	LZWindTunnels
00004C5A 6100 0000                  		bsr.w	LZWaterSlides
00004C5E 6100 0000                  		bsr.w	LZDynamicWater
00004C62                            
00004C62                            @setheight:
00004C62 4238 F64E                  		clr.b	(f_wtr_state).w
00004C66 7000                       		moveq	#0,d0
00004C68 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C6C E248                       		lsr.w	#1,d0
00004C6E D078 F648                  		add.w	(v_waterpos2).w,d0
00004C72 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004C76 3038 F646                  		move.w	(v_waterpos1).w,d0
00004C7A 9078 F704                  		sub.w	(v_screenposy).w,d0
00004C7E 6400                       		bcc.s	@isbelow
00004C80 4A40                       		tst.w	d0
00004C82 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004C84                            
00004C84 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004C8A 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004C90                            
00004C90                            	@isbelow:
00004C90 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004C94 6500                       		bcs.s	@isvisible	; if yes, branch
00004C96 303C 00DF                  		move.w	#223,d0
00004C9A                            
00004C9A                            	@isvisible:
00004C9A 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004C9E                            
00004C9E                            @notlabyrinth:
00004C9E 4E75                       		rts	
00004CA0                            ; ===========================================================================
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0                            ; Initial water heights
00004CA0                            ; ---------------------------------------------------------------------------
00004CA0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CA2 0328                       		dc.w $328	; Labyrinth 2
00004CA4 0900                       		dc.w $900	; Labyrinth 3
00004CA6 0228                       		dc.w $228	; Scrap Brain 3
00004CA8                            		even
00004CA8                            ; ===========================================================================
00004CA8                            
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            ; Labyrinth dynamic water routines
00004CA8                            ; ---------------------------------------------------------------------------
00004CA8                            
00004CA8                            LZDynamicWater:
00004CA8 7000                       		moveq	#0,d0
00004CAA 1038 FE11                  		move.b	(v_act).w,d0
00004CAE D040                       		add.w	d0,d0
00004CB0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CB4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CB8 7200                       		moveq	#0,d1
00004CBA 1238 F64C                  		move.b	(f_water).w,d1
00004CBE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CC2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CC6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CC8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CCA 4441                       		neg.w	d1		; set water to move up instead
00004CCC                            
00004CCC                            	@movewater:
00004CCC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004CD0                            
00004CD0                            	@exit:
00004CD0 4E75                       		rts	
00004CD2                            ; ===========================================================================
00004CD2 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004CD4 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004CD6 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004CD8 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004CDA                            ; ===========================================================================
00004CDA                            
00004CDA                            DynWater_LZ1:
00004CDA 4E75                       		rts	
00004CDC                            ; ===========================================================================
00004CDC                            
00004CDC                            DynWater_LZ2:
00004CDC 3038 F700                  		move.w	(v_screenposx).w,d0
00004CE0 323C 0328                  		move.w	#$328,d1
00004CE4 0C40 0500                  		cmpi.w	#$500,d0
00004CE8 6500                       		bcs.s	@setwater
00004CEA 323C 03C8                  		move.w	#$3C8,d1
00004CEE 0C40 0B00                  		cmpi.w	#$B00,d0
00004CF2 6500                       		bcs.s	@setwater
00004CF4 323C 0428                  		move.w	#$428,d1
00004CF8                            
00004CF8                            	@setwater:
00004CF8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004CFC 4E75                       		rts	
00004CFE                            ; ===========================================================================
00004CFE                            
00004CFE                            DynWater_LZ3:
00004CFE 3038 F700                  		move.w	(v_screenposx).w,d0
00004D02 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D06 6600                       		bne.s	@routine2
00004D08                            
00004D08 323C 0900                  		move.w	#$900,d1
00004D0C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D10 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D12 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D18 6500                       		bcs.s	@setwaterlz3
00004D1A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D20 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D22                            
00004D22 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D26 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D2C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D3A                            
00004D3A                            	@setwaterlz3:
00004D3A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D3E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D42 4E75                       		rts	
00004D44                            ; ===========================================================================
00004D44                            
00004D44                            @routine2:
00004D44 5302                       		subq.b	#1,d2
00004D46 6600                       		bne.s	@routine3
00004D48 323C 04C8                  		move.w	#$4C8,d1
00004D4C 0C40 0770                  		cmpi.w	#$770,d0
00004D50 6500                       		bcs.s	@setwater2
00004D52 323C 0308                  		move.w	#$308,d1
00004D56 0C40 1400                  		cmpi.w	#$1400,d0
00004D5A 6500                       		bcs.s	@setwater2
00004D5C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D62 6700                       		beq.s	@sonicislow
00004D64 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D6A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D6C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004D72 6400                       		bcc.s	@setwater2
00004D74                            
00004D74                            @sonicislow:
00004D74 323C 0508                  		move.w	#$508,d1
00004D78 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004D7C 0C40 1770                  		cmpi.w	#$1770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004D88                            
00004D88                            	@setwater2:
00004D88 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D8C 4E75                       		rts	
00004D8E                            ; ===========================================================================
00004D8E                            
00004D8E                            @routine3:
00004D8E 5302                       		subq.b	#1,d2
00004D90 6600                       		bne.s	@routine4
00004D92 323C 0508                  		move.w	#$508,d1
00004D96 0C40 1860                  		cmpi.w	#$1860,d0
00004D9A 6500                       		bcs.s	@setwater3
00004D9C 323C 0188                  		move.w	#$188,d1
00004DA0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DA4 6400                       		bcc.s	@loc_3DC6
00004DA6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DAA 6600                       		bne.s	@setwater3
00004DAC                            
00004DAC                            	@loc_3DC6:
00004DAC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DB2                            
00004DB2                            	@setwater3:
00004DB2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DB6 4E75                       		rts	
00004DB8                            ; ===========================================================================
00004DB8                            
00004DB8                            @routine4:
00004DB8 5302                       		subq.b	#1,d2
00004DBA 6600                       		bne.s	@routine5
00004DBC 323C 0188                  		move.w	#$188,d1
00004DC0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DC4 6500                       		bcs.s	@setwater4
00004DC6 323C 0900                  		move.w	#$900,d1
00004DCA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DCE 6500                       		bcs.s	@setwater4
00004DD0 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004DD6 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004DDC 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004DE2 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004DE8 4E75                       		rts	
00004DEA                            ; ===========================================================================
00004DEA                            
00004DEA                            @setwater4:
00004DEA 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DEE 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DF2 4E75                       		rts	
00004DF4                            ; ===========================================================================
00004DF4                            
00004DF4                            @routine5:
00004DF4 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004DF8 6500                       		bcs.s	@dontset	; if not, branch
00004DFA 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E00                            
00004E00                            	@dontset:
00004E00 4E75                       		rts	
00004E02                            ; ===========================================================================
00004E02                            
00004E02                            DynWater_SBZ3:
00004E02 323C 0228                  		move.w	#$228,d1
00004E06 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E0C 6500                       		bcs.s	@setwater
00004E0E 323C 04C8                  		move.w	#$4C8,d1
00004E12                            
00004E12                            	@setwater:
00004E12 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E16 4E75                       		rts
00004E18                            
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E18                            ; ---------------------------------------------------------------------------
00004E18                            
00004E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E18                            
00004E18                            
00004E18                            LZWindTunnels:
00004E18 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E1C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E20 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E26 7000                       		moveq	#0,d0
00004E28 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E2C E748                       		lsl.w	#3,d0		; multiply by 8
00004E2E D4C0                       		adda.w	d0,a2		; add to address for data
00004E30 7200                       		moveq	#0,d1
00004E32 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E36 6600                       		bne.s	@notact1	; if not, branch
00004E38 7201                       		moveq	#1,d1
00004E3A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E3C                            
00004E3C                            	@notact1:
00004E3C 43F8 D000                  		lea	(v_player).w,a1
00004E40                            
00004E40                            @chksonic:
00004E40 3029 0008                  		move.w	obX(a1),d0
00004E44 B052                       		cmp.w	(a2),d0
00004E46 6500 0000                  		bcs.w	@chknext
00004E4A B06A 0004                  		cmp.w	4(a2),d0
00004E4E 6400 0000                  		bcc.w	@chknext
00004E52 3429 000C                  		move.w	obY(a1),d2
00004E56 B46A 0002                  		cmp.w	2(a2),d2
00004E5A 6500                       		bcs.s	@chknext
00004E5C B46A 0006                  		cmp.w	6(a2),d2
00004E60 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E62 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E66 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E6A 6600                       		bne.s	@skipsound	; if not, branch
00004E76                            
00004E76                            	@skipsound:
00004E76 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004E7A 6600 0000                  		bne.w	@quit	; if yes, branch
00004E7E 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004E84 6400                       		bcc.s	@clrquit	; if yes, branch
00004E86 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004E8C 0440 0080                  		subi.w	#$80,d0
00004E90 B052                       		cmp.w	(a2),d0
00004E92 6400                       		bcc.s	@movesonic
00004E94 7002                       		moveq	#2,d0
00004E96 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004E9C 6600                       		bne.s	@notact2	; if not, branch
00004E9E 4440                       		neg.w	d0
00004EA0                            
00004EA0                            	@notact2:
00004EA0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004EA4                            
00004EA4                            @movesonic:
00004EA4 5869 0008                  		addq.w	#4,obX(a1)
00004EA8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EAE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EB4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EBA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EC0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EC6 6700                       		beq.s	@down		; if not, branch
00004EC8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004ECC                            
00004ECC                            	@down:
00004ECC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004ED2 6700                       		beq.s	@end		; if not, branch
00004ED4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004ED8                            
00004ED8                            	@end:
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            @chknext:
00004EDA 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004EDC 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004EE0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004EE4 6700                       		beq.s	@quit		; if yes, branch
00004EE6 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004EEC                            
00004EEC                            @clrquit:
00004EEC 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004EF0                            
00004EF0                            @quit:
00004EF0 4E75                       		rts	
00004EF2                            ; End of function LZWindTunnels
00004EF2                            
00004EF2                            ; ===========================================================================
00004EF2                            
00004EF2                            		;    left, top,  right, bottom boundaries
00004EF2 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004EFA 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F02 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F0A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F12 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F1A                            		even
00004F1A                            
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            ; Labyrinth Zone water slide subroutine
00004F1A                            ; ---------------------------------------------------------------------------
00004F1A                            
00004F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F1A                            
00004F1A                            
00004F1A                            LZWaterSlides:
00004F1A 43F8 D000                  		lea	(v_player).w,a1
00004F1E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F24 6600                       		bne.s	loc_3F6A	; if not, branch
00004F26 3029 000C                  		move.w	obY(a1),d0
00004F2A E248                       		lsr.w	#1,d0
00004F2C 0240 0380                  		andi.w	#$380,d0
00004F30 1229 0008                  		move.b	obX(a1),d1
00004F34 0241 007F                  		andi.w	#$7F,d1
00004F38 D041                       		add.w	d1,d0
00004F3A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F3E 1032 0000                  		move.b	(a2,d0.w),d0
00004F42 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F46 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F48                            
00004F48                            loc_3F62:
00004F48 B022                       		cmp.b	-(a2),d0
00004F4A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F4E 6700                       		beq.s	LZSlide_Move
00004F50                            
00004F50                            loc_3F6A:
00004F50 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F54 6700                       		beq.s	locret_3F7A
00004F56 337C 0005 003E             		move.w	#5,$3E(a1)
00004F5C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F60                            
00004F60                            locret_3F7A:
00004F60 4E75                       		rts	
00004F62                            ; ===========================================================================
00004F62                            
00004F62                            LZSlide_Move:
00004F62 0C41 0003                  		cmpi.w	#3,d1
00004F66 6400                       		bcc.s	loc_3F84
00004F68 4E71                       		nop	
00004F6A                            
00004F6A                            loc_3F84:
00004F6A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004F70 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004F74 1340 0020                  		move.b	d0,obInertia(a1)
00004F78 6A00                       		bpl.s	loc_3F9A
00004F7A 08E9 0000 0022             		bset	#0,obStatus(a1)
00004F80                            
00004F80                            loc_3F9A:
00004F80 4229 0021                  		clr.b	obInertia+1(a1)
00004F84 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004F8A 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004F90 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F94 0200 001F                  		andi.b	#$1F,d0
00004F98 6600                       		bne.s	locret_3FBE
00004FA4                            
00004FA4                            locret_3FBE:
00004FA4 4E75                       		rts	
00004FA6                            ; End of function LZWaterSlides
00004FA6                            
00004FA6                            ; ===========================================================================
00004FA6                            ; byte_3FC0:
00004FA6                            Slide_Speeds:
00004FA6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FAE 00                         		even
00004FAE                            
00004FAE                            Slide_Chunks:
00004FAE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FAF                            ; byte_3FCF
00004FAF                            Slide_Chunks_End
00004FB0 00                         		even
00004FB0 00                         		even
00004FB0                            		include	"_inc\MoveSonicInDemo.asm"
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            ; Subroutine to	move Sonic in demo mode
00004FB0                            ; ---------------------------------------------------------------------------
00004FB0                            
00004FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FB0                            
00004FB0                            
00004FB0                            MoveSonicInDemo:
00004FB0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FB4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FB6 4E75                       		rts	
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            ; This is an unused subroutine for recording a demo
00004FB8                            
00004FB8                            DemoRecorder:
00004FB8 43F9 0008 0000             		lea	($80000).l,a1
00004FBE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FC2 D2C0                       		adda.w	d0,a1
00004FC4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FC8 B011                       		cmp.b	(a1),d0
00004FCA 6600                       		bne.s	@next
00004FCC 5229 0001                  		addq.b	#1,1(a1)
00004FD0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004FD6 6700                       		beq.s	@next
00004FD8 4E75                       		rts	
00004FDA                            
00004FDA                            	@next:
00004FDA 1340 0002                  		move.b	d0,2(a1)
00004FDE 137C 0000 0003             		move.b	#0,3(a1)
00004FE4 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004FE8 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00004FEE 4E75                       		rts	
00004FF0                            ; ===========================================================================
00004FF0                            
00004FF0                            MDemo_On:
00004FF0 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004FF4 6A00                       		bpl.s	@dontquit	; if not, branch
00004FF6 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004FFA 6B00                       		bmi.s	@dontquit	; if yes, branch
00004FFC 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005002                            
00005002                            	@dontquit:
00005002 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005008 7000                       		moveq	#0,d0
0000500A 1038 FE10                  		move.b	(v_zone).w,d0
0000500E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005014 6600                       		bne.s	@notspecial	; if not, branch
00005016 7006                       		moveq	#6,d0		; use demo #6
00005018                            
00005018                            	@notspecial:
00005018 E548                       		lsl.w	#2,d0
0000501A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000501E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005022 6A00                       		bpl.s	@notcredits	; if not, branch
00005024 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000502A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000502E 5340                       		subq.w	#1,d0
00005030 E548                       		lsl.w	#2,d0
00005032 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005036                            
00005036                            	@notcredits:
00005036 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000503A D2C0                       		adda.w	d0,a1
0000503C 1011                       		move.b	(a1),d0
0000503E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005042 1200                       		move.b	d0,d1
00005044 7400                       			moveq	#0,d2
00005046 B500                       		eor.b	d2,d0
00005048 10C1                       		move.b	d1,(a0)+
0000504A C001                       		and.b	d1,d0
0000504C 10C0                       		move.b	d0,(a0)+
0000504E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005052 6400                       		bcc.s	@end
00005054 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000505A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000505E                            
0000505E                            	@end:
0000505E 4E75                       		rts	
00005060                            ; End of function MoveSonicInDemo
00005060                            
00005060                            ; ===========================================================================
00005060                            ; ---------------------------------------------------------------------------
00005060                            ; Demo sequence	pointers
00005060                            ; ---------------------------------------------------------------------------
00005060 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005064 0000 0000                  		dc.l Demo_GHZ
00005068 0000 0000                  		dc.l Demo_MZ
0000506C 0000 0000                  		dc.l Demo_MZ
00005070 0000 0000                  		dc.l Demo_SYZ
00005074 0000 0000                  		dc.l Demo_SYZ
00005078 0000 0000                  		dc.l Demo_SS
0000507C 0000 0000                  		dc.l Demo_SS
00005080                            
00005080 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005084 0000 0000                  		dc.l Demo_EndMZ
00005088 0000 0000                  		dc.l Demo_EndSYZ
0000508C 0000 0000                  		dc.l Demo_EndLZ
00005090 0000 0000                  		dc.l Demo_EndSLZ
00005094 0000 0000                  		dc.l Demo_EndSBZ1
00005098 0000 0000                  		dc.l Demo_EndSBZ2
0000509C 0000 0000                  		dc.l Demo_EndGHZ2
000050A0                            
000050A0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050B0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050C0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000050D0                            		even
000050D0                            		even
000050D0                            
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            ; Collision index pointer loading subroutine
000050D0                            ; ---------------------------------------------------------------------------
000050D0                            
000050D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050D0                            
000050D0                            
000050D0                            ColIndexLoad:
000050D0 7000                       		moveq	#0,d0
000050D2 1038 FE10                  		move.b	(v_zone).w,d0
000050D6 E548                       		lsl.w	#2,d0
000050D8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000050DE 4E75                       		rts	
000050E0                            ; End of function ColIndexLoad
000050E0                            
000050E0                            ; ===========================================================================
000050E0                            ; ---------------------------------------------------------------------------
000050E0                            ; Collision index pointers
000050E0                            ; ---------------------------------------------------------------------------
000050E0 0000 0000                  ColPointers:	dc.l Col_GHZ
000050E4 0000 0000                  		dc.l Col_LZ
000050E8 0000 0000                  		dc.l Col_MZ
000050EC 0000 0000                  		dc.l Col_SLZ
000050F0 0000 0000                  		dc.l Col_SYZ
000050F4 0000 0000                  		dc.l Col_SBZ
000050F8                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
000050F8                            
000050F8                            		include	"_inc\Oscillatory Routines.asm"
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            ; Oscillating number subroutines
000050F8                            ; ---------------------------------------------------------------------------
000050F8                            
000050F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050F8                            
000050F8                            ; Initialise the values
000050F8                            
000050F8                            OscillateNumInit:
000050F8 43F8 FE5E                  		lea	(v_oscillate).w,a1
000050FC 45F9 0000 0000             		lea	(@baselines).l,a2
00005102 7220                       		moveq	#$20,d1
00005104                            
00005104                            	@loop:
00005104 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005106 51C9 FFFC                  		dbf	d1,@loop
0000510A 4E75                       		rts	
0000510C                            
0000510C                            
0000510C                            ; ===========================================================================
0000510C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000510E 0080 0000                  		dc.w $80, 0
00005112 0080 0000                  		dc.w $80, 0
00005116 0080 0000                  		dc.w $80, 0
0000511A 0080 0000                  		dc.w $80, 0
0000511E 0080 0000                  		dc.w $80, 0
00005122 0080 0000                  		dc.w $80, 0
00005126 0080 0000                  		dc.w $80, 0
0000512A 0080 0000                  		dc.w $80, 0
0000512E 0080 0000                  		dc.w $80, 0
00005132 50F0 011E                  		dc.w $50F0, $11E
00005136 2080 00B4                  		dc.w $2080, $B4
0000513A 3080 010E                  		dc.w $3080, $10E
0000513E 5080 01C2                  		dc.w $5080, $1C2
00005142 7080 0276                  		dc.w $7080, $276
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E                            		even
0000514E                            
0000514E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000514E                            
0000514E                            ; Oscillate values
0000514E                            
0000514E                            OscillateNumDo:
0000514E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005154 6400                       		bcc.s	@end		; if yes, branch
00005156 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000515A 45F9 0000 0000             		lea	(@settings).l,a2
00005160 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005162 720F                       		moveq	#$F,d1
00005164                            
00005164                            @loop:
00005164 341A                       		move.w	(a2)+,d2	; get frequency
00005166 381A                       		move.w	(a2)+,d4	; get amplitude
00005168 0303                       		btst	d1,d3		; check oscillation direction
0000516A 6600                       		bne.s	@down		; branch if 1
0000516C                            
0000516C                            	@up:
0000516C 3029 0002                  		move.w	2(a1),d0	; get current rate
00005170 D042                       		add.w	d2,d0		; add frequency
00005172 3340 0002                  		move.w	d0,2(a1)
00005176 D151                       		add.w	d0,0(a1)	; add rate to value
00005178 B811                       		cmp.b	0(a1),d4
0000517A 6200                       		bhi.s	@next
0000517C 03C3                       		bset	d1,d3
0000517E 6000                       		bra.s	@next
00005180                            
00005180                            	@down:
00005180 3029 0002                  		move.w	2(a1),d0
00005184 9042                       		sub.w	d2,d0
00005186 3340 0002                  		move.w	d0,2(a1)
0000518A D151                       		add.w	d0,0(a1)
0000518C B811                       		cmp.b	0(a1),d4
0000518E 6300                       		bls.s	@next
00005190 0383                       		bclr	d1,d3
00005192                            
00005192                            	@next:
00005192 5849                       		addq.w	#4,a1
00005194 51C9 FFCE                  		dbf	d1,@loop
00005198 31C3 FE5E                  		move.w	d3,(v_oscillate).w
0000519C                            
0000519C                            @end:
0000519C 4E75                       		rts	
0000519E                            ; End of function OscillateNumDo
0000519E                            
0000519E                            ; ===========================================================================
0000519E 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051A2 0002 0018                  		dc.w 2,	$18
000051A6 0002 0020                  		dc.w 2,	$20
000051AA 0002 0030                  		dc.w 2,	$30
000051AE 0004 0020                  		dc.w 4,	$20
000051B2 0008 0008                  		dc.w 8,	8
000051B6 0008 0040                  		dc.w 8,	$40
000051BA 0004 0040                  		dc.w 4,	$40
000051BE 0002 0050                  		dc.w 2,	$50
000051C2 0002 0050                  		dc.w 2,	$50
000051C6 0002 0020                  		dc.w 2,	$20
000051CA 0003 0030                  		dc.w 3,	$30
000051CE 0005 0050                  		dc.w 5,	$50
000051D2 0007 0070                  		dc.w 7,	$70
000051D6 0002 0010                  		dc.w 2,	$10
000051DA 0002 0010                  		dc.w 2,	$10
000051DE                            		even
000051DE                            		even
000051DE                            
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000051DE                            ; ---------------------------------------------------------------------------
000051DE                            
000051DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051DE                            
000051DE                            
000051DE                            SynchroAnimate:
000051DE                            
000051DE                            ; Used for GHZ spiked log
000051DE                            Sync1:
000051DE 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000051E2 6A00                       		bpl.s	Sync2		; if not, branch
000051E4 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
000051EA 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
000051EE 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
000051F4                            
000051F4                            ; Used for rings and giant rings
000051F4                            Sync2:
000051F4 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
000051F8 6A00                       		bpl.s	Sync3
000051FA 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005200 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005204 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000520A                            
0000520A                            ; Used for nothing
0000520A                            Sync3:
0000520A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000520E 6A00                       		bpl.s	Sync4
00005210 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005216 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000521A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005220 6500                       		blo.s	Sync4
00005222 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005228                            
00005228                            ; Used for bouncing rings
00005228                            Sync4:
00005228 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000522C 6700                       		beq.s	SyncEnd
0000522E 7000                       		moveq	#0,d0
00005230 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005234 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005238 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000523C EF58                       		rol.w	#7,d0
0000523E 0240 0003                  		andi.w	#3,d0
00005242 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005246 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000524A                            
0000524A                            SyncEnd:
0000524A 4E75                       		rts	
0000524C                            ; End of function SynchroAnimate
0000524C                            
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            ; End-of-act signpost pattern loading subroutine
0000524C                            ; ---------------------------------------------------------------------------
0000524C                            
0000524C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000524C                            
0000524C                            
0000524C                            SignpostArtLoad:
0000524C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005250 6600 0000                  		bne.w	@exit		; if yes, branch
00005254 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000525A 6700                       		beq.s	@exit		; if yes, branch
0000525C                            
0000525C 3038 F700                  		move.w	(v_screenposx).w,d0
00005260 3238 F72A                  		move.w	(v_limitright2).w,d1
00005264 0441 0100                  		subi.w	#$100,d1
00005268 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000526A 6D00                       		blt.s	@exit		; if not, branch
0000526C 4A38 FE1E                  		tst.b	(f_timecount).w
00005270 6700                       		beq.s	@exit
00005272 B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005276 6700                       		beq.s	@exit
00005278 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
0000527C 7000                       		moveq	#plcid_Signpost,d0
0000527E 6000 C49C                  		bra.w	NewPLC		; load signpost	patterns
00005282                            
00005282                            	@exit:
00005282 4E75                       		rts	
00005284                            ; End of function SignpostArtLoad
00005284                            
00005284                            ; ===========================================================================
00005284                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005304                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005434                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054B4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055B4                            ; ===========================================================================
000055B4                            
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            ; Special Stage
000055B4                            ; ---------------------------------------------------------------------------
000055B4                            
000055B4                            GM_Special:
000055BC 6100 CCEE                  		bsr.w	PaletteWhiteOut
000055C0 46FC 2700                  		disable_ints
000055C4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055CA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055CE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000055D2 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
000055D8 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000055DC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000055E0 0200 00BF                  		andi.b	#$BF,d0
000055E4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000055EA 6100 BB94                  		bsr.w	ClearScreen
000055EE 46FC 2300                  		enable_ints
000055F2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005614                            
00005614                            	SS_WaitForDMA:
00005614 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005616 0801 0001                  		btst	#1,d1		; is DMA running?
0000561A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000561C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005620 6100 0000                  		bsr.w	SS_BGLoad
00005624 7000                       		moveq	#plcid_SpecialStage,d0
00005626 6100 C22E                  		bsr.w	QuickPLC	; load special stage patterns
0000562A                            
0000562A 43F8 D000                  		lea	(v_objspace).w,a1
0000562E 7000                       		moveq	#0,d0
00005630 323C 07FF                  		move.w	#$7FF,d1
00005634                            	SS_ClrObjRam:
00005634 22C0                       		move.l	d0,(a1)+
00005636 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000563A                            
0000563A 43F8 F700                  		lea	(v_screenposx).w,a1
0000563E 7000                       		moveq	#0,d0
00005640 323C 003F                  		move.w	#$3F,d1
00005644                            	SS_ClrRam1:
00005644 22C0                       		move.l	d0,(a1)+
00005646 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000564A                            
0000564A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000564E 7000                       		moveq	#0,d0
00005650 323C 0027                  		move.w	#$27,d1
00005654                            	SS_ClrRam2:
00005654 22C0                       		move.l	d0,(a1)+
00005656 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000565A                            
0000565A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 007F                  		move.w	#$7F,d1
00005664                            	SS_ClrNemRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000566A                            
0000566A 4238 F64E                  		clr.b	(f_wtr_state).w
0000566E 4278 FE02                  		clr.w	(f_restart).w
00005672 700A                       		moveq	#palid_Special,d0
00005674 6100 CDB6                  		bsr.w	PalLoad1	; load special stage palette
00005678 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
0000567E 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005686 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
0000568E 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005694 6100 0000                  		bsr.w	PalCycle_SS
00005698 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
0000569C 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056AA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056B0 43F9 0000 5060             		lea	(DemoDataPtr).l,a1
000056B6 7006                       		moveq	#6,d0
000056B8 E548                       		lsl.w	#2,d0
000056BA 2271 0000                  		movea.l	(a1,d0.w),a1
000056BE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056C4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056C8 4278 FE20                  		clr.w	(v_rings).w
000056CC 4238 FE1B                  		clr.b	(v_lifecount).w
000056D0 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
000056D6 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000056DC 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000056E0 6700                       		beq.s	SS_NoDebug	; if not, branch
000056E2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000056E8 6700                       		beq.s	SS_NoDebug	; if not, branch
000056EA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000056F0                            
000056F0                            	SS_NoDebug:
000056F0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000056F4 0000 0040                  		ori.b	#$40,d0
000056F8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000056FE 6100 CB00                  		bsr.w	PaletteWhiteIn
00005702                            
00005702                            ; ---------------------------------------------------------------------------
00005702                            ; Main Special Stage loop
00005702                            ; ---------------------------------------------------------------------------
00005702                            
00005702                            SS_MainLoop:
00005702 6100 BB58                  		bsr.w	PauseGame
00005706 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000570C 6100 E2F2                  		bsr.w	WaitForVBla
00005710 6100 F89E                  		bsr.w	MoveSonicInDemo
00005714 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000571A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005720 4EB9 0000 0000             		jsr	(BuildSprites).l
00005726 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000572C 6100 0000                  		bsr.w	SS_BGAnimate
00005730 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005734 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005736 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000573A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000573E                            
0000573E                            	SS_ChkEnd:
0000573E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005744 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005748                            
00005748 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000574C 6600 0000                  		bne.w	SS_ToLevel
00005750 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005756 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000575C 6500                       		blo.s	SS_Finish	; if not, branch
0000575E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005762                            
00005762                            SS_Finish:
00005762 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005768 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000576E 4278 F794                  		clr.w	(v_palchgspeed).w
00005772                            
00005772                            	SS_FinLoop:
00005772 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005778 6100 E286                  		bsr.w	WaitForVBla
0000577C 6100 F832                  		bsr.w	MoveSonicInDemo
00005780 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005786 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000578C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005792 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005798 6100 0000                  		bsr.w	SS_BGAnimate
0000579C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057A0 6A00                       		bpl.s	loc_47D4
000057A2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057A8 6100 CB22                  		bsr.w	WhiteOut_ToWhite
000057AC                            
000057AC                            loc_47D4:
000057AC 4A78 F614                  		tst.w	(v_demolength).w
000057B0 66C0                       		bne.s	SS_FinLoop
000057B2                            
000057B2 46FC 2700                  		disable_ints
000057B6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057BC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057C0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057C4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057C8 6100 B9B6                  		bsr.w	ClearScreen
000057D6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000057DC 6100 BB20                  		bsr.w	NemDec
000057E0 4EB9 0000 0000             		jsr	(Hud_Base).l
000057E6 31FC C800 C8FC             		ResetDMAQueue	
000057EC 46FC 2300                  		enable_ints
000057F0 7011                       		moveq	#palid_SSResult,d0
000057F2 6100 CC74                  		bsr.w	PalLoad2	; load results screen palette
000057F6 7000                       		moveq	#plcid_Main,d0
000057F8 6100 BF22                  		bsr.w	NewPLC
000057FC 7000                       		moveq	#plcid_SSResult,d0
000057FE 6100 BEEA                  		bsr.w	AddPLC		; load results screen patterns
00005802 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005808 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000580E 3038 FE20                  		move.w	(v_rings).w,d0
00005812 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005816 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005824                            
00005824 43F8 D000                  		lea	(v_objspace).w,a1
00005828 7000                       		moveq	#0,d0
0000582A 323C 07FF                  		move.w	#$7FF,d1
0000582E                            	SS_EndClrObjRam:
0000582E 22C0                       		move.l	d0,(a1)+
00005830 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005834                            
00005834 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000583A                            
0000583A                            SS_NormalExit:
0000583A 6100 BA20                  		bsr.w	PauseGame
0000583E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005844 6100 E1BA                  		bsr.w	WaitForVBla
00005848 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005854 6100 BF00                  		bsr.w	RunPLC
00005858 4A78 FE02                  		tst.w	(f_restart).w
0000585C 67DC                       		beq.s	SS_NormalExit
0000585E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005862 66D6                       		bne.s	SS_NormalExit
0000586C 6100 CA3E                  		bsr.w	PaletteWhiteOut
00005870 4E75                       		rts	
00005872                            ; ===========================================================================
00005872                            
00005872                            SS_ToSegaScreen:
00005872 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005878 4E75                       		rts
0000587A                            
0000587A 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005880 67F0                       		beq.s	SS_ToSegaScreen
00005882 4E75                       		rts
00005884                            
00005884                            ; ---------------------------------------------------------------------------
00005884                            ; Special stage	background loading subroutine
00005884                            ; ---------------------------------------------------------------------------
00005884                            
00005884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005884                            
00005884                            
00005884                            SS_BGLoad:
00005884 43F9 00FF 0000             		lea	($FF0000).l,a1
0000588A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005890 303C 4051                  		move.w	#$4051,d0
00005894 6100 BFF2                  		bsr.w	EniDec
00005898 263C 5000 0001             		move.l	#$50000001,d3
0000589E 45F9 00FF 0080             		lea	($FF0080).l,a2
000058A4 7E06                       		moveq	#6,d7
000058A6                            
000058A6                            loc_48BE:
000058A6 2003                       		move.l	d3,d0
000058A8 7C03                       		moveq	#3,d6
000058AA 7800                       		moveq	#0,d4
000058AC 0C47 0003                  		cmpi.w	#3,d7
000058B0 6400                       		bhs.s	loc_48CC
000058B2 7801                       		moveq	#1,d4
000058B4                            
000058B4                            loc_48CC:
000058B4 7A07                       		moveq	#7,d5
000058B6                            
000058B6                            loc_48CE:
000058B6 224A                       		movea.l	a2,a1
000058B8 0A04 0001                  		eori.b	#1,d4
000058BC 6600                       		bne.s	loc_48E2
000058BE 0C47 0006                  		cmpi.w	#6,d7
000058C2 6600                       		bne.s	loc_48F2
000058C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058CA                            
000058CA                            loc_48E2:
000058CA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058CE 7207                       		moveq	#7,d1
000058D0 7407                       		moveq	#7,d2
000058D2 6100 BA00                  		bsr.w	TilemapToVRAM
000058D6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000058DA                            
000058DA                            loc_48F2:
000058DA 0680 0010 0000             		addi.l	#$100000,d0
000058E0 51CD FFD4                  		dbf	d5,loc_48CE
000058E4 0680 0380 0000             		addi.l	#$3800000,d0
000058EA 0A04 0001                  		eori.b	#1,d4
000058EE 51CE FFC4                  		dbf	d6,loc_48CC
000058F2 0683 1000 0000             		addi.l	#$10000000,d3
000058F8 6A00                       		bpl.s	loc_491C
000058FA 4843                       		swap	d3
000058FC 0683 0000 C000             		addi.l	#$C000,d3
00005902 4843                       		swap	d3
00005904                            
00005904                            loc_491C:
00005904 D4FC 0080                  		adda.w	#$80,a2
00005908 51CF FF9C                  		dbf	d7,loc_48BE
0000590C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005912 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005918 303C 4000                  		move.w	#$4000,d0
0000591C 6100 BF6A                  		bsr.w	EniDec
00005920 43F9 00FF 0000             		lea	($FF0000).l,a1
00005926 203C 4000 0003             		move.l	#$40000003,d0
0000592C 723F                       		moveq	#$3F,d1
0000592E 741F                       		moveq	#$1F,d2
00005930 6100 B9A2                  		bsr.w	TilemapToVRAM
00005934 43F9 00FF 0000             		lea	($FF0000).l,a1
0000593A 203C 5000 0003             		move.l	#$50000003,d0
00005940 723F                       		moveq	#$3F,d1
00005942 743F                       		moveq	#$3F,d2
00005944 6100 B98E                  		bsr.w	TilemapToVRAM
00005948 4E75                       		rts	
0000594A                            ; End of function SS_BGLoad
0000594A                            
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            ; Palette cycling routine - special stage
0000594A                            ; ---------------------------------------------------------------------------
0000594A                            
0000594A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000594A                            
0000594A                            
0000594A                            PalCycle_SS:
0000594A 4A78 F63A                  		tst.w	(f_pause).w
0000594E 6600                       		bne.s	locret_49E6
00005950 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005954 6A00                       		bpl.s	locret_49E6
00005956 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000595C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005960 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005964 0240 001F                  		andi.w	#$1F,d0
00005968 E548                       		lsl.w	#2,d0
0000596A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005970 D0C0                       		adda.w	d0,a0
00005972 1018                       		move.b	(a0)+,d0
00005974 6A00                       		bpl.s	loc_4992
00005976 303C 01FF                  		move.w	#$1FF,d0
0000597A                            
0000597A                            loc_4992:
0000597A 31C0 F79C                  		move.w	d0,(v_palss_time).w
0000597E 7000                       		moveq	#0,d0
00005980 1018                       		move.b	(a0)+,d0
00005982 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005986 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000598C 43F1 0000                  		lea	(a1,d0.w),a1
00005990 303C 8200                  		move.w	#-$7E00,d0
00005994 1019                       		move.b	(a1)+,d0
00005996 3C80                       		move.w	d0,(a6)
00005998 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
0000599C 303C 8400                  		move.w	#-$7C00,d0
000059A0 1018                       		move.b	(a0)+,d0
000059A2 3C80                       		move.w	d0,(a6)
000059A4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059AE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059B6 7000                       		moveq	#0,d0
000059B8 1018                       		move.b	(a0)+,d0
000059BA 6B00                       		bmi.s	loc_49E8
000059BC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059C2 D2C0                       		adda.w	d0,a1
000059C4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059C8 24D9                       		move.l	(a1)+,(a2)+
000059CA 24D9                       		move.l	(a1)+,(a2)+
000059CC 24D9                       		move.l	(a1)+,(a2)+
000059CE                            
000059CE                            locret_49E6:
000059CE 4E75                       		rts	
000059D0                            ; ===========================================================================
000059D0                            
000059D0                            loc_49E8:
000059D0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000059D4 0C40 008A                  		cmpi.w	#$8A,d0
000059D8 6500                       		blo.s	loc_49F4
000059DA 5241                       		addq.w	#1,d1
000059DC                            
000059DC                            loc_49F4:
000059DC C2FC 002A                  		mulu.w	#$2A,d1
000059E0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000059E6 D2C1                       		adda.w	d1,a1
000059E8 0240 007F                  		andi.w	#$7F,d0
000059EC 0880 0000                  		bclr	#0,d0
000059F0 6700                       		beq.s	loc_4A18
000059F2 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
000059F6 24D1                       		move.l	(a1),(a2)+
000059F8 24E9 0004                  		move.l	4(a1),(a2)+
000059FC 24E9 0008                  		move.l	8(a1),(a2)+
00005A00                            
00005A00                            loc_4A18:
00005A00 D2FC 000C                  		adda.w	#$C,a1
00005A04 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A08 0C40 000A                  		cmpi.w	#$A,d0
00005A0C 6500                       		blo.s	loc_4A2E
00005A0E 0440 000A                  		subi.w	#$A,d0
00005A12 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A16                            
00005A16                            loc_4A2E:
00005A16 3200                       		move.w	d0,d1
00005A18 D040                       		add.w	d0,d0
00005A1A D041                       		add.w	d1,d0
00005A1C D2C0                       		adda.w	d0,a1
00005A1E 24D9                       		move.l	(a1)+,(a2)+
00005A20 34D9                       		move.w	(a1)+,(a2)+
00005A22 4E75                       		rts	
00005A24                            ; End of function PalCycle_SS
00005A24                            
00005A24                            ; ===========================================================================
00005A24 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A34                            
00005A34 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A44 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A54 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A64 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005A74 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005A84 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005A94 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AA4                            		even
00005AA4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AB2                            		even
00005AB2                            
00005AB2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005AFA                            		even
00005AFA                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BCC                            		even
00005BCC                            
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            ; Subroutine to	make the special stage background animated
00005BCC                            ; ---------------------------------------------------------------------------
00005BCC                            
00005BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BCC                            
00005BCC                            
00005BCC                            SS_BGAnimate:
00005BCC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005BD0 6600                       		bne.s	loc_4BF6
00005BD2 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005BD8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BDE                            
00005BDE                            loc_4BF6:
00005BDE 0C40 0008                  		cmpi.w	#8,d0
00005BE2 6400                       		bhs.s	loc_4C4E
00005BE4 0C40 0006                  		cmpi.w	#6,d0
00005BE8 6600                       		bne.s	loc_4C10
00005BEA 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005BEE 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005BF2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005BF8                            
00005BF8                            loc_4C10:
00005BF8 7000                       		moveq	#0,d0
00005BFA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005BFE 4440                       		neg.w	d0
00005C00 4840                       		swap	d0
00005C02 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C08 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C0C 7609                       		moveq	#9,d3
00005C0E                            
00005C0E                            loc_4C26:
00005C0E 302B 0002                  		move.w	2(a3),d0
00005C12 6100 DE1E                  		bsr.w	CalcSine
00005C16 7400                       		moveq	#0,d2
00005C18 1419                       		move.b	(a1)+,d2
00005C1A C1C2                       		muls.w	d2,d0
00005C1C E080                       		asr.l	#8,d0
00005C1E 36C0                       		move.w	d0,(a3)+
00005C20 1419                       		move.b	(a1)+,d2
00005C22 4882                       		ext.w	d2
00005C24 D55B                       		add.w	d2,(a3)+
00005C26 51CB FFE6                  		dbf	d3,loc_4C26
00005C2A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C2E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C34 6000                       		bra.s	loc_4C7E
00005C36                            ; ===========================================================================
00005C36                            
00005C36                            loc_4C4E:
00005C36 0C40 000C                  		cmpi.w	#$C,d0
00005C3A 6600                       		bne.s	loc_4C74
00005C3C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C40 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C44 243C 0001 8000             		move.l	#$18000,d2
00005C4A 7206                       		moveq	#6,d1
00005C4C                            
00005C4C                            loc_4C64:
00005C4C 2013                       		move.l	(a3),d0
00005C4E 9082                       		sub.l	d2,d0
00005C50 26C0                       		move.l	d0,(a3)+
00005C52 0482 0000 2000             		subi.l	#$2000,d2
00005C58 51C9 FFF2                  		dbf	d1,loc_4C64
00005C5C                            
00005C5C                            loc_4C74:
00005C5C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C60 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C66                            
00005C66                            loc_4C7E:
00005C66 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C6A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C6E 4440                       		neg.w	d0
00005C70 4840                       		swap	d0
00005C72 7600                       		moveq	#0,d3
00005C74 161A                       		move.b	(a2)+,d3
00005C76 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005C7A 4442                       		neg.w	d2
00005C7C 0242 00FF                  		andi.w	#$FF,d2
00005C80 E54A                       		lsl.w	#2,d2
00005C82                            
00005C82                            loc_4C9A:
00005C82 301B                       		move.w	(a3)+,d0
00005C84 544B                       		addq.w	#2,a3
00005C86 7200                       		moveq	#0,d1
00005C88 121A                       		move.b	(a2)+,d1
00005C8A 5341                       		subq.w	#1,d1
00005C8C                            
00005C8C                            loc_4CA4:
00005C8C 2380 2000                  		move.l	d0,(a1,d2.w)
00005C90 5842                       		addq.w	#4,d2
00005C92 0242 03FC                  		andi.w	#$3FC,d2
00005C96 51C9 FFF4                  		dbf	d1,loc_4CA4
00005C9A 51CB FFE6                  		dbf	d3,loc_4C9A
00005C9E 4E75                       		rts	
00005CA0                            ; End of function SS_BGAnimate
00005CA0                            
00005CA0                            ; ===========================================================================
00005CA0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CAC                            		even
00005CAC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CB4                            		even
00005CB4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CC8                            		even
00005CC8                            
00005CC8                            ; ===========================================================================
00005CC8                            
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Continue screen
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            
00005CC8                            GM_Continue:
00005CC8 6100 C4B8                  		bsr.w	PaletteFadeOut
00005CCC 46FC 2700                  		disable_ints
00005CD0 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005CD4 0200 00BF                  		andi.b	#$BF,d0
00005CD8 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005CDE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005CE4 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005CE8 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005CEC 6100 B492                  		bsr.w	ClearScreen
00005CF0                            
00005CF0 43F8 D000                  		lea	(v_objspace).w,a1
00005CF4 7000                       		moveq	#0,d0
00005CF6 323C 07FF                  		move.w	#$7FF,d1
00005CFA                            	Cont_ClrObjRam:
00005CFA 22C0                       		move.l	d0,(a1)+
00005CFC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D00                            
00005D0A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D10 6100 B5EC                  		bsr.w	NemDec
00005D1E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D24 6100 B5D8                  		bsr.w	NemDec
00005D32 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D38 6100 B5C4                  		bsr.w	NemDec
00005D3C 720A                       		moveq	#10,d1
00005D3E 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D44 7012                       		moveq	#palid_Continue,d0
00005D46 6100 C6E4                  		bsr.w	PalLoad1	; load continue	screen palette
00005D52 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D58 42B8 F700                  		clr.l	(v_screenposx).w
00005D5C 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D64 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D6A 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005D70 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005D76 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005D7C 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005D82 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005D88 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005D8E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005D94 4EB9 0000 0000             		jsr	(BuildSprites).l
00005D9A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D9E 0000 0040                  		ori.b	#$40,d0
00005DA2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DA8 6100 C332                  		bsr.w	PaletteFadeIn
00005DAC                            
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            ; Continue screen main loop
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            
00005DAC                            Cont_MainLoop:
00005DAC 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DB2 6100 DC4C                  		bsr.w	WaitForVBla
00005DB6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DBC 6400                       		bhs.s	loc_4DF2
00005DBE 46FC 2700                  		disable_ints
00005DC2 3238 F614                  		move.w	(v_demolength).w,d1
00005DC6 82FC 003C                  		divu.w	#$3C,d1
00005DCA 0281 0000 000F             		andi.l	#$F,d1
00005DD0 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005DD6 46FC 2300                  		enable_ints
00005DDA                            
00005DDA                            loc_4DF2:
00005DDA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DE0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DE6 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005DEC 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005DEE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DF4 64B6                       		bhs.s	Cont_MainLoop
00005DF6 4A78 F614                  		tst.w	(v_demolength).w
00005DFA 6600 FFB0                  		bne.w	Cont_MainLoop
00005DFE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E04 4E75                       		rts	
00005E06                            ; ===========================================================================
00005E06                            
00005E06                            Cont_GotoLevel:
00005E06 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E0C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E12 7000                       		moveq	#0,d0
00005E14 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E18 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E1C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E20 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E24 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E28 4E75                       		rts	
00005E2A                            ; ===========================================================================
00005E2A                            
00005E2A                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            ; Object 80 - Continue screen elements
00005E2A                            ; ---------------------------------------------------------------------------
00005E2A                            
00005E2A                            ContScrItem:
00005E2A 7000                       		moveq	#0,d0
00005E2C 1028 0024                  		move.b	$24(a0),d0
00005E30 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E34 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E38                            ; ===========================================================================
00005E38 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E3A 0000                       		dc.w CSI_Display-CSI_Index
00005E3C 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E3E 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            CSI_Main:	; Routine 0
00005E40 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E44 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E4C 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E52 117C 0000 0001             		move.b	#0,obRender(a0)
00005E58 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E5E 317C 0120 0008             		move.w	#$120,obX(a0)
00005E64 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E6A 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005E70                            
00005E70                            CSI_Display:	; Routine 2
00005E70 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005E76                            ; ===========================================================================
00005E76                            
00005E76                            	CSI_MiniSonicPos:
00005E76 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005E88 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005E94                            
00005E94                            CSI_MakeMiniSonic:
00005E94                            		; Routine 4
00005E94 2248                       		movea.l	a0,a1
00005E96 45F9 0000 5E76             		lea	(CSI_MiniSonicPos).l,a2
00005E9C 7200                       		moveq	#0,d1
00005E9E 1238 FE18                  		move.b	(v_continues).w,d1
00005EA2 5501                       		subq.b	#2,d1
00005EA4 6400                       		bcc.s	CSI_MoreThan1
00005EA6 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EAC                            
00005EAC                            	CSI_MoreThan1:
00005EAC 7601                       		moveq	#1,d3
00005EAE 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EB2 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EB4                            
00005EB4 7600                       		moveq	#0,d3
00005EB6 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EB8                            
00005EB8                            	CSI_FewerThan16:
00005EB8 1401                       		move.b	d1,d2
00005EBA 0202 0001                  		andi.b	#1,d2
00005EBE                            
00005EBE                            CSI_MiniSonicLoop:
00005EBE 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EC2 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EC6 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EC8 6700                       		beq.s	CSI_Even	; if yes, branch
00005ECA 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005ED0                            
00005ED0                            	CSI_Even:
00005ED0 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005ED6 137C 0006 001A             		move.b	#6,obFrame(a1)
00005EDC 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005EE2 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005EEA 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005EF0 137C 0000 0001             		move.b	#0,obRender(a1)
00005EF6 43E9 0040                  		lea	$40(a1),a1
00005EFA 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005EFE                            
00005EFE 43E9 FFC0                  		lea	-$40(a1),a1
00005F02 1343 0028                  		move.b	d3,obSubtype(a1)
00005F06                            
00005F06                            CSI_ChkDel:	; Routine 6
00005F06 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F0A 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F0C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F12 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F14 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F18 0200 0001                  		andi.b	#1,d0
00005F1C 6600                       		bne.s	CSI_Animate
00005F1E 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F22 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F24 4E75                       		rts	
00005F26                            
00005F26                            CSI_Animate:
00005F26 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F2A 0200 000F                  		andi.b	#$F,d0
00005F2E 6600                       		bne.s	CSI_Display2
00005F30 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F36                            
00005F36                            	CSI_Display2:
00005F36 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F3C                            ; ===========================================================================
00005F3C                            
00005F3C                            CSI_Delete:
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F3C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F42                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            ; Object 81 - Sonic on the continue screen
00005F42                            ; ---------------------------------------------------------------------------
00005F42                            
00005F42                            ContSonic:
00005F42 7000                       		moveq	#0,d0
00005F44 1028 0024                  		move.b	obRoutine(a0),d0
00005F48 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F4C 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F50 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F56                            ; ===========================================================================
00005F56 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F58 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F5A 0000                       		dc.w CSon_Animate-CSon_Index
00005F5C 0000                       		dc.w CSon_Run-CSon_Index
00005F5E                            ; ===========================================================================
00005F5E                            
00005F5E                            CSon_Main:	; Routine 0
00005F5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F62 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F68 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F6E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005F76 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005F7C 117C 0004 0001             		move.b	#4,obRender(a0)
00005F82 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005F88 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005F8E 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005F94                            
00005F94                            CSon_ChkLand:	; Routine 2
00005F94 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005F9A 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005F9C                            
00005F9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FA0 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FA4 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FAC 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FB2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FB8 6000                       		bra.s	CSon_Animate
00005FBA                            
00005FBA                            CSon_ShowFall:
00005FBA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FC0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FC6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FCC                            ; ===========================================================================
00005FCC                            
00005FCC                            CSon_Animate:	; Routine 4
00005FCC 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005FD0 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005FD2 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00005FD8 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005FDE                            
00005FDE                            CSon_GetUp:
00005FDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FE2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FEA 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FF0 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00005FF6 4268 0020                  		clr.w	obInertia(a0)
00005FFA 5168 000C                  		subq.w	#8,obY(a0)
00006006                            
00006006                            CSon_Run:	; Routine 6
00006006 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000600C 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000600E 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006014 6000                       		bra.s	CSon_ShowRun
00006016                            
00006016                            CSon_AddInertia:
00006016 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000601C                            
0000601C                            CSon_ShowRun:
0000601C 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006022 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006028 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000602E                            		include	"_anim\Continue Screen Sonic.asm"
0000602E                            ; ---------------------------------------------------------------------------
0000602E                            ; Animation script - Sonic on the continue screen
0000602E                            ; ---------------------------------------------------------------------------
0000602E 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006030 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
0000603C 00                         		even
0000603C 00                         		even
0000603C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            ; Sprite mappings - Continue screen
0000603C                            ; ---------------------------------------------------------------------------
0000603C                            Map_ContScr_internal:
0000603C 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000603E 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00006040 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00006042 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006044 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006046 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006048 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000604A 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
0000604C 0B                         M_Cont_text:	dc.b $B
0000604D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006052 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006057 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000605C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006061 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006066 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000606B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00006070 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00006075 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000607A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000607F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00006084 03                         M_Cont_Sonic1:	dc.b 3
00006085 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000608A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000608F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00006094 03                         M_Cont_Sonic2:	dc.b 3
00006095 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000609A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000609F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060A4 03                         M_Cont_Sonic3:	dc.b 3
000060A5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060B4 02                         M_Cont_oval:	dc.b 2
000060B5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060BA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060BF 01                         M_Cont_Mini1:	dc.b 1
000060C0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060C5 01                         M_Cont_Mini2:	dc.b 1
000060C6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060CC 00                         		even
000060CC 00                         		even
000060CC                            
000060CC                            ; ===========================================================================
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            ; Ending sequence in Green Hill	Zone
000060CC                            ; ---------------------------------------------------------------------------
000060CC                            
000060CC                            GM_Ending:
000060D4 6100 C0AC                  		bsr.w	PaletteFadeOut
000060D8                            
000060D8 43F8 D000                  		lea	(v_objspace).w,a1
000060DC 7000                       		moveq	#0,d0
000060DE 323C 07FF                  		move.w	#$7FF,d1
000060E2                            	End_ClrObjRam:
000060E2 22C0                       		move.l	d0,(a1)+
000060E4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000060E8                            
000060E8 43F8 F628                  		lea	($FFFFF628).w,a1
000060EC 7000                       		moveq	#0,d0
000060EE 323C 0015                  		move.w	#$15,d1
000060F2                            	End_ClrRam1:
000060F2 22C0                       		move.l	d0,(a1)+
000060F4 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
000060F8                            
000060F8 43F8 F700                  		lea	(v_screenposx).w,a1
000060FC 7000                       		moveq	#0,d0
000060FE 323C 003F                  		move.w	#$3F,d1
00006102                            	End_ClrRam2:
00006102 22C0                       		move.l	d0,(a1)+
00006104 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006108                            
00006108 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000610C 7000                       		moveq	#0,d0
0000610E 323C 0047                  		move.w	#$47,d1
00006112                            	End_ClrRam3:
00006112 22C0                       		move.l	d0,(a1)+
00006114 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006118                            
00006118 46FC 2700                  		disable_ints
0000611C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006120 0200 00BF                  		andi.b	#$BF,d0
00006124 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000612A 6100 B054                  		bsr.w	ClearScreen
0000612E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006134 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006138 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000613C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006140 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006144 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006148 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000614C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006150 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006156 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000615A 31FC 001E FE14             		move.w	#30,(v_air).w
00006160 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006166 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000616C 6700                       		beq.s	End_LoadData	; if yes, branch
0000616E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006174                            
00006174                            End_LoadData:
00006174 7000                       		moveq	#plcid_Ending,d0
00006176 6100 B6DE                  		bsr.w	QuickPLC	; load ending sequence patterns
0000617A 4EB9 0000 0000             		jsr	(Hud_Base).l
00006180 6100 0000                  		bsr.w	LevelSizeLoad
00006184 6100 0000                  		bsr.w	DeformLayers
00006188 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
0000618E 6100 0000                  		bsr.w	LevelDataLoad
00006192 6100 0000                  		bsr.w	LoadTilesFromStart
00006196 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
0000619E 46FC 2300                  		enable_ints
000061A2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061A8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061AC 6100 B858                  		bsr.w	KosDec
000061B0 4EB9 0000 0000             		jsr		LoadPlayerPal
000061B6 6100 C274                  		bsr.w	PalLoad1	; load Sonic's palette
000061C2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061C8 6700                       		beq.s	End_LoadSonic	; if not, branch
000061CA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000061D0                            
000061D0                            End_LoadSonic:
000061D0 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000061D6 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000061DC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
000061E2 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
000061E8 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
000061EE 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
000061F4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000061FA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006200 4EB9 0000 0000             		jsr	(BuildSprites).l
00006206 7000                       		moveq	#0,d0
00006208 31C0 FE20                  		move.w	d0,(v_rings).w
0000620C 21C0 FE22                  		move.l	d0,(v_time).w
00006210 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006214 11C0 FE2C                  		move.b	d0,(v_shield).w
00006218 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000621C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006220 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006224 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006228 31C0 FE02                  		move.w	d0,(f_restart).w
0000622C 31C0 FE04                  		move.w	d0,(v_framecount).w
00006230 6100 EEC6                  		bsr.w	OscillateNumInit
00006234 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000623A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006240 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006246 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000624C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006252 6100 D7AC                  		bsr.w	WaitForVBla
00006256 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000625A 0000 0040                  		ori.b	#$40,d0
0000625E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006264 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000626A 6100 BE70                  		bsr.w	PaletteFadeIn
0000626E                            
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            ; Main ending sequence loop
0000626E                            ; ---------------------------------------------------------------------------
0000626E                            
0000626E                            End_MainLoop:
0000626E 6100 AFEC                  		bsr.w	PauseGame
00006272 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006278 6100 D786                  		bsr.w	WaitForVBla
0000627C 5278 FE04                  		addq.w	#1,(v_framecount).w
00006280 6100 0000                  		bsr.w	End_MoveSonic
00006284 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000628A 6100 0000                  		bsr.w	DeformLayers
0000628E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006294 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000629A 6100 BA32                  		bsr.w	PaletteCycle
0000629E 6100 EEAE                  		bsr.w	OscillateNumDo
000062A2 6100 EF3A                  		bsr.w	SynchroAnimate
000062A6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062AC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062AE                            
000062AE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062BC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062C2 4E75                       		rts	
000062C4                            ; ===========================================================================
000062C4                            
000062C4                            End_ChkEmerald:
000062C4 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062C8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062CC                            
000062CC 4278 FE02                  		clr.w	(f_restart).w
000062D0 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000062D6 4278 F794                  		clr.w	(v_palchgspeed).w
000062DA                            
000062DA                            	End_AllEmlds:
000062DA 6100 AF80                  		bsr.w	PauseGame
000062DE 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062E4 6100 D71A                  		bsr.w	WaitForVBla
000062E8 5278 FE04                  		addq.w	#1,(v_framecount).w
000062EC 6100 0000                  		bsr.w	End_MoveSonic
000062F0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062F6 6100 0000                  		bsr.w	DeformLayers
000062FA 4EB9 0000 0000             		jsr	(BuildSprites).l
00006300 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006306 6100 EE46                  		bsr.w	OscillateNumDo
0000630A 6100 EED2                  		bsr.w	SynchroAnimate
0000630E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006312 6A00                       		bpl.s	End_SlowFade
00006314 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000631A 6100 BFB0                  		bsr.w	WhiteOut_ToWhite
0000631E                            
0000631E                            	End_SlowFade:
0000631E 4A78 FE02                  		tst.w	(f_restart).w
00006322 6700 FFB6                  		beq.w	End_AllEmlds
00006326 4278 FE02                  		clr.w	(f_restart).w
0000632A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006330 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006336 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000633C 47F8 F700                  		lea	(v_screenposx).w,a3
00006340 49F8 A400                  		lea	(v_lvllayout).w,a4
00006344 343C 4000                  		move.w	#$4000,d2
00006348 6100 0000                  		bsr.w	DrawChunks
0000634C 7013                       		moveq	#palid_Ending,d0
0000634E 6100 C0DC                  		bsr.w	PalLoad1	; load ending palette
00006352 6100 BEAC                  		bsr.w	PaletteWhiteIn
00006356 6000 FF16                  		bra.w	End_MainLoop
0000635A                            
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            ; Subroutine controlling Sonic on the ending sequence
0000635A                            ; ---------------------------------------------------------------------------
0000635A                            
0000635A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000635A                            
0000635A                            
0000635A                            End_MoveSonic:
0000635A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000635E 6600                       		bne.s	End_MoveSon2
00006360 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006366 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006368                            
00006368 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000636C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006372 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006378 4E75                       		rts	
0000637A                            ; ===========================================================================
0000637A                            
0000637A                            End_MoveSon2:
0000637A 5500                       		subq.b	#2,d0
0000637C 6600                       		bne.s	End_MoveSon3
0000637E 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
00006384 6500                       		blo.s	End_MoveSonExit	; if not, branch
00006386                            
00006386 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000638A 7000                       		moveq	#0,d0
0000638C 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006390 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
00006394 31C0 D020                  		move.w	d0,(v_player+obInertia).w
00006398 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
0000639E 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063A4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063AA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063B0 4E75                       		rts	
000063B2                            ; ===========================================================================
000063B2                            
000063B2                            End_MoveSon3:
000063B2 5500                       		subq.b	#2,d0
000063B4 6600                       		bne.s	End_MoveSonExit
000063B6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063BA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063C0 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063C6 4278 D024                  		clr.w	(v_player+obRoutine).w
000063CA                            
000063CA                            End_MoveSonExit:
000063CA 4E75                       		rts	
000063CC                            ; End of function End_MoveSonic
000063CC                            
000063CC                            ; ===========================================================================
000063CC                            
000063CC                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            ; Object 87 - Sonic on ending sequence
000063CC                            ; ---------------------------------------------------------------------------
000063CC                            
000063CC                            EndSonic:
000063CC 7000                       		moveq	#0,d0
000063CE 1028 0025                  		move.b	ob2ndRout(a0),d0
000063D2 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
000063D6 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000063DA 4EF9 0000 0000             		jmp	(DisplaySprite).l
000063E0                            ; ===========================================================================
000063E0 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000063E4 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
000063E8 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
000063EC 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
000063F0 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
000063F4                            
000063F4 =00000030                  eson_time:	equ $30	; time to wait between events
000063F4                            ; ===========================================================================
000063F4                            
000063F4                            ESon_Main:	; Routine 0
000063F4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000063FA 6700                       		beq.s	ESon_Main2	; if yes, branch
000063FC 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006402 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006408 4E75                       		rts	
0000640A                            ; ===========================================================================
0000640A                            
0000640A                            ESon_Main2:
0000640A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000640E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006416 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000641C 117C 0004 0001             		move.b	#4,obRender(a0)
00006422 4228 0022                  		clr.b	obStatus(a0)
00006426 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000642C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006432 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006438                            
00006438                            ESon_MakeEmeralds:
00006438                            		; Routine 2
00006438 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000643C 6600                       		bne.s	ESon_Wait
0000643E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006442 317C 0001 001C             		move.w	#1,obAnim(a0)
00006448 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000644E                            
0000644E                            	ESon_Wait:
0000644E 4E75                       		rts	
00006450                            ; ===========================================================================
00006450                            
00006450                            Obj87_LookUp:	; Routine 6
00006450 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006458 6600                       		bne.s	locret_5480
0000645A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006460 317C 005A 0030             		move.w	#90,eson_time(a0)
00006466 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000646A                            
0000646A                            locret_5480:
0000646A 4E75                       		rts	
0000646C                            ; ===========================================================================
0000646C                            
0000646C                            Obj87_ClrObjRam:
0000646C                            		; Routine 8
0000646C 5368 0030                  		subq.w	#1,eson_time(a0)
00006470 6600                       		bne.s	ESon_Wait2
00006472 43F8 D400                  		lea	(v_objspace+$400).w,a1
00006476 323C 00FF                  		move.w	#$FF,d1
0000647A                            
0000647A                            Obj87_ClrLoop:
0000647A 4299                       		clr.l	(a1)+
0000647C 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006480 31FC 0001 FE02             		move.w	#1,(f_restart).w
00006486 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000648A 117C 0001 001C             		move.b	#1,obAnim(a0)
00006490 317C 003C 0030             		move.w	#60,eson_time(a0)
00006496                            
00006496                            ESon_Wait2:
00006496 4E75                       		rts	
00006498                            ; ===========================================================================
00006498                            
00006498                            Obj87_MakeLogo:	; Routine $C
00006498 5368 0030                  		subq.w	#1,eson_time(a0)
0000649C 6600                       		bne.s	ESon_Wait3
0000649E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064A8 117C 0002 001C             		move.b	#2,obAnim(a0)
000064AE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064B4                            
000064B4                            ESon_Wait3:
000064B4 4E75                       		rts	
000064B6                            ; ===========================================================================
000064B6                            
000064B6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064B6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064BC 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064C2                            ; ===========================================================================
000064C2                            
000064C2                            Obj87_Leap:	; Routine $10
000064C2 5368 0030                  		subq.w	#1,eson_time(a0)
000064C6 6600                       		bne.s	ESon_Wait4
000064C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064CC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064D4 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064DA 117C 0004 0001             		move.b	#4,obRender(a0)
000064E0 4228 0022                  		clr.b	obStatus(a0)
000064E4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064EA 117C 0005 001A             		move.b	#5,obFrame(a0)
000064F0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
000064F6 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064FC 60B8                       		bra.s	Obj87_Animate
000064FE                            ; ===========================================================================
000064FE                            
000064FE                            ESon_Wait4:
000064FE 4E75                       		rts	
000064FE 4E75                       		rts	
00006500                            		include "_anim\Ending Sequence Sonic.asm"
00006500                            ; ---------------------------------------------------------------------------
00006500                            ; Animation script - Sonic on the ending sequence
00006500                            ; ---------------------------------------------------------------------------
00006500 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006502 0000                       		dc.w byte_552A-AniScript_ESon
00006504 0000                       		dc.w byte_5534-AniScript_ESon
00006506 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006514 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000651E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006526                            		even
00006526                            		even
00006526                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006526                            ; ---------------------------------------------------------------------------
00006526                            ; Object 88 - chaos emeralds on	the ending sequence
00006526                            ; ---------------------------------------------------------------------------
00006526                            
00006526                            EndChaos:
00006526 7000                       		moveq	#0,d0
00006528 1028 0024                  		move.b	obRoutine(a0),d0
0000652C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006530 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006534 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000653A                            ; ===========================================================================
0000653A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000653C 0000                       		dc.w ECha_Move-ECha_Index
0000653E                            
0000653E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000653E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000653E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000653E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            ECha_Main:	; Routine 0
0000653E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006544 6700                       		beq.s	ECha_CreateEms
00006546 588F                       		addq.l	#4,sp
00006548 4E75                       		rts	
0000654A                            ; ===========================================================================
0000654A                            
0000654A                            ECha_CreateEms:
0000654A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006550 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006556 2248                       		movea.l	a0,a1
00006558 7600                       		moveq	#0,d3
0000655A 7401                       		moveq	#1,d2
0000655C 7205                       		moveq	#5,d1
0000655E                            
0000655E                            	ECha_LoadLoop:
0000655E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006562 5429 0024                  		addq.b	#2,obRoutine(a1)
00006566 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000656E 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006574 137C 0004 0001             		move.b	#4,obRender(a1)
0000657A 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006580 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
00006586 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
0000658C 1342 001C                  		move.b	d2,obAnim(a1)
00006590 1342 001A                  		move.b	d2,obFrame(a1)
00006594 5202                       		addq.b	#1,d2
00006596 1343 0026                  		move.b	d3,obAngle(a1)
0000659A 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
0000659E 43E9 0040                  		lea	$40(a1),a1
000065A2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065A6                            
000065A6                            ECha_Move:	; Routine 2
000065A6 3028 003E                  		move.w	echa_angle(a0),d0
000065AA D168 0026                  		add.w	d0,obAngle(a0)
000065AE 1028 0026                  		move.b	obAngle(a0),d0
000065B2 4EB9 0000 3A32             		jsr	(CalcSine).l
000065B8 7800                       		moveq	#0,d4
000065BA 1828 003C                  		move.b	echa_radius(a0),d4
000065BE C3C4                       		muls.w	d4,d1
000065C0 E081                       		asr.l	#8,d1
000065C2 C1C4                       		muls.w	d4,d0
000065C4 E080                       		asr.l	#8,d0
000065C6 D268 0038                  		add.w	echa_origX(a0),d1
000065CA D068 003A                  		add.w	echa_origY(a0),d0
000065CE 3141 0008                  		move.w	d1,obX(a0)
000065D2 3140 000C                  		move.w	d0,obY(a0)
000065D6                            
000065D6                            	ECha_Expand:
000065D6 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000065DC 6700                       		beq.s	ECha_Rotate
000065DE 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000065E4                            
000065E4                            	ECha_Rotate:
000065E4 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
000065EA 6700                       		beq.s	ECha_Rise
000065EC 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
000065F2                            
000065F2                            	ECha_Rise:
000065F2 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
000065F8 6700                       		beq.s	ECha_End
000065FA 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
000065FE                            
000065FE                            ECha_End:
000065FE 4E75                       		rts	
000065FE 4E75                       		rts	
00006600                            		include	"_incObj\89 Ending Sequence STH.asm"
00006600                            ; ---------------------------------------------------------------------------
00006600                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006600                            ; ---------------------------------------------------------------------------
00006600                            
00006600                            EndSTH:
00006600 7000                       		moveq	#0,d0
00006602 1028 0024                  		move.b	$24(a0),d0
00006606 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000660A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000660E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006614                            ; ===========================================================================
00006614 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006616 0000                       		dc.w ESth_Move-ESth_Index
00006618 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000661A                            
0000661A =00000030                  esth_time:	equ $30		; time until exit
0000661A                            ; ===========================================================================
0000661A                            
0000661A                            ESth_Main:	; Routine 0
0000661A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000661E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006624 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000662A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006632 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006638 117C 0000 0001             		move.b	#0,obRender(a0)
0000663E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006644                            
00006644                            ESth_Move:	; Routine 2
00006644 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000664A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000664C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006652 4E75                       		rts
00006654                            
00006654                            ESth_Delay:
00006654 5428 0024                  		addq.b	#2,obRoutine(a0)
00006658 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000665E                            
0000665E                            ESth_GotoCredits:
0000665E                            		; Routine 4
0000665E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006662 6A00                       		bpl.s	ESth_Wait
00006664 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000666A                            
0000666A                            	ESth_Wait:
0000666A 4E75                       		rts
0000666C                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            ; Sprite mappings - Sonic on the ending	sequence
0000666C                            ; ---------------------------------------------------------------------------
0000666C                            Map_ESon_internal:
0000666C 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000666E 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006670 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006672 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
00006674 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
00006676 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
00006678 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
0000667A 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
0000667C 02                         M_ESon_Hold1:	dc.b 2
0000667D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006682 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006687 03                         M_ESon_Hold2:	dc.b 3
00006688 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000668D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006692 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006697 02                         M_ESon_Up:	dc.b 2
00006698 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000669D FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066A2 02                         M_ESon_Conf1:	dc.b 2
000066A3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066A8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066AD 02                         M_ESon_Conf2:	dc.b 2
000066AE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066B3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066B8 03                         M_ESon_Leap1:	dc.b 3
000066B9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066BE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066C3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066C8 07                         M_ESon_Leap2:	dc.b 7
000066C9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066CE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000066D3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000066D8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000066DD DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000066E2 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000066E7 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000066EC 18                         M_ESon_Leap3:	dc.b $18
000066ED 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000066F2 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000066F7 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000066FC 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006701 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006706 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000670B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006710 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006715 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000671A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000671F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006724 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006729 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000672E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006733 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006738 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000673D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006742 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006747 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000674C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006751 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006756 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000675B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006760 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006766 00                         		even
00006766 00                         		even
00006766                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006766                            ; --------------------------------------------------------------------------------
00006766                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006766                            ; --------------------------------------------------------------------------------
00006766                            
00006766                            SME_0ZTmS:	
00006766 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000676A 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000676E 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006772 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
00006774 01                         SME_0ZTmS_E:	dc.b 1	
00006775 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000677A 01                         SME_0ZTmS_14:	dc.b 1	
0000677B F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006780 01                         SME_0ZTmS_1A:	dc.b 1	
00006781 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00006786 01                         SME_0ZTmS_20:	dc.b 1	
00006787 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
0000678C 01                         SME_0ZTmS_26:	dc.b 1	
0000678D F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006792 01                         SME_0ZTmS_2C:	dc.b 1	
00006793 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
00006798 01                         SME_0ZTmS_32:	dc.b 1	
00006799 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
0000679E                            		even
0000679E                            		even
0000679E                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000679E                            ; ---------------------------------------------------------------------------
0000679E                            Map_ESth_internal:
0000679E 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067A0 03                         M_ESth_1:	dc.b 3
000067A1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067A6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067AB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067B0                            		even
000067B0                            		even
000067B0                            
000067B0                            ; ===========================================================================
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            ; Credits ending sequence
000067B0                            ; ---------------------------------------------------------------------------
000067B0                            
000067B0                            GM_Credits:
000067B0                            		
000067B0 6100 AF96                  		bsr.w	ClearPLC
000067B4 6100 B9CC                  		bsr.w	PaletteFadeOut
000067B8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067BE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067C2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067C6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067CA 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067CE 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000067D2 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000067D6 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
000067DA 4238 F64E                  		clr.b	(f_wtr_state).w
000067DE 6100 A9A0                  		bsr.w	ClearScreen
000067E2                            
000067E2 43F8 D000                  		lea	(v_objspace).w,a1
000067E6 7000                       		moveq	#0,d0
000067E8 323C 07FF                  		move.w	#$7FF,d1
000067EC                            	TryAg_ClrObjRam:
000067EC 22C0                       		move.l	d0,(a1)+
000067EE 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000067F2                            
000067F2 7000                       		moveq	#plcid_TryAgain,d0
000067F4 6100 B060                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
000067F8                            
000067F8 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000067FC 7000                       		moveq	#0,d0
000067FE 323C 001F                  		move.w	#$1F,d1
00006802                            	TryAg_ClrPal:
00006802 22C0                       		move.l	d0,(a1)+
00006804 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006808                            
00006808 7013                       		moveq	#palid_Ending,d0
0000680A 6100 BC20                  		bsr.w	PalLoad1	; load ending palette
0000680E 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006812 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006818 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000681E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006824 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
0000682A 6100 B8B0                  		bsr.w	PaletteFadeIn
0000682E                            
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            ; "TRY AGAIN" and "END"	screen main loop
0000682E                            ; ---------------------------------------------------------------------------
0000682E                            TryAg_MainLoop:
0000682E 6100 AA2C                  		bsr.w	PauseGame
00006832 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006838 6100 D1C6                  		bsr.w	WaitForVBla
0000683C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006842 4EB9 0000 0000             		jsr	(BuildSprites).l
00006848 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000684E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006850 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006854 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006856 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000685C 67D0                       		beq.s	TryAg_MainLoop
0000685E                            
0000685E                            TryAg_Exit:
0000685E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006864 4E75                       		rts	
00006866                            
00006866                            ; ===========================================================================
00006866                            
00006866                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006866                            ; ---------------------------------------------------------------------------
00006866                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006866                            ; ---------------------------------------------------------------------------
00006866                            
00006866                            EndEggman:
00006866 7000                       		moveq	#0,d0
00006868 1028 0024                  		move.b	obRoutine(a0),d0
0000686C 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006870 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00006874 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000687A                            ; ===========================================================================
0000687A 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
0000687C 0000                       		dc.w EEgg_Animate-EEgg_Index
0000687E 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006880 0000                       		dc.w EEgg_Wait-EEgg_Index
00006882                            
00006882 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006882                            ; ===========================================================================
00006882                            
00006882                            EEgg_Main:	; Routine 0
00006882 5428 0024                  		addq.b	#2,obRoutine(a0)
00006886 317C 0120 0008             		move.w	#$120,obX(a0)
0000688C 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006892 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
0000689A 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068A0 117C 0000 0001             		move.b	#0,obRender(a0)
000068A6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068AC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068B2 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068B8 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068BA                            
000068BA 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068C0 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068C6 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068CC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000068D2                            
000068D2                            EEgg_Animate:	; Routine 2
000068D2 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
000068D8 4EF9 0000 0000             		jmp	(AnimateSprite).l
000068DE                            ; ===========================================================================
000068DE                            
000068DE                            EEgg_Juggle:	; Routine 4
000068DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000068E2 7002                       		moveq	#2,d0
000068E4 0828 0000 001C             		btst	#0,obAnim(a0)
000068EA 6700                       		beq.s	@noflip
000068EC 4440                       		neg.w	d0
000068EE                            
000068EE                            	@noflip:
000068EE 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
000068F2 7205                       		moveq	#5,d1
000068F4                            
000068F4                            @emeraldloop:
000068F4 1340 003E                  		move.b	d0,$3E(a1)
000068F8 3400                       		move.w	d0,d2
000068FA E742                       		asl.w	#3,d2
000068FC D529 0026                  		add.b	d2,obAngle(a1)
00006900 43E9 0040                  		lea	$40(a1),a1
00006904 51C9 FFEE                  		dbf	d1,@emeraldloop
00006908 5228 001A                  		addq.b	#1,obFrame(a0)
0000690C 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006912                            
00006912                            EEgg_Wait:	; Routine 6
00006912 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006916 6A00                       		bpl.s	@nochg		; branch if time remains
00006918 0868 0000 001C             		bchg	#0,obAnim(a0)
0000691E 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006924                            
00006924                            	@nochg:
00006924 4E75                       		rts	
00006924 4E75                       		rts	
00006926                            		include "_anim\Try Again & End Eggman.asm"
00006926                            ; ---------------------------------------------------------------------------
00006926                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006926                            ; ---------------------------------------------------------------------------
00006926 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006928 0000                       		dc.w @tryagain2-Ani_EEgg
0000692A 0000                       		dc.w @end-Ani_EEgg
0000692C 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006930 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006934 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006946                            		even
00006946                            		even
00006946                            		include	"_incObj\8C Try Again Emeralds.asm"
00006946                            ; ---------------------------------------------------------------------------
00006946                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006946                            ; ---------------------------------------------------------------------------
00006946                            
00006946                            TryChaos:
00006946 7000                       		moveq	#0,d0
00006948 1028 0024                  		move.b	obRoutine(a0),d0
0000694C 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006950 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006954 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000695A                            ; ===========================================================================
0000695A 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000695C 0000                       		dc.w TCha_Move-TCha_Index
0000695E                            ; ===========================================================================
0000695E                            
0000695E                            TCha_Main:	; Routine 0
0000695E 2248                       		movea.l	a0,a1
00006960 7400                       		moveq	#0,d2
00006962 7600                       		moveq	#0,d3
00006964 7205                       		moveq	#5,d1
00006966 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000696A                            
0000696A                            @makeemerald:
0000696A 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000696E 5429 0024                  		addq.b	#2,obRoutine(a1)
00006972 237C 0000 6766 0004        		move.l	#Map_ECha,obMap(a1)
0000697A 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006980 137C 0000 0001             		move.b	#0,obRender(a1)
00006986 337C 0080 0018             		move.w	#$80,obPriority(a1)
0000698C 337C 0104 0008             		move.w	#$104,obX(a1)
00006992 337C 0120 0038             		move.w	#$120,$38(a1)
00006998 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
0000699E 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069A4 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069AA 47F8 FE58                  		lea	(v_emldlist).w,a3
000069AE                            
000069AE                            	@chkemerald:
000069AE 7000                       		moveq	#0,d0
000069B0 1038 FE57                  		move.b	(v_emeralds).w,d0
000069B4 5340                       		subq.w	#1,d0
000069B6 6500                       		bcs.s	@loc_5B42
000069B8                            
000069B8                            	@chkloop:
000069B8 B433 0000                  		cmp.b	(a3,d0.w),d2
000069BC 6600                       		bne.s	@notgot
000069BE 5202                       		addq.b	#1,d2
000069C0 60EC                       		bra.s	@chkemerald
000069C2                            ; ===========================================================================
000069C2                            
000069C2                            	@notgot:
000069C2 51C8 FFF4                  		dbf	d0,@chkloop
000069C6                            
000069C6                            @loc_5B42:
000069C6 1342 001A                  		move.b	d2,obFrame(a1)
000069CA 5229 001A                  		addq.b	#1,obFrame(a1)
000069CE 5202                       		addq.b	#1,d2
000069D0 137C 0080 0026             		move.b	#$80,obAngle(a1)
000069D6 1343 001E                  		move.b	d3,obTimeFrame(a1)
000069DA 1343 001F                  		move.b	d3,obDelayAni(a1)
000069DE 0643 000A                  		addi.w	#10,d3
000069E2 43E9 0040                  		lea	$40(a1),a1
000069E6 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
000069EA                            
000069EA                            TCha_Move:	; Routine 2
000069EA 4A68 003E                  		tst.w	$3E(a0)
000069EE 6700                       		beq.s	locret_5BBA
000069F0 4A28 001E                  		tst.b	obTimeFrame(a0)
000069F4 6700                       		beq.s	loc_5B78
000069F6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000069FA 6600                       		bne.s	loc_5B80
000069FC                            
000069FC                            loc_5B78:
000069FC 3028 003E                  		move.w	$3E(a0),d0
00006A00 D168 0026                  		add.w	d0,obAngle(a0)
00006A04                            
00006A04                            loc_5B80:
00006A04 1028 0026                  		move.b	obAngle(a0),d0
00006A08 6700                       		beq.s	loc_5B8C
00006A0A 0C00 0080                  		cmpi.b	#$80,d0
00006A0E 6600                       		bne.s	loc_5B96
00006A10                            
00006A10                            loc_5B8C:
00006A10 4268 003E                  		clr.w	$3E(a0)
00006A14 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A1A                            
00006A1A                            loc_5B96:
00006A1A 4EB9 0000 3A32             		jsr	(CalcSine).l
00006A20 7800                       		moveq	#0,d4
00006A22 1828 003C                  		move.b	$3C(a0),d4
00006A26 C3C4                       		muls.w	d4,d1
00006A28 E081                       		asr.l	#8,d1
00006A2A C1C4                       		muls.w	d4,d0
00006A2C E080                       		asr.l	#8,d0
00006A2E D268 0038                  		add.w	$38(a0),d1
00006A32 D068 003A                  		add.w	$3A(a0),d0
00006A36 3141 0008                  		move.w	d1,obX(a0)
00006A3A 3140 000A                  		move.w	d0,obScreenY(a0)
00006A3E                            
00006A3E                            locret_5BBA:
00006A3E 4E75                       		rts	
00006A3E 4E75                       		rts	
00006A40                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A40                            ; ---------------------------------------------------------------------------
00006A40                            Map_EEgg_internal:
00006A40 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A42 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A44 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A46 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A48 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A4A 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A4C 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A4E 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A50 08                         M_EEgg_Try1:	dc.b 8
00006A51 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A56 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A5B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A60 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A65 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A6A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A6F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A74 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006A79 08                         M_EEgg_Try2:	dc.b 8
00006A7A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006A7F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006A84 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006A89 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006A8E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006A93 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006A98 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006A9D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AA2 08                         M_EEgg_Try3:	dc.b 8
00006AA3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AA8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006AAD E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AB2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AB7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006ABC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AC1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AC6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006ACB 08                         M_EEgg_Try4:	dc.b 8
00006ACC E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006AD1 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006AD6 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006ADB F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006AE0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AE5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AEA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AEF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AF4 0C                         M_EEgg_End1:	dc.b $C
00006AF5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006AFA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006AFF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B04 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B09 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B0E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B13 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B18 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B1D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B22 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B27 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B2C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B31 0A                         M_EEgg_End2:	dc.b $A
00006B32 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B37 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B3C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B41 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B46 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B4B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B50 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B55 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B5A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B5F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B64 0A                         M_EEgg_End3:	dc.b $A
00006B65 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B6A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B6F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006B74 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006B79 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006B7E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006B83 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B88 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B8D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006B92 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006B97 0C                         M_EEgg_End4:	dc.b $C
00006B98 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006B9D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BA2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BA7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BAC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BB1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BB6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BBB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BC0 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BC5 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BCA 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BCF 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BD4                            		even
00006BD4                            		even
00006BD4                            
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            ; Ending sequence demos
00006BD4                            ; ---------------------------------------------------------------------------
00006BD4                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C02                            		even
00006C02                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C42                            		even
00006C42                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006C72                            		even
00006C72                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CA2                            		even
00006CA2                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CC2                            		even
00006CC2                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006CE2                            		even
00006CE2                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D12                            		even
00006D12                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D42                            		even
00006D42                            
00006D42                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            ; Subroutine to	load level boundaries and start	locations
00006D42                            ; ---------------------------------------------------------------------------
00006D42                            
00006D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D42                            
00006D42                            
00006D42                            LevelSizeLoad:
00006D42 7000                       		moveq	#0,d0
00006D44 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D48 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D4C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D50 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D54 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D58 3038 FE10                  		move.w	(v_zone).w,d0
00006D5C ED08                       		lsl.b	#6,d0
00006D5E E848                       		lsr.w	#4,d0
00006D60 3200                       		move.w	d0,d1
00006D62 D040                       		add.w	d0,d0
00006D64 D041                       		add.w	d1,d0
00006D66 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D6A 3018                       		move.w	(a0)+,d0
00006D6C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006D70 2018                       		move.l	(a0)+,d0
00006D72 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006D76 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006D7A 2018                       		move.l	(a0)+,d0
00006D7C 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006D80 21C0 F724                  		move.l	d0,(v_limittop1).w
00006D84 3038 F728                  		move.w	(v_limitleft2).w,d0
00006D88 0640 0240                  		addi.w	#$240,d0
00006D8C 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006D90 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006D96 3018                       		move.w	(a0)+,d0
00006D98 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006D9C 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DA2 6000 0000                  		bra.w	LevSz_ChkLamp
00006DA6                            
00006DA6                            ; ===========================================================================
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            ; Level size array
00006DA6                            ; ---------------------------------------------------------------------------
00006DA6                            LevelSizeArray:
00006DA6                            		; GHZ
00006DA6 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DB2 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DBE 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DCA 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006DD6                            		; LZ
00006DD6 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006DE2 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006DEE 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006DFA 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E06                            		; MZ
00006E06 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E12 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00006E1E 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E2A 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E36                            		; SLZ
00006E36 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E42 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E4E 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E5A 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E66                            		; SYZ
00006E66 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006E72 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006E7E 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006E8A 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006E96                            		; SBZ
00006E96 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006EA2 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EAE 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EBA 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EC6                            		; Ending
00006EC6 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006ED2 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006EDE 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EEA 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006EF6                            
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            EndingStLocArray:
00006EF6                            		include	"_inc\Start Location Array - Ending.asm"
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Ending start location array
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            
00006EF6                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006EFA                            		incbin	"startpos\mz2 (Credits demo).bin"
00006EFE                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F02                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F06                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F0A                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F0E                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F12                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F16                            		even
00006F16                            		even
00006F16                            
00006F16                            ; ===========================================================================
00006F16                            
00006F16                            LevSz_ChkLamp:
00006F16 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F1A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F1C                            
00006F1C 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F22 3238 D008                  		move.w	(v_player+obX).w,d1
00006F26 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F2A 6000                       		bra.s	LevSz_SkipStartPos
00006F2C                            ; ===========================================================================
00006F2C                            
00006F2C                            LevSz_StartLoc:
00006F2C 3038 FE10                  		move.w	(v_zone).w,d0
00006F30 ED08                       		lsl.b	#6,d0
00006F32 E848                       		lsr.w	#4,d0
00006F34 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F38 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F3C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F3E                            
00006F3E 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F42 5340                       		subq.w	#1,d0
00006F44 E548                       		lsl.w	#2,d0
00006F46 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F4A                            
00006F4A                            LevSz_SonicPos:
00006F4A 7200                       		moveq	#0,d1
00006F4C 3219                       		move.w	(a1)+,d1
00006F4E 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F52 7000                       		moveq	#0,d0
00006F54 3011                       		move.w	(a1),d0
00006F56 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F5A                            
00006F5A                            SetScreen:
00006F5A                            	LevSz_SkipStartPos:
00006F5A 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F5E 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006F62 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006F64                            @looppoint: 
00006F64 34C1                       		move.w d1,(a2)+ ; fill in X 
00006F66 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006F68 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006F6C 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006F70 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006F72 7200                       		moveq	#0,d1
00006F74                            
00006F74                            	SetScr_WithinLeft:
00006F74 3438 F72A                  		move.w	(v_limitright2).w,d2
00006F78 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006F7A 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006F7C 3202                       		move.w	d2,d1
00006F7E                            
00006F7E                            	SetScr_WithinRight:
00006F7E 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006F82                            
00006F82 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006F86 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006F88 7000                       		moveq	#0,d0
00006F8A                            
00006F8A                            	SetScr_WithinTop:
00006F8A B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006F8E 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006F90 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006F94                            
00006F94                            	SetScr_WithinBottom:
00006F94 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006F98 6100 0000                  		bsr.w	BgScrollSpeed
00006F9C 7000                       		moveq	#0,d0
00006F9E 1038 FE10                  		move.b	(v_zone).w,d0
00006FA2 E508                       		lsl.b	#2,d0
00006FA4 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FAA 4E75                       		rts
00006FAC                            ; ===========================================================================
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            ; Sonic start location array
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            ; Sonic start location array
00006FAC                            ; ---------------------------------------------------------------------------
00006FAC                            
00006FAC                            		incbin	"startpos\ghz1.bin"
00006FB0                            		incbin	"startpos\ghz2.bin"
00006FB4                            		incbin	"startpos\ghz3.bin"
00006FB8 0080 00A8                  		dc.w	$80,$A8
00006FBC                            
00006FBC                            		incbin	"startpos\lz1.bin"
00006FC0                            		incbin	"startpos\lz2.bin"
00006FC4                            		incbin	"startpos\lz3.bin"
00006FC8                            		incbin	"startpos\sbz3.bin"
00006FCC                            
00006FCC                            		incbin	"startpos\mz1.bin"
00006FD0                            		incbin	"startpos\mz2.bin"
00006FD4                            		incbin	"startpos\mz3.bin"
00006FD8 0080 00A8                  		dc.w	$80,$A8
00006FDC                            
00006FDC                            		incbin	"startpos\slz1.bin"
00006FE0                            		incbin	"startpos\slz2.bin"
00006FE4                            		incbin	"startpos\slz3.bin"
00006FE8 0080 00A8                  		dc.w	$80,$A8
00006FEC                            
00006FEC                            		incbin	"startpos\syz1.bin"
00006FF0                            		incbin	"startpos\syz2.bin"
00006FF4                            		incbin	"startpos\syz3.bin"
00006FF8 0080 00A8                  		dc.w	$80,$A8
00006FFC                            
00006FFC                            		incbin	"startpos\sbz1.bin"
00007000                            		incbin	"startpos\sbz2.bin"
00007004                            		incbin	"startpos\fz.bin"
00007008 0080 00A8                  		dc.w	$80,$A8
0000700C                            
0000700C                            
0000700C                            		incbin	"startpos\end1.bin"
00007010                            		incbin	"startpos\end2.bin"
00007014 0080 00A8                  		dc.w	$80,$A8
00007018 0080 00A8                  		dc.w	$80,$A8
0000701C                            
0000701C                            		even
0000701C                            		even
0000701C                            
0000701C                            ; ---------------------------------------------------------------------------
0000701C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000701C                            ; ---------------------------------------------------------------------------
0000701C                            
0000701C                            LoopTileNums:
0000701C                            
0000701C                            ; 		loop	loop	tunnel	tunnel
0000701C                            
0000701C B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007020 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007024 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007028 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000702C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007030 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007034 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007038                            
00007038                            		even
00007038                            
00007038                            ; ---------------------------------------------------------------------------
00007038                            ; Subroutine to	set scroll speed of some backgrounds
00007038                            ; ---------------------------------------------------------------------------
00007038                            
00007038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007038                            
00007038                            
00007038                            BgScrollSpeed:
00007038 4A38 FE30                  		tst.b	(v_lastlamp).w
0000703C 6600                       		bne.s	loc_6206
0000703E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007042 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007046 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000704A 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000704E 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007052                            
00007052                            loc_6206:
00007052 7400                       		moveq	#0,d2
00007054 1438 FE10                  		move.b	(v_zone).w,d2
00007058 D442                       		add.w	d2,d2
0000705A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000705E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007062                            ; End of function BgScrollSpeed
00007062                            
00007062                            ; ===========================================================================
00007062 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007066 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000706A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000706E 0000                       		dc.w BgScroll_End-BgScroll_Index
00007070                            ; ===========================================================================
00007070                            
00007070                            BgScroll_GHZ:
00007070 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007074 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007078 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000707C 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007080 45F8 A800                  		lea	($FFFFA800).w,a2
00007084 429A                       		clr.l	(a2)+
00007086 429A                       		clr.l	(a2)+
00007088 429A                       		clr.l	(a2)+
0000708A 4E75                       		rts
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            BgScroll_LZ:
0000708C E280                       		asr.l	#1,d0
0000708E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007092 4E75                       		rts	
00007094                            ; ===========================================================================
00007094                            
00007094                            BgScroll_MZ:
00007094 4E75                       		rts	
00007096                            ; ===========================================================================
00007096                            
00007096                            BgScroll_SLZ:
00007096 E280                       		asr.l	#1,d0
00007098 0640 00C0                  		addi.w	#$C0,d0
0000709C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070A0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A4 4E75                       		rts	
000070A6                            ; ===========================================================================
000070A6                            
000070A6                            BgScroll_SYZ:
000070A6 E980                       		asl.l	#4,d0
000070A8 2400                       		move.l	d0,d2
000070AA E380                       		asl.l	#1,d0
000070AC D082                       		add.l	d2,d0
000070AE E080                       		asr.l	#8,d0
000070B0 5240                       		addq.w	#1,d0
000070B2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070B6 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070BA 4E75                       		rts	
000070BC                            ; ===========================================================================
000070BC                            
000070BC                            BgScroll_SBZ:
000070BC 0240 07F8                  		andi.w	#$7F8,d0
000070C0 E640                       		asr.w	#3,d0
000070C2 5240                       		addq.w	#1,d0
000070C4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070C8 4E75                       		rts	
000070CA                            ; ===========================================================================
000070CA                            
000070CA                            BgScroll_End:
000070CA 3038 F700                  		move.w	(v_screenposx).w,d0
000070CE E240                       		asr.w	#1,d0
000070D0 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
000070D4 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
000070D8 E440                       		asr.w	#2,d0
000070DA 3200                       		move.w	d0,d1
000070DC D040                       		add.w	d0,d0
000070DE D041                       		add.w	d1,d0
000070E0 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
000070E4 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070E8 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070EC 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070F0 45F8 A800                  		lea	($FFFFA800).w,a2
000070F4 429A                       		clr.l	(a2)+
000070F6 429A                       		clr.l	(a2)+
000070F8 429A                       		clr.l	(a2)+
000070FA 4E75                       		rts
000070FA 4E75                       		rts
000070FC                            		include	"_inc\DeformLayers (JP1).asm"
000070FC                            ; ---------------------------------------------------------------------------
000070FC                            ; Background layer deformation subroutines
000070FC                            ; ---------------------------------------------------------------------------
000070FC                            
000070FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FC                            
000070FC                            
000070FC                            DeformLayers:
000070FC 4A38 F744                  		tst.b	(f_nobgscroll).w
00007100 6700                       		beq.s	@bgscroll
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            	@bgscroll:
00007104 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007108 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000710C 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007110 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007114 6100 0000                  		bsr.w	ScrollHoriz
00007118 6100 0000                  		bsr.w	ScrollVertical
0000711C 6100 0000                  		bsr.w	DynamicLevelEvents
00007120 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007126 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000712C 7000                       		moveq	#0,d0
0000712E 1038 FE10                  		move.b	(v_zone).w,d0
00007132 D040                       		add.w	d0,d0
00007134 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007138 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000713C                            ; End of function DeformLayers
0000713C                            
0000713C                            ; ===========================================================================
0000713C                            ; ---------------------------------------------------------------------------
0000713C                            ; Offset index for background layer deformation	code
0000713C                            ; ---------------------------------------------------------------------------
0000713C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007140 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007144 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007148 0000                       		dc.w Deform_GHZ-Deform_Index
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Green	Hill Zone background layer deformation code
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000714A                            
0000714A                            
0000714A                            Deform_GHZ:
0000714A                            	;cmpi.b    #id_Title,(v_gamemode).w
0000714A                            	;beq.w    Deform_Title
0000714A                            
0000714A                            ;Deform_GHZ_Stage:
0000714A                            	; block 3 - distant mountains
0000714A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000714E 48C4                       		ext.l	d4
00007150 EB84                       		asl.l	#5,d4
00007152 2204                       		move.l	d4,d1
00007154 E384                       		asl.l	#1,d4
00007156 D881                       		add.l	d1,d4
00007158 7C00                       		moveq	#0,d6
0000715A 6100 0000                  		bsr.w	BGScroll_Block3
0000715E                            	; block 2 - hills & waterfalls
0000715E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007162 48C4                       		ext.l	d4
00007164 EF84                       		asl.l	#7,d4
00007166 7C00                       		moveq	#0,d6
00007168 6100 0000                  		bsr.w	BGScroll_Block2
0000716C                            	; calculate Y position
0000716C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007170 3038 F704                  		move.w	(v_screenposy).w,d0
00007174 0240 07FF                  		andi.w	#$7FF,d0
00007178 EA48                       		lsr.w	#5,d0
0000717A 4440                       		neg.w	d0
0000717C 0640 0020                  		addi.w	#$20,d0
00007180 6A00                       		bpl.s	@limitY
00007182 7000                       		moveq	#0,d0
00007184                            	@limitY:
00007184 3800                       		move.w	d0,d4
00007186 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
0000718A 3038 F700                  		move.w	(v_screenposx).w,d0
0000718E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007194 6600                       		bne.s	@notTitle
00007196 7000                       		moveq	#0,d0	; reset foreground position in title screen
00007198                            	@notTitle:
00007198 4440                       		neg.w	d0
0000719A 4840                       		swap	d0
0000719C                            	; auto-scroll clouds
0000719C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071A0 069A 0001 0000             		addi.l	#$10000,(a2)+
000071A6 069A 0000 C000             		addi.l	#$C000,(a2)+
000071AC 069A 0000 8000             		addi.l	#$8000,(a2)+
000071B2                            	; calculate background scroll	
000071B2 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071B6 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071BA 4440                       		neg.w	d0
000071BC 323C 001F                  		move.w	#$1F,d1
000071C0 9244                       		sub.w	d4,d1
000071C2 6500                       		bcs.s	@gotoCloud2
000071C4                            	@cloudLoop1:		; upper cloud (32px)
000071C4 22C0                       		move.l	d0,(a1)+
000071C6 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071CA                            
000071CA                            	@gotoCloud2:
000071CA 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071CE D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071D2 4440                       		neg.w	d0
000071D4 323C 000F                  		move.w	#$F,d1
000071D8                            	@cloudLoop2:		; middle cloud (16px)
000071D8 22C0                       		move.l	d0,(a1)+
000071DA 51C9 FFFC                  		dbf	d1,@cloudLoop2
000071DE                            
000071DE 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
000071E2 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071E6 4440                       		neg.w	d0
000071E8 323C 000F                  		move.w	#$F,d1
000071EC                            	@cloudLoop3:		; lower cloud (16px)
000071EC 22C0                       		move.l	d0,(a1)+
000071EE 51C9 FFFC                  		dbf	d1,@cloudLoop3
000071F2                            
000071F2 323C 002F                  		move.w	#$2F,d1
000071F6 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000071FA 4440                       		neg.w	d0
000071FC                            	@mountainLoop:		; distant mountains (48px)
000071FC 22C0                       		move.l	d0,(a1)+
000071FE 51C9 FFFC                  		dbf	d1,@mountainLoop
00007202                            
00007202 323C 0027                  		move.w	#$27,d1
00007206 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000720A 4440                       		neg.w	d0
0000720C                            	@hillLoop:			; hills & waterfalls (40px)
0000720C 22C0                       		move.l	d0,(a1)+
0000720E 51C9 FFFC                  		dbf	d1,@hillLoop
00007212                            
00007212 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007216 3438 F700                  		move.w	(v_screenposx).w,d2
0000721A 9440                       		sub.w	d0,d2
0000721C 48C2                       		ext.l	d2
0000721E E182                       		asl.l	#8,d2
00007220 85FC 0068                  		divs.w	#$68,d2
00007224 48C2                       		ext.l	d2
00007226 E182                       		asl.l	#8,d2
00007228 7600                       		moveq	#0,d3
0000722A 3600                       		move.w	d0,d3
0000722C 323C 0047                  		move.w	#$47,d1
00007230 D244                       		add.w	d4,d1
00007232                            	@waterLoop:			; water deformation
00007232 3003                       		move.w	d3,d0
00007234 4440                       		neg.w	d0
00007236 22C0                       		move.l	d0,(a1)+
00007238 4843                       		swap	d3
0000723A D682                       		add.l	d2,d3
0000723C 4843                       		swap	d3
0000723E 51C9 FFF2                  		dbf	d1,@waterLoop
00007242 4E75                       		rts
00007244                            ; End of function Deform_GHZ
00007244                            
00007244                            Deform_Title:
00007244 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007248 48C4                       		ext.l	d4
0000724A EB84                       		asl.l	#5,d4
0000724C 2204                       		move.l	d4,d1
0000724E E384                       		asl.l	#1,d4
00007250 D881                       		add.l	d1,d4
00007252 7A00                       		moveq	#0,d5
00007254 6100 0000                  		bsr.w	BGScroll_Block1
00007258 6100 0000                  		bsr.w	BGScroll_Block3
0000725C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007260 3038 F704                  		move.w	(v_screenposy).w,d0
00007264 0240 07FF                  		andi.w	#$7FF,d0
00007268 EA48                       		lsr.w	#5,d0
0000726A 4440                       		neg.w	d0
0000726C 0640 0026                  		addi.w	#$26,d0
00007270 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007274 3800                       		move.w	d0,d4
00007276 6100 0000                  		bsr.w	BGScroll_Block3
0000727A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007280 323C 006F                  		move.w	#$6F,d1
00007284 9244                       		sub.w	d4,d1
00007286 3038 F700                  		move.w	(v_screenposx).w,d0
0000728A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007290 6600                       		bne.s	loc_633C
00007292 7000                       		moveq	#0,d0
00007294                            
00007294                            loc_633C:
00007294 4440                       		neg.w	d0
00007296 4840                       		swap	d0
00007298 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000729C 4440                       		neg.w	d0
0000729E                            
0000729E                            loc_6346:
0000729E 22C0                       		move.l	d0,(a1)+
000072A0 51C9 FFFC                  		dbf	d1,loc_6346
000072A4 323C 0027                  		move.w	#$27,d1
000072A8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072AC 4440                       		neg.w	d0
000072AE                            
000072AE                            loc_6356:
000072AE 22C0                       		move.l	d0,(a1)+
000072B0 51C9 FFFC                  		dbf	d1,loc_6356
000072B4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072B8 0640 0000                  		addi.w	#0,d0
000072BC 3438 F700                  		move.w	(v_screenposx).w,d2
000072C0 0642 FE00                  		addi.w	#-$200,d2
000072C4 9440                       		sub.w	d0,d2
000072C6 48C2                       		ext.l	d2
000072C8 E182                       		asl.l	#8,d2
000072CA 85FC 0068                  		divs.w	#$68,d2
000072CE 48C2                       		ext.l	d2
000072D0 E182                       		asl.l	#8,d2
000072D2 7600                       		moveq	#0,d3
000072D4 3600                       		move.w	d0,d3
000072D6 323C 0047                  		move.w	#$47,d1
000072DA D244                       		add.w	d4,d1
000072DC                            
000072DC                            loc_6384:
000072DC 3003                       		move.w	d3,d0
000072DE 4440                       		neg.w	d0
000072E0 22C0                       		move.l	d0,(a1)+
000072E2 4843                       		swap	d3
000072E4 D682                       		add.l	d2,d3
000072E6 4843                       		swap	d3
000072E8 51C9 FFF2                  		dbf	d1,loc_6384
000072EC 4E75                       		rts	
000072EE                            
000072EE                            ; ===========================================================================
000072EE                            ; ---------------------------------------------------------------------------
000072EE                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
000072EE                            ; ---------------------------------------------------------------------------
000072EE                             
000072EE                            Deform_LZ:
000072EE 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
000072F0 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
000072F4 48C4                       		ext.l	d4					; extend to long-word signed
000072F6 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
000072F8 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
000072FC 48C5                       		ext.l	d5					; extend to long-word signed
000072FE E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00007300 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007304 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
0000730A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000730E 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
00007312 4440                       		neg.w	d0					; reverse
00007314 4840                       		swap	d0					; send to upper word
00007316 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
0000731A 4440                       		neg.w	d0					; reverse
0000731C 7600                       		moveq	#$00,d3					; clear d3
0000731E 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
00007322 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007328 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000732C 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
00007330 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007334 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007336 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007338 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000733A 3202                       		move.w	d2,d1					; set at maximum
0000733C                             
0000733C                            DLZ_NoWater:
0000733C 9441                       		sub.w	d1,d2					; subtract from water-line count
0000733E D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00007340 5301                       		subq.b	#$01,d1					; decrease above water count
00007342 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007344                             
00007344                            DLZ_Above:
00007344 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007346 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000734A                             
0000734A                            DLZ_Water:
0000734A 5302                       		subq.b	#$01,d2					; decrease below water count
0000734C 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000734E 3200                       		move.w	d0,d1					; copy BG position back to d1
00007350 4840                       		swap	d0					; move FG position back to lower word in d0
00007352 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007354 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007358 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000735C D643                       		add.w	d3,d3					; multiply by word size (2)
0000735E D844                       		add.w	d4,d4					; ''
00007360 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007366 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007368 1813                       		move.b	(a3),d4					; get current position byte
0000736A E404                       		asr.b	#$02,d4					; get only the position bits
0000736C 4884                       		ext.w	d4					; extend to word
0000736E D244                       		add.w	d4,d1					; adjust BG's current position
00007370 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
00007374 1812                       		move.b	(a2),d4					; get current position byte
00007376 E404                       		asr.b	#$02,d4					; get only the position bits
00007378 4884                       		ext.w	d4					; extend to word
0000737A D044                       		add.w	d4,d0					; adjust FG's current position
0000737C                             
0000737C                            DLZ_Below:
0000737C D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000737E 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00007380 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007382 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
00007384 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
00007388                             
00007388                            DLZ_Finish:
00007388 4E75                       		rts						; return
0000738A                             
0000738A                            ; ---------------------------------------------------------------------------
0000738A                            ; Scroll data for the FG
0000738A                            ; ---------------------------------------------------------------------------
0000738A                             
0000738A                            DLZ_WaveFG:
0000738A                            		rept	$02
0000738A                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000738A 0001 0400 0401 0800 0801+  		endr
0000778A                             
0000778A                            ; ---------------------------------------------------------------------------
0000778A                            ; Scroll data for the BG
0000778A                            ; ---------------------------------------------------------------------------
0000778A                             
0000778A                            DLZ_WaveBG:	rept	$04
0000778A                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000778A                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000778A                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000778A                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000778A                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000778A                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000778A                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000778A                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000778A FC01 0000 0000 0000 0000+  		endr
00007B8A                             
00007B8A                            ; ===========================================================================
00007B8A                            ; End of function Deform_LZ
00007B8A                            
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            ; Marble Zone background layer deformation code
00007B8A                            ; ---------------------------------------------------------------------------
00007B8A                            
00007B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B8A                            
00007B8A                            
00007B8A                            Deform_MZ:
00007B8A                            	; block 1 - dungeon interior
00007B8A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007B8E 48C4                       		ext.l	d4
00007B90 ED84                       		asl.l	#6,d4
00007B92 2204                       		move.l	d4,d1
00007B94 E384                       		asl.l	#1,d4
00007B96 D881                       		add.l	d1,d4
00007B98 7C02                       		moveq	#2,d6
00007B9A 6100 0000                  		bsr.w	BGScroll_Block1
00007B9E                            	; block 3 - mountains
00007B9E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BA2 48C4                       		ext.l	d4
00007BA4 ED84                       		asl.l	#6,d4
00007BA6 7C06                       		moveq	#6,d6
00007BA8 6100 0000                  		bsr.w	BGScroll_Block3
00007BAC                            	; block 2 - bushes & antique buildings
00007BAC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BB0 48C4                       		ext.l	d4
00007BB2 EF84                       		asl.l	#7,d4
00007BB4 7C04                       		moveq	#4,d6
00007BB6 6100 0000                  		bsr.w	BGScroll_Block2
00007BBA                            	; calculate y-position of background
00007BBA 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BBE 3238 F704                  		move.w	(v_screenposy).w,d1
00007BC2 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BC6 6500                       		bcs.s	@noYscroll
00007BC8 3401                       		move.w	d1,d2
00007BCA D241                       		add.w	d1,d1
00007BCC D242                       		add.w	d2,d1
00007BCE E441                       		asr.w	#2,d1
00007BD0 D041                       		add.w	d1,d0
00007BD2                            	@noYscroll:
00007BD2 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007BD6 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007BDA 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007BDE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007BE4                            	; do something with redraw flags
00007BE4 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007BE8 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007BEC 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007BF0 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007BF4 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007BF8                            	; calculate background scroll buffer
00007BF8 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007BFC 3438 F700                  		move.w	(v_screenposx).w,d2
00007C00 4442                       		neg.w	d2
00007C02 3002                       		move.w	d2,d0
00007C04 E440                       		asr.w	#2,d0
00007C06 9042                       		sub.w	d2,d0
00007C08 48C0                       		ext.l	d0
00007C0A E780                       		asl.l	#3,d0
00007C0C 81FC 0005                  		divs.w	#5,d0
00007C10 48C0                       		ext.l	d0
00007C12 E980                       		asl.l	#4,d0
00007C14 E180                       		asl.l	#8,d0
00007C16 7600                       		moveq	#0,d3
00007C18 3602                       		move.w	d2,d3
00007C1A E243                       		asr.w	#1,d3
00007C1C 323C 0004                  		move.w	#4,d1
00007C20                            	@cloudLoop:		
00007C20 32C3                       		move.w	d3,(a1)+
00007C22 4843                       		swap	d3
00007C24 D680                       		add.l	d0,d3
00007C26 4843                       		swap	d3
00007C28 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C2C                            
00007C2C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C30 4440                       		neg.w	d0
00007C32 323C 0001                  		move.w	#1,d1
00007C36                            	@mountainLoop:		
00007C36 32C0                       		move.w	d0,(a1)+
00007C38 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C3C                            
00007C3C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C40 4440                       		neg.w	d0
00007C42 323C 0008                  		move.w	#8,d1
00007C46                            	@bushLoop:		
00007C46 32C0                       		move.w	d0,(a1)+
00007C48 51C9 FFFC                  		dbf	d1,@bushLoop
00007C4C                            
00007C4C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C50 4440                       		neg.w	d0
00007C52 323C 000F                  		move.w	#$F,d1
00007C56                            	@interiorLoop:		
00007C56 32C0                       		move.w	d0,(a1)+
00007C58 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C5C                            
00007C5C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C60 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C64 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C68 3400                       		move.w	d0,d2
00007C6A 0C40 0100                  		cmpi.w	#$100,d0
00007C6E 6500                       		bcs.s	@limitY
00007C70 303C 0100                  		move.w	#$100,d0
00007C74                            	@limitY:
00007C74 0240 01F0                  		andi.w	#$1F0,d0
00007C78 E648                       		lsr.w	#3,d0
00007C7A 45F2 0000                  		lea	(a2,d0),a2
00007C7E 6000 0000                  		bra.w	Bg_Scroll_X
00007C82                            ; End of function Deform_MZ
00007C82                            
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            ; Star Light Zone background layer deformation code
00007C82                            ; ---------------------------------------------------------------------------
00007C82                            
00007C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C82                            
00007C82                            
00007C82                            Deform_SLZ:
00007C82                            	; vertical scrolling
00007C82 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007C86 48C5                       		ext.l	d5
00007C88 EF85                       		asl.l	#7,d5
00007C8A 6100 0000                  		bsr.w	Bg_Scroll_Y
00007C8E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C94                            	; calculate background scroll buffer
00007C94 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C98 3438 F700                  		move.w	(v_screenposx).w,d2
00007C9C 4442                       		neg.w	d2
00007C9E 3002                       		move.w	d2,d0
00007CA0 E640                       		asr.w	#3,d0
00007CA2 9042                       		sub.w	d2,d0
00007CA4 48C0                       		ext.l	d0
00007CA6 E980                       		asl.l	#4,d0
00007CA8 81FC 001C                  		divs.w	#$1C,d0
00007CAC 48C0                       		ext.l	d0
00007CAE E980                       		asl.l	#4,d0
00007CB0 E180                       		asl.l	#8,d0
00007CB2 7600                       		moveq	#0,d3
00007CB4 3602                       		move.w	d2,d3
00007CB6 323C 001B                  		move.w	#$1B,d1
00007CBA                            	@starLoop:		
00007CBA 32C3                       		move.w	d3,(a1)+
00007CBC 4843                       		swap	d3
00007CBE D680                       		add.l	d0,d3
00007CC0 4843                       		swap	d3
00007CC2 51C9 FFF6                  		dbf	d1,@starLoop
00007CC6                            
00007CC6 3002                       		move.w	d2,d0
00007CC8 E640                       		asr.w	#3,d0
00007CCA 3200                       		move.w	d0,d1
00007CCC E241                       		asr.w	#1,d1
00007CCE D041                       		add.w	d1,d0
00007CD0 323C 0004                  		move.w	#4,d1
00007CD4                            	@buildingLoop1:		; distant black buildings
00007CD4 32C0                       		move.w	d0,(a1)+
00007CD6 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007CDA                            
00007CDA 3002                       		move.w	d2,d0
00007CDC E440                       		asr.w	#2,d0
00007CDE 323C 0004                  		move.w	#4,d1
00007CE2                            	@buildingLoop2:		; closer buildings
00007CE2 32C0                       		move.w	d0,(a1)+
00007CE4 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007CE8                            
00007CE8 3002                       		move.w	d2,d0
00007CEA E240                       		asr.w	#1,d0
00007CEC 323C 001D                  		move.w	#$1D,d1
00007CF0                            	@bottomLoop:		; bottom part of background
00007CF0 32C0                       		move.w	d0,(a1)+
00007CF2 51C9 FFFC                  		dbf	d1,@bottomLoop
00007CF6                            
00007CF6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CFA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CFE 3400                       		move.w	d0,d2
00007D00 0440 00C0                  		subi.w	#$C0,d0
00007D04 0240 03F0                  		andi.w	#$3F0,d0
00007D08 E648                       		lsr.w	#3,d0
00007D0A 45F2 0000                  		lea	(a2,d0),a2
00007D0E                            ;-------------------------------------------------------------------------------
00007D0E                            ;-------------------------------------------------------------------------------
00007D0E                            Bg_Scroll_X:
00007D0E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D12 323C 000E                  		move.w	#$E,d1
00007D16 3038 F700                  		move.w	(v_screenposx).w,d0
00007D1A 4440                       		neg.w	d0
00007D1C 4840                       		swap	d0
00007D1E 0242 000F                  		andi.w	#$F,d2
00007D22 D442                       		add.w	d2,d2
00007D24 301A                       		move.w	(a2)+,d0
00007D26 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D2A                            	@blockLoop:
00007D2A 301A                       		move.w	(a2)+,d0
00007D2C                            	@pixelJump:		
00007D2C 22C0                       		move.l	d0,(a1)+
00007D2E 22C0                       		move.l	d0,(a1)+
00007D30 22C0                       		move.l	d0,(a1)+
00007D32 22C0                       		move.l	d0,(a1)+
00007D34 22C0                       		move.l	d0,(a1)+
00007D36 22C0                       		move.l	d0,(a1)+
00007D38 22C0                       		move.l	d0,(a1)+
00007D3A 22C0                       		move.l	d0,(a1)+
00007D3C 22C0                       		move.l	d0,(a1)+
00007D3E 22C0                       		move.l	d0,(a1)+
00007D40 22C0                       		move.l	d0,(a1)+
00007D42 22C0                       		move.l	d0,(a1)+
00007D44 22C0                       		move.l	d0,(a1)+
00007D46 22C0                       		move.l	d0,(a1)+
00007D48 22C0                       		move.l	d0,(a1)+
00007D4A 22C0                       		move.l	d0,(a1)+
00007D4C 51C9 FFDC                  		dbf	d1,@blockLoop
00007D50 4E75                       		rts
00007D52                            
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            ; Spring Yard Zone background layer deformation	code
00007D52                            ; ---------------------------------------------------------------------------
00007D52                            
00007D52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D52                            
00007D52                            
00007D52                            Deform_SYZ:
00007D52                            	; vertical scrolling
00007D52 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D56 48C5                       		ext.l	d5
00007D58 E985                       		asl.l	#4,d5
00007D5A 2205                       		move.l	d5,d1
00007D5C E385                       		asl.l	#1,d5
00007D5E DA81                       		add.l	d1,d5
00007D60 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D64 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D6A                            	; calculate background scroll buffer
00007D6A 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D6E 3438 F700                  		move.w	(v_screenposx).w,d2
00007D72 4442                       		neg.w	d2
00007D74 3002                       		move.w	d2,d0
00007D76 E640                       		asr.w	#3,d0
00007D78 9042                       		sub.w	d2,d0
00007D7A 48C0                       		ext.l	d0
00007D7C E780                       		asl.l	#3,d0
00007D7E 81FC 0008                  		divs.w	#8,d0
00007D82 48C0                       		ext.l	d0
00007D84 E980                       		asl.l	#4,d0
00007D86 E180                       		asl.l	#8,d0
00007D88 7600                       		moveq	#0,d3
00007D8A 3602                       		move.w	d2,d3
00007D8C E243                       		asr.w	#1,d3
00007D8E 323C 0007                  		move.w	#7,d1
00007D92                            	@cloudLoop:		
00007D92 32C3                       		move.w	d3,(a1)+
00007D94 4843                       		swap	d3
00007D96 D680                       		add.l	d0,d3
00007D98 4843                       		swap	d3
00007D9A 51C9 FFF6                  		dbf	d1,@cloudLoop
00007D9E                            
00007D9E 3002                       		move.w	d2,d0
00007DA0 E640                       		asr.w	#3,d0
00007DA2 323C 0004                  		move.w	#4,d1
00007DA6                            	@mountainLoop:		
00007DA6 32C0                       		move.w	d0,(a1)+
00007DA8 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DAC                            
00007DAC 3002                       		move.w	d2,d0
00007DAE E440                       		asr.w	#2,d0
00007DB0 323C 0005                  		move.w	#5,d1
00007DB4                            	@buildingLoop:		
00007DB4 32C0                       		move.w	d0,(a1)+
00007DB6 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DBA                            
00007DBA 3002                       		move.w	d2,d0
00007DBC 3202                       		move.w	d2,d1
00007DBE E241                       		asr.w	#1,d1
00007DC0 9041                       		sub.w	d1,d0
00007DC2 48C0                       		ext.l	d0
00007DC4 E980                       		asl.l	#4,d0
00007DC6 81FC 000E                  		divs.w	#$E,d0
00007DCA 48C0                       		ext.l	d0
00007DCC E980                       		asl.l	#4,d0
00007DCE E180                       		asl.l	#8,d0
00007DD0 7600                       		moveq	#0,d3
00007DD2 3602                       		move.w	d2,d3
00007DD4 E243                       		asr.w	#1,d3
00007DD6 323C 000D                  		move.w	#$D,d1
00007DDA                            	@bushLoop:		
00007DDA 32C3                       		move.w	d3,(a1)+
00007DDC 4843                       		swap	d3
00007DDE D680                       		add.l	d0,d3
00007DE0 4843                       		swap	d3
00007DE2 51C9 FFF6                  		dbf	d1,@bushLoop
00007DE6                            
00007DE6 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007DEA 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007DEE 3400                       		move.w	d0,d2
00007DF0 0240 01F0                  		andi.w	#$1F0,d0
00007DF4 E648                       		lsr.w	#3,d0
00007DF6 45F2 0000                  		lea	(a2,d0),a2
00007DFA 6000 FF12                  		bra.w	Bg_Scroll_X
00007DFE                            ; End of function Deform_SYZ
00007DFE                            
00007DFE                            ; ---------------------------------------------------------------------------
00007DFE                            ; Scrap	Brain Zone background layer deformation	code
00007DFE                            ; ---------------------------------------------------------------------------
00007DFE                            
00007DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFE                            
00007DFE                            
00007DFE                            Deform_SBZ:
00007DFE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E02 48C4                       		ext.l	d4
00007E04 ED84                       		asl.l	#6,d4
00007E06 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E0A 48C5                       		ext.l	d5
00007E0C E985                       		asl.l	#4,d5
00007E0E E385                       		asl.l	#1,d5
00007E10 6100 0000                  		bsr.w	BGScroll_XY
00007E14 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E1A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E1E 323C 00DF                  		move.w	#223,d1
00007E22 3038 F700                  		move.w	(v_screenposx).w,d0
00007E26 4440                       		neg.w	d0
00007E28 4840                       		swap	d0
00007E2A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E2E 4440                       		neg.w	d0
00007E30                            
00007E30                            loc_6576:
00007E30 22C0                       		move.l	d0,(a1)+
00007E32 51C9 FFFC                  		dbf	d1,loc_6576
00007E36 4E75                       		rts	
00007E38                            ;-------------------------------------------------------------------------------
00007E38                            Deform_SBZ2:;loc_68A2:
00007E38 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E3C 48C4                       		ext.l	d4
00007E3E ED84                       		asl.l	#6,d4
00007E40 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E44 48C5                       		ext.l	d5
00007E46 E985                       		asl.l	#4,d5
00007E48 E385                       		asl.l	#1,d5
00007E4A 6100 0000                  		bsr.w	BGScroll_XY
00007E4E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E54 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E58 323C 00DF                  		move.w	#223,d1
00007E5C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E60 4440                       		neg.w	d0
00007E62 4840                       		swap	d0
00007E64 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E68 4440                       		neg.w	d0
00007E6A                            
00007E6A                            loc_6577:
00007E6A 22C0                       		move.l	d0,(a1)+
00007E6C 51C9 FFFC                  		dbf	d1,loc_6577
00007E70 4E75                       		rts	
00007E72                            
00007E72                            ; ---------------------------------------------------------------------------
00007E72                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007E72                            ; ---------------------------------------------------------------------------
00007E72                            
00007E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E72                            
00007E72                            
00007E72                            ScrollHoriz:
00007E72 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007E76 6100                       		bsr.s	MoveScreenHoriz
00007E78 3038 F700                  		move.w	(v_screenposx).w,d0
00007E7C 0240 0010                  		andi.w	#$10,d0
00007E80 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007E84 B300                       		eor.b	d1,d0
00007E86 6600                       		bne.s	@return
00007E88 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007E8E 3038 F700                  		move.w	(v_screenposx).w,d0
00007E92 9044                       		sub.w	d4,d0		; compare new with old screen position
00007E94 6A00                       		bpl.s	@scrollRight
00007E96                            
00007E96 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007E9C 4E75                       		rts	
00007E9E                            
00007E9E                            	@scrollRight:
00007E9E 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007EA4                            
00007EA4                            	@return:
00007EA4 4E75                       		rts	
00007EA6                            ; End of function ScrollHoriz
00007EA6                            
00007EA6                            
00007EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA6                            
00007EA6                            MoveScreenHoriz:
00007EA6 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007EAA 6700 0000                  		beq.w	@cont		
00007EAE 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EB4                            		
00007EB4                            	@cont:		
00007EB4 3238 C904                  		move.w	($FFFFC904).w,d1
00007EB8 6700                       		beq.s	@cont1
00007EBA 0441 0100                  		sub.w	#$100,d1
00007EBE 31C1 C904                  		move.w	d1,($FFFFC904).w
00007EC2 7200                       		moveq	#0,d1
00007EC4 1238 C904                  		move.b	($FFFFC904).w,d1
00007EC8 E509                       		lsl.b	#2,d1
00007ECA 5801                       		addq.b	#4,d1
00007ECC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007ED0 9001                       		sub.b	d1,d0
00007ED2 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007ED6 3031 0000                  		move.w	(a1,d0.w),d0
00007EDA 0240 3FFF                  		and.w	#$3FFF,d0
00007EDE 6000                       		bra.s	@cont2
00007EE0                            		
00007EE0                            @cont1:
00007EE0 3038 D008                  		move.w	($FFFFD008).w,d0
00007EE4                            		
00007EE4                            @cont2:
00007EE4 9078 F700                  		sub.w	($FFFFF700).w,d0
00007EE8 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007EEC 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007EEE 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007EF2 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007EF4 4278 F73A                          clr.w    (v_scrshiftx).w
00007EF8 4E75                               rts 
00007EFA                            ; ===========================================================================
00007EFA                            
00007EFA                            SH_AheadOfMid:
00007EFA 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007EFE 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F00 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F04                            
00007F04                                SH_Ahead16:
00007F04 D078 F700                          add.w    (v_screenposx).w,d0
00007F08 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F0C 6D00                               blt.s    SH_SetScreen
00007F0E 3038 F72A                          move.w    (v_limitright2).w,d0
00007F12                            
00007F12                            SH_SetScreen:
00007F12 3200                               move.w    d0,d1
00007F14 9278 F700                          sub.w    (v_screenposx).w,d1
00007F18 E141                               asl.w    #8,d1
00007F1A 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F1E 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F22 4E75                               rts 
00007F24                            ; ===========================================================================
00007F24                            
00007F24                            SH_BehindMid:
00007F24 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F28 6E00                       		bgt.s	@cont
00007F2A 303C FFF0                  		move.w	#-$10,d0	
00007F2E                            		
00007F2E                            @cont:
00007F2E D078 F700                          add.w    (v_screenposx).w,d0
00007F32 B078 F728                          cmp.w    (v_limitleft2).w,d0
00007F36 6EDA                               bgt.s    SH_SetScreen
00007F38 3038 F728                          move.w    (v_limitleft2).w,d0
00007F3C 60D4                               bra.s    SH_SetScreen
00007F3E                            ; End of function MoveScreenHoriz
00007F3E                            
00007F3E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F3E                            
00007F3E                            MoveScreenHorizEXT:
00007F3E 3238 C904                  		move.w	($FFFFC904).w,d1
00007F42 6700                       		beq.s	@cont1
00007F44 0441 0100                  		sub.w	#$100,d1
00007F48 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F4C 7200                       		moveq	#0,d1
00007F4E 1238 C904                  		move.b	($FFFFC904).w,d1
00007F52 E509                       		lsl.b	#2,d1
00007F54 5801                       		addq.b	#4,d1
00007F56 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F5A 9001                       		sub.b	d1,d0
00007F5C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F60 3031 0000                  		move.w	(a1,d0.w),d0
00007F64 0240 3FFF                  		and.w	#$3FFF,d0
00007F68 6000                       		bra.s	@cont2
00007F6A                            		
00007F6A                            @cont1:
00007F6A 3038 D008                  		move.w	($FFFFD008).w,d0
00007F6E                            		
00007F6E                            @cont2:
00007F6E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F72 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007F76 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007F78 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007F7A 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007F7C                            ; ===========================================================================
00007F7C                            
00007F7C                            SHEXT_ProperlyFramed:
00007F7C 4278 F73A                          clr.w    (v_scrshiftx).w
00007F80 4E75                               rts 
00007F82                            ; ===========================================================================
00007F82                            
00007F82                            SHEXT_AheadOfMid:
00007F82 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F86 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007F88 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F8C                            
00007F8C                            SHEXT_Ahead16:
00007F8C D078 F700                          add.w    (v_screenposx).w,d0
00007F90 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F94 6D00                               blt.s    SHEXT_SetScreen
00007F96 3038 F72A                          move.w    (v_limitright2).w,d0
00007F9A                            
00007F9A                            SHEXT_SetScreen:
00007F9A 3200                               move.w    d0,d1
00007F9C 9278 F700                          sub.w    (v_screenposx).w,d1
00007FA0 E141                               asl.w    #8,d1
00007FA2 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FA6 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FAA 4E75                               rts
00007FAC                            
00007FAC                            ; ===========================================================================
00007FAC                            
00007FAC                            SHEXT_BehindMid:
00007FAC 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FB0 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FB2 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FB6                            
00007FB6                            SHEXT_Behind16:
00007FB6 D078 F700                          add.w    (v_screenposx).w,d0
00007FBA B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FBE 6EDA                               bgt.s    SHEXT_SetScreen
00007FC0 3038 F728                          move.w    (v_limitleft2).w,d0
00007FC4 60D4                               bra.s    SHEXT_SetScreen
00007FC6                                  
00007FC6                            ; End of function MoveScreenHoriz
00007FC6                            
00007FC6                            
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            ; Subroutine to	scroll the level vertically as Sonic moves
00007FC6                            ; ---------------------------------------------------------------------------
00007FC6                            
00007FC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC6                            
00007FC6                            
00007FC6                            ScrollVertical:
00007FC6 7200                       		moveq	#0,d1
00007FC8 3038 D00C                  		move.w	(v_player+obY).w,d0
00007FCC 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00007FD0 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00007FD6 6700                       		beq.s	SV_NotRolling	; if not, branch
00007FD8 5B40                       		subq.w	#5,d0
00007FDA                            
00007FDA                            	SV_NotRolling:
00007FDA 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007FE0 6700                       		beq.s	loc_664A	; if not, branch
00007FE2                            
00007FE2 0640 0020                  		addi.w	#32,d0
00007FE6 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007FEA 6500                       		bcs.s	loc_6696
00007FEC 0440 0040                  		subi.w	#64,d0
00007FF0 6400                       		bcc.s	loc_6696
00007FF2 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007FF6 6600                       		bne.s	loc_66A8
00007FF8 6000                       		bra.s	loc_6656
00007FFA                            ; ===========================================================================
00007FFA                            
00007FFA                            loc_664A:
00007FFA 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007FFE 6600                       		bne.s	loc_665C
00008000 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008004 6600                       		bne.s	loc_66A8
00008006                            
00008006                            loc_6656:
00008006 4278 F73C                  		clr.w	(v_scrshifty).w
0000800A 4E75                       		rts	
0000800C                            ; ===========================================================================
0000800C                            
0000800C                            loc_665C:
0000800C 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00008012 6600                       		bne.s	loc_6684
00008014 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008018 6A00                       		bpl.s	loc_666C
0000801A 4441                       		neg.w	d1
0000801C                            
0000801C                            loc_666C:
0000801C 0C41 0800                  		cmpi.w	#$800,d1
00008020 6400                       		bcc.s	loc_6696
00008022 323C 0600                  		move.w	#$600,d1
00008026 0C40 0006                  		cmpi.w	#6,d0
0000802A 6E00                       		bgt.s	loc_66F6
0000802C 0C40 FFFA                  		cmpi.w	#-6,d0
00008030 6D00                       		blt.s	loc_66C0
00008032 6000                       		bra.s	loc_66AE
00008034                            ; ===========================================================================
00008034                            
00008034                            loc_6684:
00008034 323C 0200                  		move.w	#$200,d1
00008038 0C40 0002                  		cmpi.w	#2,d0
0000803C 6E00                       		bgt.s	loc_66F6
0000803E 0C40 FFFE                  		cmpi.w	#-2,d0
00008042 6D00                       		blt.s	loc_66C0
00008044 6000                       		bra.s	loc_66AE
00008046                            ; ===========================================================================
00008046                            
00008046                            loc_6696:
00008046 323C 1000                  		move.w	#$1000,d1
0000804A 0C40 0010                  		cmpi.w	#$10,d0
0000804E 6E00                       		bgt.s	loc_66F6
00008050 0C40 FFF0                  		cmpi.w	#-$10,d0
00008054 6D00                       		blt.s	loc_66C0
00008056 6000                       		bra.s	loc_66AE
00008058                            ; ===========================================================================
00008058                            
00008058                            loc_66A8:
00008058 7000                       		moveq	#0,d0
0000805A 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
0000805E                            
0000805E                            loc_66AE:
0000805E 7200                       		moveq	#0,d1
00008060 3200                       		move.w	d0,d1
00008062 D278 F704                  		add.w	(v_screenposy).w,d1
00008066 4A40                       		tst.w	d0
00008068 6A00 0000                  		bpl.w	loc_6700
0000806C 6000 0000                  		bra.w	loc_66CC
00008070                            ; ===========================================================================
00008070                            
00008070                            loc_66C0:
00008070 4441                       		neg.w	d1
00008072 48C1                       		ext.l	d1
00008074 E181                       		asl.l	#8,d1
00008076 D2B8 F704                  		add.l	(v_screenposy).w,d1
0000807A 4841                       		swap	d1
0000807C                            
0000807C                            loc_66CC:
0000807C B278 F72C                  		cmp.w	(v_limittop2).w,d1
00008080 6E00                       		bgt.s	loc_6724
00008082 0C41 FF00                  		cmpi.w	#-$100,d1
00008086 6E00                       		bgt.s	loc_66F0
00008088 0241 07FF                  		andi.w	#$7FF,d1
0000808C 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00008092 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00008098 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0000809E 6000                       		bra.s	loc_6724
000080A0                            ; ===========================================================================
000080A0                            
000080A0                            loc_66F0:
000080A0 3238 F72C                  		move.w	(v_limittop2).w,d1
000080A4 6000                       		bra.s	loc_6724
000080A6                            ; ===========================================================================
000080A6                            
000080A6                            loc_66F6:
000080A6 48C1                       		ext.l	d1
000080A8 E181                       		asl.l	#8,d1
000080AA D2B8 F704                  		add.l	(v_screenposy).w,d1
000080AE 4841                       		swap	d1
000080B0                            
000080B0                            loc_6700:
000080B0 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080B4 6D00                       		blt.s	loc_6724
000080B6 0441 0800                  		subi.w	#$800,d1
000080BA 6500                       		bcs.s	loc_6720
000080BC 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080C2 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
000080C8 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080CE 6000                       		bra.s	loc_6724
000080D0                            ; ===========================================================================
000080D0                            
000080D0                            loc_6720:
000080D0 3238 F72E                  		move.w	(v_limitbtm2).w,d1
000080D4                            
000080D4                            loc_6724:
000080D4 3838 F704                  		move.w	(v_screenposy).w,d4
000080D8 4841                       		swap	d1
000080DA 2601                       		move.l	d1,d3
000080DC 96B8 F704                  		sub.l	(v_screenposy).w,d3
000080E0 E09B                       		ror.l	#8,d3
000080E2 31C3 F73C                  		move.w	d3,(v_scrshifty).w
000080E6 21C1 F704                  		move.l	d1,(v_screenposy).w
000080EA 3038 F704                  		move.w	(v_screenposy).w,d0
000080EE 0240 0010                  		andi.w	#$10,d0
000080F2 1238 F74B                  		move.b	(v_fg_yblock).w,d1
000080F6 B300                       		eor.b	d1,d0
000080F8 6600                       		bne.s	@return
000080FA 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00008100 3038 F704                  		move.w	(v_screenposy).w,d0
00008104 9044                       		sub.w	d4,d0
00008106 6A00                       		bpl.s	@scrollBottom
00008108 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000810E 4E75                       		rts	
00008110                            ; ===========================================================================
00008110                            
00008110                            	@scrollBottom:
00008110 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008116                            
00008116                            	@return:
00008116 4E75                       		rts	
00008118                            ; End of function ScrollVertical
00008118                            
00008118                            
00008118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008118                            ; Scrolls background and sets redraw flags.
00008118                            ; d4 - background x offset * $10000
00008118                            ; d5 - background y offset * $10000
00008118                            
00008118                            BGScroll_XY:
00008118 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000811C 2002                       		move.l	d2,d0
0000811E D084                       		add.l	d4,d0
00008120 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008124 2200                       		move.l	d0,d1
00008126 4841                       		swap	d1
00008128 0241 0010                  		andi.w	#$10,d1
0000812C 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008130 B701                       		eor.b	d3,d1
00008132 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00008134 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000813A 9082                       		sub.l	d2,d0	; new - old
0000813C 6A00                       		bpl.s	@scrollRight
0000813E 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00008144 6000                       		bra.s	BGScroll_YRelative
00008146                            	@scrollRight:
00008146 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
0000814C                            BGScroll_YRelative:
0000814C 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008150 2003                       		move.l	d3,d0
00008152 D085                       		add.l	d5,d0
00008154 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008158 2200                       		move.l	d0,d1
0000815A 4841                       		swap	d1
0000815C 0241 0010                  		andi.w	#$10,d1
00008160 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008164 B501                       		eor.b	d2,d1
00008166 6600                       		bne.s	@return
00008168 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000816E 9083                       		sub.l	d3,d0
00008170 6A00                       		bpl.s	@scrollBottom
00008172 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008178 4E75                       		rts
0000817A                            	@scrollBottom:
0000817A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008180                            	@return:
00008180 4E75                       		rts
00008182                            ; End of function BGScroll_XY
00008182                            
00008182                            Bg_Scroll_Y:
00008182 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008186 2003                       		move.l	d3,d0
00008188 D085                       		add.l	d5,d0
0000818A 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
0000818E 2200                       		move.l	d0,d1
00008190 4841                       		swap	d1
00008192 0241 0010                  		andi.w	#$10,d1
00008196 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
0000819A B501                       		eor.b	d2,d1
0000819C 6600                       		bne.s	@return
0000819E 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081A4 9083                       		sub.l	d3,d0
000081A6 6A00                       		bpl.s	@scrollBottom
000081A8 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081AE 4E75                       		rts
000081B0                            	@scrollBottom:
000081B0 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081B6                            	@return:
000081B6 4E75                       		rts
000081B8                            
000081B8                            
000081B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B8                            
000081B8                            
000081B8                            BGScroll_YAbsolute:
000081B8 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081BC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081C0 3200                       		move.w	d0,d1
000081C2 0241 0010                  		andi.w	#$10,d1
000081C6 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081CA B501                       		eor.b	d2,d1
000081CC 6600                       		bne.s	@return
000081CE 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081D4 9043                       		sub.w	d3,d0
000081D6 6A00                       		bpl.s	@scrollBottom
000081D8 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081DE 4E75                       		rts
000081E0                            	@scrollBottom:
000081E0 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081E6                            	@return:
000081E6 4E75                       		rts
000081E8                            ; End of function BGScroll_YAbsolute
000081E8                            
000081E8                            
000081E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081E8                            ; d6 - bit to set for redraw
000081E8                            
000081E8                            BGScroll_Block1:
000081E8 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000081EC 2002                       		move.l	d2,d0
000081EE D084                       		add.l	d4,d0
000081F0 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000081F4 2200                       		move.l	d0,d1
000081F6 4841                       		swap	d1
000081F8 0241 0010                  		andi.w	#$10,d1
000081FC 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008200 B701                       		eor.b	d3,d1
00008202 6600                       		bne.s	@return
00008204 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000820A 9082                       		sub.l	d2,d0
0000820C 6A00                       		bpl.s	@scrollRight
0000820E 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008212 6000                       		bra.s	@return
00008214                            	@scrollRight:
00008214 5206                       		addq.b	#1,d6
00008216 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000821A                            	@return:
0000821A 4E75                       		rts
0000821C                            ; End of function BGScroll_Block1
0000821C                            
0000821C                            
0000821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000821C                            
0000821C                            
0000821C                            BGScroll_Block2:
0000821C 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00008220 2002                       		move.l	d2,d0
00008222 D084                       		add.l	d4,d0
00008224 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008228 2200                       		move.l	d0,d1
0000822A 4841                       		swap	d1
0000822C 0241 0010                  		andi.w	#$10,d1
00008230 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00008234 B701                       		eor.b	d3,d1
00008236 6600                       		bne.s	@return
00008238 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
0000823E 9082                       		sub.l	d2,d0
00008240 6A00                       		bpl.s	@scrollRight
00008242 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008246 6000                       		bra.s	@return
00008248                            	@scrollRight:
00008248 5206                       		addq.b	#1,d6
0000824A 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
0000824E                            	@return:
0000824E 4E75                       		rts
00008250                            ;-------------------------------------------------------------------------------
00008250                            BGScroll_Block3:
00008250 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008254 2002                       		move.l	d2,d0
00008256 D084                       		add.l	d4,d0
00008258 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000825C 2200                       		move.l	d0,d1
0000825E 4841                       		swap	d1
00008260 0241 0010                  		andi.w	#$10,d1
00008264 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00008268 B701                       		eor.b	d3,d1
0000826A 6600                       		bne.s	@return
0000826C 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008272 9082                       		sub.l	d2,d0
00008274 6A00                       		bpl.s	@scrollRight
00008276 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
0000827A 6000                       		bra.s	@return
0000827C                            	@scrollRight:
0000827C 5206                       		addq.b	#1,d6
0000827E 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008282                            	@return:
00008282 4E75                       		rts
00008282 4E75                       		rts
00008284                            
00008284                            
00008284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008284                            
00008284                            ; sub_6886:
00008284                            LoadTilesAsYouMove_BGOnly:
00008284 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000828A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008290 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00008294 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008298 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000829C 343C 6000                  		move.w	#$6000,d2
000082A0 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082A4 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082A8 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082AC 6000 0000                  		bra.w	DrawBGScrollBlock2
000082B0                            ; End of function sub_6886
000082B0                            
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            ; Subroutine to	display	correct	tiles as you move
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            
000082B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B0                            
000082B0                            
000082B0                            LoadTilesAsYouMove:
000082B0 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082B6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082BC                            		; First, update the background
000082BC 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082C0 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
000082C4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082C8 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
000082CC 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082D0 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
000082D4 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
000082D8 6100 0000                  		bsr.w	DrawBGScrollBlock2
000082DC                            		; REV01 added a third scroll block, though, technically,
000082DC                            		; the RAM for it was already there in REV00
000082DC 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
000082E0 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
000082E4 6100 0000                  		bsr.w	DrawBGScrollBlock3
000082E8                            		; Then, update the foreground
000082E8 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
000082EC 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
000082F0 49F8 A400                  		lea	(v_lvllayout).w,a4
000082F4 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
000082F8                            		; The FG's update function is inlined here
000082F8 4A12                       		tst.b	(a2)
000082FA 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
000082FC 0892 0000                  		bclr	#0,(a2)
00008300 6700                       		beq.s	loc_6908
00008302                            		; Draw new tiles at the top
00008302 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008304 7AF0                       		moveq	#-16,d5 ; X coordinate
00008306 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000830A 78F0                       		moveq	#-16,d4 ; Y coordinate
0000830C 7AF0                       		moveq	#-16,d5 ; X coordinate
0000830E 6100 0000                  		bsr.w	DrawBlocks_LR
00008312                            
00008312                            loc_6908:
00008312 0892 0001                  		bclr	#1,(a2)
00008316 6700                       		beq.s	loc_6922
00008318                            		; Draw new tiles at the bottom
00008318 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
0000831C 7AF0                       		moveq	#-16,d5
0000831E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008322 383C 00E0                  		move.w	#224,d4
00008326 7AF0                       		moveq	#-16,d5
00008328 6100 0000                  		bsr.w	DrawBlocks_LR
0000832C                            
0000832C                            loc_6922:
0000832C 0892 0002                  		bclr	#2,(a2)
00008330 6700                       		beq.s	loc_6938
00008332                            		; Draw new tiles on the left
00008332 78F0                       		moveq	#-16,d4
00008334 7AF0                       		moveq	#-16,d5
00008336 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000833A 78F0                       		moveq	#-16,d4
0000833C 7AF0                       		moveq	#-16,d5
0000833E 6100 0000                  		bsr.w	DrawBlocks_TB
00008342                            
00008342                            loc_6938:
00008342 0892 0003                  		bclr	#3,(a2)
00008346 6700                       		beq.s	locret_6952
00008348                            		; Draw new tiles on the right
00008348 78F0                       		moveq	#-16,d4
0000834A 3A3C 0140                  		move.w	#320,d5
0000834E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008352 78F0                       		moveq	#-16,d4
00008354 3A3C 0140                  		move.w	#320,d5
00008358 6100 0000                  		bsr.w	DrawBlocks_TB
0000835C                            
0000835C                            locret_6952:
0000835C 4E75                       		rts	
0000835E                            ; End of function LoadTilesAsYouMove
0000835E                            
0000835E                            
0000835E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000835E                            
0000835E                            ; sub_6954:
0000835E                            DrawBGScrollBlock1:
0000835E 4A12                       		tst.b	(a2)
00008360 6700 0000                  		beq.w	locret_69F2
00008364 0892 0000                  		bclr	#0,(a2)
00008368 6700                       		beq.s	loc_6972
0000836A                            		; Draw new tiles at the top
0000836A 78F0                       		moveq	#-16,d4
0000836C 7AF0                       		moveq	#-16,d5
0000836E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008372 78F0                       		moveq	#-16,d4
00008374 7AF0                       		moveq	#-16,d5
00008376 6100 0000                  			bsr.w	DrawBlocks_LR
0000837A                            
0000837A                            loc_6972:
0000837A 0892 0001                  		bclr	#1,(a2)
0000837E 6700                       		beq.s	loc_698E
00008380                            		; Draw new tiles at the top
00008380 383C 00E0                  		move.w	#224,d4
00008384 7AF0                       		moveq	#-16,d5
00008386 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000838A 383C 00E0                  		move.w	#224,d4
0000838E 7AF0                       		moveq	#-16,d5
00008390 6100 0000                  			bsr.w	DrawBlocks_LR
00008394                            
00008394                            loc_698E:
00008394 0892 0002                  		bclr	#2,(a2)
00008398                            
00008398                            
00008398 6700                       			beq.s	locj_6D56
0000839A                            			; Draw new tiles on the left
0000839A 78F0                       			moveq	#-16,d4
0000839C 7AF0                       			moveq	#-16,d5
0000839E 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083A2 78F0                       			moveq	#-16,d4
000083A4 7AF0                       			moveq	#-16,d5
000083A6 6100 0000                  			bsr.w	DrawBlocks_TB
000083AA                            	locj_6D56:
000083AA                            
000083AA 0892 0003                  			bclr	#3,(a2)
000083AE 6700                       			beq.s	locj_6D70
000083B0                            			; Draw new tiles on the right
000083B0 78F0                       			moveq	#-16,d4
000083B2 3A3C 0140                  			move.w	#320,d5
000083B6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083BA 78F0                       			moveq	#-16,d4
000083BC 3A3C 0140                  			move.w	#320,d5
000083C0 6100 0000                  			bsr.w	DrawBlocks_TB
000083C4                            	locj_6D70:
000083C4                            
000083C4 0892 0004                  			bclr	#4,(a2)
000083C8 6700                       			beq.s	locj_6D88
000083CA                            			; Draw entire row at the top
000083CA 78F0                       			moveq	#-16,d4
000083CC 7A00                       			moveq	#0,d5
000083CE 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083D2 78F0                       			moveq	#-16,d4
000083D4 7A00                       			moveq	#0,d5
000083D6 7C1F                       			moveq	#(512/16)-1,d6
000083D8 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083DC                            	locj_6D88:
000083DC                            
000083DC 0892 0005                  			bclr	#5,(a2)
000083E0 6700                       			beq.s	locret_69F2
000083E2                            			; Draw entire row at the bottom
000083E2 383C 00E0                  			move.w	#224,d4
000083E6 7A00                       			moveq	#0,d5
000083E8 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000083EC 383C 00E0                  			move.w	#224,d4
000083F0 7A00                       			moveq	#0,d5
000083F2 7C1F                       			moveq	#(512/16)-1,d6
000083F4 6100 0000                  			bsr.w	DrawBlocks_LR_3
000083F8                            
000083F8                            locret_69F2:
000083F8 4E75                       		rts	
000083FA                            ; End of function DrawBGScrollBlock1
000083FA                            
000083FA                            
000083FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083FA                            
000083FA                            ; Essentially, this draws everything that isn't scroll block 1
000083FA                            ; sub_69F4:
000083FA                            DrawBGScrollBlock2:
000083FA                            
000083FA 4A12                       			tst.b	(a2)
000083FC 6700 0000                  			beq.w	locj_6DF2
00008400 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008406 6700 0000                  			beq.w	Draw_SBz
0000840A 0892 0000                  			bclr	#0,(a2)
0000840E 6700                       			beq.s	locj_6DD2
00008410                            			; Draw new tiles on the left
00008410 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00008414 7AF0                       			moveq	#-16,d5
00008416 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000841A 383C 0070                  			move.w	#224/2,d4
0000841E 7AF0                       			moveq	#-16,d5
00008420 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00008422 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008426                            	locj_6DD2:
00008426 0892 0001                  			bclr	#1,(a2)
0000842A 6700                       			beq.s	locj_6DF2
0000842C                            			; Draw new tiles on the right
0000842C 383C 0070                  			move.w	#224/2,d4
00008430 3A3C 0140                  			move.w	#320,d5
00008434 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008438 383C 0070                  			move.w	#224/2,d4
0000843C 3A3C 0140                  			move.w	#320,d5
00008440 7C02                       			moveq	#3-1,d6
00008442 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008446                            	locj_6DF2:
00008446 4E75                       			rts
00008448                            ;===============================================================================
00008448                            	locj_6DF4:
00008448 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008458 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008468 0200                       			dc.b $02,$00						
0000846A                            ;===============================================================================
0000846A                            	Draw_SBz:
0000846A 78F0                       			moveq	#-16,d4
0000846C 0892 0000                  			bclr	#0,(a2)
00008470 6600                       			bne.s	locj_6E28
00008472 0892 0001                  			bclr	#1,(a2)
00008476 6700                       			beq.s	locj_6E72
00008478 383C 00E0                  			move.w	#224,d4
0000847C                            	locj_6E28:
0000847C 41F9 0000 8449             			lea	(locj_6DF4+1).l,a0
00008482 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008486 D044                       			add.w	d4,d0
00008488 0240 01F0                  			andi.w	#$1F0,d0
0000848C E848                       			lsr.w	#4,d0
0000848E 1030 0000                  			move.b	(a0,d0.w),d0
00008492 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00008498 3673 0000                  			movea.w	(a3,d0.w),a3
0000849C 6700                       			beq.s	locj_6E5E
0000849E 7AF0                       			moveq	#-16,d5
000084A0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084A4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084A8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084AC 6100 0000                  			bsr.w	DrawBlocks_LR
000084B0 6000                       			bra.s	locj_6E72
000084B2                            ;===============================================================================
000084B2                            	locj_6E5E:
000084B2 7A00                       			moveq	#0,d5
000084B4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084B8 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084BC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084C0 7C1F                       			moveq	#(512/16)-1,d6
000084C2 6100 0000                  			bsr.w	DrawBlocks_LR_3
000084C6                            	locj_6E72:
000084C6 4A12                       			tst.b	(a2)
000084C8 6600                       			bne.s	locj_6E78
000084CA 4E75                       			rts
000084CC                            ;===============================================================================			
000084CC                            	locj_6E78:
000084CC 78F0                       			moveq	#-16,d4
000084CE 7AF0                       			moveq	#-16,d5
000084D0 1012                       			move.b	(a2),d0
000084D2 0200 00A8                  			andi.b	#$A8,d0
000084D6 6700                       			beq.s	locj_6E8C
000084D8 E208                       			lsr.b	#1,d0
000084DA 1480                       			move.b	d0,(a2)
000084DC 3A3C 0140                  			move.w	#320,d5
000084E0                            	locj_6E8C:
000084E0 41F9 0000 8448             			lea	(locj_6DF4).l,a0
000084E6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084EA 0240 01F0                  			andi.w	#$1F0,d0
000084EE E848                       			lsr.w	#4,d0
000084F0 41F0 0000                  			lea	(a0,d0.w),a0
000084F4 6000 0000                  			bra.w	locj_6FEC						
000084F8                            ;===============================================================================
000084F8                            
000084F8                            
000084F8                            	; locj_6EA4:
000084F8                            	DrawBGScrollBlock3:
000084F8 4A12                       			tst.b	(a2)
000084FA 6700 0000                  			beq.w	locj_6EF0
000084FE 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008504 6700 0000                  			beq.w	Draw_Mz
00008508 0892 0000                  			bclr	#0,(a2)
0000850C 6700                       			beq.s	locj_6ED0
0000850E                            			; Draw new tiles on the left
0000850E 383C 0040                  			move.w	#$40,d4
00008512 7AF0                       			moveq	#-16,d5
00008514 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008518 383C 0040                  			move.w	#$40,d4
0000851C 7AF0                       			moveq	#-16,d5
0000851E 7C02                       			moveq	#3-1,d6
00008520 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008524                            	locj_6ED0:
00008524 0892 0001                  			bclr	#1,(a2)
00008528 6700                       			beq.s	locj_6EF0
0000852A                            			; Draw new tiles on the right
0000852A 383C 0040                  			move.w	#$40,d4
0000852E 3A3C 0140                  			move.w	#320,d5
00008532 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008536 383C 0040                  			move.w	#$40,d4
0000853A 3A3C 0140                  			move.w	#320,d5
0000853E 7C02                       			moveq	#3-1,d6
00008540 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008544                            	locj_6EF0:
00008544 4E75                       			rts
00008546                            	locj_6EF2:
00008546 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008556 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008566 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008576 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008586 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008596 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A6 0200                       			dc.b $02,$00
000085A8                            ;===============================================================================
000085A8                            	Draw_Mz:
000085A8 78F0                       			moveq	#-16,d4
000085AA 0892 0000                  			bclr	#0,(a2)
000085AE 6600                       			bne.s	locj_6F66
000085B0 0892 0001                  			bclr	#1,(a2)
000085B4 6700                       			beq.s	locj_6FAE
000085B6 383C 00E0                  			move.w	#224,d4
000085BA                            	locj_6F66:
000085BA 41F9 0000 8547             			lea	(locj_6EF2+1).l,a0
000085C0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085C4 0440 0200                  			subi.w	#$200,d0
000085C8 D044                       			add.w	d4,d0
000085CA 0240 07F0                  			andi.w	#$7F0,d0
000085CE E848                       			lsr.w	#4,d0
000085D0 1030 0000                  			move.b	(a0,d0.w),d0
000085D4 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
000085D8 6700                       			beq.s	locj_6F9A
000085DA 7AF0                       			moveq	#-16,d5
000085DC 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085E0 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085E4 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085E8 6100 0000                  			bsr.w	DrawBlocks_LR
000085EC 6000                       			bra.s	locj_6FAE
000085EE                            ;===============================================================================
000085EE                            	locj_6F9A:
000085EE 7A00                       			moveq	#0,d5
000085F0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000085F4 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000085F8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000085FC 7C1F                       			moveq	#(512/16)-1,d6
000085FE 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008602                            	locj_6FAE:
00008602 4A12                       			tst.b	(a2)
00008604 6600                       			bne.s	locj_6FB4
00008606 4E75                       			rts
00008608                            ;===============================================================================			
00008608                            	locj_6FB4:
00008608 78F0                       			moveq	#-16,d4
0000860A 7AF0                       			moveq	#-16,d5
0000860C 1012                       			move.b	(a2),d0
0000860E 0200 00A8                  			andi.b	#$A8,d0
00008612 6700                       			beq.s	locj_6FC8
00008614 E208                       			lsr.b	#1,d0
00008616 1480                       			move.b	d0,(a2)
00008618 3A3C 0140                  			move.w	#320,d5
0000861C                            	locj_6FC8:
0000861C 41F9 0000 8546             			lea	(locj_6EF2).l,a0
00008622 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008626 0440 0200                  			subi.w	#$200,d0
0000862A 0240 07F0                  			andi.w	#$7F0,d0
0000862E E848                       			lsr.w	#4,d0
00008630 41F0 0000                  			lea	(a0,d0.w),a0
00008634 6000 0000                  			bra.w	locj_6FEC
00008638                            ;===============================================================================			
00008638                            	locj_6FE4:
00008638 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008640                            	locj_6FEC:
00008640 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008642 2E3C 0080 0000             			move.l	#$800000,d7
00008648                            	locj_6FF4:			
00008648 7000                       			moveq	#0,d0
0000864A 1018                       			move.b	(a0)+,d0
0000864C 0112                       			btst	d0,(a2)
0000864E 6700                       			beq.s	locj_701C
00008650 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008654 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008658 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000865C 6100 0000                  			bsr.w	GetBlockData
00008660 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008664 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008668 6100 0000                  			bsr.w	DrawBlock
0000866C 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008670                            	locj_701C:
00008670 0644 0010                  			addi.w	#16,d4
00008674 51CE FFD2                  			dbf	d6,locj_6FF4
00008678 4212                       			clr.b	(a2)
0000867A 4E75                       			rts			
0000867C                            
0000867C                            
0000867C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000867C                            
0000867C                            ; Don't be fooled by the name: this function's for drawing from left to right
0000867C                            ; when the camera's moving up or down
0000867C                            ; DrawTiles_LR:
0000867C                            DrawBlocks_LR:
0000867C 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
0000867E                            ; DrawTiles_LR_2:
0000867E                            DrawBlocks_LR_2:
0000867E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008684 2200                       		move.l	d0,d1
00008686                            
00008686                            	@loop:
00008686 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000868A 6100 0000                  		bsr.w	GetBlockData
0000868E 2001                       		move.l	d1,d0
00008690 6100 0000                  		bsr.w	DrawBlock
00008694 5801                       		addq.b	#4,d1		; Two tiles ahead
00008696 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
0000869A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000869E 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086A2 51CE FFE2                  		dbf	d6,@loop
000086A6 4E75                       		rts
000086A8                            ; End of function DrawBlocks_LR
000086A8                            
000086A8                            ; DrawTiles_LR_3:
000086A8                            DrawBlocks_LR_3:
000086A8 2E3C 0080 0000             		move.l	#$800000,d7
000086AE 2200                       		move.l	d0,d1
000086B0                            
000086B0                            	@loop:
000086B0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086B4 6100 0000                  		bsr.w	GetBlockData_2
000086B8 2001                       		move.l	d1,d0
000086BA 6100 0000                  		bsr.w	DrawBlock
000086BE 5801                       		addq.b	#4,d1
000086C0 0201 007F                  		andi.b	#$7F,d1
000086C4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086C8 0645 0010                  		addi.w	#16,d5
000086CC 51CE FFE2                  		dbf	d6,@loop
000086D0 4E75                       		rts	
000086D2                            ; End of function DrawBlocks_LR_3
000086D2                            
000086D2                            
000086D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086D2                            
000086D2                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000086D2                            ; when the camera's moving left or right
000086D2                            ; DrawTiles_TB:
000086D2                            DrawBlocks_TB:
000086D2 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
000086D4                            ; DrawTiles_TB_2:
000086D4                            DrawBlocks_TB_2:
000086D4 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086DA 2200                       		move.l	d0,d1
000086DC                            
000086DC                            	@loop:
000086DC 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086E0 6100 0000                  		bsr.w	GetBlockData
000086E4 2001                       		move.l	d1,d0
000086E6 6100 0000                  		bsr.w	DrawBlock
000086EA 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000086EE 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000086F2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086F6 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000086FA 51CE FFE0                  		dbf	d6,@loop
000086FE 4E75                       		rts	
00008700                            ; End of function DrawBlocks_TB_2
00008700                            
00008700                            
00008700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008700                            
00008700                            ; Draws a block's worth of tiles
00008700                            ; Parameters:
00008700                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008700                            ; a1 = Pointer to block
00008700                            ; a5 = Pointer to VDP command port
00008700                            ; a6 = Pointer to VDP data port
00008700                            ; d0 = VRAM command to access plane
00008700                            ; d2 = VRAM plane A/B specifier
00008700                            ; d7 = Plane row delta
00008700                            ; DrawTiles:
00008700                            DrawBlock:
00008700 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008702 4840                       		swap	d0
00008704 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008708 6600                       		bne.s	DrawFlipY
0000870A 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000870E 6600                       		bne.s	DrawFlipX
00008710 2A80                       		move.l	d0,(a5)
00008712 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008714 D087                       		add.l	d7,d0		; Next row
00008716 2A80                       		move.l	d0,(a5)
00008718 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
0000871A 4E75                       		rts	
0000871C                            ; ===========================================================================
0000871C                            
0000871C                            DrawFlipX:
0000871C 2A80                       		move.l	d0,(a5)
0000871E 2819                       		move.l	(a1)+,d4
00008720 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008726 4844                       		swap	d4		; Swap the tiles around
00008728 2C84                       		move.l	d4,(a6)		; Write top two tiles
0000872A D087                       		add.l	d7,d0		; Next row
0000872C 2A80                       		move.l	d0,(a5)
0000872E 2819                       		move.l	(a1)+,d4
00008730 0A84 0800 0800             		eori.l	#$8000800,d4
00008736 4844                       		swap	d4
00008738 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000873A 4E75                       		rts	
0000873C                            ; ===========================================================================
0000873C                            
0000873C                            DrawFlipY:
0000873C 0810 0003                  		btst	#3,(a0)
00008740 6600                       		bne.s	DrawFlipXY
00008742 2A80                       		move.l	d0,(a5)
00008744 2A19                       		move.l	(a1)+,d5
00008746 2819                       		move.l	(a1)+,d4
00008748 0A84 1000 1000             		eori.l	#$10001000,d4
0000874E 2C84                       		move.l	d4,(a6)
00008750 D087                       		add.l	d7,d0
00008752 2A80                       		move.l	d0,(a5)
00008754 0A85 1000 1000             		eori.l	#$10001000,d5
0000875A 2C85                       		move.l	d5,(a6)
0000875C 4E75                       		rts	
0000875E                            ; ===========================================================================
0000875E                            
0000875E                            DrawFlipXY:
0000875E 2A80                       		move.l	d0,(a5)
00008760 2A19                       		move.l	(a1)+,d5
00008762 2819                       		move.l	(a1)+,d4
00008764 0A84 1800 1800             		eori.l	#$18001800,d4
0000876A 4844                       		swap	d4
0000876C 2C84                       		move.l	d4,(a6)
0000876E D087                       		add.l	d7,d0
00008770 2A80                       		move.l	d0,(a5)
00008772 0A85 1800 1800             		eori.l	#$18001800,d5
00008778 4845                       		swap	d5
0000877A 2C85                       		move.l	d5,(a6)
0000877C 4E75                       		rts	
0000877E                            ; End of function DrawBlocks
0000877E                            
0000877E                            ; ===========================================================================
0000877E                            ; unused garbage
0000877E                            
0000877E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000877E                            
0000877E                            ; Gets address of block at a certain coordinate
0000877E                            ; Parameters:
0000877E                            ; a4 = Pointer to level layout
0000877E                            ; d4 = Relative Y coordinate
0000877E                            ; d5 = Relative X coordinate
0000877E                            ; Returns:
0000877E                            ; a0 = Address of block metadata
0000877E                            ; a1 = Address of block
0000877E                            ; DrawBlocks:
0000877E                            GetBlockData:
0000877E DA53                       			add.w	(a3),d5
00008780                            	GetBlockData_2:
00008780 D86B 0004                  			add.w	4(a3),d4
00008784 43F8 B000                  			lea	(v_16x16).w,a1
00008788                            		; Turn Y coordinate into index into level layout
00008788 3604                       		move.w	d4,d3
0000878A E24B                       		lsr.w	#1,d3
0000878C 0243 0380                  		andi.w	#$380,d3
00008790                            		; Turn X coordinate into index into level layout
00008790 E64D                       		lsr.w	#3,d5
00008792 3005                       		move.w	d5,d0
00008794 EA48                       		lsr.w	#5,d0
00008796 0240 007F                  		andi.w	#$7F,d0
0000879A                            		; Get chunk from level layout
0000879A D043                       		add.w	d3,d0
0000879C 76FF                       		moveq	#-1,d3
0000879E 1634 0000                  		move.b	(a4,d0.w),d3
000087A2 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087A4                            		; Turn chunk ID into index into chunk table
000087A4 5303                       		subq.b	#1,d3
000087A6 0243 007F                  		andi.w	#$7F,d3
000087AA EE5B                       		ror.w	#7,d3
000087AC                            		; Turn Y coordinate into index into chunk
000087AC D844                       		add.w	d4,d4
000087AE 0244 01E0                  		andi.w	#$1E0,d4
000087B2                            		; Turn X coordinate into index into chunk
000087B2 0245 001E                  		andi.w	#$1E,d5
000087B6                            		; Get block metadata from chunk
000087B6 D644                       		add.w	d4,d3
000087B8 D645                       		add.w	d5,d3
000087BA 2043                       		movea.l	d3,a0
000087BC 3610                       		move.w	(a0),d3
000087BE                            		; Turn block ID into address
000087BE 0243 03FF                  		andi.w	#$3FF,d3
000087C2 E74B                       		lsl.w	#3,d3
000087C4 D2C3                       		adda.w	d3,a1
000087C6                            
000087C6                            locret_6C1E:
000087C6 4E75                       		rts	
000087C8                            ; End of function GetBlockData
000087C8                            
000087C8                            
000087C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087C8                            
000087C8                            ; Produces a VRAM plane access command from coordinates
000087C8                            ; Parameters:
000087C8                            ; d4 = Relative Y coordinate
000087C8                            ; d5 = Relative X coordinate
000087C8                            ; Returns VDP command in d0
000087C8                            Calc_VRAM_Pos:
000087C8 DA53                       			add.w	(a3),d5
000087CA                            	Calc_VRAM_Pos_2:
000087CA D86B 0004                  			add.w	4(a3),d4
000087CE                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000087CE                            		; Also note that this wraps the value to the size of the plane:
000087CE                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000087CE 0244 00F0                  		andi.w	#$F0,d4
000087D2 0245 01F0                  		andi.w	#$1F0,d5
000087D6                            		; Transform the adjusted coordinates into a VDP command
000087D6 E94C                       		lsl.w	#4,d4
000087D8 E44D                       		lsr.w	#2,d5
000087DA D845                       		add.w	d5,d4
000087DC 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
000087DE 4840                       		swap	d0
000087E0 3004                       		move.w	d4,d0
000087E2 4E75                       		rts	
000087E4                            ; End of function Calc_VRAM_Pos
000087E4                            
000087E4                            
000087E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087E4                            ; not used
000087E4                            
000087E4                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
000087E4                            ; VRAM layout: the only difference is the high bits of the
000087E4                            ; plane's VRAM address, which are 10 instead of 11.
000087E4                            ; Both the foreground and background are at $C000 and $E000
000087E4                            ; respectively, so this one starting at $8000 makes no sense.
000087E4                            ; sub_6C3C:
000087E4                            Calc_VRAM_Pos_Unknown:
000087E4 D86B 0004                  		add.w	4(a3),d4
000087E8 DA53                       		add.w	(a3),d5
000087EA 0244 00F0                  		andi.w	#$F0,d4
000087EE 0245 01F0                  		andi.w	#$1F0,d5
000087F2 E94C                       		lsl.w	#4,d4
000087F4 E44D                       		lsr.w	#2,d5
000087F6 D845                       		add.w	d5,d4
000087F8 7002                       		moveq	#2,d0
000087FA 4840                       		swap	d0
000087FC 3004                       		move.w	d4,d0
000087FE 4E75                       		rts	
00008800                            ; End of function Calc_VRAM_Pos_Unknown
00008800                            
00008800                            ; ---------------------------------------------------------------------------
00008800                            ; Subroutine to	load tiles as soon as the level	appears
00008800                            ; ---------------------------------------------------------------------------
00008800                            
00008800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008800                            
00008800                            
00008800                            LoadTilesFromStart:
00008800 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008806 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000880C 47F8 F700                  		lea	(v_screenposx).w,a3
00008810 49F8 A400                  		lea	(v_lvllayout).w,a4
00008814 343C 4000                  		move.w	#$4000,d2
00008818 6100                       		bsr.s	DrawChunks
0000881A 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000881E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008822 343C 6000                  		move.w	#$6000,d2
00008826 4A38 FE10                  			tst.b	(v_zone).w
0000882A 6700 0000                  			beq.w	Draw_GHz_Bg
0000882E 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008834 6700 0000                  			beq.w	Draw_Mz_Bg
00008838 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
0000883E 6700 0000                  			beq.w	Draw_SBz_Bg
00008842 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008848 6700 0000                  			beq.w	Draw_GHz_Bg
0000884C                            ; End of function LoadTilesFromStart
0000884C                            
0000884C                            
0000884C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000884C                            
0000884C                            
0000884C                            DrawChunks:
0000884C 78F0                       		moveq	#-16,d4
0000884E 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008850                            
00008850                            	@loop:
00008850 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008854 7A00                       		moveq	#0,d5
00008856 3204                       		move.w	d4,d1
00008858 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000885C 3801                       		move.w	d1,d4
0000885E 7A00                       		moveq	#0,d5
00008860 7C1F                       		moveq	#(512/16)-1,d6
00008862 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008866 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000886A 0644 0010                  		addi.w	#16,d4
0000886E 51CE FFE0                  		dbf	d6,@loop
00008872 4E75                       		rts	
00008874                            ; End of function DrawChunks
00008874                            
00008874                            	Draw_GHz_Bg:
00008874 7800                       			moveq	#0,d4
00008876 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008878                            	locj_7224:			
00008878 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000887C 41F9 0000 0000             			lea	(locj_724a),a0
00008882 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008886 D044                       			add.w	d4,d0
00008888 0240 00F0                  			andi.w	#$F0,d0
0000888C 6100 0000                  			bsr.w	locj_72Ba
00008890 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008894 0644 0010                  			addi.w	#16,d4
00008898 51CE FFDE                  			dbf	d6,locj_7224
0000889C 4E75                       			rts
0000889E                            	locj_724a:
0000889E 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088AE                            ;-------------------------------------------------------------------------------
000088AE                            	Draw_Mz_Bg:;locj_725a:
000088AE 78F0                       			moveq	#-16,d4
000088B0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088B2                            	locj_725E:			
000088B2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088B6 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088BA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088BE 0440 0200                  			subi.w	#$200,d0
000088C2 D044                       			add.w	d4,d0
000088C4 0240 07F0                  			andi.w	#$7F0,d0
000088C8 6100 0000                  			bsr.w	locj_72Ba
000088CC 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088D0 0644 0010                  			addi.w	#16,d4
000088D4 51CE FFDC                  			dbf	d6,locj_725E
000088D8 4E75                       			rts
000088DA                            ;-------------------------------------------------------------------------------
000088DA                            	Draw_SBz_Bg:;locj_7288:
000088DA 78F0                       			moveq	#-16,d4
000088DC 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088DE                            	locj_728C:			
000088DE 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088E2 41FA FB65                  			lea	(locj_6DF4+1),a0
000088E6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088EA D044                       			add.w	d4,d0
000088EC 0240 01F0                  			andi.w	#$1F0,d0
000088F0 6100 0000                  			bsr.w	locj_72Ba
000088F4 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088F8 0644 0010                  			addi.w	#16,d4
000088FC 51CE FFE0                  			dbf	d6,locj_728C
00008900 4E75                       			rts
00008902                            ;-------------------------------------------------------------------------------
00008902                            	locj_72B2:
00008902 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
0000890A                            	locj_72Ba:
0000890A E848                       			lsr.w	#4,d0
0000890C 1030 0000                  			move.b	(a0,d0.w),d0
00008910 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008914 6700                       			beq.s	locj_72da
00008916 7AF0                       			moveq	#-16,d5
00008918 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000891C 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008920 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008924 6100 FD56                  			bsr.w	DrawBlocks_LR
00008928 6000                       			bra.s	locj_72EE
0000892A                            	locj_72da:
0000892A 7A00                       			moveq	#0,d5
0000892C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008930 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008934 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008938 7C1F                       			moveq	#(512/16)-1,d6
0000893A 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
0000893E                            	locj_72EE:
0000893E 4E75                       			rts
00008940                            
00008940                            ; ---------------------------------------------------------------------------
00008940                            ; Subroutine to load basic level data
00008940                            ; ---------------------------------------------------------------------------
00008940                            
00008940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008940                            
00008940                            
00008940                            LevelDataLoad:
00008940 7000                       		moveq	#0,d0
00008942 1038 FE10                  		move.b	(v_zone).w,d0
00008946 E948                       		lsl.w	#4,d0
00008948 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000894E 45F2 0000                  		lea	(a2,d0.w),a2
00008952 2F0A                       		move.l	a2,-(sp)
00008954 588A                       		addq.l	#4,a2
00008956 205A                       		movea.l	(a2)+,a0
00008958 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000895C 303C 0000                  		move.w	#0,d0
00008960 6100 8F26                  		bsr.w	EniDec
00008964 205A                       		movea.l	(a2)+,a0
00008966 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000896C 6100 9098                  		bsr.w	KosDec
00008970 6100 0000                  		bsr.w	LevelLayoutLoad
00008974 301A                       		move.w	(a2)+,d0
00008976 3012                       		move.w	(a2),d0
00008978 0240 00FF                  		andi.w	#$FF,d0
0000897C 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008982 6600                       		bne.s	@notSBZ3	; if not, branch
00008984 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008986                            
00008986                            	@notSBZ3:
00008986 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000898C 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000898E 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008994 6600                       		bne.s	@normalpal	; if not, branch
00008996                            
00008996                            	@isSBZorFZ:
00008996 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008998                            
00008998                            	@normalpal:
00008998 6100 9A92                  		bsr.w	PalLoad1	; load palette (based on d0)
0000899C 245F                       		movea.l	(sp)+,a2
0000899E 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089A0 7000                       		moveq	#0,d0
000089A2 1012                       		move.b	(a2),d0
000089A4 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089A6 6100 8D42                  		bsr.w	AddPLC		; load pattern load cues
000089AA                            
000089AA                            	@skipPLC:
000089AA 4E75                       		rts	
000089AC                            ; End of function LevelDataLoad
000089AC                            
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            ; Level	layout loading subroutine
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            
000089AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089AC                            
000089AC                            
000089AC                            LevelLayoutLoad:
000089AC 47F8 A400                  		lea	(v_lvllayout).w,a3
000089B0 323C 01FF                  		move.w	#$1FF,d1
000089B4 7000                       		moveq	#0,d0
000089B6                            
000089B6                            LevLoad_ClrRam:
000089B6 26C0                       		move.l	d0,(a3)+
000089B8 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089BC                            
000089BC 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089C0 7200                       		moveq	#0,d1
000089C2 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000089C6 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000089CA 7202                       		moveq	#2,d1
000089CC                            ; End of function LevelLayoutLoad
000089CC                            
000089CC                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000089CC                            
000089CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089CC                            
000089CC                            
000089CC                            LevelLayoutLoad2:
000089CC 3038 FE10                  		move.w	(v_zone).w,d0
000089D0 ED08                       		lsl.b	#6,d0
000089D2 EA48                       		lsr.w	#5,d0
000089D4 3400                       		move.w	d0,d2
000089D6 D040                       		add.w	d0,d0
000089D8 D042                       		add.w	d2,d0
000089DA D041                       		add.w	d1,d0
000089DC 43F9 0000 0000             		lea	(Level_Index).l,a1
000089E2 3031 0000                  		move.w	(a1,d0.w),d0
000089E6 43F1 0000                  		lea	(a1,d0.w),a1
000089EA 7200                       		moveq	#0,d1
000089EC 3401                       		move.w	d1,d2
000089EE 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000089F0 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000089F2                            
000089F2                            LevLoad_NumRows:
000089F2 3001                       		move.w	d1,d0
000089F4 204B                       		movea.l	a3,a0
000089F6                            
000089F6                            LevLoad_Row:
000089F6 10D9                       		move.b	(a1)+,(a0)+
000089F8 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000089FC 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A00 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A04 4E75                       		rts	
00008A06                            ; End of function LevelLayoutLoad2
00008A06                            
00008A06                            		include	"_inc\DynamicLevelEvents.asm"
00008A06                            ; ---------------------------------------------------------------------------
00008A06                            ; Dynamic level events
00008A06                            ; ---------------------------------------------------------------------------
00008A06                            
00008A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A06                            
00008A06                            
00008A06                            DynamicLevelEvents:
00008A06 7000                       		moveq	#0,d0
00008A08 1038 FE10                  		move.b	(v_zone).w,d0
00008A0C D040                       		add.w	d0,d0
00008A0E 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A12 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A16 7202                       		moveq	#2,d1
00008A18 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A1C 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A20 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A22 6400                       		bcc.s	loc_6DAC
00008A24                            
00008A24 4441                       		neg.w	d1
00008A26 3038 F704                  		move.w	(v_screenposy).w,d0
00008A2A B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A2E 6300                       		bls.s	loc_6DA0
00008A30 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A34 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A3A                            
00008A3A                            loc_6DA0:
00008A3A D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A3E 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A44                            
00008A44                            DLE_NoChg:
00008A44 4E75                       		rts	
00008A46                            ; ===========================================================================
00008A46                            
00008A46                            loc_6DAC:
00008A46 3038 F704                  		move.w	(v_screenposy).w,d0
00008A4A 5040                       		addq.w	#8,d0
00008A4C B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A50 6500                       		bcs.s	loc_6DC4
00008A52 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A58 6700                       		beq.s	loc_6DC4
00008A5A D241                       		add.w	d1,d1
00008A5C D241                       		add.w	d1,d1
00008A5E                            
00008A5E                            loc_6DC4:
00008A5E D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A62 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A68 4E75                       		rts	
00008A6A                            ; End of function DynamicLevelEvents
00008A6A                            
00008A6A                            ; ===========================================================================
00008A6A                            ; ---------------------------------------------------------------------------
00008A6A                            ; Offset index for dynamic level events
00008A6A                            ; ---------------------------------------------------------------------------
00008A6A 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008A6E 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008A72 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008A76 0000                       		dc.w DLE_Ending-DLE_Index
00008A78                            ; ===========================================================================
00008A78                            ; ---------------------------------------------------------------------------
00008A78                            ; Green	Hill Zone dynamic level events
00008A78                            ; ---------------------------------------------------------------------------
00008A78                            
00008A78                            DLE_GHZ:
00008A78 7000                       		moveq	#0,d0
00008A7A 1038 FE11                  		move.b	(v_act).w,d0
00008A7E D040                       		add.w	d0,d0
00008A80 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008A84 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008A88                            ; ===========================================================================
00008A88 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008A8A 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008A8C 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008A8E                            ; ===========================================================================
00008A8E                            
00008A8E                            DLE_GHZ1:
00008A8E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008A94 6600                       		bne.s	gohere
00008A96 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008A9C 4E75                       		rts
00008A9E                            gohere:
00008A9E 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AA4 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008AAA 6500                       		bcs.s	locret_6E08	; if not, branch
00008AAC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008AB2                            
00008AB2                            locret_6E08:
00008AB2 4E75                       		rts	
00008AB4                            ; ===========================================================================
00008AB4                            
00008AB4                            DLE_GHZ2:
00008AB4 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008ABA 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AC0 6500                       		bcs.s	locret_6E3A
00008AC2 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008AC8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008ACE 6500                       		bcs.s	locret_6E3A
00008AD0 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008AD6 6500                       		bcs.s	loc_6E9A
00008AD8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008ADE 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008AE4 6400                       		bcc.s	loc_6E8F
00008AE6 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008AEC 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008AF2                            
00008AF2                            loc_6E8F:
00008AF2 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008AF8 6400                       		bcc.s	loc_6E9A
00008AFA                            
00008AFA                            locret_6E3A:
00008AFA 4E75                       		rts	
00008AFC                            ; ===========================================================================
00008AFC                            
00008AFC                            loc_6E9A:
00008AFC 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B02 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B06 4E75                       		rts		
00008B08                            ; ===========================================================================
00008B08                            
00008B08                            DLE_GHZ3:
00008B08 7000                       		moveq	#0,d0
00008B0A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B0E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B12 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B16                            ; ===========================================================================
00008B16 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B18 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B1A 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B1C                            ; ===========================================================================
00008B1C                            
00008B1C                            DLE_GHZ3main:
00008B1C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B22 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B28 6500                       		bcs.s	locret_6E96
00008B2A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B30 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B36 6500                       		bcs.s	locret_6E96
00008B38 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B3E 6500                       		bcs.s	loc_6E98
00008B40 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B46 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B4C 6400                       		bcc.s	loc_6E8E
00008B4E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B54 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B5A                            
00008B5A                            loc_6E8E:
00008B5A 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B60 6400                       		bcc.s	loc_6E98
00008B62                            
00008B62                            locret_6E96:
00008B62 4E75                       		rts	
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            loc_6E98:
00008B64 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B6A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B6E 4E75                       		rts	
00008B70                            ; ===========================================================================
00008B70                            
00008B70                            DLE_GHZ3boss:
00008B70 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B76 6400                       		bcc.s	loc_6EB0
00008B78 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008B7C                            
00008B7C                            loc_6EB0:
00008B7C 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008B82 6500                       		bcs.s	locret_6EE8
00008B84 6100 0000                  		bsr.w	FindFreeObj
00008B88 6600                       		bne.s	loc_6ED0
00008B8A 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008B8E 337C 1460 0008             		move.w	#$1460,obX(a1)
00008B94 337C 0280 000C             		move.w	#$280,obY(a1)
00008B9A                            
00008B9A                            loc_6ED0:
00008BA2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BA8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BAC 7000                       		moveq	#plcid_Egg,d0
00008BAE 6000 8B3A                  		bra.w	AddPLC		; load boss patterns
00008BB2                            		
00008BB2                            ; ===========================================================================
00008BB2                            
00008BB2                            locret_6EE8:
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            DLE_GHZ3end:
00008BB4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BBA 337C 0280 000C             		move.w	#$280,obY(a1)
00008BC0 4E75                       		rts	
00008BC2                            ; ===========================================================================
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            ; Labyrinth Zone dynamic level events
00008BC2                            ; ---------------------------------------------------------------------------
00008BC2                            
00008BC2                            DLE_LZ:
00008BC2 7000                       		moveq	#0,d0
00008BC4 1038 FE11                  		move.b	(v_act).w,d0
00008BC8 D040                       		add.w	d0,d0
00008BCA 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008BCE 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008BD2                            ; ===========================================================================
00008BD2 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008BD4 0000                       		dc.w DLE_LZ12-DLE_LZx
00008BD6 0000                       		dc.w DLE_LZ3-DLE_LZx
00008BD8 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008BDA                            ; ===========================================================================
00008BDA                            
00008BDA                            DLE_LZ12:
00008BDA 4E75                       		rts	
00008BDC                            ; ===========================================================================
00008BDC                            
00008BDC                            DLE_LZ3:
00008BDC 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008BE0 6700                       		beq.s	loc_6F28	; if not, branch
00008BE2 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008BE6 0C11 0007                  		cmpi.b	#7,(a1)
00008BEA 6700                       		beq.s	loc_6F28
00008BEC 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008BF8                            
00008BF8                            loc_6F28:
00008BF8 4A38 F742                  		tst.b	(v_dle_routine).w
00008BFC 6600                       		bne.s	locret_6F64
00008BFE 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C04 6500                       		bcs.s	locret_6F62
00008C06 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C0C 6400                       		bcc.s	locret_6F62
00008C0E 6100 0000                  		bsr.w	FindFreeObj
00008C12 6600                       		bne.s	loc_6F4A
00008C14 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C18                            
00008C18                            loc_6F4A:
00008C20 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C26 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C2A 7000                       		moveq	#plcid_Boss,d0
00008C2C 6000 8ABC                  		bra.w	AddPLC		; load boss patterns
00008C30                            ; ===========================================================================
00008C30                            
00008C30                            locret_6F62:
00008C30 4E75                       		rts	
00008C32                            ; ===========================================================================
00008C32                            
00008C32                            locret_6F64:
00008C32 4E75                       		rts	
00008C34                            ; ===========================================================================
00008C34                            
00008C34                            DLE_SBZ3:
00008C34 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C3A 6500                       		bcs.s	locret_6F8C
00008C3C 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C42 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C44 4238 FE30                  		clr.b	(v_lastlamp).w
00008C48 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C4E 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C54 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C5A                            
00008C5A                            locret_6F8C:
00008C5A 4E75                       		rts	
00008C5C                            ; ===========================================================================
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            ; Marble Zone dynamic level events
00008C5C                            ; ---------------------------------------------------------------------------
00008C5C                            
00008C5C                            DLE_MZ:
00008C5C 7000                       		moveq	#0,d0
00008C5E 1038 FE11                  		move.b	(v_act).w,d0
00008C62 D040                       		add.w	d0,d0
00008C64 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008C68 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008C6C                            ; ===========================================================================
00008C6C 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008C6E 0000                       		dc.w DLE_MZ2-DLE_MZx
00008C70 0000                       		dc.w DLE_MZ3-DLE_MZx
00008C72                            ; ===========================================================================
00008C72                            
00008C72                            DLE_MZ1:
00008C72 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C78 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008C7E 6500                       		bcs.s	locret_6FE8
00008C80 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008C86                            
00008C86                            locret_6FE8:
00008C86 4E75                       		rts	
00008C88                            
00008C88                            ; ===========================================================================
00008C88                            
00008C88                            DLE_MZ2:
00008C88 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008C8E 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008C94 6500                       		bcs.s	locret_6FE9
00008C96 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008C9C                            		
00008C9C                            locret_6FE9:
00008C9C 4E75                       		rts	
00008C9E                            ; ===========================================================================
00008C9E                            
00008C9E                            DLE_MZ3:
00008C9E 7000                       		moveq	#0,d0
00008CA0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CA4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CA8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CAC                            ; ===========================================================================
00008CAC 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CAE 0000                       		dc.w DLE_MZ3end-off_7098
00008CB0                            ; ===========================================================================
00008CB0                            
00008CB0                            DLE_MZ3boss:
00008CB0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CB6 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CBC 6500                       		bcs.s	locret_70E8
00008CBE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CC4 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008CCA 6500                       		bcs.s	locret_70E8
00008CCC 6100 0000                  		bsr.w	FindFreeObj
00008CD0 6600                       		bne.s	loc_70D0
00008CD2 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008CD6 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008CDC 337C 022C 000C             		move.w	#$22C,obY(a1)
00008CE2                            
00008CE2                            loc_70D0:
00008CEA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CF0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CF4 7000                       		moveq	#plcid_Boss,d0
00008CF6 6000 89F2                  		bra.w	AddPLC		; load boss patterns
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            locret_70E8:
00008CFA 4E75                       		rts	
00008CFC                            ; ===========================================================================
00008CFC                            
00008CFC                            DLE_MZ3end:
00008CFC 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D02 4E75                       		rts	
00008D04                            		
00008D04                            ; ===========================================================================
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            ; Star Light Zone dynamic level events
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            
00008D04                            DLE_SLZ:
00008D04 7000                       		moveq	#0,d0
00008D06 1038 FE11                  		move.b	(v_act).w,d0
00008D0A D040                       		add.w	d0,d0
00008D0C 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D10 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D14                            ; ===========================================================================
00008D14 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D16 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D18 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D1A                            ; ===========================================================================
00008D1A                            
00008D1A                            DLE_SLZ12:
00008D1A 4E75                       		rts	
00008D1C                            ; ===========================================================================
00008D1C                            
00008D1C                            DLE_SLZ3:
00008D1C 7000                       		moveq	#0,d0
00008D1E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D22 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D26 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D2A                            ; ===========================================================================
00008D2A 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D2C 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D2E 0000                       		dc.w DLE_SLZ3end-off_7118
00008D30                            ; ===========================================================================
00008D30                            
00008D30                            DLE_SLZ3main:
00008D30 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D36 6500                       		bcs.s	locret_7130
00008D38 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D3E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D42                            
00008D42                            locret_7130:
00008D42 4E75                       		rts	
00008D44                            ; ===========================================================================
00008D44                            
00008D44                            DLE_SLZ3boss:
00008D44 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D4A 6500                       		bcs.s	locret_715C
00008D4C 6100 0000                  		bsr.w	FindFreeObj
00008D50 6600                       		bne.s	loc_7144
00008D52 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D56                            
00008D56                            loc_7144:
00008D5E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D64 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D68 7000                       		moveq	#plcid_Boss,d0
00008D6A 6000 897E                  		bra.w	AddPLC		; load boss patterns
00008D6E                            ; ===========================================================================
00008D6E                            
00008D6E                            locret_715C:
00008D6E 4E75                       		rts	
00008D70                            ; ===========================================================================
00008D70                            
00008D70                            DLE_SLZ3end:
00008D70 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D76 4E75                       		rts
00008D78 4E75                       		rts
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Spring Yard Zone dynamic level events
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            DLE_SYZ:
00008D7A 7000                       		moveq	#0,d0
00008D7C 1038 FE11                  		move.b	(v_act).w,d0
00008D80 D040                       		add.w	d0,d0
00008D82 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008D86 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008D8A                            ; ===========================================================================
00008D8A 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008D8C 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008D8E 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008D90                            ; ===========================================================================
00008D90                            
00008D90                            DLE_SYZ1:
00008D90 4E75                       		rts	
00008D92                            ; ===========================================================================
00008D92                            
00008D92                            DLE_SYZ2:
00008D92 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D98 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008D9E 6500                       		bcs.s	locret_71A2
00008DA0 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DA6 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DAC 6500                       		bcs.s	locret_71A2
00008DAE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DB4                            
00008DB4                            locret_71A2:
00008DB4 4E75                       		rts	
00008DB6                            ; ===========================================================================
00008DB6                            
00008DB6                            DLE_SYZ3:
00008DB6 7000                       		moveq	#0,d0
00008DB8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DBC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DC0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008DC4                            ; ===========================================================================
00008DC4 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008DC6 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008DC8 0000                       		dc.w DLE_SYZ3end-off_71B2
00008DCA                            ; ===========================================================================
00008DCA                            
00008DCA                            DLE_SYZ3main:
00008DCA 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008DD0 6500                       		bcs.s	locret_71CE
00008DD2 6100 0000                  		bsr.w	FindFreeObj
00008DD6 6600                       		bne.s	locret_71CE
00008DD8 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008DDC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DE0                            
00008DE0                            locret_71CE:
00008DE0 4E75                       		rts	
00008DE2                            ; ===========================================================================
00008DE2                            
00008DE2                            DLE_SYZ3boss:
00008DE2 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008DE8 6500                       		bcs.s	locret_7200
00008DEA 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008DF0 6100 0000                  		bsr.w	FindFreeObj
00008DF4 6600                       		bne.s	loc_71EC
00008DF6 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008DFA 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DFE                            
00008DFE                            loc_71EC:
00008E06 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E0C 7000                       		moveq	#plcid_Boss,d0
00008E0E 6000 88DA                  		bra.w	AddPLC		; load boss patterns
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            locret_7200:
00008E12 4E75                       		rts	
00008E14                            ; ===========================================================================
00008E14                            
00008E14                            DLE_SYZ3end:
00008E14 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E1A 4E75                       		rts	
00008E1C                            ; ===========================================================================
00008E1C                            ; ---------------------------------------------------------------------------
00008E1C                            ; Scrap	Brain Zone dynamic level events
00008E1C                            ; ---------------------------------------------------------------------------
00008E1C                            
00008E1C                            DLE_SBZ:
00008E1C 7000                       		moveq	#0,d0
00008E1E 1038 FE11                  		move.b	(v_act).w,d0
00008E22 D040                       		add.w	d0,d0
00008E24 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E28 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E2C                            ; ===========================================================================
00008E2C 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E2E 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E30 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E32                            ; ===========================================================================
00008E32                            
00008E32                            DLE_SBZ1:
00008E32 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E38 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E3E 6500                       		bcs.s	locret_7242
00008E40 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E46 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E4C 6500                       		bcs.s	locret_7242
00008E4E 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E54                            
00008E54                            locret_7242:
00008E54 4E75                       		rts	
00008E56                            ; ===========================================================================
00008E56                            
00008E56                            DLE_SBZ2:
00008E56 7000                       		moveq	#0,d0
00008E58 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E5C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E60 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008E64                            ; ===========================================================================
00008E64 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008E66 0000                       		dc.w DLE_SBZ2boss-off_7252
00008E68 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008E6A 0000                       		dc.w DLE_SBZ2end-off_7252
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            DLE_SBZ2main:
00008E6C 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008E72 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008E78 6500                       		bcs.s	locret_727A
00008E7A 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008E80 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008E86 6500                       		bcs.s	locret_727A
00008E88 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E8C                            
00008E8C                            locret_727A:
00008E8C 4E75                       		rts	
00008E8E                            ; ===========================================================================
00008E8E                            
00008E8E                            DLE_SBZ2boss:
00008E8E 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008E94 6500                       		bcs.s	locret_7298
00008E96 6100 0000                  		bsr.w	FindFreeObj
00008E9A 6600                       		bne.s	locret_7298
00008E9C 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008EA0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EA4 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008EA6 6000 8842                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008EAA                            ; ===========================================================================
00008EAA                            
00008EAA                            locret_7298:
00008EAA 4E75                       		rts	
00008EAC                            ; ===========================================================================
00008EAC                            
00008EAC                            DLE_SBZ2boss2:
00008EAC 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EB2 6500                       		bcs.s	loc_72B6
00008EB4 6100 0000                  		bsr.w	FindFreeObj
00008EB8 6600                       		bne.s	loc_72B0
00008EBA 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EBE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EC2                            
00008EC2                            loc_72B0:
00008EC2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EC8                            
00008EC8                            loc_72B6:
00008EC8 6000                       		bra.s	loc_72C2
00008ECA                            ; ===========================================================================
00008ECA                            
00008ECA                            DLE_SBZ2end:
00008ECA 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008ED0 6500                       		bcs.s	loc_72C2
00008ED2 4E75                       		rts	
00008ED4                            ; ===========================================================================
00008ED4                            
00008ED4                            loc_72C2:
00008ED4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008EDA 4E75                       		rts	
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            DLE_FZ:
00008EDC 7000                       		moveq	#0,d0
00008EDE 1038 F742                  		move.b	(v_dle_routine).w,d0
00008EE2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008EE6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008EEA                            ; ===========================================================================
00008EEA 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008EEE 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008EF2 0000                       		dc.w DLE_FZend2-off_72D8
00008EF4                            ; ===========================================================================
00008EF4                            
00008EF4                            DLE_FZmain:
00008EF4 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008EFA 6500                       		bcs.s	loc_72F4
00008EFC 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F00 7000                       		moveq	#plcid_FZBoss,d0
00008F02 6100 87E6                  		bsr.w	AddPLC		; load FZ boss patterns
00008F06                            
00008F06                            loc_72F4:
00008F06 60CC                       		bra.s	loc_72C2
00008F08                            ; ===========================================================================
00008F08                            
00008F08                            DLE_FZboss:
00008F08 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F0E 6500                       		bcs.s	loc_7312
00008F10 6100 0000                  		bsr.w	FindFreeObj
00008F14 6600                       		bne.s	loc_7312
00008F16 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F1A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F1E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F24                            
00008F24                            loc_7312:
00008F24 60AE                       		bra.s	loc_72C2
00008F26                            ; ===========================================================================
00008F26                            
00008F26                            DLE_FZend:
00008F26 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F2C 6500                       		bcs.s	loc_7320
00008F2E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F32                            
00008F32                            loc_7320:
00008F32 60A0                       		bra.s	loc_72C2
00008F34                            ; ===========================================================================
00008F34                            
00008F34                            locret_7322:
00008F34 4E75                       		rts	
00008F36                            ; ===========================================================================
00008F36                            
00008F36                            DLE_FZend2:
00008F36 609C                       		bra.s	loc_72C2
00008F38                            ; ===========================================================================
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            ; Ending sequence dynamic level events (empty)
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            
00008F38                            DLE_Ending:
00008F38 4E75                       		rts	
00008F38 4E75                       		rts	
00008F3A                            
00008F3A                            		include	"_incObj\11 Bridge (part 1).asm"
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            ; Object 11 - GHZ bridge
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            
00008F3A                            Bridge:
00008F3A 7000                       		moveq	#0,d0
00008F3C 1028 0024                  		move.b	obRoutine(a0),d0
00008F40 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F44 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F48                            ; ===========================================================================
00008F48 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F4C 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F50 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F54                            ; ===========================================================================
00008F54                            
00008F54                            Bri_Main:	; Routine 0
00008F54 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F58 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F60 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008F66 117C 0004 0001             		move.b	#4,obRender(a0)
00008F6C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008F72 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008F78 3428 000C                  		move.w	obY(a0),d2
00008F7C 3628 0008                  		move.w	obX(a0),d3
00008F80 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008F82 45E8 0028                  		lea	obSubtype(a0),a2
00008F86 7200                       		moveq	#0,d1
00008F88 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008F8A 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008F8E 3001                       		move.w	d1,d0
00008F90 E248                       		lsr.w	#1,d0
00008F92 E948                       		lsl.w	#4,d0
00008F94 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008F96 5501                       		subq.b	#2,d1
00008F98 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008F9A                            
00008F9A                            @buildloop:
00008F9A 6100 0000                  		bsr.w	FindFreeObj
00008F9E 6600                       		bne.s	Bri_Action
00008FA0 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FA4 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FA8 6600                       		bne.s	@notleftmost	; if not, branch
00008FAA                            
00008FAA 0643 0010                  		addi.w	#$10,d3
00008FAE 3142 000C                  		move.w	d2,obY(a0)
00008FB2 3142 003C                  		move.w	d2,$3C(a0)
00008FB6 3A08                       		move.w	a0,d5
00008FB8 0445 D000                  		subi.w	#$D000,d5
00008FBC EC4D                       		lsr.w	#6,d5
00008FBE 0245 007F                  		andi.w	#$7F,d5
00008FC2 14C5                       		move.b	d5,(a2)+
00008FC4 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FC8                            
00008FC8                            	@notleftmost:
00008FC8 3A09                       		move.w	a1,d5
00008FCA 0445 D000                  		subi.w	#$D000,d5
00008FCE EC4D                       		lsr.w	#6,d5
00008FD0 0245 007F                  		andi.w	#$7F,d5
00008FD4 14C5                       		move.b	d5,(a2)+
00008FD6 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008FDC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008FDE 3342 000C                  		move.w	d2,obY(a1)
00008FE2 3342 003C                  		move.w	d2,$3C(a1)
00008FE6 3343 0008                  		move.w	d3,obX(a1)
00008FEA 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008FF2 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008FF8 137C 0004 0001             		move.b	#4,obRender(a1)
00008FFE 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009004 137C 0008 0014             		move.b	#8,obActWid(a1)
0000900A 0643 0010                  		addi.w	#$10,d3
0000900E 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00009012                            
00009012                            Bri_Action:	; Routine 2
00009012 6100                       		bsr.s	Bri_Solid
00009014 4A28 003E                  		tst.b	$3E(a0)
00009018 6700                       		beq.s	@display
0000901A 5928 003E                  		subq.b	#4,$3E(a0)
0000901E 6100 0000                  		bsr.w	Bri_Bend
00009022                            
00009022                            	@display:
00009022 6100 0000                  		bsr.w	DisplaySprite
00009026 6000 0000                  		bra.w	Bri_ChkDel
0000902A                            
0000902A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000902A                            
0000902A                            
0000902A                            Bri_Solid:
0000902A 7200                       		moveq	#0,d1
0000902C 1228 0028                  		move.b	obSubtype(a0),d1
00009030 E749                       		lsl.w	#3,d1
00009032 3401                       		move.w	d1,d2
00009034 5041                       		addq.w	#8,d1
00009036 D442                       		add.w	d2,d2
00009038 43F8 D000                  		lea	(v_player).w,a1
0000903C 4A69 0012                  		tst.w	obVelY(a1)
00009040 6B00 0000                  		bmi.w	Plat_Exit
00009044 3029 0008                  		move.w	obX(a1),d0
00009048 9068 0008                  		sub.w	obX(a0),d0
0000904C D041                       		add.w	d1,d0
0000904E 6B00 0000                  		bmi.w	Plat_Exit
00009052 B042                       		cmp.w	d2,d0
00009054 6400 0000                  		bcc.w	Plat_Exit
00009058 6000                       		bra.s	Plat_NoXCheck
0000905A                            ; End of function Bri_Solid
0000905A                            ; End of function Bri_Solid
0000905A                            
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            ; Platform subroutine
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            
0000905A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000905A                            
0000905A                            PlatformObject:
0000905A 43F8 D000                  		lea	(v_player).w,a1
0000905E 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00009062 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00009066                            
00009066                            ;		perform x-axis range check
00009066 3029 0008                  		move.w	obX(a1),d0
0000906A 9068 0008                  		sub.w	obX(a0),d0
0000906E D041                       		add.w	d1,d0
00009070 6B00 0000                  		bmi.w	Plat_Exit
00009074 D241                       		add.w	d1,d1
00009076 B041                       		cmp.w	d1,d0
00009078 6400 0000                  		bhs.w	Plat_Exit
0000907C                            
0000907C                            	Plat_NoXCheck:
0000907C 3028 000C                  		move.w	obY(a0),d0
00009080 5140                       		subq.w	#8,d0
00009082                            
00009082                            Platform3:
00009082                            ;		perform y-axis range check
00009082 3429 000C                  		move.w	obY(a1),d2
00009086 1229 0016                  		move.b	obHeight(a1),d1
0000908A 4881                       		ext.w	d1
0000908C D242                       		add.w	d2,d1
0000908E 5841                       		addq.w	#4,d1
00009090 9041                       		sub.w	d1,d0
00009092 6200 0000                  		bhi.w	Plat_Exit
00009096 0C40 FFF0                  		cmpi.w	#-$10,d0
0000909A 6500 0000                  		blo.w	Plat_Exit
0000909E                            
0000909E 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090A2 6B00 0000                  		bmi.w	Plat_Exit
000090A6 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090AC 6400 0000                  		bhs.w	Plat_Exit
000090B0 D440                       		add.w	d0,d2
000090B2 5642                       		addq.w	#3,d2
000090B4 3342 000C                  		move.w	d2,obY(a1)
000090B8 5428 0024                  		addq.b	#2,obRoutine(a0)
000090BC                            
000090BC                            loc_74AE:
000090BC 0829 0003 0022             		btst	#3,obStatus(a1)
000090C2 6700                       		beq.s	loc_74DC
000090C4 7000                       		moveq	#0,d0
000090C6 1029 003D                  		move.b	$3D(a1),d0
000090CA ED48                       		lsl.w	#6,d0
000090CC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000090D2 2440                       		movea.l	d0,a2
000090D4 08AA 0003 0022             		bclr	#3,obStatus(a2)
000090DA 422A 0025                  		clr.b	ob2ndRout(a2)
000090DE 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
000090E4 6600                       		bne.s	loc_74DC
000090E6 552A 0024                  		subq.b	#2,obRoutine(a2)
000090EA                            
000090EA                            loc_74DC:
000090EA 3008                       		move.w	a0,d0
000090EC 0440 D000                  		subi.w	#-$3000,d0
000090F0 EC48                       		lsr.w	#6,d0
000090F2 0240 007F                  		andi.w	#$7F,d0
000090F6 1340 003D                  		move.b	d0,$3D(a1)
000090FA 137C 0000 0026             		move.b	#0,obAngle(a1)
00009100 337C 0000 0012             		move.w	#0,obVelY(a1)
00009106 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000910C 0829 0001 0022             		btst	#1,obStatus(a1)
00009112 6700                       		beq.s	loc_7512
00009114 2F08                       		move.l	a0,-(sp)
00009116 2049                       		movea.l	a1,a0
00009118 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
0000911E 205F                       		movea.l	(sp)+,a0
00009120                            
00009120                            loc_7512:
00009120 08E9 0003 0022             		bset	#3,obStatus(a1)
00009126 08E8 0003 0022             		bset	#3,obStatus(a0)
0000912C                            
0000912C                            Plat_Exit:
0000912C 4E75                       		rts	
0000912E                            ; End of function PlatformObject
0000912E                            
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000912E                            ; ---------------------------------------------------------------------------
0000912E                            
0000912E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912E                            
0000912E                            
0000912E                            SlopeObject:
0000912E 43F8 D000                  		lea	(v_player).w,a1
00009132 4A69 0012                  		tst.w	obVelY(a1)
00009136 6B00 FFF4                  		bmi.w	Plat_Exit
0000913A 3029 0008                  		move.w	obX(a1),d0
0000913E 9068 0008                  		sub.w	obX(a0),d0
00009142 D041                       		add.w	d1,d0
00009144 6BE6                       		bmi.s	Plat_Exit
00009146 D241                       		add.w	d1,d1
00009148 B041                       		cmp.w	d1,d0
0000914A 64E0                       		bhs.s	Plat_Exit
0000914C 0828 0000 0001             		btst	#0,obRender(a0)
00009152 6700                       		beq.s	loc_754A
00009154 4640                       		not.w	d0
00009156 D041                       		add.w	d1,d0
00009158                            
00009158                            loc_754A:
00009158 E248                       		lsr.w	#1,d0
0000915A 7600                       		moveq	#0,d3
0000915C 1632 0000                  		move.b	(a2,d0.w),d3
00009160 3028 000C                  		move.w	obY(a0),d0
00009164 9043                       		sub.w	d3,d0
00009166 6000 FF1A                  		bra.w	Platform3
0000916A                            ; End of function SlopeObject
0000916A                            
0000916A                            
0000916A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000916A                            
0000916A                            
0000916A                            Swing_Solid:
0000916A 43F8 D000                  		lea	(v_player).w,a1
0000916E 4A69 0012                  		tst.w	obVelY(a1)
00009172 6B00 FFB8                  		bmi.w	Plat_Exit
00009176 3029 0008                  		move.w	obX(a1),d0
0000917A 9068 0008                  		sub.w	obX(a0),d0
0000917E D041                       		add.w	d1,d0
00009180 6B00 FFAA                  		bmi.w	Plat_Exit
00009184 D241                       		add.w	d1,d1
00009186 B041                       		cmp.w	d1,d0
00009188 6400 FFA2                  		bhs.w	Plat_Exit
0000918C 3028 000C                  		move.w	obY(a0),d0
00009190 9043                       		sub.w	d3,d0
00009192 6000 FEEE                  		bra.w	Platform3
00009196                            ; End of function Obj15_Solid
00009196                            
00009196                            ; ===========================================================================
00009196                            
00009196                            		include	"_incObj\11 Bridge (part 2).asm"
00009196                            
00009196                            Bri_Platform:	; Routine 4
00009196 6100                       		bsr.s	Bri_WalkOff
00009198 6100 0000                  		bsr.w	DisplaySprite
0000919C 6000 0000                  		bra.w	Bri_ChkDel
000091A0                            
000091A0                            ; ---------------------------------------------------------------------------
000091A0                            ; Subroutine allowing Sonic to walk off a bridge
000091A0                            ; ---------------------------------------------------------------------------
000091A0                            
000091A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091A0                            
000091A0                            
000091A0                            Bri_WalkOff:
000091A0 7200                       		moveq	#0,d1
000091A2 1228 0028                  		move.b	obSubtype(a0),d1
000091A6 E749                       		lsl.w	#3,d1
000091A8 3401                       		move.w	d1,d2
000091AA 5041                       		addq.w	#8,d1
000091AC 6100                       		bsr.s	ExitPlatform2
000091AE 6400                       		bcc.s	locret_75BE
000091B0 E848                       		lsr.w	#4,d0
000091B2 1140 003F                  		move.b	d0,$3F(a0)
000091B6 1028 003E                  		move.b	$3E(a0),d0
000091BA 0C00 0040                  		cmpi.b	#$40,d0
000091BE 6700                       		beq.s	loc_75B6
000091C0 5828 003E                  		addq.b	#4,$3E(a0)
000091C4                            
000091C4                            loc_75B6:
000091C4 6100 0000                  		bsr.w	Bri_Bend
000091C8 6100 0000                  		bsr.w	Bri_MoveSonic
000091CC                            
000091CC                            locret_75BE:
000091CC 4E75                       		rts	
000091CE                            ; End of function Bri_WalkOff
000091CE                            ; End of function Bri_WalkOff
000091CE                            
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            
000091CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CE                            
000091CE                            
000091CE                            ExitPlatform:
000091CE 3401                       		move.w	d1,d2
000091D0                            
000091D0                            ExitPlatform2:
000091D0 D442                       		add.w	d2,d2
000091D2 43F8 D000                  		lea	(v_player).w,a1
000091D6 0829 0001 0022             		btst	#1,obStatus(a1)
000091DC 6600                       		bne.s	loc_75E0
000091DE 3029 0008                  		move.w	obX(a1),d0
000091E2 9068 0008                  		sub.w	obX(a0),d0
000091E6 D041                       		add.w	d1,d0
000091E8 6B00                       		bmi.s	loc_75E0
000091EA B042                       		cmp.w	d2,d0
000091EC 6500                       		blo.s	locret_75F2
000091EE                            
000091EE                            loc_75E0:
000091EE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000091F4 117C 0002 0024             		move.b	#2,obRoutine(a0)
000091FA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009200                            
00009200                            locret_75F2:
00009200 4E75                       		rts	
00009202                            ; End of function ExitPlatform
00009202                            
00009202                            		include	"_incObj\11 Bridge (part 3).asm"
00009202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009202                            
00009202                            
00009202                            Bri_MoveSonic:
00009202 7000                       		moveq	#0,d0
00009204 1028 003F                  		move.b	$3F(a0),d0
00009208 1030 0029                  		move.b	$29(a0,d0.w),d0
0000920C ED48                       		lsl.w	#6,d0
0000920E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009214 2440                       		movea.l	d0,a2
00009216 43F8 D000                  		lea	(v_player).w,a1
0000921A 302A 000C                  		move.w	obY(a2),d0
0000921E 5140                       		subq.w	#8,d0
00009220 7200                       		moveq	#0,d1
00009222 1229 0016                  		move.b	obHeight(a1),d1
00009226 9041                       		sub.w	d1,d0
00009228 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
0000922C 4E75                       		rts	
0000922E                            ; End of function Bri_MoveSonic
0000922E                            
0000922E                            
0000922E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000922E                            
0000922E                            
0000922E                            Bri_Bend:
0000922E 1028 003E                  		move.b	$3E(a0),d0
00009232 6100 A7FE                  		bsr.w	CalcSine
00009236 3800                       		move.w	d0,d4
00009238 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000923E 7000                       		moveq	#0,d0
00009240 1028 0028                  		move.b	obSubtype(a0),d0
00009244 E948                       		lsl.w	#4,d0
00009246 7600                       		moveq	#0,d3
00009248 1628 003F                  		move.b	$3F(a0),d3
0000924C 3403                       		move.w	d3,d2
0000924E D640                       		add.w	d0,d3
00009250 7A00                       		moveq	#0,d5
00009252 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009258 1A35 3000                  		move.b	(a5,d3.w),d5
0000925C 0243 000F                  		andi.w	#$F,d3
00009260 E94B                       		lsl.w	#4,d3
00009262 47F4 3000                  		lea	(a4,d3.w),a3
00009266 45E8 0029                  		lea	$29(a0),a2
0000926A                            
0000926A                            loc_765C:
0000926A 7000                       		moveq	#0,d0
0000926C 101A                       		move.b	(a2)+,d0
0000926E ED48                       		lsl.w	#6,d0
00009270 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009276 2240                       		movea.l	d0,a1
00009278 7000                       		moveq	#0,d0
0000927A 101B                       		move.b	(a3)+,d0
0000927C 5240                       		addq.w	#1,d0
0000927E C0C5                       		mulu.w	d5,d0
00009280 C0C4                       		mulu.w	d4,d0
00009282 4840                       		swap	d0
00009284 D069 003C                  		add.w	$3C(a1),d0
00009288 3340 000C                  		move.w	d0,obY(a1)
0000928C 51CA FFDC                  		dbf	d2,loc_765C
00009290 7000                       		moveq	#0,d0
00009292 1028 0028                  		move.b	obSubtype(a0),d0
00009296 7600                       		moveq	#0,d3
00009298 1628 003F                  		move.b	$3F(a0),d3
0000929C 5203                       		addq.b	#1,d3
0000929E 9600                       		sub.b	d0,d3
000092A0 4403                       		neg.b	d3
000092A2 6B00                       		bmi.s	locret_76CA
000092A4 3403                       		move.w	d3,d2
000092A6 E94B                       		lsl.w	#4,d3
000092A8 47F4 3000                  		lea	(a4,d3.w),a3
000092AC D6C2                       		adda.w	d2,a3
000092AE 5342                       		subq.w	#1,d2
000092B0 6500                       		bcs.s	locret_76CA
000092B2                            
000092B2                            loc_76A4:
000092B2 7000                       		moveq	#0,d0
000092B4 101A                       		move.b	(a2)+,d0
000092B6 ED48                       		lsl.w	#6,d0
000092B8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092BE 2240                       		movea.l	d0,a1
000092C0 7000                       		moveq	#0,d0
000092C2 1023                       		move.b	-(a3),d0
000092C4 5240                       		addq.w	#1,d0
000092C6 C0C5                       		mulu.w	d5,d0
000092C8 C0C4                       		mulu.w	d4,d0
000092CA 4840                       		swap	d0
000092CC D069 003C                  		add.w	$3C(a1),d0
000092D0 3340 000C                  		move.w	d0,obY(a1)
000092D4 51CA FFDC                  		dbf	d2,loc_76A4
000092D8                            
000092D8                            locret_76CA:
000092D8 4E75                       		rts	
000092DA                            ; End of function Bri_Bend
000092DA                            
000092DA                            ; ===========================================================================
000092DA                            ; ---------------------------------------------------------------------------
000092DA                            ; GHZ bridge-bending data
000092DA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000092DA                            ; ---------------------------------------------------------------------------
000092DA                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
000093EA                            		even
000093EA                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000094EA                            		even
000094EA                            
000094EA                            ; ===========================================================================
000094EA                            
000094EA                            Bri_ChkDel:
00009508 4E75                       		rts	
0000950A                            ; ===========================================================================
0000950A                            
0000950A                            @deletebridge:
0000950A 7400                       		moveq	#0,d2
0000950C 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009510 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009512 5302                       		subq.b	#1,d2		; subtract 1
00009514 6500                       		bcs.s	@delparent
00009516                            
00009516                            	@loop:
00009516 7000                       		moveq	#0,d0
00009518 101A                       		move.b	(a2)+,d0
0000951A ED48                       		lsl.w	#6,d0
0000951C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009522 2240                       		movea.l	d0,a1
00009524 B048                       		cmp.w	a0,d0
00009526 6700                       		beq.s	@skipdel
00009528 6100 0000                  		bsr.w	DeleteChild
0000952C                            
0000952C                            	@skipdel:
0000952C 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009530                            
00009530                            @delparent:
00009530 6100 0000                  		bsr.w	DeleteObject
00009534 4E75                       		rts	
00009536                            ; ===========================================================================
00009536                            
00009536                            Bri_Delete:	; Routine 6, 8
00009536 6100 0000                  		bsr.w	DeleteObject
0000953A 4E75                       		rts	
0000953C                            ; ===========================================================================
0000953C                            
0000953C                            Bri_Display:	; Routine $A
0000953C 6100 0000                  		bsr.w	DisplaySprite
00009540 4E75                       		rts	
00009540 4E75                       		rts	
00009542                            Map_Bri:	include	"_maps\Bridge.asm"
00009542                            ; ---------------------------------------------------------------------------
00009542                            ; Sprite mappings - GHZ	bridge
00009542                            ; ---------------------------------------------------------------------------
00009542                            Map_Bri_internal:
00009542 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009544 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009546 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009548 01                         M_Bri_Log:	dc.b 1
00009549 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000954E 02                         M_Bri_Stump:	dc.b 2
0000954F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009554 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009559 01                         M_Bri_Rope:	dc.b 1
0000955A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009560 00                         		even
00009560 00                         		even
00009560                            
00009560                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009560                            ; ---------------------------------------------------------------------------
00009560                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009560                            ;	    - spiked ball on a chain (SBZ)
00009560                            ; ---------------------------------------------------------------------------
00009560                            
00009560                            SwingingPlatform:
00009560 7000                       		moveq	#0,d0
00009562 1028 0024                  		move.b	obRoutine(a0),d0
00009566 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
0000956A 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000956E                            ; ===========================================================================
0000956E 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009572 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009576 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
0000957A 0000                       		dc.w Swing_Action-Swing_Index
0000957C                            
0000957C =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000957C =00000038                  swing_origY:	equ $38		; original y-axis position
0000957C                            ; ===========================================================================
0000957C                            
0000957C                            Swing_Main:	; Routine 0
0000957C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009580 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009588 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000958E 117C 0004 0001             		move.b	#4,obRender(a0)
00009594 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000959A 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095A0 117C 0008 0016             		move.b	#8,obHeight(a0)
000095A6 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095AC 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095B2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095B8 6600                       		bne.s	@notSLZ
000095BA                            
000095BA 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000095C2 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000095C8 117C 0020 0014             		move.b	#$20,obActWid(a0)
000095CE 117C 0010 0016             		move.b	#$10,obHeight(a0)
000095D4 117C 0099 0020             		move.b	#$99,obColType(a0)
000095DA                            
000095DA                            	@notSLZ:
000095DA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000095E0 6600                       		bne.s	@length
000095E2                            
000095E2 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000095EA 317C 0391 0002             		move.w	#$391,obGfx(a0)
000095F0 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095F6 117C 0018 0016             		move.b	#$18,obHeight(a0)
000095FC 117C 0086 0020             		move.b	#$86,obColType(a0)
00009602 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009608                            
00009608                            @length:
00009608 1810                       		move.b	0(a0),d4
0000960A 7200                       		moveq	#0,d1
0000960C 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009610 1212                       		move.b	(a2),d1		; move a2 to d1
00009612 3F01                       		move.w	d1,-(sp)
00009614 0241 000F                  		andi.w	#$F,d1
00009618 14FC 0000                  		move.b	#0,(a2)+
0000961C 3601                       		move.w	d1,d3
0000961E E94B                       		lsl.w	#4,d3
00009620 5003                       		addq.b	#8,d3
00009622 1143 003C                  		move.b	d3,$3C(a0)
00009626 5103                       		subq.b	#8,d3
00009628 4A28 001A                  		tst.b	obFrame(a0)
0000962C 6700                       		beq.s	@makechain
0000962E 5003                       		addq.b	#8,d3
00009630 5341                       		subq.w	#1,d1
00009632                            
00009632                            @makechain:
00009632 6100 0000                  		bsr.w	FindFreeObj
00009636 6600                       		bne.s	@fail
00009638 5228 0028                  		addq.b	#1,obSubtype(a0)
0000963C 3A09                       		move.w	a1,d5
0000963E 0445 D000                  		subi.w	#$D000,d5
00009642 EC4D                       		lsr.w	#6,d5
00009644 0245 007F                  		andi.w	#$7F,d5
00009648 14C5                       		move.b	d5,(a2)+
0000964A 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009650 1284                       		move.b	d4,0(a1)	; load swinging	object
00009652 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009658 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000965E 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009664 137C 0004 0001             		move.b	#4,obRender(a1)
0000966A 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009670 137C 0008 0014             		move.b	#8,obActWid(a1)
00009676 137C 0001 001A             		move.b	#1,obFrame(a1)
0000967C 1343 003C                  		move.b	d3,$3C(a1)
00009680 0403 0010                  		subi.b	#$10,d3
00009684 6400                       		bcc.s	@notanchor
00009686 137C 0002 001A             		move.b	#2,obFrame(a1)
0000968C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009692 08E9 0006 0002             		bset	#6,obGfx(a1)
00009698                            
00009698                            	@notanchor:
00009698 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000969C                            
0000969C                            	@fail:
0000969C 3A08                       		move.w	a0,d5
0000969E 0445 D000                  		subi.w	#$D000,d5
000096A2 EC4D                       		lsr.w	#6,d5
000096A4 0245 007F                  		andi.w	#$7F,d5
000096A8 14C5                       		move.b	d5,(a2)+
000096AA 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096B0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096B6 321F                       		move.w	(sp)+,d1
000096B8 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096BC 6700                       		beq.s	@not1X	; if not, branch
000096BE 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000096C6 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000096CC 117C 0001 001A             		move.b	#1,obFrame(a0)
000096D2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000096D8 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000096DE                            
000096DE                            	@not1X:
000096DE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000096E4 6700                       		beq.s	Swing_Action	; if yes, branch
000096E6                            
000096E6                            Swing_SetSolid:	; Routine 2
000096E6 7200                       		moveq	#0,d1
000096E8 1228 0014                  		move.b	obActWid(a0),d1
000096EC 7600                       		moveq	#0,d3
000096EE 1628 0016                  		move.b	obHeight(a0),d3
000096F2 6100 FA76                  		bsr.w	Swing_Solid
000096F6                            
000096F6                            Swing_Action:	; Routine $C
000096F6 6100 0000                  		bsr.w	Swing_Move
000096FA 6100 0000                  		bsr.w	DisplaySprite
000096FE 6000 0000                  		bra.w	Swing_ChkDel
00009702                            ; ===========================================================================
00009702                            
00009702                            Swing_Action2:	; Routine 4
00009702 7200                       		moveq	#0,d1
00009704 1228 0014                  		move.b	obActWid(a0),d1
00009708 6100 FAC4                  		bsr.w	ExitPlatform
0000970C 3F28 0008                  		move.w	obX(a0),-(sp)
00009710 6100 0000                  		bsr.w	Swing_Move
00009714 341F                       		move.w	(sp)+,d2
00009716 7600                       		moveq	#0,d3
00009718 1628 0016                  		move.b	obHeight(a0),d3
0000971C 5203                       		addq.b	#1,d3
0000971E 6100 0000                  		bsr.w	MvSonicOnPtfm
00009722 6100 0000                  		bsr.w	DisplaySprite
00009726 6000 0000                  		bra.w	Swing_ChkDel
0000972A                            
0000972A 4E75                       		rts
0000972A 4E75                       		rts
0000972C                            
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            ; Subroutine to	change Sonic's position with a platform
0000972C                            ; ---------------------------------------------------------------------------
0000972C                            
0000972C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000972C                            
0000972C                            
0000972C                            MvSonicOnPtfm:
0000972C 43F8 D000                  		lea	(v_player).w,a1
00009730 3028 000C                  		move.w	obY(a0),d0
00009734 9043                       		sub.w	d3,d0
00009736 6000                       		bra.s	MvSonic2
00009738                            ; End of function MvSonicOnPtfm
00009738                            
00009738                            ; ---------------------------------------------------------------------------
00009738                            ; Subroutine to	change Sonic's position with a platform
00009738                            ; ---------------------------------------------------------------------------
00009738                            
00009738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009738                            
00009738                            
00009738                            MvSonicOnPtfm2:
00009738 43F8 D000                  		lea	(v_player).w,a1
0000973C 3028 000C                  		move.w	obY(a0),d0
00009740 0440 0009                  		subi.w	#9,d0
00009744                            
00009744                            MvSonic2:
00009744 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009748 6B00                       		bmi.s	locret_7B62
0000974A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009750 6400                       		bhs.s	locret_7B62
00009752 4A78 FE08                  		tst.w	(v_debuguse).w
00009756 6600                       		bne.s	locret_7B62
00009758 7200                       		moveq	#0,d1
0000975A 1229 0016                  		move.b	obHeight(a1),d1
0000975E 9041                       		sub.w	d1,d0
00009760 3340 000C                  		move.w	d0,obY(a1)
00009764 9468 0008                  		sub.w	obX(a0),d2
00009768 9569 0008                  		sub.w	d2,obX(a1)
0000976C                            
0000976C                            locret_7B62:
0000976C 4E75                       		rts	
0000976E                            ; End of function MvSonicOnPtfm2
0000976E                            
0000976E                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000976E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000976E                            
0000976E                            
0000976E                            Swing_Move:
0000976E 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009772 323C 0080                  		move.w	#$80,d1
00009776 0828 0000 0022             		btst	#0,obStatus(a0)
0000977C 6700                       		beq.s	loc_7B78
0000977E 4440                       		neg.w	d0
00009780 D041                       		add.w	d1,d0
00009782                            
00009782                            loc_7B78:
00009782 6000                       		bra.s	Swing_Move2
00009784                            ; End of function Swing_Move
00009784                            
00009784                            
00009784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009784                            
00009784                            
00009784                            Obj48_Move:
00009784 4A28 003D                  		tst.b	$3D(a0)
00009788 6600                       		bne.s	loc_7B9C
0000978A 3028 003E                  		move.w	$3E(a0),d0
0000978E 5040                       		addq.w	#8,d0
00009790 3140 003E                  		move.w	d0,$3E(a0)
00009794 D168 0026                  		add.w	d0,obAngle(a0)
00009798 0C40 0200                  		cmpi.w	#$200,d0
0000979C 6600                       		bne.s	loc_7BB6
0000979E 117C 0001 003D             		move.b	#1,$3D(a0)
000097A4 6000                       		bra.s	loc_7BB6
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            loc_7B9C:
000097A6 3028 003E                  		move.w	$3E(a0),d0
000097AA 5140                       		subq.w	#8,d0
000097AC 3140 003E                  		move.w	d0,$3E(a0)
000097B0 D168 0026                  		add.w	d0,obAngle(a0)
000097B4 0C40 FE00                  		cmpi.w	#-$200,d0
000097B8 6600                       		bne.s	loc_7BB6
000097BA 117C 0000 003D             		move.b	#0,$3D(a0)
000097C0                            
000097C0                            loc_7BB6:
000097C0 1028 0026                  		move.b	obAngle(a0),d0
000097C4                            ; End of function Obj48_Move
000097C4                            
000097C4                            
000097C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097C4                            
000097C4                            
000097C4                            Swing_Move2:
000097C4 6100 A26C                  		bsr.w	CalcSine
000097C8 3428 0038                  		move.w	$38(a0),d2
000097CC 3628 003A                  		move.w	$3A(a0),d3
000097D0 45E8 0028                  		lea	obSubtype(a0),a2
000097D4 7C00                       		moveq	#0,d6
000097D6 1C1A                       		move.b	(a2)+,d6
000097D8                            
000097D8                            loc_7BCE:
000097D8 7800                       		moveq	#0,d4
000097DA 181A                       		move.b	(a2)+,d4
000097DC ED4C                       		lsl.w	#6,d4
000097DE 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000097E4 2244                       		movea.l	d4,a1
000097E6 7800                       		moveq	#0,d4
000097E8 1829 003C                  		move.b	$3C(a1),d4
000097EC 2A04                       		move.l	d4,d5
000097EE C9C0                       		muls.w	d0,d4
000097F0 E084                       		asr.l	#8,d4
000097F2 CBC1                       		muls.w	d1,d5
000097F4 E085                       		asr.l	#8,d5
000097F6 D842                       		add.w	d2,d4
000097F8 DA43                       		add.w	d3,d5
000097FA 3344 000C                  		move.w	d4,obY(a1)
000097FE 3345 0008                  		move.w	d5,obX(a1)
00009802 51CE FFD4                  		dbf	d6,loc_7BCE
00009806 4E75                       		rts	
00009808                            ; End of function Swing_Move2
00009808                            
00009808                            ; ===========================================================================
00009808                            
00009808                            Swing_ChkDel:
00009826 4E75                       		rts	
00009828                            ; ===========================================================================
00009828                            
00009828                            Swing_DelAll:
00009828 7400                       		moveq	#0,d2
0000982A 45E8 0028                  		lea	obSubtype(a0),a2
0000982E 141A                       		move.b	(a2)+,d2
00009830                            
00009830                            Swing_DelLoop:
00009830 7000                       		moveq	#0,d0
00009832 101A                       		move.b	(a2)+,d0
00009834 ED48                       		lsl.w	#6,d0
00009836 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000983C 2240                       		movea.l	d0,a1
0000983E 6100 0000                  		bsr.w	DeleteChild
00009842 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009846 4E75                       		rts	
00009848                            ; ===========================================================================
00009848                            
00009848                            Swing_Delete:	; Routine 6, 8
00009848 6100 0000                  		bsr.w	DeleteObject
0000984C 4E75                       		rts	
0000984E                            ; ===========================================================================
0000984E                            
0000984E                            Swing_Display:	; Routine $A
0000984E 6000 0000                  		bra.w	DisplaySprite
0000984E 6000 0000                  		bra.w	DisplaySprite
00009852                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009852                            ; ---------------------------------------------------------------------------
00009852                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009852                            ; ---------------------------------------------------------------------------
00009852                            Map_Swing_GHZ_internal:
00009852 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009854 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009856 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009858 02                         @block:		dc.b 2
00009859 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000985E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009863 01                         @chain:		dc.b 1
00009864 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009869 01                         @anchor:	dc.b 1
0000986A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009870 00                         		even
00009870 00                         		even
00009870                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009870                            ; ---------------------------------------------------------------------------
00009870                            ; Sprite mappings - SLZ	swinging platforms
00009870                            ; ---------------------------------------------------------------------------
00009870                            Map_Swing_SLZ_internal:
00009870 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009872 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009874 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009876 08                         @block:		dc.b 8
00009877 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000987C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009881 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009886 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000988B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009890 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009895 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000989A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000989F 01                         @chain:		dc.b 1
000098A0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098A5 01                         @anchor:	dc.b 1
000098A6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098AC 00                         		even
000098AC 00                         		even
000098AC                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098AC                            ; ---------------------------------------------------------------------------
000098AC                            
000098AC                            Helix:
000098AC 7000                       		moveq	#0,d0
000098AE 1028 0024                  		move.b	obRoutine(a0),d0
000098B2 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098B6 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098BA                            ; ===========================================================================
000098BA 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098BC 0000                       		dc.w Hel_Action-Hel_Index
000098BE 0000                       		dc.w Hel_Action-Hel_Index
000098C0 0000                       		dc.w Hel_Delete-Hel_Index
000098C2 0000                       		dc.w Hel_Display-Hel_Index
000098C4                            
000098C4 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000098C4                            
000098C4                            ;		$29-38 are used for child object addresses
000098C4                            ; ===========================================================================
000098C4                            
000098C4                            Hel_Main:	; Routine 0
000098C4 5428 0024                  		addq.b	#2,obRoutine(a0)
000098C8 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000098D0 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000098D6 117C 0007 0022             		move.b	#7,obStatus(a0)
000098DC 117C 0004 0001             		move.b	#4,obRender(a0)
000098E2 317C 0180 0018             		move.w	#$180,obPriority(a0)
000098E8 117C 0008 0014             		move.b	#8,obActWid(a0)
000098EE 3428 000C                  		move.w	obY(a0),d2
000098F2 3628 0008                  		move.w	obX(a0),d3
000098F6 1810                       		move.b	0(a0),d4
000098F8 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000098FC 7200                       		moveq	#0,d1
000098FE 1212                       		move.b	(a2),d1		; move helix length to d1
00009900 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009904 3001                       		move.w	d1,d0
00009906 E248                       		lsr.w	#1,d0
00009908 E948                       		lsl.w	#4,d0
0000990A 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000990C 5501                       		subq.b	#2,d1
0000990E 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009910 7C00                       		moveq	#0,d6
00009912                            
00009912                            Hel_Build:
00009912 6100 0000                  		bsr.w	FindFreeObj
00009916 6600                       		bne.s	Hel_Action
00009918 5228 0028                  		addq.b	#1,obSubtype(a0)
0000991C 3A09                       		move.w	a1,d5
0000991E 0445 D000                  		subi.w	#$D000,d5
00009922 EC4D                       		lsr.w	#6,d5
00009924 0245 007F                  		andi.w	#$7F,d5
00009928 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
0000992A 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009930 1284                       		move.b	d4,0(a1)
00009932 3342 000C                  		move.w	d2,ObY(a1)
00009936 3343 0008                  		move.w	d3,obX(a1)
0000993A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009940 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009946 137C 0004 0001             		move.b	#4,obRender(a1)
0000994C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009952 137C 0008 0014             		move.b	#8,obActWid(a1)
00009958 1346 003E                  		move.b	d6,hel_frame(a1)
0000995C 5206                       		addq.b	#1,d6
0000995E 0206 0007                  		andi.b	#7,d6
00009962 0643 0010                  		addi.w	#$10,d3
00009966 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
0000996A 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000996C                            
0000996C 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009970 5206                       		addq.b	#1,d6
00009972 0206 0007                  		andi.b	#7,d6
00009976 0643 0010                  		addi.w	#$10,d3		; skip to next spike
0000997A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000997E                            
0000997E                            	Hel_NotCentre:
0000997E 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009982                            
00009982                            Hel_Action:	; Routine 2, 4
00009982 6100 0000                  		bsr.w	Hel_RotateSpikes
00009986 6100 0000                  		bsr.w	DisplaySprite
0000998A 6000 0000                  		bra.w	Hel_ChkDel
0000998E                            
0000998E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000998E                            
0000998E                            
0000998E                            Hel_RotateSpikes:
0000998E 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009992 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009998 D028 003E                  		add.b	hel_frame(a0),d0
0000999C 0200 0007                  		andi.b	#7,d0
000099A0 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099A4 6600                       		bne.s	locret_7DA6
000099A6 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099AC                            
000099AC                            locret_7DA6:
000099AC 4E75                       		rts	
000099AE                            ; End of function Hel_RotateSpikes
000099AE                            
000099AE                            ; ===========================================================================
000099AE                            
000099AE                            Hel_ChkDel:
000099CC 4E75                       		rts	
000099CE                            ; ===========================================================================
000099CE                            
000099CE                            Hel_DelAll:
000099CE 7400                       		moveq	#0,d2
000099D0 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000099D4 141A                       		move.b	(a2)+,d2	; move helix length to d2
000099D6 5502                       		subq.b	#2,d2
000099D8 6500                       		bcs.s	Hel_Delete
000099DA                            
000099DA                            	Hel_DelLoop:
000099DA 7000                       		moveq	#0,d0
000099DC 101A                       		move.b	(a2)+,d0
000099DE ED48                       		lsl.w	#6,d0
000099E0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000099E6 2240                       		movea.l	d0,a1		; get child address
000099E8 6100 0000                  		bsr.w	DeleteChild	; delete object
000099EC 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
000099F0                            
000099F0                            Hel_Delete:	; Routine 6
000099F0 6100 0000                  		bsr.w	DeleteObject
000099F4 4E75                       		rts	
000099F6                            ; ===========================================================================
000099F6                            
000099F6                            Hel_Display:	; Routine 8
000099F6 6100 FF96                  		bsr.w	Hel_RotateSpikes
000099FA 6000 0000                  		bra.w	DisplaySprite
000099FA 6000 0000                  		bra.w	DisplaySprite
000099FE                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            Map_Hel_internal:
000099FE 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A00 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A02 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A04 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A06 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A08 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A0A 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A0C 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A0E 01                         byte_7E08:	dc.b 1
00009A0F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A14 01                         byte_7E0E:	dc.b 1
00009A15 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A1A 01                         byte_7E14:	dc.b 1
00009A1B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A20 01                         byte_7E1A:	dc.b 1
00009A21 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A26 01                         byte_7E20:	dc.b 1
00009A27 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A2C 01                         byte_7E26:	dc.b 1
00009A2D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A32 01                         byte_7E2C:	dc.b 1
00009A33 F4                         		dc.b $F4
00009A34                            byte_7E2E:	; reads the 0 below	; not visible
00009A34 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A38                            		even
00009A38                            		even
00009A38                            		include	"_incObj\18 Platforms.asm"
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A38                            ; ---------------------------------------------------------------------------
00009A38                            
00009A38                            BasicPlatform:
00009A38 7000                       		moveq	#0,d0
00009A3A 1028 0024                  		move.b	obRoutine(a0),d0
00009A3E 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A42 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A46                            ; ===========================================================================
00009A46 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A48 0000                       		dc.w Plat_Solid-Plat_Index
00009A4A 0000                       		dc.w Plat_Action2-Plat_Index
00009A4C 0000                       		dc.w Plat_Delete-Plat_Index
00009A4E 0000                       		dc.w Plat_Action-Plat_Index
00009A50                            ; ===========================================================================
00009A50                            
00009A50                            Plat_Main:	; Routine 0
00009A50 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A54 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A5A 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009A62 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A68 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009A6E 6600                       		bne.s	@notSYZ
00009A70                            
00009A70 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009A78 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A7E                            
00009A7E                            	@notSYZ:
00009A7E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009A84 6600                       		bne.s	@notSLZ
00009A86 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009A8E 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A94 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A9A 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009AA0                            
00009AA0                            	@notSLZ:
00009AA0 117C 0004 0001             		move.b	#4,obRender(a0)
00009AA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009AAC 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009AB2 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AB8 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009ABE 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009AC4 7200                       		moveq	#0,d1
00009AC6 1028 0028                  		move.b	obSubtype(a0),d0
00009ACA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009ACE 6600                       		bne.s	@setframe	; if not, branch
00009AD0 5201                       		addq.b	#1,d1		; use frame #1
00009AD2 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009AD8                            
00009AD8                            	@setframe:
00009AD8 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009ADC                            
00009ADC                            Plat_Solid:	; Routine 2
00009ADC 4A28 0038                  		tst.b	$38(a0)
00009AE0 6700                       		beq.s	loc_7EE0
00009AE2 5928 0038                  		subq.b	#4,$38(a0)
00009AE6                            
00009AE6                            	loc_7EE0:
00009AE6 7200                       		moveq	#0,d1
00009AE8 1228 0014                  		move.b	obActWid(a0),d1
00009AEC 6100 F56C                  		bsr.w	PlatformObject
00009AF0                            
00009AF0                            Plat_Action:	; Routine 8
00009AF0 6100 0000                  		bsr.w	Plat_Move
00009AF4 6100 0000                  		bsr.w	Plat_Nudge
00009AF8 6100 0000                  		bsr.w	DisplaySprite
00009AFC 6000 0000                  		bra.w	Plat_ChkDel
00009B00                            ; ===========================================================================
00009B00                            
00009B00                            Plat_Action2:	; Routine 4
00009B00 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B06 6700                       		beq.s	loc_7F06
00009B08 5828 0038                  		addq.b	#4,$38(a0)
00009B0C                            
00009B0C                            	loc_7F06:
00009B0C 7200                       		moveq	#0,d1
00009B0E 1228 0014                  		move.b	obActWid(a0),d1
00009B12 6100 F6BA                  		bsr.w	ExitPlatform
00009B16 3F28 0008                  		move.w	obX(a0),-(sp)
00009B1A 6100 0000                  		bsr.w	Plat_Move
00009B1E 6100 0000                  		bsr.w	Plat_Nudge
00009B22 341F                       		move.w	(sp)+,d2
00009B24 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B28 6100 0000                  		bsr.w	DisplaySprite
00009B2C 6000 0000                  		bra.w	Plat_ChkDel
00009B30                            
00009B30 4E75                       		rts
00009B32                            
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            ; Subroutine to	move platform slightly when you	stand on it
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            
00009B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B32                            
00009B32                            
00009B32                            Plat_Nudge:
00009B32 1028 0038                  		move.b	$38(a0),d0
00009B36 6100 9EFA                  		bsr.w	CalcSine
00009B3A 323C 0400                  		move.w	#$400,d1
00009B3E C1C1                       		muls.w	d1,d0
00009B40 4840                       		swap	d0
00009B42 D068 002C                  		add.w	$2C(a0),d0
00009B46 3140 000C                  		move.w	d0,obY(a0)
00009B4A 4E75                       		rts	
00009B4C                            ; End of function Plat_Nudge
00009B4C                            
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            ; Subroutine to	move platforms
00009B4C                            ; ---------------------------------------------------------------------------
00009B4C                            
00009B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B4C                            
00009B4C                            
00009B4C                            Plat_Move:
00009B4C 7000                       		moveq	#0,d0
00009B4E 1028 0028                  		move.b	obSubtype(a0),d0
00009B52 0240 000F                  		andi.w	#$F,d0
00009B56 D040                       		add.w	d0,d0
00009B58 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B5C 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B60                            ; End of function Plat_Move
00009B60                            
00009B60                            ; ===========================================================================
00009B60 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009B64 0000 0000                  		dc.w @type02-@index, @type03-@index
00009B68 0000 0000                  		dc.w @type04-@index, @type05-@index
00009B6C 0000 0000                  		dc.w @type06-@index, @type07-@index
00009B70 0000 0000                  		dc.w @type08-@index, @type00-@index
00009B74 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009B78 0000                       		dc.w @type0C-@index
00009B7A                            ; ===========================================================================
00009B7A                            
00009B7A                            @type00:
00009B7A 4E75                       		rts			; platform 00 doesn't move
00009B7C                            ; ===========================================================================
00009B7C                            
00009B7C                            @type05:
00009B7C 3028 0032                  		move.w	$32(a0),d0
00009B80 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B84 4401                       		neg.b	d1		; reverse platform-motion
00009B86 0601 0040                  		addi.b	#$40,d1
00009B8A 6000                       		bra.s	@type01_move
00009B8C                            ; ===========================================================================
00009B8C                            
00009B8C                            @type01:
00009B8C 3028 0032                  		move.w	$32(a0),d0
00009B90 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009B94 0401 0040                  		subi.b	#$40,d1
00009B98                            
00009B98                            	@type01_move:
00009B98 4881                       		ext.w	d1
00009B9A D041                       		add.w	d1,d0
00009B9C 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BA0 6000 0000                  		bra.w	@chgmotion
00009BA4                            ; ===========================================================================
00009BA4                            
00009BA4                            @type0C:
00009BA4 3028 0034                  		move.w	$34(a0),d0
00009BA8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BAC 4401                       		neg.b	d1		; reverse platform-motion
00009BAE 0601 0030                  		addi.b	#$30,d1
00009BB2 6000                       		bra.s	@type02_move
00009BB4                            ; ===========================================================================
00009BB4                            
00009BB4                            @type0B:
00009BB4 3028 0034                  		move.w	$34(a0),d0
00009BB8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BBC 0401 0030                  		subi.b	#$30,d1
00009BC0 6000                       		bra.s	@type02_move
00009BC2                            ; ===========================================================================
00009BC2                            
00009BC2                            @type06:
00009BC2 3028 0034                  		move.w	$34(a0),d0
00009BC6 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BCA 4401                       		neg.b	d1		; reverse platform-motion
00009BCC 0601 0040                  		addi.b	#$40,d1
00009BD0 6000                       		bra.s	@type02_move
00009BD2                            ; ===========================================================================
00009BD2                            
00009BD2                            @type02:
00009BD2 3028 0034                  		move.w	$34(a0),d0
00009BD6 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BDA 0401 0040                  		subi.b	#$40,d1
00009BDE                            
00009BDE                            	@type02_move:
00009BDE 4881                       		ext.w	d1
00009BE0 D041                       		add.w	d1,d0
00009BE2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009BE6 6000 0000                  		bra.w	@chgmotion
00009BEA                            ; ===========================================================================
00009BEA                            
00009BEA                            @type03:
00009BEA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009BEE 6600                       		bne.s	@type03_wait	; if yes, branch
00009BF0 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009BF6 6700                       		beq.s	@type03_nomove	; if not, branch
00009BF8 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009BFE                            
00009BFE                            	@type03_nomove:
00009BFE 4E75                       		rts	
00009C00                            
00009C00                            	@type03_wait:
00009C00 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C04 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C06 317C 0020 003A             		move.w	#32,$3A(a0)
00009C0C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C10 4E75                       		rts	
00009C12                            ; ===========================================================================
00009C12                            
00009C12                            @type04:
00009C12 4A68 003A                  		tst.w	$3A(a0)
00009C16 6700                       		beq.s	@loc_8048
00009C18 5368 003A                  		subq.w	#1,$3A(a0)
00009C1C 6600                       		bne.s	@loc_8048
00009C1E 0828 0003 0022             		btst	#3,obStatus(a0)
00009C24 6700                       		beq.s	@loc_8042
00009C26 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C2C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C32 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C38 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C3E 4228 0025                  		clr.b	$25(a0)
00009C42 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C48                            
00009C48                            	@loc_8042:
00009C48 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C4E                            
00009C4E                            	@loc_8048:
00009C4E 2628 002C                  		move.l	$2C(a0),d3
00009C52 3028 0012                  		move.w	obVelY(a0),d0
00009C56 48C0                       		ext.l	d0
00009C58 E180                       		asl.l	#8,d0
00009C5A D680                       		add.l	d0,d3
00009C5C 2143 002C                  		move.l	d3,$2C(a0)
00009C60 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009C66 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009C6A 0640 00E0                  		addi.w	#$E0,d0
00009C6E B068 002C                  		cmp.w	$2C(a0),d0
00009C72 6400                       		bcc.s	@locret_8074
00009C74 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009C7A                            
00009C7A                            	@locret_8074:
00009C7A 4E75                       		rts	
00009C7C                            ; ===========================================================================
00009C7C                            
00009C7C                            @type07:
00009C7C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C80 6600                       		bne.s	@type07_wait	; if yes, branch
00009C82 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009C86 7000                       		moveq	#0,d0
00009C88 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009C8C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009C8E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009C92 6700                       		beq.s	@type07_nomove	; if not, branch
00009C94 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009C9A                            
00009C9A                            	@type07_nomove:
00009C9A 4E75                       		rts	
00009C9C                            
00009C9C                            	@type07_wait:
00009C9C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CA0 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CA2 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CA6 4E75                       		rts	
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            @type08:
00009CA8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CAC 3028 0034                  		move.w	$34(a0),d0
00009CB0 0440 0200                  		subi.w	#$200,d0
00009CB4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CB8 6600                       		bne.s	@type08_nostop	; if not, branch
00009CBA 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CBE                            
00009CBE                            	@type08_nostop:
00009CBE 4E75                       		rts	
00009CC0                            ; ===========================================================================
00009CC0                            
00009CC0                            @type0A:
00009CC0 3028 0034                  		move.w	$34(a0),d0
00009CC4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CC8 0401 0040                  		subi.b	#$40,d1
00009CCC 4881                       		ext.w	d1
00009CCE E241                       		asr.w	#1,d1
00009CD0 D041                       		add.w	d1,d0
00009CD2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009CD6                            
00009CD6                            @chgmotion:
00009CD6 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009CDC 4E75                       		rts	
00009CDE                            ; ===========================================================================
00009CDE                            
00009CDE                            Plat_ChkDel:
00009CFA 4E75                       		rts	
00009CFC                            ; ===========================================================================
00009CFC                            
00009CFC                            Plat_Delete:	; Routine 6
00009CFC 6000 0000                  		bra.w	DeleteObject
00009CFC 6000 0000                  		bra.w	DeleteObject
00009D00                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            ; Sprite mappings - unused
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            Map_Plat_Unused_internal:
00009D00 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D02 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D04 02                         @small:		dc.b 2
00009D05 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D0A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D0F 0A                         @large:		dc.b $A
00009D10 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D15 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D1A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D1F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D24 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D29 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D2E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D33 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D38 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D3D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D42                            		even
00009D42                            		even
00009D42                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D42                            ; ---------------------------------------------------------------------------
00009D42                            ; Sprite mappings - GHZ	platforms
00009D42                            ; ---------------------------------------------------------------------------
00009D42                            Map_Plat_GHZ_internal:
00009D42 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D44 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D46 04                         @small:		dc.b 4
00009D47 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D4C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D51 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D56 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D5B 0A                         @large:		dc.b $A
00009D5C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D61 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009D66 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009D6B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009D70 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009D75 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009D7A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009D7F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009D84 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009D89 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009D8E                            		even
00009D8E                            		even
00009D8E                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009D8E                            ; ---------------------------------------------------------------------------
00009D8E                            ; Sprite mappings - SYZ	platforms
00009D8E                            ; ---------------------------------------------------------------------------
00009D8E                            Map_Plat_SYZ_internal:
00009D8E 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009D90 03                         @platform:	dc.b 3
00009D91 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009D96 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009D9B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DA0                            		even
00009DA0                            		even
00009DA0                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            ; Sprite mappings - SLZ	platforms
00009DA0                            ; ---------------------------------------------------------------------------
00009DA0                            Map_Plat_SLZ_internal:
00009DA0 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DA2 02                         @platform:	dc.b 2
00009DA3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DA8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DAE 00                         		even
00009DAE 00                         		even
00009DAE                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            Map_GBall_internal:
00009DAE 0000                       		dc.w @shiny-Map_GBall_internal
00009DB0 0000                       		dc.w @check1-Map_GBall_internal
00009DB2 0000                       		dc.w @check2-Map_GBall_internal
00009DB4 0000                       		dc.w @check3-Map_GBall_internal
00009DB6 06                         @shiny:		dc.b 6
00009DB7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DBC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DC1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009DC6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009DCB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009DD0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009DD5 04                         @check1:	dc.b 4
00009DD6 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009DDB E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009DE0 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009DE5 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009DEA 04                         @check2:	dc.b 4
00009DEB E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009DF0 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009DF5 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009DFA 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009DFF 04                         @check3:	dc.b 4
00009E00 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E05 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E0A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E0F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E14                            		even
00009E14                            		even
00009E14                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            ; Object 1A - GHZ collapsing ledge
00009E14                            ; ---------------------------------------------------------------------------
00009E14                            
00009E14                            CollapseLedge:
00009E14 7000                       		moveq	#0,d0
00009E16 1028 0024                  		move.b	obRoutine(a0),d0
00009E1A 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E1E 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E22                            ; ===========================================================================
00009E22 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E26 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E2A 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E2E                            
00009E2E =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E2E =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E2E                            ; ===========================================================================
00009E2E                            
00009E2E                            Ledge_Main:	; Routine 0
00009E2E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E32 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E3A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E40 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E46 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E4C 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E52 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E58 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E5E 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009E64 08E8 0004 0001             		bset	#4,obRender(a0)
00009E6A                            
00009E6A                            Ledge_Touch:	; Routine 2
00009E6A 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E6E 6700                       		beq.s	@slope		; if not, branch
00009E70 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009E74 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009E78 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009E7C                            
00009E7C                            	@slope:
00009E7C 323C 0030                  		move.w	#$30,d1
00009E80 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009E86 6100 F2A6                  		bsr.w	SlopeObject
00009E8A 6000 0000                  		bra.w	RememberState
00009E8E                            ; ===========================================================================
00009E8E                            
00009E8E                            Ledge_Collapse:	; Routine 4
00009E8E 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009E92 6700 0000                  		beq.w	loc_847A
00009E96 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009E9C 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009EA0                            
00009EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EA0                            
00009EA0                            
00009EA0                            Ledge_WalkOff:	; Routine $A
00009EA0 323C 0030                  		move.w	#$30,d1
00009EA4 6100 F328                  		bsr.w	ExitPlatform
00009EA8 323C 0030                  		move.w	#$30,d1
00009EAC 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EB2 3428 0008                  		move.w	obX(a0),d2
00009EB6 6100 0000                  		bsr.w	SlopeObject2
00009EBA 6000 0000                  		bra.w	RememberState
00009EBE                            ; End of function Ledge_WalkOff
00009EBE                            
00009EBE                            ; ===========================================================================
00009EBE                            
00009EBE                            Ledge_Display:	; Routine 6
00009EBE 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009EC2 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009EC4 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EC8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009ECC 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009ED0 6000 0000                  		bra.w	DisplaySprite
00009ED4                            ; ===========================================================================
00009ED4                            
00009ED4                            loc_82D0:
00009ED4 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009ED8 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009EDC 43F8 D000                  		lea	(v_player).w,a1
00009EE0 0829 0003 0022             		btst	#3,obStatus(a1)
00009EE6 6700                       		beq.s	loc_82FC
00009EE8 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009EEC 6600                       		bne.s	locret_8308
00009EEE 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009EF4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009EFA 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F00                            
00009F00                            loc_82FC:
00009F00 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F06 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F0C                            
00009F0C                            locret_8308:
00009F0C 4E75                       		rts	
00009F0E                            ; ===========================================================================
00009F0E                            
00009F0E                            Ledge_TimeZero:
00009F0E 6100 0000                  		bsr.w	ObjectFall
00009F12 6100 0000                  		bsr.w	DisplaySprite
00009F16 4A28 0001                  		tst.b	obRender(a0)
00009F1A 6A00                       		bpl.s	Ledge_Delete
00009F1C 4E75                       		rts	
00009F1E                            ; ===========================================================================
00009F1E                            
00009F1E                            Ledge_Delete:	; Routine 8
00009F1E 6100 0000                  		bsr.w	DeleteObject
00009F22 4E75                       		rts	
00009F22 4E75                       		rts	
00009F24                            		include	"_incObj\53 Collapsing Floors.asm"
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            
00009F24                            CollapseFloor:
00009F24 7000                       		moveq	#0,d0
00009F26 1028 0024                  		move.b	obRoutine(a0),d0
00009F2A 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F2E 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F32                            ; ===========================================================================
00009F32 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F36 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F3A 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F3E                            
00009F3E =00000038                  cflo_timedelay:		equ $38
00009F3E =0000003A                  cflo_collapse_flag:	equ $3A
00009F3E                            ; ===========================================================================
00009F3E                            
00009F3E                            CFlo_Main:	; Routine 0
00009F3E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F42 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F4A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F50 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F56 6600                       		bne.s	@notSLZ
00009F58                            
00009F58 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F5E 5428 001A                  		addq.b	#2,obFrame(a0)
00009F62                            
00009F62                            	@notSLZ:
00009F62 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009F68 6600                       		bne.s	@notSBZ
00009F6A 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009F70                            
00009F70                            	@notSBZ:
00009F70 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F76 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F7C 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009F82 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009F88                            
00009F88                            CFlo_Touch:	; Routine 2
00009F88 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009F8C 6700                       		beq.s	@solid		; if not, branch
00009F8E 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009F92 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009F96 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009F9A                            
00009F9A                            	@solid:
00009F9A 323C 0020                  		move.w	#$20,d1
00009F9E 6100 F0BA                  		bsr.w	PlatformObject
00009FA2 4A28 0028                  		tst.b	obSubtype(a0)
00009FA6 6A00                       		bpl.s	@remstate
00009FA8 0829 0003 0022             		btst	#3,obStatus(a1)
00009FAE 6700                       		beq.s	@remstate
00009FB0 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FB6 3029 0008                  		move.w	obX(a1),d0
00009FBA 9068 0008                  		sub.w	obX(a0),d0
00009FBE 6400                       		bcc.s	@remstate
00009FC0 08E8 0000 0001             		bset	#0,obRender(a0)
00009FC6                            
00009FC6                            	@remstate:
00009FC6 6000 0000                  		bra.w	RememberState
00009FCA                            ; ===========================================================================
00009FCA                            
00009FCA                            CFlo_Collapse:	; Routine 4
00009FCA 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FCE 6700 0000                  		beq.w	loc_8458
00009FD2 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009FD8 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009FDC                            
00009FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FDC                            
00009FDC                            
00009FDC                            CFlo_WalkOff:	; Routine $A
00009FDC 323C 0020                  		move.w	#$20,d1
00009FE0 6100 F1EC                  		bsr.w	ExitPlatform
00009FE4 3428 0008                  		move.w	obX(a0),d2
00009FE8 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009FEC 6000 0000                  		bra.w	RememberState
00009FF0                            ; End of function CFlo_WalkOff
00009FF0                            
00009FF0                            ; ===========================================================================
00009FF0                            
00009FF0                            CFlo_Display:	; Routine 6
00009FF0 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FF4 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009FF6 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FFA 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009FFE 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A002 6000 0000                  		bra.w	DisplaySprite
0000A006                            ; ===========================================================================
0000A006                            
0000A006                            loc_8402:
0000A006 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A00A 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A00E 43F8 D000                  		lea	(v_player).w,a1
0000A012 0829 0003 0022             		btst	#3,obStatus(a1)
0000A018 6700                       		beq.s	loc_842E
0000A01A 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A01E 6600                       		bne.s	locret_843A
0000A020 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A026 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A02C 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A032                            
0000A032                            loc_842E:
0000A032 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A038 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A03E                            
0000A03E                            locret_843A:
0000A03E 4E75                       		rts	
0000A040                            ; ===========================================================================
0000A040                            
0000A040                            CFlo_TimeZero:
0000A040 6100 0000                  		bsr.w	ObjectFall
0000A044 6100 0000                  		bsr.w	DisplaySprite
0000A048 4A28 0001                  		tst.b	obRender(a0)
0000A04C 6A00                       		bpl.s	CFlo_Delete
0000A04E 4E75                       		rts	
0000A050                            ; ===========================================================================
0000A050                            
0000A050                            CFlo_Delete:	; Routine 8
0000A050 6100 0000                  		bsr.w	DeleteObject
0000A054 4E75                       		rts	
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            CFlo_Fragment:
0000A056 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A05C                            
0000A05C                            loc_8458:
0000A05C 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A062 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A068 6700                       		beq.s	loc_846C
0000A06A 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A070                            
0000A070                            loc_846C:
0000A070 7207                       		moveq	#7,d1
0000A072 5228 001A                  		addq.b	#1,obFrame(a0)
0000A076 6000                       		bra.s	loc_8486
0000A076 6000                       		bra.s	loc_8486
0000A078                            
0000A078                            ; ===========================================================================
0000A078                            
0000A078                            Ledge_Fragment:
0000A078 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A07E                            
0000A07E                            loc_847A:
0000A07E 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A084 7218                       		moveq	#$18,d1
0000A086 5428 001A                  		addq.b	#2,obFrame(a0)
0000A08A                            
0000A08A                            loc_8486:
0000A08A 7000                       		moveq	#0,d0
0000A08C 1028 001A                  		move.b	obFrame(a0),d0
0000A090 D040                       		add.w	d0,d0
0000A092 2668 0004                  		movea.l	obMap(a0),a3
0000A096 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A09A 524B                       		addq.w	#1,a3
0000A09C 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0A2 1810                       		move.b	0(a0),d4
0000A0A4 1A28 0001                  		move.b	obRender(a0),d5
0000A0A8 2248                       		movea.l	a0,a1
0000A0AA 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0B0 1284                       		move.b	d4,0(a1)
0000A0B2 234B 0004                  		move.l	a3,obMap(a1)
0000A0B6 1345 0001                  		move.b	d5,obRender(a1)
0000A0BA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0C0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A0C6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A0CC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A0D2 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A0D8 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A0DC 5341                       		subq.w	#1,d1
0000A0DE 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A0E2 303C 005F                  		move.w	#$5F,d0
0000A0E6                            ; ===========================================================================
0000A0E6                            
0000A0E6                            loc_84AA:
0000A0E6 4A11                       		tst.b	(a1)
0000A0E8 6700                       		beq.s	@cont		
0000A0EA 43E9 0040                  		lea		$40(a1),a1
0000A0EE 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A0F2 6600                       		bne.s	loc_84F2	
0000A0F4                            	@cont:
0000A0F4 5A4B                       		addq.w	#5,a3
0000A0F6                            
0000A0F6                            loc_84B2:
0000A0F6 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0FC 1284                       		move.b	d4,0(a1)
0000A0FE 234B 0004                  		move.l	a3,obMap(a1)
0000A102 1345 0001                  		move.b	d5,obRender(a1)
0000A106 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A10C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A112 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A118 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A11E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A124 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A128 6100 0000                  		bsr.w	DisplaySprite1
0000A12C                            
0000A12C                            loc_84EE:
0000A12C 51C9 FFB8                  		dbf	d1,loc_84AA
0000A130                            
0000A130                            loc_84F2:
0000A130 6100 0000                  		bsr.w	DisplaySprite
0000A13E                            ; ===========================================================================
0000A13E                            ; ---------------------------------------------------------------------------
0000A13E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A13E                            ; ---------------------------------------------------------------------------
0000A13E 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A14E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A158 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A160 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A168                            
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            
0000A168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A168                            
0000A168                            
0000A168                            SlopeObject2:
0000A168 43F8 D000                  		lea	(v_player).w,a1
0000A16C 0829 0003 0022             		btst	#3,obStatus(a1)
0000A172 6700                       		beq.s	locret_856E
0000A174 3029 0008                  		move.w	obX(a1),d0
0000A178 9068 0008                  		sub.w	obX(a0),d0
0000A17C D041                       		add.w	d1,d0
0000A17E E248                       		lsr.w	#1,d0
0000A180 0828 0000 0001             		btst	#0,obRender(a0)
0000A186 6700                       		beq.s	loc_854E
0000A188 4640                       		not.w	d0
0000A18A D041                       		add.w	d1,d0
0000A18C                            
0000A18C                            loc_854E:
0000A18C 7200                       		moveq	#0,d1
0000A18E 1232 0000                  		move.b	(a2,d0.w),d1
0000A192 3028 000C                  		move.w	obY(a0),d0
0000A196 9041                       		sub.w	d1,d0
0000A198 7200                       		moveq	#0,d1
0000A19A 1229 0016                  		move.b	obHeight(a1),d1
0000A19E 9041                       		sub.w	d1,d0
0000A1A0 3340 000C                  		move.w	d0,obY(a1)
0000A1A4 9468 0008                  		sub.w	obX(a0),d2
0000A1A8 9569 0008                  		sub.w	d2,obX(a1)
0000A1AC                            
0000A1AC                            locret_856E:
0000A1AC 4E75                       		rts	
0000A1AE                            ; End of function SlopeObject2
0000A1AE                            
0000A1AE                            ; ===========================================================================
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            ; Collision data for GHZ collapsing ledge
0000A1AE                            ; ---------------------------------------------------------------------------
0000A1AE                            Ledge_SlopeData:
0000A1AE                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A1DE                            		even
0000A1DE                            
0000A1DE                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            ; Sprite mappings - GHZ	collapsing ledge
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            Map_Ledge_internal:
0000A1DE 0000                       		dc.w @left-Map_Ledge_internal
0000A1E0 0000                       		dc.w @right-Map_Ledge_internal
0000A1E2 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A1E4 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A1E6 10                         @left:		dc.b $10
0000A1E7 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A1EC D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A1F1 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A1F6 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A1FB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A200 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A205 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A20A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A20F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A214 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A219 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A21E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A223 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A228 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A22D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A232 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A237 10                         @right:		dc.b $10
0000A238 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A23D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A242 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A247 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A24C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A251 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A256 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A25B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A260 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A265 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A26A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A26F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A274 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A279 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A27E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A283 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A288 19                         @leftsmash:	dc.b $19
0000A289 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A28E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A293 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A298 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A29D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2A2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2A7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2AC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2B1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2B6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2BB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2C0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A2C5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A2CA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A2CF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2D4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A2D9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A2DE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A2E3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2E8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A2ED 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A2F2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A2F7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A2FC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A301 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A306 19                         @rightsmash:	dc.b $19
0000A307 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A30C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A311 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A316 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A31B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A320 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A325 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A32A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A32F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A334 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A339 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A33E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A343 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A348 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A34D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A352 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A357 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A35C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A361 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A366 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A36B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A370 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A375 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A37A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A37F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A384                            		even
0000A384                            		even
0000A384                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            Map_CFlo_internal:
0000A384 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A386 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A388 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A38A 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A38C 04                         byte_874E:	dc.b 4
0000A38D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A392 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A397 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A39C 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3A1 08                         byte_8763:	dc.b 8
0000A3A2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3A7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3AC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3B1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3B6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3BB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3C0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A3C5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A3CA 04                         byte_878C:	dc.b 4
0000A3CB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A3D0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A3D5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3DA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A3DF 08                         byte_87A1:	dc.b 8
0000A3E0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3E5 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A3EA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3EF F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A3F4 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A3F9 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A3FE 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A403 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A408                            		even
0000A408                            		even
0000A408                            
0000A408                            		include	"_incObj\1C Scenery.asm"
0000A408                            ; ---------------------------------------------------------------------------
0000A408                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A408                            ; ---------------------------------------------------------------------------
0000A408                            
0000A408                            Scenery:
0000A408 7000                       		moveq	#0,d0
0000A40A 1028 0024                  		move.b	obRoutine(a0),d0
0000A40E 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A412 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A416                            ; ===========================================================================
0000A416 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A418 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A41A                            ; ===========================================================================
0000A41A                            
0000A41A                            Scen_Main:	; Routine 0
0000A41A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A41E 7000                       		moveq	#0,d0
0000A420 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A424 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A428 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A42C 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A430 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A434 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A43A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A43E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A442 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A446 3028 0018                  		move.w obPriority(a0),d0 
0000A44A E248                       		lsr.w #1,d0 
0000A44C 0240 0380                  		andi.w #$380,d0 
0000A450 3140 0018                  		move.w d0,obPriority(a0)		
0000A454 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A458                            
0000A458                            Scen_ChkDel:	; Routine 2
0000A476 6000 0000                  		bra.w	DisplaySprite
0000A47A                            ; ===========================================================================
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A                            ; Variables for	object $1C are stored in an array
0000A47A                            ; ---------------------------------------------------------------------------
0000A47A 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A47E 44D8                       		dc.w $44D8		; VRAM setting
0000A480 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A484 0000 0000                  		dc.l Map_Scen
0000A488 44D8                       		dc.w $44D8
0000A48A 0008 0200                  		dc.b 0,	8, 2, 0
0000A48E 0000 0000                  		dc.l Map_Scen
0000A492 44D8                       		dc.w $44D8
0000A494 0008 0200                  		dc.b 0,	8, 2, 0
0000A498 0000 9542                  		dc.l Map_Bri
0000A49C 438E                       		dc.w $438E
0000A49E 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4A2                            		even
0000A4A2                            		even
0000A4A2                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            ; Sprite mappings - SLZ	lava thrower
0000A4A2                            ; ---------------------------------------------------------------------------
0000A4A2                            Map_Scen_internal:
0000A4A2 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4A4 01                         byte_8858:	dc.b 1
0000A4A5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4AA                            		even
0000A4AA                            		even
0000A4AA                            
0000A4AA                            		include	"_incObj\1D Unused Switch.asm"
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Object 1D - switch that activates when Sonic touches it
0000A4AA                            ; (this	is not used anywhere in	the game)
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            
0000A4AA                            MagicSwitch:
0000A4AA 7000                       		moveq	#0,d0
0000A4AC 1028 0024                  		move.b	obRoutine(a0),d0
0000A4B0 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4B4 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4B8                            ; ===========================================================================
0000A4B8 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4BA 0000                       		dc.w Swi_Action-Swi_Index
0000A4BC 0000                       		dc.w Swi_Delete-Swi_Index
0000A4BE                            
0000A4BE =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4BE                            ; ===========================================================================
0000A4BE                            
0000A4BE                            Swi_Main:	; Routine 0
0000A4BE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4C2 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A4CA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A4D0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A4D6 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A4DC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A4E2 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A4E8                            
0000A4E8                            Swi_Action:	; Routine 2
0000A4E8 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A4EE 323C 0010                  		move.w	#$10,d1
0000A4F2 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A4F6 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A4F8                            
0000A4F8 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A4FC 7001                       		moveq	#1,d0
0000A4FE 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A502                            
0000A502                            Swi_ChkDel:
0000A502 6100 0000                  		bsr.w	DisplaySprite
0000A524 4E75                       		rts	
0000A526                            ; ===========================================================================
0000A526                            
0000A526                            Swi_Delete:	; Routine 4
0000A526 6100 0000                  		bsr.w	DeleteObject
0000A52A 4E75                       		rts	
0000A52C                            
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C                            ; Subroutine to	check if Sonic touches the object
0000A52C                            ; ---------------------------------------------------------------------------
0000A52C                            
0000A52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A52C                            
0000A52C                            
0000A52C                            Swi_ChkTouch:
0000A52C 43F8 D000                  		lea	(v_player).w,a1
0000A530 3029 0008                  		move.w	obX(a1),d0
0000A534 9068 0008                  		sub.w	obX(a0),d0
0000A538 D041                       		add.w	d1,d0
0000A53A 6B00                       		bmi.s	Swi_NoTouch
0000A53C D241                       		add.w	d1,d1
0000A53E B041                       		cmp.w	d1,d0
0000A540 6400                       		bcc.s	Swi_NoTouch
0000A542 3429 000C                  		move.w	obY(a1),d2
0000A546 1229 0016                  		move.b	obHeight(a1),d1
0000A54A 4881                       		ext.w	d1
0000A54C D242                       		add.w	d2,d1
0000A54E 3028 000C                  		move.w	obY(a0),d0
0000A552 0440 0010                  		subi.w	#$10,d0
0000A556 9041                       		sub.w	d1,d0
0000A558 6200                       		bhi.s	Swi_NoTouch
0000A55A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A55E 6500                       		bcs.s	Swi_NoTouch
0000A560 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A562 4E75                       		rts	
0000A564                            ; ===========================================================================
0000A564                            
0000A564                            Swi_NoTouch:
0000A564 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A566 4E75                       		rts	
0000A568                            ; End of function Swi_ChkTouch
0000A568                            ; End of function Swi_ChkTouch
0000A568                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            ; Sprite mappings - Unused switch thingy
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            Map_Swi_internal:
0000A568 0000                       		dc.w byte_891E-Map_Swi_internal
0000A56A 04                         byte_891E:	dc.b 4
0000A56B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A570 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A575 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A57A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A580 00                         		even
0000A580 00                         		even
0000A580                            
0000A580                            		include	"_incObj\2A SBZ Small Door.asm"
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            ; Object 2A - small vertical door (SBZ)
0000A580                            ; ---------------------------------------------------------------------------
0000A580                            
0000A580                            AutoDoor:
0000A580 7000                       		moveq	#0,d0
0000A582 1028 0024                  		move.b	obRoutine(a0),d0
0000A586 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A58A 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A58E                            ; ===========================================================================
0000A58E 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A590 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            ADoor_Main:	; Routine 0
0000A592 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A596 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A59E 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5A4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5AA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5B0                            		;move.b	#4,obPriority(a0)
0000A5B0                            
0000A5B0                            ADoor_OpenShut:	; Routine 2
0000A5B0 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5B4 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5B8 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5BC D041                       		add.w	d1,d0
0000A5BE B068 0008                  		cmp.w	obX(a0),d0
0000A5C2 6500                       		bcs.s	ADoor_Animate
0000A5C4 9041                       		sub.w	d1,d0
0000A5C6 9041                       		sub.w	d1,d0
0000A5C8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A5CC 6400                       		bcc.s	ADoor_Animate	; close door
0000A5CE D041                       		add.w	d1,d0
0000A5D0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A5D4 6400                       		bcc.s	loc_899A	; if yes, branch
0000A5D6 0828 0000 0022             		btst	#0,obStatus(a0)
0000A5DC 6600                       		bne.s	ADoor_Animate
0000A5DE 6000                       		bra.s	ADoor_Open
0000A5E0                            ; ===========================================================================
0000A5E0                            
0000A5E0                            loc_899A:
0000A5E0 0828 0000 0022             		btst	#0,obStatus(a0)
0000A5E6 6700                       		beq.s	ADoor_Animate
0000A5E8                            
0000A5E8                            ADoor_Open:
0000A5E8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A5EE                            
0000A5EE                            ADoor_Animate:
0000A5EE 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A5F4 6100 0000                  		bsr.w	AnimateSprite
0000A5F8 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A5FC 6600                       		bne.s	@remember	; if yes, branch
0000A5FE 323C 0011                  		move.w	#$11,d1
0000A602 343C 0020                  		move.w	#$20,d2
0000A606 3602                       		move.w	d2,d3
0000A608 5243                       		addq.w	#1,d3
0000A60A 3828 0008                  		move.w	obX(a0),d4
0000A60E 6100 0000                  		bsr.w	SolidObject
0000A612                            
0000A612                            	@remember:
0000A612 6000 0000                  		bra.w	RememberState
0000A612 6000 0000                  		bra.w	RememberState
0000A616                            		include	"_anim\SBZ Small Door.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Animation script - doors (SBZ)
0000A616                            ; ---------------------------------------------------------------------------
0000A616 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A618 0000                       		dc.w @open-Ani_ADoor
0000A61A 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A626 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A632                            		even
0000A632                            		even
0000A632                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A632                            ; --------------------------------------------------------------------------------
0000A632                            
0000A632                            SME_YnmwF:	
0000A632 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A636 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A63A 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A63E 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A642 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A644 02                         SME_YnmwF_12:	dc.b 2	
0000A645 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A64A 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A64F 02                         SME_YnmwF_1D:	dc.b 2	
0000A650 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A655 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A65A 02                         SME_YnmwF_28:	dc.b 2	
0000A65B D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A660 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A665 02                         SME_YnmwF_33:	dc.b 2	
0000A666 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A66B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A670 02                         SME_YnmwF_3E:	dc.b 2	
0000A671 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A676 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A67B 02                         SME_YnmwF_49:	dc.b 2	
0000A67C CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A681 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A686 02                         SME_YnmwF_54:	dc.b 2	
0000A687 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A68C 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A691 02                         SME_YnmwF_5F:	dc.b 2	
0000A692 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A697 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A69C 02                         SME_YnmwF_6A:	dc.b 2	
0000A69D C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6A2 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6A8 00                         		even
0000A6A8 00                         		even
0000A6A8                            
0000A6A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6A8                            
0000A6A8                            
0000A6A8                            Obj44_SolidWall:
0000A6A8 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6AC 6700                       		beq.s	loc_8AA8
0000A6AE 6B00 0000                  		bmi.w	loc_8AC4
0000A6B2 4A40                       		tst.w	d0
0000A6B4 6700 0000                  		beq.w	loc_8A92
0000A6B8 6B00                       		bmi.s	loc_8A7C
0000A6BA 4A69 0010                  		tst.w	obVelX(a1)
0000A6BE 6B00                       		bmi.s	loc_8A92
0000A6C0 6000                       		bra.s	loc_8A82
0000A6C2                            ; ===========================================================================
0000A6C2                            
0000A6C2                            loc_8A7C:
0000A6C2 4A69 0010                  		tst.w	obVelX(a1)
0000A6C6 6A00                       		bpl.s	loc_8A92
0000A6C8                            
0000A6C8                            loc_8A82:
0000A6C8 9169 0008                  		sub.w	d0,obX(a1)
0000A6CC 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A6D2 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A6D8                            
0000A6D8                            loc_8A92:
0000A6D8 0829 0001 0022             		btst	#1,obStatus(a1)
0000A6DE 6600                       		bne.s	loc_8AB6
0000A6E0 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A6E6 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A6EC 4E75                       		rts	
0000A6EE                            ; ===========================================================================
0000A6EE                            
0000A6EE                            loc_8AA8:
0000A6EE 0828 0005 0022             		btst	#5,obStatus(a0)
0000A6F4 6700                       		beq.s	locret_8AC2
0000A6F6 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A6FC                            
0000A6FC                            loc_8AB6:
0000A6FC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A702 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A708                            
0000A708                            locret_8AC2:
0000A708 4E75                       		rts	
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            loc_8AC4:
0000A70A 4A69 0012                  		tst.w	obVelY(a1)
0000A70E 6A00                       		bpl.s	locret_8AD8
0000A710 4A43                       		tst.w	d3
0000A712 6A00                       		bpl.s	locret_8AD8
0000A714 9769 000C                  		sub.w	d3,obY(a1)
0000A718 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A71E                            
0000A71E                            locret_8AD8:
0000A71E 4E75                       		rts	
0000A720                            ; End of function Obj44_SolidWall
0000A720                            
0000A720                            
0000A720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A720                            
0000A720                            
0000A720                            Obj44_SolidWall2:
0000A720 43F8 D000                  		lea	(v_player).w,a1
0000A724 3029 0008                  		move.w	obX(a1),d0
0000A728 9068 0008                  		sub.w	obX(a0),d0
0000A72C D041                       		add.w	d1,d0
0000A72E 6B00                       		bmi.s	loc_8B48
0000A730 3601                       		move.w	d1,d3
0000A732 D643                       		add.w	d3,d3
0000A734 B043                       		cmp.w	d3,d0
0000A736 6200                       		bhi.s	loc_8B48
0000A738 1629 0016                  		move.b	obHeight(a1),d3
0000A73C 4883                       		ext.w	d3
0000A73E D443                       		add.w	d3,d2
0000A740 3629 000C                  		move.w	obY(a1),d3
0000A744 9668 000C                  		sub.w	obY(a0),d3
0000A748 D642                       		add.w	d2,d3
0000A74A 6B00                       		bmi.s	loc_8B48
0000A74C 3802                       		move.w	d2,d4
0000A74E D844                       		add.w	d4,d4
0000A750 B644                       		cmp.w	d4,d3
0000A752 6400                       		bhs.s	loc_8B48
0000A754 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A758 6B00                       		bmi.s	loc_8B48
0000A75A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A760 6400                       		bhs.s	loc_8B48
0000A762 4A78 FE08                  		tst.w	(v_debuguse).w
0000A766 6600                       		bne.s	loc_8B48
0000A768 3A00                       		move.w	d0,d5
0000A76A B240                       		cmp.w	d0,d1
0000A76C 6400                       		bhs.s	loc_8B30
0000A76E D241                       		add.w	d1,d1
0000A770 9041                       		sub.w	d1,d0
0000A772 3A00                       		move.w	d0,d5
0000A774 4445                       		neg.w	d5
0000A776                            
0000A776                            loc_8B30:
0000A776 3203                       		move.w	d3,d1
0000A778 B443                       		cmp.w	d3,d2
0000A77A 6400                       		bhs.s	loc_8B3C
0000A77C 9644                       		sub.w	d4,d3
0000A77E 3203                       		move.w	d3,d1
0000A780 4441                       		neg.w	d1
0000A782                            
0000A782                            loc_8B3C:
0000A782 BA41                       		cmp.w	d1,d5
0000A784 6200                       		bhi.s	loc_8B44
0000A786 7801                       		moveq	#1,d4
0000A788 4E75                       		rts	
0000A78A                            ; ===========================================================================
0000A78A                            
0000A78A                            loc_8B44:
0000A78A 78FF                       		moveq	#-1,d4
0000A78C 4E75                       		rts	
0000A78E                            ; ===========================================================================
0000A78E                            
0000A78E                            loc_8B48:
0000A78E 7800                       		moveq	#0,d4
0000A790 4E75                       		rts	
0000A792                            ; End of function Obj44_SolidWall2
0000A792                            
0000A792                            ; ===========================================================================
0000A792                            
0000A792                            		include	"_incObj\1E Ball Hog.asm"
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            ; Object 1E - Ball Hog enemy (SBZ)
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            
0000A792                            BallHog:
0000A792 7000                       		moveq	#0,d0
0000A794 1028 0024                  		move.b	obRoutine(a0),d0
0000A798 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A79C 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7A0                            ; ===========================================================================
0000A7A0 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7A2 0000                       		dc.w Hog_Action-Hog_Index
0000A7A4                            
0000A7A4 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7A4                            ; ===========================================================================
0000A7A4                            
0000A7A4                            Hog_Main:	; Routine 0
0000A7A4 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7AA 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7B0 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7B8 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7BE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A7CA 117C 0005 0020             		move.b	#5,obColType(a0)
0000A7D0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A7D6 6100 0000                  		bsr.w	ObjectFall
0000A7DA 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A7E0 4A41                       		tst.w	d1
0000A7E2 6A00                       		bpl.s	@floornotfound
0000A7E4 D368 000C                  		add.w	d1,obY(a0)
0000A7E8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A7EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7F2                            
0000A7F2                            	@floornotfound:
0000A7F2 4E75                       		rts	
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Hog_Action:	; Routine 2
0000A7F4 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A7FA 6100 0000                  		bsr.w	AnimateSprite
0000A7FE 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A804 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A806 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A80A 6700                       		beq.s	@makeball	; if yes, branch
0000A80C 6000                       		bra.s	@remember
0000A80E                            ; ===========================================================================
0000A80E                            
0000A80E                            @setlaunchflag:
0000A80E 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A812                            
0000A812                            @remember:
0000A812 6000 0000                  		bra.w	RememberState
0000A816                            ; ===========================================================================
0000A816                            
0000A816                            @makeball:
0000A816 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A81C 6100 0000                  		bsr.w	FindFreeObj
0000A820 6600                       		bne.s	@fail
0000A822 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A826 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A82C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A832 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A838 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A83E 70FC                       		moveq	#-4,d0
0000A840 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A846 6700                       		beq.s	@noflip		; if not, branch
0000A848 4440                       		neg.w	d0
0000A84A 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A84E                            
0000A84E                            	@noflip:
0000A84E D169 0008                  		add.w	d0,obX(a1)
0000A852 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A858 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A85E                            
0000A85E                            	@fail:
0000A85E 60B2                       		bra.s	@remember
0000A85E 60B2                       		bra.s	@remember
0000A860                            		include	"_incObj\20 Cannonball.asm"
0000A860                            ; ---------------------------------------------------------------------------
0000A860                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A860                            ; ---------------------------------------------------------------------------
0000A860                            
0000A860                            Cannonball:
0000A860 7000                       		moveq	#0,d0
0000A862 1028 0024                  		move.b	obRoutine(a0),d0
0000A866 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A86A 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A86E                            ; ===========================================================================
0000A86E 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A870 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A872                            
0000A872 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A872                            ; ===========================================================================
0000A872                            
0000A872                            Cbal_Main:	; Routine 0
0000A872 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A876 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A87C 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A884 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A88A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A890 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A896 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A89C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8A2 7000                       		moveq	#0,d0
0000A8A4 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8AC 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8B0 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8B6                            
0000A8B6                            Cbal_Bounce:	; Routine 2
0000A8B6 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8BC 4A68 0012                  		tst.w	obVelY(a0)
0000A8C0 6B00                       		bmi.s	Cbal_ChkExplode
0000A8C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8C8 4A41                       		tst.w	d1		; has ball hit the floor?
0000A8CA 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A8CC                            
0000A8CC D368 000C                  		add.w	d1,obY(a0)
0000A8D0 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A8D6 4A03                       		tst.b	d3
0000A8D8 6700                       		beq.s	Cbal_ChkExplode
0000A8DA 6B00                       		bmi.s	loc_8CA4
0000A8DC 4A68 0010                  		tst.w	obVelX(a0)
0000A8E0 6A00                       		bpl.s	Cbal_ChkExplode
0000A8E2 4468 0010                  		neg.w	obVelX(a0)
0000A8E6 6000                       		bra.s	Cbal_ChkExplode
0000A8E8                            ; ===========================================================================
0000A8E8                            
0000A8E8                            loc_8CA4:
0000A8E8 4A68 0010                  		tst.w	obVelX(a0)
0000A8EC 6B00                       		bmi.s	Cbal_ChkExplode
0000A8EE 4468 0010                  		neg.w	obVelX(a0)
0000A8F2                            
0000A8F2                            Cbal_ChkExplode:
0000A8F2 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A8F6 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A8F8                            
0000A8F8                            	Cbal_Explode:
0000A8F8 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A8FC 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A900 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A906 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A90A                            ; ===========================================================================
0000A90A                            
0000A90A                            Cbal_Animate:
0000A90A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A90E 6A00                       		bpl.s	Cbal_Display
0000A910 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A916 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A91C                            
0000A91C                            Cbal_Display:
0000A91C 6100 0000                  		bsr.w	DisplaySprite
0000A920 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A924 0640 00E0                  		addi.w	#$E0,d0
0000A928 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A92C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A930 4E75                       		rts	
0000A930 4E75                       		rts	
0000A932                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A932                            ; ---------------------------------------------------------------------------
0000A932                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A932                            ; ---------------------------------------------------------------------------
0000A932                            
0000A932                            MissileDissolve:
0000A932 7000                       		moveq	#0,d0
0000A934 1028 0024                  		move.b	obRoutine(a0),d0
0000A938 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A93C 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A940                            ; ===========================================================================
0000A940 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A942 0000                       		dc.w MDis_Animate-MDis_Index
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            MDis_Main:	; Routine 0
0000A944 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A948 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A950 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A956 117C 0004 0001             		move.b	#4,obRender(a0)
0000A95C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A962 117C 0000 0020             		move.b	#0,obColType(a0)
0000A968 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A96E 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A974 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A984                            
0000A984                            MDis_Animate:	; Routine 2
0000A984 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A988 6A00                       		bpl.s	@display
0000A98A 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A990 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A994 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A99A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A99E                            
0000A99E                            	@display:
0000A99E 6000 0000                  		bra.w	DisplaySprite
0000A9A2                            ; ===========================================================================
0000A9A2                            
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9A2                            ; ---------------------------------------------------------------------------
0000A9A2                            
0000A9A2                            ExplosionItem:
0000A9A2 7000                       		moveq	#0,d0
0000A9A4 1028 0024                  		move.b	obRoutine(a0),d0
0000A9A8 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9AC 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9B0                            ; ===========================================================================
0000A9B0 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9B2 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9B4 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9B6                            ; ===========================================================================
0000A9B6                            
0000A9B6                            ExItem_Animal:	; Routine 0
0000A9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9BA 6100 0000                  		bsr.w	FindFreeObj
0000A9BE 6600                       		bne.s	ExItem_Main
0000A9C0 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A9C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A9CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A9D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A9D6                            
0000A9D6                            ExItem_Main:	; Routine 2
0000A9D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9DA 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A9E2 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A9E8 117C 0004 0001             		move.b	#4,obRender(a0)
0000A9EE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A9F4 117C 0000 0020             		move.b	#0,obColType(a0)
0000A9FA 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA00 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA06 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA16                            
0000AA16                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA16 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA1A 6A00                       		bpl.s	@display
0000AA1C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA22 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA26 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA2C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA30                            
0000AA30                            	@display:
0000AA30 6000 0000                  		bra.w	DisplaySprite
0000AA34                            ; ===========================================================================
0000AA34                            ; ---------------------------------------------------------------------------
0000AA34                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA34                            ; ---------------------------------------------------------------------------
0000AA34                            
0000AA34                            ExplosionBomb:
0000AA34 7000                       		moveq	#0,d0
0000AA36 1028 0024                  		move.b	obRoutine(a0),d0
0000AA3A 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA3E 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA42                            ; ===========================================================================
0000AA42 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA44 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA46                            ; ===========================================================================
0000AA46                            
0000AA46                            ExBom_Main:	; Routine 0
0000AA46 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA4A 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA52 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA58 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA5E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA64 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA6A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA70 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AA76 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA86                            		include	"_anim\Ball Hog.asm"
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86                            ; Animation script - doors (SBZ)
0000AA86                            ; ---------------------------------------------------------------------------
0000AA86 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AA88 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AAA0 00                         		even
0000AAA0 00                         		even
0000AAA0                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AAA0                            ; --------------------------------------------------------------------------------
0000AAA0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AAA0                            ; --------------------------------------------------------------------------------
0000AAA0                            
0000AAA0                            SME_ZER01:	
0000AAA0 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AAA4 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAA8 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AAAC 02                         SME_ZER01_C:	dc.b 2	
0000AAAD EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAB2 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAB7 02                         SME_ZER01_17:	dc.b 2	
0000AAB8 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AABD FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AAC2 02                         SME_ZER01_22:	dc.b 2	
0000AAC3 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AAC8 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AACD 02                         SME_ZER01_2D:	dc.b 2	
0000AACE E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AAD3 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AAD8 01                         SME_ZER01_38:	dc.b 1	
0000AAD9 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AADE 01                         SME_ZER01_3E:	dc.b 1	
0000AADF F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AAE4                            		even
0000AAE4                            		even
0000AAE4                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AAE4                            ; ---------------------------------------------------------------------------
0000AAE4                            ; Sprite mappings - buzz bomber missile vanishing
0000AAE4                            ; ---------------------------------------------------------------------------
0000AAE4                            Map_MisDissolve_internal:
0000AAE4 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AAE6 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AAE8 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AAEA 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AAEC 01                         byte_8EAE:	dc.b 1
0000AAED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AAF2 01                         byte_8EB4:	dc.b 1
0000AAF3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AAF8 01                         byte_8EBA:	dc.b 1
0000AAF9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AAFE 01                         byte_8EC0:	dc.b 1
0000AAFF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB04                            		even
0000AB04                            		even
0000AB04                            		include	"_maps\Explosions.asm"
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            ; Sprite mappings - explosion from a badnik or monitor
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB08 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB0C 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB0E 01                         byte_8ED0:	dc.b 1
0000AB0F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB14 01                         byte_8ED6:	dc.b 1
0000AB15 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB1A 01                         byte_8EDC:	dc.b 1
0000AB1B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB20 04                         byte_8EE2:	dc.b 4
0000AB21 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB26 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB2B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB30 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB35 04                         byte_8EF7:	dc.b 4
0000AB36 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB3B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB40 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB45 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB4A                            		even
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB4A                            ; ---------------------------------------------------------------------------
0000AB4A FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB4C 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB4E 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB50 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB52 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB54 01                         byte_8F16:	dc.b 1
0000AB55 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB5A 01                         byte_8F1C:	dc.b 1
0000AB5B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB60                            		even
0000AB60                            		even
0000AB60                            
0000AB60                            		include	"_incObj\28 Animals.asm"
0000AB60                            ; ---------------------------------------------------------------------------
0000AB60                            ; Object 28 - animals
0000AB60                            ; ---------------------------------------------------------------------------
0000AB60                            
0000AB60                            Animals:
0000AB60 7000                       		moveq	#0,d0
0000AB62 1028 0024                  		move.b	obRoutine(a0),d0
0000AB66 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AB6A 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AB6E                            ; ===========================================================================
0000AB6E 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AB72 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AB76 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AB7A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AB7E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AB82 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AB86 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AB8A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AB8E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AB92 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AB96 0000                       		dc.w loc_92D6-Anml_Index
0000AB98                            
0000AB98 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABA4                            
0000ABA4 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABA8 0000 0000                  		dc.l Map_Animal1
0000ABAC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABB0 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABB4 FE80 FD00                  		dc.w $FE80, $FD00
0000ABB8 0000 0000                  		dc.l Map_Animal1
0000ABBC FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABC0 0000 0000                  		dc.l Map_Animal2
0000ABC4 FE40 FD00                  		dc.w $FE40, $FD00
0000ABC8 0000 0000                  		dc.l Map_Animal3
0000ABCC FD00 FC00                  		dc.w $FD00, $FC00
0000ABD0 0000 0000                  		dc.l Map_Animal2
0000ABD4 FD80 FC80                  		dc.w $FD80, $FC80
0000ABD8 0000 0000                  		dc.l Map_Animal3
0000ABDC                            
0000ABDC FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000ABEC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000ABFC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC08                            
0000AC08 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC1C 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC30 0000 0000                  		dc.l Map_Animal3
0000AC34                            
0000AC34 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC46 0565 05B3                  		dc.w $565, $5B3
0000AC4A                            ; ===========================================================================
0000AC4A                            
0000AC4A                            Anml_Ending:	; Routine 0
0000AC4A 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC4E 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC52 7000                       		moveq	#0,d0
0000AC54 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC58 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC5A 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC5E 0440 0014                  		subi.w	#$14,d0
0000AC62 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AC68 D040                       		add.w	d0,d0
0000AC6A 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AC70 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AC74 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AC7A 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AC80 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AC86 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AC8C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AC92 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC98 08E8 0000 0001             		bset	#0,obRender(a0)
0000AC9E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACA4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACAA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACB0 6000 0000                  		bra.w	DisplaySprite
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            Anml_FromEnemy:
0000ACB4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACB8 6100 8D52                  		bsr.w	RandomNumber
0000ACBC 0240 0001                  		andi.w	#1,d0
0000ACC0 7200                       		moveq	#0,d1
0000ACC2 1238 FE10                  		move.b	(v_zone).w,d1
0000ACC6 D241                       		add.w	d1,d1
0000ACC8 D240                       		add.w	d0,d1
0000ACCA 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ACCE 1031 1000                  		move.b	(a1,d1.w),d0
0000ACD2 1140 0030                  		move.b	d0,$30(a0)
0000ACD6 E748                       		lsl.w	#3,d0
0000ACD8 43FA FECA                  		lea	Anml_Variables(pc),a1
0000ACDC D2C0                       		adda.w	d0,a1
0000ACDE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000ACE2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000ACE6 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000ACEA 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000ACF0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000ACF6 6700                       		beq.s	loc_90C0	; if yes, branch
0000ACF8 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000ACFE                            
0000ACFE                            loc_90C0:
0000ACFE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD04 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD0A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD10 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD16 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD1C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD22 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD28 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD2E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD32 6600                       		bne.s	loc_911C
0000AD34 6100 0000                  		bsr.w	FindFreeObj
0000AD38 6600                       		bne.s	Anml_Display
0000AD3A 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD44 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD4A 3028 003E                  		move.w	$3E(a0),d0
0000AD4E E248                       		lsr.w	#1,d0
0000AD50 1340 001A                  		move.b	d0,obFrame(a1)
0000AD54                            
0000AD54                            Anml_Display:
0000AD54 6000 0000                  		bra.w	DisplaySprite
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_911C:
0000AD58 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD5E 4268 0010                  		clr.w	obVelX(a0)
0000AD62 6000 0000                  		bra.w	DisplaySprite
0000AD66                            ; ===========================================================================
0000AD66                            
0000AD66                            loc_912A:
0000AD66 4A28 0001                  		tst.b	obRender(a0)
0000AD6A 6A00 0000                  		bpl.w	DeleteObject
0000AD6E 6100 0000                  		bsr.w	ObjectFall
0000AD72 4A68 0012                  		tst.w	obVelY(a0)
0000AD76 6B00                       		bmi.s	loc_9180
0000AD78 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD7E 4A41                       		tst.w	d1
0000AD80 6A00                       		bpl.s	loc_9180
0000AD82 D368 000C                  		add.w	d1,obY(a0)
0000AD86 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AD8C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AD92 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AD98 1028 0030                  		move.b	$30(a0),d0
0000AD9C D000                       		add.b	d0,d0
0000AD9E 5800                       		addq.b	#4,d0
0000ADA0 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADA4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADA8 6700                       		beq.s	loc_9180
0000ADAA 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADB0 6700                       		beq.s	loc_9180
0000ADB2 4468 0010                  		neg.w	obVelX(a0)
0000ADB6 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADBC                            
0000ADBC                            loc_9180:
0000ADBC 6000 0000                  		bra.w	DisplaySprite
0000ADC0                            ; ===========================================================================
0000ADC0                            
0000ADC0                            loc_9184:
0000ADC0 6100 0000                  		bsr.w	ObjectFall
0000ADC4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADCA 4A68 0012                  		tst.w	obVelY(a0)
0000ADCE 6B00                       		bmi.s	loc_91AE
0000ADD0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000ADD6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADDC 4A41                       		tst.w	d1
0000ADDE 6A00                       		bpl.s	loc_91AE
0000ADE0 D368 000C                  		add.w	d1,obY(a0)
0000ADE4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADEA                            
0000ADEA                            loc_91AE:
0000ADEA 4A28 0028                  		tst.b	obSubtype(a0)
0000ADEE 6600                       		bne.s	loc_9224
0000ADF0 4A28 0001                  		tst.b	obRender(a0)
0000ADF4 6A00 0000                  		bpl.w	DeleteObject
0000ADF8 6000 0000                  		bra.w	DisplaySprite
0000ADFC                            ; ===========================================================================
0000ADFC                            
0000ADFC                            loc_91C0:
0000ADFC 6100 0000                  		bsr.w	SpeedToPos
0000AE00 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE06 4A68 0012                  		tst.w	obVelY(a0)
0000AE0A 6B00                       		bmi.s	loc_91FC
0000AE0C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE12 4A41                       		tst.w	d1
0000AE14 6A00                       		bpl.s	loc_91FC
0000AE16 D368 000C                  		add.w	d1,obY(a0)
0000AE1A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE20 4A28 0028                  		tst.b	obSubtype(a0)
0000AE24 6700                       		beq.s	loc_91FC
0000AE26 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE2C 6700                       		beq.s	loc_91FC
0000AE2E 4468 0010                  		neg.w	obVelX(a0)
0000AE32 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE38                            
0000AE38                            loc_91FC:
0000AE38 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE3C 6A00                       		bpl.s	loc_9212
0000AE3E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE44 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE48 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE4E                            
0000AE4E                            loc_9212:
0000AE4E 4A28 0028                  		tst.b	obSubtype(a0)
0000AE52 6600                       		bne.s	loc_9224
0000AE54 4A28 0001                  		tst.b	obRender(a0)
0000AE58 6A00 0000                  		bpl.w	DeleteObject
0000AE5C 6000 0000                  		bra.w	DisplaySprite
0000AE60                            ; ===========================================================================
0000AE60                            
0000AE60                            loc_9224:
0000AE60 3028 0008                  		move.w	obX(a0),d0
0000AE64 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE68 6500                       		bcs.s	loc_923C
0000AE6A 0440 0180                  		subi.w	#$180,d0
0000AE6E 6A00                       		bpl.s	loc_923C
0000AE70 4A28 0001                  		tst.b	obRender(a0)
0000AE74 6A00 0000                  		bpl.w	DeleteObject
0000AE78                            
0000AE78                            loc_923C:
0000AE78 6000 0000                  		bra.w	DisplaySprite
0000AE7C                            ; ===========================================================================
0000AE7C                            
0000AE7C                            loc_9240:
0000AE7C 4A28 0001                  		tst.b	obRender(a0)
0000AE80 6A00 0000                  		bpl.w	DeleteObject
0000AE84 5368 0036                  		subq.w	#1,$36(a0)
0000AE88 6600 0000                  		bne.w	loc_925C
0000AE8C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AE92 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AE98                            
0000AE98                            loc_925C:
0000AE98 6000 0000                  		bra.w	DisplaySprite
0000AE9C                            ; ===========================================================================
0000AE9C                            
0000AE9C                            loc_9260:
0000AE9C 6100 0000                  		bsr.w	sub_9404
0000AEA0 6400                       		bcc.s	loc_927C
0000AEA2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AEA8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEAE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEB4 6000 FF46                  		bra.w	loc_91C0
0000AEB8                            ; ===========================================================================
0000AEB8                            
0000AEB8                            loc_927C:
0000AEB8 6000 FFA6                  		bra.w	loc_9224
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            loc_9280:
0000AEBC 6100 0000                  		bsr.w	sub_9404
0000AEC0 6A00                       		bpl.s	loc_92B6
0000AEC2 4268 0010                  		clr.w	obVelX(a0)
0000AEC6 4268 0032                  		clr.w	$32(a0)
0000AECA 6100 0000                  		bsr.w	SpeedToPos
0000AECE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AED4 6100 0000                  		bsr.w	loc_93C4
0000AED8 6100 0000                  		bsr.w	loc_93EC
0000AEDC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AEE0 6A00                       		bpl.s	loc_92B6
0000AEE2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AEE8 5228 001A                  		addq.b	#1,obFrame(a0)
0000AEEC 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AEF2                            
0000AEF2                            loc_92B6:
0000AEF2 6000 FF6C                  		bra.w	loc_9224
0000AEF6                            ; ===========================================================================
0000AEF6                            
0000AEF6                            loc_92BA:
0000AEF6 6100 0000                  		bsr.w	sub_9404
0000AEFA 6A00                       		bpl.s	loc_9310
0000AEFC 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF02 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF08 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF0E 6000 FEB0                  		bra.w	loc_9184
0000AF12                            ; ===========================================================================
0000AF12                            
0000AF12                            loc_92D6:
0000AF12 6100 0000                  		bsr.w	ObjectFall
0000AF16 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF1C 4A68 0012                  		tst.w	obVelY(a0)
0000AF20 6B00                       		bmi.s	loc_9310
0000AF22 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF28 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF2E 4A41                       		tst.w	d1
0000AF30 6A00                       		bpl.s	loc_9310
0000AF32 4628 0029                  		not.b	$29(a0)
0000AF36 6600                       		bne.s	loc_9306
0000AF38 4468 0010                  		neg.w	obVelX(a0)
0000AF3C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF42                            
0000AF42                            loc_9306:
0000AF42 D368 000C                  		add.w	d1,obY(a0)
0000AF46 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF4C                            
0000AF4C                            loc_9310:
0000AF4C 6000 FF12                  		bra.w	loc_9224
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            loc_9314:
0000AF50 6100 0000                  		bsr.w	sub_9404
0000AF54 6A00                       		bpl.s	loc_932E
0000AF56 4268 0010                  		clr.w	obVelX(a0)
0000AF5A 4268 0032                  		clr.w	$32(a0)
0000AF5E 6100 0000                  		bsr.w	ObjectFall
0000AF62 6100 0000                  		bsr.w	loc_93C4
0000AF66 6100 0000                  		bsr.w	loc_93EC
0000AF6A                            
0000AF6A                            loc_932E:
0000AF6A 6000 FEF4                  		bra.w	loc_9224
0000AF6E                            ; ===========================================================================
0000AF6E                            
0000AF6E                            loc_9332:
0000AF6E 6100 0000                  		bsr.w	sub_9404
0000AF72 6A00                       		bpl.s	loc_936C
0000AF74 6100 0000                  		bsr.w	ObjectFall
0000AF78 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF7E 4A68 0012                  		tst.w	obVelY(a0)
0000AF82 6B00                       		bmi.s	loc_936C
0000AF84 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF8A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF90 4A41                       		tst.w	d1
0000AF92 6A00                       		bpl.s	loc_936C
0000AF94 4468 0010                  		neg.w	obVelX(a0)
0000AF98 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF9E D368 000C                  		add.w	d1,obY(a0)
0000AFA2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFA8                            
0000AFA8                            loc_936C:
0000AFA8 6000 FEB6                  		bra.w	loc_9224
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            loc_9370:
0000AFAC 6100 0000                  		bsr.w	sub_9404
0000AFB0 6A00                       		bpl.s	loc_93C0
0000AFB2 6100 0000                  		bsr.w	SpeedToPos
0000AFB6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFBC 4A68 0012                  		tst.w	obVelY(a0)
0000AFC0 6B00                       		bmi.s	loc_93AA
0000AFC2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFC8 4A41                       		tst.w	d1
0000AFCA 6A00                       		bpl.s	loc_93AA
0000AFCC 4628 0029                  		not.b	$29(a0)
0000AFD0 6600                       		bne.s	loc_93A0
0000AFD2 4468 0010                  		neg.w	obVelX(a0)
0000AFD6 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFDC                            
0000AFDC                            loc_93A0:
0000AFDC D368 000C                  		add.w	d1,obY(a0)
0000AFE0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFE6                            
0000AFE6                            loc_93AA:
0000AFE6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AFEA 6A00                       		bpl.s	loc_93C0
0000AFEC 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AFF2 5228 001A                  		addq.b	#1,obFrame(a0)
0000AFF6 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AFFC                            
0000AFFC                            loc_93C0:
0000AFFC 6000 FE62                  		bra.w	loc_9224
0000B000                            ; ===========================================================================
0000B000                            
0000B000                            loc_93C4:
0000B000 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B006 4A68 0012                  		tst.w	obVelY(a0)
0000B00A 6B00                       		bmi.s	locret_93EA
0000B00C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B012 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B018 4A41                       		tst.w	d1
0000B01A 6A00                       		bpl.s	locret_93EA
0000B01C D368 000C                  		add.w	d1,obY(a0)
0000B020 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B026                            
0000B026                            locret_93EA:
0000B026 4E75                       		rts	
0000B028                            ; ===========================================================================
0000B028                            
0000B028                            loc_93EC:
0000B028 08E8 0000 0001             		bset	#0,obRender(a0)
0000B02E 3028 0008                  		move.w	obX(a0),d0
0000B032 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B036 6400                       		bcc.s	locret_9402
0000B038 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B03E                            
0000B03E                            locret_9402:
0000B03E 4E75                       		rts	
0000B040                            
0000B040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B040                            
0000B040                            
0000B040                            sub_9404:
0000B040 3038 D008                  		move.w	(v_player+obX).w,d0
0000B044 9068 0008                  		sub.w	obX(a0),d0
0000B048 0440 00B8                  		subi.w	#$B8,d0
0000B04C 4E75                       		rts	
0000B04E                            ; End of function sub_9404
0000B04E                            ; End of function sub_9404
0000B04E                            		include	"_incObj\29 Points.asm"
0000B04E                            ; ---------------------------------------------------------------------------
0000B04E                            ; Object 29 - points that appear when you destroy something
0000B04E                            ; ---------------------------------------------------------------------------
0000B04E                            
0000B04E                            Points:
0000B04E 7000                       		moveq	#0,d0
0000B050 1028 0024                  		move.b	obRoutine(a0),d0
0000B054 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B058 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B05C 6000 0000                  		bra.w	DisplaySprite
0000B060                            ; ===========================================================================
0000B060 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B062 0000                       		dc.w Poi_Slower-Poi_Index
0000B064                            ; ===========================================================================
0000B064                            
0000B064                            Poi_Main:	; Routine 0
0000B064 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B068 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B070 317C 27B2 0002             		move.w	#$27B2,obGfx(a0)
0000B076 117C 0004 0001             		move.b	#4,obRender(a0)
0000B07C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B082 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B088 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B08E                            
0000B08E                            Poi_Slower:	; Routine 2
0000B08E 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B092 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B096 6100 0000                  		bsr.w	SpeedToPos
0000B09A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0A0 4E75                       		rts	
0000B0A0 4E75                       		rts	
0000B0A2                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2                            ; Sprite mappings - animals
0000B0A2                            ; ---------------------------------------------------------------------------
0000B0A2                            Map_Animal1_internal:
0000B0A2 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0A4 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0A6 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0A8 01                         byte_946C:	dc.b 1
0000B0A9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0AE 01                         byte_9472:	dc.b 1
0000B0AF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0B4 01                         byte_9478:	dc.b 1
0000B0B5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0BA                            		even
0000B0BA                            		even
0000B0BA                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            ; Sprite mappings - animals
0000B0BA                            ; ---------------------------------------------------------------------------
0000B0BA                            Map_Animal2_internal:
0000B0BA 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0BC 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0BE 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0C0 01                         byte_9484:	dc.b 1
0000B0C1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0C6 01                         byte_948A:	dc.b 1
0000B0C7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B0CC 01                         byte_9490:	dc.b 1
0000B0CD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B0D2                            		even
0000B0D2                            		even
0000B0D2                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            ; Sprite mappings - animals
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            Map_Animal3_internal:
0000B0D2 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B0D4 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B0D6 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B0D8 01                         byte_949C:	dc.b 1
0000B0D9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0DE 01                         byte_94A2:	dc.b 1
0000B0DF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B0E4 01                         byte_94A8:	dc.b 1
0000B0E5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B0EA                            		even
0000B0EA                            		even
0000B0EA                            Map_Poi:	include	"_maps\Points.asm"
0000B0EA                            ; --------------------------------------------------------------------------------
0000B0EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B0EA                            ; --------------------------------------------------------------------------------
0000B0EA                            
0000B0EA                            SME_qLvsg:	
0000B0EA 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B0EE 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B0F2 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B0F6 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B0F8 01                         SME_qLvsg_E:	dc.b 1	
0000B0F9 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B0FE 01                         SME_qLvsg_14:	dc.b 1	
0000B0FF FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B104 01                         SME_qLvsg_1A:	dc.b 1	
0000B105 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B10A 01                         SME_qLvsg_20:	dc.b 1	
0000B10B FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B110 01                         SME_qLvsg_26:	dc.b 1	
0000B111 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B116 02                         SME_qLvsg_2C:	dc.b 2	
0000B117 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B11C FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B121 02                         SME_qLvsg_37:	dc.b 2	
0000B122 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B127 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B12C                            		even
0000B12C                            		even
0000B12C                            
0000B12C                            		include	"_incObj\1F Crabmeat.asm"
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B12C                            ; ---------------------------------------------------------------------------
0000B12C                            
0000B12C                            Crabmeat:
0000B12C 7000                       		moveq	#0,d0
0000B12E 1028 0024                  		move.b	obRoutine(a0),d0
0000B132 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B136 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B13A                            ; ===========================================================================
0000B13A                            Crab_Index:
0000B13A 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B13C 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B13E 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B140 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B142 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B144                            
0000B144 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B144 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B144 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B144 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B144 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B144                            
0000B144 =00000030                  crab_timedelay:	equ $30
0000B144 =00000032                  crab_mode:	equ $32
0000B144                            ; ===========================================================================
0000B144                            
0000B144                            Crab_Main:	; Routine 0
0000B144 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B14A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B150 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B158 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B15E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B164 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B16A 117C 0006 0020             		move.b	#6,obColType(a0)
0000B170 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B176 6100 0000                  		bsr.w	ObjectFall
0000B17A 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B180 4A41                       		tst.w	d1
0000B182 6A00                       		bpl.s	@floornotfound
0000B184 D368 000C                  		add.w	d1,obY(a0)
0000B188 1143 0026                  		move.b	d3,obAngle(a0)
0000B18C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B192 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B196                            
0000B196                            	@floornotfound:
0000B196 4E75                       		rts	
0000B198                            ; ===========================================================================
0000B198                            
0000B198                            Crab_Action:	; Routine 2
0000B198 7000                       		moveq	#0,d0
0000B19A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B19E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1A2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1A6 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1AC 6100 0000                  		bsr.w	AnimateSprite
0000B1B0 6000 0000                  		bra.w	RememberState
0000B1B4                            ; ===========================================================================
0000B1B4 0000                       @index:		dc.w @waittofire-@index
0000B1B6 0000                       		dc.w @walkonfloor-@index
0000B1B8                            ; ===========================================================================
0000B1B8                            
0000B1B8                            @waittofire:
0000B1B8 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1BC 6A00                       		bpl.s	@dontmove
0000B1BE 4A28 0001                  		tst.b	obRender(a0)
0000B1C2 6A00                       		bpl.s	@movecrab
0000B1C4 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B1CA 6600                       		bne.s	@fire
0000B1CC                            
0000B1CC                            	@movecrab:
0000B1CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B1D0 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B1D6 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B1DC 6100 0000                  		bsr.w	Crab_SetAni
0000B1E0 5600                       		addq.b	#3,d0
0000B1E2 1140 001C                  		move.b	d0,obAnim(a0)
0000B1E6 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B1EC 6600                       		bne.s	@noflip
0000B1EE 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B1F2                            
0000B1F2                            	@dontmove:
0000B1F2                            	@noflip:
0000B1F2 4E75                       		rts	
0000B1F4                            ; ===========================================================================
0000B1F4                            
0000B1F4                            @fire:
0000B1F4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B1FA 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B200 6100 0000                  		bsr.w	FindFreeObj
0000B204 6600                       		bne.s	@failleft
0000B206 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B20A 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B210 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B216 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B21C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B222 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B228                            
0000B228                            	@failleft:
0000B228 6100 0000                  		bsr.w	FindFreeObj
0000B22C 6600                       		bne.s	@failright
0000B22E 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B232 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B238 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B23E 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B244 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B24A 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B250                            
0000B250                            	@failright:
0000B250 4E75                       		rts	
0000B252                            ; ===========================================================================
0000B252                            
0000B252                            @walkonfloor:
0000B252 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B256 6B00                       		bmi.s	loc_966E
0000B258 6100 0000                  		bsr.w	SpeedToPos
0000B25C 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B262 6600                       		bne.s	loc_9654
0000B264 3628 0008                  		move.w	obX(a0),d3
0000B268 0643 0010                  		addi.w	#$10,d3
0000B26C 0828 0000 0022             		btst	#0,obStatus(a0)
0000B272 6700                       		beq.s	loc_9640
0000B274 0443 0020                  		subi.w	#$20,d3
0000B278                            
0000B278                            loc_9640:
0000B278 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B27E 0C41 FFF8                  		cmpi.w	#-8,d1
0000B282 6D00                       		blt.s	loc_966E
0000B284 0C41 000C                  		cmpi.w	#$C,d1
0000B288 6C00                       		bge.s	loc_966E
0000B28A 4E75                       		rts	
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            loc_9654:
0000B28C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B292 D368 000C                  		add.w	d1,obY(a0)
0000B296 1143 0026                  		move.b	d3,obAngle(a0)
0000B29A 6100 0000                  		bsr.w	Crab_SetAni
0000B29E 5600                       		addq.b	#3,d0
0000B2A0 1140 001C                  		move.b	d0,obAnim(a0)
0000B2A4 4E75                       		rts	
0000B2A6                            ; ===========================================================================
0000B2A6                            
0000B2A6                            loc_966E:
0000B2A6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2AA 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2B0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2B6 6100 0000                  		bsr.w	Crab_SetAni
0000B2BA 1140 001C                  		move.b	d0,obAnim(a0)
0000B2BE 4E75                       		rts	
0000B2C0                            ; ---------------------------------------------------------------------------
0000B2C0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2C0                            ; ---------------------------------------------------------------------------
0000B2C0                            
0000B2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2C0                            
0000B2C0                            
0000B2C0                            Crab_SetAni:
0000B2C0 7000                       		moveq	#0,d0
0000B2C2 1628 0026                  		move.b	obAngle(a0),d3
0000B2C6 6B00                       		bmi.s	loc_96A4
0000B2C8 0C03 0006                  		cmpi.b	#6,d3
0000B2CC 6500                       		bcs.s	locret_96A2
0000B2CE 7001                       		moveq	#1,d0
0000B2D0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2D6 6600                       		bne.s	locret_96A2
0000B2D8 7002                       		moveq	#2,d0
0000B2DA                            
0000B2DA                            locret_96A2:
0000B2DA 4E75                       		rts	
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            loc_96A4:
0000B2DC 0C03 00FA                  		cmpi.b	#-6,d3
0000B2E0 6200                       		bhi.s	locret_96B6
0000B2E2 7002                       		moveq	#2,d0
0000B2E4 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2EA 6600                       		bne.s	locret_96B6
0000B2EC 7001                       		moveq	#1,d0
0000B2EE                            
0000B2EE                            locret_96B6:
0000B2EE 4E75                       		rts	
0000B2F0                            ; End of function Crab_SetAni
0000B2F0                            
0000B2F0                            ; ===========================================================================
0000B2F0                            
0000B2F0                            Crab_Delete:	; Routine 4
0000B2F0 6100 0000                  		bsr.w	DeleteObject
0000B2F4 4E75                       		rts	
0000B2F6                            ; ===========================================================================
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            ; Sub-object - missile that the	Crabmeat throws
0000B2F6                            ; ---------------------------------------------------------------------------
0000B2F6                            
0000B2F6                            Crab_BallMain:	; Routine 6
0000B2F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B2FA 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B302 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B308 117C 0004 0001             		move.b	#4,obRender(a0)
0000B30E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B314 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B31A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B320 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B326 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B32C                            
0000B32C                            Crab_BallMove:	; Routine 8
0000B32C 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B332 6100 0000                  		bsr.w	AnimateSprite
0000B336 6100 0000                  		bsr.w	ObjectFall
0000B33A 6100 0000                  		bsr.w	DisplaySprite
0000B33E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B342 0640 00E0                  		addi.w	#$E0,d0
0000B346 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B34A 6500                       		bcs.s	@delete		; if yes, branch
0000B34C 4E75                       		rts	
0000B34E                            
0000B34E                            	@delete:
0000B34E 6000 0000                  		bra.w	DeleteObject
0000B34E 6000 0000                  		bra.w	DeleteObject
0000B352                            		include	"_anim\Crabmeat.asm"
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            ; Animation script - Crabmeat enemy
0000B352                            ; ---------------------------------------------------------------------------
0000B352 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B358 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B35E 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B362 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B366 00                         		even
0000B366 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B36A 00                         		even
0000B36A 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B36E 00                         		even
0000B36E 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B374 00                         		even
0000B374 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B37A 00                         		even
0000B37A 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B380 00                         		even
0000B380 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B384 00                         		even
0000B384 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B388                            		even
0000B388                            		even
0000B388                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B388                            ; ---------------------------------------------------------------------------
0000B388                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B388                            ; ---------------------------------------------------------------------------
0000B388                            Map_Crab_internal:
0000B388 0000                       		dc.w @stand-Map_Crab_internal
0000B38A 0000                       		dc.w @walk-Map_Crab_internal
0000B38C 0000                       		dc.w @slope1-Map_Crab_internal
0000B38E 0000                       		dc.w @slope2-Map_Crab_internal
0000B390 0000                       		dc.w @firing-Map_Crab_internal
0000B392 0000                       		dc.w @ball1-Map_Crab_internal
0000B394 0000                       		dc.w @ball2-Map_Crab_internal
0000B396 04                         @stand:		dc.b 4
0000B397 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B39C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3A1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3A6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3AB 04                         @walk:		dc.b 4
0000B3AC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3B1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3B6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3BB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3C0 04                         @slope1:	dc.b 4
0000B3C1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B3C6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B3CB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B3D0 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B3D5 04                         @slope2:	dc.b 4
0000B3D6 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B3DB EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B3E0 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B3E5 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B3EA 06                         @firing:	dc.b 6
0000B3EB F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B3F0 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B3F5 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B3FA F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B3FF 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B404 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B409 01                         @ball1:		dc.b 1
0000B40A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B40F 01                         @ball2:		dc.b 1
0000B410 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B416 00                         		even
0000B416 00                         		even
0000B416                            		include	"_incObj\06 Mozzietron.asm"
0000B416                            ; ===========================================================================
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B416                            ; ---------------------------------------------------------------------------
0000B416                            
0000B416                            Mozzietron:					; XREF: Obj_Index
0000B416 7000                       		moveq	#0,d0
0000B418 1028 0024                  		move.b	$24(a0),d0
0000B41C 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B420 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B424                            ; ===========================================================================
0000B424 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B426 0000                       		dc.w MozAction-MozIndex
0000B428 0000                       		dc.w MozDelete-MozIndex
0000B42A                            ; ===========================================================================
0000B42A                            
0000B42A                            MozMain:				; XREF: MozIndex
0000B42A 5428 0024                  		addq.b	#2,$24(a0)
0000B42E 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B436 317C 0444 0002             		move.w	#$444,2(a0)
0000B43C 117C 0004 0001             		move.b	#4,1(a0)
0000B442 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B448 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B44E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B454                            MozAction:				; XREF: MozIndex
0000B454 7000                       		moveq	#0,d0
0000B456 1028 0025                  		move.b	$25(a0),d0
0000B45A 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B45E 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B462 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B468 6100 0000                  		bsr.w	AnimateSprite
0000B46C 6000 0000                  		bra.w	RememberState
0000B470                            ; ===========================================================================
0000B470 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B472 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B474 0000                       		dc.w MozPinned-MozIndex2
0000B476                            ; ===========================================================================
0000B476                            
0000B476                            MozMove:				; XREF: MozIndex2
0000B476 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B47A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B47C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B482 6600                       		bne.s	MozFire	; if yes, branch
0000B484 5428 0025                  		addq.b	#2,$25(a0)
0000B488 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B48E 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B494 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B49A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4A0 6600                       		bne.s	locret_986C	; if not, branch
0000B4A2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4A6                            
0000B4A6                            locret_986C:
0000B4A6 4E75                       		rts	
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            MozFire:				; XREF: MozMove
0000B4A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4AE 6100 0000                  		bsr.w	ObjectFall
0000B4B2 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4B8 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4BA 6A00                       		bpl.s   @return ; if yes, branch 
0000B4BC 303C 00B6                  		move.w    #$B6,d0
0000B4C0 4EB9 0000 1250             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B4C6 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B4CC D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B4D0 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B4D4 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B4D8                            		@return:
0000B4D8 4E75                       	    		rts
0000B4DA                            		
0000B4DA                            
0000B4DA                            ; ===========================================================================
0000B4DA                            
0000B4DA                            MozPinned:
0000B4DA 4E75                               rts
0000B4DC                                    
0000B4DC                            ; ===========================================================================
0000B4DC                            
0000B4DC                            MozChkDel:				; XREF: Obj55_DropFly
0000B4DC 4A28 0001                  		tst.b	1(a0)
0000B4E0 6A00 0000                  		bpl.w	DeleteObject
0000B4E4 4E75                       		rts	
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            MozChkNrSonic:			; XREF: MozIndex2
0000B4E6                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4E6 6B00                       		bmi.s	MozChgDir
0000B4E8 6100 0000                  		bsr.w	SpeedToPos
0000B4EC 4A28 0034                  		tst.b	$34(a0)
0000B4F0 6600                       		bne.s	locret_992A
0000B4F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B4F6 9068 0008                  		sub.w	8(a0),d0
0000B4FA 6A00                       		bpl.s	MozSetNrSonic
0000B4FC 4440                       		neg.w	d0
0000B4FE                            
0000B4FE                            MozSetNrSonic:
0000B4FE 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B502 6400                       		bcc.s	locret_992A	; if not, branch
0000B504 4A28 0001                  		tst.b	1(a0)
0000B508 6A00                       		bpl.s	locret_992A
0000B50A 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B510 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B516 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B51C 6000                       		bra.s	MozStop
0000B51E                            ; ===========================================================================
0000B51E                            
0000B51E                            MozChgDir:				; XREF: MozChkNrSonic
0000B51E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B524 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B52A 317C 003B 0032             		move.w	#59,$32(a0)
0000B530                            
0000B530                            MozStop:				; XREF: MozSetNrSonic
0000B530 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B534 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B53A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B540                            
0000B540                            locret_992A:
0000B540 4E75                       		rts	
0000B542                            ; ===========================================================================
0000B542                            
0000B542                            MozDelete:				; XREF: MozIndex
0000B542 6100 0000                  		bsr.w	DeleteObject
0000B546 4E75                       		rts	
0000B546 4E75                       		rts	
0000B548                            		include	"_incObj\22 Buzz Bomber.asm"
0000B548                            ; ===========================================================================
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            
0000B548                            BuzzBomber:
0000B548 7000                       		moveq	#0,d0
0000B54A 1028 0024                  		move.b	obRoutine(a0),d0
0000B54E 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B552 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B556                            ; ===========================================================================
0000B556 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B558 0000                       		dc.w Buzz_Action-Buzz_Index
0000B55A 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B55C                            
0000B55C =00000032                  buzz_timedelay:	equ $32
0000B55C =00000034                  buzz_buzzstatus:	equ $34
0000B55C =0000003C                  buzz_parent:	equ $3C
0000B55C                            ; ===========================================================================
0000B55C                            
0000B55C                            Buzz_Main:	; Routine 0
0000B55C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B560 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B568 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B56E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B574 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B57A 117C 0008 0020             		move.b	#8,obColType(a0)
0000B580 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B586                            
0000B586                            Buzz_Action:	; Routine 2
0000B586 7000                       		moveq	#0,d0
0000B588 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B58C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B590 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B594 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B59A 6100 0000                  		bsr.w	AnimateSprite
0000B59E 6000 0000                  		bra.w	RememberState
0000B5A2                            ; ===========================================================================
0000B5A2 0000                       @index:		dc.w @move-@index
0000B5A4 0000                       		dc.w @chknearsonic-@index
0000B5A6                            ; ===========================================================================
0000B5A6                            
0000B5A6                            @move:
0000B5A6 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5AA 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5AC 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5B2 6600                       		bne.s	@fire		; if yes, branch
0000B5B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5B8 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5BE 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B5C4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B5CA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B5D0 6600                       		bne.s	@noflip		; if not, branch
0000B5D2 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B5D6                            
0000B5D6                            	@noflip:
0000B5D6 4E75                       		rts	
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            	@fire:
0000B5D8 6100 0000                  		bsr.w	FindFreeObj
0000B5DC 6600                       		bne.s	@fail
0000B5DE 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B5E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B5E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B5EE 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B5F4 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B5FA 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B600 303C 0018                  		move.w	#$18,d0
0000B604 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B60A 6600                       		bne.s	@noflip2	; if not, branch
0000B60C 4440                       		neg.w	d0
0000B60E 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B612                            
0000B612                            	@noflip2:
0000B612 D169 0008                  		add.w	d0,obX(a1)
0000B616 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B61C 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B622 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B626 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B62C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B632 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B638                            
0000B638                            	@fail:
0000B638 4E75                       		rts	
0000B63A                            ; ===========================================================================
0000B63A                            
0000B63A                            @chknearsonic:
0000B63A 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B63E 6B00                       		bmi.s	@chgdirection
0000B640 6100 0000                  		bsr.w	SpeedToPos
0000B644 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B648 6600                       		bne.s	@keepgoing
0000B64A 3038 D008                  		move.w	(v_player+obX).w,d0
0000B64E 9068 0008                  		sub.w	obX(a0),d0
0000B652 6A00                       		bpl.s	@isleft
0000B654 4440                       		neg.w	d0
0000B656                            
0000B656                            	@isleft:
0000B656 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B65A 6400                       		bcc.s	@keepgoing	; if not, branch
0000B65C 4A28 0001                  		tst.b	obRender(a0)
0000B660 6A00                       		bpl.s	@keepgoing
0000B662 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B668 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B66E 6000                       		bra.s	@stop
0000B670                            ; ===========================================================================
0000B670                            
0000B670                            	@chgdirection:
0000B670 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B676 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B67C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B682                            
0000B682                            	@stop:
0000B682 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B686 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B68C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B692                            
0000B692                            @keepgoing:
0000B692 4E75                       		rts	
0000B694                            ; ===========================================================================
0000B694                            
0000B694                            Buzz_Delete:	; Routine 4
0000B694 6100 0000                  		bsr.w	DeleteObject
0000B698 4E75                       		rts	
0000B698 4E75                       		rts	
0000B69A                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            ; Object 23 - missile that Buzz	Bomber throws
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            
0000B69A                            Missile:
0000B69A 7000                       		moveq	#0,d0
0000B69C 1028 0024                  		move.b	obRoutine(a0),d0
0000B6A0 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6A4 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6A8                            ; ===========================================================================
0000B6A8 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6AA 0000                       		dc.w Msl_Animate-Msl_Index
0000B6AC 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6AE 0000                       		dc.w Msl_Delete-Msl_Index
0000B6B0 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6B2                            
0000B6B2 =0000003C                  msl_parent:	equ $3C
0000B6B2                            ; ===========================================================================
0000B6B2                            
0000B6B2                            Msl_Main:	; Routine 0
0000B6B2 5368 0032                  		subq.w	#1,$32(a0)
0000B6B6 6A00                       		bpl.s	Msl_ChkCancel
0000B6B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6BC 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B6C4 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B6CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B6D0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B6D6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B6DC 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B6E2 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B6E6 6700                       		beq.s	Msl_Animate	; if not, branch
0000B6E8                            
0000B6E8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B6EE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B6F4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B6FA 6000                       		bra.s	Msl_Animate2
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            Msl_Animate:	; Routine 2
0000B6FC 6100                       		bsr.s	Msl_ChkCancel
0000B6FE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B704 6100 0000                  		bsr.w	AnimateSprite
0000B708 6000 0000                  		bra.w	DisplaySprite
0000B70C                            
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B70C                            ; destroyed, and if it has, then cancel	the missile
0000B70C                            ; ---------------------------------------------------------------------------
0000B70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B70C                            
0000B70C                            
0000B70C                            Msl_ChkCancel:
0000B70C 2268 003C                  		movea.l	msl_parent(a0),a1
0000B710 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B714 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B716 4E75                       		rts	
0000B718                            ; End of function Msl_ChkCancel
0000B718                            
0000B718                            ; ===========================================================================
0000B718                            
0000B718                            Msl_FromBuzz:	; Routine 4
0000B718 0828 0007 0022             		btst	#7,obStatus(a0)
0000B71E 6600                       		bne.s	@explode
0000B720 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B726 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B72C 6100 0000                  		bsr.w	SpeedToPos
0000B730 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B736 6100 0000                  		bsr.w	AnimateSprite
0000B73A 6100 0000                  		bsr.w	DisplaySprite
0000B73E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B742 0640 00E0                  		addi.w	#$E0,d0
0000B746 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B74A 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B74C 4E75                       		rts	
0000B74E                            ; ===========================================================================
0000B74E                            
0000B74E                            	@explode:
0000B74E 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B752 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B758 6000 F1D8                  		bra.w	MissileDissolve
0000B75C                            ; ===========================================================================
0000B75C                            
0000B75C                            Msl_Delete:	; Routine 6
0000B75C 6100 0000                  		bsr.w	DeleteObject
0000B760 4E75                       		rts	
0000B762                            ; ===========================================================================
0000B762                            
0000B762                            Msl_FromNewt:	; Routine 8
0000B762 4A28 0001                  		tst.b	obRender(a0)
0000B766 6AF4                       		bpl.s	Msl_Delete
0000B768 6100 0000                  		bsr.w	SpeedToPos
0000B76C                            
0000B76C                            Msl_Animate2:
0000B76C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B772 6100 0000                  		bsr.w	AnimateSprite
0000B776 6100 0000                  		bsr.w	DisplaySprite
0000B77A 4E75                       		rts	
0000B77A 4E75                       		rts	
0000B77C                            		include	"_anim\Mozzietron.asm"
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C                            ; Animation script - Buzz Bomber enemy
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B77E 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B780 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B782 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B786 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B78A 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B792 00                         		even
0000B792 00                         		even
0000B792                            		include	"_anim\Buzz Bomber.asm"
0000B792                            ; ---------------------------------------------------------------------------
0000B792                            ; Animation script - Buzz Bomber enemy
0000B792                            ; ---------------------------------------------------------------------------
0000B792 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B794 0000                       		dc.w @fly2-Ani_Buzz
0000B796 0000                       		dc.w @fires-Ani_Buzz
0000B798 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B79C 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7A0 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7A4                            		even
0000B7A4                            		even
0000B7A4                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Animation script - missile that Buzz Bomber throws
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7A6 0000                       		dc.w @missile-Ani_Missile
0000B7A8 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7AC 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7B0                            		even
0000B7B0                            		even
0000B7B0                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7B0                            ; --------------------------------------------------------------------------------
0000B7B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7B0                            ; --------------------------------------------------------------------------------
0000B7B0                            
0000B7B0                            SME_qvHIs:	
0000B7B0 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7B4 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7B8 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7BC 02                         SME_qvHIs_C:	dc.b 2	
0000B7BD FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B7C2 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B7C7 01                         SME_qvHIs_17:	dc.b 1	
0000B7C8 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B7CD 02                         SME_qvHIs_1D:	dc.b 2	
0000B7CE E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B7D3 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B7D8 03                         SME_qvHIs_28:	dc.b 3	
0000B7D9 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B7DE E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B7E3 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B7E8 04                         SME_qvHIs_38:	dc.b 4	
0000B7E9 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B7EE F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B7F3 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B7F8 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B7FD 04                         SME_qvHIs_4D:	dc.b 4	
0000B7FE E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B803 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B808 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B80D F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B812                            		even
0000B812                            		even
0000B812                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B812                            ; --------------------------------------------------------------------------------
0000B812                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B812                            ; --------------------------------------------------------------------------------
0000B812                            
0000B812                            SME_yccqJ:	
0000B812 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B816 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B81A 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B81E 06                         SME_yccqJ_C:	dc.b 6	
0000B81F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B824 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B829 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B82E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B833 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B838 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B83D 06                         SME_yccqJ_2B:	dc.b 6	
0000B83E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B843 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B848 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B84D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B852 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B857 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B85C 06                         SME_yccqJ_4A:	dc.b 6	
0000B85D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B862 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B867 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B86C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B871 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B876 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B87B 06                         SME_yccqJ_69:	dc.b 6	
0000B87C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B881 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B886 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B88B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B890 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B895 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B89A 07                         SME_yccqJ_88:	dc.b 7	
0000B89B F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8A0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8A5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8AA EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8AF 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8B4 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8B9 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8BE 04                         SME_yccqJ_AC:	dc.b 4	
0000B8BF F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8C4 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8C9 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8CE 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B8D4 00                         		even
0000B8D4 00                         		even
0000B8D4                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B8D4                            ; ---------------------------------------------------------------------------
0000B8D4                            ; Sprite mappings - missile that Buzz Bomber throws
0000B8D4                            ; ---------------------------------------------------------------------------
0000B8D4                            Map_Missile_internal:
0000B8D4 0000                       		dc.w @Flare1-Map_Missile_internal
0000B8D6 0000                       		dc.w @Flare2-Map_Missile_internal
0000B8D8 0000                       		dc.w @Ball1-Map_Missile_internal
0000B8DA 0000                       		dc.w @Ball2-Map_Missile_internal
0000B8DC 01                         @Flare1:	dc.b 1
0000B8DD F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B8E2 01                         @Flare2:	dc.b 1
0000B8E3 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B8E8 01                         @Ball1:		dc.b 1
0000B8E9 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B8EE 01                         @Ball2:		dc.b 1
0000B8EF F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B8F4                            		even
0000B8F4                            		even
0000B8F4                            
0000B8F4                            		include	"_incObj\25 & 37 Rings.asm"
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            ; Object 25 - rings
0000B8F4                            ; ---------------------------------------------------------------------------
0000B8F4                            
0000B8F4                            Rings:
0000B8F4 7000                       		moveq	#0,d0
0000B8F6 1028 0024                  		move.b	obRoutine(a0),d0
0000B8FA 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B8FE 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B902                            ; ===========================================================================
0000B902                            Ring_Index:
0000B902 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B904 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B906 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B908 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B90A 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B90C 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B90E 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B910 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B912 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B914                            
0000B914 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B914 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B914 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B914 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B914 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B914 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B914 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B914 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B914 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            ; Distances between rings (format: horizontal, vertical)
0000B914                            ; ---------------------------------------------------------------------------
0000B914 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B916 1800                       		dc.b $18, 0		; horizontal normal
0000B918 2000                       		dc.b $20, 0		; horizontal wide
0000B91A 0010                       		dc.b 0,	$10		; vertical tight
0000B91C 0018                       		dc.b 0,	$18		; vertical normal
0000B91E 0020                       		dc.b 0,	$20		; vertical wide
0000B920 1010                       		dc.b $10, $10		; diagonal
0000B922 1818                       		dc.b $18, $18
0000B924 2020                       		dc.b $20, $20
0000B926 F010                       		dc.b $F0, $10
0000B928 E818                       		dc.b $E8, $18
0000B92A E020                       		dc.b $E0, $20
0000B92C 1008                       		dc.b $10, 8
0000B92E 1810                       		dc.b $18, $10
0000B930 F008                       		dc.b $F0, 8
0000B932 E810                       		dc.b $E8, $10
0000B934                            ; ===========================================================================
0000B934                            
0000B934                            Ring_Main:	; Routine 0
0000B934 45F8 FC00                  		lea	(v_objstate).w,a2
0000B938 7000                       		moveq	#0,d0
0000B93A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B93E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B942 1812                       		move.b	(a2),d4
0000B944 1228 0028                  		move.b	obSubtype(a0),d1
0000B948 1001                       		move.b	d1,d0
0000B94A 0241 0007                  		andi.w	#7,d1
0000B94E 0C41 0007                  		cmpi.w	#7,d1
0000B952 6600                       		bne.s	loc_9B80
0000B954 7206                       		moveq	#6,d1
0000B956                            
0000B956                            	loc_9B80:
0000B956 4841                       		swap	d1
0000B958 323C 0000                  		move.w	#0,d1
0000B95C E808                       		lsr.b	#4,d0
0000B95E D040                       		add.w	d0,d0
0000B960 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B964 4885                       		ext.w	d5
0000B966 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B96A 4886                       		ext.w	d6
0000B96C 2248                       		movea.l	a0,a1
0000B96E 3428 0008                  		move.w	obX(a0),d2
0000B972 3628 000C                  		move.w	obY(a0),d3
0000B976 E20C                       		lsr.b	#1,d4
0000B978 6500                       		bcs.s	loc_9C02
0000B97A 0892 0007                  		bclr	#7,(a2)
0000B97E 6000                       		bra.s	loc_9BBA
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            Ring_MakeRings:
0000B980 4841                       		swap	d1
0000B982 E20C                       		lsr.b	#1,d4
0000B984 6500                       		bcs.s	loc_9C02
0000B986 0892 0007                  		bclr	#7,(a2)
0000B98A 6100 0000                  		bsr.w	FindFreeObj
0000B98E 6600                       		bne.s	loc_9C0E
0000B990                            
0000B990                            loc_9BBA:
0000B990 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B994 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B998 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B99C 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9A2 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9A6 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9AE 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9B4 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9BA 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9C0 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9C6 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9CC 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B9D2 1341 0034                  		move.b	d1,$34(a1)
0000B9D6                            
0000B9D6                            loc_9C02:
0000B9D6 5241                       		addq.w	#1,d1
0000B9D8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B9DA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B9DC 4841                       		swap	d1
0000B9DE 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B9E2                            
0000B9E2                            loc_9C0E:
0000B9E2 0812 0000                  		btst	#0,(a2)
0000B9E6 6600 0000                  		bne.w	DeleteObject
0000B9EA                            
0000B9EA                            Ring_Animate:	; Routine 2
0000B9EA 4A38 F5C9                  		tst.b	(v_gshield).w
0000B9EE 6700                       		beq.s	@skip
0000B9F0 4A28 0001                  		tst.b	obRender(a0)
0000B9F4 6A00                       		bpl.s	@skip
0000B9F6                            		
0000B9F6 43F8 D000                  		lea (v_player).w,a1
0000B9FA                            		
0000B9FA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B9FE 9068 0008                  		sub.w	obX(a0),d0
0000BA02 6A00                       		bpl.s	@a1
0000BA04 4440                       		neg.w	d0
0000BA06                            		
0000BA06                            	@a1:
0000BA06 0C40 0040                  		cmpi.w	#$40,d0
0000BA0A 6200                       		bhi.s	@skip
0000BA0C                            		
0000BA0C 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA10 9068 000C                  		sub.w	obY(a0),d0
0000BA14 6A00                       		bpl.s	@a2
0000BA16 4440                       		neg.w	d0
0000BA18                            		
0000BA18                            	@a2:
0000BA18 0C40 0040                  		cmpi.w	#$40,d0
0000BA1C 6200                       		bhi.s	@skip
0000BA1E                            		
0000BA1E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA24 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA2E 1228 0034                  		move.b	$34(a0),d1
0000BA32 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA36                            		
0000BA36                            	@skip:
0000BA36 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA3C 6100 0000                  		bsr.w	DisplaySprite
0000BA5C 4E75                       		rts	
0000BA5E                            ; ===========================================================================
0000BA5E                            
0000BA5E                            Ring_Collect:	; Routine 4
0000BA5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA62 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA68 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BA6E 6100 0000                  		bsr.w	CollectRing
0000BA72 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA76 7000                       		moveq	#0,d0
0000BA78 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA7C 1228 0034                  		move.b	$34(a0),d1
0000BA80 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA84                            
0000BA84                            Ring_Sparkle:	; Routine 6
0000BA84 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BA8A 6100 0000                  		bsr.w	AnimateSprite
0000BA8E 6000 0000                  		bra.w	DisplaySprite
0000BA92                            ; ===========================================================================
0000BA92                            
0000BA92                            Ring_Delete:	; Routine 8
0000BA92 6000 0000                  		bra.w	DeleteObject
0000BA96                            
0000BA96                            Ring_Attract:	; Routine $A
0000BA96 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA9A 6600                       		bne.s	@skip
0000BA9C 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BAA0 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAA6 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BAAC 6000                       		bra.s	@display
0000BAAE                            		
0000BAAE                            	@skip:
0000BAAE 323C 0030                  		move.w	#$30,d1	; horizontal
0000BAB2 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAB6 B068 0008                  		cmp.w	obX(a0),d0
0000BABA 6400                       		bcc.s	@a1
0000BABC 4441                       		neg.w	d1
0000BABE 4A68 0010                  		tst.w	obVelX(a0)
0000BAC2 6B00                       		bmi.s	@a2
0000BAC4 D241                       		add.w	d1,d1
0000BAC6 D241                       		add.w	d1,d1
0000BAC8 6000                       		bra.s	@a2
0000BACA                            
0000BACA                            	@a1:
0000BACA 4A68 0010                  		tst.w	obVelX(a0)
0000BACE 6A00                       		bpl.s	@a2
0000BAD0 D241                       		add.w	d1,d1
0000BAD2 D241                       		add.w	d1,d1
0000BAD4                            
0000BAD4                            	@a2:
0000BAD4 D368 0010                  		add.w	d1,obVelX(a0)
0000BAD8 323C 0030                  		move.w	#$30,d1	; vertical
0000BADC 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BAE0 B068 000C                  		cmp.w	obY(a0),d0
0000BAE4 6400                       		bcc.s	@a3
0000BAE6 4441                       		neg.w	d1
0000BAE8 4A68 0012                  		tst.w	obVelY(a0)
0000BAEC 6B00                       		bmi.s	@a4
0000BAEE D241                       		add.w	d1,d1
0000BAF0 D241                       		add.w	d1,d1
0000BAF2 6000                       		bra.s	@a4
0000BAF4                            
0000BAF4                            	@a3:
0000BAF4 4A68 0012                  		tst.w	obVelY(a0)
0000BAF8 6A00                       		bpl.s	@a4
0000BAFA D241                       		add.w	d1,d1
0000BAFC D241                       		add.w	d1,d1
0000BAFE                            
0000BAFE                            	@a4:
0000BAFE D368 0012                  		add.w	d1,obVelY(a0)
0000BB02 6100 0000                  		bsr.w	SpeedToPos
0000BB06                            		
0000BB06                            	@display:
0000BB06 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB0C 6000 0000                  		bra.w	DisplaySprite
0000BB10                            
0000BB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB10                            
0000BB10                            
0000BB10                            CollectRing:
0000BB10 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB14 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB1A 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB1E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB24 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB26 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB2C 6700                       		beq.s	@got100
0000BB2E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB34 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB36 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB3C 6600                       		bne.s	@playsnd
0000BB3E                            
0000BB3E                            	@got100:
0000BB3E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB42 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB46 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB4A                            		
0000BB4A                            
0000BB4A                            	@playsnd:
0000BB4A 4EF9 0000 1250             		jmp	(PlaySound_Special).l
0000BB50                            ; End of function CollectRing
0000BB50                            
0000BB50                            ; ===========================================================================
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            
0000BB50                            RingLoss:
0000BB50 7000                       		moveq	#0,d0
0000BB52 1028 0024                  		move.b	obRoutine(a0),d0
0000BB56 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB5A 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB5E                            ; ===========================================================================
0000BB5E 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB60 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BB62 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BB64 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BB66 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BB68                            ; ===========================================================================
0000BB68                            
0000BB68                            RLoss_Count:	; Routine 0
0000BB68 2248                       		movea.l	a0,a1
0000BB6A 7A00                       		moveq	#0,d5
0000BB6C 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BB70 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BB76 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BB78 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BB7C 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BB82 6700                               beq.s   @cont                       ; if not, branch
0000BB84 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BB8A 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BB8C                            @cont:
0000BB8C BA40                               cmp.w   d0,d5
0000BB8E 6500                               bcs.s   @belowmax
0000BB90 3A00                               move.w  d0,d5
0000BB92                            
0000BB92                            @belowmax:
0000BB92 5345                               subq.w  #1,d5
0000BB94 383C 0288                          move.w  #$288,d4
0000BB98 6000                       		bra.s	@makerings
0000BB9A                            ; ===========================================================================
0000BB9A                            
0000BB9A                            	@loop:
0000BB9A 6100 0000                  		bsr.w	FindFreeObj
0000BB9E 6600 0000                  		bne.w	@resetcounter
0000BBA2                            
0000BBA2                            @makerings:
0000BBA2 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBA6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBAA 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBB0 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBB6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBBC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BBC2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BBCA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BBD0 137C 0004 0001             		move.b	#4,obRender(a1)
0000BBD6 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BBDC 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BBE2 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BBE6 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BBE8 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BBEC BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BBF0 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BBF2 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BBF4 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BBF6                            @skiphalvingvel:
0000BBF6 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BBFA 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BBFE 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC02                            
0000BC02                            @resetcounter:
0000BC02 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC08 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC0E 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC14 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC16 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC1A 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC28                            
0000BC28                            RLoss_Bounce:	; Routine 2
0000BC28 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC2E 6100 0000                  		bsr.w	SpeedToPos
0000BC32 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC38 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC3C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC3E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC42 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC46 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC48 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC4E                            	@skipbounceslow:
0000BC4E 6B00                       		bmi.s	@chkdel
0000BC50 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC54 D007                       		add.b	d7,d0
0000BC56 0200 0003                  		andi.b	#3,d0
0000BC5A 6600                       		bne.s	@chkdel
0000BC5C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC62 4A41                       		tst.w	d1
0000BC64 6A00                       		bpl.s	@chkdel
0000BC66 D368 000C                  		add.w	d1,obY(a0)
0000BC6A 3028 0012                  		move.w	obVelY(a0),d0
0000BC6E E440                       		asr.w	#2,d0
0000BC70 9168 0012                  		sub.w	d0,obVelY(a0)
0000BC74 4468 0012                  		neg.w	obVelY(a0)
0000BC78                            
0000BC78                            	@chkdel:
0000BC78 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BC7C 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BC80 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BC84 0640 00E0                  		addi.w	#$E0,d0
0000BC88 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BC8C 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BC90 4A38 F5C9                  		tst.b	(v_gshield).w
0000BC94 6700                       		beq.s	@skip
0000BC96 4A28 0001                  		tst.b	obRender(a0)
0000BC9A 6A00                       		bpl.s	@skip
0000BC9C                            		
0000BC9C 43F8 D000                  		lea (v_player).w,a1
0000BCA0                            		
0000BCA0 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCA4 9068 0008                  		sub.w	obX(a0),d0
0000BCA8 6A00                       		bpl.s	@a1
0000BCAA 4440                       		neg.w	d0
0000BCAC                            		
0000BCAC                            	@a1:
0000BCAC 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCB0 6200                       		bhi.s	@skip
0000BCB2                            		
0000BCB2 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCB6 9068 000C                  		sub.w	obY(a0),d0
0000BCBA 6A00                       		bpl.s	@a2
0000BCBC 4440                       		neg.w	d0
0000BCBE                            		
0000BCBE                            	@a2:
0000BCBE 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCC2 6200                       		bhi.s	@skip
0000BCC4                            		
0000BCC4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BCCA 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BCCE                            		
0000BCCE                            	@skip:		
0000BCCE 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BCD2 D2FC 0080                          adda.w  #$80,a1
0000BCD6 0C51 007E                          cmpi.w  #$7E,(a1)
0000BCDA 6400                               bcc.s   @cont
0000BCDC 5451                               addq.w  #2,(a1)
0000BCDE D2D1                               adda.w  (a1),a1
0000BCE0 3288                               move.w  a0,(a1)
0000BCE2                            		
0000BCE2                            	@cont:
0000BCE2 4E75                               rts		
0000BCE4                            ; ===========================================================================
0000BCE4                            
0000BCE4                            RLoss_Collect:	; Routine 4
0000BCE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BCE8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BCEE 6100 FE20                  		bsr.w	CollectRing
0000BCF2                            
0000BCF2                            RLoss_Sparkle:	; Routine 6
0000BCF2 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BCF8 6100 0000                  		bsr.w	AnimateSprite
0000BCFC 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD00 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD04 6400                               bcc.s   @cont
0000BD06 5451                               addq.w  #2,(a1)
0000BD08 D2D1                               adda.w  (a1),a1
0000BD0A 3288                               move.w  a0,(a1)
0000BD0C                            			
0000BD0C                            	@cont:
0000BD0C 4E75                               rts
0000BD0E                            ; ===========================================================================
0000BD0E                            
0000BD0E                            RLoss_Delete:	; Routine 8
0000BD0E 6000 0000                  		bra.w	DeleteObject
0000BD12                            
0000BD12                            ; ----------------------------------------------------------------------------------------------
0000BD12                            ; Ring Spawn Array 
0000BD12                            ; ----------------------------------------------------------------------------------------------
0000BD12                            
0000BD12 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD22 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD32 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD42 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD52 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BD62 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BD72 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BD82 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BD92                                            even
0000BD92                            ; ===========================================================================
0000BD92                            ; -------------------------------------------------------------------------------------
0000BD92                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BD92                            ; -------------------------------------------------------------------------------------
0000BD92                            
0000BD92                            SpillRingData_Water:
0000BD92 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDA2 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDB2 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BDC2 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BDD2 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BDE2 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BDF2 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE02 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE12                                            even
0000BE12                            ; ===========================================================================				
0000BE12                            ; ===========================================================================				
0000BE12                            		include	"_incObj\4B Giant Ring.asm"
0000BE12                            ; ---------------------------------------------------------------------------
0000BE12                            ; Object 4B - giant ring for entry to special stage
0000BE12                            ; ---------------------------------------------------------------------------
0000BE12                            
0000BE12                            GiantRing:
0000BE12 7000                       		moveq	#0,d0
0000BE14 1028 0024                  		move.b	obRoutine(a0),d0
0000BE18 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE1C 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE20                            ; ===========================================================================
0000BE20 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE22 0000                       		dc.w GRing_Animate-GRing_Index
0000BE24 0000                       		dc.w GRing_Collect-GRing_Index
0000BE26 0000                       		dc.w GRing_Delete-GRing_Index
0000BE28                            ; ===========================================================================
0000BE28                            
0000BE28                            GRing_Main:    ; Routine 0
0000BE28 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE30 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE36 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE3C 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE42 4A28 0001                  		tst.b	obRender(a0)
0000BE46 6A00                       		bpl.s	GRing_Animate
0000BE48 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE4E 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE52 0C38 0001 F5C3             		cmpi.b	#1,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE58 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE5A                            
0000BE5A 4E75                       		rts    
0000BE5C                            ; ===========================================================================
0000BE5C                            
0000BE5C                            GRing_Okay:
0000BE5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE60 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BE66 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BE6C 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BE72                            
0000BE72                            GRing_Animate:	; Routine 2
0000BE72 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BE96 6000 0000                  		bra.w	DisplaySprite
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            GRing_Collect:	; Routine 4
0000BE9A 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BE9E 117C 0000 0020             		move.b	#0,obColType(a0)
0000BEA4 6100 0000                  		bsr.w	FindFreeObj
0000BEA8 6600 0000                  		bne.w	GRing_PlaySnd
0000BEAC 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEB0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEB6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEBC 2348 003C                  		move.l	a0,$3C(a1)
0000BEC0 3038 D008                  		move.w	(v_player+obX).w,d0
0000BEC4 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BEC8 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BECA 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BED0 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BED6 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BEDC                            		
0000BEDC                            GRing_PlaySnd:
0000BEE6 608A                       		bra.s	GRing_Animate
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            GRing_Delete:	; Routine 6
0000BEE8 6000 0000                  		bra.w	DeleteObject
0000BEE8 6000 0000                  		bra.w	DeleteObject
0000BEEC                            		include	"_incObj\7C Ring Flash.asm"
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            ; Object 7C - flash effect when	you collect the	giant ring
0000BEEC                            ; ---------------------------------------------------------------------------
0000BEEC                            
0000BEEC                            RingFlash:
0000BEEC 7000                       		moveq	#0,d0
0000BEEE 1028 0024                  		move.b	obRoutine(a0),d0
0000BEF2 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BEF6 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BEFA                            ; ===========================================================================
0000BEFA 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BEFC 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BEFE 0000                       		dc.w Flash_Delete-Flash_Index
0000BF00                            ; ===========================================================================
0000BF00                            
0000BF00                            Flash_Main:	; Routine 0
0000BF00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF04 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF0C 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF12 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF18 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF1E 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF24 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF2A                            
0000BF2A                            Flash_ChkDel:	; Routine 2
0000BF2A 6100                       		bsr.s	Flash_Collect
0000BF4A 6000 0000                  		bra.w	DisplaySprite
0000BF4E                            
0000BF4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF4E                            
0000BF4E                            
0000BF4E                            Flash_Collect:
0000BF4E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF52 6A00                       		bpl.s	locret_9F76
0000BF54 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF5A 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF5E 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BF64 6400                       		bcc.s	Flash_End	; if yes, branch
0000BF66 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BF6C 6600                       		bne.s	locret_9F76	; if not, branch
0000BF6E 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BF72 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BF78 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BF7E 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BF84 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BF88 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BF8C                            
0000BF8C                            locret_9F76:
0000BF8C 4E75                       		rts	
0000BF8E                            ; ===========================================================================
0000BF8E                            
0000BF8E                            Flash_End:
0000BF8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF92 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BF98 588F                       		addq.l	#4,sp
0000BF9A 4E75                       		rts	
0000BF9C                            ; End of function Flash_Collect
0000BF9C                            
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Flash_Delete:	; Routine 4
0000BF9C 6000 0000                  		bra.w	DeleteObject
0000BF9C 6000 0000                  		bra.w	DeleteObject
0000BFA0                            
0000BFA0                            		include	"_anim\Rings.asm"
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0                            ; Animation script - ring
0000BFA0                            ; ---------------------------------------------------------------------------
0000BFA0 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFA2 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFA8                            		even
0000BFA8                            		even
0000BFA8                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFA8                            ; --------------------------------------------------------------------------------
0000BFA8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFA8                            ; --------------------------------------------------------------------------------
0000BFA8                            
0000BFA8                            SME_aSMQh:	
0000BFA8 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFAC 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFB0 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFB4 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFB8 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFBC 01                         SME_aSMQh_14:	dc.b 1	
0000BFBD F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BFC2 01                         SME_aSMQh_1A:	dc.b 1	
0000BFC3 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BFC8 01                         SME_aSMQh_20:	dc.b 1	
0000BFC9 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BFCE 01                         SME_aSMQh_26:	dc.b 1	
0000BFCF F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BFD4 01                         SME_aSMQh_2C:	dc.b 1	
0000BFD5 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BFDA 01                         SME_aSMQh_32:	dc.b 1	
0000BFDB F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BFE0 01                         SME_aSMQh_38:	dc.b 1	
0000BFE1 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BFE6 01                         SME_aSMQh_3E:	dc.b 1	
0000BFE7 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BFEC 01                         SME_aSMQh_44:	dc.b 1	
0000BFED F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BFF2 01                         SME_aSMQh_4A:	dc.b 1	
0000BFF3 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BFF8                            		even
0000BFF8                            		even
0000BFF8                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BFF8                            ; ---------------------------------------------------------------------------
0000BFF8                            ; Sprite mappings - giant ring
0000BFF8                            ; ---------------------------------------------------------------------------
0000BFF8                            Map_GRing_internal:
0000BFF8 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BFFA 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BFFC 0000                       		dc.w byte_A036-Map_GRing_internal
0000BFFE 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C000 0A                         byte_9FDA:	dc.b $A
0000C001 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C006 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C00B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C010 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C015 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C01A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C01F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C024 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C029 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C02E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C033 08                         byte_A00D:	dc.b 8
0000C034 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C039 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C03E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C043 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C048 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C04D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C052 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C057 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C05C 04                         byte_A036:	dc.b 4
0000C05D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C062 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C067 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C06C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C071 08                         byte_A04B:	dc.b 8
0000C072 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C077 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C07C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C081 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C086 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C08B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C090 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C095 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C09A                            		even
0000C09A                            		even
0000C09A                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C09A                            ; ---------------------------------------------------------------------------
0000C09A                            ; Sprite mappings - flash effect when you collect the giant ring
0000C09A                            ; ---------------------------------------------------------------------------
0000C09A                            Map_Flash_internal:
0000C09A 0000                       		dc.w byte_A084-Map_Flash_internal
0000C09C 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C09E 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0A0 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0A2 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0A4 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0A6 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0A8 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0AA 02                         byte_A084:	dc.b 2
0000C0AB E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0B0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0B5 04                         byte_A08F:	dc.b 4
0000C0B6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0BB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0C0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C0C5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C0CA 04                         byte_A0A4:	dc.b 4
0000C0CB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C0D0 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C0D5 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C0DA 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C0DF 04                         byte_A0B9:	dc.b 4
0000C0E0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C0E5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C0EA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C0EF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C0F4 04                         byte_A0CE:	dc.b 4
0000C0F5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C0FA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C0FF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C104 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C109 04                         byte_A0E3:	dc.b 4
0000C10A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C10F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C114 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C119 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C11E 02                         byte_A0F8:	dc.b 2
0000C11F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C124 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C129 04                         byte_A103:	dc.b 4
0000C12A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C12F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C134 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C139 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C13E                            		even
0000C13E                            		even
0000C13E                            		include	"_incObj\26 Monitor.asm"
0000C13E                            ; ---------------------------------------------------------------------------
0000C13E                            ; Object 26 - monitors
0000C13E                            ; ---------------------------------------------------------------------------
0000C13E                            
0000C13E                            Monitor:
0000C13E 7000                       		moveq	#0,d0
0000C140 1028 0024                  		move.b	obRoutine(a0),d0
0000C144 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C148 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C14C                            ; ===========================================================================
0000C14C 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C14E 0000                       		dc.w Mon_Solid-Mon_Index
0000C150 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C152 0000                       		dc.w Mon_Animate-Mon_Index
0000C154 0000                       		dc.w Mon_Display-Mon_Index
0000C156                            ; ===========================================================================
0000C156                            
0000C156                            Mon_Main:	; Routine 0
0000C156 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C15A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C160 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C166 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C16E 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C174 117C 0004 0001             		move.b	#4,obRender(a0)
0000C17A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C180 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C186 45F8 FC00                  		lea	(v_objstate).w,a2
0000C18A 7000                       		moveq	#0,d0
0000C18C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C190 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C196 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C19C 6700                       		beq.s	@notbroken	; if not, branch
0000C19E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1A4 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1AA 4E75                       		rts	
0000C1AC                            ; ===========================================================================
0000C1AC                            
0000C1AC                            	@notbroken:
0000C1AC 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1B2 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1B8                            
0000C1B8                            Mon_Solid:	; Routine 2
0000C1B8 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1BC 6700                       		beq.s	@normal		; if not, branch
0000C1BE 5500                       		subq.b	#2,d0
0000C1C0 6600                       		bne.s	@fall
0000C1C2                            
0000C1C2                            		; 2nd Routine 2
0000C1C2 7200                       		moveq	#0,d1
0000C1C4 1228 0014                  		move.b	obActWid(a0),d1
0000C1C8 0641 000B                  		addi.w	#$B,d1
0000C1CC 6100 D000                  		bsr.w	ExitPlatform
0000C1D0 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C1D6 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C1DA 4228 0025                  		clr.b	ob2ndRout(a0)
0000C1DE 6000 0000                  		bra.w	Mon_Animate
0000C1E2                            ; ===========================================================================
0000C1E2                            
0000C1E2                            	@ontop:
0000C1E2 363C 0010                  		move.w	#$10,d3
0000C1E6 3428 0008                  		move.w	obX(a0),d2
0000C1EA 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C1EE 6000 0000                  		bra.w	Mon_Animate
0000C1F2                            ; ===========================================================================
0000C1F2                            
0000C1F2                            @fall:		; 2nd Routine 4
0000C1F2 6100 0000                  		bsr.w	ObjectFall
0000C1F6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C1FC 4A41                       		tst.w	d1
0000C1FE 6A00 0000                  		bpl.w	Mon_Animate
0000C202 D368 000C                  		add.w	d1,obY(a0)
0000C206 4268 0012                  		clr.w	obVelY(a0)
0000C20A 4228 0025                  		clr.b	ob2ndRout(a0)
0000C20E 6000 0000                  		bra.w	Mon_Animate
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            @normal:	; 2nd Routine 0
0000C212 323C 001A                  		move.w	#$1A,d1
0000C216 343C 000F                  		move.w	#$F,d2
0000C21A 6100 0000                  		bsr.w	Mon_SolidSides
0000C21E 6700 0000                  		beq.w	loc_A25C
0000C222 4A69 0012                  		tst.w	obVelY(a1)
0000C226 6B00                       		bmi.s	loc_A20A
0000C228 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C22E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C230 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C236 6700                       		beq.s	loc_A25C	; if yes, branch
0000C238 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C23E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C240                            
0000C240                            loc_A20A:
0000C240 4A41                       		tst.w	d1
0000C242 6A00                       		bpl.s	loc_A220
0000C244 9769 000C                  		sub.w	d3,obY(a1)
0000C248 6100 CE72                  		bsr.w	loc_74AE
0000C24C 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C252 6000 0000                  		bra.w	Mon_Animate
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            loc_A220:
0000C256 4A40                       		tst.w	d0
0000C258 6700 0000                  		beq.w	loc_A246
0000C25C 6B00                       		bmi.s	loc_A230
0000C25E 4A69 0010                  		tst.w	obVelX(a1)
0000C262 6B00                       		bmi.s	loc_A246
0000C264 6000                       		bra.s	loc_A236
0000C266                            ; ===========================================================================
0000C266                            
0000C266                            loc_A230:
0000C266 4A69 0010                  		tst.w	obVelX(a1)
0000C26A 6A00                       		bpl.s	loc_A246
0000C26C                            
0000C26C                            loc_A236:
0000C26C 9169 0008                  		sub.w	d0,obX(a1)
0000C270 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C276 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C27C                            
0000C27C                            loc_A246:
0000C27C 0829 0001 0022             		btst	#1,obStatus(a1)
0000C282 6600                       		bne.s	loc_A26A
0000C284 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C28A 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C290 6000                       		bra.s	Mon_Animate
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_A25C:
0000C292 0828 0005 0022             		btst	#5,obStatus(a0)
0000C298 6700                       		beq.s	Mon_Animate
0000C29A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2A0 6700                       		beq.s	loc_A26A	; if so, branch
0000C2A2 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2A8                            
0000C2A8                            loc_A26A:
0000C2A8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2AE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2B4                            
0000C2B4                            Mon_Animate:	; Routine 6
0000C2B4 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2BA 6100 0000                  		bsr.w	AnimateSprite
0000C2BE                            
0000C2BE                            Mon_Display:	; Routine 8
0000C2BE 6100 0000                  		bsr.w	DisplaySprite
0000C2E0 4E75                       		rts	
0000C2E2                            ; ===========================================================================
0000C2E2                            
0000C2E2                            Mon_BreakOpen:	; Routine 4
0000C2E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2E6 117C 0000 0020             		move.b	#0,obColType(a0)
0000C2EC 6100 0000                  		bsr.w	FindFreeObj
0000C2F0 6600                       		bne.s	Mon_Explode
0000C2F2 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C2F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C2FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C302 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C308                            
0000C308                            Mon_Explode:
0000C308 6100 0000                  		bsr.w	FindFreeObj
0000C30C 6600                       		bne.s	@fail
0000C30E 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C312 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C316 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C31C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C322                            
0000C322                            	@fail:
0000C322 45F8 FC00                  		lea	(v_objstate).w,a2
0000C326 7000                       		moveq	#0,d0
0000C328 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C32C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C332 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C338 6000 0000                  		bra.w	DisplaySprite
0000C338 6000 0000                  		bra.w	DisplaySprite
0000C33C                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C33C                            ; ---------------------------------------------------------------------------
0000C33C                            ; Object 2E - contents of monitors
0000C33C                            ; ---------------------------------------------------------------------------
0000C33C                            
0000C33C                            PowerUp:
0000C33C 7000                       		moveq	#0,d0
0000C33E 1028 0024                  		move.b	obRoutine(a0),d0
0000C342 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C346 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C34A 6000 0000                  		bra.w	DisplaySprite
0000C34E                            ; ===========================================================================
0000C34E 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C350 0000                       		dc.w Pow_Move-Pow_Index
0000C352 0000                       		dc.w Pow_Delete-Pow_Index
0000C354                            ; ===========================================================================
0000C354                            
0000C354                            Pow_Main:	; Routine 0
0000C354 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C358 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C35E 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C364 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C36A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C370 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C376 7000                       		moveq	#0,d0
0000C378 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C37C 5400                       		addq.b	#2,d0
0000C37E 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C382 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C388 D000                       		add.b	d0,d0
0000C38A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C38E 5249                       		addq.w	#1,a1
0000C390 2149 0004                  		move.l	a1,obMap(a0)
0000C394                            
0000C394                            Pow_Move:	; Routine 2
0000C394 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C398 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C39C 6100 0000                  		bsr.w	SpeedToPos
0000C3A0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3A6 4E75                       		rts	
0000C3A8                            ; ===========================================================================
0000C3A8                            
0000C3A8                            Pow_Checks:
0000C3A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3AC 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3B2                            
0000C3B2                            Pow_ChkEggman:
0000C3B2 1028 001C                  		move.b	obAnim(a0),d0
0000C3B6 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3BA 6600                       		bne.s	Pow_ChkSonic
0000C3BC                            		
0000C3BC 4EF9 0000 0000             		jmp	Spik_Hurt
0000C3C2                            		
0000C3C2 4E75                       		rts
0000C3C4                            ; ===========================================================================
0000C3C4                            
0000C3C4                            Pow_ChkSonic:
0000C3C4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C3C8 6600                       		bne.s	Pow_ChkShoes
0000C3CA                            
0000C3CA                            	ExtraLife:
0000C3CA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C3CE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C3DC                            
0000C3DC                            ; ===========================================================================
0000C3DC                            
0000C3DC                            Pow_ChkShoes:
0000C3DC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C3E0 6600                       		bne.s	Pow_ChkShield
0000C3E2                            
0000C3E2 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C3E8 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C3EE 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C3F4 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C3FA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C400 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C404 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C406 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C40C 6300                       			bls.s	Pow_NoMus
0000C418                            ; ===========================================================================
0000C418                            
0000C418                            Pow_NoMus:
0000C418 4E75                       		rts	
0000C41A                            ; ===========================================================================
0000C41A                            
0000C41A                            Pow_ChkShield:
0000C41A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C41E 6600                       		bne.s	Pow_ChkInvinc
0000C420                            
0000C420 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C426 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C42C 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C432 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C438 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C448                            ; ===========================================================================
0000C448                            
0000C448                            Pow_ChkInvinc:
0000C448 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C44C 6600                       		bne.s	Pow_ChkRings
0000C44E                            
0000C44E 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C454 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C45A 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C460 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C466 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C46C 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C472 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C478 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C47E 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C484 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C48A 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C48E 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C490 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C496 6300                       			bls.s	Pow_NoMusic
0000C4A2                            ; ===========================================================================
0000C4A2                            
0000C4A2                            Pow_NoMusic:
0000C4A2 4E75                       		rts	
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            Pow_ChkRings:
0000C4A4 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4A8 6600                       		bne.s	Pow_ChkS
0000C4AA                            
0000C4AA 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4B0 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4B6 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4BC 6500                       		bcs.s	Pow_RingSound
0000C4BE 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4C4 6700 FF04                  		beq.w	ExtraLife
0000C4C8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4CE 6500                       		bcs.s	Pow_RingSound
0000C4D0 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C4D6 6700 FEF2                  		beq.w	ExtraLife
0000C4DA                            
0000C4DA                            	Pow_RingSound:
0000C4E4                            ; ===========================================================================
0000C4E4                            
0000C4E4                            Pow_ChkS:
0000C4E4 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C4E8 6600                       		bne.s	Pow_ChkSRing
0000C4EA                            		
0000C4EA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C4F0 6700                       		beq.s	PowS2	; if yes, branch
0000C4F2 0404 003B                  		subi.b	#$3B,d4
0000C4F6 7000                       		moveq	#0,d0
0000C4F8 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C4FE 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C504 6000                       		bra.s	PowSPlay
0000C506                            
0000C506                            PowS2:
0000C506 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C50C 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C512 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C518 6500                       		bcs.s	PowSPlay
0000C51A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C520 6700 FEA8                  		beq.w	ExtraLife
0000C524 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C52A 6500                       		bcs.s	PowSPlay
0000C52C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C532 6700 FE96                  		beq.w	ExtraLife	
0000C536                            
0000C536                            PowSPlay:
0000C540                            
0000C540                            		
0000C540                            
0000C540                            
0000C540                            Pow_ChkSRing:
0000C540 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C544 6600                       		bne.s	Pow_ChkRShield
0000C546                            
0000C546                            		
0000C546 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C54C 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C552 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C558 6500                       		bcs.s	Pow_ChkSRingSound
0000C55A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C560 6700 FE68                  		beq.w	ExtraLife
0000C564 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C56A 6500                       		bcs.s	Pow_ChkSRingSound
0000C56C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C572 6700 FE56                  		beq.w	ExtraLife	
0000C576                            
0000C576                            Pow_ChkSRingSound:
0000C580                            
0000C580                            
0000C580                            Pow_ChkRShield:
0000C580 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C584 6600                       		bne.s	Pow_ChkGShield
0000C586                            
0000C586 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C58C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C592 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C598 11FC 0001 F5C8             		move.b	#1,(v_rshield).w ; give Sonic a red shield
0000C59E 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5AE                            
0000C5AE                            Pow_ChkGShield:
0000C5AE 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5B2 6600                       		bne.s	Pow_ChkSpShield
0000C5B4                            
0000C5B4                            
0000C5B4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5BA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5C0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5C6 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C5CC 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)	
0000C5DC                            
0000C5DC                            Pow_ChkSpShield:
0000C5DC 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C5E0 6600                       		bne.s	Pow_ChkEnd
0000C5E2                            
0000C5E2 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C5E8 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C5EE 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C5F4 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C5FA 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C60A 4E71                       		nop
0000C60C                            
0000C60C                            Pow_ChkEnd:
0000C60C 4E75                       		rts
0000C60E                            ; ===========================================================================
0000C60E                            
0000C60E                            Pow_Delete:	; Routine 4
0000C60E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C612 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C616 4E75                       		rts	
0000C616 4E75                       		rts	
0000C618                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C618                            ; ---------------------------------------------------------------------------
0000C618                            ; Subroutine to	make the sides of a monitor solid
0000C618                            ; ---------------------------------------------------------------------------
0000C618                            
0000C618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C618                            
0000C618                            
0000C618                            Mon_SolidSides:
0000C618 43F8 D000                  		lea	(v_player).w,a1
0000C61C 3029 0008                  		move.w	obX(a1),d0
0000C620 9068 0008                  		sub.w	obX(a0),d0
0000C624 D041                       		add.w	d1,d0
0000C626 6B00                       		bmi.s	loc_A4E6
0000C628 3601                       		move.w	d1,d3
0000C62A D643                       		add.w	d3,d3
0000C62C B043                       		cmp.w	d3,d0
0000C62E 6200                       		bhi.s	loc_A4E6
0000C630 1629 0016                  		move.b	obHeight(a1),d3
0000C634 4883                       		ext.w	d3
0000C636 D443                       		add.w	d3,d2
0000C638 3629 000C                  		move.w	obY(a1),d3
0000C63C 9668 000C                  		sub.w	obY(a0),d3
0000C640 D642                       		add.w	d2,d3
0000C642 6B00                       		bmi.s	loc_A4E6
0000C644 D442                       		add.w	d2,d2
0000C646 B642                       		cmp.w	d2,d3
0000C648 6400                       		bcc.s	loc_A4E6
0000C64A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C64E 6B00                       		bmi.s	loc_A4E6
0000C650 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C656 6400                       		bcc.s	loc_A4E6
0000C658 4A78 FE08                  		tst.w	(v_debuguse).w
0000C65C 6600                       		bne.s	loc_A4E6
0000C65E B240                       		cmp.w	d0,d1
0000C660 6400                       		bcc.s	loc_A4DC
0000C662 D241                       		add.w	d1,d1
0000C664 9041                       		sub.w	d1,d0
0000C666                            
0000C666                            loc_A4DC:
0000C666 0C43 0010                  		cmpi.w	#$10,d3
0000C66A 6500                       		bcs.s	loc_A4EA
0000C66C                            
0000C66C                            loc_A4E2:
0000C66C 7201                       		moveq	#1,d1
0000C66E 4E75                       		rts	
0000C670                            ; ===========================================================================
0000C670                            
0000C670                            loc_A4E6:
0000C670 7200                       		moveq	#0,d1
0000C672 4E75                       		rts	
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            loc_A4EA:
0000C674 7200                       		moveq	#0,d1
0000C676 1228 0014                  		move.b	obActWid(a0),d1
0000C67A 5841                       		addq.w	#4,d1
0000C67C 3401                       		move.w	d1,d2
0000C67E D442                       		add.w	d2,d2
0000C680 D269 0008                  		add.w	obX(a1),d1
0000C684 9268 0008                  		sub.w	obX(a0),d1
0000C688 6BE2                       		bmi.s	loc_A4E2
0000C68A B242                       		cmp.w	d2,d1
0000C68C 64DE                       		bcc.s	loc_A4E2
0000C68E 72FF                       		moveq	#-1,d1
0000C690 4E75                       		rts	
0000C692                            ; End of function Obj26_SolidSides
0000C692                            ; End of function Obj26_SolidSides
0000C692                            		include	"_anim\Monitor.asm"
0000C692                            ; ---------------------------------------------------------------------------
0000C692                            ; Animation script - monitors
0000C692                            ; ---------------------------------------------------------------------------
0000C692 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C698 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C69E 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C6A4 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C6AA 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C6B0 00                         		even
0000C6B0 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C6BC 00                         		even
0000C6BC 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C6C8 00                         		even
0000C6C8 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C6D4 00                         		even
0000C6D4 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C6E0 00                         		even
0000C6E0 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C6EC 00                         		even
0000C6EC 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C6F8 00                         		even
0000C6F8 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C704 00                         		even
0000C704 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C710 00                         		even
0000C710 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C718 00                         		even
0000C718 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C724 00                         		even
0000C724 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C730 00                         		even
0000C730 00                         		even
0000C730                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C730                            ; --------------------------------------------------------------------------------
0000C730                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C730                            ; --------------------------------------------------------------------------------
0000C730                            
0000C730                            SME_VSEMD:	
0000C730 0000 0000                  		dc.w SME_VSEMD_1E-SME_VSEMD, SME_VSEMD_24-SME_VSEMD	
0000C734 0000 0000                  		dc.w SME_VSEMD_2F-SME_VSEMD, SME_VSEMD_3A-SME_VSEMD	
0000C738 0000 0000                  		dc.w SME_VSEMD_45-SME_VSEMD, SME_VSEMD_50-SME_VSEMD	
0000C73C 0000 0000                  		dc.w SME_VSEMD_5B-SME_VSEMD, SME_VSEMD_66-SME_VSEMD	
0000C740 0000 0000                  		dc.w SME_VSEMD_71-SME_VSEMD, SME_VSEMD_7C-SME_VSEMD	
0000C744 0000 0000                  		dc.w SME_VSEMD_87-SME_VSEMD, SME_VSEMD_92-SME_VSEMD	
0000C748 0000 0000                  		dc.w SME_VSEMD_AC-SME_VSEMD, SME_VSEMD_B7-SME_VSEMD	
0000C74C 0000                       		dc.w SME_VSEMD_C2-SME_VSEMD	
0000C74E 01                         SME_VSEMD_1E:	dc.b 1	
0000C74F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C754 02                         SME_VSEMD_24:	dc.b 2	
0000C755 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C75A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C75F 02                         SME_VSEMD_2F:	dc.b 2	
0000C760 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C765 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C76A 02                         SME_VSEMD_3A:	dc.b 2	
0000C76B F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C770 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C775 02                         SME_VSEMD_45:	dc.b 2	
0000C776 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C77B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C780 02                         SME_VSEMD_50:	dc.b 2	
0000C781 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C786 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C78B 02                         SME_VSEMD_5B:	dc.b 2	
0000C78C F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C791 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C796 02                         SME_VSEMD_66:	dc.b 2	
0000C797 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C79C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7A1 02                         SME_VSEMD_71:	dc.b 2	
0000C7A2 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C7A7 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7AC 02                         SME_VSEMD_7C:	dc.b 2	
0000C7AD F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C7B2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7B7 02                         SME_VSEMD_87:	dc.b 2	
0000C7B8 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C7BD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7C2 05                         SME_VSEMD_92:	dc.b 5	
0000C7C3 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C7C8 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C7CD 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C7D2 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C7D7 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C7DC 02                         SME_VSEMD_AC:	dc.b 2	
0000C7DD F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C7E2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7E7 02                         SME_VSEMD_B7:	dc.b 2	
0000C7E8 F505 2040 F8               		dc.b $F5, 5, $20, $40, $F8	
0000C7ED F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F2 02                         SME_VSEMD_C2:	dc.b 2	
0000C7F3 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C7F8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7FE 00                         		even
0000C7FE 00                         		even
0000C7FE                            
0000C7FE                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C7FE                            ; ---------------------------------------------------------------------------
0000C7FE                            ; Object 0E - Sonic on the title screen
0000C7FE                            ; ---------------------------------------------------------------------------
0000C7FE                            
0000C7FE                            TitleSonic:
0000C7FE 7000                       		moveq	#0,d0
0000C800 1028 0024                  		move.b	obRoutine(a0),d0
0000C804 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C808 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C80C                            ; ===========================================================================
0000C80C 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C80E 0000                       		dc.w TSon_Delay-TSon_Index
0000C810 0000                       		dc.w TSon_Move-TSon_Index
0000C812 0000                       		dc.w TSon_Animate-TSon_Index
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            TSon_Main:	; Routine 0
0000C814 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C818 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C81E 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C824 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C82C 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C832 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C838 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C83E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C844 6100 0000                  		bsr.w	AnimateSprite
0000C848                            
0000C848                            TSon_Delay:	;Routine 2
0000C848 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C84C 6A00                       		bpl.s	@wait		; if time remains, branch
0000C84E 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C852 6000 0000                  		bra.w	DisplaySprite
0000C856                            
0000C856                            	@wait:
0000C856 4E75                       		rts	
0000C858                            ; ===========================================================================
0000C858                            
0000C858                            TSon_Move:	; Routine 4
0000C858 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C85C 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C862 6600                       		bne.s	@display	; if not, branch
0000C864 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C868                            
0000C868                            	@display:
0000C868 6000 0000                  		bra.w	DisplaySprite
0000C86C                            
0000C86C 4E75                       		rts	
0000C86E                            ; ===========================================================================
0000C86E                            
0000C86E                            TSon_Animate:	; Routine 6
0000C86E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C874 6100 0000                  		bsr.w	AnimateSprite
0000C878 6000 0000                  		bra.w	DisplaySprite
0000C87C                            
0000C87C 4E75                       		rts	
0000C87C 4E75                       		rts	
0000C87E                            		include	"_incObj\0F Press Start and TM.asm"
0000C87E                            ; ---------------------------------------------------------------------------
0000C87E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C87E                            ; ---------------------------------------------------------------------------
0000C87E                            
0000C87E                            PSBTM:
0000C87E 7000                       		moveq	#0,d0
0000C880 1028 0024                  		move.b	obRoutine(a0),d0
0000C884 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C888 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C88C 6000 0000                  		bra.w	DisplaySprite
0000C890                            ; ===========================================================================
0000C890 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C892 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C894 0000                       		dc.w PSB_Exit-PSB_Index
0000C896                            ; ===========================================================================
0000C896                            
0000C896                            PSB_Main:	; Routine 0
0000C896 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C89A 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C8A0 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C8A6 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C8AE 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C8B4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C8BA 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C8BC                            
0000C8BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8C0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C8C6 6600                       		bne.s	PSB_Exit	; if not, branch
0000C8C8                            
0000C8C8 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C8CE 317C 0170 0008             		move.w	#$170,obX(a0)
0000C8D4 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C8DA                            
0000C8DA                            PSB_Exit:	; Routine 4
0000C8DA 4E75                       		rts	
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            PSB_PrsStart:	; Routine 2
0000C8DC 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C8E2 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C8E2 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C8E6                            
0000C8E6                            		include	"_anim\Title Screen Sonic.asm"
0000C8E6                            ; ---------------------------------------------------------------------------
0000C8E6                            ; Animation script - Sonic on the title screen
0000C8E6                            ; ---------------------------------------------------------------------------
0000C8E6 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C8E8 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C8F4 00                         		even
0000C8F4 00                         		even
0000C8F4                            		include	"_anim\Press Start and TM.asm"
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C8F4                            ; ---------------------------------------------------------------------------
0000C8F4 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C8F6 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C8FA                            		even
0000C8FA                            		even
0000C8FA                            
0000C8FA                            		include	"_incObj\sub AnimateSprite.asm"
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA                            ; Subroutine to	animate	a sprite using an animation script
0000C8FA                            ; ---------------------------------------------------------------------------
0000C8FA                            
0000C8FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8FA                            
0000C8FA                            
0000C8FA                            AnimateSprite:
0000C8FA 7000                       		moveq	#0,d0
0000C8FC 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C900 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C904 6700                       		beq.s	Anim_Run	; if not, branch
0000C906                            
0000C906 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C90A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C910 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C916                            
0000C916                            Anim_Run:
0000C916 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C91A 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C91C D040                       		add.w	d0,d0
0000C91E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C922 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C926 7200                       		moveq	#0,d1
0000C928 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C92C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C930 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C932                            
0000C932                            Anim_Next:
0000C932 1200                       		move.b	d0,d1
0000C934 0200 001F                  		andi.b	#$1F,d0
0000C938 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C93C 1028 0022                  		move.b	obStatus(a0),d0
0000C940 E719                       		rol.b	#3,d1
0000C942 B101                       		eor.b	d0,d1
0000C944 0201 0003                  		andi.b	#3,d1
0000C948 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C94E 8328 0001                  		or.b	d1,obRender(a0)
0000C952 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C956                            
0000C956                            Anim_Wait:
0000C956 4E75                       		rts	
0000C958                            ; ===========================================================================
0000C958                            
0000C958                            Anim_End_FF:
0000C958 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C95A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C95C 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C962 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C966 60CA                       		bra.s	Anim_Next
0000C968                            ; ===========================================================================
0000C968                            
0000C968                            Anim_End_FE:
0000C968 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C96A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C96C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C970 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C974 9200                       		sub.b	d0,d1
0000C976 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C97A 60B6                       		bra.s	Anim_Next
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Anim_End_FD:
0000C97C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C97E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C980 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C986                            
0000C986                            Anim_End_FC:
0000C986 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C988 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C98A 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C98E                            
0000C98E                            Anim_End_FB:
0000C98E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C990 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C992 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C998 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C99C                            
0000C99C                            Anim_End_FA:
0000C99C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C99E 6600                       		bne.s	Anim_End	; if not, branch
0000C9A0 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C9A4                            
0000C9A4                            Anim_End:
0000C9A4 4E75                       		rts	
0000C9A6                            ; End of function AnimateSprite
0000C9A6                            ; End of function AnimateSprite
0000C9A6                            
0000C9A6                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            Map_PSB_internal:
0000C9A6 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C9A8 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C9AA 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C9AC 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C9AE 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C9AF 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C9B4 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C9B9 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C9BE 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C9C3 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C9C8 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C9CD 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C9CE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9D3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9D8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9DD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9E2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9E7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9EC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9F1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9F6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C9FB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CA00 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA05 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA0A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA0F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA14 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA19 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA1E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA23 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA28 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA2D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CA32 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA37 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA3C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA41 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA46 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA4B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA50 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA55 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA5A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA5F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CA64 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CA65 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CA6A                            		even
0000CA6A                            		even
0000CA6A                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CA6A                            ; ---------------------------------------------------------------------------
0000CA6A                            ; Sprite mappings - Sonic on the title screen
0000CA6A                            ; ---------------------------------------------------------------------------
0000CA6A                            Map_TSon_internal:
0000CA6A 0000                       		dc.w byte_A898-Map_TSon_internal
0000CA6C 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CA6E 0000                       		dc.w byte_A917-Map_TSon_internal
0000CA70 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CA72 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CA74 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CA76 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CA78 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CA7A 0A                         byte_A898:	dc.b $A
0000CA7B 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CA80 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CA85 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CA8A 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CA8F 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CA94 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CA99 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CA9E 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CAA3 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CAA8 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CAAD 0F                         byte_A8CB:	dc.b $F
0000CAAE 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CAB3 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CAB8 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CABD 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CAC2 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CAC7 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CACC 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CAD1 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CAD6 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CADB 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CAE0 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CAE5 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CAEA 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CAEF 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CAF4 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CAF9 11                         byte_A917:	dc.b $11
0000CAFA 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CAFF 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CB04 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CB09 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CB0E 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CB13 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CB18 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CB1D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CB22 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CB27 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CB2C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CB31 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CB36 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CB3B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CB40 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CB45 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CB4A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CB4F 0D                         byte_A96D:	dc.b $D
0000CB50 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CB55 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CB5A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CB5F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CB64 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CB69 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CB6E 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CB73 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CB78 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CB7D 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CB82 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CB87 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CB8C 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CB91 0B                         byte_A9AF:	dc.b $B
0000CB92 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CB97 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CB9C 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CBA1 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CBA6 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CBAB 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CBB0 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CBB5 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CBBA 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CBBF 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CBC4 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CBC9 13                         byte_A9E7:	dc.b $13
0000CBCA 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CBCF 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CBD4 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CBD9 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CBDE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CBE3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CBE8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CBED 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CBF2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CBF7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CBFC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC01 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC06 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC0B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC10 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC15 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC1A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC1F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC24 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC29 15                         byte_AA47:	dc.b $15
0000CC2A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CC2F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CC34 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CC39 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CC3E 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CC43 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CC48 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CC4D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CC52 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CC57 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CC5C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CC61 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CC66 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CC6B 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CC70 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CC75 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CC7A 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CC7F 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CC84 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CC89 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CC8E 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CC93 16                         byte_AAB1:	dc.b $16
0000CC94 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CC99 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CC9E 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CCA3 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CCA8 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CCAD 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CCB2 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CCB7 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CCBC 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CCC1 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CCC6 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CCCB 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CCD0 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CCD5 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CCDA 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CCDF 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CCE4 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CCE9 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CCEE 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CCF3 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CCF8 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CCFD 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD02                            		even
0000CD02                            		even
0000CD02                            
0000CD02                            		include	"_incObj\2B Chopper.asm"
0000CD02                            ; ---------------------------------------------------------------------------
0000CD02                            ; Object 2B - Chopper enemy (GHZ)
0000CD02                            ; ---------------------------------------------------------------------------
0000CD02                            
0000CD02                            Chopper:
0000CD02 7000                       		moveq	#0,d0
0000CD04 1028 0024                  		move.b	obRoutine(a0),d0
0000CD08 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CD0C 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CD10 6000 0000                  		bra.w	RememberState
0000CD14                            ; ===========================================================================
0000CD14 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CD16 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CD18                            
0000CD18 =00000030                  chop_origY:	equ $30
0000CD18                            ; ===========================================================================
0000CD18                            
0000CD18                            Chop_Main:	; Routine 0
0000CD18 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD1C 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CD24 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CD2A 117C 0004 0001             		move.b	#4,obRender(a0)
0000CD30 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CD36 117C 0009 0020             		move.b	#9,obColType(a0)
0000CD3C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CD42 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD48 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CD4E                            
0000CD4E                            Chop_ChgSpeed:	; Routine 2
0000CD4E 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CD54 6100 FBA4                  		bsr.w	AnimateSprite
0000CD58 6100 0000                  		bsr.w	SpeedToPos
0000CD5C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CD62 3028 0030                  		move.w	chop_origY(a0),d0
0000CD66 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CD6A 6400                       		bcc.s	@chganimation	; if not, branch
0000CD6C 3140 000C                  		move.w	d0,obY(a0)
0000CD70 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CD76                            
0000CD76                            	@chganimation:
0000CD76 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CD7C 0440 00C0                  		subi.w	#$C0,d0
0000CD80 B068 000C                  		cmp.w	obY(a0),d0
0000CD84 6400                       		bcc.s	@nochg
0000CD86 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CD8C 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CD90 6B00                       		bmi.s	@nochg		; if not, branch
0000CD92 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CD98                            
0000CD98                            	@nochg:
0000CD98 4E75                       		rts	
0000CD98 4E75                       		rts	
0000CD9A                            		include	"_anim\Chopper.asm"
0000CD9A                            ; ---------------------------------------------------------------------------
0000CD9A                            ; Animation script - Chopper enemy
0000CD9A                            ; ---------------------------------------------------------------------------
0000CD9A 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CD9C 0000                       		dc.w @fast-Ani_Chop
0000CD9E 0000                       		dc.w @still-Ani_Chop
0000CDA0 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CDA4 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CDA8 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CDAC 00                         		even
0000CDAC 00                         		even
0000CDAC                            Map_Chop:	include	"_maps\Chopper.asm"
0000CDAC                            ; ---------------------------------------------------------------------------
0000CDAC                            ; Sprite mappings - Chopper enemy (GHZ)
0000CDAC                            ; ---------------------------------------------------------------------------
0000CDAC                            Map_Chop_internal:
0000CDAC 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CDAE 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CDB0 01                         @mouthshut:	dc.b 1
0000CDB1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CDB6 01                         @mouthopen:	dc.b 1
0000CDB7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CDBC                            		even
0000CDBC                            		even
0000CDBC                            		include	"_incObj\2C Jaws.asm"
0000CDBC                            ; ---------------------------------------------------------------------------
0000CDBC                            ; Object 2C - Jaws enemy (LZ)
0000CDBC                            ; ---------------------------------------------------------------------------
0000CDBC                            
0000CDBC                            Jaws:
0000CDBC 7000                       		moveq	#0,d0
0000CDBE 1028 0024                  		move.b	obRoutine(a0),d0
0000CDC2 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CDC6 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CDCA                            ; ===========================================================================
0000CDCA 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CDCC 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CDCE                            
0000CDCE =00000030                  jaws_timecount:	equ $30
0000CDCE =00000032                  jaws_timedelay:	equ $32
0000CDCE                            ; ===========================================================================
0000CDCE                            
0000CDCE                            Jaws_Main:	; Routine 0
0000CDCE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDD2 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CDDA 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CDE0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CDE6 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CDEC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CDF2 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CDF8 7000                       		moveq	#0,d0
0000CDFA 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CDFE ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CE00 5340                       		subq.w	#1,d0
0000CE02 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CE06 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CE0A 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CE10 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CE16 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CE18 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CE1C                            
0000CE1C                            Jaws_Turn:	; Routine 2
0000CE1C 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CE20 6A00                       		bpl.s	@animate	; if time remains, branch
0000CE22 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CE28 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CE2C 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CE32 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CE38                            
0000CE38                            	@animate:
0000CE38 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CE3E 6100 FABA                  		bsr.w	AnimateSprite
0000CE42 6100 0000                  		bsr.w	SpeedToPos
0000CE46 6000 0000                  		bra.w	RememberState
0000CE46 6000 0000                  		bra.w	RememberState
0000CE4A                            		include	"_anim\Jaws.asm"
0000CE4A                            ; ---------------------------------------------------------------------------
0000CE4A                            ; Animation script - Jaws enemy
0000CE4A                            ; ---------------------------------------------------------------------------
0000CE4A 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CE4C 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CE52                            		even
0000CE52                            		even
0000CE52                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CE52                            ; --------------------------------------------------------------------------------
0000CE52                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CE52                            ; --------------------------------------------------------------------------------
0000CE52                            
0000CE52                            SME_O5C0c:	
0000CE52 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CE56 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CE5A 02                         SME_O5C0c_8:	dc.b 2	
0000CE5B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE60 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE65 02                         SME_O5C0c_13:	dc.b 2	
0000CE66 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE6B F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE70 02                         SME_O5C0c_1E:	dc.b 2	
0000CE71 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CE76 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CE7B 02                         SME_O5C0c_29:	dc.b 2	
0000CE7C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CE81 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CE86                            		even
0000CE86                            		even
0000CE86                            		include	"_incObj\2D Burrobot.asm"
0000CE86                            ; ---------------------------------------------------------------------------
0000CE86                            ; Object 2D - Burrobot enemy (LZ)
0000CE86                            ; ---------------------------------------------------------------------------
0000CE86                            
0000CE86                            Burrobot:
0000CE86 7000                       		moveq	#0,d0
0000CE88 1028 0024                  		move.b	obRoutine(a0),d0
0000CE8C 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CE90 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CE94                            ; ===========================================================================
0000CE94 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CE96 0000                       		dc.w Burro_Action-Burro_Index
0000CE98                            
0000CE98 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CE98                            ; ===========================================================================
0000CE98                            
0000CE98                            Burro_Main:	; Routine 0
0000CE98 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE9C 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CEA2 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CEA8 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CEB0 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CEB6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CEBC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CEC2 117C 0005 0020             		move.b	#5,obColType(a0)
0000CEC8 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CECE 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CED2 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CED8                            
0000CED8                            Burro_Action:	; Routine 2
0000CED8 7000                       		moveq	#0,d0
0000CEDA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CEDE 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CEE2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CEE6 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CEEC 6100 FA0C                  		bsr.w	AnimateSprite
0000CEF0 6000 0000                  		bra.w	RememberState
0000CEF4                            ; ===========================================================================
0000CEF4 0000                       @index:		dc.w @changedir-@index
0000CEF6 0000                       		dc.w Burro_Move-@index
0000CEF8 0000                       		dc.w Burro_Jump-@index
0000CEFA 0000                       		dc.w Burro_ChkSonic-@index
0000CEFC                            ; ===========================================================================
0000CEFC                            
0000CEFC                            @changedir:
0000CEFC 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF00 6A00                       		bpl.s	@nochg
0000CF02 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF06 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CF0C 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CF12 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CF18 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CF1E 6700                       		beq.s	@nochg
0000CF20 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CF24                            
0000CF24                            	@nochg:
0000CF24 4E75                       		rts	
0000CF26                            ; ===========================================================================
0000CF26                            
0000CF26                            Burro_Move:
0000CF26 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CF2A 6B00                       		bmi.s	loc_AD84
0000CF2C 6100 0000                  		bsr.w	SpeedToPos
0000CF30 0868 0000 0032             		bchg	#0,$32(a0)
0000CF36 6600                       		bne.s	loc_AD78
0000CF38 3628 0008                  		move.w	obX(a0),d3
0000CF3C 0643 000C                  		addi.w	#$C,d3
0000CF40 0828 0000 0022             		btst	#0,obStatus(a0)
0000CF46 6600                       		bne.s	loc_AD6A
0000CF48 0443 0018                  		subi.w	#$18,d3
0000CF4C                            
0000CF4C                            loc_AD6A:
0000CF4C 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CF52 0C41 000C                  		cmpi.w	#$C,d1
0000CF56 6C00                       		bge.s	loc_AD84
0000CF58 4E75                       		rts	
0000CF5A                            ; ===========================================================================
0000CF5A                            
0000CF5A                            loc_AD78:
0000CF5A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CF60 D368 000C                  		add.w	d1,obY(a0)
0000CF64 4E75                       		rts	
0000CF66                            ; ===========================================================================
0000CF66                            
0000CF66                            loc_AD84:
0000CF66 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CF6C 6700                       		beq.s	loc_ADA4
0000CF6E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CF72 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CF78 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CF7E 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CF84 4E75                       		rts	
0000CF86                            ; ===========================================================================
0000CF86                            
0000CF86                            loc_ADA4:
0000CF86 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CF8A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CF90 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CF96 4E75                       		rts	
0000CF98                            ; ===========================================================================
0000CF98                            
0000CF98                            Burro_Jump:
0000CF98 6100 0000                  		bsr.w	SpeedToPos
0000CF9C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CFA2 6B00                       		bmi.s	locret_ADF0
0000CFA4 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CFAA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CFB0 4A41                       		tst.w	d1
0000CFB2 6A00                       		bpl.s	locret_ADF0
0000CFB4 D368 000C                  		add.w	d1,obY(a0)
0000CFB8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CFBE 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CFC4 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CFCA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFCE 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFD2                            
0000CFD2                            locret_ADF0:
0000CFD2 4E75                       		rts	
0000CFD4                            ; ===========================================================================
0000CFD4                            
0000CFD4                            Burro_ChkSonic:
0000CFD4 343C 0060                  		move.w	#$60,d2
0000CFD8 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CFDC 6400                       		bcc.s	locret_AE20
0000CFDE 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CFE2 9068 000C                  		sub.w	obY(a0),d0
0000CFE6 6400                       		bcc.s	locret_AE20
0000CFE8 0C40 FF80                  		cmpi.w	#-$80,d0
0000CFEC 6500                       		bcs.s	locret_AE20
0000CFEE 4A78 FE08                  		tst.w	(v_debuguse).w
0000CFF2 6600                       		bne.s	locret_AE20
0000CFF4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CFF8 3141 0010                  		move.w	d1,obVelX(a0)
0000CFFC 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D002                            
0000D002                            locret_AE20:
0000D002 4E75                       		rts	
0000D004                            
0000D004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D004                            
0000D004                            
0000D004                            Burro_ChkSonic2:
0000D004 323C 0080                  		move.w	#$80,d1
0000D008 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D00E 3038 D008                  		move.w	(v_player+obX).w,d0
0000D012 9068 0008                  		sub.w	obX(a0),d0
0000D016 6400                       		bcc.s	loc_AE40
0000D018 4440                       		neg.w	d0
0000D01A 4441                       		neg.w	d1
0000D01C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D022                            
0000D022                            loc_AE40:
0000D022 B042                       		cmp.w	d2,d0
0000D024 4E75                       		rts	
0000D026                            ; End of function Burro_ChkSonic2
0000D026                            ; End of function Burro_ChkSonic2
0000D026                            		include	"_anim\Burrobot.asm"
0000D026                            ; ---------------------------------------------------------------------------
0000D026                            ; Animation script - Burrobot enemy
0000D026                            ; ---------------------------------------------------------------------------
0000D026 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D028 0000                       		dc.w @walk2-Ani_Burro
0000D02A 0000                       		dc.w @digging-Ani_Burro
0000D02C 0000                       		dc.w @fall-Ani_Burro
0000D02E 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D032 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D036 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D03A 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D03E 00                         		even
0000D03E 00                         		even
0000D03E                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D03E                            ; --------------------------------------------------------------------------------
0000D03E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D03E                            ; --------------------------------------------------------------------------------
0000D03E                            
0000D03E                            SME_Ag_86:	
0000D03E 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D042 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D046 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D04A 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D04C 02                         SME_Ag_86_E:	dc.b 2	
0000D04D EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D052 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D057 02                         SME_Ag_86_19:	dc.b 2	
0000D058 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D05D 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D062 02                         SME_Ag_86_24:	dc.b 2	
0000D063 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D068 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D06D 02                         SME_Ag_86_2F:	dc.b 2	
0000D06E E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D073 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D078 02                         SME_Ag_86_3A:	dc.b 2	
0000D079 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D07E 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D083 02                         SME_Ag_86_45:	dc.b 2	
0000D084 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D089 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D08E 02                         SME_Ag_86_50:	dc.b 2	
0000D08F EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D094 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D09A 00                         		even
0000D09A 00                         		even
0000D09A                            
0000D09A                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D09A                            ; ---------------------------------------------------------------------------
0000D09A                            ; Object 2F - large grass-covered platforms (MZ)
0000D09A                            ; ---------------------------------------------------------------------------
0000D09A                            
0000D09A                            LargeGrass:
0000D09A 7000                       		moveq	#0,d0
0000D09C 1028 0024                  		move.b	obRoutine(a0),d0
0000D0A0 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D0A4 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D0A8                            ; ===========================================================================
0000D0A8 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D0AA 0000                       		dc.w LGrass_Action-LGrass_Index
0000D0AC                            
0000D0AC =0000002A                  lgrass_origX:	equ $2A
0000D0AC =0000002C                  lgrass_origY:	equ $2C
0000D0AC                            
0000D0AC 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D0AE 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D0B0 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D0B2 0140                       		dc.b 1,	$40
0000D0B4 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D0B6 0220                       		dc.b 2,	$20
0000D0B8                            ; ===========================================================================
0000D0B8                            
0000D0B8                            LGrass_Main:	; Routine 0
0000D0B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D0BC 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D0C4 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D0CA 117C 0004 0001             		move.b	#4,obRender(a0)
0000D0D0 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000D0D6 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D0DC 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D0E2 7000                       		moveq	#0,d0
0000D0E4 1028 0028                  		move.b	obSubtype(a0),d0
0000D0E8 E448                       		lsr.w	#2,d0
0000D0EA 0240 001C                  		andi.w	#$1C,d0
0000D0EE 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D0F2 3019                       		move.w	(a1)+,d0
0000D0F4 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D0F8 214A 0030                  		move.l	a2,$30(a0)
0000D0FC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D100 1151 0014                  		move.b	(a1),obActWid(a0)
0000D104 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D10A 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D110 08E8 0004 0001             		bset	#4,1(a0)
0000D116                            
0000D116                            LGrass_Action:	; Routine 2
0000D116 6100 0000                  		bsr.w	LGrass_Types
0000D11A 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D11E 6700                       		beq.s	LGrass_Solid
0000D120 7200                       		moveq	#0,d1
0000D122 1228 0014                  		move.b	obActWid(a0),d1
0000D126 0641 000B                  		addi.w	#$B,d1
0000D12A 6100 C0A2                  		bsr.w	ExitPlatform
0000D12E 0829 0003 0022             		btst	#3,obStatus(a1)
0000D134 6600 0000                  		bne.w	LGrass_Slope
0000D138 4228 0025                  		clr.b	ob2ndRout(a0)
0000D13C 6000                       		bra.s	LGrass_Display
0000D13E                            ; ===========================================================================
0000D13E                            
0000D13E                            LGrass_Slope:
0000D13E 7200                       		moveq	#0,d1
0000D140 1228 0014                  		move.b	obActWid(a0),d1
0000D144 0641 000B                  		addi.w	#$B,d1
0000D148 2468 0030                  		movea.l	$30(a0),a2
0000D14C 3428 0008                  		move.w	obX(a0),d2
0000D150 6100 D016                  		bsr.w	SlopeObject2
0000D154 6000                       		bra.s	LGrass_Display
0000D156                            ; ===========================================================================
0000D156                            
0000D156                            LGrass_Solid:
0000D156 7200                       		moveq	#0,d1
0000D158 1228 0014                  		move.b	obActWid(a0),d1
0000D15C 0641 000B                  		addi.w	#$B,d1
0000D160 343C 0020                  		move.w	#$20,d2
0000D164 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D16A 6600                       		bne.s	loc_AF8E
0000D16C 343C 0030                  		move.w	#$30,d2
0000D170                            
0000D170                            loc_AF8E:
0000D170 2468 0030                  		movea.l	$30(a0),a2
0000D174 6100 0000                  		bsr.w	SolidObject2F
0000D178                            
0000D178                            LGrass_Display:
0000D178 6100 0000                  		bsr.w	DisplaySprite
0000D17C 6000 0000                  		bra.w	LGrass_ChkDel
0000D180                            
0000D180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D180                            
0000D180                            
0000D180                            LGrass_Types:
0000D180 7000                       		moveq	#0,d0
0000D182 1028 0028                  		move.b	obSubtype(a0),d0
0000D186 0240 0007                  		andi.w	#7,d0
0000D18A D040                       		add.w	d0,d0
0000D18C 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D190 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D194                            ; End of function LGrass_Types
0000D194                            
0000D194                            ; ===========================================================================
0000D194 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D196 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D198 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D19A 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D19C 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D19E 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D1A0                            ; ===========================================================================
0000D1A0                            
0000D1A0                            LGrass_Type00:
0000D1A0 4E75                       		rts			; type 00 platform doesn't move
0000D1A2                            ; ===========================================================================
0000D1A2                            
0000D1A2                            LGrass_Type01:
0000D1A2 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D1A6 323C 0020                  		move.w	#$20,d1
0000D1AA 6000                       		bra.s	LGrass_Move
0000D1AC                            ; ===========================================================================
0000D1AC                            
0000D1AC                            LGrass_Type02:
0000D1AC 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D1B0 323C 0030                  		move.w	#$30,d1
0000D1B4 6000                       		bra.s	LGrass_Move
0000D1B6                            ; ===========================================================================
0000D1B6                            
0000D1B6                            LGrass_Type03:
0000D1B6 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D1BA 323C 0040                  		move.w	#$40,d1
0000D1BE 6000                       		bra.s	LGrass_Move
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            LGrass_Type04:
0000D1C0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D1C4 323C 0060                  		move.w	#$60,d1
0000D1C8                            
0000D1C8                            LGrass_Move:
0000D1C8 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D1CE 6700                       		beq.s	loc_AFF2
0000D1D0 4440                       		neg.w	d0
0000D1D2 D041                       		add.w	d1,d0
0000D1D4                            
0000D1D4                            loc_AFF2:
0000D1D4 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D1D8 9240                       		sub.w	d0,d1
0000D1DA 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D1DE 4E75                       		rts	
0000D1E0                            ; ===========================================================================
0000D1E0                            
0000D1E0                            LGrass_Type05:
0000D1E0 1028 0034                  		move.b	$34(a0),d0
0000D1E4 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D1E8 6600                       		bne.s	loc_B010
0000D1EA 5500                       		subq.b	#2,d0
0000D1EC 6400                       		bcc.s	loc_B01C
0000D1EE 7000                       		moveq	#0,d0
0000D1F0 6000                       		bra.s	loc_B01C
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            loc_B010:
0000D1F2 5800                       		addq.b	#4,d0
0000D1F4 0C00 0040                  		cmpi.b	#$40,d0
0000D1F8 6500                       		bcs.s	loc_B01C
0000D1FA 103C 0040                  		move.b	#$40,d0
0000D1FE                            
0000D1FE                            loc_B01C:
0000D1FE 1140 0034                  		move.b	d0,$34(a0)
0000D202 4EB9 0000 3A32             		jsr	(CalcSine).l
0000D208 E848                       		lsr.w	#4,d0
0000D20A 3200                       		move.w	d0,d1
0000D20C D068 002C                  		add.w	lgrass_origY(a0),d0
0000D210 3140 000C                  		move.w	d0,obY(a0)
0000D214 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D21A 6600                       		bne.s	loc_B07A
0000D21C 4A28 0035                  		tst.b	$35(a0)
0000D220 6600                       		bne.s	loc_B07A
0000D222 117C 0001 0035             		move.b	#1,$35(a0)
0000D228 6100 0000                  		bsr.w	FindNextFreeObj
0000D22C 6600                       		bne.s	loc_B07A
0000D22E 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D232 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D238 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D23E 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D242 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D246 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D24C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D252 2348 0038                  		move.l	a0,$38(a1)
0000D256 2448                       		movea.l	a0,a2
0000D258 6100                       		bsr.s	sub_B09C
0000D25A                            
0000D25A                            loc_B07A:
0000D25A 7400                       		moveq	#0,d2
0000D25C 45E8 0036                  		lea	$36(a0),a2
0000D260 141A                       		move.b	(a2)+,d2
0000D262 5302                       		subq.b	#1,d2
0000D264 6500                       		bcs.s	locret_B09A
0000D266                            
0000D266                            loc_B086:
0000D266 7000                       		moveq	#0,d0
0000D268 101A                       		move.b	(a2)+,d0
0000D26A ED48                       		lsl.w	#6,d0
0000D26C 0640 D000                  		addi.w	#$D000,d0
0000D270 3240                       		movea.w	d0,a1
0000D272 3341 003C                  		move.w	d1,$3C(a1)
0000D276 51CA FFEE                  		dbf	d2,loc_B086
0000D27A                            
0000D27A                            locret_B09A:
0000D27A 4E75                       		rts	
0000D27C                            
0000D27C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D27C                            
0000D27C                            
0000D27C                            sub_B09C:
0000D27C 45EA 0036                  		lea	$36(a2),a2
0000D280 7000                       		moveq	#0,d0
0000D282 1012                       		move.b	(a2),d0
0000D284 5212                       		addq.b	#1,(a2)
0000D286 45F2 0001                  		lea	1(a2,d0.w),a2
0000D28A 3009                       		move.w	a1,d0
0000D28C 0440 D000                  		subi.w	#$D000,d0
0000D290 EC48                       		lsr.w	#6,d0
0000D292 0240 007F                  		andi.w	#$7F,d0
0000D296 1480                       		move.b	d0,(a2)
0000D298 4E75                       		rts	
0000D29A                            ; End of function sub_B09C
0000D29A                            
0000D29A                            ; ===========================================================================
0000D29A                            
0000D29A                            LGrass_ChkDel:
0000D29A 4A28 0035                  		tst.b	$35(a0)
0000D29E 6700                       		beq.s	loc_B0C6
0000D2A0 4A28 0001                  		tst.b	obRender(a0)
0000D2A4 6A00                       		bpl.s	LGrass_DelFlames
0000D2A6                            
0000D2A6                            loc_B0C6:
0000D2C4 4E75                       		rts	
0000D2C6                            ; ===========================================================================
0000D2C6                            
0000D2C6                            LGrass_DelFlames:
0000D2C6 7400                       		moveq	#0,d2
0000D2C8                            
0000D2C8                            loc_B0E8:
0000D2C8 45E8 0036                  		lea	$36(a0),a2
0000D2CC 1412                       		move.b	(a2),d2
0000D2CE 421A                       		clr.b	(a2)+
0000D2D0 5302                       		subq.b	#1,d2
0000D2D2 6500                       		bcs.s	locret_B116
0000D2D4                            
0000D2D4                            loc_B0F4:
0000D2D4 7000                       		moveq	#0,d0
0000D2D6 1012                       		move.b	(a2),d0
0000D2D8 421A                       		clr.b	(a2)+
0000D2DA ED48                       		lsl.w	#6,d0
0000D2DC 0640 D000                  		addi.w	#$D000,d0
0000D2E0 3240                       		movea.w	d0,a1
0000D2E2 6100 0000                  		bsr.w	DeleteChild
0000D2E6 51CA FFEC                  		dbf	d2,loc_B0F4
0000D2EA 117C 0000 0035             		move.b	#0,$35(a0)
0000D2F0 117C 0000 0034             		move.b	#0,$34(a0)
0000D2F6                            
0000D2F6                            locret_B116:
0000D2F6 4E75                       		rts	
0000D2F8                            ; ===========================================================================
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8                            ; Collision data for large moving platforms (MZ)
0000D2F8                            ; ---------------------------------------------------------------------------
0000D2F8                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D344                            		even
0000D344                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D370                            		even
0000D370                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D3BC                            		even
0000D3BC                            		even
0000D3BC                            		include	"_incObj\35 Burning Grass.asm"
0000D3BC                            ; ---------------------------------------------------------------------------
0000D3BC                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D3BC                            ; (appears when	you walk on sinking platforms)
0000D3BC                            ; ---------------------------------------------------------------------------
0000D3BC                            
0000D3BC                            GrassFire:
0000D3BC 7000                       		moveq	#0,d0
0000D3BE 1028 0024                  		move.b	obRoutine(a0),d0
0000D3C2 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D3C6 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D3CA                            ; ===========================================================================
0000D3CA 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D3CC 0000                       		dc.w loc_B238-GFire_Index
0000D3CE 0000                       		dc.w GFire_Move-GFire_Index
0000D3D0                            
0000D3D0 =0000002A                  gfire_origX:	equ $2A
0000D3D0                            ; ===========================================================================
0000D3D0                            
0000D3D0                            GFire_Main:	; Routine 0
0000D3D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D3D4 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D3DC 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D3E2 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D3E8 117C 0004 0001             		move.b	#4,obRender(a0)
0000D3EE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D3F4 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D3FA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D40A 4A28 0028                  		tst.b	obSubtype(a0)
0000D40E 6700                       		beq.s	loc_B238
0000D410 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D414 6000 0000                  		bra.w	GFire_Move
0000D418                            ; ===========================================================================
0000D418                            
0000D418                            loc_B238:	; Routine 2
0000D418 2268 0030                  		movea.l	$30(a0),a1
0000D41C 3228 0008                  		move.w	obX(a0),d1
0000D420 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D424 0641 000C                  		addi.w	#$C,d1
0000D428 3001                       		move.w	d1,d0
0000D42A E248                       		lsr.w	#1,d0
0000D42C 1031 0000                  		move.b	(a1,d0.w),d0
0000D430 4440                       		neg.w	d0
0000D432 D068 002C                  		add.w	$2C(a0),d0
0000D436 3400                       		move.w	d0,d2
0000D438 D068 003C                  		add.w	$3C(a0),d0
0000D43C 3140 000C                  		move.w	d0,obY(a0)
0000D440 0C41 0084                  		cmpi.w	#$84,d1
0000D444 6400                       		bcc.s	loc_B2B0
0000D446 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D44E 0C41 0080                  		cmpi.w	#$80,d1
0000D452 6400                       		bcc.s	loc_B2B0
0000D454 2028 0008                  		move.l	obX(a0),d0
0000D458 0680 0008 0000             		addi.l	#$80000,d0
0000D45E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D464 6600                       		bne.s	loc_B2B0
0000D466 6100 0000                  		bsr.w	FindNextFreeObj
0000D46A 6600                       		bne.s	loc_B2B0
0000D46C 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D470 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D476 3342 002C                  		move.w	d2,$2C(a1)
0000D47A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D480 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D486 2468 0038                  		movea.l	$38(a0),a2
0000D48A 6100 FDF0                  		bsr.w	sub_B09C
0000D48E                            
0000D48E                            loc_B2B0:
0000D48E 6000                       		bra.s	GFire_Animate
0000D490                            ; ===========================================================================
0000D490                            
0000D490                            GFire_Move:	; Routine 4
0000D490 3028 002C                  		move.w	$2C(a0),d0
0000D494 D068 003C                  		add.w	$3C(a0),d0
0000D498 3140 000C                  		move.w	d0,obY(a0)
0000D49C                            
0000D49C                            GFire_Animate:
0000D49C 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D4A2 6100 F456                  		bsr.w	AnimateSprite
0000D4A6 6000 0000                  		bra.w	DisplaySprite
0000D4A6 6000 0000                  		bra.w	DisplaySprite
0000D4AA                            		include	"_anim\Burning Grass.asm"
0000D4AA                            ; ---------------------------------------------------------------------------
0000D4AA                            ; Animation script - burning grass that sits on the floor (MZ)
0000D4AA                            ; ---------------------------------------------------------------------------
0000D4AA 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D4AC 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D4B2                            		even
0000D4B2                            		even
0000D4B2                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D4B2                            ; ---------------------------------------------------------------------------
0000D4B2                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D4B2                            ; ---------------------------------------------------------------------------
0000D4B2                            Map_LGrass_internal:
0000D4B2 0000                       		dc.w @wide-Map_LGrass_internal
0000D4B4 0000                       		dc.w @sloped-Map_LGrass_internal
0000D4B6 0000                       		dc.w @narrow-Map_LGrass_internal
0000D4B8 0D                         @wide:		dc.b $D
0000D4B9 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D4BE F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D4C3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D4C8 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D4CD F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D4D2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D4D7 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D4DC D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D4E1 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D4E6 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D4EB 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D4F0 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D4F5 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D4FA 0A                         @sloped:	dc.b $A
0000D4FB D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D500 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D505 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D50A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D50F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D514 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D519 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D51E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D523 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D528 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D52D 06                         @narrow:	dc.b 6
0000D52E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D533 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D538 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D53D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D542 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D547 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D54C                            		even
0000D54C                            		even
0000D54C                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D54C                            ; --------------------------------------------------------------------------------
0000D54C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D54C                            ; --------------------------------------------------------------------------------
0000D54C                            
0000D54C                            SME_gyvTV:	
0000D54C 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D550 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D554 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D558 01                         SME_gyvTV_C:	dc.b 1	
0000D559 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D55E 01                         SME_gyvTV_12:	dc.b 1	
0000D55F E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D564 01                         SME_gyvTV_18:	dc.b 1	
0000D565 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D56A 01                         SME_gyvTV_1E:	dc.b 1	
0000D56B F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D570 01                         SME_gyvTV_24:	dc.b 1	
0000D571 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D576 01                         SME_gyvTV_2A:	dc.b 1	
0000D577 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D57C                            		even
0000D57C                            		even
0000D57C                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C                            ; Object 30 - large green glass blocks (MZ)
0000D57C                            ; ---------------------------------------------------------------------------
0000D57C                            
0000D57C                            GlassBlock:
0000D57C 7000                       		moveq	#0,d0
0000D57E 1028 0024                  		move.b	obRoutine(a0),d0
0000D582 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D586 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D5A8 6000 0000                  		bra.w	DisplaySprite
0000D5AC                            ; ===========================================================================
0000D5AC                            
0000D5AC                            Glass_Delete:
0000D5AC 6000 0000                  		bra.w	DeleteObject
0000D5B0                            ; ===========================================================================
0000D5B0 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D5B2 0000                       		dc.w Glass_Block012-Glass_Index
0000D5B4 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D5B6 0000                       		dc.w Glass_Block34-Glass_Index
0000D5B8 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D5BA                            
0000D5BA =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D5BA =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D5BA                            
0000D5BA 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D5BD 0400 01                    		dc.b 4,	0, 1
0000D5C0 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D5C3 0800 01                    		dc.b 8,	0, 1
0000D5C6                            ; ===========================================================================
0000D5C6                            
0000D5C6                            Glass_Main:	; Routine 0
0000D5C6 45F9 0000 D5BA             		lea	(Glass_Vars1).l,a2
0000D5CC 7201                       		moveq	#1,d1
0000D5CE 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D5D4 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D5DA 6500                       		bcs.s	@IsType012	; if yes, branch
0000D5DC                            
0000D5DC 45F9 0000 D5C0             		lea	(Glass_Vars2).l,a2
0000D5E2 7201                       		moveq	#1,d1
0000D5E4 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D5EA                            
0000D5EA                            	@IsType012:
0000D5EA 2248                       		movea.l	a0,a1
0000D5EC 6000                       		bra.s	@Load		; load main object
0000D5EE                            ; ===========================================================================
0000D5EE                            
0000D5EE                            	@Repeat:
0000D5EE 6100 0000                  		bsr.w	FindNextFreeObj
0000D5F2 6600                       		bne.s	@Fail
0000D5F4                            
0000D5F4                            @Load:
0000D5F4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D5F8 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D5FC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D602 101A                       		move.b	(a2)+,d0
0000D604 4880                       		ext.w	d0
0000D606 D068 000C                  		add.w	obY(a0),d0
0000D60A 3340 000C                  		move.w	d0,obY(a1)
0000D60E 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D616 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D61C 137C 0004 0001             		move.b	#4,obRender(a1)
0000D622 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D628 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D62E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D634 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D63A 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D63E 2348 003C                  		move.l	a0,glass_parent(a1)
0000D642 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D646                            
0000D646 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D64C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D652 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D656 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D65C                            
0000D65C                            	@Fail:
0000D65C 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D662 08E8 0004 0001             		bset	#4,obRender(a0)
0000D668                            
0000D668                            Glass_Block012:	; Routine 2
0000D668 6100 0000                  		bsr.w	Glass_Types
0000D66C 323C 002B                  		move.w	#$2B,d1
0000D670 343C 0048                  		move.w	#$48,d2
0000D674 363C 0049                  		move.w	#$49,d3
0000D678 3828 0008                  		move.w	obX(a0),d4
0000D67C 6000 0000                  		bra.w	SolidObject
0000D680                            ; ===========================================================================
0000D680                            
0000D680                            Glass_Reflect012:
0000D680                            		; Routine 4
0000D680 2268 003C                  		movea.l	$3C(a0),a1
0000D684 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D68A 6000 0000                  		bra.w	Glass_Types
0000D68E                            ; ===========================================================================
0000D68E                            
0000D68E                            Glass_Block34:	; Routine 6
0000D68E 6100 0000                  		bsr.w	Glass_Types
0000D692 323C 002B                  		move.w	#$2B,d1
0000D696 343C 0038                  		move.w	#$38,d2
0000D69A 363C 0039                  		move.w	#$39,d3
0000D69E 3828 0008                  		move.w	obX(a0),d4
0000D6A2 6000 0000                  		bra.w	SolidObject
0000D6A6                            ; ===========================================================================
0000D6A6                            
0000D6A6                            Glass_Reflect34:
0000D6A6                            		; Routine 8
0000D6A6 2268 003C                  		movea.l	$3C(a0),a1
0000D6AA 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D6B0 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D6B6 6000 0000                  		bra.w	Glass_Types
0000D6BA                            
0000D6BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6BA                            
0000D6BA                            
0000D6BA                            Glass_Types:
0000D6BA 7000                       		moveq	#0,d0
0000D6BC 1028 0028                  		move.b	obSubtype(a0),d0
0000D6C0 0240 0007                  		andi.w	#7,d0
0000D6C4 D040                       		add.w	d0,d0
0000D6C6 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D6CA 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D6CE                            ; End of function Glass_Types
0000D6CE                            
0000D6CE                            ; ===========================================================================
0000D6CE 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D6D0 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D6D2 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D6D4 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D6D6 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D6D8                            ; ===========================================================================
0000D6D8                            
0000D6D8                            Glass_Type00:
0000D6D8 4E75                       		rts	
0000D6DA                            ; ===========================================================================
0000D6DA                            
0000D6DA                            Glass_Type01:
0000D6DA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6DE 323C 0040                  		move.w	#$40,d1
0000D6E2 6000                       		bra.s	loc_B514
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            Glass_Type02:
0000D6E4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D6E8 323C 0040                  		move.w	#$40,d1
0000D6EC 4440                       		neg.w	d0
0000D6EE D041                       		add.w	d1,d0
0000D6F0                            
0000D6F0                            loc_B514:
0000D6F0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D6F6 6700                       		beq.s	loc_B526
0000D6F8 4440                       		neg.w	d0
0000D6FA D041                       		add.w	d1,d0
0000D6FC E208                       		lsr.b	#1,d0
0000D6FE 0640 0020                  		addi.w	#$20,d0
0000D702                            
0000D702                            loc_B526:
0000D702 6000 0000                  		bra.w	loc_B5EE
0000D706                            ; ===========================================================================
0000D706                            
0000D706                            Glass_Type03:
0000D706 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D70C 6700                       		beq.s	loc_B53E
0000D70E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D712 0440 0010                  		subi.w	#$10,d0
0000D716 6000 0000                  		bra.w	loc_B5EE
0000D71A                            ; ===========================================================================
0000D71A                            
0000D71A                            loc_B53E:
0000D71A 0828 0003 0022             		btst	#3,obStatus(a0)
0000D720 6600                       		bne.s	loc_B54E
0000D722 08A8 0000 0034             		bclr	#0,$34(a0)
0000D728 6000                       		bra.s	loc_B582
0000D72A                            ; ===========================================================================
0000D72A                            
0000D72A                            loc_B54E:
0000D72A 4A28 0034                  		tst.b	$34(a0)
0000D72E 6600                       		bne.s	loc_B582
0000D730 117C 0001 0034             		move.b	#1,$34(a0)
0000D736 08E8 0000 0035             		bset	#0,$35(a0)
0000D73C 6700                       		beq.s	loc_B582
0000D73E 08E8 0007 0034             		bset	#7,$34(a0)
0000D744 317C 0010 0036             		move.w	#$10,$36(a0)
0000D74A 117C 000A 0038             		move.b	#$A,$38(a0)
0000D750 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D756 6600                       		bne.s	loc_B582
0000D758 317C 0040 0036             		move.w	#$40,$36(a0)
0000D75E                            
0000D75E                            loc_B582:
0000D75E 4A28 0034                  		tst.b	$34(a0)
0000D762 6A00                       		bpl.s	loc_B5AA
0000D764 4A28 0038                  		tst.b	$38(a0)
0000D768 6700                       		beq.s	loc_B594
0000D76A 5328 0038                  		subq.b	#1,$38(a0)
0000D76E 6600                       		bne.s	loc_B5AA
0000D770                            
0000D770                            loc_B594:
0000D770 4A68 0032                  		tst.w	glass_dist(a0)
0000D774 6700                       		beq.s	loc_B5A4
0000D776 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D77A 5368 0036                  		subq.w	#1,$36(a0)
0000D77E 6600                       		bne.s	loc_B5AA
0000D780                            
0000D780                            loc_B5A4:
0000D780 08A8 0007 0034             		bclr	#7,$34(a0)
0000D786                            
0000D786                            loc_B5AA:
0000D786 3028 0032                  		move.w	glass_dist(a0),d0
0000D78A 6000                       		bra.s	loc_B5EE
0000D78C                            ; ===========================================================================
0000D78C                            
0000D78C                            Glass_Type04:
0000D78C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D792 6700                       		beq.s	Glass_ChkSwitch
0000D794 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D798 0440 0010                  		subi.w	#$10,d0
0000D79C 6000                       		bra.s	loc_B5EE
0000D79E                            ; ===========================================================================
0000D79E                            
0000D79E                            Glass_ChkSwitch:
0000D79E 4A28 0034                  		tst.b	$34(a0)
0000D7A2 6600                       		bne.s	loc_B5E0
0000D7A4 45F8 F7E0                  		lea	(f_switch).w,a2
0000D7A8 7000                       		moveq	#0,d0
0000D7AA 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D7AE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D7B0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D7B4 6700                       		beq.s	loc_B5EA	; if not, branch
0000D7B6 117C 0001 0034             		move.b	#1,$34(a0)
0000D7BC                            
0000D7BC                            loc_B5E0:
0000D7BC 4A68 0032                  		tst.w	glass_dist(a0)
0000D7C0 6700                       		beq.s	loc_B5EA
0000D7C2 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D7C6                            
0000D7C6                            loc_B5EA:
0000D7C6 3028 0032                  		move.w	glass_dist(a0),d0
0000D7CA                            
0000D7CA                            loc_B5EE:
0000D7CA 3228 0030                  		move.w	$30(a0),d1
0000D7CE 9240                       		sub.w	d0,d1
0000D7D0 3141 000C                  		move.w	d1,obY(a0)
0000D7D4 4E75                       		rts	
0000D7D4 4E75                       		rts	
0000D7D6                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D7D6                            ; --------------------------------------------------------------------------------
0000D7D6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D7D6                            ; --------------------------------------------------------------------------------
0000D7D6                            
0000D7D6                            SME_NEyTf:	
0000D7D6 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D7DA 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D7DC 0C                         SME_NEyTf_6:	dc.b $C	
0000D7DD B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D7E2 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D7E7 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D7EC C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D7F1 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D7F6 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D7FB 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D800 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D805 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D80A 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D80F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D814 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D819 02                         SME_NEyTf_43:	dc.b 2	
0000D81A 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D81F 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D824 0A                         SME_NEyTf_4E:	dc.b $A	
0000D825 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D82A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D82F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D834 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D839 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D83E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D843 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D848 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D84D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D852 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D858 00                         		even
0000D858 00                         		even
0000D858                            		include	"_incObj\31 Chained Stompers.asm"
0000D858                            ; ---------------------------------------------------------------------------
0000D858                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D858                            ; ---------------------------------------------------------------------------
0000D858                            
0000D858                            ChainStomp:
0000D858 7000                       		moveq	#0,d0
0000D85A 1028 0024                  		move.b	obRoutine(a0),d0
0000D85E 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D862 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D866                            ; ===========================================================================
0000D866 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D868 0000                       		dc.w loc_B798-CStom_Index
0000D86A 0000                       		dc.w loc_B7FE-CStom_Index
0000D86C 0000                       		dc.w CStom_Display2-CStom_Index
0000D86E 0000                       		dc.w loc_B7E2-CStom_Index
0000D870                            
0000D870 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D870                            
0000D870 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D872 0100                       		dc.b 1,	0
0000D874                            
0000D874 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D877 041C 01                    		dc.b 4,	$1C, 1
0000D87A 08CC 03                    		dc.b 8,	$CC, 3
0000D87D 06F0 02                    		dc.b 6,	$F0, 2
0000D880                            
0000D880 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D884 5000 7800                  		dc.w $5000, $7800
0000D888 3800 5800                  		dc.w $3800, $5800
0000D88C B800                       		dc.w $B800
0000D88E                            ; ===========================================================================
0000D88E                            
0000D88E                            CStom_Main:	; Routine 0
0000D88E 7000                       		moveq	#0,d0
0000D890 1028 0028                  		move.b	obSubtype(a0),d0
0000D894 6A00                       		bpl.s	loc_B6CE
0000D896 0240 007F                  		andi.w	#$7F,d0
0000D89A D040                       		add.w	d0,d0
0000D89C 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D8A0 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D8A4 101A                       		move.b	(a2)+,d0
0000D8A6 1140 0028                  		move.b	d0,obSubtype(a0)
0000D8AA                            
0000D8AA                            loc_B6CE:
0000D8AA 0200 000F                  		andi.b	#$F,d0
0000D8AE D040                       		add.w	d0,d0
0000D8B0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D8B4 4A40                       		tst.w	d0
0000D8B6 6600                       		bne.s	loc_B6E0
0000D8B8 3142 0032                  		move.w	d2,$32(a0)
0000D8BC                            
0000D8BC                            loc_B6E0:
0000D8BC 45F9 0000 D874             		lea	(CStom_Var).l,a2
0000D8C2 2248                       		movea.l	a0,a1
0000D8C4 7203                       		moveq	#3,d1
0000D8C6 6000                       		bra.s	CStom_MakeStomper
0000D8C8                            ; ===========================================================================
0000D8C8                            
0000D8C8                            CStom_Loop:
0000D8C8 6100 0000                  		bsr.w	FindNextFreeObj
0000D8CC 6600 0000                  		bne.w	CStom_SetSize
0000D8D0                            
0000D8D0                            CStom_MakeStomper:
0000D8D0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D8D4 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D8D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D8DE 101A                       		move.b	(a2)+,d0
0000D8E0 4880                       		ext.w	d0
0000D8E2 D068 000C                  		add.w	obY(a0),d0
0000D8E6 3340 000C                  		move.w	d0,obY(a1)
0000D8EA 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D8F2 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D8F8 137C 0004 0001             		move.b	#4,obRender(a1)
0000D8FE 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D904 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D90A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D910 3342 0034                  		move.w	d2,$34(a1)
0000D914 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D91A 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D91E 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D924 6600                       		bne.s	loc_B76A
0000D926 5341                       		subq.w	#1,d1
0000D928 1028 0028                  		move.b	obSubtype(a0),d0
0000D92C 0240 00F0                  		andi.w	#$F0,d0
0000D930 0C40 0020                  		cmpi.w	#$20,d0
0000D934 679A                       		beq.s	CStom_MakeStomper
0000D936 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D93C 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D942 5241                       		addq.w	#1,d1
0000D944                            
0000D944                            loc_B76A:
0000D944 2348 003C                  		move.l	a0,$3C(a1)
0000D948 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D94C                            
0000D94C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D952                            
0000D952                            CStom_SetSize:
0000D952 7000                       		moveq	#0,d0
0000D954 1028 0028                  		move.b	obSubtype(a0),d0
0000D958 E648                       		lsr.w	#3,d0
0000D95A 0200 000E                  		andi.b	#$E,d0
0000D95E 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D962 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D966 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D96A 6000                       		bra.s	loc_B798
0000D96C                            ; ===========================================================================
0000D96C 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D96E 3009                       		dc.b $30, 9
0000D970 100A                       		dc.b $10, $A
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            loc_B798:	; Routine 2
0000D972 6100 0000                  		bsr.w	CStom_Types
0000D976 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D97C 7200                       		moveq	#0,d1
0000D97E 1228 0014                  		move.b	obActWid(a0),d1
0000D982 0641 000B                  		addi.w	#$B,d1
0000D986 343C 000C                  		move.w	#$C,d2
0000D98A 363C 000D                  		move.w	#$D,d3
0000D98E 3828 0008                  		move.w	obX(a0),d4
0000D992 6100 0000                  		bsr.w	SolidObject
0000D996 0828 0003 0022             		btst	#3,obStatus(a0)
0000D99C 6700                       		beq.s	CStom_Display
0000D99E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D9A4 6400                       		bcc.s	CStom_Display
0000D9A6 2448                       		movea.l	a0,a2
0000D9A8 41F8 D000                  		lea	(v_player).w,a0
0000D9AC 4EB9 0000 0000             		jsr	(KillSonic).l
0000D9B2 204A                       		movea.l	a2,a0
0000D9B4                            
0000D9B4                            CStom_Display:
0000D9B4 6100 0000                  		bsr.w	DisplaySprite
0000D9B8 6000 0000                  		bra.w	CStom_ChkDel
0000D9BC                            ; ===========================================================================
0000D9BC                            
0000D9BC                            loc_B7E2:	; Routine 8
0000D9BC 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D9C2 08E8 0004 0001             		bset	#4,obRender(a0)
0000D9C8 2268 003C                  		movea.l	$3C(a0),a1
0000D9CC 1029 0032                  		move.b	$32(a1),d0
0000D9D0 EA08                       		lsr.b	#5,d0
0000D9D2 5600                       		addq.b	#3,d0
0000D9D4 1140 001A                  		move.b	d0,obFrame(a0)
0000D9D8                            
0000D9D8                            loc_B7FE:	; Routine 4
0000D9D8 2268 003C                  		movea.l	$3C(a0),a1
0000D9DC 7000                       		moveq	#0,d0
0000D9DE 1029 0032                  		move.b	$32(a1),d0
0000D9E2 D068 0030                  		add.w	$30(a0),d0
0000D9E6 3140 000C                  		move.w	d0,obY(a0)
0000D9EA                            
0000D9EA                            CStom_Display2:	; Routine 6
0000D9EA 6100 0000                  		bsr.w	DisplaySprite
0000D9EE                            
0000D9EE                            CStom_ChkDel:
0000DA0C 4E75                       		rts	
0000DA0E                            ; ===========================================================================
0000DA0E                            
0000DA0E                            CStom_Types:
0000DA0E 1028 0028                  		move.b	obSubtype(a0),d0
0000DA12 0240 000F                  		andi.w	#$F,d0
0000DA16 D040                       		add.w	d0,d0
0000DA18 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DA1C 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DA20                            ; ===========================================================================
0000DA20 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DA22 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA24 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA26 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA28 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA2A 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DA2C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DA2E                            ; ===========================================================================
0000DA2E                            
0000DA2E                            CStom_Type00:
0000DA2E 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DA32 7000                       		moveq	#0,d0
0000DA34 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DA38 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DA3C 6700                       		beq.s	loc_B8A8	; if not, branch
0000DA3E 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DA42 6A00                       		bpl.s	loc_B872
0000DA44 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DA4A 6700                       		beq.s	loc_B8A0
0000DA4C                            
0000DA4C                            loc_B872:
0000DA4C 4A68 0032                  		tst.w	$32(a0)
0000DA50 6700                       		beq.s	loc_B8A0
0000DA52 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DA56 0200 000F                  		andi.b	#$F,d0
0000DA5A 6600                       		bne.s	loc_B892
0000DA5C 4A28 0001                  		tst.b	1(a0)
0000DA60 6A00                       		bpl.s	loc_B892
0000DA6C                            
0000DA6C                            loc_B892:
0000DA6C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DA72 6400                       		bcc.s	CStom_Restart
0000DA74 317C 0000 0032             		move.w	#0,$32(a0)
0000DA7A                            
0000DA7A                            loc_B8A0:
0000DA7A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DA80 6000                       		bra.s	CStom_Restart
0000DA82                            ; ===========================================================================
0000DA82                            
0000DA82                            loc_B8A8:
0000DA82 3228 0034                  		move.w	$34(a0),d1
0000DA86 B268 0032                  		cmp.w	$32(a0),d1
0000DA8A 6700                       		beq.s	CStom_Restart
0000DA8C 3028 0012                  		move.w	obVelY(a0),d0
0000DA90 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DA96 D168 0032                  		add.w	d0,$32(a0)
0000DA9A B268 0032                  		cmp.w	$32(a0),d1
0000DA9E 6200                       		bhi.s	CStom_Restart
0000DAA0 3141 0032                  		move.w	d1,$32(a0)
0000DAA4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DAAA 4A28 0001                  		tst.b	obRender(a0)
0000DAAE 6A00                       		bpl.s	CStom_Restart
0000DABA                            
0000DABA                            CStom_Restart:
0000DABA 7000                       		moveq	#0,d0
0000DABC 1028 0032                  		move.b	$32(a0),d0
0000DAC0 D068 0030                  		add.w	$30(a0),d0
0000DAC4 3140 000C                  		move.w	d0,obY(a0)
0000DAC8 4E75                       		rts	
0000DACA                            ; ===========================================================================
0000DACA                            
0000DACA                            CStom_Type01:
0000DACA 4A68 0036                  		tst.w	$36(a0)
0000DACE 6700                       		beq.s	loc_B938
0000DAD0 4A68 0038                  		tst.w	$38(a0)
0000DAD4 6700                       		beq.s	loc_B902
0000DAD6 5368 0038                  		subq.w	#1,$38(a0)
0000DADA 6000                       		bra.s	loc_B97C
0000DADC                            ; ===========================================================================
0000DADC                            
0000DADC                            loc_B902:
0000DADC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DAE0 0200 000F                  		andi.b	#$F,d0
0000DAE4 6600                       		bne.s	loc_B91C
0000DAE6 4A28 0001                  		tst.b	obRender(a0)
0000DAEA 6A00                       		bpl.s	loc_B91C
0000DAF6                            
0000DAF6                            loc_B91C:
0000DAF6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DAFC 6400                       		bcc.s	loc_B97C
0000DAFE 317C 0000 0032             		move.w	#0,$32(a0)
0000DB04 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DB0A 317C 0000 0036             		move.w	#0,$36(a0)
0000DB10 6000                       		bra.s	loc_B97C
0000DB12                            ; ===========================================================================
0000DB12                            
0000DB12                            loc_B938:
0000DB12 3228 0034                  		move.w	$34(a0),d1
0000DB16 B268 0032                  		cmp.w	$32(a0),d1
0000DB1A 6700                       		beq.s	loc_B97C
0000DB1C 3028 0012                  		move.w	obVelY(a0),d0
0000DB20 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DB26 D168 0032                  		add.w	d0,$32(a0)
0000DB2A B268 0032                  		cmp.w	$32(a0),d1
0000DB2E 6200                       		bhi.s	loc_B97C
0000DB30 3141 0032                  		move.w	d1,$32(a0)
0000DB34 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DB3A 317C 0001 0036             		move.w	#1,$36(a0)
0000DB40 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DB46 4A28 0001                  		tst.b	obRender(a0)
0000DB4A 6A00                       		bpl.s	loc_B97C
0000DB56                            
0000DB56                            loc_B97C:
0000DB56 6000 FF62                  		bra.w	CStom_Restart
0000DB5A                            ; ===========================================================================
0000DB5A                            
0000DB5A                            CStom_Type03:
0000DB5A 3038 D008                  		move.w	(v_player+obX).w,d0
0000DB5E 9068 0008                  		sub.w	obX(a0),d0
0000DB62 6400                       		bcc.s	loc_B98C
0000DB64 4440                       		neg.w	d0
0000DB66                            
0000DB66                            loc_B98C:
0000DB66 0C40 0090                  		cmpi.w	#$90,d0
0000DB6A 6400                       		bcc.s	loc_B996
0000DB6C 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DB70                            
0000DB70                            loc_B996:
0000DB70 6000 FF48                  		bra.w	CStom_Restart
0000DB70 6000 FF48                  		bra.w	CStom_Restart
0000DB74                            		include	"_incObj\45 Sideways Stomper.asm"
0000DB74                            ; ---------------------------------------------------------------------------
0000DB74                            ; Object 45 - spiked metal block from beta version (MZ)
0000DB74                            ; ---------------------------------------------------------------------------
0000DB74                            
0000DB74                            SideStomp:
0000DB74 7000                       		moveq	#0,d0
0000DB76 1028 0024                  		move.b	obRoutine(a0),d0
0000DB7A 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DB7E 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DB82                            ; ===========================================================================
0000DB82 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DB84 0000                       		dc.w SStom_Solid-SStom_Index
0000DB86 0000                       		dc.w loc_BA8E-SStom_Index
0000DB88 0000                       		dc.w SStom_Display-SStom_Index
0000DB8A 0000                       		dc.w SStom_Pole-SStom_Index
0000DB8C                            
0000DB8C                            		;	routine		frame
0000DB8C                            		;		 xpos
0000DB8C 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DB8F 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DB92 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DB95 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DB98                            
0000DB98                            ;word_B9BE:	; Note that this indicates three subtypes
0000DB98 3800                       SStom_Len:	dc.w $3800	; short
0000DB9A A000                       		dc.w $A000	; long
0000DB9C 5000                       		dc.w $5000	; medium
0000DB9E                            ; ===========================================================================
0000DB9E                            
0000DB9E                            SStom_Main:	; Routine 0
0000DB9E 7000                       		moveq	#0,d0
0000DBA0 1028 0028                  		move.b	obSubtype(a0),d0
0000DBA4 D040                       		add.w	d0,d0
0000DBA6 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DBAA 45F9 0000 DB8C             		lea	(SStom_Var).l,a2
0000DBB0 2248                       		movea.l	a0,a1
0000DBB2 7203                       		moveq	#3,d1
0000DBB4 6000                       		bra.s	@load
0000DBB6                            
0000DBB6                            	@loop:
0000DBB6 6100 0000                  		bsr.w	FindNextFreeObj
0000DBBA 6600                       		bne.s	@fail
0000DBBC                            
0000DBBC                            	@load:
0000DBBC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DBC0 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DBC4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DBCA 101A                       		move.b	(a2)+,d0
0000DBCC 4880                       		ext.w	d0
0000DBCE D068 0008                  		add.w	obX(a0),d0
0000DBD2 3340 0008                  		move.w	d0,obX(a1)
0000DBD6 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DBDE 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DBE4 137C 0004 0001             		move.b	#4,obRender(a1)
0000DBEA 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DBF0 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DBF6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DBFC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DC02 3342 0034                  		move.w	d2,$34(a1)
0000DC06 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DC0C 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DC10 6600                       		bne.s	@notspikes	; if not, branch
0000DC12 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DC18                            
0000DC18                            	@notspikes:
0000DC18 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DC1C 2348 003C                  		move.l	a0,$3C(a1)
0000DC20 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DC24                            
0000DC24 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DC2A                            
0000DC2A                            	@fail:
0000DC2A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DC30                            
0000DC30                            SStom_Solid:	; Routine 2
0000DC30 3F28 0008                  		move.w	obX(a0),-(sp)
0000DC34 6100 0000                  		bsr.w	SStom_Move
0000DC38 323C 0017                  		move.w	#$17,d1
0000DC3C 343C 0020                  		move.w	#$20,d2
0000DC40 363C 0020                  		move.w	#$20,d3
0000DC44 381F                       		move.w	(sp)+,d4
0000DC46 6100 0000                  		bsr.w	SolidObject
0000DC4A 6100 0000                  		bsr.w	DisplaySprite
0000DC4E 6000 0000                  		bra.w	SStom_ChkDel
0000DC52                            ; ===========================================================================
0000DC52                            
0000DC52                            SStom_Pole:	; Routine 8
0000DC52 2268 003C                  		movea.l	$3C(a0),a1
0000DC56 1029 0032                  		move.b	$32(a1),d0
0000DC5A 0600 0010                  		addi.b	#$10,d0
0000DC5E EA08                       		lsr.b	#5,d0
0000DC60 5600                       		addq.b	#3,d0
0000DC62 1140 001A                  		move.b	d0,obFrame(a0)
0000DC66                            
0000DC66                            loc_BA8E:	; Routine 4
0000DC66 2268 003C                  		movea.l	$3C(a0),a1
0000DC6A 7000                       		moveq	#0,d0
0000DC6C 1029 0032                  		move.b	$32(a1),d0
0000DC70 4440                       		neg.w	d0
0000DC72 D068 0030                  		add.w	$30(a0),d0
0000DC76 3140 0008                  		move.w	d0,obX(a0)
0000DC7A                            
0000DC7A                            SStom_Display:	; Routine 6
0000DC7A 6100 0000                  		bsr.w	DisplaySprite
0000DC7E                            
0000DC7E                            SStom_ChkDel:
0000DC9C 4E75                       		rts	
0000DC9E                            
0000DC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC9E                            
0000DC9E                            
0000DC9E                            SStom_Move:
0000DC9E 7000                       		moveq	#0,d0
0000DCA0 1028 0028                  		move.b	obSubtype(a0),d0
0000DCA4 D040                       		add.w	d0,d0
0000DCA6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DCAA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DCAE                            ; End of function SStom_Move
0000DCAE                            
0000DCAE                            ; ===========================================================================
0000DCAE                            		; This indicates only two subtypes... that do the same thing
0000DCAE                            		; Compare to SStom_Len. This breaks subtype 02
0000DCAE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DCB0 0000                       		dc.w loc_BADA-off_BAD6
0000DCB2                            ; ===========================================================================
0000DCB2                            
0000DCB2                            loc_BADA:
0000DCB2 4A68 0036                  		tst.w	$36(a0)
0000DCB6 6700                       		beq.s	loc_BB08
0000DCB8 4A68 0038                  		tst.w	$38(a0)
0000DCBC 6700                       		beq.s	loc_BAEC
0000DCBE 5368 0038                  		subq.w	#1,$38(a0)
0000DCC2 6000                       		bra.s	loc_BB3C
0000DCC4                            ; ===========================================================================
0000DCC4                            
0000DCC4                            loc_BAEC:
0000DCC4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DCCA 6400                       		bcc.s	loc_BB3C
0000DCCC 317C 0000 0032             		move.w	#0,$32(a0)
0000DCD2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DCD8 317C 0000 0036             		move.w	#0,$36(a0)
0000DCDE 6000                       		bra.s	loc_BB3C
0000DCE0                            ; ===========================================================================
0000DCE0                            
0000DCE0                            loc_BB08:
0000DCE0 3228 0034                  		move.w	$34(a0),d1
0000DCE4 B268 0032                  		cmp.w	$32(a0),d1
0000DCE8 6700                       		beq.s	loc_BB3C
0000DCEA 3028 0010                  		move.w	obVelX(a0),d0
0000DCEE 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DCF4 D168 0032                  		add.w	d0,$32(a0)
0000DCF8 B268 0032                  		cmp.w	$32(a0),d1
0000DCFC 6200                       		bhi.s	loc_BB3C
0000DCFE 3141 0032                  		move.w	d1,$32(a0)
0000DD02 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DD08 317C 0001 0036             		move.w	#1,$36(a0)
0000DD0E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DD14                            
0000DD14                            loc_BB3C:
0000DD14 7000                       		moveq	#0,d0
0000DD16 1028 0032                  		move.b	$32(a0),d0
0000DD1A 4440                       		neg.w	d0
0000DD1C D068 0030                  		add.w	$30(a0),d0
0000DD20 3140 0008                  		move.w	d0,obX(a0)
0000DD24 4E75                       		rts	
0000DD24 4E75                       		rts	
0000DD26                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DD26                            ; ---------------------------------------------------------------------------
0000DD26                            Map_CStom_internal:
0000DD26 0000                       		dc.w @wideblock-Map_CStom_internal
0000DD28 0000                       		dc.w @spikes-Map_CStom_internal
0000DD2A 0000                       		dc.w @ceiling-Map_CStom_internal
0000DD2C 0000                       		dc.w @chain1-Map_CStom_internal
0000DD2E 0000                       		dc.w @chain2-Map_CStom_internal
0000DD30 0000                       		dc.w @chain3-Map_CStom_internal
0000DD32 0000                       		dc.w @chain4-Map_CStom_internal
0000DD34 0000                       		dc.w @chain5-Map_CStom_internal
0000DD36 0000                       		dc.w @chain5-Map_CStom_internal
0000DD38 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DD3A 0000                       		dc.w @smallblock-Map_CStom_internal
0000DD3C 05                         @wideblock:	dc.b 5
0000DD3D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DD42 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DD47 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DD4C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DD51 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DD56 05                         @spikes:	dc.b 5
0000DD57 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DD5C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DD61 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DD66 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DD6B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DD70 01                         @ceiling:	dc.b 1
0000DD71 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DD76 02                         @chain1:	dc.b 2
0000DD77 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD7C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD81 04                         @chain2:	dc.b 4
0000DD82 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DD87 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DD8C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DD91 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DD96 06                         @chain3:	dc.b 6
0000DD97 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DD9C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDA1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDA6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDAB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDB0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDB5 08                         @chain4:	dc.b 8
0000DDB6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDBB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDC0 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDC5 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDCA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DDCF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DDD4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DDD9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DDDE 0A                         @chain5:	dc.b $A
0000DDDF 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DDE4 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DDE9 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DDEE B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DDF3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DDF8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DDFD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DE02 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DE07 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DE0C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DE11 05                         @mediumblock:	dc.b 5
0000DE12 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DE17 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DE1C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DE21 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DE26 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE2B 01                         @smallblock:	dc.b 1
0000DE2C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DE32 00                         		even
0000DE32 00                         		even
0000DE32                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DE32                            ; ---------------------------------------------------------------------------
0000DE32                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DE32                            ; ---------------------------------------------------------------------------
0000DE32                            Map_SStom_internal:
0000DE32 0000                       		dc.w @block-Map_SStom_internal
0000DE34 0000                       		dc.w @spikes-Map_SStom_internal
0000DE36 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DE38 0000                       		dc.w @pole1-Map_SStom_internal
0000DE3A 0000                       		dc.w @pole2-Map_SStom_internal
0000DE3C 0000                       		dc.w @pole3-Map_SStom_internal
0000DE3E 0000                       		dc.w @pole4-Map_SStom_internal
0000DE40 0000                       		dc.w @pole5-Map_SStom_internal
0000DE42 0000                       		dc.w @pole5-Map_SStom_internal
0000DE44 03                         @block:		dc.b 3
0000DE45 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DE4A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DE4F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DE54 03                         @spikes:	dc.b 3
0000DE55 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DE5A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DE5F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DE64 01                         @wallbracket:	dc.b 1
0000DE65 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DE6A 02                         @pole1:		dc.b 2
0000DE6B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DE70 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE75 04                         @pole2:		dc.b 4
0000DE76 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE7B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE80 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE85 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE8A 06                         @pole3:		dc.b 6
0000DE8B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DE90 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DE95 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DE9A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DE9F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEA4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEA9 08                         @pole4:		dc.b 8
0000DEAA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DEAF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEB4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEB9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEBE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEC3 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEC8 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DECD F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DED2 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DED3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DED8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DEDD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DEE2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DEE7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DEEC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DEF1 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DEF6 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DEFB F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DF00 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DF05                            		; @pole6 should be here, but it isn't...
0000DF06 00                         		even
0000DF06 00                         		even
0000DF06                            
0000DF06                            		include	"_incObj\32 Button.asm"
0000DF06                            ; ---------------------------------------------------------------------------
0000DF06                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DF06                            ; ---------------------------------------------------------------------------
0000DF06                            
0000DF06                            Button:
0000DF06 7000                       		moveq	#0,d0
0000DF08 1028 0024                  		move.b	obRoutine(a0),d0
0000DF0C 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DF10 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DF14                            ; ===========================================================================
0000DF14 0000                       But_Index:	dc.w But_Main-But_Index
0000DF16 0000                       		dc.w But_Pressed-But_Index
0000DF18                            ; ===========================================================================
0000DF18                            
0000DF18                            But_Main:	; Routine 0
0000DF18 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DF1C 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DF24 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DF2A 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DF30 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DF32                            
0000DF32 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DF38                            
0000DF38                            	But_IsMZ:
0000DF38 117C 0004 0001             		move.b	#4,obRender(a0)
0000DF3E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DF44 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DF4A 5668 000C                  		addq.w	#3,obY(a0)
0000DF4E                            
0000DF4E                            But_Pressed:	; Routine 2
0000DF4E 4A28 0001                  		tst.b	obRender(a0)
0000DF52 6A00                       		bpl.s	But_Display
0000DF54 323C 001B                  		move.w	#$1B,d1
0000DF58 343C 0005                  		move.w	#5,d2
0000DF5C 363C 0005                  		move.w	#5,d3
0000DF60 3828 0008                  		move.w	obX(a0),d4
0000DF64 6100 0000                  		bsr.w	SolidObject
0000DF68 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DF6E 1028 0028                  		move.b	obSubtype(a0),d0
0000DF72 0240 000F                  		andi.w	#$F,d0
0000DF76 47F8 F7E0                  		lea	(f_switch).w,a3
0000DF7A 47F3 0000                  		lea	(a3,d0.w),a3
0000DF7E 7600                       		moveq	#0,d3
0000DF80 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DF86 6700                       		beq.s	loc_BDB2
0000DF88 7607                       		moveq	#7,d3
0000DF8A                            
0000DF8A                            loc_BDB2:
0000DF8A 4A28 0028                  		tst.b	obSubtype(a0)
0000DF8E 6A00                       		bpl.s	loc_BDBE
0000DF90 6100 0000                  		bsr.w	But_MZBlock
0000DF94 6600                       		bne.s	loc_BDC8
0000DF96                            
0000DF96                            loc_BDBE:
0000DF96 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DF9A 6600                       		bne.s	loc_BDC8
0000DF9C 0793                       		bclr	d3,(a3)
0000DF9E 6000                       		bra.s	loc_BDDE
0000DFA0                            ; ===========================================================================
0000DFA0                            
0000DFA0                            loc_BDC8:
0000DFA0 4A13                       		tst.b	(a3)
0000DFA2 6600                       		bne.s	loc_BDD6
0000DFAE                            
0000DFAE                            loc_BDD6:
0000DFAE 07D3                       		bset	d3,(a3)
0000DFB0 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DFB6                            
0000DFB6                            loc_BDDE:
0000DFB6 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DFBC 6700                       		beq.s	But_Display
0000DFBE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DFC2 6A00                       		bpl.s	But_Display
0000DFC4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DFCA 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DFD0                            
0000DFD0                            But_Display:
0000DFD0 6100 0000                  		bsr.w	DisplaySprite
0000DFF2 4E75                       		rts	
0000DFF4                            ; ===========================================================================
0000DFF4                            
0000DFF4                            But_Delete:
0000DFF4 6100 0000                  		bsr.w	DeleteObject
0000DFF8 4E75                       		rts	
0000DFFA                            
0000DFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFFA                            
0000DFFA                            
0000DFFA                            But_MZBlock:
0000DFFA 3F03                       		move.w	d3,-(sp)
0000DFFC 3428 0008                  		move.w	obX(a0),d2
0000E000 3628 000C                  		move.w	obY(a0),d3
0000E004 0442 0010                  		subi.w	#$10,d2
0000E008 5143                       		subq.w	#8,d3
0000E00A 383C 0020                  		move.w	#$20,d4
0000E00E 3A3C 0010                  		move.w	#$10,d5
0000E012 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E016 3C3C 005F                  		move.w	#$5F,d6
0000E01A                            
0000E01A                            But_MZLoop:
0000E01A 4A29 0001                  		tst.b	obRender(a1)
0000E01E 6A00                       		bpl.s	loc_BE4E
0000E020 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E024 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E026                            
0000E026                            loc_BE4E:
0000E026 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E02A 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E02E                            
0000E02E 361F                       		move.w	(sp)+,d3
0000E030 7000                       		moveq	#0,d0
0000E032                            
0000E032                            locret_BE5A:
0000E032 4E75                       		rts	
0000E034                            ; ===========================================================================
0000E034 1010                       But_MZData:	dc.b $10, $10
0000E036                            ; ===========================================================================
0000E036                            
0000E036                            loc_BE5E:
0000E036 7001                       		moveq	#1,d0
0000E038 0240 003F                  		andi.w	#$3F,d0
0000E03C D040                       		add.w	d0,d0
0000E03E 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E042 121A                       		move.b	(a2)+,d1
0000E044 4881                       		ext.w	d1
0000E046 3029 0008                  		move.w	obX(a1),d0
0000E04A 9041                       		sub.w	d1,d0
0000E04C 9042                       		sub.w	d2,d0
0000E04E 6400                       		bcc.s	loc_BE80
0000E050 D241                       		add.w	d1,d1
0000E052 D041                       		add.w	d1,d0
0000E054 6500                       		bcs.s	loc_BE84
0000E056 60CE                       		bra.s	loc_BE4E
0000E058                            ; ===========================================================================
0000E058                            
0000E058                            loc_BE80:
0000E058 B044                       		cmp.w	d4,d0
0000E05A 62CA                       		bhi.s	loc_BE4E
0000E05C                            
0000E05C                            loc_BE84:
0000E05C 121A                       		move.b	(a2)+,d1
0000E05E 4881                       		ext.w	d1
0000E060 3029 000C                  		move.w	obY(a1),d0
0000E064 9041                       		sub.w	d1,d0
0000E066 9043                       		sub.w	d3,d0
0000E068 6400                       		bcc.s	loc_BE9A
0000E06A D241                       		add.w	d1,d1
0000E06C D041                       		add.w	d1,d0
0000E06E 6500                       		bcs.s	loc_BE9E
0000E070 60B4                       		bra.s	loc_BE4E
0000E072                            ; ===========================================================================
0000E072                            
0000E072                            loc_BE9A:
0000E072 B045                       		cmp.w	d5,d0
0000E074 62B0                       		bhi.s	loc_BE4E
0000E076                            
0000E076                            loc_BE9E:
0000E076 361F                       		move.w	(sp)+,d3
0000E078 7001                       		moveq	#1,d0
0000E07A 4E75                       		rts	
0000E07C                            ; End of function But_MZBlock
0000E07C                            ; End of function But_MZBlock
0000E07C                            Map_But:	include	"_maps\Button.asm"
0000E07C                            ; ---------------------------------------------------------------------------
0000E07C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E07C                            ; ---------------------------------------------------------------------------
0000E07C                            Map_But_internal:
0000E07C 0000                       		dc.w byte_BEAC-Map_But_internal
0000E07E 0000                       		dc.w byte_BEB7-Map_But_internal
0000E080 0000                       		dc.w byte_BEC2-Map_But_internal
0000E082 0000                       		dc.w byte_BEB7-Map_But_internal
0000E084 02                         byte_BEAC:	dc.b 2
0000E085 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E08A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E08F 02                         byte_BEB7:	dc.b 2
0000E090 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E095 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E09A 02                         byte_BEC2:	dc.b 2
0000E09B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E0A0 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E0A5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E0AA                            		even
0000E0AA                            		even
0000E0AA                            
0000E0AA                            		include	"_incObj\33 Pushable Blocks.asm"
0000E0AA                            ; ---------------------------------------------------------------------------
0000E0AA                            ; Object 33 - pushable blocks (MZ, LZ)
0000E0AA                            ; ---------------------------------------------------------------------------
0000E0AA                            
0000E0AA                            PushBlock:
0000E0AA 7000                       		moveq	#0,d0
0000E0AC 1028 0024                  		move.b	obRoutine(a0),d0
0000E0B0 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E0B4 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E0B8                            ; ===========================================================================
0000E0B8 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E0BA 0000                       		dc.w loc_BF6E-PushB_Index
0000E0BC 0000                       		dc.w loc_C02C-PushB_Index
0000E0BE                            
0000E0BE 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E0C0 4001                       		dc.b $40, 1
0000E0C2                            ; ===========================================================================
0000E0C2                            
0000E0C2                            PushB_Main:	; Routine 0
0000E0C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E0C6 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E0CC 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E0D2 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E0DA 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E0E0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E0E6 6600                       		bne.s	@notLZ
0000E0E8 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E0EE                            
0000E0EE                            	@notLZ:
0000E0EE 117C 0004 0001             		move.b	#4,obRender(a0)
0000E0F4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E0FA 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E100 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E106 7000                       		moveq	#0,d0
0000E108 1028 0028                  		move.b	obSubtype(a0),d0
0000E10C D040                       		add.w	d0,d0
0000E10E 0240 000E                  		andi.w	#$E,d0
0000E112 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E116 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E11A 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E11E 4A28 0028                  		tst.b	obSubtype(a0)
0000E122 6700                       		beq.s	@chkgone
0000E124 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E12A                            
0000E12A                            	@chkgone:
0000E12A 45F8 FC00                  		lea	(v_objstate).w,a2
0000E12E 7000                       		moveq	#0,d0
0000E130 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E134 6700                       		beq.s	loc_BF6E
0000E136 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E13C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E142 6600 0000                  		bne.w	DeleteObject
0000E146                            
0000E146                            loc_BF6E:	; Routine 2
0000E146 4A28 0032                  		tst.b	$32(a0)
0000E14A 6600 0000                  		bne.w	loc_C046
0000E14E 7200                       		moveq	#0,d1
0000E150 1228 0014                  		move.b	obActWid(a0),d1
0000E154 0641 000B                  		addi.w	#$B,d1
0000E158 343C 0010                  		move.w	#$10,d2
0000E15C 363C 0011                  		move.w	#$11,d3
0000E160 3828 0008                  		move.w	obX(a0),d4
0000E164 6100 0000                  		bsr.w	loc_C186
0000E168 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E16E 6600                       		bne.s	loc_BFC6	; if not, branch
0000E170 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E176 3028 0008                  		move.w	obX(a0),d0
0000E17A 0C40 0A20                  		cmpi.w	#$A20,d0
0000E17E 6500                       		bcs.s	loc_BFC6
0000E180 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E184 6400                       		bcc.s	loc_BFC6
0000E186 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E18A 0440 001C                  		subi.w	#$1C,d0
0000E18E 3140 000C                  		move.w	d0,obY(a0)
0000E192 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E198 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E19E                            
0000E19E                            	loc_BFC6:
0000E1BA 6000 0000                  		bra.w	DisplaySprite
0000E1BE                            ; ===========================================================================
0000E1BE                            
0000E1BE                            loc_ppppp:
0000E1DA 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E1E0 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E1E6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E1EC 6000                       		bra.s	loc_C02C
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            loc_C016:
0000E1EE 45F8 FC00                  		lea	(v_objstate).w,a2
0000E1F2 7000                       		moveq	#0,d0
0000E1F4 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E1F8 6700                       		beq.s	loc_C028
0000E1FA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E200                            
0000E200                            loc_C028:
0000E200 6000 0000                  		bra.w	DeleteObject
0000E204                            ; ===========================================================================
0000E204                            
0000E204                            loc_C02C:	; Routine 4
0000E204 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E208 6700                       		beq.s	locret_C044
0000E20A 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E210 4228 0032                  		clr.b	$32(a0)
0000E214 4268 0010                  		clr.w	obVelX(a0)
0000E218 4268 0012                  		clr.w	obVelY(a0)
0000E21C                            
0000E21C                            locret_C044:
0000E21C 4E75                       		rts	
0000E21E                            ; ===========================================================================
0000E21E                            
0000E21E                            loc_C046:
0000E21E 3F28 0008                  		move.w	obX(a0),-(sp)
0000E222 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E228 6400                       		bcc.s	loc_C056
0000E22A 6100 0000                  		bsr.w	SpeedToPos
0000E22E                            
0000E22E                            loc_C056:
0000E22E 0828 0001 0022             		btst	#1,obStatus(a0)
0000E234 6700                       		beq.s	loc_C0A0
0000E236 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E23C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E242 4A41                       		tst.w	d1
0000E244 6A00 0000                  		bpl.w	loc_C09E
0000E248 D368 000C                  		add.w	d1,obY(a0)
0000E24C 4268 0012                  		clr.w	obVelY(a0)
0000E250 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E256 3011                       		move.w	(a1),d0
0000E258 0240 03FF                  		andi.w	#$3FF,d0
0000E25C 0C40 016A                  		cmpi.w	#$16A,d0
0000E260 6500                       		bcs.s	loc_C09E
0000E262 3028 0030                  		move.w	$30(a0),d0
0000E266 E640                       		asr.w	#3,d0
0000E268 3140 0010                  		move.w	d0,obVelX(a0)
0000E26C 117C 0001 0032             		move.b	#1,$32(a0)
0000E272 4268 000E                  		clr.w	$E(a0)
0000E276                            
0000E276                            loc_C09E:
0000E276 6000                       		bra.s	loc_C0E6
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            loc_C0A0:
0000E278 4A68 0010                  		tst.w	obVelX(a0)
0000E27C 6700 0000                  		beq.w	loc_C0D6
0000E280 6B00                       		bmi.s	loc_C0BC
0000E282 7600                       		moveq	#0,d3
0000E284 1628 0014                  		move.b	obActWid(a0),d3
0000E288 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E28E 4A41                       		tst.w	d1		; has block touched a wall?
0000E290 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E292 6000                       		bra.s	loc_C0E6
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            loc_C0BC:
0000E294 7600                       		moveq	#0,d3
0000E296 1628 0014                  		move.b	obActWid(a0),d3
0000E29A 4643                       		not.w	d3
0000E29C 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E2A2 4A41                       		tst.w	d1		; has block touched a wall?
0000E2A4 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E2A6 6000                       		bra.s	loc_C0E6
0000E2A8                            ; ===========================================================================
0000E2A8                            
0000E2A8                            PushB_StopPush:
0000E2A8 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E2AC 6000                       		bra.s	loc_C0E6
0000E2AE                            ; ===========================================================================
0000E2AE                            
0000E2AE                            loc_C0D6:
0000E2AE 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E2B6 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E2BC 6400                       		bcc.s	loc_C104
0000E2BE                            
0000E2BE                            loc_C0E6:
0000E2BE 7200                       		moveq	#0,d1
0000E2C0 1228 0014                  		move.b	obActWid(a0),d1
0000E2C4 0641 000B                  		addi.w	#$B,d1
0000E2C8 343C 0010                  		move.w	#$10,d2
0000E2CC 363C 0011                  		move.w	#$11,d3
0000E2D0 381F                       		move.w	(sp)+,d4
0000E2D2 6100 0000                  		bsr.w	loc_C186
0000E2D6 6100                       		bsr.s	PushB_ChkLava
0000E2D8 6000 FEC4                  		bra.w	loc_BFC6
0000E2DC                            ; ===========================================================================
0000E2DC                            
0000E2DC                            loc_C104:
0000E2DC 381F                       		move.w	(sp)+,d4
0000E2DE 43F8 D000                  		lea	(v_player).w,a1
0000E2E2 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E2E8 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E2EE 6000 FECE                  		bra.w	loc_ppppp
0000E2F2                            ; ===========================================================================
0000E2F2                            
0000E2F2                            PushB_ChkLava:
0000E2F2 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E2F8 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E2FA 343C FFE0                  		move.w	#-$20,d2
0000E2FE 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E304 6700                       		beq.s	PushB_LoadLava
0000E306 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E30C 6700                       		beq.s	PushB_LoadLava
0000E30E 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E314 6700                       		beq.s	PushB_LoadLava
0000E316 4E75                       		rts	
0000E318                            ; ===========================================================================
0000E318                            
0000E318                            PushB_ChkLava2:
0000E318 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E31E 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E320 343C 0020                  		move.w	#$20,d2
0000E324 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E32A 6700                       		beq.s	PushB_LoadLava
0000E32C 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E332 6700                       		beq.s	PushB_LoadLava
0000E334                            
0000E334                            PushB_NoLava:
0000E334 4E75                       		rts	
0000E336                            ; ===========================================================================
0000E336                            
0000E336                            PushB_LoadLava:
0000E336 6100 0000                  		bsr.w	FindFreeObj
0000E33A 6600                       		bne.s	locret_C184
0000E33C 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E340 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E346 D569 0008                  		add.w	d2,obX(a1)
0000E34A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E350 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E356 2348 003C                  		move.l	a0,$3C(a1)
0000E35A                            
0000E35A                            locret_C184:
0000E35A 4E75                       		rts	
0000E35C                            ; ===========================================================================
0000E35C                            
0000E35C                            loc_C186:
0000E35C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E360 6700 0000                  		beq.w	loc_C218
0000E364 5500                       		subq.b	#2,d0
0000E366 6600                       		bne.s	loc_C1AA
0000E368 6100 AE64                  		bsr.w	ExitPlatform
0000E36C 0829 0003 0022             		btst	#3,obStatus(a1)
0000E372 6600                       		bne.s	loc_C1A4
0000E374 4228 0025                  		clr.b	ob2ndRout(a0)
0000E378 4E75                       		rts	
0000E37A                            ; ===========================================================================
0000E37A                            
0000E37A                            loc_C1A4:
0000E37A 3404                       		move.w	d4,d2
0000E37C 6000 B3AE                  		bra.w	MvSonicOnPtfm
0000E380                            ; ===========================================================================
0000E380                            
0000E380                            loc_C1AA:
0000E380 5500                       		subq.b	#2,d0
0000E382 6600                       		bne.s	loc_C1F2
0000E384 6100 0000                  		bsr.w	SpeedToPos
0000E388 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E38E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E394 4A41                       		tst.w	d1
0000E396 6A00 0000                  		bpl.w	locret_C1F0
0000E39A D368 000C                  		add.w	d1,obY(a0)
0000E39E 4268 0012                  		clr.w	obVelY(a0)
0000E3A2 4228 0025                  		clr.b	ob2ndRout(a0)
0000E3A6 3011                       		move.w	(a1),d0
0000E3A8 0240 03FF                  		andi.w	#$3FF,d0
0000E3AC 0C40 016A                  		cmpi.w	#$16A,d0
0000E3B0 6500                       		bcs.s	locret_C1F0
0000E3B2 3028 0030                  		move.w	$30(a0),d0
0000E3B6 E640                       		asr.w	#3,d0
0000E3B8 3140 0010                  		move.w	d0,obVelX(a0)
0000E3BC 117C 0001 0032             		move.b	#1,$32(a0)
0000E3C2 4268 000E                  		clr.w	obY+2(a0)
0000E3C6                            
0000E3C6                            locret_C1F0:
0000E3C6 4E75                       		rts	
0000E3C8                            ; ===========================================================================
0000E3C8                            
0000E3C8                            loc_C1F2:
0000E3C8 6100 0000                  		bsr.w	SpeedToPos
0000E3CC 3028 0008                  		move.w	obX(a0),d0
0000E3D0 0240 000C                  		andi.w	#$C,d0
0000E3D4 6600 0000                  		bne.w	locret_C2E4
0000E3D8 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E3DE 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E3E4 4268 0010                  		clr.w	obVelX(a0)
0000E3E8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E3EC 4E75                       		rts	
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            loc_C218:
0000E3EE 6100 0000                  		bsr.w	Solid_ChkEnter
0000E3F2 4A44                       		tst.w	d4
0000E3F4 6700 0000                  		beq.w	locret_C2E4
0000E3F8 6B00 0000                  		bmi.w	locret_C2E4
0000E3FC 4A28 0032                  		tst.b	$32(a0)
0000E400 6700                       		beq.s	loc_C230
0000E402 6000 0000                  		bra.w	locret_C2E4
0000E406                            ; ===========================================================================
0000E406                            
0000E406                            loc_C230:
0000E406 4A40                       		tst.w	d0
0000E408 6700 0000                  		beq.w	locret_C2E4
0000E40C 6B00                       		bmi.s	loc_C268
0000E40E 0829 0000 0022             		btst	#0,obStatus(a1)
0000E414 6600 0000                  		bne.w	locret_C2E4
0000E418 3F00                       		move.w	d0,-(sp)
0000E41A 7600                       		moveq	#0,d3
0000E41C 1628 0014                  		move.b	obActWid(a0),d3
0000E420 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E426 301F                       		move.w	(sp)+,d0
0000E428 4A41                       		tst.w	d1
0000E42A 6B00 0000                  		bmi.w	locret_C2E4
0000E42E 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E436 7001                       		moveq	#1,d0
0000E438 323C 0040                  		move.w	#$40,d1
0000E43C 6000                       		bra.s	loc_C294
0000E43E                            ; ===========================================================================
0000E43E                            
0000E43E                            loc_C268:
0000E43E 0829 0000 0022             		btst	#0,obStatus(a1)
0000E444 6700                       		beq.s	locret_C2E4
0000E446 3F00                       		move.w	d0,-(sp)
0000E448 7600                       		moveq	#0,d3
0000E44A 1628 0014                  		move.b	obActWid(a0),d3
0000E44E 4643                       		not.w	d3
0000E450 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E456 301F                       		move.w	(sp)+,d0
0000E458 4A41                       		tst.w	d1
0000E45A 6B00                       		bmi.s	locret_C2E4
0000E45C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E464 70FF                       		moveq	#-1,d0
0000E466 323C FFC0                  		move.w	#-$40,d1
0000E46A                            
0000E46A                            loc_C294:
0000E46A 43F8 D000                  		lea	(v_player).w,a1
0000E46E D169 0008                  		add.w	d0,obX(a1)
0000E472 3341 0020                  		move.w	d1,obInertia(a1)
0000E476 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E47C 3F00                       		move.w	d0,-(sp)
0000E488 301F                       		move.w	(sp)+,d0
0000E48A 4A28 0028                  		tst.b	obSubtype(a0)
0000E48E 6B00                       		bmi.s	locret_C2E4
0000E490 3F00                       		move.w	d0,-(sp)
0000E492 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E498 301F                       		move.w	(sp)+,d0
0000E49A 0C41 0004                  		cmpi.w	#4,d1
0000E49E 6F00                       		ble.s	loc_C2E0
0000E4A0 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E4A6 4A40                       		tst.w	d0
0000E4A8 6A00                       		bpl.s	loc_C2D8
0000E4AA 4468 0010                  		neg.w	obVelX(a0)
0000E4AE                            
0000E4AE                            loc_C2D8:
0000E4AE 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E4B4 6000                       		bra.s	locret_C2E4
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            loc_C2E0:
0000E4B6 D368 000C                  		add.w	d1,obY(a0)
0000E4BA                            
0000E4BA                            locret_C2E4:
0000E4BA 4E75                       		rts	
0000E4BA 4E75                       		rts	
0000E4BC                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E4BC                            ; ---------------------------------------------------------------------------
0000E4BC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E4BC                            ; ---------------------------------------------------------------------------
0000E4BC                            Map_Push_internal:
0000E4BC 0000                       		dc.w @single-Map_Push_internal
0000E4BE 0000                       		dc.w @four-Map_Push_internal
0000E4C0 01                         @single:	dc.b 1
0000E4C1 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E4C6 04                         @four:		dc.b 4
0000E4C7 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E4CC F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E4D1 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E4D6 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E4DC 00                         		even
0000E4DC 00                         		even
0000E4DC                            
0000E4DC                            		include	"_incObj\34 Title Cards.asm"
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            ; Object 34 - zone title cards
0000E4DC                            ; ---------------------------------------------------------------------------
0000E4DC                            
0000E4DC                            TitleCard:
0000E4DC 7000                       		moveq	#0,d0
0000E4DE 1028 0024                  		move.b	obRoutine(a0),d0
0000E4E2 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E4E6 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E4EA                            ; ===========================================================================
0000E4EA 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E4EC 0000                       		dc.w Card_ChkPos-Card_Index
0000E4EE 0000                       		dc.w Card_Wait-Card_Index
0000E4F0 0000                       		dc.w Card_Wait-Card_Index
0000E4F2                            
0000E4F2 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E4F2 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E4F2                            ; ===========================================================================
0000E4F2                            
0000E4F2                            Card_CheckSBZ3:	; Routine 0
0000E4F2 2248                       		movea.l	a0,a1
0000E4F4 7000                       		moveq	#0,d0
0000E4F6 1038 FE10                  		move.b	(v_zone).w,d0
0000E4FA 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E500 6600                       		bne.s	Card_CheckFZ
0000E502 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E504                            
0000E504                            	Card_CheckFZ:
0000E504 3400                       		move.w	d0,d2
0000E506 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E50C 6600                       		bne.s	Card_LoadConfig
0000E50E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E510 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E512                            
0000E512                            	Card_LoadConfig:
0000E512 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E518 E948                       		lsl.w	#4,d0
0000E51A D6C0                       		adda.w	d0,a3
0000E51C 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E522 7203                       		moveq	#3,d1
0000E524                            
0000E524                            Card_Loop:
0000E524 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E528 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E52C 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E530 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E534 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E538 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E53C 101A                       		move.b	(a2)+,d0
0000E53E 6600                       		bne.s	Card_ActNumber
0000E540 1002                       		move.b	d2,d0
0000E542                            
0000E542                            	Card_ActNumber:
0000E542 0C00 0007                  		cmpi.b	#7,d0
0000E546 6600                       		bne.s	Card_MakeSprite
0000E548 D038 FE11                  		add.b	(v_act).w,d0
0000E54C 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E552 6600                       		bne.s	Card_MakeSprite
0000E554 5300                       		subq.b	#1,d0
0000E556                            
0000E556                            	Card_MakeSprite:
0000E556 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E55A 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E562 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E568 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E56E 137C 0000 0001             		move.b	#0,obRender(a1)
0000E574 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E57A 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E580 43E9 0040                  		lea	$40(a1),a1	; next object
0000E584 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E588                            
0000E588                            Card_ChkPos:	; Routine 2
0000E588 7210                       		moveq	#$10,d1		; set horizontal speed
0000E58A 3028 0030                  		move.w	card_mainX(a0),d0
0000E58E B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E592 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E594 6C00                       		bge.s	Card_Move
0000E596 4441                       		neg.w	d1
0000E598                            
0000E598                            Card_Move:
0000E598 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E59C                            
0000E59C                            Card_NoMove:
0000E59C 3028 0008                  		move.w	obX(a0),d0
0000E5A0 6B00                       		bmi.s	locret_C3D8
0000E5A2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5A6 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E5A8 6000 0000                  		bra.w	DisplaySprite
0000E5AC                            ; ===========================================================================
0000E5AC                            
0000E5AC                            locret_C3D8:
0000E5AC 4E75                       		rts	
0000E5AE                            ; ===========================================================================
0000E5AE                            
0000E5AE                            Card_Wait:	; Routine 4/6
0000E5AE 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E5B2 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E5B4 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E5B8 6000 0000                  		bra.w	DisplaySprite
0000E5BC                            ; ===========================================================================
0000E5BC                            
0000E5BC                            Card_ChkPos2:
0000E5BC 4A28 0001                  		tst.b	obRender(a0)
0000E5C0 6A00                       		bpl.s	Card_ChangeArt
0000E5C2 7220                       		moveq	#$20,d1
0000E5C4 3028 0032                  		move.w	card_finalX(a0),d0
0000E5C8 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E5CC 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E5CE 6C00                       		bge.s	Card_Move2
0000E5D0 4441                       		neg.w	d1
0000E5D2                            
0000E5D2                            Card_Move2:
0000E5D2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E5D6 3028 0008                  		move.w	obX(a0),d0
0000E5DA 6B00                       		bmi.s	locret_C412
0000E5DC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E5E0 6400                       		bcc.s	locret_C412	; if yes, branch
0000E5E2 6000 0000                  		bra.w	DisplaySprite
0000E5E6                            ; ===========================================================================
0000E5E6                            
0000E5E6                            locret_C412:
0000E5E6 4E75                       		rts	
0000E5E8                            ; ===========================================================================
0000E5E8                            
0000E5E8                            Card_ChangeArt:
0000E5E8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E5EE 6600                       		bne.s	Card_Delete
0000E5F0 7000                       		moveq	#plcid_Explode,d0
0000E5F2 4EB9 0000 16EA             		jsr	(AddPLC).l	; load explosion patterns
0000E5F8 7000                       		moveq	#0,d0
0000E5FA 1038 FE10                  		move.b	(v_zone).w,d0
0000E5FE 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E602 4EB9 0000 16EA             		jsr	(AddPLC).l	; load animal patterns
0000E608                            
0000E608                            Card_Delete:
0000E608 6000 0000                  		bra.w	DeleteObject
0000E60C                            ; ===========================================================================
0000E60C 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E60E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E610 00E4                       		dc.w $E4
0000E612 0206                       		dc.b 2,	6
0000E614 00EA                       		dc.w $EA
0000E616 0207                       		dc.b 2,	7
0000E618 00E0                       		dc.w $E0
0000E61A 020A                       		dc.b 2,	$A
0000E61C                            ; ---------------------------------------------------------------------------
0000E61C                            ; Title	card configuration data
0000E61C                            ; Format:
0000E61C                            ; 4 bytes per item (YYYY XXXX)
0000E61C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E61C                            ; ---------------------------------------------------------------------------
0000E61C 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E62C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E63C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E64C 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E65C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E66C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E67C 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E68C                            ; ===========================================================================
0000E68C                            ; ===========================================================================
0000E68C                            		include	"_incObj\39 Game Over.asm"
0000E68C                            ; ---------------------------------------------------------------------------
0000E68C                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E68C                            ; ---------------------------------------------------------------------------
0000E68C                            
0000E68C                            GameOverCard:
0000E68C 7000                       		moveq	#0,d0
0000E68E 1028 0024                  		move.b	obRoutine(a0),d0
0000E692 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E696 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E69A                            ; ===========================================================================
0000E69A 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E69C 0000                       		dc.w Over_Move-Over_Index
0000E69E 0000                       		dc.w Over_Wait-Over_Index
0000E6A0                            ; ===========================================================================
0000E6A0                            
0000E6A0                            Over_ChkPLC:	; Routine 0
0000E6A0 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E6A4 6700                       		beq.s	Over_Main	; if yes, branch
0000E6A6 4E75                       		rts	
0000E6A8                            ; ===========================================================================
0000E6A8                            
0000E6A8                            Over_Main:
0000E6A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6AC 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E6B2 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E6B8 6700                       		beq.s	Over_1stWord	; if not, branch
0000E6BA 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E6C0                            
0000E6C0                            	Over_1stWord:
0000E6C0 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E6C6 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E6CE 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E6D4 117C 0000 0001             		move.b	#0,obRender(a0)
0000E6DA 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E6E0                            
0000E6E0                            Over_Move:	; Routine 2
0000E6E0 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6E2 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E6E8 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E6EA 6500                       		bcs.s	Over_UpdatePos
0000E6EC 4441                       		neg.w	d1
0000E6EE                            
0000E6EE                            	Over_UpdatePos:
0000E6EE D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6F2 6000 0000                  		bra.w	DisplaySprite
0000E6F6                            ; ===========================================================================
0000E6F6                            
0000E6F6                            Over_SetWait:
0000E6F6 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E6FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E700 4E75                       		rts	
0000E702                            ; ===========================================================================
0000E702                            
0000E702                            Over_Wait:	; Routine 4
0000E702 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E706 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E70A 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E70C 0828 0000 001A             		btst	#0,obFrame(a0)
0000E712 6600                       		bne.s	Over_Display
0000E714 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E718 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E71A 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E71E 6000 0000                  		bra.w	DisplaySprite
0000E722                            ; ===========================================================================
0000E722                            
0000E722                            Over_ChgMode:
0000E722 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E726 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E728 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E72E 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E732 6600                       		bne.s	Over_Display	; if yes, branch
0000E734 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E73A 6000                       		bra.s	Over_Display
0000E73C                            ; ===========================================================================
0000E73C                            
0000E73C                            Over_ResetLvl:
0000E73C 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E740 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E746                            
0000E746                            Over_Display:
0000E746 6000 0000                  		bra.w	DisplaySprite
0000E746 6000 0000                  		bra.w	DisplaySprite
0000E74A                            		include	"_incObj\3A Got Through Card.asm"
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A                            
0000E74A                            GotThroughCard:
0000E74A 7000                       		moveq	#0,d0
0000E74C 1028 0024                  		move.b	obRoutine(a0),d0
0000E750 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E754 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E758                            ; ===========================================================================
0000E758 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E75A 0000                       		dc.w Got_Move-Got_Index
0000E75C 0000                       		dc.w Got_Wait-Got_Index
0000E75E 0000                       		dc.w Got_TimeBonus-Got_Index
0000E760 0000                       		dc.w Got_Wait-Got_Index
0000E762 0000                       		dc.w Got_NextLevel-Got_Index
0000E764 0000                       		dc.w Got_Wait-Got_Index
0000E766 0000                       		dc.w Got_Move2-Got_Index
0000E768 0000                       		dc.w loc_C766-Got_Index
0000E76A                            
0000E76A =00000030                  got_mainX:	equ $30		; position for card to display on
0000E76A =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E76A                            ; ===========================================================================
0000E76A                            
0000E76A                            Got_ChkPLC:	; Routine 0
0000E76A 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E76E 6700                       		beq.s	Got_Main	; if yes, branch
0000E770 4E75                       		rts	
0000E772                            ; ===========================================================================
0000E772                            
0000E772                            Got_Main:
0000E772 2248                       		movea.l	a0,a1
0000E774 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E77A 7206                       		moveq	#6,d1
0000E77C                            
0000E77C                            Got_Loop:
0000E77C 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E780 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E784 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E788 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E78C 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E790 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E794 101A                       		move.b	(a2)+,d0
0000E796 0C00 0006                  		cmpi.b	#6,d0
0000E79A 6600                       		bne.s	loc_C5CA
0000E79C D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E7A0                            
0000E7A0                            	loc_C5CA:
0000E7A0 1340 001A                  		move.b	d0,obFrame(a1)
0000E7A4 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E7AC 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E7B2 137C 0000 0001             		move.b	#0,obRender(a1)
0000E7B8 43E9 0040                  		lea	$40(a1),a1
0000E7BC 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E7C0                            
0000E7C0                            Got_Move:	; Routine 2
0000E7C0 7210                       		moveq	#$10,d1		; set horizontal speed
0000E7C2 3028 0030                  		move.w	got_mainX(a0),d0
0000E7C6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E7CA 6700                       		beq.s	loc_C61A	; if yes, branch
0000E7CC 6C00                       		bge.s	Got_ChgPos
0000E7CE 4441                       		neg.w	d1
0000E7D0                            
0000E7D0                            	Got_ChgPos:
0000E7D0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7D4                            
0000E7D4                            	loc_C5FE:
0000E7D4 3028 0008                  		move.w	obX(a0),d0
0000E7D8 6B00                       		bmi.s	locret_C60E
0000E7DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7DE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E7E0 6000 0000                  		bra.w	DisplaySprite
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            locret_C60E:
0000E7E4 4E75                       		rts	
0000E7E6                            ; ===========================================================================
0000E7E6                            
0000E7E6                            loc_C610:
0000E7E6 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E7EC 6000 0000                  		bra.w	Got_Move2
0000E7F0                            ; ===========================================================================
0000E7F0                            
0000E7F0                            loc_C61A:
0000E7F0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E7F6 67EE                       		beq.s	loc_C610
0000E7F8 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E7FE 66D4                       		bne.s	loc_C5FE
0000E800 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E804 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E80A                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E80A                            
0000E80A                            Got_Wait:	; Routine 4, 8, $C
0000E80A 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E80E 6600                       		bne.s	Got_Display
0000E810 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E814                            
0000E814                            Got_Display:
0000E814 6000 0000                  		bra.w	DisplaySprite
0000E818                            ; ===========================================================================
0000E818                            
0000E818                            Got_TimeBonus:	; Routine 6
0000E818 6100 0000                  		bsr.w	DisplaySprite
0000E81C 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E822 7000                       		moveq	#0,d0
0000E824 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E828 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E82A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E82E 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E834                            
0000E834                            Got_RingBonus:
0000E834 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E838 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E83A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E83E 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E844                            
0000E844                            Got_ChkBonus:
0000E844 4A40                       		tst.w	d0		; is there any bonus?
0000E846 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E852 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E856 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E85C 6600                       		bne.s	Got_SetDelay
0000E85E 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E862                            
0000E862                            Got_SetDelay:
0000E862 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E868                            
0000E868                            locret_C692:
0000E868 4E75                       		rts	
0000E86A                            ; ===========================================================================
0000E86A                            
0000E86A                            Got_AddBonus:
0000E86A 4EB9 0000 0000             		jsr	(AddPoints).l
0000E870 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E874 0200 0003                  		andi.b	#3,d0
0000E878 66EE                       		bne.s	locret_C692
0000E884                            ; ===========================================================================
0000E884                            
0000E884                            Got_NextLevel:	; Routine $A
0000E884 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E88A 1038 FE10                  		move.b	(v_zone).w,d0
0000E88E 0240 0007                  		andi.w	#7,d0
0000E892 E748                       		lsl.w	#3,d0
0000E894 1238 FE11                  		move.b	(v_act).w,d1
0000E898 0241 0003                  		andi.w	#3,d1
0000E89C D241                       		add.w	d1,d1
0000E89E D041                       		add.w	d1,d0
0000E8A0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E8A4 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E8A8 4A40                       		tst.w	d0
0000E8AA 6600                       		bne.s	Got_ChkSS
0000E8AC 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E8B2 6000                       		bra.s	Got_Display2
0000E8B4                            ; ===========================================================================
0000E8B4                            
0000E8B4                            Got_ChkSS:
0000E8B4 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E8B8 4A38 F7CD                  		tst.b	(f_bigring).w	; has Sonic jumped into	a giant	ring?
0000E8BC 6700                       		beq.s	VBla_08A	; if not, branch
0000E8BE 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8C4 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set game mode to Special Stage (10)
0000E8CA 6000                       		bra.s	Got_Display2
0000E8CC 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E8D2                            ; ===========================================================================
0000E8D2                            
0000E8D2                            VBla_08A:
0000E8D2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E8D8                            
0000E8D8                            Got_Display2:
0000E8D8 6000 0000                  		bra.w	DisplaySprite
0000E8DC                            ; ===========================================================================
0000E8DC                            ; ---------------------------------------------------------------------------
0000E8DC                            ; Level	order array
0000E8DC                            ; ---------------------------------------------------------------------------
0000E8DC                            LevelOrder:
0000E8DC                            		; Green Hill Zone
0000E8DC 0001                       		dc.b id_GHZ, 1	; Act 2
0000E8DE 0002                       		dc.b id_GHZ, 2	; Act 2
0000E8E0 0200                       		dc.b id_MZ, 0	; Act 3
0000E8E2 0000                       		dc.b 0, 0
0000E8E4                            
0000E8E4                            		; Labyrinth Zone
0000E8E4 0101                       		dc.b id_LZ, 1	; Act 1
0000E8E6 0102                       		dc.b id_LZ, 2	; Act 2
0000E8E8 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E8EA 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E8EC                            
0000E8EC                            		; Marble Zone
0000E8EC 0201                       		dc.b id_MZ, 1	; Act 1
0000E8EE 0202                       		dc.b id_MZ, 2	; Act 2
0000E8F0 0502                       		dc.b id_SBZ, 2	; Act 3
0000E8F2 0000                       		dc.b 0, 0
0000E8F4                            
0000E8F4                            		; Star Light Zone
0000E8F4 0301                       		dc.b id_SLZ, 1	; Act 1
0000E8F6 0302                       		dc.b id_SLZ, 2	; Act 2
0000E8F8 0500                       		dc.b id_SBZ, 0	; Act 3
0000E8FA 0000                       		dc.b 0, 0
0000E8FC                            
0000E8FC                            		; Spring Yard Zone
0000E8FC 0502                       		dc.b id_SBZ, 2	; Act 1
0000E8FE 0402                       		dc.b id_SYZ, 2	; Act 2
0000E900 0200                       		dc.b id_MZ,	 0	; Act 3
0000E902 0000                       		dc.b 0, 0
0000E904                            
0000E904                            		; Scrap Brain Zone
0000E904 0501                       		dc.b id_SBZ, 1	; Act 1
0000E906 0103                       		dc.b id_LZ, 3	; Act 2
0000E908 0000                       		dc.b 0, 0	; Final Zone
0000E90A 0000                       		dc.b 0, 0
0000E90C                            		even
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            Got_Move2:	; Routine $E
0000E90C 7220                       		moveq	#$20,d1		; set horizontal speed
0000E90E 3028 0032                  		move.w	got_finalX(a0),d0
0000E912 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E916 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E918 6C00                       		bge.s	Got_ChgPos2
0000E91A 4441                       		neg.w	d1
0000E91C                            
0000E91C                            	Got_ChgPos2:
0000E91C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E920 3028 0008                  		move.w	obX(a0),d0
0000E924 6B00                       		bmi.s	locret_C748
0000E926 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E92A 6400                       		bcc.s	locret_C748	; if yes, branch
0000E92C 6000 0000                  		bra.w	DisplaySprite
0000E930                            ; ===========================================================================
0000E930                            
0000E930                            locret_C748:
0000E930 4E75                       		rts	
0000E932                            ; ===========================================================================
0000E932                            
0000E932                            Got_SBZ2:
0000E932 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E938 6600 0000                  		bne.w	DeleteObject
0000E93C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E940 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E944 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            loc_C766:	; Routine $10
0000E954 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E958 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E95E 6700 0000                  		beq.w	DeleteObject
0000E962 4E75                       		rts	
0000E964                            ; ===========================================================================
0000E964                            		;    x-start,	x-main,	y-main,
0000E964                            		;				routine, frame number
0000E964                            
0000E964 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E96A 0200                       		dc.b 				2,	0
0000E96C                            
0000E96C FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E972 0201                       		dc.b 				2,	1
0000E974                            
0000E974 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E97A 0206                       		dc.b 				2,	6
0000E97C                            
0000E97C 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E982 0202                       		dc.b 				2,	2
0000E984                            
0000E984 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E98A 0203                       		dc.b 				2,	3
0000E98C                            
0000E98C 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E992 0204                       		dc.b 				2,	4
0000E994                            
0000E994 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E99A 0205                       		dc.b 				2,	5
0000E99A 0205                       		dc.b 				2,	5
0000E99C                            		include	"_incObj\7E Special Stage Results.asm"
0000E99C                            ; ---------------------------------------------------------------------------
0000E99C                            ; Object 7E - special stage results screen
0000E99C                            ; ---------------------------------------------------------------------------
0000E99C                            
0000E99C                            SSResult:
0000E99C 7000                       		moveq	#0,d0
0000E99E 1028 0024                  		move.b	obRoutine(a0),d0
0000E9A2 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E9A6 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E9AA                            ; ===========================================================================
0000E9AA 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E9AC 0000                       		dc.w SSR_Move-SSR_Index
0000E9AE 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B0 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E9B2 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B4 0000                       		dc.w SSR_Exit-SSR_Index
0000E9B6 0000                       		dc.w SSR_Wait-SSR_Index
0000E9B8 0000                       		dc.w SSR_Continue-SSR_Index
0000E9BA 0000                       		dc.w SSR_Wait-SSR_Index
0000E9BC 0000                       		dc.w SSR_Exit-SSR_Index
0000E9BE 0000                       		dc.w loc_C91A-SSR_Index
0000E9C0                            
0000E9C0 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E9C0                            ; ===========================================================================
0000E9C0                            
0000E9C0                            SSR_ChkPLC:	; Routine 0
0000E9C0 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E9C4 6700                       		beq.s	SSR_Main	; if yes, branch
0000E9C6 4E75                       		rts	
0000E9C8                            ; ===========================================================================
0000E9C8                            
0000E9C8                            SSR_Main:
0000E9C8 2248                       		movea.l	a0,a1
0000E9CA 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E9D0 7203                       		moveq	#3,d1
0000E9D2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E9D8 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E9DA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E9DC                            
0000E9DC                            	SSR_Loop:
0000E9DC 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E9E0 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E9E4 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E9E8 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E9EC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E9F0 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E9F4 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E9FC 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EA02 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA08 43E9 0040                  		lea	$40(a1),a1
0000EA0C 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EA10                            
0000EA10 7007                       		moveq	#7,d0
0000EA12 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EA16 6700                       		beq.s	loc_C842
0000EA18 7000                       		moveq	#0,d0
0000EA1A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EA1E 6600                       		bne.s	loc_C842	; if not, branch
0000EA20 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EA22 317C 0018 0008             		move.w	#$18,obX(a0)
0000EA28 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EA2E                            
0000EA2E                            loc_C842:
0000EA2E 1140 001A                  		move.b	d0,obFrame(a0)
0000EA32                            
0000EA32                            SSR_Move:	; Routine 2
0000EA32 7210                       		moveq	#$10,d1		; set horizontal speed
0000EA34 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EA38 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EA3C 6700                       		beq.s	loc_C86C	; if yes, branch
0000EA3E 6C00                       		bge.s	SSR_ChgPos
0000EA40 4441                       		neg.w	d1
0000EA42                            
0000EA42                            SSR_ChgPos:
0000EA42 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA46                            
0000EA46                            loc_C85A:
0000EA46 3028 0008                  		move.w	obX(a0),d0
0000EA4A 6B00                       		bmi.s	locret_C86A
0000EA4C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA50 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EA52 6000 0000                  		bra.w	DisplaySprite
0000EA56                            ; ===========================================================================
0000EA56                            
0000EA56                            locret_C86A:
0000EA56 4E75                       		rts	
0000EA58                            ; ===========================================================================
0000EA58                            
0000EA58                            loc_C86C:
0000EA58 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EA5E 66E6                       		bne.s	loc_C85A
0000EA60 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA64 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA6A 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EA70                            
0000EA70                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EA70 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EA74 6600                       		bne.s	SSR_Display
0000EA76 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA7A                            
0000EA7A                            SSR_Display:
0000EA7A 6000 0000                  		bra.w	DisplaySprite
0000EA7E                            ; ===========================================================================
0000EA7E                            
0000EA7E                            SSR_RingBonus:	; Routine 6
0000EA7E 6100 0000                  		bsr.w	DisplaySprite
0000EA82 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EA88 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EA8C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EA8E 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA94 700A                       		moveq	#10,d0		; add 10 to score
0000EA96 4EB9 0000 0000             		jsr	(AddPoints).l
0000EA9C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EAA0 0200 0003                  		andi.b	#3,d0
0000EAA4 6600                       		bne.s	locret_C8EA
0000EAB0                            ; ===========================================================================
0000EAB0                            
0000EAB0                            loc_C8C4:
0000EABA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EABE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EAC4 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EACA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EACC 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EAD2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EAD6                            
0000EAD6                            locret_C8EA:
0000EAD6 4E75                       		rts	
0000EAD8                            ; ===========================================================================
0000EAD8                            
0000EAD8                            SSR_Exit:	; Routine $A, $12
0000EAD8 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EADE 6000 0000                  		bra.w	DisplaySprite
0000EAE2                            ; ===========================================================================
0000EAE2                            
0000EAE2                            SSR_Continue:	; Routine $E
0000EAE2 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EAE8 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EAF8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EAFC 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EB02 6000 0000                  		bra.w	DisplaySprite
0000EB06                            ; ===========================================================================
0000EB06                            
0000EB06                            loc_C91A:	; Routine $14
0000EB06 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EB0A 0200 000F                  		andi.b	#$F,d0
0000EB0E 6600                       		bne.s	SSR_Display2
0000EB10 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EB16                            
0000EB16                            SSR_Display2:
0000EB16 6000 0000                  		bra.w	DisplaySprite
0000EB1A                            ; ===========================================================================
0000EB1A 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EB20 0200                       		dc.b 2,	0		; rountine number, frame number
0000EB22 0320 0120 0118             		dc.w $320, $120, $118
0000EB28 0201                       		dc.b 2,	1
0000EB2A 0360 0120 0128             		dc.w $360, $120, $128
0000EB30 0202                       		dc.b 2,	2
0000EB32 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EB38 0203                       		dc.b 2,	3
0000EB3A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EB40 0206                       		dc.b 2,	6
0000EB40 0206                       		dc.b 2,	6
0000EB42                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42                            ; Object 7F - chaos emeralds from the special stage results screen
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42                            
0000EB42                            SSRChaos:
0000EB42 7000                       		moveq	#0,d0
0000EB44 1028 0024                  		move.b	obRoutine(a0),d0
0000EB48 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EB4C 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EB50                            ; ===========================================================================
0000EB50 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EB52 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EB54                            
0000EB54                            ; ---------------------------------------------------------------------------
0000EB54                            ; X-axis positions for chaos emeralds
0000EB54                            ; ---------------------------------------------------------------------------
0000EB54 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EB60                            ; ===========================================================================
0000EB60                            
0000EB60                            SSRC_Main:	; Routine 0
0000EB60 2248                       		movea.l	a0,a1
0000EB62 45F9 0000 EB54             		lea	(SSRC_PosData).l,a2
0000EB68 7400                       		moveq	#0,d2
0000EB6A 7200                       		moveq	#0,d1
0000EB6C 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EB70 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EB72 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EB76                            
0000EB76                            	SSRC_Loop:
0000EB76 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EB7A 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EB7E 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EB84 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EB88 1633 2000                  		move.b	(a3,d2.w),d3
0000EB8C 1343 001A                  		move.b	d3,obFrame(a1)
0000EB90 1343 001C                  		move.b	d3,obAnim(a1)
0000EB94 5202                       		addq.b	#1,d2
0000EB96 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EB9A 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EBA2 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EBA8 137C 0000 0001             		move.b	#0,obRender(a1)
0000EBAE 43E9 0040                  		lea	$40(a1),a1	; next object
0000EBB2 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EBB6                            
0000EBB6                            SSRC_Flash:	; Routine 2
0000EBB6 1028 001A                  		move.b	obFrame(a0),d0
0000EBBA 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EBC0 0C00 0006                  		cmpi.b	#6,d0
0000EBC4 6600                       		bne.s	SSRC_Display
0000EBC6 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EBCC                            
0000EBCC                            	SSRC_Display:
0000EBCC 6000 0000                  		bra.w	DisplaySprite
0000EBCC 6000 0000                  		bra.w	DisplaySprite
0000EBD0                            
0000EBD0                            ; ---------------------------------------------------------------------------
0000EBD0                            ; Sprite mappings - zone title cards
0000EBD0                            ; ---------------------------------------------------------------------------
0000EBD0 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EBD2 0000                       		dc.w M_Card_LZ-Map_Card
0000EBD4 0000                       		dc.w M_Card_MZ-Map_Card
0000EBD6 0000                       		dc.w M_Card_SLZ-Map_Card
0000EBD8 0000                       		dc.w M_Card_SYZ-Map_Card
0000EBDA 0000                       		dc.w M_Card_SBZ-Map_Card
0000EBDC 0000                       		dc.w M_Card_Zone-Map_Card
0000EBDE 0000                       		dc.w M_Card_Act1-Map_Card
0000EBE0 0000                       		dc.w M_Card_Act2-Map_Card
0000EBE2 0000                       		dc.w M_Card_Act3-Map_Card
0000EBE4 0000                       		dc.w M_Card_Oval-Map_Card
0000EBE6 0000                       		dc.w M_Card_FZ-Map_Card
0000EBE8 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EBE9 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EBEE F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EBF3 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EBF8 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EBFD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EC02 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EC07 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EC0C F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EC11 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EC16                            		even
0000EC16 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EC17 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EC1C F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EC21 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EC26 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EC2B F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EC30 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EC35 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EC3A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EC3F F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EC44                            		even
0000EC44 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EC45 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EC4A F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EC4F F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EC54 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EC59 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EC5E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EC63 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EC68 F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EC6D F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EC72 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EC77 F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EC7C 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EC7D F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EC82 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EC87 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EC8C F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EC91 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EC96 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EC9B F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000ECA0 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000ECA5 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000ECAA                            		even
0000ECAA 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000ECAB F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ECB0 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000ECB5 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ECBA F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000ECBF F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000ECC4 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000ECC9 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000ECCE F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000ECD3 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000ECD8 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000ECDE 00                         		even
0000ECDE 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000ECDF F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000ECE4 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000ECE9 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000ECEE F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000ECF3 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000ECF8 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000ECFD F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000ED02 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000ED07 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000ED0C F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000ED12 00                         		even
0000ED12 04                         M_Card_Zone:	dc.b 4			; ZONE
0000ED13 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000ED18 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000ED1D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ED22 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ED28 00                         		even
0000ED28 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000ED29 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED2E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ED33 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000ED34 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED39 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ED3E 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000ED3F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ED44 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ED49 0D                         M_Card_Oval:	dc.b $D			; Oval
0000ED4A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ED4F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ED54 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ED59 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ED5E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ED63 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000ED68 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000ED6D FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000ED72 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000ED77 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000ED7C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000ED81 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000ED86 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000ED8C 00                         		even
0000ED8C 05                         M_Card_FZ:	dc.b 5			; FINAL
0000ED8D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000ED92 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000ED97 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED9C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EDA1 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EDA6                            		even
0000EDA6                            
0000EDA6                            Map_Over:	include	"_maps\Game Over.asm"
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EDA6                            ; ---------------------------------------------------------------------------
0000EDA6                            Map_Over_internal:
0000EDA6 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EDA8 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EDAA 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EDAC 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EDAE 02                         byte_CBAC:	dc.b 2			; GAME
0000EDAF F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EDB4 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EDB9 02                         byte_CBB7:	dc.b 2			; OVER
0000EDBA F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EDBF F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EDC4 02                         byte_CBC2:	dc.b 2			; TIME
0000EDC5 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EDCA F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EDCF 02                         byte_CBCD:	dc.b 2			; OVER
0000EDD0 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EDD5 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EDDA                            		even
0000EDDA                            		even
0000EDDA                            
0000EDDA                            ; ---------------------------------------------------------------------------
0000EDDA                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EDDA                            ; ---------------------------------------------------------------------------
0000EDDA 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EDDC 0000                       		dc.w M_Got_Passed-Map_Got
0000EDDE 0000                       		dc.w M_Got_Score-Map_Got
0000EDE0 0000                       		dc.w M_Got_TBonus-Map_Got
0000EDE2 0000                       		dc.w M_Got_RBonus-Map_Got
0000EDE4 FF6F                       		dc.w M_Card_Oval-Map_Got
0000EDE6 FF4E                       		dc.w M_Card_Act1-Map_Got
0000EDE8 FF59                       		dc.w M_Card_Act2-Map_Got
0000EDEA FF64                       		dc.w M_Card_Act3-Map_Got
0000EDEC 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EDED F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EDF2 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EDF7 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EDFC F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EE01 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EE06 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EE0B F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EE10 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EE15 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EE16 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EE1B F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EE20 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EE25 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EE2A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE2F F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EE34 06                         M_Got_Score:	dc.b 6			; SCORE
0000EE35 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EE3A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EE3F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EE44 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EE49 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EE4E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EE53 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EE54 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EE59 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE5E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE63 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE68 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE6D F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EE72 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE77 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EE78 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EE7D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EE82 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EE87 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EE8C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EE91 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EE96 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EE9C 00                         		even
0000EE9C                            ; ---------------------------------------------------------------------------
0000EE9C                            ; Sprite mappings - special stage results screen
0000EE9C                            ; ---------------------------------------------------------------------------
0000EE9C 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EE9E 0000                       		dc.w M_SSR_Score-Map_SSR
0000EEA0 0000                       		dc.w byte_CD0D-Map_SSR
0000EEA2 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EEA4 0000                       		dc.w byte_CD31-Map_SSR
0000EEA6 0000                       		dc.w byte_CD46-Map_SSR
0000EEA8 0000                       		dc.w byte_CD5B-Map_SSR
0000EEAA 0000                       		dc.w byte_CD6B-Map_SSR
0000EEAC 0000                       		dc.w byte_CDA8-Map_SSR
0000EEAE 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EEAF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EEB4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EEB9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EEBE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EEC3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EEC8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EECD F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EED2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EED7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EEDC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EEE1 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EEE6 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EEEB F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EEF0 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EEF1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EEF6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EEFB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF00 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF05 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF0A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF0F 07                         byte_CD0D:	dc.b 7
0000EF10 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EF15 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF1A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF1F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF24 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EF29 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EF2E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EF33 04                         byte_CD31:	dc.b 4
0000EF34 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF39 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF3E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF43 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EF48 04                         byte_CD46:	dc.b 4
0000EF49 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF4E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF53 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF58 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EF5D 03                         byte_CD5B:	dc.b 3
0000EF5E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EF63 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EF68 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EF6D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EF6E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EF73 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EF78 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EF7D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EF82 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EF87 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EF8C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EF91 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EF96 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EF9B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EFA0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EFA5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EFAA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EFAB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EFB0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EFB5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EFBA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EFBF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EFC4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EFC9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EFCE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EFD3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EFD8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EFDD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EFE2 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EFE7 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EFEC F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EFF1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EFF6                            		even
0000EFF6                            
0000EFF6                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6                            Map_SSRC_internal:
0000EFF6 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EFF8 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EFFA 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EFFC 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EFFE 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F000 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F002 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F004 01                         byte_CE02:	dc.b 1
0000F005 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F00A 01                         byte_CE08:	dc.b 1
0000F00B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F010 01                         byte_CE0E:	dc.b 1
0000F011 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F016 01                         byte_CE14:	dc.b 1
0000F017 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F01C 01                         byte_CE1A:	dc.b 1
0000F01D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F022 01                         byte_CE20:	dc.b 1
0000F023 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F028 00                         byte_CE26:	dc.b 0			; Blank frame
0000F02A 00                         		even
0000F02A 00                         		even
0000F02A                            
0000F02A                            		include	"_incObj\36 Spikes.asm"
0000F02A                            ; ---------------------------------------------------------------------------
0000F02A                            ; Object 36 - spikes
0000F02A                            ; ---------------------------------------------------------------------------
0000F02A                            
0000F02A                            Spikes:
0000F02A 7000                       		moveq	#0,d0
0000F02C 1028 0024                  		move.b	obRoutine(a0),d0
0000F030 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F034 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F038                            ; ===========================================================================
0000F038 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F03A 0000                       		dc.w Spik_Solid-Spik_Index
0000F03C                            
0000F03C =00000030                  spik_origX:	equ $30		; start X position
0000F03C =00000032                  spik_origY:	equ $32		; start Y position
0000F03C                            
0000F03C 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F03E 0110                       		dc.b 1,	$10
0000F040 0204                       		dc.b 2,	4
0000F042 031C                       		dc.b 3,	$1C
0000F044 0440                       		dc.b 4,	$40
0000F046 0510                       		dc.b 5,	$10
0000F048                            ; ===========================================================================
0000F048                            
0000F048                            Spik_Main:	; Routine 0
0000F048 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F04C 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F054 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F05A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F060 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F066 1028 0028                  		move.b	obSubtype(a0),d0
0000F06A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F070 0240 00F0                  		andi.w	#$F0,d0
0000F074 43F9 0000 F03C             		lea	(Spik_Var).l,a1
0000F07A E648                       		lsr.w	#3,d0
0000F07C D2C0                       		adda.w	d0,a1
0000F07E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F082 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F086 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F08C 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F092                            
0000F092                            Spik_Solid:	; Routine 2
0000F092 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F096 343C 0004                  		move.w	#4,d2
0000F09A 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F0A0 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F0A2 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F0A8 6600                       		bne.s	Spik_Upright	; if not, branch
0000F0AA 343C 0014                  		move.w	#$14,d2
0000F0AE                            
0000F0AE                            ; Spikes types $1x and $5x face	sideways
0000F0AE                            
0000F0AE                            Spik_SideWays:
0000F0AE 323C 001B                  		move.w	#$1B,d1
0000F0B2 3602                       		move.w	d2,d3
0000F0B4 5243                       		addq.w	#1,d3
0000F0B6 3828 0008                  		move.w	obX(a0),d4
0000F0BA 6100 0000                  		bsr.w	SolidObject
0000F0BE 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0C4 6600                       		bne.s	Spik_Display
0000F0C6 0C44 0001                  		cmpi.w	#1,d4
0000F0CA 6700                       		beq.s	Spik_Hurt
0000F0CC 6000                       		bra.s	Spik_Display
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F0CE                            
0000F0CE                            Spik_Upright:
0000F0CE 7200                       		moveq	#0,d1
0000F0D0 1228 0014                  		move.b	obActWid(a0),d1
0000F0D4 0641 000B                  		addi.w	#$B,d1
0000F0D8 343C 0010                  		move.w	#$10,d2
0000F0DC 363C 0011                  		move.w	#$11,d3
0000F0E0 3828 0008                  		move.w	obX(a0),d4
0000F0E4 6100 0000                  		bsr.w	SolidObject
0000F0E8 0828 0003 0022             		btst	#3,obStatus(a0)
0000F0EE 6600                       		bne.s	Spik_Hurt
0000F0F0 4A44                       		tst.w	d4
0000F0F2 6A00                       		bpl.s	Spik_Display
0000F0F4                            
0000F0F4                            Spik_Hurt:
0000F0F4 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F0F8 6600                       		bne.s	Spik_Display	; if yes, branch
0000F0FA 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F0FE 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F100 2F08                       		move.l	a0,-(sp)
0000F102 2448                       		movea.l	a0,a2
0000F104 41F8 D000                  		lea	(v_player).w,a0
0000F108 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F10E 6400                       		bcc.s	loc_CF20
0000F110                            		; This fixes the infamous "spike bug"
0000F110 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F114 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F116 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F11C                            loc_D5A2:
0000F11C 9680                       		sub.l	d0,d3
0000F11E 2143 000C                  		move.l	d3,obY(a0)
0000F122 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F128                            
0000F128                            loc_CF20:
0000F128 205F                       		movea.l	(sp)+,a0
0000F12A                            
0000F12A                            Spik_Display:
0000F12A 6100 0000                  		bsr.w	DisplaySprite
0000F14C 4E75                       		rts	
0000F14E                            ; ===========================================================================
0000F14E                            
0000F14E                            Spik_Type0x:
0000F14E 7000                       		moveq	#0,d0
0000F150 1028 0028                  		move.b	obSubtype(a0),d0
0000F154 D040                       		add.w	d0,d0
0000F156 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F15A 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F15E                            ; ===========================================================================
0000F15E 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F160 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F162 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F164                            ; ===========================================================================
0000F164                            
0000F164                            Spik_Type00:
0000F164 4E75                       		rts			; don't move the object
0000F166                            ; ===========================================================================
0000F166                            
0000F166                            Spik_Type01:
0000F166 6100 0000                  		bsr.w	Spik_Wait
0000F16A 7000                       		moveq	#0,d0
0000F16C 1028 0034                  		move.b	$34(a0),d0
0000F170 D068 0032                  		add.w	spik_origY(a0),d0
0000F174 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F178 4E75                       		rts	
0000F17A                            ; ===========================================================================
0000F17A                            
0000F17A                            Spik_Type02:
0000F17A 6100 0000                  		bsr.w	Spik_Wait
0000F17E 7000                       		moveq	#0,d0
0000F180 1028 0034                  		move.b	$34(a0),d0
0000F184 D068 0030                  		add.w	spik_origX(a0),d0
0000F188 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F18C 4E75                       		rts	
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Spik_Wait:
0000F18E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F192 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F194 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F198 6600                       		bne.s	locret_CFE6
0000F19A 4A28 0001                  		tst.b	obRender(a0)
0000F19E 6A00                       		bpl.s	locret_CFE6
0000F1AA 6000                       		bra.s	locret_CFE6
0000F1AC                            ; ===========================================================================
0000F1AC                            
0000F1AC                            loc_CFA4:
0000F1AC 4A68 0036                  		tst.w	$36(a0)
0000F1B0 6700                       		beq.s	loc_CFC6
0000F1B2 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F1B8 6400                       		bcc.s	locret_CFE6
0000F1BA 317C 0000 0034             		move.w	#0,$34(a0)
0000F1C0 317C 0000 0036             		move.w	#0,$36(a0)
0000F1C6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1CC 6000                       		bra.s	locret_CFE6
0000F1CE                            ; ===========================================================================
0000F1CE                            
0000F1CE                            loc_CFC6:
0000F1CE 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F1D4 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F1DA 6500                       		bcs.s	locret_CFE6
0000F1DC 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F1E2 317C 0001 0036             		move.w	#1,$36(a0)
0000F1E8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F1EE                            
0000F1EE                            locret_CFE6:
0000F1EE 4E75                       		rts	
0000F1EE 4E75                       		rts	
0000F1F0                            Map_Spike:	include	"_maps\Spikes.asm"
0000F1F0                            ; --------------------------------------------------------------------------------
0000F1F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F1F0                            ; --------------------------------------------------------------------------------
0000F1F0                            
0000F1F0                            SME_XgeaQ:	
0000F1F0 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F1F4 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F1F8 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F1FC 03                         SME_XgeaQ_C:	dc.b 3	
0000F1FD F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F202 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F207 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F20C 03                         SME_XgeaQ_1C:	dc.b 3	
0000F20D EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F212 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F217 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F21C 01                         SME_XgeaQ_2C:	dc.b 1	
0000F21D F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F222 03                         SME_XgeaQ_32:	dc.b 3	
0000F223 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F228 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F22D F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F232 06                         SME_XgeaQ_42:	dc.b 6	
0000F233 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F238 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F23D F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F242 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F247 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F24C F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F251 01                         SME_XgeaQ_61:	dc.b 1	
0000F252 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F258 00                         		even
0000F258 00                         		even
0000F258                            		include	"_incObj\3B Purple Rock.asm"
0000F258                            ; ---------------------------------------------------------------------------
0000F258                            ; Object 3B - purple rock (GHZ)
0000F258                            ; ---------------------------------------------------------------------------
0000F258                            
0000F258                            PurpleRock:
0000F258 7000                       		moveq	#0,d0
0000F25A 1028 0024                  		move.b	obRoutine(a0),d0
0000F25E 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F262 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F266                            ; ===========================================================================
0000F266 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F268 0000                       		dc.w Rock_Solid-Rock_Index
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            Rock_Main:	; Routine 0
0000F26A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F26E 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F276 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F27C 117C 0004 0001             		move.b	#4,obRender(a0)
0000F282 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F288 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F28E                            
0000F28E                            Rock_Solid:	; Routine 2
0000F28E 323C 001B                  		move.w	#$1B,d1
0000F292 343C 0010                  		move.w	#$10,d2
0000F296 363C 0010                  		move.w	#$10,d3
0000F29A 3828 0008                  		move.w	obX(a0),d4
0000F29E 6100 0000                  		bsr.w	SolidObject
0000F2A2 6100 0000                  		bsr.w	DisplaySprite
0000F2C4 4E75                       		rts	
0000F2C4 4E75                       		rts	
0000F2C6                            		include	"_incObj\49 Waterfall Sound.asm"
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            ; Object 49 - waterfall	sound effect (GHZ)
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            
0000F2C6                            WaterSound:
0000F2C6 7000                       		moveq	#0,d0
0000F2C8 1028 0024                  		move.b	obRoutine(a0),d0
0000F2CC 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F2D0 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F2D4                            ; ===========================================================================
0000F2D4 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F2D6 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F2D8                            ; ===========================================================================
0000F2D8                            
0000F2D8                            WSnd_Main:	; Routine 0
0000F2D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F2DC 117C 0004 0001             		move.b	#4,obRender(a0)
0000F2E2                            
0000F2E2                            WSnd_PlaySnd:	; Routine 2
0000F2E2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F2E6 0200 003F                  		andi.b	#$3F,d0
0000F2EA 6600                       		bne.s	WSnd_ChkDel
0000F2F6                            
0000F2F6                            	WSnd_ChkDel:
0000F314 4E75                       		rts	
0000F314 4E75                       		rts	
0000F316                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F316                            ; ---------------------------------------------------------------------------
0000F316                            ; Sprite mappings - purple rock	(GHZ)
0000F316                            ; ---------------------------------------------------------------------------
0000F316                            Map_PRock_internal:
0000F316 0000                       		dc.w byte_D110-Map_PRock_internal
0000F318 02                         byte_D110:	dc.b 2
0000F319 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F31E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F324 00                         		even
0000F324 00                         		even
0000F324                            		include	"_incObj\3C Smashable Wall.asm"
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            
0000F324                            SmashWall:
0000F324 7000                       		moveq	#0,d0
0000F326 1028 0024                  		move.b	obRoutine(a0),d0
0000F32A 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F32E 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F332 6000 0000                  		bra.w	RememberState
0000F336                            ; ===========================================================================
0000F336 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F338 0000                       		dc.w Smash_Solid-Smash_Index
0000F33A 0000                       		dc.w Smash_FragMove-Smash_Index
0000F33C                            
0000F33C =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F33C                            ; ===========================================================================
0000F33C                            
0000F33C                            Smash_Main:	; Routine 0
0000F33C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F340 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F348 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F34E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F354 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F35A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F360 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F366                            
0000F366                            Smash_Solid:	; Routine 2
0000F366 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F36C 323C 001B                  		move.w	#$1B,d1
0000F370 343C 0020                  		move.w	#$20,d2
0000F374 363C 0020                  		move.w	#$20,d3
0000F378 3828 0008                  		move.w	obX(a0),d4
0000F37C 6100 0000                  		bsr.w	SolidObject	
0000F380 4A04                       		tst.b	d4
0000F382 6E00 0000                  		bgt.w	@chkroll	
0000F386 6700 0000                  		beq.w	@donothing								
0000F38A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F390 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F394                            ; ===========================================================================
0000F394                            
0000F394                            @chkroll:
0000F394 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F39A 6600                       		bne.s	@donothing	; if not, branch	
0000F39C 3028 0030                  		move.w	smash_speed(a0),d0
0000F3A0 6A00                       		bpl.s	@chkspeed
0000F3A2 4440                       		neg.w	d0
0000F3A4                            
0000F3A4                            	@chkspeed:
0000F3A4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F3A8 6500                       		bcs.s	@donothing	; if not, branch	
0000F3AA                            		
0000F3AA                            	@continue:	
0000F3AA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F3B0 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F3B6 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F3BC 3028 0008                  		move.w	obX(a0),d0
0000F3C0 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F3C4 6500                       		bcs.s	@smash		; if yes, branch
0000F3C6 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F3CC                            
0000F3CC                            	@smash:
0000F3CC 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F3D2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F3D8 7206                       		moveq	#6,d1		; load 7 fragments
0000F3DA 343C 0070                  		move.w	#$70,d2
0000F3DE 6100                       		bsr.s	SmashObject
0000F3E0                            
0000F3E0                            @donothing:
0000F3E0 4E75                       		rts	
0000F3E2                            
0000F3E2                            Smash_FragMove:	; Routine 4
0000F3E2 588F                       		addq.l	#4,sp
0000F3E4 6100 0000                  		bsr.w	SpeedToPos
0000F3E8 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F3EE 4A28 0001                  		tst.b	obRender(a0)
0000F3F2 6A00 0000                  		bpl.w	DeleteObject
0000F3F6 6000 0000                  		bra.w	DisplaySprite
0000F3FA                            
0000F3FA                            
0000F3FA                            
0000F3FA                            		include	"_incObj\sub SmashObject.asm"
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            
0000F3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3FA                            
0000F3FA                            
0000F3FA                            SmashObject:
0000F3FA 7000                       		moveq	#0,d0
0000F3FC 1028 001A                  		move.b	obFrame(a0),d0
0000F400 D040                       		add.w	d0,d0
0000F402 2668 0004                  		movea.l	obMap(a0),a3
0000F406 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F40A 524B                       		addq.w	#1,a3
0000F40C 08E8 0005 0001             		bset	#5,obRender(a0)
0000F412 1810                       		move.b	0(a0),d4
0000F414 1A28 0001                  		move.b	obRender(a0),d5
0000F418 2248                       		movea.l	a0,a1
0000F41A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F420 1284                       		move.b	d4,0(a1)
0000F422 234B 0004                  		move.l	a3,obMap(a1)
0000F426 1345 0001                  		move.b	d5,obRender(a1)
0000F42A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F430 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F436 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F43C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F442 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F448 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F44C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F450 5341                       		subq.w #1,d1
0000F452 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F456 303C 005F                  		move.w #$5F,d0
0000F45A                            ; ===========================================================================
0000F45A                            
0000F45A                            Smash_Loop:
0000F45A 4A11                       		tst.b	(a1)
0000F45C 6700                       		beq.s	@cont
0000F45E 43E9 0040                  		lea		$40(a1),a1
0000F462 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F466 6600                       		bne.s	Smash_PlaySnd
0000F468                            
0000F468                            	@cont:
0000F468 5A4B                       		addq.w #5,a3
0000F46A                            
0000F46A                            Smash_LoadFrag:				; XREF: SmashObject
0000F46A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F470 1284                       		move.b	d4,0(a1)
0000F472 234B 0004                  		move.l	a3,obMap(a1)
0000F476 1345 0001                  		move.b	d5,obRender(a1)
0000F47A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F480 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F486 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F48C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F492 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F498 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F49C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F4A0 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F4A4                            
0000F4A4                            Smash_PlaySnd:
0000F4A4 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F4A8 4EF9 0000 1250             		jmp	(PlaySound_Special).l ; play smashing sound
0000F4AE                            
0000F4AE                            ; End of function SmashObject
0000F4AE                            ; End of function SmashObject
0000F4AE                            
0000F4AE                            ; ===========================================================================
0000F4AE                            ; Smashed block	fragment speeds
0000F4AE                            ;
0000F4AE 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F4B2 0600 FF00                  		dc.w $600, -$100
0000F4B6 0600 0100                  		dc.w $600, $100
0000F4BA 0400 0500                  		dc.w $400, $500
0000F4BE 0600 FA00                  		dc.w $600, -$600
0000F4C2 0800 FE00                  		dc.w $800, -$200
0000F4C6 0800 0200                  		dc.w $800, $200
0000F4CA 0600 0600                  		dc.w $600, $600
0000F4CE                            
0000F4CE FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F4D2 F800 FE00                  		dc.w -$800, -$200
0000F4D6 F800 0200                  		dc.w -$800, $200
0000F4DA FA00 0600                  		dc.w -$600, $600
0000F4DE FC00 FB00                  		dc.w -$400, -$500
0000F4E2 FA00 FF00                  		dc.w -$600, -$100
0000F4E6 FA00 0100                  		dc.w -$600, $100
0000F4EA FC00 0500                  		dc.w -$400, $500
0000F4EE                            
0000F4EE                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F4EE                            ; ---------------------------------------------------------------------------
0000F4EE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F4EE                            ; ---------------------------------------------------------------------------
0000F4EE                            Map_Smash_internal:
0000F4EE 0000                       		dc.w @left-Map_Smash_internal
0000F4F0 0000                       		dc.w @middle-Map_Smash_internal
0000F4F2 0000                       		dc.w @right-Map_Smash_internal
0000F4F4 08                         @left:		dc.b 8
0000F4F5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F4FA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F4FF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F504 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F509 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F50E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F513 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F518 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F51D 08                         @middle:	dc.b 8
0000F51E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F523 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F528 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F52D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F532 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F537 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F53C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F541 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F546 08                         @right:		dc.b 8
0000F547 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F54C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F551 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F556 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F55B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F560 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F565 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F56A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F570 00                         		even
0000F570 00                         		even
0000F570                            
0000F570                            ; ---------------------------------------------------------------------------
0000F570                            ; Object code execution subroutine
0000F570                            ; ---------------------------------------------------------------------------
0000F570                            
0000F570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F570                            
0000F570                            
0000F570                            
0000F570                            ExecuteObjects: ; XREF: GM_Title; et al
0000F570 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F574 7E7F                       		moveq #$7F,d7
0000F576 7000                       		moveq #0,d0
0000F578 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F57E 6400                       		bcc.s loc_D362
0000F580                            
0000F580                            loc_D348:
0000F580 1010                       		move.b (a0),d0 ; load object number from RAM
0000F582 6700                       		beq.s loc_D358
0000F584 D040                       		add.w d0,d0
0000F586 D040                       		add.w d0,d0
0000F588 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F58C 4E91                       		jsr (a1) ; run the object's code
0000F58E 7000                       		moveq #0,d0
0000F590                            
0000F590                            loc_D358:
0000F590 41E8 0040                  		lea $40(a0),a0 ; next object
0000F594 51CF FFEA                  		dbf d7,loc_D348
0000F598 4E75                       		rts
0000F59A                            ; ===========================================================================
0000F59A                            
0000F59A                            loc_D362:
0000F59A 7E1F                       		moveq #$1F,d7
0000F59C 61E2                       		bsr.s loc_D348
0000F59E 7E5F                       		moveq #$5F,d7
0000F5A0                            
0000F5A0                            loc_D368:
0000F5A0 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F5A2 1010                       		move.b (a0),d0 ; get the object's ID
0000F5A4 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F5A6 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F5AA 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F5AC 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F5B0 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F5B6 6700                       		beq.s loc_D378 ; if not, branch
0000F5B8 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F5BC                            
0000F5BC                            loc_D378:
0000F5BC 6100 0000                  		bsr.w DisplaySprite2
0000F5C0                            		
0000F5C0                            loc_D37C:
0000F5C0 41E8 0040                  		lea $40(a0),a0
0000F5C4 51CF FFDA                  		dbf d7,loc_D368
0000F5C8 4E75                       		rts
0000F5CA                            ; End of function ExecuteObjects
0000F5CA                            
0000F5CA                            ; ===========================================================================
0000F5CA                            ; ---------------------------------------------------------------------------
0000F5CA                            ; Object pointers
0000F5CA                            ; ---------------------------------------------------------------------------
0000F5CA                            Obj_Index:
0000F5CA                            		include	"_inc\Object Pointers.asm"
0000F5CA                            ; ---------------------------------------------------------------------------
0000F5CA                            ; Object pointers
0000F5CA                            ; ---------------------------------------------------------------------------
0000F5CA 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F5CE 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F5D2 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F5D6 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F5DA 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F5DE 0000 B416                  ptr_Mozzietron:		dc.l Mozzietron
0000F5E2 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F5E6 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F5EA 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F5EE 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F5F2 0000 0000                  ptr_Pole:		dc.l Pole
0000F5F6 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F5FA 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F5FE 0000 C7FE                  ptr_TitleSonic:		dc.l TitleSonic
0000F602 0000 C87E                  ptr_PSBTM:		dc.l PSBTM
0000F606 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F60A 0000 8F3A                  ptr_Bridge:		dc.l Bridge
0000F60E 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F612 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F616 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F61A 0000 9560                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F61E 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F622 0000 98AC                  ptr_Helix:		dc.l Helix
0000F626 0000 9A38                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F62A 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F62E 0000 9E14                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F632 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F636 0000 A408                  ptr_Scenery:		dc.l Scenery
0000F63A 0000 A4AA                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F63E 0000 A792                  ptr_BallHog:		dc.l BallHog
0000F642 0000 B12C                  ptr_Crabmeat:		dc.l Crabmeat
0000F646 0000 A860                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F64A 0000 0000                  ptr_HUD:		dc.l HUD
0000F64E 0000 B548                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F652 0000 B69A                  ptr_Missile:		dc.l Missile
0000F656 0000 A932                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F65A 0000 B8F4                  ptr_Rings:		dc.l Rings
0000F65E 0000 C13E                  ptr_Monitor:		dc.l Monitor
0000F662 0000 A9A2                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F666 0000 AB60                  ptr_Animals:		dc.l Animals		; $28
0000F66A 0000 B04E                  ptr_Points:		dc.l Points
0000F66E 0000 A580                  ptr_AutoDoor:		dc.l AutoDoor
0000F672 0000 CD02                  ptr_Chopper:		dc.l Chopper
0000F676 0000 CDBC                  ptr_Jaws:		dc.l Jaws
0000F67A 0000 CE86                  ptr_Burrobot:		dc.l Burrobot
0000F67E 0000 C33C                  ptr_PowerUp:		dc.l PowerUp
0000F682 0000 D09A                  ptr_LargeGrass:		dc.l LargeGrass
0000F686 0000 D57C                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F68A 0000 D858                  ptr_ChainStomp:		dc.l ChainStomp
0000F68E 0000 DF06                  ptr_Button:		dc.l Button
0000F692 0000 E0AA                  ptr_PushBlock:		dc.l PushBlock
0000F696 0000 E4DC                  ptr_TitleCard:		dc.l TitleCard
0000F69A 0000 D3BC                  ptr_GrassFire:		dc.l GrassFire
0000F69E 0000 F02A                  ptr_Spikes:		dc.l Spikes
0000F6A2 0000 BB50                  ptr_RingLoss:		dc.l RingLoss
0000F6A6 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F6AA 0000 E68C                  ptr_GameOverCard:	dc.l GameOverCard
0000F6AE 0000 E74A                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F6B2 0000 F258                  ptr_PurpleRock:		dc.l PurpleRock
0000F6B6 0000 F324                  ptr_SmashWall:		dc.l SmashWall
0000F6BA 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F6BE 0000 0000                  ptr_Prison:		dc.l Prison
0000F6C2 0000 AA34                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F6C6 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F6CA 0000 0000                  ptr_Springs:		dc.l Springs
0000F6CE 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F6D2 0000 0000                  ptr_Roller:		dc.l Roller
0000F6D6 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F6DA 0000 DB74                  ptr_SideStomp:		dc.l SideStomp
0000F6DE 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F6E2 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F6E6 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F6EA 0000 F2C6                  ptr_WaterSound:		dc.l WaterSound
0000F6EE 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F6F2 0000 BE12                  ptr_GiantRing:		dc.l GiantRing
0000F6F6 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F6FA 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F6FE 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F702 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F706 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F70A 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F70E 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F712 0000 9F24                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F716 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F71A 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F71E 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F722 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F726 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F72A 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F72E 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F732 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F736 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F73A 0000 0000                  ptr_Fan:		dc.l Fan
0000F73E 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F742 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F746 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F74A 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F74E 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F752 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F756 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F75A 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F75E 0000 0000                  ptr_Junction:		dc.l Junction
0000F762 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F766 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F76A 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F76E 0000 0000                  ptr_Saws:		dc.l Saws
0000F772 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F776 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F77A 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F77E 0000 0000                  ptr_Electro:		dc.l Electro
0000F782 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F786 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F78A 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F78E 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F792 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F796 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F79A 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F79E 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F7A2 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F7A6 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F7AA 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F7AE 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F7B2 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F7B6 0000 BEEC                  ptr_RingFlash:		dc.l RingFlash
0000F7BA 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F7BE 0000 E99C                  ptr_SSResult:		dc.l SSResult
0000F7C2 0000 EB42                  ptr_SSRChaos:		dc.l SSRChaos
0000F7C6 0000 5E2A                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F7CA 0000 5F42                  ptr_ContSonic:		dc.l ContSonic
0000F7CE 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F7D2 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F7D6 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F7DA 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F7DE 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F7E2 0000 63CC                  ptr_EndSonic:		dc.l EndSonic
0000F7E6 0000 6526                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F7EA 0000 6600                  ptr_EndSTH:		dc.l EndSTH
0000F7EE 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F7F2 0000 6866                  ptr_EndEggman:		dc.l EndEggman
0000F7F6 0000 6946                  ptr_TryChaos:		dc.l TryChaos
0000F7FA                            
0000F7FA                            NullObject:
0000F7FA                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F7FA                            
0000F7FA =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F7FA =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F7FA =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F7FA =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F7FA =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F7FA =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F7FA =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F7FA =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F7FA =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F7FA =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F7FA =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F7FA =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F7FA =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F7FA =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F7FA =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F7FA =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F7FA =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F7FA =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F7FA =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F7FA =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F7FA =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F7FA =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F7FA =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F7FA =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F7FA =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F7FA =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F7FA =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F7FA =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F7FA =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F7FA =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F7FA =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F7FA =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F7FA =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F7FA =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F7FA =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F7FA =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F7FA =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F7FA =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F7FA =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F7FA =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F7FA =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F7FA =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F7FA =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F7FA =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F7FA =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F7FA =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F7FA =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F7FA =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F7FA =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F7FA =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F7FA =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F7FA =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F7FA =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F7FA =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F7FA =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F7FA =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F7FA =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F7FA =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F7FA =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F7FA =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F7FA =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F7FA =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F7FA =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F7FA =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F7FA =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F7FA =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F7FA =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F7FA =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F7FA =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F7FA =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F7FA =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F7FA =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F7FA =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F7FA =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F7FA =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F7FA =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F7FA =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F7FA =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F7FA =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F7FA =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F7FA =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F7FA =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F7FA =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F7FA =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F7FA =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F7FA =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F7FA =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F7FA =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F7FA =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F7FA =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F7FA =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F7FA =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F7FA =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F7FA =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F7FA =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F7FA =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F7FA =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F7FA =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F7FA =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F7FA =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F7FA =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F7FA =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F7FA =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F7FA =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F7FA =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F7FA =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F7FA =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F7FA =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F7FA =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F7FA =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F7FA =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F7FA =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F7FA =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F7FA =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F7FA =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F7FA =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F7FA =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F7FA =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F7FA =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F7FA =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F7FA =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F7FA =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F7FA =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F7FA =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F7FA =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F7FA =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F7FA =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F7FA =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F7FA =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F7FA =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F7FA =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F7FA =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F7FA =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F7FA =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F7FA =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F7FA =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F7FA =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F7FA =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F7FA =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F7FA =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F7FA =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F7FA                            
0000F7FA                            		include	"_incObj\sub ObjectFall.asm"
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            
0000F7FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7FA                            
0000F7FA                            
0000F7FA                            ObjectFall:
0000F7FA 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F800 6700                       		beq.s	@donothing
0000F802 3028 0010                  		move.w	obVelX(a0),d0
0000F806 48C0                       		ext.l	d0
0000F808 E188                       		lsl.l	#8,d0
0000F80A D1A8 0008                  		add.l	d0,obX(a0)
0000F80E 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F814 6F00                               ble.s   @skipline       ; if yes, branch
0000F816 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F81C                                @skipline:		
0000F81C 3028 0012                  		move.w	obVelY(a0),d0
0000F820 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F826 48C0                       		ext.l	d0
0000F828 E188                       		lsl.l	#8,d0
0000F82A D1A8 000C                  		add.l	d0,obY(a0)
0000F82E 4E75                       		rts	
0000F830                            	
0000F830                            	@donothing:
0000F830 4E75                       		rts
0000F832                            
0000F832                            ; End of function ObjectFall
0000F832                            ; End of function ObjectFall
0000F832                            		include	"_incObj\sub SpeedToPos.asm"
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            ; Subroutine translating object	speed to update	object position
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            
0000F832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F832                            
0000F832                            
0000F832                            SpeedToPos:
0000F832 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F838 E188                       		lsl.l	#8,d0
0000F83A D1A8 0008                  		add.l	d0,obX(a0)
0000F83E E18A                       		lsl.l	#8,d2
0000F840 D5A8 000C                  		add.l	d2,obY(a0)
0000F844 4E75                       		rts
0000F846                            ; End of function SpeedToPos
0000F846                            ; End of function SpeedToPos
0000F846                            		include	"_incObj\sub DisplaySprite.asm"
0000F846                            ; ---------------------------------------------------------------------------
0000F846                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F846                            ; ---------------------------------------------------------------------------
0000F846                            
0000F846                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F846                            
0000F846                            
0000F846                            DisplaySprite:
0000F846 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F84A D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F84E 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F852 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F854 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F856 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F858 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F85A                            
0000F85A                                DSpr_Full:
0000F85A 4E75                               rts    
0000F85C                            
0000F85C                            ; End of function DisplaySprite
0000F85C                            
0000F85C                            
0000F85C                            ; ---------------------------------------------------------------------------
0000F85C                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F85C                            ; ---------------------------------------------------------------------------
0000F85C                            
0000F85C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F85C                            
0000F85C                            
0000F85C                            DisplaySprite1:
0000F85C 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F860 D4E9 0018                          adda.w  obpriority(a1),a2
0000F864 0C52 007E                          cmpi.w    #$7E,(a2)
0000F868 6400                               bcc.s    DSpr1_Full
0000F86A 5452                               addq.w    #2,(a2)
0000F86C D4D2                               adda.w    (a2),a2
0000F86E 3489                               move.w    a1,(a2)
0000F870                            
0000F870                                DSpr1_Full:
0000F870 4E75                               rts    
0000F872                            
0000F872                            ; End of function DisplaySprite1
0000F872                            
0000F872                            ; ---------------------------------------------------------------------------
0000F872                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F872                            ; and d0 is already (priority/2)&$380
0000F872                            ; ---------------------------------------------------------------------------
0000F872                            
0000F872                            ; loc_16530:
0000F872                            DisplaySprite2:
0000F872 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F876 D2C0                           adda.w    d0,a1
0000F878 0C51 007E                      cmpi.w    #$7E,(a1)
0000F87C 6400                           bhs.s    return_16542
0000F87E 5451                           addq.w    #2,(a1)
0000F880 D2D1                           adda.w    (a1),a1
0000F882 3288                           move.w    a0,(a1)
0000F884                            
0000F884                            return_16542:
0000F884 4E75                           rts
0000F884 4E75                           rts
0000F886                            		include	"_incObj\sub DeleteObject.asm"
0000F886                            ; ---------------------------------------------------------------------------
0000F886                            ; Subroutine to	delete an object
0000F886                            ; ---------------------------------------------------------------------------
0000F886                            
0000F886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F886                            
0000F886                            
0000F886                            DeleteObject:
0000F886 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F888                            
0000F888                            DeleteChild:				; child objects are already in (a1)
0000F888 7200                       		moveq	#0,d1
0000F88A 700F                       		moveq	#$F,d0
0000F88C                            
0000F88C                            	DelObj_Loop:
0000F88C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F88E 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F892 4E75                       		rts	
0000F894                            
0000F894                            ; End of function DeleteObject
0000F894                            ; End of function DeleteObject
0000F894                            
0000F894                            ; ===========================================================================
0000F894 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F898 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F89C 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F8A0 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F8A4                            ; ---------------------------------------------------------------------------
0000F8A4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F8A4                            ; ---------------------------------------------------------------------------
0000F8A4                            
0000F8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8A4                            
0000F8A4                            
0000F8A4                            BuildSprites:
0000F8A4 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F8A8 7A00                       		moveq	#0,d5
0000F8AA 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F8AE 7E07                       		moveq	#7,d7
0000F8B0                            
0000F8B0                            	@priorityLoop:
0000F8B0 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F8B2 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F8B6 7C02                       		moveq	#2,d6
0000F8B8                            
0000F8B8                            	@objectLoop:
0000F8B8 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F8BC 4A10                       		tst.b	(a0)		; if null, branch
0000F8BE 6700 0000                  		beq.w	@skipObject
0000F8C2 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F8C8                            
0000F8C8 1028 0001                  		move.b	obRender(a0),d0
0000F8CC 1800                       		move.b	d0,d4
0000F8CE 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000F8D2 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000F8D4 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F8D8                            	; check object bounds
0000F8D8 7000                       		moveq	#0,d0
0000F8DA 1028 0014                  		move.b	obActWid(a0),d0
0000F8DE 3628 0008                  		move.w	obX(a0),d3
0000F8E2 9651                       		sub.w	(a1),d3
0000F8E4 3203                       		move.w	d3,d1
0000F8E6 D240                       		add.w	d0,d1
0000F8E8 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000F8EC 3203                       		move.w	d3,d1
0000F8EE 9240                       		sub.w	d0,d1
0000F8F0 0C41 0140                  		cmpi.w	#320,d1
0000F8F4 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000F8F6 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000F8FA                            
0000F8FA 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000F8FE 6700                       		beq.s	@assumeHeight	; if yes, branch
0000F900 7000                       		moveq	#0,d0
0000F902 1028 0016                  		move.b	obHeight(a0),d0
0000F906 3428 000C                  		move.w	obY(a0),d2
0000F90A 9469 0004                  		sub.w	4(a1),d2
0000F90E 3202                       		move.w	d2,d1
0000F910 D240                       		add.w	d0,d1
0000F912 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000F914 3202                       		move.w	d2,d1
0000F916 9240                       		sub.w	d0,d1
0000F918 0C41 00E0                  		cmpi.w	#224,d1
0000F91C 6C00                       		bge.s	@skipObject
0000F91E 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000F922 6000                       		bra.s	@drawObject
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            	@screenCoords:
0000F924 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000F928 3628 0008                  		move.w	obX(a0),d3
0000F92C 6000                       		bra.s	@drawObject
0000F92E                            ; ===========================================================================
0000F92E                            
0000F92E                            	@assumeHeight:
0000F92E 3428 000C                  		move.w	obY(a0),d2
0000F932 9469 0004                  		sub.w	obMap(a1),d2
0000F936 0642 0080                  		addi.w	#$80,d2
0000F93A 0C42 0060                  		cmpi.w	#$60,d2
0000F93E 6500                       		blo.s	@skipObject
0000F940 0C42 0180                  		cmpi.w	#$180,d2
0000F944 6400                       		bhs.s	@skipObject
0000F946                            
0000F946                            	@drawObject:
0000F946 2268 0004                  		movea.l	obMap(a0),a1
0000F94A 7200                       		moveq	#0,d1
0000F94C 0804 0005                  		btst	#5,d4
0000F950 6600                       		bne.s	@drawFrame
0000F952 1228 001A                  		move.b	$1A(a0),d1
0000F956 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F958 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F95C 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F95E 1219                       		move.b	(a1)+,d1
0000F960 5301                       		subq.b	#1,d1
0000F962 6B00                       		bmi.s	@setVisible
0000F964                            
0000F964                            	@drawFrame:
0000F964 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000F968                            
0000F968                            	@setVisible:
0000F968 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000F96E                            
0000F96E                            	@skipObject:
0000F96E 5446                       		addq.w	#2,d6
0000F970 5554                       		subq.w	#2,(a4)			; number of objects left
0000F972 6600 FF44                  		bne.w	@objectLoop
0000F976                            
0000F976                            	@nextPriority:
0000F976 49EC 0080                  		lea	$80(a4),a4
0000F97A 51CF FF34                  		dbf	d7,@priorityLoop
0000F97E 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000F982 0C05 0050                  		cmpi.b	#$50,d5
0000F986 6700                       		beq.s	@spriteLimit
0000F988 24BC 0000 0000             		move.l	#0,(a2)
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            
0000F990                            	@spriteLimit:
0000F990 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000F996 4E75                       		rts	
0000F998                            ; End of function BuildSprites
0000F998                            
0000F998                            
0000F998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F998                            
0000F998                            
0000F998                            BuildSpr_Draw:
0000F998 3668 0002                  		movea.w	obGfx(a0),a3
0000F99C 0804 0000                  		btst	#0,d4
0000F9A0 6600                       		bne.s	BuildSpr_FlipX
0000F9A2 0804 0001                  		btst	#1,d4
0000F9A6 6600 0000                  		bne.w	BuildSpr_FlipY
0000F9AA                            ; End of function BuildSpr_Draw
0000F9AA                            
0000F9AA                            
0000F9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9AA                            
0000F9AA                            
0000F9AA                            BuildSpr_Normal:
0000F9AA 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F9AE 6700                       		beq.s	@return
0000F9B0 1019                       		move.b	(a1)+,d0	; get y-offset
0000F9B2 4880                       		ext.w	d0
0000F9B4 D042                       		add.w	d2,d0		; add y-position
0000F9B6 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9B8 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000F9BA 5205                       		addq.b	#1,d5		; increase sprite counter
0000F9BC 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000F9BE 1019                       		move.b	(a1)+,d0	; get art tile
0000F9C0 E148                       		lsl.w	#8,d0
0000F9C2 1019                       		move.b	(a1)+,d0
0000F9C4 D04B                       		add.w	a3,d0		; add art tile offset
0000F9C6 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9C8 1019                       		move.b	(a1)+,d0	; get x-offset
0000F9CA 4880                       		ext.w	d0
0000F9CC D043                       		add.w	d3,d0		; add x-position
0000F9CE 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000F9D2 6600                       		bne.s	@writeX
0000F9D4 5240                       		addq.w	#1,d0
0000F9D6                            
0000F9D6                            	@writeX:
0000F9D6 34C0                       		move.w	d0,(a2)+	; write to buffer
0000F9D8 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000F9DC                            
0000F9DC                            	@return:
0000F9DC 4E75                       		rts	
0000F9DE                            ; End of function BuildSpr_Normal
0000F9DE                            
0000F9DE                            ; ===========================================================================
0000F9DE                            
0000F9DE                            BuildSpr_FlipX:
0000F9DE 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000F9E2 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000F9E6                            
0000F9E6                            	@loop:
0000F9E6 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000F9EA 6700                       		beq.s	@return
0000F9EC 1019                       		move.b	(a1)+,d0	; y position
0000F9EE 4880                       		ext.w	d0
0000F9F0 D042                       		add.w	d2,d0
0000F9F2 34C0                       		move.w	d0,(a2)+
0000F9F4 1819                       		move.b	(a1)+,d4	; size
0000F9F6 14C4                       		move.b	d4,(a2)+	
0000F9F8 5205                       		addq.b	#1,d5		; link
0000F9FA 14C5                       		move.b	d5,(a2)+
0000F9FC 1019                       		move.b	(a1)+,d0	; art tile
0000F9FE E148                       		lsl.w	#8,d0
0000FA00 1019                       		move.b	(a1)+,d0	
0000FA02 D04B                       		add.w	a3,d0
0000FA04 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FA08 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA0A 1019                       		move.b	(a1)+,d0	; get x-offset
0000FA0C 4880                       		ext.w	d0
0000FA0E 4440                       		neg.w	d0			; negate it
0000FA10 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FA12 0244 0018                  		andi.w	#$18,d4
0000FA16 5044                       		addq.w	#8,d4
0000FA18 9044                       		sub.w	d4,d0
0000FA1A D043                       		add.w	d3,d0
0000FA1C 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FA20 6600                       		bne.s	@writeX
0000FA22 5240                       		addq.w	#1,d0
0000FA24                            
0000FA24                            	@writeX:
0000FA24 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA26 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FA2A                            
0000FA2A                            	@return:
0000FA2A 4E75                       		rts	
0000FA2C                            ; ===========================================================================
0000FA2C                            
0000FA2C                            BuildSpr_FlipY:
0000FA2C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FA30 6700                       		beq.s	@return
0000FA32 1019                       		move.b	(a1)+,d0	; get y-offset
0000FA34 1811                       		move.b	(a1),d4		; get size
0000FA36 4880                       		ext.w	d0
0000FA38 4440                       		neg.w	d0		; negate y-offset
0000FA3A E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FA3C 0244 0018                  		andi.w	#$18,d4
0000FA40 5044                       		addq.w	#8,d4
0000FA42 9044                       		sub.w	d4,d0
0000FA44 D042                       		add.w	d2,d0	; add y-position
0000FA46 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA48 14D9                       		move.b	(a1)+,(a2)+	; size
0000FA4A 5205                       		addq.b	#1,d5
0000FA4C 14C5                       		move.b	d5,(a2)+	; link
0000FA4E 1019                       		move.b	(a1)+,d0	; art tile
0000FA50 E148                       		lsl.w	#8,d0
0000FA52 1019                       		move.b	(a1)+,d0
0000FA54 D04B                       		add.w	a3,d0
0000FA56 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FA5A 34C0                       		move.w	d0,(a2)+
0000FA5C 1019                       		move.b	(a1)+,d0	; x-position
0000FA5E 4880                       		ext.w	d0
0000FA60 D043                       		add.w	d3,d0
0000FA62 0240 01FF                  		andi.w	#$1FF,d0
0000FA66 6600                       		bne.s	@writeX
0000FA68 5240                       		addq.w	#1,d0
0000FA6A                            
0000FA6A                            	@writeX:
0000FA6A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA6C 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FA70                            
0000FA70                            	@return:
0000FA70 4E75                       		rts	
0000FA72                            ; ===========================================================================
0000FA72                            
0000FA72                            BuildSpr_FlipXY:
0000FA72 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FA76 6700                       		beq.s	@return
0000FA78 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FA7A 1811                       		move.b	(a1),d4
0000FA7C 4880                       		ext.w	d0
0000FA7E 4440                       		neg.w	d0
0000FA80 E70C                       		lsl.b	#3,d4
0000FA82 0244 0018                  		andi.w	#$18,d4
0000FA86 5044                       		addq.w	#8,d4
0000FA88 9044                       		sub.w	d4,d0
0000FA8A D042                       		add.w	d2,d0
0000FA8C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FA8E 1819                       		move.b	(a1)+,d4	; size
0000FA90 14C4                       		move.b	d4,(a2)+	; link
0000FA92 5205                       		addq.b	#1,d5
0000FA94 14C5                       		move.b	d5,(a2)+	; art tile
0000FA96 1019                       		move.b	(a1)+,d0
0000FA98 E148                       		lsl.w	#8,d0
0000FA9A 1019                       		move.b	(a1)+,d0
0000FA9C D04B                       		add.w	a3,d0
0000FA9E 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FAA2 34C0                       		move.w	d0,(a2)+
0000FAA4 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FAA6 4880                       		ext.w	d0
0000FAA8 4440                       		neg.w	d0
0000FAAA D804                       		add.b	d4,d4
0000FAAC 0244 0018                  		andi.w	#$18,d4
0000FAB0 5044                       		addq.w	#8,d4
0000FAB2 9044                       		sub.w	d4,d0
0000FAB4 D043                       		add.w	d3,d0
0000FAB6 0240 01FF                  		andi.w	#$1FF,d0
0000FABA 6600                       		bne.s	@writeX
0000FABC 5240                       		addq.w	#1,d0
0000FABE                            
0000FABE                            	@writeX:
0000FABE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAC0 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FAC4                            
0000FAC4                            	@return:
0000FAC4 4E75                       		rts	
0000FAC6                            
0000FAC6                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6                            ; Subroutine to	check if an object is off screen
0000FAC6                            
0000FAC6                            ; output:
0000FAC6                            ;	d0 = flag set if object is off screen
0000FAC6                            ; ---------------------------------------------------------------------------
0000FAC6                            
0000FAC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAC6                            
0000FAC6                            
0000FAC6                            ChkObjectVisible:
0000FAC6 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FACA 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FACE 6B00                       		bmi.s	@offscreen
0000FAD0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FAD4 6C00                       		bge.s	@offscreen	; if not, branch
0000FAD6                            
0000FAD6 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FADA 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FADE 6B00                       		bmi.s	@offscreen
0000FAE0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FAE4 6C00                       		bge.s	@offscreen	; if not, branch
0000FAE6                            
0000FAE6 7000                       		moveq	#0,d0		; set flag to 0
0000FAE8 4E75                       		rts	
0000FAEA                            
0000FAEA                            	@offscreen:
0000FAEA 7001                       		moveq	#1,d0		; set flag to 1
0000FAEC 4E75                       		rts	
0000FAEE                            ; End of function ChkObjectVisible
0000FAEE                            
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE                            ; Subroutine to	check if an object is off screen
0000FAEE                            ; More precise than above subroutine, taking width into account
0000FAEE                            
0000FAEE                            ; output:
0000FAEE                            ;	d0 = flag set if object is off screen
0000FAEE                            ; ---------------------------------------------------------------------------
0000FAEE                            
0000FAEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAEE                            
0000FAEE                            
0000FAEE                            ChkPartiallyVisible:
0000FAEE 7200                       		moveq	#0,d1
0000FAF0 1228 0014                  		move.b	obActWid(a0),d1
0000FAF4 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FAF8 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FAFC D041                       		add.w	d1,d0		; add object width
0000FAFE 6B00                       		bmi.s	@offscreen2
0000FB00 D241                       		add.w	d1,d1
0000FB02 9041                       		sub.w	d1,d0
0000FB04 0C40 0140                  		cmpi.w	#320,d0
0000FB08 6C00                       		bge.s	@offscreen2
0000FB0A                            
0000FB0A 3228 000C                  		move.w	obY(a0),d1
0000FB0E 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FB12 6B00                       		bmi.s	@offscreen2
0000FB14 0C41 00E0                  		cmpi.w	#224,d1
0000FB18 6C00                       		bge.s	@offscreen2
0000FB1A                            
0000FB1A 7000                       		moveq	#0,d0
0000FB1C 4E75                       		rts	
0000FB1E                            
0000FB1E                            	@offscreen2:
0000FB1E 7001                       		moveq	#1,d0
0000FB20 4E75                       		rts	
0000FB22                            ; End of function ChkPartiallyVisible
0000FB22                            ; End of function ChkPartiallyVisible
0000FB22                            
0000FB22                            ; ---------------------------------------------------------------------------
0000FB22                            ; Subroutine to	load a level's objects
0000FB22                            ; ---------------------------------------------------------------------------
0000FB22                            
0000FB22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB22                            
0000FB22                            
0000FB22                            ObjPosLoad:
0000FB22 7000                       		moveq	#0,d0
0000FB24 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FB28 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FB2C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FB30                            ; End of function ObjPosLoad
0000FB30                            
0000FB30                            ; ===========================================================================
0000FB30 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FB32 0000                       		dc.w OPL_Next-OPL_Index
0000FB34                            ; ===========================================================================
0000FB34                            
0000FB34                            OPL_Main:
0000FB34 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FB38 3038 FE10                  		move.w	(v_zone).w,d0
0000FB3C ED08                       		lsl.b	#6,d0
0000FB3E E848                       		lsr.w	#4,d0
0000FB40 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FB46 2248                       		movea.l	a0,a1
0000FB48 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FB4C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FB50 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FB54 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FB58 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FB5C 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FB60 45F8 FC00                  		lea	(v_objstate).w,a2
0000FB64 34FC 0101                  		move.w	#$101,(a2)+
0000FB68 303C 005E                  		move.w	#$5E,d0
0000FB6C                            
0000FB6C                            OPL_ClrList:
0000FB6C 429A                       		clr.l	(a2)+
0000FB6E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FB72                            
0000FB72 45F8 FC00                  		lea	(v_objstate).w,a2
0000FB76 7400                       		moveq	#0,d2
0000FB78 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FB7C 0446 0080                  		subi.w	#$80,d6
0000FB80 6400                       		bhs.s	loc_D93C
0000FB82 7C00                       		moveq	#0,d6
0000FB84                            
0000FB84                            loc_D93C:
0000FB84 0246 FF80                  		andi.w	#$FF80,d6
0000FB88 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FB8C                            
0000FB8C                            loc_D944:
0000FB8C BC50                       		cmp.w	(a0),d6
0000FB8E 6300                       		bls.s	loc_D956
0000FB90 4A28 0004                  		tst.b	4(a0)
0000FB94 6A00                       		bpl.s	loc_D952
0000FB96 1412                       		move.b	(a2),d2
0000FB98 5212                       		addq.b	#1,(a2)
0000FB9A                            
0000FB9A                            loc_D952:
0000FB9A 5C48                       		addq.w	#6,a0
0000FB9C 60EE                       		bra.s	loc_D944
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            loc_D956:
0000FB9E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FBA2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FBA6 0446 0080                  		subi.w	#$80,d6
0000FBAA 6500                       		blo.s	loc_D976
0000FBAC                            
0000FBAC                            loc_D964:
0000FBAC BC50                       		cmp.w	(a0),d6
0000FBAE 6300                       		bls.s	loc_D976
0000FBB0 4A28 0004                  		tst.b	4(a0)
0000FBB4 6A00                       		bpl.s	loc_D972
0000FBB6 522A 0001                  		addq.b	#1,1(a2)
0000FBBA                            
0000FBBA                            loc_D972:
0000FBBA 5C48                       		addq.w	#6,a0
0000FBBC 60EE                       		bra.s	loc_D964
0000FBBE                            ; ===========================================================================
0000FBBE                            
0000FBBE                            loc_D976:
0000FBBE 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FBC2 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FBC8                            
0000FBC8                            OPL_Next:
0000FBC8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FBCC 7400                       		moveq	#0,d2
0000FBCE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FBD2 0246 FF80                  		andi.w	#$FF80,d6
0000FBD6 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FBDA 6700 0000                  		beq.w	locret_DA3A
0000FBDE 6C00                       		bge.s	loc_D9F6
0000FBE0 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FBE4 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FBE8 0446 0080                  		subi.w	#$80,d6
0000FBEC 6500                       		blo.s	loc_D9D2
0000FBEE                            
0000FBEE                            loc_D9A6:
0000FBEE BC68 FFFA                  		cmp.w	-6(a0),d6
0000FBF2 6C00                       		bge.s	loc_D9D2
0000FBF4 5D48                       		subq.w	#6,a0
0000FBF6 4A28 0004                  		tst.b	4(a0)
0000FBFA 6A00                       		bpl.s	loc_D9BC
0000FBFC 532A 0001                  		subq.b	#1,1(a2)
0000FC00 142A 0001                  		move.b	1(a2),d2
0000FC04                            
0000FC04                            loc_D9BC:
0000FC04 6100 0000                  		bsr.w	loc_DA3C
0000FC08 6600                       		bne.s	loc_D9C6
0000FC0A 5D48                       		subq.w	#6,a0
0000FC0C 60E0                       		bra.s	loc_D9A6
0000FC0E                            ; ===========================================================================
0000FC0E                            
0000FC0E                            loc_D9C6:
0000FC0E 4A28 0004                  		tst.b	4(a0)
0000FC12 6A00                       		bpl.s	loc_D9D0
0000FC14 522A 0001                  		addq.b	#1,1(a2)
0000FC18                            
0000FC18                            loc_D9D0:
0000FC18 5C48                       		addq.w	#6,a0
0000FC1A                            
0000FC1A                            loc_D9D2:
0000FC1A 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC1E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC22 0646 0300                  		addi.w	#$300,d6
0000FC26                            
0000FC26                            loc_D9DE:
0000FC26 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FC2A 6E00                       		bgt.s	loc_D9F0
0000FC2C 4A28 FFFE                  		tst.b	-2(a0)
0000FC30 6A00                       		bpl.s	loc_D9EC
0000FC32 5312                       		subq.b	#1,(a2)
0000FC34                            
0000FC34                            loc_D9EC:
0000FC34 5D48                       		subq.w	#6,a0
0000FC36 60EE                       		bra.s	loc_D9DE
0000FC38                            ; ===========================================================================
0000FC38                            
0000FC38                            loc_D9F0:
0000FC38 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC3C 4E75                       		rts	
0000FC3E                            ; ===========================================================================
0000FC3E                            
0000FC3E                            loc_D9F6:
0000FC3E 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FC42 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FC46 0646 0280                  		addi.w	#$280,d6
0000FC4A                            
0000FC4A                            loc_DA02:
0000FC4A BC50                       		cmp.w	(a0),d6
0000FC4C 6300                       		bls.s	loc_DA16
0000FC4E 4A28 0004                  		tst.b	4(a0)
0000FC52 6A00                       		bpl.s	loc_DA10
0000FC54 1412                       		move.b	(a2),d2
0000FC56 5212                       		addq.b	#1,(a2)
0000FC58                            
0000FC58                            loc_DA10:
0000FC58 6100 0000                  		bsr.w	loc_DA3C
0000FC5C 67EC                       		beq.s	loc_DA02
0000FC5E                            
0000FC5E                            loc_DA16:
0000FC5E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC62 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FC66 0446 0300                  		subi.w	#$300,d6
0000FC6A 6500                       		blo.s	loc_DA36
0000FC6C                            
0000FC6C                            loc_DA24:
0000FC6C BC50                       		cmp.w	(a0),d6
0000FC6E 6300                       		bls.s	loc_DA36
0000FC70 4A28 0004                  		tst.b	4(a0)
0000FC74 6A00                       		bpl.s	loc_DA32
0000FC76 522A 0001                  		addq.b	#1,1(a2)
0000FC7A                            
0000FC7A                            loc_DA32:
0000FC7A 5C48                       		addq.w	#6,a0
0000FC7C 60EE                       		bra.s	loc_DA24
0000FC7E                            ; ===========================================================================
0000FC7E                            
0000FC7E                            loc_DA36:
0000FC7E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC82                            
0000FC82                            locret_DA3A:
0000FC82 4E75                       		rts	
0000FC84                            ; ===========================================================================
0000FC84                            
0000FC84                            loc_DA3C:
0000FC84 4A28 0004                  		tst.b	4(a0)
0000FC88 6A00                       		bpl.s	OPL_MakeItem
0000FC8A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FC90 6700                       		beq.s	OPL_MakeItem
0000FC92 5C48                       		addq.w	#6,a0
0000FC94 7000                       		moveq	#0,d0
0000FC96 4E75                       		rts	
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            OPL_MakeItem:
0000FC98 6100 0000                  		bsr.w	FindFreeObj
0000FC9C 6600                       		bne.s	locret_DA8A
0000FC9E 3358 0008                  		move.w	(a0)+,obX(a1)
0000FCA2 3018                       		move.w	(a0)+,d0
0000FCA4 3200                       		move.w	d0,d1
0000FCA6 0240 0FFF                  		andi.w	#$FFF,d0
0000FCAA 3340 000C                  		move.w	d0,obY(a1)
0000FCAE E559                       		rol.w	#2,d1
0000FCB0 0201 0003                  		andi.b	#3,d1
0000FCB4 1341 0001                  		move.b	d1,obRender(a1)
0000FCB8 1341 0022                  		move.b	d1,obStatus(a1)
0000FCBC 1018                       		move.b	(a0)+,d0
0000FCBE 6A00                       		bpl.s	loc_DA80
0000FCC0 0200 007F                  		andi.b	#$7F,d0
0000FCC4 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FCC8                            
0000FCC8                            loc_DA80:
0000FCC8 1280                       		move.b	d0,0(a1)
0000FCCA 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FCCE 7000                       		moveq	#0,d0
0000FCD0                            
0000FCD0                            locret_DA8A:
0000FCD0 4E75                       		rts	
0000FCD2                            
0000FCD2                            		include	"_incObj\sub FindFreeObj.asm"
0000FCD2                            ; ---------------------------------------------------------------------------
0000FCD2                            ; Subroutine to find a free object space
0000FCD2                            
0000FCD2                            ; output:
0000FCD2                            ;	a1 = free position in object RAM
0000FCD2                            ; ---------------------------------------------------------------------------
0000FCD2                            
0000FCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCD2                            
0000FCD2                            
0000FCD2                            FindFreeObj:
0000FCD2 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FCD6 303C 005F                  		move.w	#$5F,d0
0000FCDA                            
0000FCDA                            	FFree_Loop:
0000FCDA 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FCDC 6700                       		beq.s	FFree_Found	; if yes, branch
0000FCDE 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FCE2 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FCE6                            
0000FCE6                            	FFree_Found:
0000FCE6 4E75                       		rts	
0000FCE8                            
0000FCE8                            ; End of function FindFreeObj
0000FCE8                            
0000FCE8                            
0000FCE8                            ; ---------------------------------------------------------------------------
0000FCE8                            ; Subroutine to find a free object space AFTER the current one
0000FCE8                            
0000FCE8                            ; output:
0000FCE8                            ;	a1 = free position in object RAM
0000FCE8                            ; ---------------------------------------------------------------------------
0000FCE8                            
0000FCE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCE8                            
0000FCE8                            
0000FCE8                            FindNextFreeObj:
0000FCE8 2248                       		movea.l	a0,a1
0000FCEA 303C F000                  		move.w	#$F000,d0
0000FCEE 9048                       		sub.w	a0,d0
0000FCF0 EC48                       		lsr.w	#6,d0
0000FCF2 5340                       		subq.w	#1,d0
0000FCF4 6500                       		bcs.s	NFree_Found
0000FCF6                            
0000FCF6                            	NFree_Loop:
0000FCF6 4A11                       		tst.b	(a1)
0000FCF8 6700                       		beq.s	NFree_Found
0000FCFA 43E9 0040                  		lea	$40(a1),a1
0000FCFE 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FD02                            
0000FD02                            	NFree_Found:
0000FD02 4E75                       		rts	
0000FD04                            
0000FD04                            ; End of function FindNextFreeObj
0000FD04                            ; End of function FindNextFreeObj
0000FD04                            		include	"_incObj\41 Springs.asm"
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04                            ; Object 41 - springs
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04                            
0000FD04                            Springs:
0000FD04 7000                       		moveq	#0,d0
0000FD06 1028 0024                  		move.b	obRoutine(a0),d0
0000FD0A 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FD0E 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FD12 6100 FB32                  		bsr.w	DisplaySprite
0000FD34 4E75                       		rts	
0000FD36                            ; ===========================================================================
0000FD36 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FD38 0000                       		dc.w Spring_Up-Spring_Index
0000FD3A 0000                       		dc.w Spring_AniUp-Spring_Index
0000FD3C 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FD3E 0000                       		dc.w Spring_LR-Spring_Index
0000FD40 0000                       		dc.w Spring_AniLR-Spring_Index
0000FD42 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FD44 0000                       		dc.w Spring_Dwn-Spring_Index
0000FD46 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FD48 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FD4A                            
0000FD4A =00000030                  spring_pow:	equ $30			; power of current spring
0000FD4A                            
0000FD4A F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FD4C F600                       		dc.w -$A00		; power	of yellow spring
0000FD4E                            ; ===========================================================================
0000FD4E                            
0000FD4E                            Spring_Main:	; Routine 0
0000FD4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FD52 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FD5A 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FD60 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FD66 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FD6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FD72 1028 0028                  		move.b	obSubtype(a0),d0
0000FD76 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FD7A 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FD7C                            
0000FD7C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FD82 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FD88 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FD8E 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FD94 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FD9A                            
0000FD9A                            	Spring_NotLR:
0000FD9A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FD9E 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FDA0                            
0000FDA0 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FDA6 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FDAC                            
0000FDAC                            	Spring_NotDwn:
0000FDAC 0800 0001                  		btst	#1,d0
0000FDB0 6700                       		beq.s	loc_DB72
0000FDB2 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FDB8                            
0000FDB8                            loc_DB72:
0000FDB8 0240 000F                  		andi.w	#$F,d0
0000FDBC 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FDC2 4E75                       		rts	
0000FDC4                            ; ===========================================================================
0000FDC4                            
0000FDC4                            Spring_Up:	; Routine 2
0000FDC4 323C 001B                  		move.w	#$1B,d1
0000FDC8 343C 0008                  		move.w	#8,d2
0000FDCC 363C 0010                  		move.w	#$10,d3
0000FDD0 3828 0008                  		move.w	obX(a0),d4
0000FDD4 6100 0000                  		bsr.w	SolidObject
0000FDD8 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FDDC 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FDDE 4E75                       		rts	
0000FDE0                            ; ===========================================================================
0000FDE0                            
0000FDE0                            Spring_BounceUp:
0000FDE0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FDE4 5069 000C                  		addq.w	#8,obY(a1)
0000FDE8 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FDEE 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FDF4 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FDFA 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FE00 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FE06 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FE0C 4228 0025                  		clr.b	obSolid(a0)
0000FE1A                            
0000FE1A                            Spring_AniUp:	; Routine 4
0000FE1A 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FE20 6000 CAD8                  		bra.w	AnimateSprite
0000FE24                            ; ===========================================================================
0000FE24                            
0000FE24                            Spring_ResetUp:	; Routine 6
0000FE24 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FE2A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FE2E 4E75                       		rts	
0000FE30                            ; ===========================================================================
0000FE30                            
0000FE30                            Spring_LR:	; Routine 8
0000FE30 323C 0013                  		move.w	#$13,d1
0000FE34 343C 000E                  		move.w	#$E,d2
0000FE38 363C 000F                  		move.w	#$F,d3
0000FE3C 3828 0008                  		move.w	obX(a0),d4
0000FE40 6100 0000                  		bsr.w	SolidObject
0000FE44 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FE4A 6600                       		bne.s	loc_DC0C
0000FE4C 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FE52                            
0000FE52                            loc_DC0C:
0000FE52 0828 0005 0022             		btst	#5,obStatus(a0)
0000FE58 6600                       		bne.s	Spring_BounceLR
0000FE5A 4E75                       		rts	
0000FE5C                            ; ===========================================================================
0000FE5C                            
0000FE5C                            Spring_BounceLR:
0000FE5C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE60 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FE66 5069 0008                  		addq.w	#8,obX(a1)
0000FE6A 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FE70 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FE72 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FE78 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FE7C                            
0000FE7C                            	Spring_Flipped:
0000FE7C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FE82 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FE88 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FE8E 0829 0002 0022             		btst	#2,obStatus(a1)
0000FE94 6600                       		bne.s	loc_DC56
0000FE96 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FE9C                            
0000FE9C                            loc_DC56:
0000FE9C 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FEA2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FEB2                            
0000FEB2                            Spring_AniLR:	; Routine $A
0000FEB2 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FEB6 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FEBC 6000 CA3C                  		bra.w	AnimateSprite
0000FEC0                            ; ===========================================================================
0000FEC0                            
0000FEC0                            Spring_ResetLR:	; Routine $C
0000FEC0 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FEC6 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FECA 4E75                       		rts	
0000FECC                            ; ===========================================================================
0000FECC                            
0000FECC                            Spring_Dwn:	; Routine $E
0000FECC 323C 001B                  		move.w	#$1B,d1
0000FED0 343C 0008                  		move.w	#8,d2
0000FED4 363C 0010                  		move.w	#$10,d3
0000FED8 3828 0008                  		move.w	obX(a0),d4
0000FEDC 6100 0000                  		bsr.w	SolidObject
0000FEE0 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FEE6 6600                       		bne.s	loc_DCA4
0000FEE8 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FEEE                            
0000FEEE                            loc_DCA4:
0000FEEE 4A28 0025                  		tst.b	obSolid(a0)
0000FEF2 6600                       		bne.s	locret_DCAE
0000FEF4 4A44                       		tst.w	d4
0000FEF6 6B00                       		bmi.s	Spring_BounceDwn
0000FEF8                            
0000FEF8                            locret_DCAE:
0000FEF8 4E75                       		rts	
0000FEFA                            ; ===========================================================================
0000FEFA                            
0000FEFA                            Spring_BounceDwn:
0000FEFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FEFE 5169 000C                  		subq.w	#8,obY(a1)
0000FF02 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FF08 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FF0C 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF12 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF18 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF1E 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF24 4228 0025                  		clr.b	obSolid(a0)
0000FF32                            
0000FF32                            Spring_AniDwn:	; Routine $10
0000FF32 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF38 6000 C9C0                  		bra.w	AnimateSprite
0000FF3C                            ; ===========================================================================
0000FF3C                            
0000FF3C                            Spring_ResetDwn:
0000FF3C                            		; Routine $12
0000FF3C 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF42 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FF46 4E75                       		rts	
0000FF46 4E75                       		rts	
0000FF48                            		include	"_anim\Springs.asm"
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Animation script - springs
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FF4A 0000                       		dc.w byte_DD0E-Ani_Spring
0000FF4C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FF58 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FF64                            		even
0000FF64                            		even
0000FF64                            Map_Spring:	include	"_maps\Springs.asm"
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            ; Sprite mappings - springs
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            Map_Spring_internal:
0000FF64 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FF66 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FF68 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FF6A 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FF6C 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FF6E 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FF70 02                         M_Spg_Up:	dc.b 2			; facing up
0000FF71 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FF76 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FF7B 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FF7C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FF81 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FF82 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FF87 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FF8C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FF91 01                         M_Spg_Left:	dc.b 1			; facing left
0000FF92 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FF97 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FF98 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FF9D 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FF9E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FFA3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FFA8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FFAD 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FFB2                            		even
0000FFB2                            		even
0000FFB2                            
0000FFB2                            		include	"_incObj\42 Newtron.asm"
0000FFB2                            ; ---------------------------------------------------------------------------
0000FFB2                            ; Object 42 - Newtron enemy (GHZ)
0000FFB2                            ; ---------------------------------------------------------------------------
0000FFB2                            
0000FFB2                            Newtron:
0000FFB2 7000                       		moveq	#0,d0
0000FFB4 1028 0024                  		move.b	obRoutine(a0),d0
0000FFB8 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FFBC 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FFC0                            ; ===========================================================================
0000FFC0 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FFC2 0000                       		dc.w Newt_Action-Newt_Index
0000FFC4 0000                       		dc.w Newt_Delete-Newt_Index
0000FFC6                            ; ===========================================================================
0000FFC6                            
0000FFC6                            Newt_Main:	; Routine 0
0000FFC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FFCA 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FFD2 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FFD8 117C 0004 0001             		move.b	#4,obRender(a0)
0000FFDE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FFE4 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FFEA 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FFF0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FFF6                            
0000FFF6                            Newt_Action:	; Routine 2
0000FFF6 7000                       		moveq	#0,d0
0000FFF8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FFFC 323B 0000                  		move.w	@index(pc,d0.w),d1
00010000 4EBB 1000                  		jsr	@index(pc,d1.w)
00010004 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0001000A 6100 C8EE                  		bsr.w	AnimateSprite
0001000E 6000 0000                  		bra.w	RememberState
00010012                            ; ===========================================================================
00010012 0000                       @index:		dc.w @chkdistance-@index
00010014 0000                       		dc.w @type00-@index
00010016 0000                       		dc.w @matchfloor-@index
00010018 0000                       		dc.w @speed-@index
0001001A 0000                       		dc.w @type01-@index
0001001C                            ; ===========================================================================
0001001C                            
0001001C                            @chkdistance:
0001001C 08E8 0000 0022             		bset	#0,obStatus(a0)
00010022 3038 D008                  		move.w	(v_player+obX).w,d0
00010026 9068 0008                  		sub.w	obX(a0),d0
0001002A 6400                       		bcc.s	@sonicisright
0001002C 4440                       		neg.w	d0
0001002E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00010034                            
00010034                            	@sonicisright:
00010034 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
00010038 6400                       		bcc.s	@outofrange	; if not, branch
0001003A 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0001003E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010044 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
00010048 6700                       		beq.s	@istype00	; if type is 00, branch
0001004A                            
0001004A 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010050 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
00010056 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0001005C                            
0001005C                            	@outofrange:
0001005C                            	@istype00:
0001005C 4E75                       		rts	
0001005E                            ; ===========================================================================
0001005E                            
0001005E                            @type00:
0001005E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
00010064 6400                       		bcc.s	@fall		; is yes, branch
00010066 08E8 0000 0022             		bset	#0,obStatus(a0)
0001006C 3038 D008                  		move.w	(v_player+obX).w,d0
00010070 9068 0008                  		sub.w	obX(a0),d0
00010074 6400                       		bcc.s	@sonicisright2
00010076 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001007C                            
0001007C                            	@sonicisright2:
0001007C 4E75                       		rts	
0001007E                            ; ===========================================================================
0001007E                            
0001007E                            	@fall:
0001007E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010084 6600                       		bne.s	@loc_DE42
00010086 117C 000C 0020             		move.b	#$C,obColType(a0)
0001008C                            
0001008C                            	@loc_DE42:
0001008C 6100 F76C                  		bsr.w	ObjectFall
00010090 6100 0000                  		bsr.w	ObjFloorDist
00010094 4A41                       		tst.w	d1		; has newtron hit the floor?
00010096 6A00                       		bpl.s	@keepfalling	; if not, branch
00010098                            
00010098 D368 000C                  		add.w	d1,obY(a0)
0001009C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000100A2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000100A6 117C 0002 001C             		move.b	#2,obAnim(a0)
000100AC 0828 0005 0002             		btst	#5,obGfx(a0)
000100B2 6700                       		beq.s	@pppppppp
000100B4 5228 001C                  		addq.b	#1,obAnim(a0)
000100B8                            
000100B8                            	@pppppppp:
000100B8 117C 000D 0020             		move.b	#$D,obColType(a0)
000100BE 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000100C4 0828 0000 0022             		btst	#0,obStatus(a0)
000100CA 6600                       		bne.s	@keepfalling
000100CC 4468 0010                  		neg.w	obVelX(a0)
000100D0                            
000100D0                            	@keepfalling:
000100D0 4E75                       		rts	
000100D2                            ; ===========================================================================
000100D2                            
000100D2                            @matchfloor:
000100D2 6100 F75E                  		bsr.w	SpeedToPos
000100D6 6100 0000                  		bsr.w	ObjFloorDist
000100DA 0C41 FFF8                  		cmpi.w	#-8,d1
000100DE 6D00                       		blt.s	@nextroutine
000100E0 0C41 000C                  		cmpi.w	#$C,d1
000100E4 6C00                       		bge.s	@nextroutine
000100E6 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
000100EA 4E75                       		rts	
000100EC                            ; ===========================================================================
000100EC                            
000100EC                            	@nextroutine:
000100EC 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
000100F0 4E75                       		rts	
000100F2                            ; ===========================================================================
000100F2                            
000100F2                            @speed:
000100F2 6100 F73E                  		bsr.w	SpeedToPos
000100F6 4E75                       		rts	
000100F8                            ; ===========================================================================
000100F8                            
000100F8                            @type01:
000100F8 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000100FE 6600                       		bne.s	@firemissile
00010100 117C 000C 0020             		move.b	#$C,obColType(a0)
00010106                            
00010106                            	@firemissile:
00010106 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001010C 6600                       		bne.s	@fail
0001010E 4A28 0032                  		tst.b	$32(a0)
00010112 6600                       		bne.s	@fail
00010114 117C 0001 0032             		move.b	#1,$32(a0)
0001011A 6100 FBB6                  		bsr.w	FindFreeObj
0001011E 6600                       		bne.s	@fail
00010120 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
00010124 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001012A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010130 5169 000C                  		subq.w	#8,obY(a1)
00010134 337C 0200 0010             		move.w	#$200,obVelX(a1)
0001013A 303C 0014                  		move.w	#$14,d0
0001013E 0828 0000 0022             		btst	#0,obStatus(a0)
00010144 6600                       		bne.s	@noflip
00010146 4440                       		neg.w	d0
00010148 4469 0010                  		neg.w	obVelX(a1)
0001014C                            
0001014C                            	@noflip:
0001014C D169 0008                  		add.w	d0,obX(a1)
00010150 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00010156 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001015C                            
0001015C                            	@fail:
0001015C 4E75                       		rts	
0001015E                            ; ===========================================================================
0001015E                            
0001015E                            Newt_Delete:	; Routine 4
0001015E 6000 F726                  		bra.w	DeleteObject
0001015E 6000 F726                  		bra.w	DeleteObject
00010162                            		include	"_anim\Newtron.asm"
00010162                            ; ---------------------------------------------------------------------------
00010162                            ; Animation script - Newtron enemy
00010162                            ; ---------------------------------------------------------------------------
00010162 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
00010164 0000                       		dc.w A_Newt_Drop-Ani_Newt
00010166 0000                       		dc.w A_Newt_Fly1-Ani_Newt
00010168 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0001016A 0000                       		dc.w A_Newt_Fires-Ani_Newt
0001016C 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
00010170 00                         		even
00010170 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
00010178 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0001017C 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
00010180 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0001018A 00                         		even
0001018A 00                         		even
0001018A                            Map_Newt:	include	"_maps\Newtron.asm"
0001018A                            ; ---------------------------------------------------------------------------
0001018A                            ; Sprite mappings - Newtron enemy (GHZ)
0001018A                            ; ---------------------------------------------------------------------------
0001018A                            Map_Newt_internal:
0001018A 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0001018C 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0001018E 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
00010190 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
00010192 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
00010194 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
00010196 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
00010198 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0001019A 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0001019C 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0001019E 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000101A0 03                         M_Newt_Trans:	dc.b 3
000101A1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000101A6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000101AB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000101B0 03                         M_Newt_Norm:	dc.b 3
000101B1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000101B6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000101BB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000101C0 03                         M_Newt_Fires:	dc.b 3
000101C1 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000101C6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000101CB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000101D0 04                         M_Newt_Drop1:	dc.b 4
000101D1 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
000101D6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000101DB FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
000101E0 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
000101E5 03                         M_Newt_Drop2:	dc.b 3
000101E6 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000101EB FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000101F0 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000101F5 02                         M_Newt_Drop3:	dc.b 2
000101F6 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000101FB F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010200 03                         M_Newt_Fly1a:	dc.b 3
00010201 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
00010206 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001020B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010210 03                         M_Newt_Fly1b:	dc.b 3
00010211 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010216 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001021B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010220 03                         M_Newt_Fly2a:	dc.b 3
00010221 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010226 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001022B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010230 03                         M_Newt_Fly2b:	dc.b 3
00010231 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010236 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001023B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010240 00                         M_Newt_Blank:	dc.b 0
00010242 00                         		even
00010242 00                         		even
00010242                            		include	"_incObj\43 Roller.asm"
00010242                            ; ---------------------------------------------------------------------------
00010242                            ; Object 43 - Roller enemy (SYZ)
00010242                            ; ---------------------------------------------------------------------------
00010242                            
00010242                            Roller:
00010242 7000                       		moveq	#0,d0
00010244 1028 0024                  		move.b	obRoutine(a0),d0
00010248 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0001024C 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010250                            ; ===========================================================================
00010250 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010252 0000                       		dc.w Roll_Action-Roll_Index
00010254                            ; ===========================================================================
00010254                            
00010254                            Roll_Main:	; Routine 0
00010254 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001025A 117C 0008 0017             		move.b	#8,obWidth(a0)
00010260 6100 F598                  		bsr.w	ObjectFall
00010264 6100 0000                  		bsr.w	ObjFloorDist
00010268 4A41                       		tst.w	d1
0001026A 6A00                       		bpl.s	locret_E052
0001026C D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
00010270 317C 0000 0012             		move.w	#0,obVelY(a0)
00010276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001027A 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
00010282 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
00010288 117C 0004 0001             		move.b	#4,obRender(a0)
0001028E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010294 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001029A                            
0001029A                            	locret_E052:
0001029A 4E75                       		rts	
0001029C                            ; ===========================================================================
0001029C                            
0001029C                            Roll_Action:	; Routine 2
0001029C 7000                       		moveq	#0,d0
0001029E 1028 0025                  		move.b	ob2ndRout(a0),d0
000102A2 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000102A6 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000102AA 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000102B0 6100 C648                  		bsr.w	AnimateSprite
000102B4 3028 0008                  		move.w	obX(a0),d0
000102B8 0240 FF80                  		andi.w	#$FF80,d0
000102BC 3238 F700                  		move.w	(v_screenposx).w,d1
000102C0 0441 0080                  		subi.w	#$80,d1
000102C4 0241 FF80                  		andi.w	#$FF80,d1
000102C8 9041                       		sub.w	d1,d0
000102CA 0C40 0280                  		cmpi.w	#$280,d0
000102CE 6E00 0000                  		bgt.w	Roll_ChkGone
000102D2 6000 F572                  		bra.w	DisplaySprite
000102D6                            ; ===========================================================================
000102D6                            
000102D6                            Roll_ChkGone:
000102D6 45F8 FC00                  		lea	(v_objstate).w,a2
000102DA 7000                       		moveq	#0,d0
000102DC 1028 0023                  		move.b	obRespawnNo(a0),d0
000102E0 6700                       		beq.s	Roll_Delete
000102E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000102E8                            
000102E8                            Roll_Delete:
000102E8 6000 F59C                  		bra.w	DeleteObject
000102EC                            ; ===========================================================================
000102EC 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
000102EE 0000                       		dc.w Roll_RollNoChk-Roll_Index2
000102F0 0000                       		dc.w Roll_ChkJump-Roll_Index2
000102F2 0000                       		dc.w Roll_MatchFloor-Roll_Index2
000102F4                            ; ===========================================================================
000102F4                            
000102F4                            Roll_RollChk:
000102F4 3038 D008                  		move.w	(v_player+obX).w,d0
000102F8 0440 0100                  		subi.w	#$100,d0
000102FC 6500                       		bcs.s	loc_E0D2
000102FE 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010302 6500                       		bcs.s	loc_E0D2
00010304 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010308 117C 0002 001C             		move.b	#2,obAnim(a0)
0001030E 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010314 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0001031A                            
0001031A                            loc_E0D2:
0001031A 588F                       		addq.l	#4,sp
0001031C 4E75                       		rts	
0001031E                            ; ===========================================================================
0001031E                            
0001031E                            Roll_RollNoChk:
0001031E 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010324 6700                       		beq.s	loc_E0F8
00010326 5368 0030                  		subq.w	#1,$30(a0)
0001032A 6A00                       		bpl.s	locret_E0F6
0001032C 117C 0001 001C             		move.b	#1,obAnim(a0)
00010332 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010338 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001033E                            
0001033E                            locret_E0F6:
0001033E 4E75                       		rts	
00010340                            ; ===========================================================================
00010340                            
00010340                            loc_E0F8:
00010340 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010344 4E75                       		rts	
00010346                            ; ===========================================================================
00010346                            
00010346                            Roll_ChkJump:
00010346 6100 0000                  		bsr.w	Roll_Stop
0001034A 6100 F4E6                  		bsr.w	SpeedToPos
0001034E 6100 0000                  		bsr.w	ObjFloorDist
00010352 0C41 FFF8                  		cmpi.w	#-8,d1
00010356 6D00                       		blt.s	Roll_Jump
00010358 0C41 000C                  		cmpi.w	#$C,d1
0001035C 6C00                       		bge.s	Roll_Jump
0001035E D368 000C                  		add.w	d1,obY(a0)
00010362 4E75                       		rts	
00010364                            ; ===========================================================================
00010364                            
00010364                            Roll_Jump:
00010364 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010368 08E8 0000 0032             		bset	#0,$32(a0)
0001036E 6700                       		beq.s	locret_E12E
00010370 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010376                            
00010376                            locret_E12E:
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378                            
00010378                            Roll_MatchFloor:
00010378 6100 F480                  		bsr.w	ObjectFall
0001037C 4A68 0012                  		tst.w	obVelY(a0)
00010380 6B00                       		bmi.s	locret_E150
00010382 6100 0000                  		bsr.w	ObjFloorDist
00010386 4A41                       		tst.w	d1
00010388 6A00                       		bpl.s	locret_E150
0001038A D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001038E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010392 317C 0000 0012             		move.w	#0,obVelY(a0)
00010398                            
00010398                            locret_E150:
00010398 4E75                       		rts	
0001039A                            
0001039A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001039A                            
0001039A                            
0001039A                            Roll_Stop:
0001039A 4A28 0032                  		tst.b	$32(a0)
0001039E 6B00                       		bmi.s	locret_E188
000103A0 3038 D008                  		move.w	(v_player+obX).w,d0
000103A4 0440 0030                  		subi.w	#$30,d0
000103A8 9068 0008                  		sub.w	obX(a0),d0
000103AC 6400                       		bcc.s	locret_E188
000103AE 117C 0000 001C             		move.b	#0,obAnim(a0)
000103B4 117C 000E 0020             		move.b	#$E,obColType(a0)
000103BA 4268 0010                  		clr.w	obVelX(a0)
000103BE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000103C4 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000103CA 08E8 0007 0032             		bset	#7,$32(a0)
000103D0                            
000103D0                            locret_E188:
000103D0 4E75                       		rts	
000103D2                            ; End of function Roll_Stop
000103D2                            ; End of function Roll_Stop
000103D2                            		include	"_anim\Roller.asm"
000103D2                            ; ---------------------------------------------------------------------------
000103D2                            ; Animation script - Roller enemy
000103D2                            ; ---------------------------------------------------------------------------
000103D2 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000103D4 0000                       		dc.w A_Roll_Fold-Ani_Roll
000103D6 0000                       		dc.w A_Roll_Roll-Ani_Roll
000103D8 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000103DE 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000103E4 00                         		even
000103E4 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000103EA 00                         		even
000103EA 00                         		even
000103EA                            Map_Roll:	include	"_maps\Roller.asm"
000103EA                            ; --------------------------------------------------------------------------------
000103EA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000103EA                            ; --------------------------------------------------------------------------------
000103EA                            
000103EA                            SME_q3BmU:	
000103EA 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000103EE 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000103F2 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000103F4 02                         SME_q3BmU_A:	dc.b 2	
000103F5 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000103FA F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000103FF 02                         SME_q3BmU_15:	dc.b 2	
00010400 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
00010405 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
0001040A 01                         SME_q3BmU_20:	dc.b 1	
0001040B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010410 01                         SME_q3BmU_26:	dc.b 1	
00010411 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010416 01                         SME_q3BmU_2C:	dc.b 1	
00010417 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001041C                            		even
0001041C                            		even
0001041C                            
0001041C                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            ; Object 44 - edge walls (GHZ)
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            
0001041C                            EdgeWalls:
0001041C 7000                       		moveq	#0,d0
0001041E 1028 0024                  		move.b	obRoutine(a0),d0
00010422 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010426 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0001042A                            ; ===========================================================================
0001042A 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001042C 0000                       		dc.w Edge_Solid-Edge_Index
0001042E 0000                       		dc.w Edge_Display-Edge_Index
00010430                            ; ===========================================================================
00010430                            
00010430                            Edge_Main:	; Routine 0
00010430 5428 0024                  		addq.b	#2,obRoutine(a0)
00010434 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001043C 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010442 0028 0004 0001             		ori.b	#4,obRender(a0)
00010448 117C 0008 0014             		move.b	#8,obActWid(a0)
0001044E 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010454 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0001045A 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010460 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010462 5428 0024                  		addq.b	#2,obRoutine(a0)
00010466 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010468                            ; ===========================================================================
00010468                            
00010468                            Edge_Solid:	; Routine 2
00010468 323C 0013                  		move.w	#$13,d1
0001046C 343C 0028                  		move.w	#$28,d2
00010470 6100 A236                  		bsr.w	Obj44_SolidWall
00010474                            
00010474                            Edge_Display:	; Routine 4
00010474 6100 F3D0                  		bsr.w	DisplaySprite
00010496 4E75                       		rts	
00010496 4E75                       		rts	
00010498                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010498                            ; ---------------------------------------------------------------------------
00010498                            ; Sprite mappings - walls (GHZ)
00010498                            ; ---------------------------------------------------------------------------
00010498                            Map_Edge_internal:
00010498 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0001049A 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001049C 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001049E 04                         M_Edge_Shadow:	dc.b 4
0001049F E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000104A4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000104A9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000104AE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000104B3 04                         M_Edge_Light:	dc.b 4
000104B4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000104B9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000104BE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000104C3 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000104C8 04                         M_Edge_Dark:	dc.b 4
000104C9 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000104CE F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000104D3 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000104D8 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000104DE 00                         		even
000104DE 00                         		even
000104DE                            
000104DE                            		include	"_incObj\13 Lava Ball Maker.asm"
000104DE                            ; ---------------------------------------------------------------------------
000104DE                            ; Object 13 - lava ball	maker (MZ, SLZ)
000104DE                            ; ---------------------------------------------------------------------------
000104DE                            
000104DE                            LavaMaker:
000104DE 7000                       		moveq	#0,d0
000104E0 1028 0024                  		move.b	obRoutine(a0),d0
000104E4 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000104E8 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000104EC 6000 0000                  		bra.w	LBall_ChkDel
000104F0                            ; ===========================================================================
000104F0 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000104F2 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000104F4                            ; ---------------------------------------------------------------------------
000104F4                            ;
000104F4                            ; Lava ball production rates
000104F4                            ;
000104F4 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000104FA                            ; ===========================================================================
000104FA                            
000104FA                            LavaM_Main:	; Routine 0
000104FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000104FE 1028 0028                  		move.b	obSubtype(a0),d0
00010502 E848                       		lsr.w	#4,d0
00010504 0240 000F                  		andi.w	#$F,d0
00010508 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0001050E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010514 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001051A                            
0001051A                            LavaM_MakeLava:	; Routine 2
0001051A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001051E 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010520 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010526 6100 F59E                  		bsr.w	ChkObjectVisible
0001052A 6600                       		bne.s	LavaM_Wait
0001052C 6100 F7A4                  		bsr.w	FindFreeObj
00010530 6600                       		bne.s	LavaM_Wait
00010532 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010536 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001053C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010542 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010548                            
00010548                            	LavaM_Wait:
00010548 4E75                       		rts	
00010548 4E75                       		rts	
0001054A                            		include	"_incObj\14 Lava Ball.asm"
0001054A                            ; ---------------------------------------------------------------------------
0001054A                            ; Object 14 - lava balls (MZ, SLZ)
0001054A                            ; ---------------------------------------------------------------------------
0001054A                            
0001054A                            LavaBall:
0001054A 7000                       		moveq	#0,d0
0001054C 1028 0024                  		move.b	obRoutine(a0),d0
00010550 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010554 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010558 6000 F2EC                  		bra.w	DisplaySprite
0001055C                            ; ===========================================================================
0001055C 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001055E 0000                       		dc.w LBall_Action-LBall_Index
00010560 0000                       		dc.w LBall_Delete-LBall_Index
00010562                            
00010562 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001056C 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010574                            ; ===========================================================================
00010574                            
00010574                            LBall_Main:	; Routine 0
00010574 5428 0024                  		addq.b	#2,obRoutine(a0)
00010578 117C 0008 0016             		move.b	#8,obHeight(a0)
0001057E 117C 0008 0017             		move.b	#8,obWidth(a0)
00010584 217C 0000 D54C 0004        		move.l	#Map_Fire,obMap(a0)
0001058C 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010592 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010598 6600                       		bne.s	@notSLZ
0001059A 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000105A0                            
000105A0                            	@notSLZ:
000105A0 117C 0004 0001             		move.b	#4,obRender(a0)
000105A6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000105AC 117C 008B 0020             		move.b	#$8B,obColType(a0)
000105B2 3168 000C 0030             		move.w	obY(a0),$30(a0)
000105B8 4A28 0029                  		tst.b	$29(a0)
000105BC 6700                       		beq.s	@speed
000105BE 5428 0018                  		addq.b	#2,obPriority(a0)
000105C2                            
000105C2                            	@speed:
000105C2 7000                       		moveq	#0,d0
000105C4 1028 0028                  		move.b	obSubtype(a0),d0
000105C8 D040                       		add.w	d0,d0
000105CA 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000105D0 117C 0008 0014             		move.b	#8,obActWid(a0)
000105D6 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000105DC 6500                       		bcs.s	@sound		; if yes, branch
000105DE                            
000105DE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000105E4 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000105EA 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000105F0 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000105F6                            
000105F6                            	@sound:
00010600                            
00010600                            LBall_Action:	; Routine 2
00010600 7000                       		moveq	#0,d0
00010602 1028 0028                  		move.b	obSubtype(a0),d0
00010606 D040                       		add.w	d0,d0
00010608 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0001060C 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010610 6100 F220                  		bsr.w	SpeedToPos
00010614 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0001061A 6100 C2DE                  		bsr.w	AnimateSprite
0001061E                            
0001061E                            LBall_ChkDel:
0001063C 4E75                       		rts	
0001063E                            ; ===========================================================================
0001063E 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010642 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010646 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0001064A 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001064E 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010650                            ; ===========================================================================
00010650                            ; lavaball types 00-03 fly up and fall back down
00010650                            
00010650                            LBall_Type00:
00010650 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010656 3028 0030                  		move.w	$30(a0),d0
0001065A B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001065E 6400                       		bcc.s	loc_E41E	; if not, branch
00010660 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010664                            
00010664                            loc_E41E:
00010664 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001066A 4A68 0012                  		tst.w	obVelY(a0)
0001066E 6A00                       		bpl.s	locret_E430
00010670 08E8 0001 0022             		bset	#1,obStatus(a0)
00010676                            
00010676                            locret_E430:
00010676 4E75                       		rts	
00010678                            ; ===========================================================================
00010678                            ; lavaball type	04 flies up until it hits the ceiling
00010678                            
00010678                            LBall_Type04:
00010678 08E8 0001 0022             		bset	#1,obStatus(a0)
0001067E 6100 0000                  		bsr.w	ObjHitCeiling
00010682 4A41                       		tst.w	d1
00010684 6A00                       		bpl.s	locret_E452
00010686 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001068C 117C 0001 001C             		move.b	#1,obAnim(a0)
00010692 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010698                            
00010698                            locret_E452:
00010698 4E75                       		rts	
0001069A                            ; ===========================================================================
0001069A                            ; lavaball type	05 falls down until it hits the	floor
0001069A                            
0001069A                            LBall_Type05:
0001069A 08A8 0001 0022             		bclr	#1,obStatus(a0)
000106A0 6100 0000                  		bsr.w	ObjFloorDist
000106A4 4A41                       		tst.w	d1
000106A6 6A00                       		bpl.s	locret_E474
000106A8 117C 0008 0028             		move.b	#8,obSubtype(a0)
000106AE 117C 0001 001C             		move.b	#1,obAnim(a0)
000106B4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000106BA                            
000106BA                            locret_E474:
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC                            ; lavaball types 06-07 move sideways
000106BC                            
000106BC                            LBall_Type06:
000106BC 08E8 0000 0022             		bset	#0,obStatus(a0)
000106C2 76F8                       		moveq	#-8,d3
000106C4 6100 0000                  		bsr.w	ObjHitWallLeft
000106C8 4A41                       		tst.w	d1
000106CA 6A00                       		bpl.s	locret_E498
000106CC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000106D2 117C 0003 001C             		move.b	#3,obAnim(a0)
000106D8 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000106DE                            
000106DE                            locret_E498:
000106DE 4E75                       		rts	
000106E0                            ; ===========================================================================
000106E0                            
000106E0                            LBall_Type07:
000106E0 08A8 0000 0022             		bclr	#0,obStatus(a0)
000106E6 7608                       		moveq	#8,d3
000106E8 6100 0000                  		bsr.w	ObjHitWallRight
000106EC 4A41                       		tst.w	d1
000106EE 6A00                       		bpl.s	locret_E4BC
000106F0 117C 0008 0028             		move.b	#8,obSubtype(a0)
000106F6 117C 0003 001C             		move.b	#3,obAnim(a0)
000106FC 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010702                            
00010702                            locret_E4BC:
00010702 4E75                       		rts	
00010704                            ; ===========================================================================
00010704                            
00010704                            LBall_Type08:
00010704 4E75                       		rts	
00010706                            ; ===========================================================================
00010706                            
00010706                            LBall_Delete:
00010706 6000 F17E                  		bra.w	DeleteObject
00010706 6000 F17E                  		bra.w	DeleteObject
0001070A                            		include	"_anim\Fireballs.asm"
0001070A                            ; ---------------------------------------------------------------------------
0001070A                            ; Animation script - lava balls
0001070A                            ; ---------------------------------------------------------------------------
0001070A 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0001070C 0000                       		dc.w @vertcollide-Ani_Fire
0001070E 0000                       		dc.w @horizontal-Ani_Fire
00010710 0000                       		dc.w @horicollide-Ani_Fire
00010712 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010718 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001071C 00                         		even
0001071C 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010722 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010726 00                         		even
00010726 00                         		even
00010726                            
00010726                            		include	"_incObj\6D Flamethrower.asm"
00010726                            ; ---------------------------------------------------------------------------
00010726                            ; Object 6D - flame thrower (SBZ)
00010726                            ; ---------------------------------------------------------------------------
00010726                            
00010726                            Flamethrower:
00010726 7000                       		moveq	#0,d0
00010728 1028 0024                  		move.b	obRoutine(a0),d0
0001072C 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010730 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010734                            ; ===========================================================================
00010734 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010736 0000                       		dc.w Flame_Action-Flame_Index
00010738                            ; ===========================================================================
00010738                            
00010738                            Flame_Main:	; Routine 0
00010738 5428 0024                  		addq.b	#2,obRoutine(a0)
0001073C 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010744 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0001074A 0028 0004 0001             		ori.b	#4,obRender(a0)
00010750 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010756 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001075C 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010762 1028 0028                  		move.b	obSubtype(a0),d0
00010766 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0001076A D040                       		add.w	d0,d0		; multiply by 2
0001076C 3140 0030                  		move.w	d0,$30(a0)
00010770 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010774 1028 0028                  		move.b	obSubtype(a0),d0
00010778 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001077C EB48                       		lsl.w	#5,d0		; multiply by $20
0001077E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010782 117C 000A 0036             		move.b	#$A,$36(a0)
00010788 0828 0001 0022             		btst	#1,obStatus(a0)
0001078E 6700                       		beq.s	Flame_Action
00010790 117C 0002 001C             		move.b	#2,obAnim(a0)
00010796 117C 0015 0036             		move.b	#$15,$36(a0)
0001079C                            
0001079C                            Flame_Action:	; Routine 2
0001079C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000107A0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000107A2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000107A8 0868 0000 001C             		bchg	#0,obAnim(a0)
000107AE 6700                       		beq.s	loc_E57A
000107B0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000107C0                            
000107C0                            loc_E57A:
000107C0 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000107C6 6100 C132                  		bsr.w	AnimateSprite
000107CA 117C 0000 0020             		move.b	#0,obColType(a0)
000107D0 1028 0036                  		move.b	$36(a0),d0
000107D4 B028 001A                  		cmp.b	obFrame(a0),d0
000107D8 6600                       		bne.s	Flame_ChkDel
000107DA 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000107E0                            
000107E0                            Flame_ChkDel:
000107FE 6000 F046                  		bra.w	DisplaySprite
000107FE 6000 F046                  		bra.w	DisplaySprite
00010802                            		include	"_anim\Flamethrower.asm"
00010802                            ; ---------------------------------------------------------------------------
00010802                            ; Animation script - flamethrower (SBZ)
00010802                            ; ---------------------------------------------------------------------------
00010802 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010804 0000                       		dc.w @pipe2-Ani_Flame
00010806 0000                       		dc.w @valve1-Ani_Flame
00010808 0000                       		dc.w @valve2-Ani_Flame
0001080A 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010818 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010822 00                         		even
00010822 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010830 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0001083A 00                         		even
0001083A 00                         		even
0001083A                            Map_Flame:	include	"_maps\Flamethrower.asm"
0001083A                            ; ---------------------------------------------------------------------------
0001083A                            ; Sprite mappings - flame thrower (SBZ)
0001083A                            ; ---------------------------------------------------------------------------
0001083A                            Map_Flame_internal:
0001083A 0000                       		dc.w @pipe1-Map_Flame_internal
0001083C 0000                       		dc.w @pipe2-Map_Flame_internal
0001083E 0000                       		dc.w @pipe3-Map_Flame_internal
00010840 0000                       		dc.w @pipe4-Map_Flame_internal
00010842 0000                       		dc.w @pipe5-Map_Flame_internal
00010844 0000                       		dc.w @pipe6-Map_Flame_internal
00010846 0000                       		dc.w @pipe7-Map_Flame_internal
00010848 0000                       		dc.w @pipe8-Map_Flame_internal
0001084A 0000                       		dc.w @pipe9-Map_Flame_internal
0001084C 0000                       		dc.w @pipe10-Map_Flame_internal
0001084E 0000                       		dc.w @pipe11-Map_Flame_internal
00010850 0000                       		dc.w @valve1-Map_Flame_internal
00010852 0000                       		dc.w @valve2-Map_Flame_internal
00010854 0000                       		dc.w @valve3-Map_Flame_internal
00010856 0000                       		dc.w @valve4-Map_Flame_internal
00010858 0000                       		dc.w @valve5-Map_Flame_internal
0001085A 0000                       		dc.w @valve6-Map_Flame_internal
0001085C 0000                       		dc.w @valve7-Map_Flame_internal
0001085E 0000                       		dc.w @valve8-Map_Flame_internal
00010860 0000                       		dc.w @valve9-Map_Flame_internal
00010862 0000                       		dc.w @valve10-Map_Flame_internal
00010864 0000                       		dc.w @valve11-Map_Flame_internal
00010866 01                         @pipe1:		dc.b 1
00010867 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001086C 02                         @pipe2:		dc.b 2
0001086D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010872 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010877 02                         @pipe3:		dc.b 2
00010878 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001087D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010882 03                         @pipe4:		dc.b 3
00010883 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010888 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001088D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010892 03                         @pipe5:		dc.b 3
00010893 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010898 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001089D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108A2 04                         @pipe6:		dc.b 4
000108A3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108A8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108AD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108B2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108B7 04                         @pipe7:		dc.b 4
000108B8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000108BD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108C2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108CC 05                         @pipe8:		dc.b 5
000108CD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000108D2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000108D7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000108DC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000108E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000108E6 05                         @pipe9:		dc.b 5
000108E7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000108EC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000108F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000108F6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000108FB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010900 06                         @pipe10:	dc.b 6
00010901 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010906 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0001090B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010910 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010915 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001091A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001091F 06                         @pipe11:	dc.b 6
00010920 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010925 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001092A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001092F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010934 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010939 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001093E 01                         @valve1:	dc.b 1
0001093F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010944 02                         @valve2:	dc.b 2
00010945 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001094A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001094F 02                         @valve3:	dc.b 2
00010950 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010955 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001095A 03                         @valve4:	dc.b 3
0001095B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010960 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010965 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001096A 03                         @valve5:	dc.b 3
0001096B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010970 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010975 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001097A 04                         @valve6:	dc.b 4
0001097B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010980 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010985 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001098A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001098F 04                         @valve7:	dc.b 4
00010990 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010995 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001099A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001099F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109A4 05                         @valve8:	dc.b 5
000109A5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000109AA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109AF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109B4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109B9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109BE 05                         @valve9:	dc.b 5
000109BF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000109C4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109CE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109D3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109D8 06                         @valve10:	dc.b 6
000109D9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000109DE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000109E3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109E8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000109ED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000109F2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109F7 06                         @valve11:	dc.b 6
000109F8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000109FD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A02 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A07 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A0C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A11 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A16                            		even
00010A16                            		even
00010A16                            
00010A16                            		include	"_incObj\46 MZ Bricks.asm"
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010A16                            ; ---------------------------------------------------------------------------
00010A16                            
00010A16                            MarbleBrick:
00010A16 7000                       		moveq	#0,d0
00010A18 1028 0024                  		move.b	obRoutine(a0),d0
00010A1C 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010A20 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010A24                            ; ===========================================================================
00010A24 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010A26 0000                       		dc.w Brick_Action-Brick_Index
00010A28                            
00010A28 =00000030                  brick_origY:	equ $30
00010A28                            ; ===========================================================================
00010A28                            
00010A28                            Brick_Main:	; Routine 0
00010A28 5428 0024                  		addq.b	#2,obRoutine(a0)
00010A2C 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010A32 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010A38 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010A40 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010A46 117C 0004 0001             		move.b	#4,obRender(a0)
00010A4C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010A52 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010A58 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010A5E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010A64                            
00010A64                            Brick_Action:	; Routine 2
00010A64 4A28 0001                  		tst.b	obRender(a0)
00010A68 6A00                       		bpl.s	@chkdel
00010A6A 7000                       		moveq	#0,d0
00010A6C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010A70 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010A74 D040                       		add.w	d0,d0
00010A76 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010A7A 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010A7E 323C 001B                  		move.w	#$1B,d1
00010A82 343C 0010                  		move.w	#$10,d2
00010A86 363C 0011                  		move.w	#$11,d3
00010A8A 3828 0008                  		move.w	obX(a0),d4
00010A8E 6100 0000                  		bsr.w	SolidObject
00010A92                            
00010A92                            	@chkdel:
00010AB0 6000 ED94                  			bra.w	DisplaySprite
00010AB4                            ; ===========================================================================
00010AB4 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010AB6 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010AB8 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010ABA 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010ABC 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010ABE                            ; ===========================================================================
00010ABE                            
00010ABE                            Brick_Type00:
00010ABE 4E75                       		rts	
00010AC0                            ; ===========================================================================
00010AC0                            
00010AC0                            Brick_Type02:
00010AC0 3038 D008                  		move.w	(v_player+obX).w,d0
00010AC4 9068 0008                  		sub.w	obX(a0),d0
00010AC8 6400                       		bcc.s	loc_E888
00010ACA 4440                       		neg.w	d0
00010ACC                            
00010ACC                            loc_E888:
00010ACC 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010AD0 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010AD2 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010AD8                            
00010AD8                            Brick_Type01:
00010AD8 7000                       		moveq	#0,d0
00010ADA 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010ADE 0828 0003 0028             		btst	#3,obSubtype(a0)
00010AE4 6700                       		beq.s	loc_E8A8
00010AE6 4440                       		neg.w	d0
00010AE8 0640 0010                  		addi.w	#$10,d0
00010AEC                            
00010AEC                            loc_E8A8:
00010AEC 3228 0030                  		move.w	brick_origY(a0),d1
00010AF0 9240                       		sub.w	d0,d1
00010AF2 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010AF6 4E75                       		rts	
00010AF8                            ; ===========================================================================
00010AF8                            
00010AF8                            Brick_Type03:
00010AF8 6100 ED38                  		bsr.w	SpeedToPos
00010AFC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010B02 6100 0000                  		bsr.w	ObjFloorDist
00010B06 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010B08 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010B0C D368 000C                  		add.w	d1,obY(a0)
00010B10 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010B14 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B1A 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010B20 3011                       		move.w	(a1),d0
00010B22 0240 03FF                  		andi.w	#$3FF,d0
00010B26 0C40 016A                  			cmpi.w	#$16A,d0
00010B2A 6400                       		bcc.s	locret_E8EE
00010B2C 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010B32                            
00010B32                            locret_E8EE:
00010B32 4E75                       		rts	
00010B34                            ; ===========================================================================
00010B34                            
00010B34                            Brick_Type04:
00010B34 7000                       		moveq	#0,d0
00010B36 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010B3A E648                       		lsr.w	#3,d0
00010B3C 3228 0030                  		move.w	brick_origY(a0),d1
00010B40 9240                       		sub.w	d0,d1
00010B42 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010B46 4E75                       		rts	
00010B46 4E75                       		rts	
00010B48                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            Map_Brick_internal:
00010B48 0000                       		dc.w @brick-Map_Brick_internal
00010B4A 01                         @brick:		dc.b 1
00010B4B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010B50                            		even
00010B50                            		even
00010B50                            
00010B50                            		include	"_incObj\12 Light.asm"
00010B50                            ; ---------------------------------------------------------------------------
00010B50                            ; Object 12 - lamp (SYZ)
00010B50                            ; ---------------------------------------------------------------------------
00010B50                            
00010B50                            SpinningLight:
00010B50 7000                       		moveq	#0,d0
00010B52 1028 0024                  		move.b	obRoutine(a0),d0
00010B56 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010B5A 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010B5E                            ; ===========================================================================
00010B5E 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010B60 0000                       		dc.w Light_Animate-Light_Index
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            Light_Main:	; Routine 0
00010B62 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B66 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010B6E 317C 0000 0002             		move.w	#0,obGfx(a0)
00010B74 117C 0004 0001             		move.b	#4,obRender(a0)
00010B7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B80 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010B86                            
00010B86                            Light_Animate:	; Routine 2
00010B86 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010B8A 6A00                       		bpl.s	@chkdel
00010B8C 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010B92 5228 001A                  		addq.b	#1,obFrame(a0)
00010B96 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010B9C 6500                       		bcs.s	@chkdel
00010B9E 117C 0000 001A             		move.b	#0,obFrame(a0)
00010BA4                            
00010BA4                            	@chkdel:
00010BC2 6000 EC82                  		bra.w	DisplaySprite
00010BC2 6000 EC82                  		bra.w	DisplaySprite
00010BC6                            Map_Light	include	"_maps\Light.asm"
00010BC6                            ; --------------------------------------------------------------------------------
00010BC6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010BC6                            ; --------------------------------------------------------------------------------
00010BC6                            
00010BC6                            SME_FBl1X:	
00010BC6 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010BCA 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010BCE 05                         SME_FBl1X_8:	dc.b 5	
00010BCF E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010BD4 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010BD9 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010BDE F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010BE3 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010BE8 05                         SME_FBl1X_22:	dc.b 5	
00010BE9 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010BEE E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010BF3 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010BF8 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010BFD F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010C02 06                         SME_FBl1X_3C:	dc.b 6	
00010C03 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010C08 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010C0D E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010C12 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010C17 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010C1C F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010C21 05                         SME_FBl1X_5B:	dc.b 5	
00010C22 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010C27 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010C2C F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010C31 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010C36 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010C3C 00                         		even
00010C3C 00                         		even
00010C3C                            		include	"_incObj\47 Bumper.asm"
00010C3C                            ; ---------------------------------------------------------------------------
00010C3C                            ; Object 47 - pinball bumper (SYZ)
00010C3C                            ; ---------------------------------------------------------------------------
00010C3C                            
00010C3C                            Bumper:
00010C3C 7000                       		moveq	#0,d0
00010C3E 1028 0024                  		move.b	obRoutine(a0),d0
00010C42 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010C46 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010C4A                            ; ===========================================================================
00010C4A 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010C4C 0000                       		dc.w Bump_Hit-Bump_Index
00010C4E                            ; ===========================================================================
00010C4E                            
00010C4E                            Bump_Main:	; Routine 0
00010C4E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C52 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010C5A 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010C60 117C 0004 0001             		move.b	#4,obRender(a0)
00010C66 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C6C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010C72 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010C78                            
00010C78                            Bump_Hit:	; Routine 2
00010C78 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010C7C 6700 0000                  		beq.w	@display	; if not, branch
00010C80 4228 0021                  		clr.b	obColProp(a0)
00010C84 43F8 D000                  		lea	(v_player).w,a1
00010C88 3228 0008                  		move.w	obX(a0),d1
00010C8C 3428 000C                  		move.w	obY(a0),d2
00010C90 9269 0008                  		sub.w	obX(a1),d1
00010C94 9469 000C                  		sub.w	obY(a1),d2
00010C98 4EB9 0000 3CC4             		jsr	(CalcAngle).l
00010C9E 4EB9 0000 3A32             		jsr	(CalcSine).l
00010CA4 C3FC F900                  		muls.w	#-$700,d1
00010CA8 E081                       		asr.l	#8,d1
00010CAA 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010CAE C1FC F900                  		muls.w	#-$700,d0
00010CB2 E080                       		asr.l	#8,d0
00010CB4 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010CB8 08E9 0001 0022             		bset	#1,obStatus(a1)
00010CBE 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010CC4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010CCA 4229 003C                  		clr.b	$3C(a1)
00010CCE 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010CDE 45F8 FC00                  		lea	(v_objstate).w,a2
00010CE2 7000                       		moveq	#0,d0
00010CE4 1028 0023                  		move.b	obRespawnNo(a0),d0
00010CE8 6700                       		beq.s	@addscore
00010CEA 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010CF0 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010CF2 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010CF6                            
00010CF6                            	@addscore:
00010CF6 7001                       		moveq	#1,d0
00010CF8 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010CFE 6100 EFD2                  		bsr.w	FindFreeObj
00010D02 6600                       		bne.s	@display
00010D04 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010D08 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010D0E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010D14 137C 0004 001A             		move.b	#4,obFrame(a1)
00010D1A                            
00010D1A                            	@display:
00010D1A 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010D20 6100 BBD8                  		bsr.w	AnimateSprite
00010D40 6000 EB04                  		bra.w	DisplaySprite
00010D44                            ; ===========================================================================
00010D44                            
00010D44                            @resetcount:
00010D44 45F8 FC00                  		lea	(v_objstate).w,a2
00010D48 7000                       		moveq	#0,d0
00010D4A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D4E 6700                       		beq.s	@delete
00010D50 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D56                            
00010D56                            	@delete:
00010D56 6000 EB2E                  		bra.w	DeleteObject
00010D56 6000 EB2E                  		bra.w	DeleteObject
00010D5A                            		include	"_anim\Bumper.asm"
00010D5A                            ; ---------------------------------------------------------------------------
00010D5A                            ; Animation script - flamethrower (SBZ)
00010D5A                            ; ---------------------------------------------------------------------------
00010D5A 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010D5C 0000                       		dc.w byte_EAF8-Ani_Bump
00010D5E 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010D62 00                         		even
00010D62 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010D6A 00                         		even
00010D6A 00                         		even
00010D6A                            Map_Bump:	include	"_maps\Bumper.asm"
00010D6A                            ; ---------------------------------------------------------------------------
00010D6A                            ; Sprite mappings - pinball bumper (SYZ)
00010D6A                            ; ---------------------------------------------------------------------------
00010D6A                            Map_Bump_internal:
00010D6A 0000                       		dc.w @normal-Map_Bump_internal
00010D6C 0000                       		dc.w @bumped1-Map_Bump_internal
00010D6E 0000                       		dc.w @bumped2-Map_Bump_internal
00010D70 02                         @normal:	dc.b 2
00010D71 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010D76 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010D7B 02                         @bumped1:	dc.b 2
00010D7C F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010D81 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010D86 02                         @bumped2:	dc.b 2
00010D87 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010D8C F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010D92 00                         		even
00010D92 00                         		even
00010D92                            
00010D92                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010D92                            ; ---------------------------------------------------------------------------
00010D92                            ; Object 0D - signpost at the end of a level
00010D92                            ; ---------------------------------------------------------------------------
00010D92                            
00010D92                            Signpost:
00010D92 7000                       		moveq	#0,d0
00010D94 1028 0024                  		move.b	obRoutine(a0),d0
00010D98 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010D9C 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010DA0 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010DA6 6100 BB52                  		bsr.w	AnimateSprite
00010DAA 6100 EA9A                  		bsr.w	DisplaySprite
00010DCC 4E75                       		rts	
00010DCE                            ; ===========================================================================
00010DCE 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010DD0 0000                       		dc.w Sign_Touch-Sign_Index
00010DD2 0000                       		dc.w Sign_Spin-Sign_Index
00010DD4 0000                       		dc.w Sign_SonicRun-Sign_Index
00010DD6 0000                       		dc.w Sign_Exit-Sign_Index
00010DD8                            
00010DD8 =00000030                  spintime:	equ $30		; time for signpost to spin
00010DD8 =00000032                  sparkletime:	equ $32		; time between sparkles
00010DD8 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010DD8                            ; ===========================================================================
00010DD8                            
00010DD8                            Sign_Main:	; Routine 0
00010DD8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DDC 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010DE4 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010DEA 117C 0004 0001             		move.b	#4,obRender(a0)
00010DF0 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010DF6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010DFC                            
00010DFC                            Sign_Touch:	; Routine 2
00010DFC 3038 D008                  		move.w	(v_player+obX).w,d0
00010E00 9068 0008                  		sub.w	obX(a0),d0
00010E04 6500                       		bcs.s	@notouch
00010E06 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010E0A 6400                       		bcc.s	@notouch	; if not, branch
00010E0C 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010E1C 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010E20 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010E26 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E2A 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010E30                            
00010E30                            	@notouch:
00010E30 4E75                       		rts	
00010E32                            	
00010E32                            ; ===========================================================================
00010E32                            
00010E32                            Sign_Spin:	; Routine 4
00010E32 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010E36 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010E38 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010E3E 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010E42 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010E48 6600                       		bne.s	@chksparkle	; if not, branch
00010E4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E4E                            
00010E4E                            	@chksparkle:
00010E4E 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010E52 6A00                       		bpl.s	@fail		; if time remains, branch
00010E54 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010E5A 7000                       		moveq	#0,d0
00010E5C 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010E60 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010E64 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010E6A 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010E6E 6100 EE62                  		bsr.w	FindFreeObj
00010E72 6600                       		bne.s	@fail
00010E74 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010E78 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010E7E 101A                       		move.b	(a2)+,d0
00010E80 4880                       		ext.w	d0
00010E82 D068 0008                  		add.w	obX(a0),d0
00010E86 3340 0008                  		move.w	d0,obX(a1)
00010E8A 101A                       		move.b	(a2)+,d0
00010E8C 4880                       		ext.w	d0
00010E8E D068 000C                  		add.w	obY(a0),d0
00010E92 3340 000C                  		move.w	d0,obY(a1)
00010E96 237C 0000 BFA8 0004        		move.l	#Map_Ring,obMap(a1)
00010E9E 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010EA4 137C 0004 0001             		move.b	#4,obRender(a1)
00010EAA 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010EB0 137C 0008 0014             		move.b	#8,obActWid(a1)
00010EB6                            
00010EB6                            	@fail:
00010EB6 4E75                       		rts	
00010EB8                            ; ===========================================================================
00010EB8 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010EBA 0808                       		dc.b	8,   8
00010EBC F000                       		dc.b -$10,   0
00010EBE 18F8                       		dc.b  $18,  -8
00010EC0 00F8                       		dc.b	0,  -8
00010EC2 1000                       		dc.b  $10,   0
00010EC4 E808                       		dc.b -$18,   8
00010EC6 1810                       		dc.b  $18, $10
00010EC8                            ; ===========================================================================
00010EC8                            
00010EC8                            Sign_SonicRun:	; Routine 6
00010EC8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010ECC 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010ED0 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010ED6                            		
00010ED6                            
00010ED6                            	loc_EC86:
00010ED6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EDA                            
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            ; Subroutine to	set up bonuses at the end of an	act
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            
00010EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010EDA                            
00010EDA                            
00010EDA                            GotThroughAct:
00010EDA 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010EDE 6600                       		bne.s	locret_ECEE
00010EE0 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010EE6 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010EEA 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010EEE 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010EF2 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010EF8 7000                       		moveq	#plcid_TitleCard,d0
00010EFA 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010F00 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010F06 7000                       		moveq	#0,d0
00010F08 1038 FE23                  		move.b	(v_timemin).w,d0
00010F0C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010F10 7200                       		moveq	#0,d1
00010F12 1238 FE24                  		move.b	(v_timesec).w,d1
00010F16 D041                       		add.w	d1,d0		; add up your time
00010F18 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010F1C 7214                       		moveq	#$14,d1
00010F1E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010F20 6500                       		bcs.s	hastimebonus	; if not, branch
00010F22 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010F24                            
00010F24                            	hastimebonus:
00010F24 D040                       		add.w	d0,d0
00010F26 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010F2C 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010F30 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010F34 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010F42 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010F48                            
00010F48                            locret_ECEE:
00010F48 4E75                       		rts	
00010F4A                            
00010F4A                            ; End of function GotThroughAct
00010F4A                            
00010F4A                            ; ===========================================================================
00010F4A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010F5E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010F74                            ; ===========================================================================
00010F74                            
00010F74                            Sign_Exit:	; Routine 8
00010F74 4E75                       		rts	
00010F76                            
00010F76                            ; ---------------------------------------------------------------------------
00010F76                            ; Subroutine to	set up bonuses at the end of an	zone
00010F76                            ; ---------------------------------------------------------------------------
00010F76                            
00010F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010F76                            
00010F76                            
00010F76                            GotThroughAct1:
00010F76 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010F7A 6600                       		bne.s	locret_ECEE1
00010F7C 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010F82 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010F86 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010F8A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F8E 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010F94 7000                       		moveq	#plcid_TitleCard,d0
00010F96 4EB9 0000 171C             		jsr	(NewPLC).l	; load title card patterns
00010F9C 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010FA2 7000                       		moveq	#0,d0
00010FA4 1038 FE23                  		move.b	(v_timemin).w,d0
00010FA8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010FAC 7200                       		moveq	#0,d1
00010FAE 1238 FE24                  		move.b	(v_timesec).w,d1
00010FB2 D041                       		add.w	d1,d0		; add up your time
00010FB4 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010FB8 7214                       		moveq	#$14,d1
00010FBA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010FBC 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010FC0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010FC2                            
00010FC2                            	hastimebonus2:
00010FC2 D040                       		add.w	d0,d0
00010FC4 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010FCA 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010FCE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010FD2 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010FE0 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010FE6                            
00010FE6                            locret_ECEE1:
00010FE6 4E75                       		rts	
00010FE8                            
00010FE8                            ; End of function GotThroughAct		
00010FE8                            
00010FE8 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010FFC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010FFC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011012                            		include	"_anim\Signpost.asm"
00011012                            ; ---------------------------------------------------------------------------
00011012                            ; Animation script - signpost
00011012                            ; ---------------------------------------------------------------------------
00011012 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00011014 0000                       		dc.w @spin1-Ani_Sign
00011016 0000                       		dc.w @spin2-Ani_Sign
00011018 0000                       		dc.w @sonic-Ani_Sign
0001101A 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
0001101E 00                         		even
0001101E 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00011024 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0001102A 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
0001102E 00                         		even
0001102E 00                         		even
0001102E                            Map_Sign:	include	"_maps\Signpost.asm"
0001102E                            ; --------------------------------------------------------------------------------
0001102E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001102E                            ; --------------------------------------------------------------------------------
0001102E                            
0001102E                            SME_KvSue:	
0001102E 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011032 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011036 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00011038 04                         SME_KvSue_A:	dc.b 4	
00011039 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
0001103E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011043 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011048 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001104D 03                         SME_KvSue_1F:	dc.b 3	
0001104E F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011053 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00011058 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001105D 03                         SME_KvSue_2F:	dc.b 3	
0001105E F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011063 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00011068 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001106D 03                         SME_KvSue_3F:	dc.b 3	
0001106E F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00011073 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00011078 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
0001107D 04                         SME_KvSue_4F:	dc.b 4	
0001107E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00011083 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00011088 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001108D 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011092                            		even
00011092                            		even
00011092                            
00011092                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00011092                            ; ---------------------------------------------------------------------------
00011092                            ; Object 4C - lava geyser / lavafall producer (MZ)
00011092                            ; ---------------------------------------------------------------------------
00011092                            
00011092                            GeyserMaker:
00011092 7000                       		moveq	#0,d0
00011094 1028 0024                  		move.b	obRoutine(a0),d0
00011098 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
0001109C 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000110A0 6000 0000                  		bra.w	Geyser_ChkDel
000110A4                            ; ===========================================================================
000110A4 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000110A6 0000                       		dc.w GMake_Wait-GMake_Index
000110A8 0000                       		dc.w GMake_ChkType-GMake_Index
000110AA 0000                       		dc.w GMake_MakeLava-GMake_Index
000110AC 0000                       		dc.w GMake_Display-GMake_Index
000110AE 0000                       		dc.w GMake_Delete-GMake_Index
000110B0                            
000110B0 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000110B0 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000110B0 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000110B0                            ; ===========================================================================
000110B0                            
000110B0                            GMake_Main:	; Routine 0
000110B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000110B4 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000110BC 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
000110C2 117C 0004 0001             		move.b	#4,obRender(a0)
000110C8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000110CE 117C 0038 0014             		move.b	#$38,obActWid(a0)
000110D4 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
000110DA                            
000110DA                            GMake_Wait:	; Routine 2
000110DA 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
000110DE 6A00                       		bpl.s	@cancel		; if time remains, branch
000110E0                            
000110E0 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
000110E6 3038 D00C                  		move.w	(v_player+obY).w,d0
000110EA 3228 000C                  		move.w	obY(a0),d1
000110EE B041                       		cmp.w	d1,d0
000110F0 6400                       		bcc.s	@cancel
000110F2 0441 0170                  		subi.w	#$170,d1
000110F6 B041                       		cmp.w	d1,d0
000110F8 6500                       		bcs.s	@cancel
000110FA 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
000110FE                            
000110FE                            	@cancel:
000110FE 4E75                       		rts	
00011100                            ; ===========================================================================
00011100                            
00011100                            GMake_MakeLava:	; Routine 6
00011100 5428 0024                  		addq.b	#2,obRoutine(a0)
00011104 6100 EBE2                  		bsr.w	FindNextFreeObj
00011108 6600                       		bne.s	@fail
0001110A 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
0001110E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011114 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001111A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011120 2348 003C                  		move.l	a0,gmake_parent(a1)
00011124                            
00011124                            	@fail:
00011124 117C 0001 001C             		move.b	#1,obAnim(a0)
0001112A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0001112E 6700                       		beq.s	@isgeyser	; if yes, branch
00011130 117C 0004 001C             		move.b	#4,obAnim(a0)
00011136 6000                       		bra.s	GMake_Display
00011138                            ; ===========================================================================
00011138                            
00011138                            	@isgeyser:
00011138 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0001113C 08E9 0001 0022             		bset	#1,obStatus(a1)
00011142 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00011148 6000                       		bra.s	GMake_Display
0001114A                            ; ===========================================================================
0001114A                            
0001114A                            GMake_ChkType:	; Routine 4
0001114A 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0001114E 6700                       		beq.s	GMake_Display	; if yes, branch
00011150 5428 0024                  		addq.b	#2,obRoutine(a0)
00011154 4E75                       		rts	
00011156                            ; ===========================================================================
00011156                            
00011156                            GMake_Display:	; Routine 8
00011156 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001115C 6100 B79C                  		bsr.w	AnimateSprite
00011160 6100 E6E4                  		bsr.w	DisplaySprite
00011164 4E75                       		rts	
00011166                            ; ===========================================================================
00011166                            
00011166                            GMake_Delete:	; Routine $A
00011166 117C 0000 001C             		move.b	#0,obAnim(a0)
0001116C 117C 0002 0024             		move.b	#2,obRoutine(a0)
00011172 4A28 0028                  		tst.b	obSubtype(a0)
00011176 6700 E70E                  		beq.w	DeleteObject
0001117A 4E75                       		rts	
0001117C                            
0001117C                            
0001117C                            ; ---------------------------------------------------------------------------
0001117C                            ; Object 4D - lava geyser / lavafall (MZ)
0001117C                            ; ---------------------------------------------------------------------------
0001117C                            
0001117C                            LavaGeyser:
0001117C 7000                       		moveq	#0,d0
0001117E 1028 0024                  		move.b	obRoutine(a0),d0
00011182 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00011186 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0001118A 6000 E6BA                  		bra.w	DisplaySprite
0001118E                            ; ===========================================================================
0001118E 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00011190 0000                       		dc.w Geyser_Action-Geyser_Index
00011192 0000                       		dc.w loc_EFFC-Geyser_Index
00011194 0000                       		dc.w Geyser_Delete-Geyser_Index
00011196                            
00011196 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0001119A                            ; ===========================================================================
0001119A                            
0001119A                            Geyser_Main:	; Routine 0
0001119A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001119E 3168 000C 0030             		move.w	obY(a0),$30(a0)
000111A4 4A28 0028                  		tst.b	obSubtype(a0)
000111A8 6700                       		beq.s	@isgeyser
000111AA 0468 0250 000C             		subi.w	#$250,obY(a0)
000111B0                            
000111B0                            	@isgeyser:
000111B0 7000                       		moveq	#0,d0
000111B2 1028 0028                  		move.b	obSubtype(a0),d0
000111B6 D040                       		add.w	d0,d0
000111B8 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000111BE 2248                       		movea.l	a0,a1
000111C0 7201                       		moveq	#1,d1
000111C2 6100                       		bsr.s	@makelava
000111C4 6000                       		bra.s	@activate
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            	@loop:
000111C6 6100 EB20                  		bsr.w	FindNextFreeObj
000111CA 6600                       		bne.s	@fail
000111CC                            
000111CC                            @makelava:
000111CC 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
000111D0 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
000111D8 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
000111DE 137C 0004 0001             		move.b	#4,obRender(a1)
000111E4 137C 0020 0014             		move.b	#$20,obActWid(a1)
000111EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000111F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000111F6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000111FC 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011202 137C 0005 001C             		move.b	#5,obAnim(a1)
00011208 4A28 0028                  		tst.b	obSubtype(a0)
0001120C 6700                       		beq.s	@fail
0001120E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011214                            
00011214                            	@fail:
00011214 51C9 FFB0                  		dbf	d1,@loop
00011218 4E75                       		rts	
0001121A                            ; ===========================================================================
0001121A                            
0001121A                            @activate:
0001121A 0669 0060 000C             		addi.w	#$60,obY(a1)
00011220 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011226 0669 0060 0030             		addi.w	#$60,$30(a1)
0001122C 137C 0093 0020             		move.b	#$93,obColType(a1)
00011232 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011238 08E9 0004 0001             		bset	#4,obRender(a1)
0001123E 5829 0024                  		addq.b	#4,obRoutine(a1)
00011242 2348 003C                  		move.l	a0,$3C(a1)
00011246 4A28 0028                  		tst.b	obSubtype(a0)
0001124A 6700                       		beq.s	@sound
0001124C 7200                       		moveq	#0,d1
0001124E 6100 FF76                  		bsr.w	@loop
00011252 5429 0024                  		addq.b	#2,obRoutine(a1)
00011256 08E9 0004 0002             		bset	#4,obGfx(a1)
0001125C 0669 0100 000C             		addi.w	#$100,obY(a1)
00011262 337C 0000 0018             		move.w	#0,obPriority(a1)
00011268 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001126E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00011274 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001127A                            
0001127A                            	@sound:
00011284                            
00011284                            Geyser_Action:	; Routine 2
00011284 7000                       		moveq	#0,d0
00011286 1028 0028                  		move.b	obSubtype(a0),d0
0001128A D040                       		add.w	d0,d0
0001128C 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00011290 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00011294 6100 E59C                  		bsr.w	SpeedToPos
00011298 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0001129E 6100 B65A                  		bsr.w	AnimateSprite
000112A2                            
000112A2                            Geyser_ChkDel:
000112C0 4E75                       		rts	
000112C2                            ; ===========================================================================
000112C2 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000112C4 0000                       		dc.w Geyser_Type01-Geyser_Types
000112C6                            ; ===========================================================================
000112C6                            
000112C6                            Geyser_Type00:
000112C6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000112CC 3028 0030                  		move.w	$30(a0),d0
000112D0 B068 000C                  		cmp.w	obY(a0),d0
000112D4 6400                       		bcc.s	locret_EFDA
000112D6 5828 0024                  		addq.b	#4,obRoutine(a0)
000112DA 2268 003C                  		movea.l	$3C(a0),a1
000112DE 137C 0003 001C             		move.b	#3,obAnim(a1)
000112E4                            
000112E4                            locret_EFDA:
000112E4 4E75                       		rts	
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            Geyser_Type01:
000112E6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
000112EC 3028 0030                  		move.w	$30(a0),d0
000112F0 B068 000C                  		cmp.w	obY(a0),d0
000112F4 6400                       		bcc.s	locret_EFFA
000112F6 5828 0024                  		addq.b	#4,obRoutine(a0)
000112FA 2268 003C                  		movea.l	$3C(a0),a1
000112FE 137C 0001 001C             		move.b	#1,obAnim(a1)
00011304                            
00011304                            locret_EFFA:
00011304 4E75                       		rts	
00011306                            ; ===========================================================================
00011306                            
00011306                            loc_EFFC:	; Routine 4
00011306 2268 003C                  		movea.l	$3C(a0),a1
0001130A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011310 6700 0000                  		beq.w	Geyser_Delete
00011314 3029 000C                  		move.w	obY(a1),d0
00011318 0640 0060                  		addi.w	#$60,d0
0001131C 3140 000C                  		move.w	d0,obY(a0)
00011320 9068 0030                  		sub.w	$30(a0),d0
00011324 4440                       		neg.w	d0
00011326 7208                       		moveq	#8,d1
00011328 0C40 0040                  		cmpi.w	#$40,d0
0001132C 6C00                       		bge.s	loc_F026
0001132E 720B                       		moveq	#$B,d1
00011330                            
00011330                            loc_F026:
00011330 0C40 0080                  		cmpi.w	#$80,d0
00011334 6F00                       		ble.s	loc_F02E
00011336 720E                       		moveq	#$E,d1
00011338                            
00011338                            loc_F02E:
00011338 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001133C 6A00                       		bpl.s	loc_F04C
0001133E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011344 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011348 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0001134E 6500                       		bcs.s	loc_F04C
00011350 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011356                            
00011356                            loc_F04C:
00011356 1028 001B                  		move.b	obAniFrame(a0),d0
0001135A D001                       		add.b	d1,d0
0001135C 1140 001A                  		move.b	d0,obFrame(a0)
00011360 6000 FF40                  		bra.w	Geyser_ChkDel
00011364                            ; ===========================================================================
00011364                            
00011364                            Geyser_Delete:	; Routine 6
00011364 6000 E520                  		bra.w	DeleteObject
00011364 6000 E520                  		bra.w	DeleteObject
00011368                            		include	"_incObj\54 Lava Tag.asm"
00011368                            ; ---------------------------------------------------------------------------
00011368                            ; Object 54 - invisible	lava tag (MZ)
00011368                            ; ---------------------------------------------------------------------------
00011368                            
00011368                            LavaTag:
00011368 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
0001136E 6E00 0000                  		bgt	WaterTag	;TIS
00011372 7000                       		moveq	#0,d0
00011374 1028 0024                  		move.b	obRoutine(a0),d0
00011378 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0001137C 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
00011380                            ; ===========================================================================
00011380 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
00011382 0000                       		dc.w LTag_ChkDel-LTag_Index
00011384                            
00011384 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011388 00                         		even
00011388                            ; ===========================================================================
00011388                            
00011388                            LTag_Main:	; Routine 0
00011388 5428 0024                  		addq.b	#2,obRoutine(a0)
0001138C 7000                       		moveq	#0,d0
0001138E 1028 0028                  		move.b	obSubtype(a0),d0
00011392 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
00011398 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000113A0 117C 0084 0001             		move.b	#$84,obRender(a0)
000113A6                            
000113A6                            LTag_ChkDel:	; Routine 2
000113A6 3028 0008                  		move.w	obX(a0),d0
000113AA 0240 FF80                  		andi.w	#$FF80,d0
000113AE 3238 F700                  		move.w	(v_screenposx).w,d1
000113B2 0441 0080                  		subi.w	#$80,d1
000113B6 0241 FF80                  		andi.w	#$FF80,d1
000113BA 9041                       		sub.w	d1,d0
000113BC 6B00 E4C8                  		bmi.w	DeleteObject
000113C0 0C40 0280                  		cmpi.w	#$280,d0
000113C4 6200 E4C0                  		bhi.w	DeleteObject
000113C8 4E75                       		rts
000113CA                            
000113CA                            
000113CA                            ; ---------------------------------------------------------------------------
000113CA                            ; Object 54a - invisible	water tag (MZ) - TIS
000113CA                            ; ---------------------------------------------------------------------------
000113CA                            
000113CA                            WaterTag:	
000113CA 7000                       		moveq	#0,d0
000113CC 1028 0024                  		move.b	obRoutine(a0),d0
000113D0 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000113D4 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000113D8                            ; ===========================================================================
000113D8 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000113DA 0000                       		dc.w WTag_ChkDel-WTag_Index
000113DC                            
000113DC 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000113E0 00                         		even
000113E0                            ; ===========================================================================
000113E0                            
000113E0                            
000113E0                            WTag_Main:	; Routine 0
000113E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000113E4 7000                       		moveq	#0,d0
000113E6                            		;move.b	obSubtype(a0),d0
000113E6                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000113E6 0400 00F0                  		sub.b	#$F0,d0
000113EA 1178 0096 0020             		move.b	$96,obColType(a0)							
000113F0                            		;move.l	#Map_LTag,obMap(a0)
000113F0                            		;move.b	#$84,obRender(a0)
000113F0                            
000113F0                            WTag_ChkDel:	; Routine 2
000113F0 3028 0008                  		move.w	obX(a0),d0
000113F4 0240 FF80                  		andi.w	#$FF80,d0
000113F8 3238 F700                  		move.w	(v_screenposx).w,d1
000113FC 0441 0080                  		subi.w	#$80,d1
00011400 0241 FF80                  		andi.w	#$FF80,d1
00011404 9041                       		sub.w	d1,d0
00011406 6B00 E47E                  		bmi.w	DeleteObject
0001140A 0C40 0280                  		cmpi.w	#$280,d0
0001140E 6200 E476                  		bhi.w	DeleteObject
00011412 4E75                       		rts
00011414                            
00011414                            
00011414                            Map_LTag:	include	"_maps\Lava Tag.asm"
00011414                            ; ---------------------------------------------------------------------------
00011414                            ; Sprite mappings - invisible lava tag (MZ)
00011414                            ; ---------------------------------------------------------------------------
00011414                            Map_LTag_internal:
00011414 0000                       		dc.w @0-Map_LTag_internal
00011416 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011418 00                         		even
00011418 00                         		even
00011418                            		include	"_anim\Lava Geyser.asm"
00011418                            ; ---------------------------------------------------------------------------
00011418                            ; Animation script - geyser of lava (MZ)
00011418                            ; ---------------------------------------------------------------------------
00011418 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0001141A 0000                       		dc.w @bubble2-Ani_Geyser
0001141C 0000                       		dc.w @end-Ani_Geyser
0001141E 0000                       		dc.w @bubble3-Ani_Geyser
00011420 0000                       		dc.w @blank-Ani_Geyser
00011422 0000                       		dc.w @bubble4-Ani_Geyser
00011424 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0001142E 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011432 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011436 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0001143E 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011442 00                         		even
00011442 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011446                            		even
00011446                            		even
00011446                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011446                            ; ---------------------------------------------------------------------------
00011446                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011446                            ; ---------------------------------------------------------------------------
00011446                            Map_Geyser_internal:
00011446 0000                       		dc.w @bubble1-Map_Geyser_internal
00011448 0000                       		dc.w @bubble2-Map_Geyser_internal
0001144A 0000                       		dc.w @bubble3-Map_Geyser_internal
0001144C 0000                       		dc.w @bubble4-Map_Geyser_internal
0001144E 0000                       		dc.w @bubble5-Map_Geyser_internal
00011450 0000                       		dc.w @bubble6-Map_Geyser_internal
00011452 0000                       		dc.w @end1-Map_Geyser_internal
00011454 0000                       		dc.w @end2-Map_Geyser_internal
00011456 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011458 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0001145A 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0001145C 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0001145E 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011460 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011462 0000                       		dc.w @longcolumn1-Map_Geyser_internal
00011464 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011466 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011468 0000                       		dc.w @bubble7-Map_Geyser_internal
0001146A 0000                       		dc.w @bubble8-Map_Geyser_internal
0001146C 0000                       		dc.w @blank-Map_Geyser_internal
0001146E 02                         @bubble1:	dc.b 2
0001146F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00011474 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011479 02                         @bubble2:	dc.b 2
0001147A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0001147F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00011484 04                         @bubble3:	dc.b 4
00011485 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001148A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001148F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011494 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00011499 04                         @bubble4:	dc.b 4
0001149A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001149F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000114A4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000114A9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000114AE 06                         @bubble5:	dc.b 6
000114AF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000114B4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000114B9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000114BE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000114C3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000114C8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000114CD 06                         @bubble6:	dc.b 6
000114CE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000114D3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000114D8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000114DD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000114E2 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000114E7 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000114EC 02                         @end1:		dc.b 2
000114ED E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000114F2 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
000114F7 02                         @end2:		dc.b 2
000114F8 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
000114FD E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011502 0A                         @medcolumn1:	dc.b $A
00011503 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011508 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001150D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011512 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011517 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001151C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011521 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011526 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001152B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011530 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011535 0A                         @medcolumn2:	dc.b $A
00011536 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001153B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011540 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011545 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001154A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001154F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011554 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011559 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001155E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011563 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011568 0A                         @medcolumn3:	dc.b $A
00011569 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001156E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011573 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011578 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001157D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011582 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011587 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0001158C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00011591 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011596 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001159B 06                         @shortcolumn1:	dc.b 6
0001159C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115A1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000115A6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000115AB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000115B0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000115B5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000115BA 06                         @shortcolumn2:	dc.b 6
000115BB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000115C0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000115C5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000115CA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000115CF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000115D4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000115D9 06                         @shortcolumn3:	dc.b 6
000115DA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000115DF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000115E4 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000115E9 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000115EE D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000115F3 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000115F8 10                         @longcolumn1:	dc.b $10
000115F9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000115FE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011603 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011608 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001160D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011612 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011617 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001161C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011621 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011626 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001162B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011630 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00011635 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001163A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001163F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00011644 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011649 10                         @longcolumn2:	dc.b $10
0001164A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001164F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011654 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011659 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001165E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011663 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011668 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001166D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011672 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011677 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001167C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00011681 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011686 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0001168B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00011690 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00011695 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0001169A 10                         @longcolumn3:	dc.b $10
0001169B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116A0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116A5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116AA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116AF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116B4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116B9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116BE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116C3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116C8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116CD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000116D2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000116D7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000116DC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000116E1 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000116E6 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000116EB 06                         @bubble7:	dc.b 6
000116EC E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000116F1 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
000116F6 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
000116FB E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011700 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00011705 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001170A 06                         @bubble8:	dc.b 6
0001170B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011710 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00011715 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001171A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001171F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00011724 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011729 00                         @blank:	dc.b 0
0001172A                            		even
0001172A                            		even
0001172A                            
0001172A                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0001172A                            ; ---------------------------------------------------------------------------
0001172A                            ; Object 40 - Moto Bug enemy (GHZ)
0001172A                            ; ---------------------------------------------------------------------------
0001172A                            
0001172A                            MotoBug:
0001172A 7000                       		moveq	#0,d0
0001172C 1028 0024                  		move.b	obRoutine(a0),d0
00011730 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
00011734 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011738                            ; ===========================================================================
00011738 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0001173A 0000                       		dc.w Moto_Action-Moto_Index
0001173C 0000                       		dc.w Moto_Animate-Moto_Index
0001173E 0000                       		dc.w Moto_Delete-Moto_Index
00011740                            ; ===========================================================================
00011740                            
00011740                            Moto_Main:	; Routine 0
00011740 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011748 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0001174E 117C 0004 0001             		move.b	#4,obRender(a0)
00011754 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001175A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011760 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
00011764 6600                       		bne.s	@smoke		; if yes, branch
00011766 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001176C 117C 0008 0017             		move.b	#8,obWidth(a0)
00011772 117C 000C 0020             		move.b	#$C,obColType(a0)
00011778 6100 E080                  		bsr.w	ObjectFall
0001177C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011782 4A41                       		tst.w	d1
00011784 6A00                       		bpl.s	@notonfloor
00011786 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001178A 317C 0000 0012             		move.w	#0,obVelY(a0)
00011790 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
00011794 0868 0000 0022             		bchg	#0,obStatus(a0)
0001179A                            
0001179A                            	@notonfloor:
0001179A 4E75                       		rts	
0001179C                            ; ===========================================================================
0001179C                            
0001179C                            @smoke:
0001179C 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000117A0 6000 0000                  		bra.w	Moto_Animate
000117A4                            ; ===========================================================================
000117A4                            
000117A4                            Moto_Action:	; Routine 2
000117A4 7000                       		moveq	#0,d0
000117A6 1028 0025                  		move.b	ob2ndRout(a0),d0
000117AA 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000117AE 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000117B2 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000117B8 6100 B140                  		bsr.w	AnimateSprite
000117BC                            
000117BC                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000117BC                            ; ---------------------------------------------------------------------------
000117BC                            ; Subroutine to remember whether an object is destroyed/collected
000117BC                            ; ---------------------------------------------------------------------------
000117BC                            
000117BC                            RememberState:
000117DA 6000 E06A                  		bra.w	DisplaySprite
000117DE                            
000117DE                            	@offscreen:
000117DE 45F8 FC00                  		lea	(v_objstate).w,a2
000117E2 7000                       		moveq	#0,d0
000117E4 1028 0023                  		move.b	obRespawnNo(a0),d0
000117E8 6700                       		beq.s	@delete
000117EA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000117F0                            
000117F0                            	@delete:
000117F0 6000 E094                  		bra.w	DeleteObject
000117F0 6000 E094                  		bra.w	DeleteObject
000117F4                            
000117F4                            ; ===========================================================================
000117F4 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
000117F6 0000                       		dc.w @findfloor-Moto_ActIndex
000117F8                            
000117F8 =00000030                  @time:		equ $30
000117F8 =00000033                  @smokedelay:	equ $33
000117F8                            ; ===========================================================================
000117F8                            
000117F8                            @move:
000117F8 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
000117FC 6A00                       		bpl.s	@wait		; if time remains, branch
000117FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011802 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011808 117C 0001 001C             		move.b	#1,obAnim(a0)
0001180E 0868 0000 0022             		bchg	#0,obStatus(a0)
00011814 6600                       		bne.s	@wait
00011816 4468 0010                  		neg.w	obVelX(a0)	; change direction
0001181A                            
0001181A                            	@wait:
0001181A 4E75                       		rts	
0001181C                            ; ===========================================================================
0001181C                            
0001181C                            @findfloor:
0001181C 6100 E014                  		bsr.w	SpeedToPos
00011820 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011826 0C41 FFF8                  		cmpi.w	#-8,d1
0001182A 6D00                       		blt.s	@pause
0001182C 0C41 000C                  		cmpi.w	#$C,d1
00011830 6C00                       		bge.s	@pause
00011832 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011836 5328 0033                  		subq.b	#1,@smokedelay(a0)
0001183A 6A00                       		bpl.s	@nosmoke
0001183C 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011842 6100 E48E                  		bsr.w	FindFreeObj
00011846 6600                       		bne.s	@nosmoke
00011848 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0001184C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011852 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011858 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001185E 137C 0002 001C             		move.b	#2,obAnim(a1)
00011864                            
00011864                            	@nosmoke:
00011864 4E75                       		rts	
00011866                            
00011866                            @pause:
00011866 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001186A 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011870 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011876 117C 0000 001C             		move.b	#0,obAnim(a0)
0001187C 4E75                       		rts	
0001187E                            ; ===========================================================================
0001187E                            
0001187E                            Moto_Animate:	; Routine 4
0001187E 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011884 6100 B074                  		bsr.w	AnimateSprite
00011888 6000 DFBC                  		bra.w	DisplaySprite
0001188C                            ; ===========================================================================
0001188C                            
0001188C                            Moto_Delete:	; Routine 6
0001188C 6000 DFF8                  		bra.w	DeleteObject
0001188C 6000 DFF8                  		bra.w	DeleteObject
00011890                            		include	"_anim\Moto Bug.asm"
00011890                            ; ---------------------------------------------------------------------------
00011890                            ; Animation script - Motobug enemy
00011890                            ; ---------------------------------------------------------------------------
00011890 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011892 0000                       		dc.w @walk-Ani_Moto
00011894 0000                       		dc.w @smoke-Ani_Moto
00011896                            
00011896 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0001189A 00                         		even
0001189A 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000118A0 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000118AE 00                         		even
000118AE 00                         		even
000118AE                            Map_Moto:	include	"_maps\Moto Bug.asm"
000118AE                            ; --------------------------------------------------------------------------------
000118AE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000118AE                            ; --------------------------------------------------------------------------------
000118AE                            
000118AE                            SME_TTY9T:	
000118AE 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000118B2 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000118B6 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000118BA 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000118BC 04                         SME_TTY9T_E:	dc.b 4	
000118BD F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000118C2 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000118C7 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000118CC 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000118D1 04                         SME_TTY9T_23:	dc.b 4	
000118D2 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000118D7 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000118DC F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000118E1 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000118E6 05                         SME_TTY9T_38:	dc.b 5	
000118E7 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000118EC 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000118F1 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000118F6 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
000118FB 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011900 01                         SME_TTY9T_52:	dc.b 1	
00011901 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011906 01                         SME_TTY9T_58:	dc.b 1	
00011907 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
0001190C 01                         SME_TTY9T_5E:	dc.b 1	
0001190D FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011912 00                         SME_TTY9T_64:	dc.b 0	
00011914 00                         		even
00011914 00                         		even
00011914                            		include	"_incObj\4F.asm"
00011914                            ; ---------------------------------------------------------------------------
00011914                            ; Object 4F - Splats
00011914                            ; ---------------------------------------------------------------------------
00011914                            
00011914                            Obj4F:
00011914 7000                                       moveq   #0,d0
00011916 1028 0024                                  move.b  $24(a0),d0
0001191A 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
0001191E 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011922                            ; ---------------------------------------------------------------------------
00011922 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011924 0000                                       dc.w loc_D246-ObjSplats_Index
00011926 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011928 0000                                       dc.w loc_D2C8-ObjSplats_Index
0001192A                            ; ---------------------------------------------------------------------------
0001192A                            
0001192A                            ObjSplats_Init:
0001192A 5428 0024                                  addq.b  #2,$24(a0)
0001192E 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011936 317C 24E4 0002                             move.w  #$24E4,2(a0)
0001193C 117C 0004 0001                             move.b  #4,1(a0)
00011942 117C 0004 0014                             move.b  #4,obActWid(a0)
00011948 317C 0200 0018             				move.w	#$200,obPriority(a0)
0001194E 117C 0014 0016                             move.b  #$14,$16(a0)
00011954 117C 0002 0020                             move.b  #2,$20(a0)
0001195A 4A28 0028                                  tst.b   $28(a0)
0001195E 6700                                       beq.s   loc_D246
00011960 343C 0300                                  move.w  #$300,d2
00011964 6000                                       bra.s   ObjSplats_FaceRight
00011966                            ; ---------------------------------------------------------------------------
00011966                            
00011966                            loc_D246:
00011966 343C 00E0                                  move.w  #$E0,d2
0001196A                            
0001196A                            ObjSplats_FaceRight:
0001196A 323C 0100                                  move.w  #$100,d1
0001196E 08E8 0000 0001                             bset    #0,1(a0)
00011974 3038 D008                                  move.w  ($FFFFD008).w,d0
00011978 9068 0008                                  sub.w   8(a0),d0
0001197C 6400                                       bcc.s   ObjSplats_Move
0001197E 4440                                       neg.w   d0
00011980 4441                                       neg.w   d1
00011982 08A8 0000 0001                             bclr    #0,1(a0)
00011988                            
00011988                            ObjSplats_Move:
00011988 B042                                       cmp.w   d2,d0
0001198A 6400                                       bcc.s   ObjSplats_Bounce
0001198C 3141 0010                                  move.w  d1,$10(a0)
00011990 5428 0024                                  addq.b  #2,$24(a0)
00011994                            
00011994                            ObjSplats_Bounce:
00011994 6100 DE64                                  bsr.w   ObjectFall
00011998 117C 0001 001A                             move.b  #1,$1A(a0)
0001199E 4A68 0012                                  tst.w   $12(a0)
000119A2 6B00                                       bmi.s   ObjSplats_Turn
000119A4 117C 0000 001A                             move.b  #0,$1A(a0)
000119AA 6100 0000                                  bsr.w   ObjFloorDist
000119AE 4A41                                       tst.w   d1
000119B0 6A00                                       bpl.s   ObjSplats_Turn
000119B2 3011                                       move.w  (a1),d0
000119B4 0240 03FF                                  andi.w  #$3FF,d0
000119B8 0C40 02D2                                  cmpi.w  #$2D2,d0
000119BC 6500                                       bcs.s   ObjSplats_Fall
000119BE 5428 0024                                  addq.b  #2,$24(a0)
000119C2 6000                                       bra.s   ObjSplats_Turn
000119C4                            ; ---------------------------------------------------------------------------
000119C4                            
000119C4                            ObjSplats_Fall:
000119C4 D368 000C                                  add.w   d1,$C(a0)
000119C8 317C FC00 0012                             move.w  #$FC00,$12(a0)
000119CE                            
000119CE                            ObjSplats_Turn:
000119CE 6100 0000                                  bsr.w   Yad_ChkWall
000119D2 6700                                       beq.s   loc_D2C4
000119D4 4468 0010                                  neg.w   $10(a0)
000119D8 0868 0000 0001                             bchg    #0,1(a0)
000119DE 0868 0000 0022                             bchg    #0,$22(a0)
000119E4                            
000119E4                            loc_D2C4:
000119E4 6000 FDD6                                  bra.w   RememberState
000119E8                            ; ---------------------------------------------------------------------------
000119E8                            
000119E8                            loc_D2C8:
000119E8 6100 DE10                                  bsr.w   ObjectFall
000119EC 6100 DE58                                  bsr.w   DisplaySprite
000119F0 4A28 0001                                  tst.b   1(a0)
000119F4 6A00 DE90                                  bpl.w   DeleteObject
000119F8 4E75                                       rts
000119F8 4E75                                       rts
000119FA                            Map_Splats:	include	"_maps\Splats.asm"
000119FA 0000                       Map_Splats_internal:     dc.w unk_D310-*
000119FC 0000                                       dc.w unk_D31B-Map_Splats_internal
000119FE 02                         unk_D310:       dc.b   2
000119FF EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011A09 02                         unk_D31B:       dc.b   2
00011A0A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011A0A EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011A14                            
00011A14                            		include	"_incObj\50 Yadrin.asm"
00011A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011A14                            
00011A14                            
00011A14                            Yad_ChkWall:
00011A14 3038 FE04                  		move.w	(v_framecount).w,d0
00011A18 D047                       		add.w	d7,d0
00011A1A 0240 0003                  		andi.w	#3,d0
00011A1E 6600                       		bne.s	loc_F836
00011A20 7600                       		moveq	#0,d3
00011A22 1628 0014                  		move.b	obActWid(a0),d3
00011A26 4A68 0010                  		tst.w	obVelX(a0)
00011A2A 6B00                       		bmi.s	loc_F82C
00011A2C 6100 0000                  		bsr.w	ObjHitWallRight
00011A30 4A41                       		tst.w	d1
00011A32 6A00                       		bpl.s	loc_F836
00011A34                            
00011A34                            loc_F828:
00011A34 7001                       		moveq	#1,d0
00011A36 4E75                       		rts	
00011A38                            ; ===========================================================================
00011A38                            
00011A38                            loc_F82C:
00011A38 4643                       		not.w	d3
00011A3A 6100 0000                  		bsr.w	ObjHitWallLeft
00011A3E 4A41                       		tst.w	d1
00011A40 6BF2                       		bmi.s	loc_F828
00011A42                            
00011A42                            loc_F836:
00011A42 7000                       		moveq	#0,d0
00011A44 4E75                       		rts	
00011A46                            ; End of function Yad_ChkWall
00011A46                            
00011A46                            ; ===========================================================================
00011A46                            ; ---------------------------------------------------------------------------
00011A46                            ; Object 50 - Yadrin enemy (SYZ)
00011A46                            ; ---------------------------------------------------------------------------
00011A46                            
00011A46                            Yadrin:
00011A46 7000                       		moveq	#0,d0
00011A48 1028 0024                  		move.b	obRoutine(a0),d0
00011A4C 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011A50 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011A54                            ; ===========================================================================
00011A54 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011A56 0000                       		dc.w Yad_Action-Yad_Index
00011A58                            
00011A58 =00000030                  yad_timedelay:	equ $30
00011A58                            ; ===========================================================================
00011A58                            
00011A58                            Yad_Main:	; Routine 0
00011A58 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011A60 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011A66 117C 0004 0001             		move.b	#4,obRender(a0)
00011A6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011A72 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011A78 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011A7E 117C 0008 0017             		move.b	#8,obWidth(a0)
00011A84 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011A8A 6100 DD6E                  		bsr.w	ObjectFall
00011A8E 6100 0000                  		bsr.w	ObjFloorDist
00011A92 4A41                       		tst.w	d1
00011A94 6A00                       		bpl.s	locret_F89E
00011A96 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011A9A 317C 0000 0012             		move.w	#0,obVelY(a0)
00011AA0 5428 0024                  		addq.b	#2,obRoutine(a0)
00011AA4 0868 0000 0022             		bchg	#0,obStatus(a0)
00011AAA                            
00011AAA                            	locret_F89E:
00011AAA 4E75                       		rts	
00011AAC                            ; ===========================================================================
00011AAC                            
00011AAC                            Yad_Action:	; Routine 2
00011AAC 7000                       		moveq	#0,d0
00011AAE 1028 0025                  		move.b	ob2ndRout(a0),d0
00011AB2 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011AB6 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011ABA 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011AC0 6100 AE38                  		bsr.w	AnimateSprite
00011AC4 6000 FCF6                  		bra.w	RememberState
00011AC8                            ; ===========================================================================
00011AC8 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011ACA 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011ACC                            ; ===========================================================================
00011ACC                            
00011ACC                            Yad_Move:
00011ACC 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011AD0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011AD2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011AD6 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011ADC 117C 0001 001C             		move.b	#1,obAnim(a0)
00011AE2 0868 0000 0022             		bchg	#0,obStatus(a0)
00011AE8 6600                       		bne.s	locret_F8E2
00011AEA 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011AEE                            
00011AEE                            	locret_F8E2:
00011AEE 4E75                       		rts	
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            Yad_FixToFloor:
00011AF0 6100 DD40                  		bsr.w	SpeedToPos
00011AF4 6100 0000                  		bsr.w	ObjFloorDist
00011AF8 0C41 FFF8                  		cmpi.w	#-8,d1
00011AFC 6D00                       		blt.s	Yad_Pause
00011AFE 0C41 000C                  		cmpi.w	#$C,d1
00011B02 6C00                       		bge.s	Yad_Pause
00011B04 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011B08 6100 FF0A                  		bsr.w	Yad_ChkWall
00011B0C 6600                       		bne.s	Yad_Pause
00011B0E 4E75                       		rts	
00011B10                            ; ===========================================================================
00011B10                            
00011B10                            Yad_Pause:
00011B10 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011B14 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011B1A 317C 0000 0010             		move.w	#0,obVelX(a0)
00011B20 117C 0000 001C             		move.b	#0,obAnim(a0)
00011B26 4E75                       		rts	
00011B26 4E75                       		rts	
00011B28                            		include	"_anim\Yadrin.asm"
00011B28                            ; ---------------------------------------------------------------------------
00011B28                            ; Animation script - Yadrin enemy
00011B28                            ; ---------------------------------------------------------------------------
00011B28 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011B2A 0000                       		dc.w @walk-Ani_Yad
00011B2C                            
00011B2C 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011B30 00                         		even
00011B30 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011B3E                            		even
00011B3E                            		even
00011B3E                            Map_Yad:	include	"_maps\Yadrin.asm"
00011B3E                            ; --------------------------------------------------------------------------------
00011B3E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011B3E                            ; --------------------------------------------------------------------------------
00011B3E                            
00011B3E                            SME_4WhIu:	
00011B3E 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011B42 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011B46 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011B4A 09                         SME_4WhIu_C:	dc.b 9	
00011B4B F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011B50 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011B55 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011B5A FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011B5F FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011B64 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011B69 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011B6E F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011B73 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011B78 09                         SME_4WhIu_3A:	dc.b 9	
00011B79 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011B7E FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011B83 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011B88 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011B8D FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011B92 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011B97 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011B9C EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011BA1 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011BA6 0C                         SME_4WhIu_68:	dc.b $C	
00011BA7 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011BAC FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011BB1 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011BB6 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011BBB FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011BC0 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011BC5 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011BCA FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011BCF FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011BD4 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011BD9 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011BDE 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011BE3 0C                         SME_4WhIu_A5:	dc.b $C	
00011BE4 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011BE9 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011BEE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011BF3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011BF8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011BFD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011C02 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011C07 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011C0C FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011C11 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011C16 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011C1B 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011C20 05                         SME_4WhIu_E2:	dc.b 5	
00011C21 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011C26 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011C2B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011C30 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011C35 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011C3A 05                         SME_4WhIu_FC:	dc.b 5	
00011C3B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011C40 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011C45 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011C4A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011C4F 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011C54                            		even
00011C54                            		even
00011C54                            
00011C54                            		include	"_incObj\sub SolidObject.asm"
00011C54                            ; ---------------------------------------------------------------------------
00011C54                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011C54                            ;
00011C54                            ; input:
00011C54                            ;	d1 = width
00011C54                            ;	d2 = height / 2 (when jumping)
00011C54                            ;	d3 = height / 2 (when walking)
00011C54                            ;	d4 = x-axis position
00011C54                            ; ---------------------------------------------------------------------------
00011C54                            
00011C54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011C54                            
00011C54                            
00011C54                            SolidObject:
00011C54 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011C58 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011C5C 3401                       		move.w	d1,d2
00011C5E D442                       		add.w	d2,d2
00011C60 43F8 D000                  		lea	(v_player).w,a1
00011C64 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C6A 6600                       		bne.s	@leave		; if yes, branch
00011C6C 3029 0008                  		move.w	obX(a1),d0
00011C70 9068 0008                  		sub.w	obX(a0),d0
00011C74 D041                       		add.w	d1,d0
00011C76 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011C78 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011C7A 6500                       		bcs.s	@stand		; if not, branch
00011C7C                            
00011C7C                            	@leave:
00011C7C 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011C82 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011C88 4228 0025                  		clr.b	obSolid(a0)
00011C8C 7800                       		moveq	#0,d4
00011C8E 4E75                       		rts	
00011C90                            
00011C90                            	@stand:
00011C90 3404                       		move.w	d4,d2
00011C92 4EB9 0000 972C             		jsr	MvSonicOnPtfm
00011C98 7800                       		moveq	#0,d4
00011C9A 4E75                       		rts	
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            SolidObject71:
00011C9C 4A28 0025                  		tst.b	obSolid(a0)
00011CA0 6700 0000                  		beq.w	loc_FAD0
00011CA4 3401                       		move.w	d1,d2
00011CA6 D442                       		add.w	d2,d2
00011CA8 43F8 D000                  		lea	(v_player).w,a1
00011CAC 0829 0001 0022             		btst	#1,obStatus(a1)
00011CB2 6600                       		bne.s	@leave
00011CB4 3029 0008                  		move.w	obX(a1),d0
00011CB8 9068 0008                  		sub.w	obX(a0),d0
00011CBC D041                       		add.w	d1,d0
00011CBE 6B00                       		bmi.s	@leave
00011CC0 B042                       		cmp.w	d2,d0
00011CC2 6500                       		bcs.s	@stand
00011CC4                            
00011CC4                            	@leave:
00011CC4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011CCA 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011CD0 4228 0025                  		clr.b	obSolid(a0)
00011CD4 7800                       		moveq	#0,d4
00011CD6 4E75                       		rts	
00011CD8                            
00011CD8                            	@stand:
00011CD8 3404                       		move.w	d4,d2
00011CDA 4EB9 0000 972C             		jsr	MvSonicOnPtfm
00011CE0 7800                       		moveq	#0,d4
00011CE2 4E75                       		rts	
00011CE4                            ; ===========================================================================
00011CE4                            
00011CE4                            SolidObject2F:
00011CE4 43F8 D000                  		lea	(v_player).w,a1
00011CE8 4A28 0001                  		tst.b	obRender(a0)
00011CEC 6A00 0000                  		bpl.w	Solid_Ignore
00011CF0 3029 0008                  		move.w	obX(a1),d0
00011CF4 9068 0008                  		sub.w	obX(a0),d0
00011CF8 D041                       		add.w	d1,d0
00011CFA 6B00 0000                  		bmi.w	Solid_Ignore
00011CFE 3601                       		move.w	d1,d3
00011D00 D643                       		add.w	d3,d3
00011D02 B043                       		cmp.w	d3,d0
00011D04 6200 0000                  		bhi.w	Solid_Ignore
00011D08 3A00                       		move.w	d0,d5
00011D0A 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011D10 6700                       		beq.s	@notflipped	; if not, branch
00011D12 4645                       		not.w	d5
00011D14 DA43                       		add.w	d3,d5
00011D16                            
00011D16                            	@notflipped:
00011D16 E24D                       		lsr.w	#1,d5
00011D18 7600                       		moveq	#0,d3
00011D1A 1632 5000                  		move.b	(a2,d5.w),d3
00011D1E 9612                       		sub.b	(a2),d3
00011D20 3A28 000C                  		move.w	obY(a0),d5
00011D24 9A43                       		sub.w	d3,d5
00011D26 1629 0016                  		move.b	obHeight(a1),d3
00011D2A 4883                       		ext.w	d3
00011D2C D443                       		add.w	d3,d2
00011D2E 3629 000C                  		move.w	obY(a1),d3
00011D32 9645                       		sub.w	d5,d3
00011D34 5843                       		addq.w	#4,d3
00011D36 D642                       		add.w	d2,d3
00011D38 6B00 0000                  		bmi.w	Solid_Ignore
00011D3C 3802                       		move.w	d2,d4
00011D3E D844                       		add.w	d4,d4
00011D40 B644                       		cmp.w	d4,d3
00011D42 6400 0000                  		bcc.w	Solid_Ignore
00011D46 6000 0000                  		bra.w	loc_FB0E
00011D4A                            ; ===========================================================================
00011D4A                            
00011D4A                            Solid_ChkEnter:
00011D4A 4A28 0001                  		tst.b	obRender(a0)
00011D4E 6A00 0000                  		bpl.w	Solid_Ignore
00011D52                            
00011D52                            loc_FAD0:
00011D52 43F8 D000                  		lea	(v_player).w,a1
00011D56 3029 0008                  		move.w	obX(a1),d0
00011D5A 9068 0008                  		sub.w	obX(a0),d0
00011D5E D041                       		add.w	d1,d0
00011D60 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011D64 3601                       		move.w	d1,d3
00011D66 D643                       		add.w	d3,d3
00011D68 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011D6A 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011D6E 1629 0016                  		move.b	obHeight(a1),d3
00011D72 4883                       		ext.w	d3
00011D74 D443                       		add.w	d3,d2
00011D76 3629 000C                  		move.w	obY(a1),d3
00011D7A 9668 000C                  		sub.w	obY(a0),d3
00011D7E 5843                       		addq.w	#4,d3
00011D80 D642                       		add.w	d2,d3
00011D82 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011D86 3802                       		move.w	d2,d4
00011D88 D844                       		add.w	d4,d4
00011D8A B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011D8C 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011D90                            
00011D90                            loc_FB0E:
00011D90 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011D94 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011D98 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011D9E 6400 0000                  			bcc.w	Solid_Debug
00011DA2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011DA6 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011DAA 3A00                       		move.w	d0,d5
00011DAC B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011DAE 6400                       		bcc.s	@isright	; if yes, branch
00011DB0 D241                       		add.w	d1,d1
00011DB2 9041                       		sub.w	d1,d0
00011DB4 3A00                       		move.w	d0,d5
00011DB6 4445                       		neg.w	d5
00011DB8                            
00011DB8                            	@isright:
00011DB8 3203                       		move.w	d3,d1
00011DBA B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011DBC 6400                       		bcc.s	@isbelow	; if yes, branch
00011DBE                            
00011DBE 5943                       		subq.w	#4,d3
00011DC0 9644                       		sub.w	d4,d3
00011DC2 3203                       		move.w	d3,d1
00011DC4 4441                       		neg.w	d1
00011DC6                            
00011DC6                            	@isbelow:
00011DC6 BA41                       		cmp.w	d1,d5
00011DC8 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011DCC 0C41 0004                  		cmpi.w	#4,d1
00011DD0 6300                       		bls.s	Solid_SideAir
00011DD2 4A40                       		tst.w	d0		; where is Sonic?
00011DD4 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011DD6 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011DD8 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011DDC 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011DDE 6000                       		bra.s	Solid_Left
00011DE0                            ; ===========================================================================
00011DE0                            
00011DE0                            Solid_Right:
00011DE0 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011DE4 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011DE6                            
00011DE6                            Solid_Left:
00011DE6 337C 0000 0020             		move.w	#0,obInertia(a1)
00011DEC 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011DF2                            
00011DF2                            Solid_Centre:
00011DF2 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011DF6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DFC 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011DFE 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011E04 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011E0A 7801                       		moveq	#1,d4		; return side collision
00011E0C 4E75                       		rts	
00011E0E                            ; ===========================================================================
00011E0E                            
00011E0E                            Solid_SideAir:
00011E0E 6100                       		bsr.s	Solid_NotPushing
00011E10 7801                       		moveq	#1,d4		; return side collision
00011E12 4E75                       		rts	
00011E14                            ; ===========================================================================
00011E14                            
00011E14                            Solid_Ignore:
00011E14 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011E1A 6700                       		beq.s	Solid_Debug	; if not, branch
00011E1C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011E22 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E24 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011E2A 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E2C 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011E32 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011E34 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011E3A                            
00011E3A                            
00011E3A                            Solid_NotPushing:
00011E3A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011E40 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011E46                            
00011E46                            Solid_Debug:
00011E46 7800                       		moveq	#0,d4		; return no collision
00011E48 4E75                       		rts	
00011E4A                            ; ===========================================================================
00011E4A                            
00011E4A                            Solid_TopBottom:
00011E4A 4A43                       		tst.w	d3		; is Sonic below the object?
00011E4C 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011E4E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011E52 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011E54 60BE                       		bra.s	Solid_Ignore
00011E56                            ; ===========================================================================
00011E56                            
00011E56                            Solid_Below:
00011E56 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011E5A 6700                       		beq.s	Solid_Squash	; if not, branch
00011E5C 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011E5E 4A43                       		tst.w	d3		; is Sonic above the object?
00011E60 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011E62 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011E66 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011E6C                            
00011E6C                            Solid_TopBtmAir:
00011E6C 78FF                       		moveq	#-1,d4
00011E6E 4E75                       		rts	
00011E70                            ; ===========================================================================
00011E70                            
00011E70                            Solid_Squash:
00011E70 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011E76 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011E78 2F08                       		move.l	a0,-(sp)
00011E7A 2049                       		movea.l	a1,a0
00011E7C 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011E82 205F                       		movea.l	(sp)+,a0
00011E84 78FF                       		moveq	#-1,d4
00011E86 4E75                       		rts	
00011E88                            ; ===========================================================================
00011E88                            
00011E88                            Solid_Landed:
00011E88 5943                       		subq.w	#4,d3
00011E8A 7200                       		moveq	#0,d1
00011E8C 1228 0014                  		move.b	obActWid(a0),d1
00011E90 3401                       		move.w	d1,d2
00011E92 D442                       		add.w	d2,d2
00011E94 D269 0008                  		add.w	obX(a1),d1
00011E98 9268 0008                  		sub.w	obX(a0),d1
00011E9C 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011E9E B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011EA0 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011EA2 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011EA6 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011EA8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011EAC 5369 000C                  		subq.w	#1,obY(a1)
00011EB0 6100                       		bsr.s	Solid_ResetFloor
00011EB2 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011EB8 08E8 0003 0022             		bset	#3,obStatus(a0)
00011EBE 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2                            
00011EC2                            Solid_Miss:
00011EC2 7800                       		moveq	#0,d4
00011EC4 4E75                       		rts	
00011EC6                            ; End of function SolidObject
00011EC6                            
00011EC6                            
00011EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011EC6                            
00011EC6                            
00011EC6                            Solid_ResetFloor:
00011EC6 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011ECC 6700                       		beq.s	@notonobj	; if not, branch
00011ECE                            
00011ECE 7000                       		moveq	#0,d0
00011ED0 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011ED4 ED48                       		lsl.w	#6,d0
00011ED6 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011EDC 2440                       		movea.l	d0,a2
00011EDE 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011EE4 422A 0025                  		clr.b	obSolid(a2)
00011EE8                            
00011EE8                            	@notonobj:
00011EE8 3008                       		move.w	a0,d0
00011EEA 0440 D000                  		subi.w	#$D000,d0
00011EEE EC48                       		lsr.w	#6,d0
00011EF0 0240 007F                  		andi.w	#$7F,d0
00011EF4 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011EF8 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011EFE 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011F04 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011F0A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F10 6700                       		beq.s	@notinair	; if not, branch
00011F12 2F08                       		move.l	a0,-(sp)
00011F14 2049                       		movea.l	a1,a0
00011F16 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011F1C 205F                       		movea.l	(sp)+,a0
00011F1E                            
00011F1E                            	@notinair:
00011F1E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011F24 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011F2A 4E75                       		rts	
00011F2C                            ; End of function Solid_ResetFloor
00011F2C                            ; End of function Solid_ResetFloor
00011F2C                            
00011F2C                            		include	"_incObj\51 Smashable Green Block.asm"
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Object 51 - smashable	green block (MZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            
00011F2C                            SmashBlock:
00011F2C 7000                       		moveq	#0,d0
00011F2E 1028 0024                  		move.b	obRoutine(a0),d0
00011F32 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011F36 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011F3A 6000 F880                  		bra.w	RememberState
00011F3E                            ; ===========================================================================
00011F3E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011F40 0000                       		dc.w Smab_Solid-Smab_Index
00011F42 0000                       		dc.w Smab_Points-Smab_Index
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Smab_Main:	; Routine 0
00011F44 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F48 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011F50 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011F56 117C 0004 0001             		move.b	#4,obRender(a0)
00011F5C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011F62 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011F68 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011F6E                            
00011F6E                            Smab_Solid:	; Routine 2
00011F6E                            
00011F6E =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011F6E =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011F6E                            
00011F6E 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011F74 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011F7A 323C 001B                  		move.w	#$1B,d1
00011F7E 343C 0010                  		move.w	#$10,d2
00011F82 363C 0011                  		move.w	#$11,d3
00011F86 3828 0008                  		move.w	obX(a0),d4
00011F8A 6100 FCC8                  		bsr.w	SolidObject
00011F8E 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011F94 6600                       		bne.s	@smash		; if yes, branch
00011F96                            
00011F96                            	@notspinning:
00011F96 4E75                       		rts	
00011F98                            ; ===========================================================================
00011F98                            
00011F98                            @smash:
00011F98 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011F9E 66F6                       		bne.s	@notspinning	; if not, branch
00011FA0 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011FA6 08E9 0002 0022             		bset	#2,obStatus(a1)
00011FAC 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011FB2 137C 0007 0017             		move.b	#7,obWidth(a1)
00011FB8 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011FBE 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011FC4 08E9 0001 0022             		bset	#1,obStatus(a1)
00011FCA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011FD0 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011FD6 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011FDC 4228 0025                  		clr.b	obSolid(a0)
00011FE0 117C 0001 001A             		move.b	#1,obFrame(a0)
00011FE6 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011FEC 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011FEE 343C 0038                  		move.w	#$38,d2
00011FF2 6100 D406                  		bsr.w	SmashObject
00011FF6 6100 DCDA                  		bsr.w	FindFreeObj
00011FFA 6600                       		bne.s	Smab_Points
00011FFC 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012000 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012006 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001200C 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012010 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00012014 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012018 6500                       		bcs.s	@bonus		; if yes, branch
0001201A 7406                       		moveq	#6,d2		; set cap for points
0001201C                            
0001201C                            	@bonus:
0001201C 7000                       		moveq	#0,d0
0001201E 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012022 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012028 6500                       		bcs.s	@givepoints	; if not, branch
0001202A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001202E 740A                       		moveq	#10,d2
00012030                            
00012030                            	@givepoints:
00012030 4EB9 0000 0000             		jsr	(AddPoints).l
00012036 E24A                       		lsr.w	#1,d2
00012038 1342 001A                  		move.b	d2,obFrame(a1)
0001203C                            
0001203C                            Smab_Points:	; Routine 4
0001203C 6100 D7F4                  		bsr.w	SpeedToPos
00012040 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00012046 6100 D7FE                  		bsr.w	DisplaySprite
0001204A 4A28 0001                  		tst.b	obRender(a0)
0001204E 6A00 D836                  		bpl.w	DeleteObject
00012052 4E75                       		rts	
00012054                            ; ===========================================================================
00012054 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00012058 FF00 FF00                  		dc.w -$100, -$100
0001205C 0200 FE00                  		dc.w $200, -$200
00012060 0100 FF00                  		dc.w $100, -$100
00012064                            
00012064 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00012064 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001206C                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Sprite mappings - smashable green block (MZ)
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            Map_Smab_internal:
0001206C 0000                       		dc.w @two-Map_Smab_internal
0001206E 0000                       		dc.w @four-Map_Smab_internal
00012070 02                         @two:		dc.b 2
00012071 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00012076 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001207B 04                         @four:		dc.b 4
0001207C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
00012081 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00012086 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001208B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00012090                            		even
00012090                            		even
00012090                            
00012090                            		include	"_incObj\52 Moving Blocks.asm"
00012090                            ; ---------------------------------------------------------------------------
00012090                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00012090                            ; ---------------------------------------------------------------------------
00012090                            
00012090                            MovingBlock:
00012090 7000                       		moveq	#0,d0
00012092 1028 0024                  		move.b	obRoutine(a0),d0
00012096 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
0001209A 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
0001209E                            ; ===========================================================================
0001209E 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000120A0 0000                       		dc.w MBlock_Platform-MBlock_Index
000120A2 0000                       		dc.w MBlock_StandOn-MBlock_Index
000120A4                            
000120A4 =00000030                  mblock_origX:	equ $30
000120A4 =00000032                  mblock_origY:	equ $32
000120A4                            
000120A4 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000120A6 2001                       		dc.b $20, 1
000120A8 2002                       		dc.b $20, 2
000120AA 4003                       		dc.b $40, 3
000120AC 3004                       		dc.b $30, 4
000120AE                            ; ===========================================================================
000120AE                            
000120AE                            MBlock_Main:	; Routine 0
000120AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000120B2 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000120BA 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000120C0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000120C6 6600                       		bne.s	loc_FE44
000120C8 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
000120D0 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
000120D6 117C 0007 0016             		move.b	#7,obHeight(a0)
000120DC                            
000120DC                            loc_FE44:
000120DC 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000120E2 6600                       		bne.s	loc_FE60
000120E4 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000120EA 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000120F0 6700                       		beq.s	loc_FE60	; if yes, branch
000120F2 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000120F8                            
000120F8                            loc_FE60:
000120F8 117C 0004 0001             		move.b	#4,obRender(a0)
000120FE 7000                       		moveq	#0,d0
00012100 1028 0028                  		move.b	obSubtype(a0),d0
00012104 E648                       		lsr.w	#3,d0
00012106 0240 001E                  		andi.w	#$1E,d0
0001210A 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
0001210E 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012112 115A 001A                  		move.b	(a2)+,obFrame(a0)
00012116 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001211C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012122 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012128 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001212E                            
0001212E                            MBlock_Platform: ; Routine 2
0001212E 6100 0000                  		bsr.w	MBlock_Move
00012132 7200                       		moveq	#0,d1
00012134 1228 0014                  		move.b	obActWid(a0),d1
00012138 4EB9 0000 905A             		jsr	(PlatformObject).l
0001213E 6000                       		bra.s	MBlock_ChkDel
00012140                            ; ===========================================================================
00012140                            
00012140                            MBlock_StandOn:	; Routine 4
00012140 7200                       		moveq	#0,d1
00012142 1228 0014                  		move.b	obActWid(a0),d1
00012146 4EB9 0000 91CE             		jsr	(ExitPlatform).l
0001214C 3F28 0008                  		move.w	obX(a0),-(sp)
00012150 6100 0000                  		bsr.w	MBlock_Move
00012154 341F                       		move.w	(sp)+,d2
00012156 4EB9 0000 9738             		jsr	(MvSonicOnPtfm2).l
0001215C                            
0001215C                            MBlock_ChkDel:
0001217A 6000 D6CA                  		bra.w	DisplaySprite
0001217E                            ; ===========================================================================
0001217E                            
0001217E                            MBlock_Move:
0001217E 7000                       		moveq	#0,d0
00012180 1028 0028                  		move.b	obSubtype(a0),d0
00012184 0240 000F                  		andi.w	#$F,d0
00012188 D040                       		add.w	d0,d0
0001218A 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
0001218E 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00012192                            ; ===========================================================================
00012192 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00012196 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001219A 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
0001219E 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000121A2 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000121A6 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000121A8                            ; ===========================================================================
000121A8                            
000121A8                            MBlock_Type00:
000121A8 4E75                       		rts	
000121AA                            ; ===========================================================================
000121AA                            
000121AA                            MBlock_Type01:
000121AA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000121AE 323C 0060                  		move.w	#$60,d1
000121B2 0828 0000 0022             		btst	#0,obStatus(a0)
000121B8 6700                       		beq.s	loc_FF26
000121BA 4440                       		neg.w	d0
000121BC D041                       		add.w	d1,d0
000121BE                            
000121BE                            loc_FF26:
000121BE 3228 0030                  		move.w	mblock_origX(a0),d1
000121C2 9240                       		sub.w	d0,d1
000121C4 3141 0008                  		move.w	d1,obX(a0)
000121C8 4E75                       		rts	
000121CA                            ; ===========================================================================
000121CA                            
000121CA                            MBlock_Type02:
000121CA 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000121D0 6600                       		bne.s	MBlock_02_Wait
000121D2 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000121D6                            
000121D6                            MBlock_02_Wait:
000121D6 4E75                       		rts	
000121D8                            ; ===========================================================================
000121D8                            
000121D8                            MBlock_Type03:
000121D8 7600                       		moveq	#0,d3
000121DA 1628 0014                  		move.b	obActWid(a0),d3
000121DE 6100 0000                  		bsr.w	ObjHitWallRight
000121E2 4A41                       		tst.w	d1		; has the platform hit a wall?
000121E4 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000121E6 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000121EA 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000121F0 4E75                       		rts	
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            MBlock_03_End:
000121F2 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000121F6 4E75                       		rts	
000121F8                            ; ===========================================================================
000121F8                            
000121F8                            MBlock_Type05:
000121F8 7600                       		moveq	#0,d3
000121FA 1628 0014                  		move.b	obActWid(a0),d3
000121FE 6100 0000                  		bsr.w	ObjHitWallRight
00012202 4A41                       		tst.w	d1		; has the platform hit a wall?
00012204 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00012206 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001220A 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012210 4E75                       		rts	
00012212                            ; ===========================================================================
00012212                            
00012212                            MBlock_05_End:
00012212 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00012216 4E75                       		rts	
00012218                            ; ===========================================================================
00012218                            
00012218                            MBlock_Type06:
00012218 6100 D618                  		bsr.w	SpeedToPos
0001221C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012222 6100 0000                  		bsr.w	ObjFloorDist
00012226 4A41                       		tst.w	d1		; has platform hit the floor?
00012228 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001222C D368 000C                  		add.w	d1,obY(a0)
00012230 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00012234 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00012238                            
00012238                            locret_FFA0:
00012238 4E75                       		rts	
0001223A                            ; ===========================================================================
0001223A                            
0001223A                            MBlock_Type07:
0001223A 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
0001223E 6700                       		beq.s	MBlock_07_ChkDel
00012240 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00012244                            
00012244                            MBlock_07_ChkDel:
00012244 588F                       		addq.l	#4,sp
00012264 4E75                       		rts	
00012266                            ; ===========================================================================
00012266                            
00012266                            MBlock_Type08:
00012266 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001226A 323C 0080                  		move.w	#$80,d1
0001226E 0828 0000 0022             		btst	#0,obStatus(a0)
00012274 6700                       		beq.s	loc_FFE2
00012276 4440                       		neg.w	d0
00012278 D041                       		add.w	d1,d0
0001227A                            
0001227A                            loc_FFE2:
0001227A 3228 0032                  		move.w	mblock_origY(a0),d1
0001227E 9240                       		sub.w	d0,d1
00012280 3141 000C                  		move.w	d1,obY(a0)
00012284 4E75                       		rts	
00012286                            ; ===========================================================================
00012286                            
00012286                            MBlock_Type0A:
00012286 7600                       		moveq	#0,d3
00012288 1628 0014                  		move.b	obActWid(a0),d3
0001228C D643                       		add.w	d3,d3
0001228E 7208                       		moveq	#8,d1
00012290 0828 0000 0022             		btst	#0,obStatus(a0)
00012296 6700                       		beq.s	loc_10004
00012298 4441                       		neg.w	d1
0001229A 4443                       		neg.w	d3
0001229C                            
0001229C                            loc_10004:
0001229C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000122A0 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000122A2 3028 0008                  		move.w	obX(a0),d0
000122A6 9068 0030                  		sub.w	mblock_origX(a0),d0
000122AA B043                       		cmp.w	d3,d0
000122AC 6700                       		beq.s	MBlock_0A_Wait
000122AE D368 0008                  		add.w	d1,obX(a0)	; move platform
000122B2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000122B8 4E75                       		rts	
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            MBlock_0A_Wait:
000122BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000122BE 6600                       		bne.s	locret_1002E	; if time remains, branch
000122C0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000122C6                            
000122C6                            locret_1002E:
000122C6 4E75                       		rts	
000122C8                            ; ===========================================================================
000122C8                            
000122C8                            MBlock_0A_Back:
000122C8 3028 0008                  		move.w	obX(a0),d0
000122CC 9068 0030                  		sub.w	mblock_origX(a0),d0
000122D0 6700                       		beq.s	MBlock_0A_Reset
000122D2 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000122D6 4E75                       		rts	
000122D8                            ; ===========================================================================
000122D8                            
000122D8                            MBlock_0A_Reset:
000122D8 4268 0036                  		clr.w	$36(a0)
000122DC 5328 0028                  		subq.b	#1,obSubtype(a0)
000122E0 4E75                       		rts	
000122E0 4E75                       		rts	
000122E2                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000122E2                            ; ---------------------------------------------------------------------------
000122E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000122E2                            ; ---------------------------------------------------------------------------
000122E2                            Map_MBlock_internal:
000122E2 0000                       		dc.w @mz1-Map_MBlock_internal
000122E4 0000                       		dc.w @mz2-Map_MBlock_internal
000122E6 0000                       		dc.w @sbz-Map_MBlock_internal
000122E8 0000                       		dc.w @sbzwide-Map_MBlock_internal
000122EA 0000                       		dc.w @mz3-Map_MBlock_internal
000122EC 01                         @mz1:		dc.b 1
000122ED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000122F2 02                         @mz2:		dc.b 2
000122F3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000122F8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000122FD 04                         @sbz:		dc.b 4
000122FE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012303 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012308 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001230D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012312 04                         @sbzwide:	dc.b 4
00012313 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012318 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001231D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012322 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00012327 03                         @mz3:		dc.b 3
00012328 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001232D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012332 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012338 00                         		even
00012338 00                         		even
00012338                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012338                            ; ---------------------------------------------------------------------------
00012338                            ; Sprite mappings - moving block (LZ)
00012338                            ; ---------------------------------------------------------------------------
00012338                            Map_MBlockLZ_internal:
00012338 0000                       		dc.w @0-Map_MBlockLZ_internal
0001233A 01                         @0:		dc.b 1
0001233B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012340                            		even
00012340                            		even
00012340                            
00012340                            		include	"_incObj\55 Basaran.asm"
00012340                            ; ---------------------------------------------------------------------------
00012340                            ; Object 55 - Basaran enemy (MZ)
00012340                            ; ---------------------------------------------------------------------------
00012340                            
00012340                            Basaran:
00012340 7000                       		moveq	#0,d0
00012342 1028 0024                  		move.b	obRoutine(a0),d0
00012346 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001234A 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
0001234E                            ; ===========================================================================
0001234E 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012350 0000                       		dc.w Bas_Action-Bas_Index
00012352                            ; ===========================================================================
00012352                            
00012352                            Bas_Main:	; Routine 0
00012352 5428 0024                  		addq.b	#2,obRoutine(a0)
00012356 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
0001235E 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012364 117C 0004 0001             		move.b	#4,obRender(a0)
0001236A 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012370 317C 0100 0018             		move.w	#$100,obPriority(a0)
00012376 117C 000B 0020             		move.b	#$B,obColType(a0)
0001237C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012382                            
00012382                            Bas_Action:	; Routine 2
00012382 7000                       		moveq	#0,d0
00012384 1028 0025                  		move.b	ob2ndRout(a0),d0
00012388 323B 0000                  		move.w	@index(pc,d0.w),d1
0001238C 4EBB 1000                  		jsr	@index(pc,d1.w)
00012390 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00012396 6100 A562                  		bsr.w	AnimateSprite
0001239A 6000 F420                  		bra.w	RememberState
0001239E                            ; ===========================================================================
0001239E 0000                       @index:		dc.w @dropcheck-@index
000123A0 0000                       		dc.w @dropfly-@index
000123A2 0000                       		dc.w @flapsound-@index
000123A4 0000                       		dc.w @flyup-@index
000123A6                            ; ===========================================================================
000123A6                            
000123A6                            @dropcheck:
000123A6 343C 0080                  		move.w	#$80,d2
000123AA 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000123AE 6400                       		bcc.s	@nodrop		; if not, branch
000123B0 3038 D00C                  		move.w	(v_player+obY).w,d0
000123B4 3140 0036                  		move.w	d0,$36(a0)
000123B8 9068 000C                  		sub.w	obY(a0),d0
000123BC 6500                       		bcs.s	@nodrop
000123BE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000123C2 6400                       		bcc.s	@nodrop		; if not, branch
000123C4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000123C8 6600                       		bne.s	@nodrop		; if yes, branch
000123CA                            
000123CA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000123CE D007                       		add.b	d7,d0
000123D0 0200 0007                  		andi.b	#7,d0
000123D4 6600                       		bne.s	@nodrop
000123D6 117C 0001 001C             		move.b	#1,obAnim(a0)
000123DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000123E0                            
000123E0                            	@nodrop:
000123E0 4E75                       		rts	
000123E2                            ; ===========================================================================
000123E2                            
000123E2                            @dropfly:
000123E2 6100 D44E                  		bsr.w	SpeedToPos
000123E6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000123EC 343C 0080                  		move.w	#$80,d2
000123F0 6100 0000                  		bsr.w	@chkdistance
000123F4 3028 0036                  		move.w	$36(a0),d0
000123F8 9068 000C                  		sub.w	obY(a0),d0
000123FC 6500                       		bcs.s	@chkdel
000123FE 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012402 6400                       		bcc.s	@dropmore	; if not, branch
00012404 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012408 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
0001240E 117C 0002 001C             		move.b	#2,obAnim(a0)
00012414 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012418                            
00012418                            	@dropmore:
00012418 4E75                       		rts	
0001241A                            
0001241A                            	@chkdel:
0001241A 4A28 0001                  		tst.b	obRender(a0)
0001241E 6A00 D466                  		bpl.w	DeleteObject
00012422 4E75                       		rts	
00012424                            ; ===========================================================================
00012424                            
00012424                            @flapsound:
00012424 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012428 0200 000F                  		andi.b	#$F,d0
0001242C 6600                       		bne.s	@nosound
00012438                            
00012438                            	@nosound:
00012438 6100 D3F8                  		bsr.w	SpeedToPos
0001243C 3038 D008                  		move.w	(v_player+obX).w,d0
00012440 9068 0008                  		sub.w	obX(a0),d0
00012444 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00012446 4440                       		neg.w	d0
00012448                            
00012448                            	@isright:
00012448 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001244C 6500                       		bcs.s	@dontflyup	; if yes, branch
0001244E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012452 D007                       		add.b	d7,d0
00012454 0200 0007                  		andi.b	#7,d0
00012458 6600                       		bne.s	@dontflyup
0001245A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001245E                            
0001245E                            @dontflyup:
0001245E 4E75                       		rts	
00012460                            ; ===========================================================================
00012460                            
00012460                            @flyup:
00012460 6100 D3D0                  		bsr.w	SpeedToPos
00012464 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001246A 6100 0000                  		bsr.w	ObjHitCeiling
0001246E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012470 6A00                       		bpl.s	@noceiling	; if not, branch
00012472 9368 000C                  		sub.w	d1,obY(a0)
00012476 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001247C 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012480 4268 0012                  		clr.w	obVelY(a0)
00012484 4228 001C                  		clr.b	obAnim(a0)
00012488 4228 0025                  		clr.b	ob2ndRout(a0)
0001248C                            
0001248C                            	@noceiling:
0001248C 4E75                       		rts	
0001248E                            ; ===========================================================================
0001248E                            
0001248E                            ; Subroutine to check Sonic's distance from the basaran
0001248E                            
0001248E                            ; input:
0001248E                            ;	d2 = distance to compare
0001248E                            
0001248E                            ; output:
0001248E                            ;	d0 = distance between Sonic and basaran
0001248E                            ;	d1 = speed/direction for basaran to fly
0001248E                            
0001248E                            @chkdistance:
0001248E 323C 0100                  		move.w	#$100,d1
00012492 08E8 0000 0022             		bset	#0,obStatus(a0)
00012498 3038 D008                  		move.w	(v_player+obX).w,d0
0001249C 9068 0008                  		sub.w	obX(a0),d0
000124A0 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000124A2 4440                       		neg.w	d0
000124A4 4441                       		neg.w	d1
000124A6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000124AC                            
000124AC                            	@right:
000124AC B042                       		cmp.w	d2,d0
000124AE 4E75                       		rts	
000124B0                            ; ===========================================================================
000124B0                            ; unused crap
000124B0 6100 D380                  		bsr.w	SpeedToPos
000124B4 6100 D390                  		bsr.w	DisplaySprite
000124B8 4A28 0001                  		tst.b	obRender(a0)
000124BC 6A00 D3C8                  		bpl.w	DeleteObject
000124C0 4E75                       		rts	
000124C0 4E75                       		rts	
000124C2                            		include	"_anim\Basaran.asm"
000124C2                            ; ---------------------------------------------------------------------------
000124C2                            ; Animation script - Basaran enemy
000124C2                            ; ---------------------------------------------------------------------------
000124C2 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000124C4 0000                       		dc.w @fall-Ani_Bas
000124C6 0000                       		dc.w @fly-Ani_Bas
000124C8 0F00 FF                    @still:		dc.b $F, 0, afEnd
000124CC 00                         		even
000124CC 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000124D0 00                         		even
000124D0 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000124D6                            		even
000124D6                            		even
000124D6                            Map_Bas:	include	"_maps\Basaran.asm"
000124D6                            ; --------------------------------------------------------------------------------
000124D6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000124D6                            ; --------------------------------------------------------------------------------
000124D6                            
000124D6                            SME_RhYYA:	
000124D6 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000124DA 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000124DE 01                         SME_RhYYA_8:	dc.b 1	
000124DF F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000124E4 03                         SME_RhYYA_E:	dc.b 3	
000124E5 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
000124EA 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
000124EF 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
000124F4 04                         SME_RhYYA_1E:	dc.b 4	
000124F5 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
000124FA 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
000124FF 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012504 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012509 04                         SME_RhYYA_33:	dc.b 4	
0001250A F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
0001250F 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012514 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012519 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
0001251E                            		even
0001251E                            		even
0001251E                            
0001251E                            		include	"_incObj\56 Floating Blocks and Doors.asm"
0001251E                            ; ---------------------------------------------------------------------------
0001251E                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
0001251E                            ; ---------------------------------------------------------------------------
0001251E                            
0001251E                            FloatingBlock:
0001251E 7000                       		moveq	#0,d0
00012520 1028 0024                  		move.b	obRoutine(a0),d0
00012524 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012528 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001252C                            ; ===========================================================================
0001252C 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
0001252E 0000                       		dc.w FBlock_Action-FBlock_Index
00012530                            
00012530 =00000034                  fb_origX:	equ $34		; original x-axis position
00012530 =00000030                  fb_origY:	equ $30		; original y-axis position
00012530 =0000003A                  fb_height:	equ $3A		; total object height
00012530 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012530                            
00012530                            FBlock_Var:	; width/2, height/2
00012530 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012532 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012534 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00012536 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012538 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001253A 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001253C 0820                       		dc.b	8, $20	; subtype 6x/Ex
0001253E 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012540                            ; ===========================================================================
00012540                            
00012540                            FBlock_Main:	; Routine 0
00012540 5428 0024                  		addq.b	#2,obRoutine(a0)
00012544 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001254C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012552 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012558 6600                       		bne.s	@notLZ
0001255A 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012560                            
00012560                            	@notLZ:
00012560 117C 0004 0001             		move.b	#4,obRender(a0)
00012566 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001256C 7000                       		moveq	#0,d0
0001256E 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00012572 E648                       		lsr.w	#3,d0
00012574 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012578 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001257C 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012580 1152 0016                  		move.b	(a2),obHeight(a0)
00012584 E248                       		lsr.w	#1,d0
00012586 1140 001A                  		move.b	d0,obFrame(a0)
0001258A 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012590 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00012596 7000                       		moveq	#0,d0
00012598 1012                       		move.b	(a2),d0
0001259A D040                       		add.w	d0,d0
0001259C 3140 003A                  		move.w	d0,fb_height(a0)
000125A0 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000125A6 6600                       			bne.s	@dontdelete
000125A8 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000125AE 6600                       			bne.s	@notatpos
000125B0 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000125B4 6700                       			beq.s	@dontdelete
000125B6 4EF9 0000 F886             			jmp	(DeleteObject).l
000125BC                            	@notatpos:
000125BC 4228 0028                  			clr.b	obSubtype(a0)
000125C0 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000125C4 6600                       			bne.s	@dontdelete
000125C6 4EF9 0000 F886             			jmp	(DeleteObject).l
000125CC                            	@dontdelete:
000125CC 7000                       		moveq	#0,d0
000125CE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000125D4 6700                       		beq.s	@stillnotLZ
000125D6 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000125DA 0240 000F                  		andi.w	#$F,d0
000125DE 5140                       		subq.w	#8,d0
000125E0 6500                       		bcs.s	@stillnotLZ
000125E2 E548                       		lsl.w	#2,d0
000125E4 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000125E8 45F2 0000                  		lea	(a2,d0.w),a2
000125EC 4A52                       		tst.w	(a2)
000125EE 6A00                       		bpl.s	@stillnotLZ
000125F0 0868 0000 0022             		bchg	#0,obStatus(a0)
000125F6                            
000125F6                            	@stillnotLZ:
000125F6 1028 0028                  		move.b	obSubtype(a0),d0
000125FA 6A00                       		bpl.s	FBlock_Action
000125FC 0200 000F                  		andi.b	#$F,d0
00012600 1140 003C                  		move.b	d0,fb_type(a0)
00012604 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001260A 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012610 6600                       		bne.s	@chkstate
00012612 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012618 317C 0080 003A             		move.w	#$80,fb_height(a0)
0001261E                            
0001261E                            @chkstate:
0001261E 45F8 FC00                  		lea	(v_objstate).w,a2
00012622 7000                       		moveq	#0,d0
00012624 1028 0023                  		move.b	obRespawnNo(a0),d0
00012628 6700                       		beq.s	FBlock_Action
0001262A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012630 0832 0000 0002             		btst	#0,2(a2,d0.w)
00012636 6700                       		beq.s	FBlock_Action
00012638 5228 0028                  		addq.b	#1,obSubtype(a0)
0001263C 4268 003A                  		clr.w	fb_height(a0)
00012640                            
00012640                            FBlock_Action:	; Routine 2
00012640 3F28 0008                  		move.w	obX(a0),-(sp)
00012644 7000                       		moveq	#0,d0
00012646 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001264A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001264E D040                       		add.w	d0,d0
00012650 323B 0000                  		move.w	@index(pc,d0.w),d1
00012654 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012658 381F                       		move.w	(sp)+,d4
0001265A 4A28 0001                  		tst.b	obRender(a0)
0001265E 6A00                       		bpl.s	@chkdel
00012660 7200                       		moveq	#0,d1
00012662 1228 0014                  		move.b	obActWid(a0),d1
00012666 0641 000B                  		addi.w	#$B,d1
0001266A 7400                       		moveq	#0,d2
0001266C 1428 0016                  		move.b	obHeight(a0),d2
00012670 3602                       		move.w	d2,d3
00012672 5243                       		addq.w	#1,d3
00012674 6100 F5DE                  		bsr.w	SolidObject
00012678                            
00012678                            	@chkdel:
00012694                            		@display:
00012694 6000 D1B0                  			bra.w	DisplaySprite
00012698                            		@chkdel2:
00012698 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001269E 6600                       			bne.s	@delete
000126A0 4A28 0038                  			tst.b	$38(a0)
000126A4 66EE                       			bne.s	@display
000126A6                            		@delete:
000126A6 4EF9 0000 F886             			jmp	(DeleteObject).l
000126AC                            ; ===========================================================================
000126AC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000126B0 0000 0000                  		dc.w @type02-@index, @type03-@index
000126B4 0000 0000                  		dc.w @type04-@index, @type05-@index
000126B8 0000 0000                  		dc.w @type06-@index, @type07-@index
000126BC 0000 0000                  		dc.w @type08-@index, @type09-@index
000126C0 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000126C4 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            @type00:
000126C8                            ; doesn't move
000126C8 4E75                       		rts	
000126CA                            ; ===========================================================================
000126CA                            
000126CA                            @type01:
000126CA                            ; moves side-to-side
000126CA 323C 0040                  		move.w	#$40,d1		; set move distance
000126CE 7000                       		moveq	#0,d0
000126D0 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000126D4 6000                       		bra.s	@moveLR
000126D6                            ; ===========================================================================
000126D6                            
000126D6                            @type02:
000126D6                            ; moves side-to-side
000126D6 323C 0080                  		move.w	#$80,d1		; set move distance
000126DA 7000                       		moveq	#0,d0
000126DC 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000126E0                            
000126E0                            	@moveLR:
000126E0 0828 0000 0022             		btst	#0,obStatus(a0)
000126E6 6700                       		beq.s	@noflip
000126E8 4440                       		neg.w	d0
000126EA D041                       		add.w	d1,d0
000126EC                            
000126EC                            	@noflip:
000126EC 3228 0034                  		move.w	fb_origX(a0),d1
000126F0 9240                       		sub.w	d0,d1
000126F2 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
000126F6 4E75                       		rts	
000126F8                            ; ===========================================================================
000126F8                            
000126F8                            @type03:
000126F8                            ; moves up/down
000126F8 323C 0040                  		move.w	#$40,d1		; set move distance
000126FC 7000                       		moveq	#0,d0
000126FE 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012702 6000                       		bra.s	@moveUD
00012704                            ; ===========================================================================
00012704                            
00012704                            @type04:
00012704                            ; moves up/down
00012704 323C 0080                  		move.w	#$80,d1		; set move distance
00012708 7000                       		moveq	#0,d0
0001270A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001270E                            
0001270E                            	@moveUD:
0001270E 0828 0000 0022             		btst	#0,obStatus(a0)
00012714 6700                       		beq.s	@noflip04
00012716 4440                       		neg.w	d0
00012718 D041                       		add.w	d1,d0
0001271A                            
0001271A                            	@noflip04:
0001271A 3228 0030                  		move.w	fb_origY(a0),d1
0001271E 9240                       		sub.w	d0,d1
00012720 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012724 4E75                       		rts	
00012726                            ; ===========================================================================
00012726                            
00012726                            @type05:
00012726                            ; moves up when a switch is pressed
00012726 4A28 0038                  		tst.b	$38(a0)
0001272A 6600                       		bne.s	@loc_104A4
0001272C 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012732 6600                       		bne.s	@aaa		; if not, branch
00012734 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001273A 6600                       		bne.s	@aaa
0001273C 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012740 3038 D008                  		move.w	(v_player+obX).w,d0
00012744 B068 0008                  		cmp.w	obX(a0),d0
00012748 6400                       		bcc.s	@aaa
0001274A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012750                            
00012750                            	@aaa:
00012750 45F8 F7E0                  		lea	(f_switch).w,a2
00012754 7000                       		moveq	#0,d0
00012756 1028 003C                  		move.b	fb_type(a0),d0
0001275A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012760 6700                       		beq.s	@loc_104AE
00012762 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012768 6600                       		bne.s	@loc_1049E	; if not, branch
0001276A 0C00 0003                  		cmpi.b	#3,d0
0001276E 6600                       		bne.s	@loc_1049E
00012770 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012774                            
00012774                            @loc_1049E:
00012774 117C 0001 0038             		move.b	#1,$38(a0)
0001277A                            
0001277A                            @loc_104A4:
0001277A 4A68 003A                  		tst.w	fb_height(a0)
0001277E 6700                       		beq.s	@loc_104C8
00012780 5568 003A                  		subq.w	#2,fb_height(a0)
00012784                            
00012784                            @loc_104AE:
00012784 3028 003A                  		move.w	fb_height(a0),d0
00012788 0828 0000 0022             		btst	#0,$22(a0)
0001278E 6700                       		beq.s	@loc_104BC
00012790 4440                       		neg.w	d0
00012792                            
00012792                            @loc_104BC:
00012792 3228 0030                  		move.w	fb_origY(a0),d1
00012796 D240                       		add.w	d0,d1
00012798 3141 000C                  		move.w	d1,obY(a0)
0001279C 4E75                       		rts	
0001279E                            ; ===========================================================================
0001279E                            
0001279E                            @loc_104C8:
0001279E 5228 0028                  		addq.b	#1,$28(a0)
000127A2 4228 0038                  		clr.b	$38(a0)
000127A6 45F8 FC00                  		lea	(v_objstate).w,a2
000127AA 7000                       		moveq	#0,d0
000127AC 1028 0023                  		move.b	obRespawnNo(a0),d0
000127B0 67D2                       		beq.s	@loc_104AE
000127B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000127B8 60CA                       		bra.s	@loc_104AE
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            @type06:
000127BA 4A28 0038                  		tst.b	$38(a0)
000127BE 6600                       		bne.s	@loc_10500
000127C0 45F8 F7E0                  		lea	(f_switch).w,a2
000127C4 7000                       		moveq	#0,d0
000127C6 1028 003C                  		move.b	fb_type(a0),d0
000127CA 4A32 0000                  		tst.b	(a2,d0.w)
000127CE 6A00                       		bpl.s	@loc_10512
000127D0 117C 0001 0038             		move.b	#1,$38(a0)
000127D6                            
000127D6                            @loc_10500:
000127D6 7000                       		moveq	#0,d0
000127D8 1028 0016                  		move.b	obHeight(a0),d0
000127DC D040                       		add.w	d0,d0
000127DE B068 003A                  		cmp.w	fb_height(a0),d0
000127E2 6700                       		beq.s	@loc_1052C
000127E4 5468 003A                  		addq.w	#2,fb_height(a0)
000127E8                            
000127E8                            @loc_10512:
000127E8 3028 003A                  		move.w	fb_height(a0),d0
000127EC 0828 0000 0022             		btst	#0,obStatus(a0)
000127F2 6700                       		beq.s	@loc_10520
000127F4 4440                       		neg.w	d0
000127F6                            
000127F6                            @loc_10520:
000127F6 3228 0030                  		move.w	fb_origY(a0),d1
000127FA D240                       		add.w	d0,d1
000127FC 3141 000C                  		move.w	d1,obY(a0)
00012800 4E75                       		rts	
00012802                            ; ===========================================================================
00012802                            
00012802                            @loc_1052C:
00012802 5328 0028                  		subq.b	#1,obSubtype(a0)
00012806 4228 0038                  		clr.b	$38(a0)
0001280A 45F8 FC00                  		lea	(v_objstate).w,a2
0001280E 7000                       		moveq	#0,d0
00012810 1028 0023                  		move.b	obRespawnNo(a0),d0
00012814 67D2                       		beq.s	@loc_10512
00012816 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001281C 60CA                       		bra.s	@loc_10512
0001281E                            ; ===========================================================================
0001281E                            
0001281E                            @type07:
0001281E 4A28 0038                  		tst.b	$38(a0)
00012822 6600                       		bne.s	@loc_1055E
00012824 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012828 6700                       		beq.s	@locret_10578
0001282A 117C 0001 0038             		move.b	#1,$38(a0)
00012830 4268 003A                  		clr.w	fb_height(a0)
00012834                            
00012834                            @loc_1055E:
00012834 5268 0008                  		addq.w	#1,obX(a0)
00012838 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
0001283E 5268 003A                  		addq.w	#1,fb_height(a0)
00012842 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012848 6600                       		bne.s	@locret_10578
0001284A 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012850 4228 0038                  			clr.b	$38(a0)
00012854 4228 0028                  		clr.b	obSubtype(a0)
00012858                            
00012858                            @locret_10578:
00012858 4E75                       		rts	
0001285A                            ; ===========================================================================
0001285A                            
0001285A                            @type0C:
0001285A 4A28 0038                  		tst.b	$38(a0)
0001285E 6600                       		bne.s	@loc_10598
00012860 45F8 F7E0                  		lea	(f_switch).w,a2
00012864 7000                       		moveq	#0,d0
00012866 1028 003C                  		move.b	fb_type(a0),d0
0001286A 0832 0000 0000             		btst	#0,(a2,d0.w)
00012870 6700                       		beq.s	@loc_105A2
00012872 117C 0001 0038             		move.b	#1,$38(a0)
00012878                            
00012878                            @loc_10598:
00012878 4A68 003A                  		tst.w	fb_height(a0)
0001287C 6700                       		beq.s	@loc_105C0
0001287E 5568 003A                  		subq.w	#2,fb_height(a0)
00012882                            
00012882                            @loc_105A2:
00012882 3028 003A                  		move.w	fb_height(a0),d0
00012886 0828 0000 0022             		btst	#0,obStatus(a0)
0001288C 6700                       		beq.s	@loc_105B4
0001288E 4440                       		neg.w	d0
00012890 0640 0080                  		addi.w	#$80,d0
00012894                            
00012894                            @loc_105B4:
00012894 3228 0034                  		move.w	fb_origX(a0),d1
00012898 D240                       		add.w	d0,d1
0001289A 3141 0008                  		move.w	d1,obX(a0)
0001289E 4E75                       		rts	
000128A0                            ; ===========================================================================
000128A0                            
000128A0                            @loc_105C0:
000128A0 5228 0028                  		addq.b	#1,obSubtype(a0)
000128A4 4228 0038                  		clr.b	$38(a0)
000128A8 45F8 FC00                  		lea	(v_objstate).w,a2
000128AC 7000                       		moveq	#0,d0
000128AE 1028 0023                  		move.b	obRespawnNo(a0),d0
000128B2 67CE                       		beq.s	@loc_105A2
000128B4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128BA 60C6                       		bra.s	@loc_105A2
000128BC                            ; ===========================================================================
000128BC                            
000128BC                            @type0D:
000128BC 4A28 0038                  		tst.b	$38(a0)
000128C0 6600                       		bne.s	@loc_105F8
000128C2 45F8 F7E0                  		lea	(f_switch).w,a2
000128C6 7000                       		moveq	#0,d0
000128C8 1028 003C                  		move.b	fb_type(a0),d0
000128CC 4A32 0000                  		tst.b	(a2,d0.w)
000128D0 6A00                       		bpl.s	@wtf
000128D2 117C 0001 0038             		move.b	#1,$38(a0)
000128D8                            
000128D8                            @loc_105F8:
000128D8 303C 0080                  		move.w	#$80,d0
000128DC B068 003A                  		cmp.w	fb_height(a0),d0
000128E0 6700                       		beq.s	@loc_10624
000128E2 5468 003A                  		addq.w	#2,fb_height(a0)
000128E6                            
000128E6                            @wtf:
000128E6 3028 003A                  		move.w	fb_height(a0),d0
000128EA 0828 0000 0022             		btst	#0,obStatus(a0)
000128F0 6700                       		beq.s	@loc_10618
000128F2 4440                       		neg.w	d0
000128F4 0640 0080                  		addi.w	#$80,d0
000128F8                            
000128F8                            @loc_10618:
000128F8 3228 0034                  		move.w	fb_origX(a0),d1
000128FC D240                       		add.w	d0,d1
000128FE 3141 0008                  		move.w	d1,obX(a0)
00012902 4E75                       		rts	
00012904                            ; ===========================================================================
00012904                            
00012904                            @loc_10624:
00012904 5328 0028                  		subq.b	#1,obSubtype(a0)
00012908 4228 0038                  		clr.b	$38(a0)
0001290C 45F8 FC00                  		lea	(v_objstate).w,a2
00012910 7000                       		moveq	#0,d0
00012912 1028 0023                  		move.b	obRespawnNo(a0),d0
00012916 67CE                       		beq.s	@wtf
00012918 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001291E 60C6                       		bra.s	@wtf
00012920                            ; ===========================================================================
00012920                            
00012920                            @type08:
00012920 323C 0010                  		move.w	#$10,d1
00012924 7000                       		moveq	#0,d0
00012926 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
0001292A E248                       		lsr.w	#1,d0
0001292C 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012930 6000                       		bra.s	@square
00012932                            ; ===========================================================================
00012932                            
00012932                            @type09:
00012932 323C 0030                  		move.w	#$30,d1
00012936 7000                       		moveq	#0,d0
00012938 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
0001293C 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012940 6000                       		bra.s	@square
00012942                            ; ===========================================================================
00012942                            
00012942                            @type0A:
00012942 323C 0050                  		move.w	#$50,d1
00012946 7000                       		moveq	#0,d0
00012948 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
0001294C 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012950 6000                       		bra.s	@square
00012952                            ; ===========================================================================
00012952                            
00012952                            @type0B:
00012952 323C 0070                  		move.w	#$70,d1
00012956 7000                       		moveq	#0,d0
00012958 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
0001295C 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012960                            
00012960                            @square:
00012960 4A43                       		tst.w	d3
00012962 6600                       		bne.s	@loc_1068E
00012964 5228 0022                  		addq.b	#1,obStatus(a0)
00012968 0228 0003 0022             		andi.b	#3,obStatus(a0)
0001296E                            
0001296E                            @loc_1068E:
0001296E 1428 0022                  		move.b	obStatus(a0),d2
00012972 0202 0003                  		andi.b	#3,d2
00012976 6600                       		bne.s	@loc_106AE
00012978 9041                       		sub.w	d1,d0
0001297A D068 0034                  		add.w	fb_origX(a0),d0
0001297E 3140 0008                  		move.w	d0,obX(a0)
00012982 4441                       		neg.w	d1
00012984 D268 0030                  		add.w	fb_origY(a0),d1
00012988 3141 000C                  		move.w	d1,obY(a0)
0001298C 4E75                       		rts	
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            @loc_106AE:
0001298E 5302                       		subq.b	#1,d2
00012990 6600                       		bne.s	@loc_106CC
00012992 5341                       		subq.w	#1,d1
00012994 9041                       		sub.w	d1,d0
00012996 4440                       		neg.w	d0
00012998 D068 0030                  		add.w	fb_origY(a0),d0
0001299C 3140 000C                  		move.w	d0,obY(a0)
000129A0 5241                       		addq.w	#1,d1
000129A2 D268 0034                  		add.w	fb_origX(a0),d1
000129A6 3141 0008                  		move.w	d1,obX(a0)
000129AA 4E75                       		rts	
000129AC                            ; ===========================================================================
000129AC                            
000129AC                            @loc_106CC:
000129AC 5302                       		subq.b	#1,d2
000129AE 6600                       		bne.s	@loc_106EA
000129B0 5341                       		subq.w	#1,d1
000129B2 9041                       		sub.w	d1,d0
000129B4 4440                       		neg.w	d0
000129B6 D068 0034                  		add.w	fb_origX(a0),d0
000129BA 3140 0008                  		move.w	d0,obX(a0)
000129BE 5241                       		addq.w	#1,d1
000129C0 D268 0030                  		add.w	fb_origY(a0),d1
000129C4 3141 000C                  		move.w	d1,obY(a0)
000129C8 4E75                       		rts	
000129CA                            ; ===========================================================================
000129CA                            
000129CA                            @loc_106EA:
000129CA 9041                       		sub.w	d1,d0
000129CC D068 0030                  		add.w	fb_origY(a0),d0
000129D0 3140 000C                  		move.w	d0,obY(a0)
000129D4 4441                       		neg.w	d1
000129D6 D268 0034                  		add.w	fb_origX(a0),d1
000129DA 3141 0008                  		move.w	d1,obX(a0)
000129DE 4E75                       		rts	
000129DE 4E75                       		rts	
000129E0                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
000129E0                            ; ---------------------------------------------------------------------------
000129E0                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000129E0                            ; ---------------------------------------------------------------------------
000129E0                            Map_FBlock_internal:
000129E0 0000                       		dc.w @syz1x1-Map_FBlock_internal
000129E2 0000                       		dc.w @syz2x2-Map_FBlock_internal
000129E4 0000                       		dc.w @syz1x2-Map_FBlock_internal
000129E6 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
000129E8 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
000129EA 0000                       		dc.w @slz-Map_FBlock_internal
000129EC 0000                       		dc.w @lzvert-Map_FBlock_internal
000129EE 0000                       		dc.w @lzhoriz-Map_FBlock_internal
000129F0 01                         @syz1x1:	dc.b 1
000129F1 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
000129F6 04                         @syz2x2:	dc.b 4
000129F7 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
000129FC E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012A01 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012A06 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012A0B 02                         @syz1x2:	dc.b 2
00012A0C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012A11 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012A16 04                         @syzrect2x2:	dc.b 4
00012A17 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012A1C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012A21 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012A26 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012A2B 03                         @syzrect1x3:	dc.b 3
00012A2C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012A31 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012A36 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012A3B 01                         @slz:		dc.b 1
00012A3C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012A41 02                         @lzvert:	dc.b 2
00012A42 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012A47 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012A4C 04                         @lzhoriz:	dc.b 4
00012A4D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012A52 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012A57 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012A5C F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012A62 00                         		even
00012A62 00                         		even
00012A62                            
00012A62                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012A62                            ; ---------------------------------------------------------------------------
00012A62                            ; Object 57 - spiked balls (SYZ, LZ)
00012A62                            ; ---------------------------------------------------------------------------
00012A62                            
00012A62                            SpikeBall:
00012A62 7000                       		moveq	#0,d0
00012A64 1028 0024                  		move.b	obRoutine(a0),d0
00012A68 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012A6C 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012A70                            ; ===========================================================================
00012A70 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012A72 0000                       		dc.w SBall_Move-SBall_Index
00012A74 0000                       		dc.w SBall_Display-SBall_Index
00012A76                            
00012A76 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012A76                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012A76 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012A76 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012A76 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012A76 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012A76                            ; ===========================================================================
00012A76                            
00012A76                            SBall_Main:	; Routine 0
00012A76 5428 0024                  		addq.b	#2,obRoutine(a0)
00012A7A 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012A82 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012A88 117C 0004 0001             		move.b	#4,obRender(a0)
00012A8E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012A94 117C 0008 0014             		move.b	#8,obActWid(a0)
00012A9A 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012AA0 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012AA6 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012AAC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012AB2 6600                       		bne.s	@notlz
00012AB4                            
00012AB4 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012ABA 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012AC0 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012AC8                            
00012AC8                            	@notlz:
00012AC8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012ACC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012AD0 4881                       		ext.w	d1
00012AD2 E741                       		asl.w	#3,d1		; multiply by 8
00012AD4 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012AD8 1028 0022                  		move.b	obStatus(a0),d0
00012ADC E418                       		ror.b	#2,d0
00012ADE 0200 00C0                  		andi.b	#$C0,d0
00012AE2 1140 0026                  		move.b	d0,obAngle(a0)
00012AE6 45E8 0029                  		lea	sball_childs(a0),a2
00012AEA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012AEE 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012AF2 14FC 0000                  		move.b	#0,(a2)+
00012AF6 3601                       		move.w	d1,d3
00012AF8 E94B                       		lsl.w	#4,d3
00012AFA 1143 003C                  		move.b	d3,sball_radius(a0)
00012AFE 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012B00 6500                       		bcs.s	@fail
00012B02 0828 0003 0028             		btst	#3,obSubtype(a0)
00012B08 6700                       		beq.s	@makechain
00012B0A 5341                       		subq.w	#1,d1
00012B0C 6500                       		bcs.s	@fail
00012B0E                            
00012B0E                            @makechain:
00012B0E 6100 D1C2                  		bsr.w	FindFreeObj
00012B12 6600                       		bne.s	@fail
00012B14 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012B18 3A09                       		move.w	a1,d5		; get child object RAM address
00012B1A 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012B1E EC4D                       		lsr.w	#6,d5		; divide by $40
00012B20 0245 007F                  		andi.w	#$7F,d5
00012B24 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012B26 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012B2C 1290                       		move.b	0(a0),0(a1)
00012B2E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012B34 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012B3A 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012B40 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012B46 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012B4C 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012B52 0403 0010                  		subi.b	#$10,d3
00012B56 1343 003C                  		move.b	d3,sball_radius(a1)
00012B5A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012B60 6600                       		bne.s	@notlzagain
00012B62                            
00012B62 4A03                       		tst.b	d3
00012B64 6600                       		bne.s	@notlzagain
00012B66 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012B6C                            
00012B6C                            	@notlzagain:
00012B6C 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012B70                            
00012B70                            	@fail:
00012B70 3A08                       		move.w	a0,d5
00012B72 0445 D000                  		subi.w	#$D000,d5
00012B76 EC4D                       		lsr.w	#6,d5
00012B78 0245 007F                  		andi.w	#$7F,d5
00012B7C 14C5                       		move.b	d5,(a2)+
00012B7E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012B84 6600                       		bne.s	SBall_Move
00012B86                            
00012B86 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012B8C 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012B92                            
00012B92                            SBall_Move:	; Routine 2
00012B92 6100 0000                  		bsr.w	@movesub
00012B96 6000 0000                  		bra.w	@chkdel
00012B9A                            ; ===========================================================================
00012B9A                            
00012B9A                            @movesub:
00012B9A 3028 003E                  		move.w	sball_speed(a0),d0
00012B9E D168 0026                  		add.w	d0,obAngle(a0)
00012BA2 1028 0026                  		move.b	obAngle(a0),d0
00012BA6 4EB9 0000 3A32             		jsr	(CalcSine).l
00012BAC 3428 0038                  		move.w	sball_origY(a0),d2
00012BB0 3628 003A                  		move.w	sball_origX(a0),d3
00012BB4 45E8 0029                  		lea	sball_childs(a0),a2
00012BB8 7C00                       		moveq	#0,d6
00012BBA 1C1A                       		move.b	(a2)+,d6
00012BBC                            
00012BBC                            	@loop:
00012BBC 7800                       		moveq	#0,d4
00012BBE 181A                       		move.b	(a2)+,d4
00012BC0 ED4C                       		lsl.w	#6,d4
00012BC2 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012BC8 2244                       		movea.l	d4,a1
00012BCA 7800                       		moveq	#0,d4
00012BCC 1829 003C                  		move.b	sball_radius(a1),d4
00012BD0 2A04                       		move.l	d4,d5
00012BD2 C9C0                       		muls.w	d0,d4
00012BD4 E084                       		asr.l	#8,d4
00012BD6 CBC1                       		muls.w	d1,d5
00012BD8 E085                       		asr.l	#8,d5
00012BDA D842                       		add.w	d2,d4
00012BDC DA43                       		add.w	d3,d5
00012BDE 3344 000C                  		move.w	d4,obY(a1)
00012BE2 3345 0008                  		move.w	d5,obX(a1)
00012BE6 51CE FFD4                  		dbf	d6,@loop
00012BEA 4E75                       		rts	
00012BEC                            ; ===========================================================================
00012BEC                            
00012BEC                            @chkdel:
00012C0A 6000 CC3A                  		bra.w	DisplaySprite
00012C0E                            ; ===========================================================================
00012C0E                            
00012C0E                            @delete:
00012C0E 7400                       		moveq	#0,d2
00012C10 45E8 0029                  		lea	sball_childs(a0),a2
00012C14 141A                       		move.b	(a2)+,d2
00012C16                            
00012C16                            	@deleteloop:
00012C16 7000                       		moveq	#0,d0
00012C18 101A                       		move.b	(a2)+,d0
00012C1A ED48                       		lsl.w	#6,d0
00012C1C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012C22 2240                       		movea.l	d0,a1
00012C24 6100 CC62                  		bsr.w	DeleteChild
00012C28 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012C2C                            
00012C2C 4E75                       		rts	
00012C2E                            ; ===========================================================================
00012C2E                            
00012C2E                            SBall_Display:	; Routine 4
00012C2E 6000 CC16                  		bra.w	DisplaySprite
00012C2E 6000 CC16                  		bra.w	DisplaySprite
00012C32                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012C32                            ; ---------------------------------------------------------------------------
00012C32                            ; Sprite mappings - chain of spiked balls (SYZ)
00012C32                            ; ---------------------------------------------------------------------------
00012C32                            Map_SBall_internal:
00012C32 0000                       		dc.w @0-Map_SBall_internal
00012C34 01                         @0:		dc.b 1
00012C35 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012C3A                            		even
00012C3A                            		even
00012C3A                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012C3A                            ; ---------------------------------------------------------------------------
00012C3A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012C3A                            ; ---------------------------------------------------------------------------
00012C3A                            Map_SBall2_internal:
00012C3A 0000                       		dc.w @chain-Map_SBall2_internal
00012C3C 0000                       		dc.w @spikeball-Map_SBall2_internal
00012C3E 0000                       		dc.w @base-Map_SBall2_internal
00012C40 01                         @chain:		dc.b 1
00012C41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012C46 01                         @spikeball:	dc.b 1
00012C47 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012C4C 01                         @base:		dc.b 1
00012C4D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012C52                            		even
00012C52                            		even
00012C52                            		include	"_incObj\58 Big Spiked Ball.asm"
00012C52                            ; ---------------------------------------------------------------------------
00012C52                            ; Object 58 - giant spiked balls (SYZ)
00012C52                            ; ---------------------------------------------------------------------------
00012C52                            
00012C52                            BigSpikeBall:
00012C52 7000                       		moveq	#0,d0
00012C54 1028 0024                  		move.b	obRoutine(a0),d0
00012C58 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012C5C 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012C60                            ; ===========================================================================
00012C60 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012C62 0000                       		dc.w BBall_Move-BBall_Index
00012C64                            
00012C64 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012C64 =00000038                  bball_origY:	equ $38		; original y-axis position
00012C64 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012C64 =0000003E                  bball_speed:	equ $3E		; speed
00012C64                            ; ===========================================================================
00012C64                            
00012C64                            BBall_Main:	; Routine 0
00012C64 5428 0024                  		addq.b	#2,obRoutine(a0)
00012C68 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012C70 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012C76 117C 0004 0001             		move.b	#4,obRender(a0)
00012C7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012C82 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012C88 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012C8E 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012C94 117C 0086 0020             		move.b	#$86,obColType(a0)
00012C9A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C9E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012CA2 4881                       		ext.w	d1
00012CA4 E741                       		asl.w	#3,d1		; multiply by 8
00012CA6 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012CAA 1028 0022                  		move.b	obStatus(a0),d0
00012CAE E418                       		ror.b	#2,d0
00012CB0 0200 00C0                  		andi.b	#$C0,d0
00012CB4 1140 0026                  		move.b	d0,obAngle(a0)
00012CB8 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012CBE                            
00012CBE                            BBall_Move:	; Routine 2
00012CBE 7000                       		moveq	#0,d0
00012CC0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012CC4 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012CC8 D040                       		add.w	d0,d0
00012CCA 323B 0000                  		move.w	@index(pc,d0.w),d1
00012CCE 4EBB 1000                  		jsr	@index(pc,d1.w)
00012CF0 6000 CB54                  		bra.w	DisplaySprite
00012CF4                            ; ===========================================================================
00012CF4 0000                       @index:		dc.w @type00-@index
00012CF6 0000                       		dc.w @type01-@index
00012CF8 0000                       		dc.w @type02-@index
00012CFA 0000                       		dc.w @type03-@index
00012CFC                            ; ===========================================================================
00012CFC                            
00012CFC                            @type00:
00012CFC 4E75                       		rts	
00012CFE                            ; ===========================================================================
00012CFE                            
00012CFE                            @type01:
00012CFE 323C 0060                  		move.w	#$60,d1
00012D02 7000                       		moveq	#0,d0
00012D04 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012D08 0828 0000 0022             		btst	#0,obStatus(a0)
00012D0E 6700                       		beq.s	@noflip1
00012D10 4440                       		neg.w	d0
00012D12 D041                       		add.w	d1,d0
00012D14                            
00012D14                            	@noflip1:
00012D14 3228 003A                  		move.w	bball_origX(a0),d1
00012D18 9240                       		sub.w	d0,d1
00012D1A 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012D1E 4E75                       		rts	
00012D20                            ; ===========================================================================
00012D20                            
00012D20                            @type02:
00012D20 323C 0060                  		move.w	#$60,d1
00012D24 7000                       		moveq	#0,d0
00012D26 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012D2A 0828 0000 0022             		btst	#0,obStatus(a0)
00012D30 6700                       		beq.s	@noflip2
00012D32 4440                       		neg.w	d0
00012D34 0640 0080                  		addi.w	#$80,d0
00012D38                            
00012D38                            	@noflip2:
00012D38 3228 0038                  		move.w	bball_origY(a0),d1
00012D3C 9240                       		sub.w	d0,d1
00012D3E 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012D42 4E75                       		rts	
00012D44                            ; ===========================================================================
00012D44                            
00012D44                            @type03:
00012D44 3028 003E                  		move.w	bball_speed(a0),d0
00012D48 D168 0026                  		add.w	d0,obAngle(a0)
00012D4C 1028 0026                  		move.b	obAngle(a0),d0
00012D50 4EB9 0000 3A32             		jsr	(CalcSine).l
00012D56 3428 0038                  		move.w	bball_origY(a0),d2
00012D5A 3628 003A                  		move.w	bball_origX(a0),d3
00012D5E 7800                       		moveq	#0,d4
00012D60 1828 003C                  		move.b	bball_radius(a0),d4
00012D64 2A04                       		move.l	d4,d5
00012D66 C9C0                       		muls.w	d0,d4
00012D68 E084                       		asr.l	#8,d4
00012D6A CBC1                       		muls.w	d1,d5
00012D6C E085                       		asr.l	#8,d5
00012D6E D842                       		add.w	d2,d4
00012D70 DA43                       		add.w	d3,d5
00012D72 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012D76 3145 0008                  		move.w	d5,obX(a0)
00012D7A 4E75                       		rts	
00012D7A 4E75                       		rts	
00012D7C                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012D7C                            ; --------------------------------------------------------------------------------
00012D7C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012D7C                            ; --------------------------------------------------------------------------------
00012D7C                            
00012D7C                            SME_u_DKx:	
00012D7C 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012D80 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012D82 05                         SME_u_DKx_6:	dc.b 5	
00012D83 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012D88 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012D8D F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012D92 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012D97 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012D9C 01                         SME_u_DKx_20:	dc.b 1	
00012D9D F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012DA2 02                         SME_u_DKx_26:	dc.b 2	
00012DA3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012DA8 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012DAE 00                         		even
00012DAE 00                         		even
00012DAE                            		include	"_incObj\59 SLZ Elevators.asm"
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012DAE                            ; ---------------------------------------------------------------------------
00012DAE                            
00012DAE                            Elevator:
00012DAE 7000                       		moveq	#0,d0
00012DB0 1028 0024                  		move.b	obRoutine(a0),d0
00012DB4 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012DB8 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012DDA 6000 CA6A                  		bra.w	DisplaySprite
00012DDE                            ; ===========================================================================
00012DDE 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012DE0 0000                       		dc.w Elev_Platform-Elev_Index
00012DE2 0000                       		dc.w Elev_Action-Elev_Index
00012DE4 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012DE6                            
00012DE6 =00000032                  elev_origX:	equ $32		; original x-axis position
00012DE6 =00000030                  elev_origY:	equ $30		; original y-axis position
00012DE6 =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012DE6                            
00012DE6 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012DE8                            
00012DE8 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012DEA 2001                       		dc.b $20, 1
00012DEC 3401                       		dc.b $34, 1
00012DEE 1003                       		dc.b $10, 3
00012DF0 2003                       		dc.b $20, 3
00012DF2 3403                       		dc.b $34, 3
00012DF4 1401                       		dc.b $14, 1
00012DF6 2401                       		dc.b $24, 1
00012DF8 2C01                       		dc.b $2C, 1
00012DFA 1403                       		dc.b $14, 3
00012DFC 2403                       		dc.b $24, 3
00012DFE 2C03                       		dc.b $2C, 3
00012E00 2005                       		dc.b $20, 5
00012E02 2007                       		dc.b $20, 7
00012E04 3009                       		dc.b $30, 9
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            Elev_Main:	; Routine 0
00012E06 5428 0024                  		addq.b	#2,obRoutine(a0)
00012E0A 7000                       		moveq	#0,d0
00012E0C 1028 0028                  		move.b	obSubtype(a0),d0
00012E10 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012E12 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012E16 0240 007F                  		andi.w	#$7F,d0
00012E1A C0FC 0006                  		mulu.w	#6,d0
00012E1E 3140 003C                  		move.w	d0,elev_dist(a0)
00012E22 3140 003E                  		move.w	d0,$3E(a0)
00012E26 588F                       		addq.l	#4,sp
00012E28 4E75                       		rts	
00012E2A                            ; ===========================================================================
00012E2A                            
00012E2A                            	@normal:
00012E2A E648                       		lsr.w	#3,d0
00012E2C 0240 001E                  		andi.w	#$1E,d0
00012E30 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012E34 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012E38 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012E3C 7000                       		moveq	#0,d0
00012E3E 1028 0028                  		move.b	obSubtype(a0),d0
00012E42 D040                       		add.w	d0,d0
00012E44 0240 001E                  		andi.w	#$1E,d0
00012E48 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012E4C 101A                       		move.b	(a2)+,d0
00012E4E E548                       		lsl.w	#2,d0
00012E50 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012E54 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012E58 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012E60 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012E66 117C 0004 0001             		move.b	#4,obRender(a0)
00012E6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012E72 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012E78 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012E7E                            
00012E7E                            Elev_Platform:	; Routine 2
00012E7E 7200                       		moveq	#0,d1
00012E80 1228 0014                  		move.b	obActWid(a0),d1
00012E84 4EB9 0000 905A             		jsr	(PlatformObject).l
00012E8A 6000 0000                  		bra.w	Elev_Types
00012E8E                            ; ===========================================================================
00012E8E                            
00012E8E                            Elev_Action:	; Routine 4
00012E8E 7200                       		moveq	#0,d1
00012E90 1228 0014                  		move.b	obActWid(a0),d1
00012E94 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00012E9A 3F28 0008                  		move.w	obX(a0),-(sp)
00012E9E 6100 0000                  		bsr.w	Elev_Types
00012EA2 341F                       		move.w	(sp)+,d2
00012EA4 4A10                       		tst.b	0(a0)
00012EA6 6700                       		beq.s	@deleted
00012EA8 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
00012EAE                            
00012EAE                            	@deleted:
00012EAE 4E75                       		rts	
00012EB0                            ; ===========================================================================
00012EB0                            
00012EB0                            Elev_Types:
00012EB0 7000                       		moveq	#0,d0
00012EB2 1028 0028                  		move.b	obSubtype(a0),d0
00012EB6 0240 000F                  		andi.w	#$F,d0
00012EBA D040                       		add.w	d0,d0
00012EBC 323B 0000                  		move.w	@index(pc,d0.w),d1
00012EC0 4EFB 1000                  		jmp	@index(pc,d1.w)
00012EC4                            ; ===========================================================================
00012EC4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012EC8 0000 0000                  		dc.w @type02-@index, @type01-@index
00012ECC 0000 0000                  		dc.w @type04-@index, @type01-@index
00012ED0 0000 0000                  		dc.w @type06-@index, @type01-@index
00012ED4 0000 0000                  		dc.w @type08-@index, @type09-@index
00012ED8                            ; ===========================================================================
00012ED8                            
00012ED8                            @type00:
00012ED8 4E75                       		rts	
00012EDA                            ; ===========================================================================
00012EDA                            
00012EDA                            @type01:
00012EDA 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012EE0 6600                       		bne.s	@notstanding
00012EE2 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012EE6                            
00012EE6                            	@notstanding:
00012EE6 4E75                       		rts	
00012EE8                            ; ===========================================================================
00012EE8                            
00012EE8                            @type02:
00012EE8 6100 0000                  		bsr.w	Elev_Move
00012EEC 3028 0034                  		move.w	$34(a0),d0
00012EF0 4440                       		neg.w	d0
00012EF2 D068 0030                  		add.w	elev_origY(a0),d0
00012EF6 3140 000C                  		move.w	d0,obY(a0)
00012EFA 4E75                       		rts	
00012EFC                            ; ===========================================================================
00012EFC                            
00012EFC                            @type04:
00012EFC 6100 0000                  		bsr.w	Elev_Move
00012F00 3028 0034                  		move.w	$34(a0),d0
00012F04 D068 0030                  		add.w	elev_origY(a0),d0
00012F08 3140 000C                  		move.w	d0,obY(a0)
00012F0C 4E75                       		rts	
00012F0E                            ; ===========================================================================
00012F0E                            
00012F0E                            @type06:
00012F0E 6100 0000                  		bsr.w	Elev_Move
00012F12 3028 0034                  		move.w	$34(a0),d0
00012F16 E240                       		asr.w	#1,d0
00012F18 4440                       		neg.w	d0
00012F1A D068 0030                  		add.w	elev_origY(a0),d0
00012F1E 3140 000C                  		move.w	d0,obY(a0)
00012F22 3028 0034                  		move.w	$34(a0),d0
00012F26 D068 0032                  		add.w	elev_origX(a0),d0
00012F2A 3140 0008                  		move.w	d0,obX(a0)
00012F2E 4E75                       		rts	
00012F30                            ; ===========================================================================
00012F30                            
00012F30                            @type08:
00012F30 6100 0000                  		bsr.w	Elev_Move
00012F34 3028 0034                  		move.w	$34(a0),d0
00012F38 E240                       		asr.w	#1,d0
00012F3A D068 0030                  		add.w	elev_origY(a0),d0
00012F3E 3140 000C                  		move.w	d0,obY(a0)
00012F42 3028 0034                  		move.w	$34(a0),d0
00012F46 4440                       		neg.w	d0
00012F48 D068 0032                  		add.w	elev_origX(a0),d0
00012F4C 3140 0008                  		move.w	d0,obX(a0)
00012F50 4E75                       		rts	
00012F52                            ; ===========================================================================
00012F52                            
00012F52                            @type09:
00012F52 6100 0000                  		bsr.w	Elev_Move
00012F56 3028 0034                  		move.w	$34(a0),d0
00012F5A 4440                       		neg.w	d0
00012F5C D068 0030                  		add.w	elev_origY(a0),d0
00012F60 3140 000C                  		move.w	d0,obY(a0)
00012F64 4A28 0028                  		tst.b	obSubtype(a0)
00012F68 6700 0000                  		beq.w	@typereset
00012F6C 4E75                       		rts	
00012F6E                            ; ===========================================================================
00012F6E                            
00012F6E                            	@typereset:
00012F6E 0828 0003 0022             		btst	#3,obStatus(a0)
00012F74 6700                       		beq.s	@delete
00012F76 08E9 0001 0022             		bset	#1,obStatus(a1)
00012F7C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012F82 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012F88                            
00012F88                            	@delete:
00012F88 6000 C8FC                  		bra.w	DeleteObject
00012F8C                            
00012F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F8C                            
00012F8C                            
00012F8C                            Elev_Move:
00012F8C 3028 0038                  		move.w	$38(a0),d0
00012F90 4A28 003A                  		tst.b	$3A(a0)
00012F94 6600                       		bne.s	loc_10CC8
00012F96 0C40 0800                  		cmpi.w	#$800,d0
00012F9A 6400                       		bcc.s	loc_10CD0
00012F9C 0640 0010                  		addi.w	#$10,d0
00012FA0 6000                       		bra.s	loc_10CD0
00012FA2                            ; ===========================================================================
00012FA2                            
00012FA2                            loc_10CC8:
00012FA2 4A40                       		tst.w	d0
00012FA4 6700                       		beq.s	loc_10CD0
00012FA6 0440 0010                  		subi.w	#$10,d0
00012FAA                            
00012FAA                            loc_10CD0:
00012FAA 3140 0038                  		move.w	d0,$38(a0)
00012FAE 48C0                       		ext.l	d0
00012FB0 E180                       		asl.l	#8,d0
00012FB2 D0A8 0034                  		add.l	$34(a0),d0
00012FB6 2140 0034                  		move.l	d0,$34(a0)
00012FBA 4840                       		swap	d0
00012FBC 3428 003C                  		move.w	elev_dist(a0),d2
00012FC0 B042                       		cmp.w	d2,d0
00012FC2 6300                       		bls.s	loc_10CF0
00012FC4 117C 0001 003A             		move.b	#1,$3A(a0)
00012FCA                            
00012FCA                            loc_10CF0:
00012FCA D442                       		add.w	d2,d2
00012FCC B042                       		cmp.w	d2,d0
00012FCE 6600                       		bne.s	locret_10CFA
00012FD0 4228 0028                  		clr.b	obSubtype(a0)
00012FD4                            
00012FD4                            locret_10CFA:
00012FD4 4E75                       		rts	
00012FD6                            ; End of function Elev_Move
00012FD6                            
00012FD6                            ; ===========================================================================
00012FD6                            
00012FD6                            Elev_MakeMulti:	; Routine 6
00012FD6 5368 003C                  		subq.w	#1,elev_dist(a0)
00012FDA 6600                       		bne.s	@chkdel
00012FDC 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012FE2 6100 CCEE                  		bsr.w	FindFreeObj
00012FE6 6600                       		bne.s	@chkdel
00012FE8 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012FEC 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012FF2 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012FF8 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012FFE                            
00012FFE                            @chkdel:
00012FFE 588F                       		addq.l	#4,sp
0001301E 4E75                       		rts	
0001301E 4E75                       		rts	
00013020                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013020                            ; ---------------------------------------------------------------------------
00013020                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013020                            ; ---------------------------------------------------------------------------
00013020                            Map_Elev_internal:
00013020 0000                       		dc.w @elevator-Map_Elev_internal
00013022 03                         @elevator:	dc.b 3
00013023 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013028 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001302D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013032                            		even
00013032                            		even
00013032                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013032                            ; ---------------------------------------------------------------------------
00013032                            ; Object 5A - platforms	moving in circles (SLZ)
00013032                            ; ---------------------------------------------------------------------------
00013032                            
00013032                            CirclingPlatform:
00013032 7000                       		moveq	#0,d0
00013034 1028 0024                  		move.b	obRoutine(a0),d0
00013038 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
0001303C 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
0001305E 6000 C7E6                  		bra.w	DisplaySprite
00013062                            ; ===========================================================================
00013062 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00013064 0000                       		dc.w Circ_Platform-Circ_Index
00013066 0000                       		dc.w Circ_Action-Circ_Index
00013068                            
00013068 =00000032                  circ_origX:	equ $32		; original x-axis position
00013068 =00000030                  circ_origY:	equ $30		; original y-axis position
00013068                            ; ===========================================================================
00013068                            
00013068                            Circ_Main:	; Routine 0
00013068 5428 0024                  		addq.b	#2,obRoutine(a0)
0001306C 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00013074 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001307A 117C 0004 0001             		move.b	#4,obRender(a0)
00013080 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013086 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001308C 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00013092 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00013098                            
00013098                            Circ_Platform:	; Routine 2
00013098 7200                       		moveq	#0,d1
0001309A 1228 0014                  		move.b	obActWid(a0),d1
0001309E 4EB9 0000 905A             		jsr	(PlatformObject).l
000130A4 6000 0000                  		bra.w	Circ_Types
000130A8                            ; ===========================================================================
000130A8                            
000130A8                            Circ_Action:	; Routine 4
000130A8 7200                       		moveq	#0,d1
000130AA 1228 0014                  		move.b	obActWid(a0),d1
000130AE 4EB9 0000 91CE             		jsr	(ExitPlatform).l
000130B4 3F28 0008                  		move.w	obX(a0),-(sp)
000130B8 6100 0000                  		bsr.w	Circ_Types
000130BC 341F                       		move.w	(sp)+,d2
000130BE 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
000130C4                            ; ===========================================================================
000130C4                            
000130C4                            Circ_Types:
000130C4 7000                       		moveq	#0,d0
000130C6 1028 0028                  		move.b	obSubtype(a0),d0
000130CA 0240 000C                  		andi.w	#$C,d0
000130CE E248                       		lsr.w	#1,d0
000130D0 323B 0000                  		move.w	@index(pc,d0.w),d1
000130D4 4EFB 1000                  		jmp	@index(pc,d1.w)
000130D8                            ; ===========================================================================
000130D8 0000                       @index:		dc.w @type00-@index
000130DA 0000                       		dc.w @type04-@index
000130DC                            ; ===========================================================================
000130DC                            
000130DC                            @type00:
000130DC 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000130E0 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000130E4 4881                       		ext.w	d1
000130E6 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000130EA 0402 0050                  		subi.b	#$50,d2
000130EE 4882                       		ext.w	d2
000130F0 0828 0000 0028             		btst	#0,obSubtype(a0)
000130F6 6700                       		beq.s	@noshift00a
000130F8 4441                       		neg.w	d1
000130FA 4442                       		neg.w	d2
000130FC                            
000130FC                            	@noshift00a:
000130FC 0828 0001 0028             		btst	#1,obSubtype(a0)
00013102 6700                       		beq.s	@noshift00b
00013104 4441                       		neg.w	d1
00013106 C342                       		exg	d1,d2
00013108                            
00013108                            	@noshift00b:
00013108 D268 0032                  		add.w	circ_origX(a0),d1
0001310C 3141 0008                  		move.w	d1,obX(a0)
00013110 D468 0030                  		add.w	circ_origY(a0),d2
00013114 3142 000C                  		move.w	d2,obY(a0)
00013118 4E75                       		rts	
0001311A                            ; ===========================================================================
0001311A                            
0001311A                            @type04:
0001311A 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
0001311E 0401 0050                  		subi.b	#$50,d1
00013122 4881                       		ext.w	d1
00013124 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013128 0402 0050                  		subi.b	#$50,d2
0001312C 4882                       		ext.w	d2
0001312E 0828 0000 0028             		btst	#0,obSubtype(a0)
00013134 6700                       		beq.s	@noshift04a
00013136 4441                       		neg.w	d1
00013138 4442                       		neg.w	d2
0001313A                            
0001313A                            	@noshift04a:
0001313A 0828 0001 0028             		btst	#1,obSubtype(a0)
00013140 6700                       		beq.s	@noshift04b
00013142 4441                       		neg.w	d1
00013144 C342                       		exg	d1,d2
00013146                            
00013146                            	@noshift04b:
00013146 4441                       		neg.w	d1
00013148 D268 0032                  		add.w	circ_origX(a0),d1
0001314C 3141 0008                  		move.w	d1,obX(a0)
00013150 D468 0030                  		add.w	circ_origY(a0),d2
00013154 3142 000C                  		move.w	d2,obY(a0)
00013158 4E75                       		rts	
00013158 4E75                       		rts	
0001315A                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
0001315A                            ; ---------------------------------------------------------------------------
0001315A                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001315A                            ; ---------------------------------------------------------------------------
0001315A                            Map_Circ_internal:
0001315A 0000                       		dc.w @platform-Map_Circ_internal
0001315C 02                         @platform:	dc.b 2
0001315D F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013162 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00013168 00                         		even
00013168 00                         		even
00013168                            		include	"_incObj\5B Staircase.asm"
00013168                            ; ---------------------------------------------------------------------------
00013168                            ; Object 5B - blocks that form a staircase (SLZ)
00013168                            ; ---------------------------------------------------------------------------
00013168                            
00013168                            Staircase:
00013168 7000                       		moveq	#0,d0
0001316A 1028 0024                  		move.b	obRoutine(a0),d0
0001316E 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00013172 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00013194 6000 C6B0                  		bra.w	DisplaySprite
00013198                            ; ===========================================================================
00013198 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
0001319A 0000                       		dc.w Stair_Move-Stair_Index
0001319C 0000                       		dc.w Stair_Solid-Stair_Index
0001319E                            
0001319E =00000030                  stair_origX:	equ $30		; original x-axis position
0001319E =00000032                  stair_origY:	equ $32		; original y-axis position
0001319E                            
0001319E =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            Stair_Main:	; Routine 0
0001319E 5428 0024                  		addq.b	#2,obRoutine(a0)
000131A2 7638                       		moveq	#$38,d3
000131A4 7801                       		moveq	#1,d4
000131A6 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000131AC 6700                       		beq.s	@notflipped	; if not, branch
000131AE 763B                       		moveq	#$3B,d3
000131B0 78FF                       		moveq	#-1,d4
000131B2                            
000131B2                            	@notflipped:
000131B2 3428 0008                  		move.w	obX(a0),d2
000131B6 2248                       		movea.l	a0,a1
000131B8 7203                       		moveq	#3,d1
000131BA 6000                       		bra.s	@makeblocks
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            @loop:
000131BC 6100 CB2A                  		bsr.w	FindNextFreeObj
000131C0 6600 0000                  		bne.w	@fail
000131C4 137C 0004 0024             		move.b	#4,obRoutine(a1)
000131CA                            
000131CA                            @makeblocks:
000131CA 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
000131CE 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000131D6 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000131DC 137C 0004 0001             		move.b	#4,obRender(a1)
000131E2 337C 0180 0018             		move.w	#$180,obPriority(a1)
000131E8 137C 0010 0014             		move.b	#$10,obActWid(a1)
000131EE 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
000131F4 3342 0008                  		move.w	d2,obX(a1)
000131F8 3368 000C 000C             		move.w	obY(a0),obY(a1)
000131FE 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00013204 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
0001320A 0642 0020                  		addi.w	#$20,d2
0001320E 1343 0037                  		move.b	d3,$37(a1)
00013212 2348 003C                  		move.l	a0,stair_parent(a1)
00013216 D604                       		add.b	d4,d3
00013218 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
0001321C                            
0001321C                            	@fail:
0001321C                            
0001321C                            Stair_Move:	; Routine 2
0001321C 7000                       		moveq	#0,d0
0001321E 1028 0028                  		move.b	obSubtype(a0),d0
00013222 0240 0007                  		andi.w	#7,d0
00013226 D040                       		add.w	d0,d0
00013228 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
0001322C 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013230                            
00013230                            Stair_Solid:	; Routine 4
00013230 2468 003C                  		movea.l	stair_parent(a0),a2
00013234 7000                       		moveq	#0,d0
00013236 1028 0037                  		move.b	$37(a0),d0
0001323A 1032 0000                  		move.b	(a2,d0.w),d0
0001323E D068 0032                  		add.w	stair_origY(a0),d0
00013242 3140 000C                  		move.w	d0,obY(a0)
00013246 7200                       		moveq	#0,d1
00013248 1228 0014                  		move.b	obActWid(a0),d1
0001324C 0641 000B                  		addi.w	#$B,d1
00013250 343C 0010                  		move.w	#$10,d2
00013254 363C 0011                  		move.w	#$11,d3
00013258 3828 0008                  		move.w	obX(a0),d4
0001325C 6100 E9F6                  		bsr.w	SolidObject
00013260 4A04                       		tst.b	d4
00013262 6A00                       		bpl.s	loc_10F92
00013264 1544 0036                  		move.b	d4,$36(a2)
00013268                            
00013268                            loc_10F92:
00013268 0828 0003 0022             		btst	#3,obStatus(a0)
0001326E 6700                       		beq.s	locret_10FA0
00013270 157C 0001 0036             		move.b	#1,$36(a2)
00013276                            
00013276                            locret_10FA0:
00013276 4E75                       		rts	
00013278                            ; ===========================================================================
00013278 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
0001327A 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001327C 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001327E 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00013280                            ; ===========================================================================
00013280                            
00013280                            Stair_Type00:
00013280 4A68 0034                  		tst.w	$34(a0)
00013284 6600                       		bne.s	loc_10FC0
00013286 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001328C 6600                       		bne.s	locret_10FBE
0001328E 317C 001E 0034             		move.w	#$1E,$34(a0)
00013294                            
00013294                            locret_10FBE:
00013294 4E75                       		rts	
00013296                            ; ===========================================================================
00013296                            
00013296                            loc_10FC0:
00013296 5368 0034                  		subq.w	#1,$34(a0)
0001329A 66F8                       		bne.s	locret_10FBE
0001329C 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000132A0 4E75                       		rts	
000132A2                            ; ===========================================================================
000132A2                            
000132A2                            Stair_Type02:
000132A2 4A68 0034                  		tst.w	$34(a0)
000132A6 6600                       		bne.s	loc_10FE0
000132A8 4A28 0036                  		tst.b	$36(a0)
000132AC 6A00                       		bpl.s	locret_10FDE
000132AE 317C 003C 0034             		move.w	#$3C,$34(a0)
000132B4                            
000132B4                            locret_10FDE:
000132B4 4E75                       		rts	
000132B6                            ; ===========================================================================
000132B6                            
000132B6                            loc_10FE0:
000132B6 5368 0034                  		subq.w	#1,$34(a0)
000132BA 6600                       		bne.s	loc_10FEC
000132BC 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000132C0 4E75                       		rts	
000132C2                            ; ===========================================================================
000132C2                            
000132C2                            loc_10FEC:
000132C2 43E8 0038                  		lea	$38(a0),a1
000132C6 3028 0034                  		move.w	$34(a0),d0
000132CA E408                       		lsr.b	#2,d0
000132CC 0200 0001                  		andi.b	#1,d0
000132D0 12C0                       		move.b	d0,(a1)+
000132D2 0A00 0001                  		eori.b	#1,d0
000132D6 12C0                       		move.b	d0,(a1)+
000132D8 0A00 0001                  		eori.b	#1,d0
000132DC 12C0                       		move.b	d0,(a1)+
000132DE 0A00 0001                  		eori.b	#1,d0
000132E2 12C0                       		move.b	d0,(a1)+
000132E4 4E75                       		rts	
000132E6                            ; ===========================================================================
000132E6                            
000132E6                            Stair_Type01:
000132E6 43E8 0038                  		lea	$38(a0),a1
000132EA 0C11 0080                  		cmpi.b	#$80,(a1)
000132EE 6700                       		beq.s	locret_11038
000132F0 5211                       		addq.b	#1,(a1)
000132F2 7200                       		moveq	#0,d1
000132F4 1219                       		move.b	(a1)+,d1
000132F6 4841                       		swap	d1
000132F8 E289                       		lsr.l	#1,d1
000132FA 2401                       		move.l	d1,d2
000132FC E289                       		lsr.l	#1,d1
000132FE 2601                       		move.l	d1,d3
00013300 D682                       		add.l	d2,d3
00013302 4841                       		swap	d1
00013304 4842                       		swap	d2
00013306 4843                       		swap	d3
00013308 12C3                       		move.b	d3,(a1)+
0001330A 12C2                       		move.b	d2,(a1)+
0001330C 12C1                       		move.b	d1,(a1)+
0001330E                            
0001330E                            locret_11038:
0001330E 4E75                       		rts	
00013310 4E75                       		rts	
00013310 4E75                       		rts	
00013312                            Map_Stair:	include	"_maps\Staircase.asm"
00013312                            ; ---------------------------------------------------------------------------
00013312                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013312                            ; ---------------------------------------------------------------------------
00013312                            Map_Stair_internal:
00013312 0000                       		dc.w @block-Map_Stair_internal
00013314 01                         @block:		dc.b 1
00013315 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001331A                            		even
0001331A                            		even
0001331A                            		include	"_incObj\5C Pylon.asm"
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            ; Object 5C - metal pylons in foreground (SLZ)
0001331A                            ; ---------------------------------------------------------------------------
0001331A                            
0001331A                            Pylon:
0001331A 7000                       		moveq	#0,d0
0001331C 1028 0024                  		move.b	obRoutine(a0),d0
00013320 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013324 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013328                            ; ===========================================================================
00013328 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001332A 0000                       		dc.w Pyl_Display-Pyl_Index
0001332C                            ; ===========================================================================
0001332C                            
0001332C                            Pyl_Main:	; Routine 0
0001332C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013330 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013338 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001333E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013344                            
00013344                            Pyl_Display:	; Routine 2
00013344 2238 F700                  		move.l	(v_screenposx).w,d1
00013348 D281                       		add.l	d1,d1
0001334A 4841                       		swap	d1
0001334C 4441                       		neg.w	d1
0001334E 3141 0008                  		move.w	d1,obX(a0)
00013352 2238 F704                  		move.l	(v_screenposy).w,d1
00013356 D281                       		add.l	d1,d1
00013358 4841                       		swap	d1
0001335A 0241 003F                  		andi.w	#$3F,d1
0001335E 4441                       		neg.w	d1
00013360 0641 0100                  		addi.w	#$100,d1
00013364 3141 000A                  		move.w	d1,obScreenY(a0)
00013368 6000 C4DC                  		bra.w	DisplaySprite
00013368 6000 C4DC                  		bra.w	DisplaySprite
0001336C                            Map_Pylon:	include	"_maps\Pylon.asm"
0001336C                            ; ---------------------------------------------------------------------------
0001336C                            ; Sprite mappings - metal pylons in foreground (SLZ)
0001336C                            ; ---------------------------------------------------------------------------
0001336C                            Map_Pylon_internal:
0001336C 0000                       		dc.w @pylon-Map_Pylon_internal
0001336E 09                         @pylon:		dc.b 9
0001336F 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00013374 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013379 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001337E E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00013383 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00013388 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001338D 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00013392 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00013397 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001339C                            		even
0001339C                            		even
0001339C                            
0001339C                            		include	"_incObj\1B Water Surface.asm"
0001339C                            ; ---------------------------------------------------------------------------
0001339C                            ; Object 1B - water surface (LZ)
0001339C                            ; ---------------------------------------------------------------------------
0001339C                            
0001339C                            WaterSurface:
0001339C 7000                       		moveq	#0,d0
0001339E 1028 0024                  		move.b	obRoutine(a0),d0
000133A2 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000133A6 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000133AA                            ; ===========================================================================
000133AA 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000133AC 0000                       		dc.w Surf_Action-Surf_Index
000133AE                            
000133AE =00000030                  surf_origX:	equ $30		; original x-axis position
000133AE =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000133AE                            ; ===========================================================================
000133AE                            
000133AE                            Surf_Main:	; Routine 0
000133AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000133B2 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000133BA 317C C300 0002             		move.w	#$C300,obGfx(a0)
000133C0 117C 0004 0001             		move.b	#4,obRender(a0)
000133C6 117C 0080 0014             		move.b	#$80,obActWid(a0)
000133CC 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000133D2                            
000133D2                            Surf_Action:	; Routine 2
000133D2 3238 F700                  		move.w	(v_screenposx).w,d1
000133D6 0241 FFE0                  		andi.w	#$FFE0,d1
000133DA D268 0030                  		add.w	surf_origX(a0),d1
000133DE 0838 0000 FE05             		btst	#0,(v_framebyte).w
000133E4 6700                       		beq.s	@even		; branch on even frames
000133E6 0641 0020                  		addi.w	#$20,d1
000133EA                            
000133EA                            	@even:
000133EA 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000133EE 3238 F646                  		move.w	(v_waterpos1).w,d1
000133F2 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
000133F6 4A28 0032                  		tst.b	surf_freeze(a0)
000133FA 6600                       		bne.s	@stopped
000133FC 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013402 6700                       		beq.s	@animate	; if not, branch
00013404 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013408 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001340E 6000                       		bra.s	@display
00013410                            ; ===========================================================================
00013410                            
00013410                            @stopped:
00013410 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013414 6600                       		bne.s	@display	; if yes, branch
00013416 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
0001341C 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013420                            
00013420                            @animate:
00013420 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013424 6A00                       		bpl.s	@display
00013426 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001342C 5228 001A                  		addq.b	#1,obFrame(a0)
00013430 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00013436 6500                       		bcs.s	@display
00013438 117C 0000 001A             		move.b	#0,obFrame(a0)
0001343E                            
0001343E                            @display:
0001343E 6000 C406                  		bra.w	DisplaySprite
0001343E 6000 C406                  		bra.w	DisplaySprite
00013442                            Map_Surf:	include	"_maps\Water Surface.asm"
00013442                            ; --------------------------------------------------------------------------------
00013442                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013442                            ; --------------------------------------------------------------------------------
00013442                            
00013442                            SME_LGSi8:	
00013442 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
00013446 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001344A 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
0001344E 03                         SME_LGSi8_C:	dc.b 3	
0001344F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013454 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013459 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
0001345E 03                         SME_LGSi8_1C:	dc.b 3	
0001345F F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013464 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013469 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001346E 03                         SME_LGSi8_2C:	dc.b 3	
0001346F F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
00013474 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013479 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001347E 06                         SME_LGSi8_3C:	dc.b 6	
0001347F F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013484 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
00013489 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001348E F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00013493 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013498 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
0001349D 06                         SME_LGSi8_5B:	dc.b 6	
0001349E F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000134A3 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000134A8 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000134AD F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000134B2 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000134B7 F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000134BC 06                         SME_LGSi8_7A:	dc.b 6	
000134BD F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000134C2 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000134C7 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000134CC F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000134D1 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000134D6 F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000134DC 00                         		even
000134DC 00                         		even
000134DC                            		include	"_incObj\0B Pole that Breaks.asm"
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            ; Object 0B - pole that	breaks (LZ)
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            
000134DC                            Pole:
000134DC 7000                       		moveq	#0,d0
000134DE 1028 0024                  		move.b	obRoutine(a0),d0
000134E2 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000134E6 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000134EA                            ; ===========================================================================
000134EA 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000134EC 0000                       		dc.w Pole_Action-Pole_Index
000134EE 0000                       		dc.w Pole_Display-Pole_Index
000134F0                            
000134F0 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000134F0 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000134F0                            ; ===========================================================================
000134F0                            
000134F0                            Pole_Main:	; Routine 0
000134F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000134F4 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
000134FC 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013502 117C 0004 0001             		move.b	#4,obRender(a0)
00013508 117C 0008 0014             		move.b	#8,obActWid(a0)
0001350E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013514 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001351A 7000                       		moveq	#0,d0
0001351C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013520 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013524 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013528                            
00013528                            Pole_Action:	; Routine 2
00013528 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
0001352C 6700                       		beq.s	@grab		; if not, branch
0001352E 4A68 0030                  		tst.w	pole_time(a0)
00013532 6700                       		beq.s	@moveup
00013534 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013538 6600                       		bne.s	@moveup
0001353A 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013540 6000                       		bra.s	@release
00013542                            ; ===========================================================================
00013542                            
00013542                            @moveup:
00013542 43F8 D000                  		lea	(v_player).w,a1
00013546 3028 000C                  		move.w	obY(a0),d0
0001354A 0440 0018                  		subi.w	#$18,d0
0001354E 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013554 6700                       		beq.s	@movedown	; if not, branch
00013556 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001355A B069 000C                  		cmp.w	obY(a1),d0
0001355E 6500                       		bcs.s	@movedown
00013560 3340 000C                  		move.w	d0,obY(a1)
00013564                            
00013564                            @movedown:
00013564 0640 0024                  		addi.w	#$24,d0
00013568 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001356E 6700                       		beq.s	@letgo		; if not, branch
00013570 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00013574 B069 000C                  		cmp.w	obY(a1),d0
00013578 6400                       		bcc.s	@letgo
0001357A 3340 000C                  		move.w	d0,obY(a1)
0001357E                            
0001357E                            @letgo:
0001357E 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013582 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00013586 6700                       		beq.s	Pole_Display	; if not, branch
00013588                            
00013588                            @release:
00013588 4228 0020                  		clr.b	obColType(a0)
0001358C 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
00013590 4238 F7C8                  		clr.b	(f_lockmulti).w
00013594 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013598 4228 0032                  		clr.b	pole_grabbed(a0)
0001359C 6000                       		bra.s	Pole_Display
0001359E                            ; ===========================================================================
0001359E                            
0001359E                            @grab:
0001359E 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000135A2 6700                       		beq.s	Pole_Display	; if not, branch
000135A4 43F8 D000                  		lea	(v_player).w,a1
000135A8 3028 0008                  		move.w	obX(a0),d0
000135AC 0640 0014                  		addi.w	#$14,d0
000135B0 B069 0008                  		cmp.w	obX(a1),d0
000135B4 6400                       		bcc.s	Pole_Display
000135B6 4228 0021                  		clr.b	obColProp(a0)
000135BA 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000135C0 6400                       		bcc.s	Pole_Display
000135C2 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000135C6 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000135CA 3028 0008                  		move.w	obX(a0),d0
000135CE 0640 0014                  		addi.w	#$14,d0
000135D2 3340 0008                  		move.w	d0,obX(a1)
000135D6 08A9 0000 0022             		bclr	#0,obStatus(a1)
000135DC 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000135E2 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
000135E8 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000135EE 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
000135F4                            
000135F4                            Pole_Display:	; Routine 4
000135F4 6000 E1C6                  		bra.w	RememberState
000135F4 6000 E1C6                  		bra.w	RememberState
000135F8                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
000135F8                            ; ---------------------------------------------------------------------------
000135F8                            ; Sprite mappings - pole that breaks (LZ)
000135F8                            ; ---------------------------------------------------------------------------
000135F8                            Map_Pole_internal:
000135F8 0000                       		dc.w @normal-Map_Pole_internal
000135FA 0000                       		dc.w @broken-Map_Pole_internal
000135FC 02                         @normal:	dc.b 2			; normal pole
000135FD E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013602 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00013607 04                         @broken:	dc.b 4			; broken pole
00013608 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001360D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013612 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00013617 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001361C                            		even
0001361C                            		even
0001361C                            		include	"_incObj\0C Flapping Door.asm"
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            ; Object 0C - flapping door (LZ)
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            
0001361C                            FlapDoor:
0001361C 7000                       		moveq	#0,d0
0001361E 1028 0024                  		move.b	obRoutine(a0),d0
00013622 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00013626 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001362A                            ; ===========================================================================
0001362A 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
0001362C 0000                       		dc.w Flap_OpenClose-Flap_Index
0001362E                            
0001362E =00000032                  flap_time:	equ $32		; time between opening/closing
0001362E =00000030                  flap_wait:	equ $30		; time until change
0001362E                            ; ===========================================================================
0001362E                            
0001362E                            Flap_Main:	; Routine 0
0001362E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013632 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001363A 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013640 0028 0004 0001             		ori.b	#4,obRender(a0)
00013646 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001364C 7000                       		moveq	#0,d0
0001364E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013652 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013656 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001365A                            
0001365A                            Flap_OpenClose:	; Routine 2
0001365A 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
0001365E 6A00                       		bpl.s	@wait		; if time remains, branch
00013660 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00013666 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
0001366C 4A28 0001                  		tst.b	obRender(a0)
00013670 6A00                       		bpl.s	@nosound
0001367C                            
0001367C                            	@wait:
0001367C                            	@nosound:
0001367C 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00013682 6100 9276                  		bsr.w	AnimateSprite
00013686 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
0001368A 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0001368E 6600                       		bne.s	@display	; if yes, branch
00013690 3038 D008                  		move.w	(v_player+obX).w,d0
00013694 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013698 6400                       		bcc.s	@display	; if yes, branch
0001369A 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000136A0 323C 0013                  		move.w	#$13,d1
000136A4 343C 0020                  		move.w	#$20,d2
000136A8 3602                       		move.w	d2,d3
000136AA 5243                       		addq.w	#1,d3
000136AC 3828 0008                  		move.w	obX(a0),d4
000136B0 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000136B4                            
000136B4                            	@display:
000136B4 6000 E106                  		bra.w	RememberState
000136B4 6000 E106                  		bra.w	RememberState
000136B8                            		include	"_anim\Flapping Door.asm"
000136B8                            ; ---------------------------------------------------------------------------
000136B8                            ; Animation script - flapping door (LZ)
000136B8                            ; ---------------------------------------------------------------------------
000136B8 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000136BA 0000                       		dc.w @closing-Ani_Flap
000136BC 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000136C2 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000136C8                            		even
000136C8                            		even
000136C8                            Map_Flap:	include	"_maps\Flapping Door.asm"
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            ; Sprite mappings - flapping door (LZ)
000136C8                            ; ---------------------------------------------------------------------------
000136C8                            Map_Flap_internal:
000136C8 0000                       		dc.w @closed-Map_Flap_internal
000136CA 0000                       		dc.w @halfway-Map_Flap_internal
000136CC 0000                       		dc.w @open-Map_Flap_internal
000136CE 02                         @closed:	dc.b 2
000136CF E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000136D4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000136D9 02                         @halfway:	dc.b 2
000136DA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000136DF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000136E4 02                         @open:		dc.b 2
000136E5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000136EA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000136F0 00                         		even
000136F0 00                         		even
000136F0                            
000136F0                            		include	"_incObj\71 Invisible Barriers.asm"
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            ; Object 71 - invisible	solid barriers
000136F0                            ; ---------------------------------------------------------------------------
000136F0                            
000136F0                            Invisibarrier:
000136F0 7000                       		moveq	#0,d0
000136F2 1028 0024                  		move.b	obRoutine(a0),d0
000136F6 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
000136FA 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
000136FE                            ; ===========================================================================
000136FE 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013700 0000                       		dc.w Invis_Solid-Invis_Index
00013702                            
00013702 =00000016                  invis_height:	equ $16		; height in pixels
00013702                            ; ===========================================================================
00013702                            
00013702                            Invis_Main:	; Routine 0
00013702 5428 0024                  		addq.b	#2,obRoutine(a0)
00013706 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
0001370E 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013714 0028 0004 0001             		ori.b	#4,obRender(a0)
0001371A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001371E 1200                       		move.b	d0,d1
00013720 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013724 0640 0010                  		addi.w	#$10,d0
00013728 E248                       		lsr.w	#1,d0
0001372A 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
0001372E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013732 5241                       		addq.w	#1,d1
00013734 E749                       		lsl.w	#3,d1
00013736 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001373A                            
0001373A                            Invis_Solid:	; Routine 2
0001373A 6100 C38A                  		bsr.w	ChkObjectVisible
0001373E 6600                       		bne.s	@chkdel
00013740 7200                       		moveq	#0,d1
00013742 1228 0014                  		move.b	obActWid(a0),d1
00013746 0641 000B                  		addi.w	#$B,d1
0001374A 7400                       		moveq	#0,d2
0001374C 1428 0016                  		move.b	invis_height(a0),d2
00013750 3602                       		move.w	d2,d3
00013752 5243                       		addq.w	#1,d3
00013754 3828 0008                  		move.w	obX(a0),d4
00013758 6100 E542                  		bsr.w	SolidObject71
0001375C                            
0001375C                            @chkdel:
00013778 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
0001377C 6700                       		beq.s	@nodisplay	; if not, branch
0001377E 4EF9 0000 F846             		jmp	(DisplaySprite).l	; if yes, display the object
00013784                            
00013784                            	@nodisplay:
00013784 4E75                       		rts	
00013786                            
00013786                            	@delete:
00013786 4EF9 0000 F886             		jmp	(DeleteObject).l
00013786 4EF9 0000 F886             		jmp	(DeleteObject).l
0001378C                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
0001378C                            ; --------------------------------------------------------------------------------
0001378C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001378C                            ; --------------------------------------------------------------------------------
0001378C                            
0001378C                            SME_t60cE:	
0001378C 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
00013790 0000                       		dc.w SME_t60cE_30-SME_t60cE	
00013792 04                         SME_t60cE_6:	dc.b 4	
00013793 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013798 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
0001379D F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000137A2 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000137A7 04                         SME_t60cE_1B:	dc.b 4	
000137A8 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000137AD E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000137B2 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000137B7 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000137BC 04                         SME_t60cE_30:	dc.b 4	
000137BD E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000137C2 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000137C7 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000137CC 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000137D2 00                         		even
000137D2 00                         		even
000137D2                            
000137D2                            		include	"_incObj\5D Fan.asm"
000137D2                            ; ---------------------------------------------------------------------------
000137D2                            ; Object 5D - fans (SLZ)
000137D2                            ; ---------------------------------------------------------------------------
000137D2                            
000137D2                            Fan:
000137D2 7000                       		moveq	#0,d0
000137D4 1028 0024                  		move.b	obRoutine(a0),d0
000137D8 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000137DC 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000137E0                            ; ===========================================================================
000137E0 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000137E2 0000                       		dc.w Fan_Delay-Fan_Index
000137E4                            
000137E4 =00000030                  fan_time:	equ $30		; time between switching on/off
000137E4 =00000032                  fan_switch:	equ $32		; on/off switch
000137E4                            ; ===========================================================================
000137E4                            
000137E4                            Fan_Main:	; Routine 0
000137E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000137E8 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
000137F0 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
000137F6 0028 0004 0001             		ori.b	#4,obRender(a0)
000137FC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013802 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013808                            
00013808                            Fan_Delay:	; Routine 2
00013808 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
0001380E 6600                       		bne.s	@blow		; if yes, branch
00013810 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013814 6A00                       		bpl.s	@blow		; if time remains, branch
00013816 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
0001381C 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013822 6700                       		beq.s	@blow		; if fan is off, branch
00013824 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001382A                            
0001382A                            @blow:
0001382A 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
0001382E 6600 0000                  		bne.w	@chkdel		; if not, branch
00013832 43F8 D000                  		lea	(v_player).w,a1
00013836 3029 0008                  		move.w	obX(a1),d0
0001383A 9068 0008                  		sub.w	obX(a0),d0
0001383E 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013844 6600                       		bne.s	@chksonic	; if yes, branch
00013846 4440                       		neg.w	d0
00013848                            
00013848                            @chksonic:
00013848 0640 0050                  		addi.w	#$50,d0
0001384C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013850 6400                       		bcc.s	@animate	; if yes, branch
00013852 3229 000C                  		move.w	obY(a1),d1
00013856 0641 0060                  		addi.w	#$60,d1
0001385A 9268 000C                  		sub.w	obY(a0),d1
0001385E 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013860 0C41 0070                  		cmpi.w	#$70,d1
00013864 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013866 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001386A 6400                       		bcc.s	@faraway	; if yes, branch
0001386C 4640                       		not.w	d0
0001386E D040                       		add.w	d0,d0
00013870                            
00013870                            	@faraway:
00013870 0640 0060                  		addi.w	#$60,d0
00013874 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001387A 6600                       		bne.s	@right		; if yes, branch
0001387C 4440                       		neg.w	d0
0001387E                            
0001387E                            	@right:
0001387E 4400                       		neg.b	d0
00013880 E840                       		asr.w	#4,d0
00013882 0828 0000 0028             		btst	#0,obSubtype(a0)
00013888 6700                       		beq.s	@movesonic
0001388A 4440                       		neg.w	d0
0001388C                            
0001388C                            	@movesonic:
0001388C D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013890                            
00013890                            @animate:
00013890 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013894 6A00                       		bpl.s	@chkdel
00013896 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
0001389C 5228 001B                  		addq.b	#1,obAniFrame(a0)
000138A0 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000138A6 6500                       		bcs.s	@noreset
000138A8 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000138AE                            
000138AE                            	@noreset:
000138AE 7000                       		moveq	#0,d0
000138B0 0828 0000 0028             		btst	#0,obSubtype(a0)
000138B6 6700                       		beq.s	@noflip
000138B8 7002                       		moveq	#2,d0
000138BA                            
000138BA                            	@noflip:
000138BA D028 001B                  		add.b	obAniFrame(a0),d0
000138BE 1140 001A                  		move.b	d0,obFrame(a0)
000138C2                            
000138C2                            @chkdel:
000138C2 6100 BF82                  		bsr.w	DisplaySprite
000138E4 4E75                       		rts	
000138E4 4E75                       		rts	
000138E6                            Map_Fan:	include	"_maps\Fan.asm"
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            ; Sprite mappings - fans (SLZ)
000138E6                            ; ---------------------------------------------------------------------------
000138E6                            Map_Fan_internal:
000138E6 0000                       		dc.w @fan1-Map_Fan_internal
000138E8 0000                       		dc.w @fan2-Map_Fan_internal
000138EA 0000                       		dc.w @fan3-Map_Fan_internal
000138EC 0000                       		dc.w @fan2-Map_Fan_internal
000138EE 0000                       		dc.w @fan1-Map_Fan_internal
000138F0 02                         @fan1:		dc.b 2
000138F1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000138F6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000138FB 02                         @fan2:		dc.b 2
000138FC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013901 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013906 02                         @fan3:		dc.b 2
00013907 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001390C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013912 00                         		even
00013912 00                         		even
00013912                            		include	"_incObj\5E Seesaw.asm"
00013912                            ; ---------------------------------------------------------------------------
00013912                            ; Object 5E - seesaws (SLZ)
00013912                            ; ---------------------------------------------------------------------------
00013912                            
00013912                            Seesaw:
00013912 7000                       		moveq	#0,d0
00013914 1028 0024                  		move.b	obRoutine(a0),d0
00013918 323B 0000                  		move.w	See_Index(pc,d0.w),d1
0001391C 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013920 3028 0000                  		move.w	see_origX(a0),d0
00013924 0240 FF80                  		andi.w	#$FF80,d0
00013928 3238 F700                  		move.w	(v_screenposx).w,d1
0001392C 0441 0080                  		subi.w	#$80,d1
00013930 0241 FF80                  		andi.w	#$FF80,d1
00013934 9041                       		sub.w	d1,d0
00013936 6B00 BF4E                  		bmi.w	DeleteObject
0001393A 0C40 0280                  		cmpi.w	#$280,d0
0001393E 6200 BF46                  		bhi.w	DeleteObject
00013942 6000 BF02                  		bra.w	DisplaySprite
00013946                            ; ===========================================================================
00013946 0000                       See_Index:	dc.w See_Main-See_Index
00013948 0000                       		dc.w See_Slope-See_Index
0001394A 0000                       		dc.w See_Slope2-See_Index
0001394C 0000                       		dc.w See_Spikeball-See_Index
0001394E 0000                       		dc.w See_MoveSpike-See_Index
00013950 0000                       		dc.w See_SpikeFall-See_Index
00013952                            
00013952 =00000030                  see_origX:	equ $30		; original x-axis position
00013952 =00000034                  see_origY:	equ $34		; original y-axis position
00013952 =00000038                  see_speed:	equ $38		; speed of collision
00013952 =0000003A                  see_frame:	equ $3A		; 
00013952 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013952                            ; ===========================================================================
00013952                            
00013952                            See_Main:	; Routine 0
00013952 5428 0024                  		addq.b	#2,obRoutine(a0)
00013956 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
0001395E 317C 03D4 0002             		move.w	#$3D4,obGfx(a0)
00013964 0028 0004 0001             		ori.b	#4,obRender(a0)
0001396A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013970 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013976 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
0001397C 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013980 6600                       		bne.s	@noball		; if not, branch
00013982                            
00013982 6100 C364                  		bsr.w	FindNextFreeObj
00013986 6600                       		bne.s	@noball
00013988 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
0001398C 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013990 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013996 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001399C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000139A2 2348 003C                  		move.l	a0,see_parent(a1)
000139A6                            
000139A6                            	@noball:
000139A6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000139AC 6700                       		beq.s	@noflip		; if not, branch
000139AE 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000139B4                            
000139B4                            	@noflip:
000139B4 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000139BA                            
000139BA                            See_Slope:	; Routine 2
000139BA 1228 003A                  		move.b	see_frame(a0),d1
000139BE 6100 0000                  		bsr.w	See_ChgFrame
000139C2 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000139C8 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000139CE 6700                       		beq.s	@notflat	; if not, branch
000139D0 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000139D6                            
000139D6                            	@notflat:
000139D6 43F8 D000                  		lea	(v_player).w,a1
000139DA 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
000139E0 323C 0030                  		move.w	#$30,d1
000139E4 4EB9 0000 912E             		jsr	(SlopeObject).l
000139EA 4E75                       		rts	
000139EC                            ; ===========================================================================
000139EC                            
000139EC                            See_Slope2:	; Routine 4
000139EC 6100 0000                  		bsr.w	See_ChkSide
000139F0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000139F6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000139FC 6700                       		beq.s	@notflat	; if not, branch
000139FE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013A04                            
00013A04                            	@notflat:
00013A04 323C 0030                  		move.w	#$30,d1
00013A08 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00013A0E 323C 0030                  		move.w	#$30,d1
00013A12 3428 0008                  		move.w	obX(a0),d2
00013A16 4EB9 0000 A168             		jsr	(SlopeObject2).l
00013A1C 4E75                       		rts	
00013A1E                            ; ===========================================================================
00013A1E                            
00013A1E                            See_ChkSide:
00013A1E 7202                       		moveq	#2,d1
00013A20 43F8 D000                  		lea	(v_player).w,a1
00013A24 3028 0008                  		move.w	obX(a0),d0
00013A28 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013A2C 6400                       		bcc.s	@leftside	; if yes, branch
00013A2E 4440                       		neg.w	d0
00013A30 7200                       		moveq	#0,d1
00013A32                            
00013A32                            	@leftside:
00013A32 0C40 0008                  		cmpi.w	#8,d0
00013A36 6400                       		bcc.s	See_ChgFrame
00013A38 7201                       		moveq	#1,d1
00013A3A                            
00013A3A                            See_ChgFrame:
00013A3A 1028 001A                  		move.b	obFrame(a0),d0
00013A3E B001                       		cmp.b	d1,d0		; does frame need to change?
00013A40 6700                       		beq.s	@noflip		; if not, branch
00013A42 6400                       		bcc.s	@loc_11772
00013A44 5400                       		addq.b	#2,d0
00013A46                            
00013A46                            	@loc_11772:
00013A46 5300                       		subq.b	#1,d0
00013A48 1140 001A                  		move.b	d0,obFrame(a0)
00013A4C 1141 003A                  		move.b	d1,see_frame(a0)
00013A50 08A8 0000 0001             		bclr	#0,obRender(a0)
00013A56 0828 0001 001A             		btst	#1,obFrame(a0)
00013A5C 6700                       		beq.s	@noflip
00013A5E 08E8 0000 0001             		bset	#0,obRender(a0)
00013A64                            
00013A64                            	@noflip:
00013A64 4E75                       		rts	
00013A66                            ; ===========================================================================
00013A66                            
00013A66                            See_Spikeball:	; Routine 6
00013A66 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A6A 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013A72 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013A78 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013A84 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013A8A 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013A90 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013A96 0668 0028 0008             		addi.w	#$28,obX(a0)
00013A9C 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013AA2 117C 0001 001A             		move.b	#1,obFrame(a0)
00013AA8 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AAE 6700                       		beq.s	See_MoveSpike	; if not, branch
00013AB0 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013AB6 117C 0002 003A             		move.b	#2,see_frame(a0)
00013ABC                            
00013ABC                            See_MoveSpike:	; Routine 8
00013ABC 2268 003C                  		movea.l	see_parent(a0),a1
00013AC0 7000                       		moveq	#0,d0
00013AC2 1028 003A                  		move.b	see_frame(a0),d0
00013AC6 9029 003A                  		sub.b	see_frame(a1),d0
00013ACA 6700                       		beq.s	loc_1183E
00013ACC 6400                       		bcc.s	loc_117FC
00013ACE 4400                       		neg.b	d0
00013AD0                            
00013AD0                            loc_117FC:
00013AD0 323C F7E8                  		move.w	#-$818,d1
00013AD4 343C FEEC                  		move.w	#-$114,d2
00013AD8 0C00 0001                  		cmpi.b	#1,d0
00013ADC 6700                       		beq.s	loc_11822
00013ADE 323C F510                  		move.w	#-$AF0,d1
00013AE2 343C FF34                  		move.w	#-$CC,d2
00013AE6 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013AEC 6D00                       		blt.s	loc_11822
00013AEE 323C F200                  		move.w	#-$E00,d1
00013AF2 343C FF60                  		move.w	#-$A0,d2
00013AF6                            
00013AF6                            loc_11822:
00013AF6 3141 0012                  		move.w	d1,obVelY(a0)
00013AFA 3142 0010                  		move.w	d2,obVelX(a0)
00013AFE 3028 0008                  		move.w	obX(a0),d0
00013B02 9068 0030                  		sub.w	see_origX(a0),d0
00013B06 6400                       		bcc.s	loc_11838
00013B08 4468 0010                  		neg.w	obVelX(a0)
00013B0C                            
00013B0C                            loc_11838:
00013B0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013B10 6000                       		bra.s	See_SpikeFall
00013B12                            ; ===========================================================================
00013B12                            
00013B12                            loc_1183E:
00013B12 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013B18 7000                       		moveq	#0,d0
00013B1A 1029 001A                  		move.b	obFrame(a1),d0
00013B1E 343C 0028                  		move.w	#$28,d2
00013B22 3228 0008                  		move.w	obX(a0),d1
00013B26 9268 0030                  		sub.w	see_origX(a0),d1
00013B2A 6400                       		bcc.s	loc_1185C
00013B2C 4442                       		neg.w	d2
00013B2E 5440                       		addq.w	#2,d0
00013B30                            
00013B30                            loc_1185C:
00013B30 D040                       		add.w	d0,d0
00013B32 3228 0034                  		move.w	see_origY(a0),d1
00013B36 D272 0000                  		add.w	(a2,d0.w),d1
00013B3A 3141 000C                  		move.w	d1,obY(a0)
00013B3E D468 0030                  		add.w	see_origX(a0),d2
00013B42 3142 0008                  		move.w	d2,obX(a0)
00013B46 4268 000E                  		clr.w	obY+2(a0)
00013B4A 4268 000A                  		clr.w	obX+2(a0)
00013B4E 4E75                       		rts	
00013B50                            ; ===========================================================================
00013B50                            
00013B50                            See_SpikeFall:	; Routine $A
00013B50 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013B54 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013B56 6100 BCA2                  		bsr.w	ObjectFall
00013B5A 3028 0034                  		move.w	see_origY(a0),d0
00013B5E 0440 002F                  		subi.w	#$2F,d0
00013B62 B068 000C                  		cmp.w	obY(a0),d0
00013B66 6E00                       		bgt.s	locret_11898
00013B68 6100 BC90                  		bsr.w	ObjectFall
00013B6C                            
00013B6C                            locret_11898:
00013B6C 4E75                       		rts	
00013B6E                            ; ===========================================================================
00013B6E                            
00013B6E                            loc_1189A:
00013B6E 6100 BC8A                  		bsr.w	ObjectFall
00013B72 2268 003C                  		movea.l	see_parent(a0),a1
00013B76 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013B7C 7000                       		moveq	#0,d0
00013B7E 1029 001A                  		move.b	obFrame(a1),d0
00013B82 3228 0008                  		move.w	obX(a0),d1
00013B86 9268 0030                  		sub.w	see_origX(a0),d1
00013B8A 6400                       		bcc.s	loc_118BA
00013B8C 5440                       		addq.w	#2,d0
00013B8E                            
00013B8E                            loc_118BA:
00013B8E D040                       		add.w	d0,d0
00013B90 3228 0034                  		move.w	see_origY(a0),d1
00013B94 D272 0000                  		add.w	(a2,d0.w),d1
00013B98 B268 000C                  		cmp.w	obY(a0),d1
00013B9C 6E00                       		bgt.s	locret_11938
00013B9E 2268 003C                  		movea.l	see_parent(a0),a1
00013BA2 7202                       		moveq	#2,d1
00013BA4 4A68 0010                  		tst.w	obVelX(a0)
00013BA8 6B00                       		bmi.s	See_Spring
00013BAA 7200                       		moveq	#0,d1
00013BAC                            
00013BAC                            See_Spring:
00013BAC 1341 003A                  		move.b	d1,$3A(a1)
00013BB0 1141 003A                  		move.b	d1,see_frame(a0)
00013BB4 B229 001A                  		cmp.b	obFrame(a1),d1
00013BB8 6700                       		beq.s	loc_1192C
00013BBA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013BC0 6700                       		beq.s	loc_1192C
00013BC2 4229 0025                  		clr.b	ob2ndRout(a1)
00013BC6 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013BCC 45F8 D000                  		lea	(v_player).w,a2
00013BD0 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013BD6 446A 0012                  		neg.w	obVelY(a2)
00013BDA 08EA 0001 0022             		bset	#1,obStatus(a2)
00013BE0 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013BE6 422A 003C                  		clr.b	$3C(a2)
00013BEA 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013BF0 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013C00                            
00013C00                            loc_1192C:
00013C00 4268 0010                  		clr.w	obVelX(a0)
00013C04 4268 0012                  		clr.w	obVelY(a0)
00013C08 5528 0024                  		subq.b	#2,obRoutine(a0)
00013C0C                            
00013C0C                            locret_11938:
00013C0C 4E75                       		rts	
00013C0E                            ; ===========================================================================
00013C0E FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013C18                            
00013C18                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013C48                            		even
00013C48                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013C78                            		even
00013C78                            		even
00013C78                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013C78                            ; ---------------------------------------------------------------------------
00013C78                            ; Sprite mappings - seesaws (SLZ)
00013C78                            ; ---------------------------------------------------------------------------
00013C78                            Map_Seesaw_internal:
00013C78 0000                       		dc.w @sloping-Map_Seesaw_internal
00013C7A 0000                       		dc.w @flat-Map_Seesaw_internal
00013C7C 0000                       		dc.w @sloping-Map_Seesaw_internal
00013C7E 0000                       		dc.w @flat-Map_Seesaw_internal
00013C80 07                         @sloping:	dc.b 7
00013C81 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013C86 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013C8B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013C90 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013C95 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013C9A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013C9F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013CA4 04                         @flat:		dc.b 4
00013CA5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013CAA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013CAF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013CB4 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013CBA 00                         		even
00013CBA 00                         		even
00013CBA                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013CBA                            ; ---------------------------------------------------------------------------
00013CBA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013CBA                            ; ---------------------------------------------------------------------------
00013CBA                            Map_SSawBall_internal:
00013CBA 0000                       		dc.w @red-Map_SSawBall_internal
00013CBC 0000                       		dc.w @silver-Map_SSawBall_internal
00013CBE 01                         @red:		dc.b 1
00013CBF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013CC4 01                         @silver:	dc.b 1
00013CC5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013CCA                            		even
00013CCA                            		even
00013CCA                            		include	"_incObj\5F Bomb Enemy.asm"
00013CCA                            ; ---------------------------------------------------------------------------
00013CCA                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013CCA                            ; ---------------------------------------------------------------------------
00013CCA                            
00013CCA                            Bomb:
00013CCA 7000                       		moveq	#0,d0
00013CCC 1028 0024                  		move.b	obRoutine(a0),d0
00013CD0 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013CD4 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013CD8                            ; ===========================================================================
00013CD8 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013CDA 0000                       		dc.w Bom_Action-Bom_Index
00013CDC 0000                       		dc.w Bom_Display-Bom_Index
00013CDE 0000                       		dc.w Bom_End-Bom_Index
00013CE0                            
00013CE0 =00000030                  bom_time:	equ $30		; time of fuse
00013CE0 =00000034                  bom_origY:	equ $34		; original y-axis position
00013CE0 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013CE0                            ; ===========================================================================
00013CE0                            
00013CE0                            Bom_Main:	; Routine 0
00013CE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00013CE4 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013CEC 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013CF2 0028 0004 0001             		ori.b	#4,obRender(a0)
00013CF8 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013CFE 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013D04 1028 0028                  		move.b	obSubtype(a0),d0
00013D08 6700                       		beq.s	loc_11A3C
00013D0A 1140 0024                  		move.b	d0,obRoutine(a0)
00013D0E 4E75                       		rts	
00013D10                            ; ===========================================================================
00013D10                            
00013D10                            loc_11A3C:
00013D10 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013D16 0868 0000 0022             		bchg	#0,obStatus(a0)
00013D1C                            
00013D1C                            Bom_Action:	; Routine 2
00013D1C 7000                       		moveq	#0,d0
00013D1E 1028 0025                  		move.b	ob2ndRout(a0),d0
00013D22 323B 0000                  		move.w	@index(pc,d0.w),d1
00013D26 4EBB 1000                  		jsr	@index(pc,d1.w)
00013D2A 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013D30 6100 8BC8                  		bsr.w	AnimateSprite
00013D34 6000 DA86                  		bra.w	RememberState
00013D38                            ; ===========================================================================
00013D38 0000                       @index:		dc.w @walk-@index
00013D3A 0000                       		dc.w @wait-@index
00013D3C 0000                       		dc.w @explode-@index
00013D3E                            ; ===========================================================================
00013D3E                            
00013D3E                            @walk:
00013D3E 6100 0000                  		bsr.w	@chksonic
00013D42 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013D46 6A00                       		bpl.s	@noflip		; if time remains, branch
00013D48 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013D4C 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013D52 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013D58 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013D5E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013D64 6700                       		beq.s	@noflip
00013D66 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013D6A                            
00013D6A                            	@noflip:
00013D6A 4E75                       		rts	
00013D6C                            ; ===========================================================================
00013D6C                            
00013D6C                            @wait:
00013D6C 6100 0000                  		bsr.w	@chksonic
00013D70 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013D74 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013D76 6100 BABA                  		bsr.w	SpeedToPos
00013D7A 4E75                       		rts	
00013D7C                            ; ===========================================================================
00013D7C                            
00013D7C                            	@stopwalking:
00013D7C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013D80 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013D86 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013D8A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013D90 4E75                       		rts	
00013D92                            ; ===========================================================================
00013D92                            
00013D92                            @explode:
00013D92 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013D96 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013D98 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013D9C 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013DA2                            
00013DA2                            	@noexplode:
00013DA2 4E75                       		rts	
00013DA4                            ; ===========================================================================
00013DA4                            
00013DA4                            @chksonic:
00013DA4 3038 D008                  		move.w	(v_player+obX).w,d0
00013DA8 9068 0008                  		sub.w	obX(a0),d0
00013DAC 6400                       		bcc.s	@isleft
00013DAE 4440                       		neg.w	d0
00013DB0                            
00013DB0                            	@isleft:
00013DB0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013DB4 6400                       		bcc.s	@outofrange	; if not, branch
00013DB6 3038 D00C                  		move.w	(v_player+obY).w,d0
00013DBA 9068 000C                  		sub.w	obY(a0),d0
00013DBE 6400                       		bcc.s	@isabove
00013DC0 4440                       		neg.w	d0
00013DC2                            
00013DC2                            	@isabove:
00013DC2 0C40 0060                  		cmpi.w	#$60,d0
00013DC6 6400                       		bcc.s	@outofrange
00013DC8 4A78 FE08                  		tst.w	(v_debuguse).w
00013DCC 6600                       		bne.s	@outofrange
00013DCE                            
00013DCE 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013DD4 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013DDA 4268 0010                  		clr.w	obVelX(a0)
00013DDE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013DE4 6100 BF02                  		bsr.w	FindNextFreeObj
00013DE8 6600                       		bne.s	@outofrange
00013DEA 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013DEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013DF4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013DFA 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013E00 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013E06 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013E0C 137C 0003 001C             		move.b	#3,obAnim(a1)
00013E12 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013E18 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013E1E 6700                       		beq.s	@normal		; if not, branch
00013E20 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013E24                            
00013E24                            	@normal:
00013E24 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013E2A 2348 003C                  		move.l	a0,bom_parent(a1)
00013E2E                            
00013E2E                            @outofrange:
00013E2E 4E75                       		rts	
00013E30                            ; ===========================================================================
00013E30                            
00013E30                            Bom_Display:	; Routine 4
00013E30 6100                       		bsr.s	loc_11B70
00013E32 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E38 6100 8AC0                  		bsr.w	AnimateSprite
00013E3C 6000 D97E                  		bra.w	RememberState
00013E40                            ; ===========================================================================
00013E40                            
00013E40                            loc_11B70:
00013E40 5368 0030                  		subq.w	#1,bom_time(a0)
00013E44 6B00                       		bmi.s	loc_11B7C
00013E46 6100 B9EA                  		bsr.w	SpeedToPos
00013E4A 4E75                       		rts	
00013E4C                            ; ===========================================================================
00013E4C                            
00013E4C                            loc_11B7C:
00013E4C 4268 0030                  		clr.w	bom_time(a0)
00013E50 4228 0024                  		clr.b	obRoutine(a0)
00013E54 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013E5A 7203                       		moveq	#3,d1
00013E5C 2248                       		movea.l	a0,a1
00013E5E 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013E64 6000                       		bra.s	@makeshrapnel
00013E66                            ; ===========================================================================
00013E66                            
00013E66                            	@loop:
00013E66 6100 BE80                  		bsr.w	FindNextFreeObj
00013E6A 6600                       		bne.s	@fail
00013E6C                            
00013E6C                            @makeshrapnel:
00013E6C 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013E70 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013E76 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013E7C 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013E82 137C 0004 001C             		move.b	#4,obAnim(a1)
00013E88 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013E8C 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013E90 137C 0098 0020             		move.b	#$98,obColType(a1)
00013E96 08E9 0007 0001             		bset	#7,obRender(a1)
00013E9C                            
00013E9C                            	@fail:
00013E9C 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013EA0                            
00013EA0 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013EA6                            
00013EA6                            Bom_End:	; Routine 6
00013EA6 6100 B98A                  		bsr.w	SpeedToPos
00013EAA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013EB0 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013EB6 6100 8A42                  		bsr.w	AnimateSprite
00013EBA 4A28 0001                  		tst.b	obRender(a0)
00013EBE 6A00 B9C6                  		bpl.w	DeleteObject
00013EC2 6000 B982                  		bra.w	DisplaySprite
00013EC6                            ; ===========================================================================
00013EC6 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013EC6 FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013ED6                            		include	"_anim\Bomb Enemy.asm"
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            ; Animation script - Bomb enemy
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013ED8 0000                       		dc.w @walk-Ani_Bomb
00013EDA 0000                       		dc.w @activated-Ani_Bomb
00013EDC 0000                       		dc.w @fuse-Ani_Bomb
00013EDE 0000                       		dc.w @shrapnel-Ani_Bomb
00013EE0 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013EE4 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013EEA 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013EEE 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013EF2 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013EF6                            		even
00013EF6                            		even
00013EF6                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            Map_Bomb_internal:
00013EF6 0000                       		dc.w @stand1-Map_Bomb_internal
00013EF8 0000                       		dc.w @stand2-Map_Bomb_internal
00013EFA 0000                       		dc.w @walk1-Map_Bomb_internal
00013EFC 0000                       		dc.w @walk2-Map_Bomb_internal
00013EFE 0000                       		dc.w @walk3-Map_Bomb_internal
00013F00 0000                       		dc.w @walk4-Map_Bomb_internal
00013F02 0000                       		dc.w @activate1-Map_Bomb_internal
00013F04 0000                       		dc.w @activate2-Map_Bomb_internal
00013F06 0000                       		dc.w @fuse1-Map_Bomb_internal
00013F08 0000                       		dc.w @fuse2-Map_Bomb_internal
00013F0A 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013F0C 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013F0E 03                         @stand1:	dc.b 3
00013F0F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013F14 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F19 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F1E 03                         @stand2:	dc.b 3
00013F1F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F24 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F29 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F2E 03                         @walk1:		dc.b 3
00013F2F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013F34 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013F39 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013F3E 03                         @walk2:		dc.b 3
00013F3F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F44 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013F49 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F4E 03                         @walk3:		dc.b 3
00013F4F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013F54 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013F59 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013F5E 03                         @walk4:		dc.b 3
00013F5F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F64 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013F69 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013F6E 02                         @activate1:	dc.b 2
00013F6F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013F74 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F79 02                         @activate2:	dc.b 2
00013F7A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013F7F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013F84 01                         @fuse1:		dc.b 1
00013F85 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013F8A 01                         @fuse2:		dc.b 1
00013F8B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013F90 01                         @shrapnel1:	dc.b 1
00013F91 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013F96 01                         @shrapnel2:	dc.b 1
00013F97 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013F9C                            		even
00013F9C                            		even
00013F9C                            
00013F9C                            		include	"_incObj\60 Orbinaut.asm"
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013F9C                            ; ---------------------------------------------------------------------------
00013F9C                            
00013F9C                            Orbinaut:
00013F9C 7000                       		moveq	#0,d0
00013F9E 1028 0024                  		move.b	obRoutine(a0),d0
00013FA2 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013FA6 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013FAA                            ; ===========================================================================
00013FAA 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013FAC 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013FAE 0000                       		dc.w Orb_Display-Orb_Index
00013FB0 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013FB2 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013FB4                            
00013FB4 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013FB4                            ; ===========================================================================
00013FB4                            
00013FB4                            Orb_Main:	; Routine 0
00013FB4 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013FBC 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013FC2 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013FC8 6700                       		beq.s	@isscrap
00013FCA 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013FD0                            
00013FD0                            	@isscrap:
00013FD0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013FD6 6600                       		bne.s	@notlabyrinth
00013FD8 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013FDE                            
00013FDE                            	@notlabyrinth:
00013FDE 0028 0004 0001             		ori.b	#4,obRender(a0)
00013FE4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013FEA 117C 000B 0020             		move.b	#$B,obColType(a0)
00013FF0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013FF6 7400                       		moveq	#0,d2
00013FF8 45E8 0037                  		lea	$37(a0),a2
00013FFC 264A                       		movea.l	a2,a3
00013FFE 524A                       		addq.w	#1,a2
00014000 7203                       		moveq	#3,d1
00014002                            
00014002                            @makesatellites:
00014002 6100 BCE4                  		bsr.w	FindNextFreeObj
00014006 6600                       		bne.s	@fail
00014008 5213                       		addq.b	#1,(a3)
0001400A 3A09                       		move.w	a1,d5
0001400C 0445 D000                  		subi.w	#$D000,d5
00014010 EC4D                       		lsr.w	#6,d5
00014012 0245 007F                  		andi.w	#$7F,d5
00014016 14C5                       		move.b	d5,(a2)+
00014018 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001401A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014020 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00014026 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001402C 0029 0004 0001             		ori.b	#4,obRender(a1)
00014032 337C 0200 0018             		move.w	#$200,obPriority(a1)
00014038 137C 0008 0014             		move.b	#8,obActWid(a1)
0001403E 137C 0003 001A             		move.b	#3,obFrame(a1)
00014044 137C 0098 0020             		move.b	#$98,obColType(a1)
0001404A 1342 0026                  		move.b	d2,obAngle(a1)
0001404E 0602 0040                  		addi.b	#$40,d2
00014052 2348 003C                  		move.l	a0,orb_parent(a1)
00014056 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
0001405A                            
0001405A                            	@fail:
0001405A 7001                       		moveq	#1,d0
0001405C 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014062 6700                       		beq.s	@noflip		; if not, branch
00014064 4440                       		neg.w	d0
00014066                            
00014066                            	@noflip:
00014066 1140 0036                  		move.b	d0,$36(a0)
0001406A 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00014070 5428 0024                  		addq.b	#2,obRoutine(a0)
00014074 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
0001407A 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00014080 6700                       		beq.s	@noflip2	; if not, branch
00014082 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00014086                            
00014086                            	@noflip2:
00014086 4E75                       		rts	
00014088                            ; ===========================================================================
00014088                            
00014088                            Orb_ChkSonic:	; Routine 2
00014088 3038 D008                  		move.w	(v_player+obX).w,d0
0001408C 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00014090 6400                       		bcc.s	@isright	; if yes, branch
00014092 4440                       		neg.w	d0
00014094                            
00014094                            	@isright:
00014094 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014098 6400                       		bcc.s	@animate	; if not, branch
0001409A 3038 D00C                  		move.w	(v_player+obY).w,d0
0001409E 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000140A2 6400                       		bcc.s	@isabove	; if yes, branch
000140A4 4440                       		neg.w	d0
000140A6                            
000140A6                            	@isabove:
000140A6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000140AA 6400                       		bcc.s	@animate	; if not, branch
000140AC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000140B0 6600                       		bne.s	@animate	; if yes, branch
000140B2 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000140B8                            
000140B8                            @animate:
000140B8 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000140BE 6100 883A                  		bsr.w	AnimateSprite
000140C2 6000 0000                  		bra.w	Orb_ChkDel
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            Orb_Display:	; Routine 4
000140C6 6100 B76A                  		bsr.w	SpeedToPos
000140CA                            
000140CA                            Orb_ChkDel:
000140E8 6000 B75C                  		bra.w	DisplaySprite
000140EC                            
000140EC                            @chkgone:
000140EC 45F8 FC00                  		lea	(v_objstate).w,a2
000140F0 7000                       		moveq	#0,d0
000140F2 1028 0023                  		move.b	obRespawnNo(a0),d0
000140F6 6700                       		beq.s	loc_11E34
000140F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000140FE                            
000140FE                            loc_11E34:
000140FE 45E8 0037                  		lea	$37(a0),a2
00014102 7400                       		moveq	#0,d2
00014104 141A                       		move.b	(a2)+,d2
00014106 5342                       		subq.w	#1,d2
00014108 6500                       		bcs.s	Orb_Delete
0001410A                            
0001410A                            loc_11E40:
0001410A 7000                       		moveq	#0,d0
0001410C 101A                       		move.b	(a2)+,d0
0001410E ED48                       		lsl.w	#6,d0
00014110 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00014116 2240                       		movea.l	d0,a1
00014118 6100 B76E                  		bsr.w	DeleteChild
0001411C 51CA FFEC                  		dbf	d2,loc_11E40
00014120                            
00014120                            Orb_Delete:
00014120 6000 B764                  		bra.w	DeleteObject
00014124                            ; ===========================================================================
00014124                            
00014124                            Orb_MoveOrb:	; Routine 6
00014124 2268 003C                  		movea.l	orb_parent(a0),a1
00014128 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
0001412C 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014130 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00014136 6600                       		bne.s	@circle		; if not, branch
00014138 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
0001413E 6600                       		bne.s	@circle		; if not, branch
00014140 5428 0024                  		addq.b	#2,obRoutine(a0)
00014144 5329 0037                  		subq.b	#1,$37(a1)
00014148 6600                       		bne.s	@fire
0001414A 5429 0024                  		addq.b	#2,obRoutine(a1)
0001414E                            
0001414E                            	@fire:
0001414E 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00014154 0829 0000 0022             		btst	#0,obStatus(a1)
0001415A 6700                       		beq.s	@noflip
0001415C 4468 0010                  		neg.w	obVelX(a0)
00014160                            
00014160                            	@noflip:
00014160 6000 B6E4                  		bra.w	DisplaySprite
00014164                            ; ===========================================================================
00014164                            
00014164                            @circle:
00014164 1028 0026                  		move.b	obAngle(a0),d0
00014168 4EB9 0000 3A32             		jsr	(CalcSine).l
0001416E E841                       		asr.w	#4,d1
00014170 D269 0008                  		add.w	obX(a1),d1
00014174 3141 0008                  		move.w	d1,obX(a0)
00014178 E840                       		asr.w	#4,d0
0001417A D069 000C                  		add.w	obY(a1),d0
0001417E 3140 000C                  		move.w	d0,obY(a0)
00014182 1029 0036                  		move.b	$36(a1),d0
00014186 D128 0026                  		add.b	d0,obAngle(a0)
0001418A 6000 B6BA                  		bra.w	DisplaySprite
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            Orb_ChkDel2:	; Routine 8
0001418E 6100 B6A2                  		bsr.w	SpeedToPos
00014192 4A28 0001                  		tst.b	obRender(a0)
00014196 6A00 B6EE                  		bpl.w	DeleteObject
0001419A 6000 B6AA                  		bra.w	DisplaySprite
0001419A 6000 B6AA                  		bra.w	DisplaySprite
0001419E                            		include	"_anim\Orbinaut.asm"
0001419E                            ; ---------------------------------------------------------------------------
0001419E                            ; Animation script - Orbinaut enemy
0001419E                            ; ---------------------------------------------------------------------------
0001419E 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000141A0 0000                       		dc.w @angers-Ani_Orb
000141A2 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000141A6 00                         		even
000141A6 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000141AC 00                         		even
000141AC 00                         		even
000141AC                            Map_Orb:	include	"_maps\Orbinaut.asm"
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            Map_Orb_internal:
000141AC 0000                       		dc.w @normal-Map_Orb_internal
000141AE 0000                       		dc.w @medium-Map_Orb_internal
000141B0 0000                       		dc.w @angry-Map_Orb_internal
000141B2 0000                       		dc.w @spikeball-Map_Orb_internal
000141B4 01                         @normal:	dc.b 1
000141B5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000141BA 01                         @medium:	dc.b 1
000141BB F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000141C0 01                         @angry:		dc.b 1
000141C1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000141C6 01                         @spikeball:	dc.b 1
000141C7 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000141CC                            		even
000141CC                            		even
000141CC                            
000141CC                            		include	"_incObj\16 Harpoon.asm"
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            ; Object 16 - harpoon (LZ)
000141CC                            ; ---------------------------------------------------------------------------
000141CC                            
000141CC                            Harpoon:
000141CC 7000                       		moveq	#0,d0
000141CE 1028 0024                  		move.b	obRoutine(a0),d0
000141D2 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000141D6 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000141DA                            ; ===========================================================================
000141DA 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000141DC 0000                       		dc.w Harp_Move-Harp_Index
000141DE 0000                       		dc.w Harp_Wait-Harp_Index
000141E0                            
000141E0 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            Harp_Main:	; Routine 0
000141E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000141E4 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
000141EC 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
000141F2 0028 0004 0001             		ori.b	#4,obRender(a0)
000141F8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000141FE 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00014204 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001420A 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014210                            
00014210                            Harp_Move:	; Routine 2
00014210 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00014216 6100 86E2                  		bsr.w	AnimateSprite
0001421A 7000                       		moveq	#0,d0
0001421C 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014220 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00014226 6000 D594                  		bra.w	RememberState
0001422A                            
0001422A                            	@types:
0001422A 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014230                            		even
00014230                            
00014230                            Harp_Wait:	; Routine 4
00014230 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00014234 6A00                       		bpl.s	@chkdel		; branch if time remains
00014236 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
0001423C 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014240 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00014246                            
00014246                            	@chkdel:
00014246 6000 D574                  		bra.w	RememberState
00014246 6000 D574                  		bra.w	RememberState
0001424A                            		include	"_anim\Harpoon.asm"
0001424A                            ; ---------------------------------------------------------------------------
0001424A                            ; Animation script - harpoon (LZ)
0001424A                            ; ---------------------------------------------------------------------------
0001424A 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
0001424C 0000                       		dc.w @h_retracting-Ani_Harp
0001424E 0000                       		dc.w @v_extending-Ani_Harp
00014250 0000                       		dc.w @v_retracting-Ani_Harp
00014252 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00014256 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
0001425A 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
0001425E 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014262                            		even
00014262                            		even
00014262                            Map_Harp:	include	"_maps\Harpoon.asm"
00014262                            ; ---------------------------------------------------------------------------
00014262                            ; Sprite mappings - harpoon (LZ)
00014262                            ; ---------------------------------------------------------------------------
00014262                            Map_Harp_internal:
00014262 0000                       		dc.w @h_retracted-Map_Harp_internal
00014264 0000                       		dc.w @h_middle-Map_Harp_internal
00014266 0000                       		dc.w @h_extended-Map_Harp_internal
00014268 0000                       		dc.w @v_retracted-Map_Harp_internal
0001426A 0000                       		dc.w @v_middle-Map_Harp_internal
0001426C 0000                       		dc.w @v_extended-Map_Harp_internal
0001426E 01                         @h_retracted:	dc.b 1
0001426F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00014274 01                         @h_middle:	dc.b 1
00014275 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001427A 02                         @h_extended:	dc.b 2
0001427B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00014280 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00014285 01                         @v_retracted:	dc.b 1
00014286 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001428B 01                         @v_middle:	dc.b 1
0001428C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00014291 02                         @v_extended:	dc.b 2
00014292 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00014297 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001429C                            		even
0001429C                            		even
0001429C                            		include	"_incObj\61 LZ Blocks.asm"
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            ; Object 61 - blocks (LZ)
0001429C                            ; ---------------------------------------------------------------------------
0001429C                            
0001429C                            LabyrinthBlock:
0001429C 7000                       		moveq	#0,d0
0001429E 1028 0024                  		move.b	obRoutine(a0),d0
000142A2 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000142A6 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000142AA                            ; ===========================================================================
000142AA 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000142AC 0000                       		dc.w LBlk_Action-LBlk_Index
000142AE                            
000142AE 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000142B0 200C                       		dc.b $20, $C
000142B2 1010                       		dc.b $10, $10
000142B4 1010                       		dc.b $10, $10
000142B6                            
000142B6 =00000016                  lblk_height:	equ $16		; block height
000142B6 =00000034                  lblk_origX:	equ $34		; original x-axis position
000142B6 =00000030                  lblk_origY:	equ $30		; original y-axis position
000142B6 =00000036                  lblk_time:	equ $36		; time delay for block movement
000142B6 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000142B6                            ; ===========================================================================
000142B6                            
000142B6                            LBlk_Main:	; Routine 0
000142B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000142BA 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000142C2 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000142C8 117C 0004 0001             		move.b	#4,obRender(a0)
000142CE 317C 0180 0018             		move.w	#$180,obPriority(a0)
000142D4 7000                       		moveq	#0,d0
000142D6 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000142DA E648                       		lsr.w	#3,d0		; read only the 1st digit
000142DC 0240 000E                  		andi.w	#$E,d0
000142E0 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000142E4 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000142E8 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
000142EC E248                       		lsr.w	#1,d0
000142EE 1140 001A                  		move.b	d0,obFrame(a0)
000142F2 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
000142F8 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
000142FE 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014302 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00014306 6700                       		beq.s	LBlk_Action	; branch if 0
00014308 0C00 0007                  		cmpi.b	#7,d0
0001430C 6700                       		beq.s	LBlk_Action	; branch if 7
0001430E 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014314                            
00014314                            LBlk_Action:	; Routine 2
00014314 3F28 0008                  		move.w	obX(a0),-(sp)
00014318 7000                       		moveq	#0,d0
0001431A 1028 0028                  		move.b	obSubtype(a0),d0
0001431E 0240 000F                  		andi.w	#$F,d0
00014322 D040                       		add.w	d0,d0
00014324 323B 0000                  		move.w	@index(pc,d0.w),d1
00014328 4EBB 1000                  		jsr	@index(pc,d1.w)
0001432C 381F                       		move.w	(sp)+,d4
0001432E 4A28 0001                  		tst.b	obRender(a0)
00014332 6A00                       		bpl.s	@chkdel
00014334 7200                       		moveq	#0,d1
00014336 1228 0014                  		move.b	obActWid(a0),d1
0001433A 0641 000B                  		addi.w	#$B,d1
0001433E 7400                       		moveq	#0,d2
00014340 1428 0016                  		move.b	lblk_height(a0),d2
00014344 3602                       		move.w	d2,d3
00014346 5243                       		addq.w	#1,d3
00014348 6100 D90A                  		bsr.w	SolidObject
0001434C 1144 003F                  		move.b	d4,$3F(a0)
00014350 6100 0000                  		bsr.w	loc_12180
00014354                            
00014354                            @chkdel:
00014372 6000 B4D2                  		bra.w	DisplaySprite
00014376                            ; ===========================================================================
00014376 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
0001437A 0000 0000                  		dc.w @type02-@index, @type03-@index
0001437E 0000 0000                  		dc.w @type04-@index, @type05-@index
00014382 0000 0000                  		dc.w @type06-@index, @type07-@index
00014386                            ; ===========================================================================
00014386                            
00014386                            @type00:
00014386 4E75                       		rts	
00014388                            ; ===========================================================================
00014388                            
00014388                            @type01:
00014388                            @type03:
00014388 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
0001438C 6600                       		bne.s	@wait01		; if yes, branch
0001438E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
00014394 6700                       		beq.s	@donothing01	; if not, branch
00014396 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
0001439C                            
0001439C                            	@donothing01:
0001439C 4E75                       		rts	
0001439E                            ; ===========================================================================
0001439E                            
0001439E                            	@wait01:
0001439E 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000143A2 66F8                       		bne.s	@donothing01	; if time remains, branch
000143A4 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000143A8 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000143AC 4E75                       		rts	
000143AE                            ; ===========================================================================
000143AE                            
000143AE                            @type02:
000143AE                            @type06:
000143AE 6100 B482                  		bsr.w	SpeedToPos
000143B2 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000143B6 6100 0000                  		bsr.w	ObjFloorDist
000143BA 4A41                       		tst.w	d1		; has block hit the floor?
000143BC 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000143C0 5241                       		addq.w	#1,d1
000143C2 D368 000C                  		add.w	d1,obY(a0)
000143C6 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000143CA 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000143CE                            
000143CE                            	@nofloor02:
000143CE 4E75                       		rts	
000143D0                            ; ===========================================================================
000143D0                            
000143D0                            @type04:
000143D0 6100 B460                  		bsr.w	SpeedToPos
000143D4 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000143D8 6100 0000                  		bsr.w	ObjHitCeiling
000143DC 4A41                       		tst.w	d1		; has block hit the ceiling?
000143DE 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000143E2 9368 000C                  		sub.w	d1,obY(a0)
000143E6 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
000143EA 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000143EE                            
000143EE                            	@noceiling04:
000143EE 4E75                       		rts	
000143F0                            ; ===========================================================================
000143F0                            
000143F0                            @type05:
000143F0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
000143F6 6600                       		bne.s	@notouch05	; if not, branch
000143F8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
000143FC 4228 0038                  		clr.b	lblk_untouched(a0)
00014400                            
00014400                            	@notouch05:
00014400 4E75                       		rts	
00014402                            ; ===========================================================================
00014402                            
00014402                            @type07:
00014402 3038 F646                  		move.w	(v_waterpos1).w,d0
00014406 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001440A 6700                       		beq.s	@stop07		; if yes, branch
0001440C 6400                       		bcc.s	@fall07		; branch if block is above water
0001440E 0C40 FFFE                  		cmpi.w	#-2,d0
00014412 6C00                       		bge.s	@loc_1214E
00014414 70FE                       		moveq	#-2,d0
00014416                            
00014416                            	@loc_1214E:
00014416 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001441A 6100 0000                  		bsr.w	ObjHitCeiling
0001441E 4A41                       		tst.w	d1		; has block hit the ceiling?
00014420 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014424 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014428                            
00014428                            	@noceiling07:
00014428 4E75                       		rts	
0001442A                            ; ===========================================================================
0001442A                            
0001442A                            @fall07:
0001442A 0C40 0002                  		cmpi.w	#2,d0
0001442E 6F00                       		ble.s	@loc_1216A
00014430 7002                       		moveq	#2,d0
00014432                            
00014432                            	@loc_1216A:
00014432 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00014436 6100 0000                  		bsr.w	ObjFloorDist
0001443A 4A41                       		tst.w	d1
0001443C 6A00 0000                  		bpl.w	@stop07
00014440 5241                       		addq.w	#1,d1
00014442 D368 000C                  		add.w	d1,obY(a0)
00014446                            
00014446                            	@stop07:
00014446 4E75                       		rts	
00014448                            ; ===========================================================================
00014448                            
00014448                            loc_12180:
00014448 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
0001444C 6700                       		beq.s	locret_121C0	; if yes, branch
0001444E 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014454 6600                       		bne.s	loc_1219A	; if yes, branch
00014456 4A28 003E                  		tst.b	$3E(a0)
0001445A 6700                       		beq.s	locret_121C0
0001445C 5928 003E                  		subq.b	#4,$3E(a0)
00014460 6000                       		bra.s	loc_121A6
00014462                            ; ===========================================================================
00014462                            
00014462                            loc_1219A:
00014462 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014468 6700                       		beq.s	locret_121C0
0001446A 5828 003E                  		addq.b	#4,$3E(a0)
0001446E                            
0001446E                            loc_121A6:
0001446E 1028 003E                  		move.b	$3E(a0),d0
00014472 4EB9 0000 3A32             		jsr	(CalcSine).l
00014478 323C 0400                  		move.w	#$400,d1
0001447C C1C1                       		muls.w	d1,d0
0001447E 4840                       		swap	d0
00014480 D068 0030                  		add.w	lblk_origY(a0),d0
00014484 3140 000C                  		move.w	d0,obY(a0)
00014488                            
00014488                            locret_121C0:
00014488 4E75                       		rts	
00014488 4E75                       		rts	
0001448A                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
0001448A                            Map_6865:
0001448A 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
0001448C 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
0001448E 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
00014490 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
00014492 01                         Map_6865_8: 	dc.b $1
00014493 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014498 02                         Map_6865_E: 	dc.b $2
00014499 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
0001449E F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000144A3 01                         Map_6865_19: 	dc.b $1
000144A4 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000144A9 01                         Map_6865_1F: 	dc.b $1
000144AA F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000144B0 00                         	even
000144B0 00                         	even
000144B0                            		include	"_incObj\62 Gargoyle.asm"
000144B0                            ; ---------------------------------------------------------------------------
000144B0                            ; Object 62 - gargoyle head (LZ)
000144B0                            ; ---------------------------------------------------------------------------
000144B0                            
000144B0                            Gargoyle:
000144B0 7000                       		moveq	#0,d0
000144B2 1028 0024                  		move.b	obRoutine(a0),d0
000144B6 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000144BA 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000144BE 6000 D2FC                  		bra.w	RememberState
000144C2                            ; ===========================================================================
000144C2 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000144C4 0000                       		dc.w Gar_MakeFire-Gar_Index
000144C6 0000                       		dc.w Gar_FireBall-Gar_Index
000144C8 0000                       		dc.w Gar_AniFire-Gar_Index
000144CA                            
000144CA 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000144D2                            ; ===========================================================================
000144D2                            
000144D2                            Gar_Main:	; Routine 0
000144D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000144D6 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000144DE 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000144E4 0028 0004 0001             		ori.b	#4,obRender(a0)
000144EA 317C 0180 0018             		move.w	#$180,obPriority(a0)
000144F0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000144F6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000144FA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000144FE 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014504 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001450A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014510                            
00014510                            Gar_MakeFire:	; Routine 2
00014510 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014514 6600                       		bne.s	@nofire		; if time remains, branch
00014516                            
00014516 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
0001451C 6100 B5A8                  		bsr.w	ChkObjectVisible
00014520 6600                       		bne.s	@nofire
00014522 6100 B7AE                  		bsr.w	FindFreeObj
00014526 6600                       		bne.s	@nofire
00014528 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
0001452C 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014530 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014536 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001453C 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014542 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014548                            
00014548                            	@nofire:
00014548 4E75                       		rts	
0001454A                            ; ===========================================================================
0001454A                            
0001454A                            Gar_FireBall:	; Routine 4
0001454A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001454E 117C 0008 0016             		move.b	#8,obHeight(a0)
00014554 117C 0008 0017             		move.b	#8,obWidth(a0)
0001455A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014562 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014568 0028 0004 0001             		ori.b	#4,obRender(a0)
0001456E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014574 117C 0098 0020             		move.b	#$98,obColType(a0)
0001457A 117C 0008 0014             		move.b	#8,obActWid(a0)
00014580 117C 0002 001A             		move.b	#2,obFrame(a0)
00014586 5068 000C                  		addq.w	#8,obY(a0)
0001458A 317C 0200 0010             		move.w	#$200,obVelX(a0)
00014590 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
00014596 6600                       		bne.s	@noflip		; if not, branch
00014598 4468 0010                  		neg.w	obVelX(a0)
0001459C                            
0001459C                            	@noflip:
000145A6                            
000145A6                            Gar_AniFire:	; Routine 6
000145A6 1038 FE05                  		move.b	(v_framebyte).w,d0
000145AA 0200 0007                  		andi.b	#7,d0
000145AE 6600                       		bne.s	@nochg
000145B0 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000145B6                            
000145B6                            	@nochg:
000145B6 6100 B27A                  		bsr.w	SpeedToPos
000145BA 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000145C0 6600                       		bne.s	@isright	; if not, branch
000145C2 76F8                       		moveq	#-8,d3
000145C4 6100 0000                  		bsr.w	ObjHitWallLeft
000145C8 4A41                       		tst.w	d1
000145CA 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000145CE 4E75                       		rts	
000145D0                            
000145D0                            	@isright:
000145D0 7608                       		moveq	#8,d3
000145D2 6100 0000                  		bsr.w	ObjHitWallRight
000145D6 4A41                       		tst.w	d1
000145D8 6B00 B2AC                  		bmi.w	DeleteObject
000145DC 4E75                       		rts	
000145DC 4E75                       		rts	
000145DE                            Map_Gar:	include	"_maps\Gargoyle.asm"
000145DE                            ; ---------------------------------------------------------------------------
000145DE                            ; Sprite mappings - gargoyle head (LZ)
000145DE                            ; ---------------------------------------------------------------------------
000145DE                            Map_Gar_internal:
000145DE 0000                       		dc.w @head-Map_Gar_internal
000145E0 0000                       		dc.w @head-Map_Gar_internal
000145E2 0000                       		dc.w @fireball1-Map_Gar_internal
000145E4 0000                       		dc.w @fireball2-Map_Gar_internal
000145E6 03                         @head:		dc.b 3
000145E7 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000145EC F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000145F1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000145F6 01                         @fireball1:	dc.b 1
000145F7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000145FC 01                         @fireball2:	dc.b 1
000145FD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014602                            		even
00014602                            		even
00014602                            		include	"_incObj\63 LZ Conveyor.asm"
00014602                            ; ---------------------------------------------------------------------------
00014602                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014602                            ; ---------------------------------------------------------------------------
00014602                            
00014602                            LabyrinthConvey:
00014602 7000                       		moveq	#0,d0
00014604 1028 0024                  		move.b	obRoutine(a0),d0
00014608 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
0001460C 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
0001462C                            
0001462C                            LCon_Display:
0001462C 6000 B218                  		bra.w	DisplaySprite
00014630                            ; ===========================================================================
00014630                            
00014630                            loc_1236A:
00014630 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00014636 6600                       		bne.s	loc_12378
00014638 0C40 FF80                  		cmpi.w	#-$80,d0
0001463C 64EE                       		bcc.s	LCon_Display
0001463E                            
0001463E                            loc_12378:
0001463E 1028 002F                  		move.b	$2F(a0),d0
00014642 6A00 B242                  		bpl.w	DeleteObject
00014646 0240 007F                  		andi.w	#$7F,d0
0001464A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001464E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014654 6000 B230                  		bra.w	DeleteObject
00014658                            ; ===========================================================================
00014658 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001465A 0000                       		dc.w loc_124B2-LCon_Index
0001465C 0000                       		dc.w loc_124C2-LCon_Index
0001465E 0000                       		dc.w loc_124DE-LCon_Index
00014660                            ; ===========================================================================
00014660                            
00014660                            LCon_Main:	; Routine 0
00014660 1028 0028                  		move.b	obSubtype(a0),d0
00014664 6B00 0000                  		bmi.w	loc_12460
00014668 5428 0024                  		addq.b	#2,obRoutine(a0)
0001466C 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00014674 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
0001467A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014680 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014686 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001468C 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00014692 6600                       		bne.s	loc_123E2
00014694 5828 0024                  		addq.b	#4,obRoutine(a0)
00014698 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
0001469E 317C 0080 0018             		move.w	#$80,obPriority(a0)
000146A4 6000 0000                  		bra.w	loc_124DE
000146A8                            ; ===========================================================================
000146A8                            
000146A8                            loc_123E2:
000146A8 117C 0004 001A             		move.b	#4,obFrame(a0)
000146AE 7000                       		moveq	#0,d0
000146B0 1028 0028                  		move.b	obSubtype(a0),d0
000146B4 3200                       		move.w	d0,d1
000146B6 E648                       		lsr.w	#3,d0
000146B8 0240 001E                  		andi.w	#$1E,d0
000146BC 45FA 0000                  		lea	LCon_Data(pc),a2
000146C0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000146C4 315A 0038                  		move.w	(a2)+,$38(a0)
000146C8 315A 0030                  		move.w	(a2)+,$30(a0)
000146CC 214A 003C                  		move.l	a2,$3C(a0)
000146D0 0241 000F                  		andi.w	#$F,d1
000146D4 E549                       		lsl.w	#2,d1
000146D6 1141 0038                  		move.b	d1,$38(a0)
000146DA 117C 0004 003A             		move.b	#4,$3A(a0)
000146E0 4A38 F7C0                  		tst.b	(f_conveyrev).w
000146E4 6700                       		beq.s	loc_1244C
000146E6 117C 0001 003B             		move.b	#1,$3B(a0)
000146EC 4428 003A                  		neg.b	$3A(a0)
000146F0 7200                       		moveq	#0,d1
000146F2 1228 0038                  		move.b	$38(a0),d1
000146F6 D228 003A                  		add.b	$3A(a0),d1
000146FA B228 0039                  		cmp.b	$39(a0),d1
000146FE 6500                       		bcs.s	loc_12448
00014700 1001                       		move.b	d1,d0
00014702 7200                       		moveq	#0,d1
00014704 4A00                       		tst.b	d0
00014706 6A00                       		bpl.s	loc_12448
00014708 1228 0039                  		move.b	$39(a0),d1
0001470C 5901                       		subq.b	#4,d1
0001470E                            
0001470E                            loc_12448:
0001470E 1141 0038                  		move.b	d1,$38(a0)
00014712                            
00014712                            loc_1244C:
00014712 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014718 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001471E 6100 0000                  		bsr.w	LCon_ChangeDir
00014722 6000 0000                  		bra.w	loc_124B2
00014726                            ; ===========================================================================
00014726                            
00014726                            loc_12460:
00014726 1140 002F                  		move.b	d0,$2F(a0)
0001472A 0240 007F                  		andi.w	#$7F,d0
0001472E 45F8 F7C1                  		lea	(v_obj63).w,a2
00014732 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014738 6600 B14C                  		bne.w	DeleteObject
0001473C D040                       		add.w	d0,d0
0001473E 0240 001E                  		andi.w	#$1E,d0
00014742 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00014746 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001474C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014750 321A                       		move.w	(a2)+,d1
00014752 2248                       		movea.l	a0,a1
00014754 6000                       		bra.s	LCon_MakePtfms
00014756                            ; ===========================================================================
00014756                            
00014756                            LCon_Loop:
00014756 6100 B57A                  		bsr.w	FindFreeObj
0001475A 6600                       		bne.s	loc_124AA
0001475C                            
0001475C                            LCon_MakePtfms:
0001475C 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014760 335A 0008                  		move.w	(a2)+,obX(a1)
00014764 335A 000C                  		move.w	(a2)+,obY(a1)
00014768 301A                       		move.w	(a2)+,d0
0001476A 1340 0028                  		move.b	d0,obSubtype(a1)
0001476E                            
0001476E                            loc_124AA:
0001476E 51C9 FFE6                  		dbf	d1,LCon_Loop
00014772                            
00014772 588F                       		addq.l	#4,sp
00014774 4E75                       		rts	
00014776                            ; ===========================================================================
00014776                            
00014776                            loc_124B2:	; Routine 2
00014776 7200                       		moveq	#0,d1
00014778 1228 0014                  		move.b	obActWid(a0),d1
0001477C 4EB9 0000 905A             		jsr	(PlatformObject).l
00014782 6000 0000                  		bra.w	sub_12502
00014786                            ; ===========================================================================
00014786                            
00014786                            loc_124C2:	; Routine 4
00014786 7200                       		moveq	#0,d1
00014788 1228 0014                  		move.b	obActWid(a0),d1
0001478C 4EB9 0000 91CE             		jsr	(ExitPlatform).l
00014792 3F28 0008                  		move.w	obX(a0),-(sp)
00014796 6100 0000                  		bsr.w	sub_12502
0001479A 341F                       		move.w	(sp)+,d2
0001479C 4EF9 0000 9738             		jmp	(MvSonicOnPtfm2).l
000147A2                            ; ===========================================================================
000147A2                            
000147A2                            loc_124DE:	; Routine 6
000147A2 3038 FE04                  		move.w	(v_framecount).w,d0
000147A6 0240 0003                  		andi.w	#3,d0
000147AA 6600                       		bne.s	loc_124FC
000147AC 7201                       		moveq	#1,d1
000147AE 4A38 F7C0                  		tst.b	(f_conveyrev).w
000147B2 6700                       		beq.s	loc_124F2
000147B4 4401                       		neg.b	d1
000147B6                            
000147B6                            loc_124F2:
000147B6 D328 001A                  		add.b	d1,obFrame(a0)
000147BA 0228 0003 001A             		andi.b	#3,obFrame(a0)
000147C0                            
000147C0                            loc_124FC:
000147C0 588F                       		addq.l	#4,sp
000147C2 6000 CFF8                  		bra.w	RememberState
000147C6                            
000147C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147C6                            
000147C6                            
000147C6                            sub_12502:
000147C6 4A38 F7EE                  		tst.b	(f_switch+$E).w
000147CA 6700                       		beq.s	loc_12520
000147CC 4A28 003B                  		tst.b	$3B(a0)
000147D0 6600                       		bne.s	loc_12520
000147D2 117C 0001 003B             		move.b	#1,$3B(a0)
000147D8 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000147DE 4428 003A                  		neg.b	$3A(a0)
000147E2 6000                       		bra.s	loc_12534
000147E4                            ; ===========================================================================
000147E4                            
000147E4                            loc_12520:
000147E4 3028 0008                  		move.w	obX(a0),d0
000147E8 B068 0034                  		cmp.w	$34(a0),d0
000147EC 6600                       		bne.s	loc_1256A
000147EE 3028 000C                  		move.w	obY(a0),d0
000147F2 B068 0036                  		cmp.w	$36(a0),d0
000147F6 6600                       		bne.s	loc_1256A
000147F8                            
000147F8                            loc_12534:
000147F8 7200                       		moveq	#0,d1
000147FA 1228 0038                  		move.b	$38(a0),d1
000147FE D228 003A                  		add.b	$3A(a0),d1
00014802 B228 0039                  		cmp.b	$39(a0),d1
00014806 6500                       		bcs.s	loc_12552
00014808 1001                       		move.b	d1,d0
0001480A 7200                       		moveq	#0,d1
0001480C 4A00                       		tst.b	d0
0001480E 6A00                       		bpl.s	loc_12552
00014810 1228 0039                  		move.b	$39(a0),d1
00014814 5901                       		subq.b	#4,d1
00014816                            
00014816                            loc_12552:
00014816 1141 0038                  		move.b	d1,$38(a0)
0001481A 2268 003C                  		movea.l	$3C(a0),a1
0001481E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014824 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001482A 6100 0000                  		bsr.w	LCon_ChangeDir
0001482E                            
0001482E                            loc_1256A:
0001482E 6100 B002                  		bsr.w	SpeedToPos
00014832 4E75                       		rts	
00014834                            ; End of function sub_12502
00014834                            
00014834                            
00014834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014834                            
00014834                            
00014834                            LCon_ChangeDir:
00014834 7000                       		moveq	#0,d0
00014836 343C FF00                  		move.w	#-$100,d2
0001483A 3028 0008                  		move.w	obX(a0),d0
0001483E 9068 0034                  		sub.w	$34(a0),d0
00014842 6400                       		bcc.s	loc_12584
00014844 4440                       		neg.w	d0
00014846 4442                       		neg.w	d2
00014848                            
00014848                            loc_12584:
00014848 7200                       		moveq	#0,d1
0001484A 363C FF00                  		move.w	#-$100,d3
0001484E 3228 000C                  		move.w	obY(a0),d1
00014852 9268 0036                  		sub.w	$36(a0),d1
00014856 6400                       		bcc.s	loc_12598
00014858 4441                       		neg.w	d1
0001485A 4443                       		neg.w	d3
0001485C                            
0001485C                            loc_12598:
0001485C B240                       		cmp.w	d0,d1
0001485E 6500                       		bcs.s	loc_125C2
00014860 3028 0008                  		move.w	obX(a0),d0
00014864 9068 0034                  		sub.w	$34(a0),d0
00014868 6700                       		beq.s	loc_125AE
0001486A 48C0                       		ext.l	d0
0001486C E180                       		asl.l	#8,d0
0001486E 81C1                       		divs.w	d1,d0
00014870 4440                       		neg.w	d0
00014872                            
00014872                            loc_125AE:
00014872 3140 0010                  		move.w	d0,obVelX(a0)
00014876 3143 0012                  		move.w	d3,obVelY(a0)
0001487A 4840                       		swap	d0
0001487C 3140 000A                  		move.w	d0,obX+2(a0)
00014880 4268 000E                  		clr.w	obY+2(a0)
00014884 4E75                       		rts	
00014886                            ; ===========================================================================
00014886                            
00014886                            loc_125C2:
00014886 3228 000C                  		move.w	obY(a0),d1
0001488A 9268 0036                  		sub.w	$36(a0),d1
0001488E 6700                       		beq.s	loc_125D4
00014890 48C1                       		ext.l	d1
00014892 E181                       		asl.l	#8,d1
00014894 83C0                       		divs.w	d0,d1
00014896 4441                       		neg.w	d1
00014898                            
00014898                            loc_125D4:
00014898 3141 0012                  		move.w	d1,obVelY(a0)
0001489C 3142 0010                  		move.w	d2,obVelX(a0)
000148A0 4841                       		swap	d1
000148A2 3141 000E                  		move.w	d1,obY+2(a0)
000148A6 4268 000A                  		clr.w	obX+2(a0)
000148AA 4E75                       		rts	
000148AC                            ; End of function LCon_ChangeDir
000148AC                            
000148AC                            ; ===========================================================================
000148AC 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000148AE 0000                       		dc.w word_12610-LCon_Data
000148B0 0000                       		dc.w word_12628-LCon_Data
000148B2 0000                       		dc.w word_1263C-LCon_Data
000148B4 0000                       		dc.w word_12650-LCon_Data
000148B6 0000                       		dc.w word_12668-LCon_Data
000148B8 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000148C8 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000148D4 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000148E4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000148EC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014900 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014914 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001492C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001492C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014940                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014940                            ; ---------------------------------------------------------------------------
00014940                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014940                            ; ---------------------------------------------------------------------------
00014940                            Map_LConv_internal:
00014940 0000                       		dc.w @wheel1-Map_LConv_internal
00014942 0000                       		dc.w @wheel2-Map_LConv_internal
00014944 0000                       		dc.w @wheel3-Map_LConv_internal
00014946 0000                       		dc.w @wheel4-Map_LConv_internal
00014948 0000                       		dc.w @platform-Map_LConv_internal
0001494A 01                         @wheel1:	dc.b 1
0001494B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014950 01                         @wheel2:	dc.b 1
00014951 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014956 01                         @wheel3:	dc.b 1
00014957 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001495C 01                         @wheel4:	dc.b 1
0001495D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014962 01                         @platform:	dc.b 1
00014963 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014968                            		even
00014968                            		even
00014968                            		include	"_incObj\64 Bubbles.asm"
00014968                            ; ---------------------------------------------------------------------------
00014968                            ; Object 64 - bubbles (LZ)
00014968                            ; ---------------------------------------------------------------------------
00014968                            
00014968                            Bubble:
00014968 7000                       		moveq	#0,d0
0001496A 1028 0024                  		move.b	obRoutine(a0),d0
0001496E 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014972 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014976                            ; ===========================================================================
00014976 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014978 0000                       		dc.w Bub_Animate-Bub_Index
0001497A 0000                       		dc.w Bub_ChkWater-Bub_Index
0001497C 0000                       		dc.w Bub_Display-Bub_Index
0001497E 0000                       		dc.w Bub_Delete-Bub_Index
00014980 0000                       		dc.w Bub_BblMaker-Bub_Index
00014982                            
00014982 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014982 =00000030                  bub_origX:	equ $30		; original x-axis position
00014982 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014982 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014982                            ; ===========================================================================
00014982                            
00014982                            Bub_Main:	; Routine 0
00014982 5428 0024                  		addq.b	#2,obRoutine(a0)
00014986 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
0001498E 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014994 117C 0084 0001             		move.b	#$84,obRender(a0)
0001499A 117C 0010 0014             		move.b	#$10,obActWid(a0)
000149A0 317C 0080 0018             		move.w	#$80,obPriority(a0)
000149A6 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000149AA 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000149AC                            
000149AC 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000149B0 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000149B4 1140 0032                  		move.b	d0,bub_time(a0)
000149B8 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000149BC 117C 0006 001C             		move.b	#6,obAnim(a0)
000149C2 6000 0000                  		bra.w	Bub_BblMaker
000149C6                            ; ===========================================================================
000149C6                            
000149C6                            @bubble:
000149C6 1140 001C                  		move.b	d0,obAnim(a0)
000149CA 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
000149D0 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
000149D6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
000149DC 1140 0026                  		move.b	d0,obAngle(a0)
000149E0                            
000149E0                            Bub_Animate:	; Routine 2
000149E0 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000149E6 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
000149EC 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
000149F2 6600                       		bne.s	Bub_ChkWater	; if not, branch
000149F4                            
000149F4 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
000149FA                            
000149FA                            Bub_ChkWater:	; Routine 4
000149FA 3038 F646                  		move.w	(v_waterpos1).w,d0
000149FE B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014A02 6500                       		bcs.s	@wobble		; if yes, branch
00014A04                            
00014A04                            @burst:
00014A04 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014A0A 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014A0E 6000 0000                  		bra.w	Bub_Display
00014A12                            ; ===========================================================================
00014A12                            
00014A12                            @wobble:
00014A12 1028 0026                  		move.b	obAngle(a0),d0
00014A16 5228 0026                  		addq.b	#1,obAngle(a0)
00014A1A 0240 007F                  		andi.w	#$7F,d0
00014A1E 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014A24 1031 0000                  		move.b	(a1,d0.w),d0
00014A28 4880                       		ext.w	d0
00014A2A D068 0030                  		add.w	bub_origX(a0),d0
00014A2E 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014A32 4A28 002E                  		tst.b	bub_inhalable(a0)
00014A36 6700                       		beq.s	@display
00014A38 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014A3C 6700                       		beq.s	@display	; if not, branch
00014A3E                            
00014A3E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014A4C 43F8 D000                  		lea	(v_player).w,a1
00014A50 4269 0010                  		clr.w	obVelX(a1)
00014A54 4269 0012                  		clr.w	obVelY(a1)
00014A58 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014A5C 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014A62 337C 0023 003E             		move.w	#$23,$3E(a1)
00014A68 137C 0000 003C             		move.b	#0,$3C(a1)
00014A6E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014A74 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014A7A 0829 0002 0022             		btst	#2,obStatus(a1)
00014A80 6700 FF82                  		beq.w	@burst
00014A84 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014A8A 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014A90 137C 0009 0017             		move.b	#9,obWidth(a1)
00014A96 5B69 000C                  		subq.w	#5,obY(a1)
00014A9A 6000 FF68                  		bra.w	@burst
00014A9E                            ; ===========================================================================
00014A9E                            
00014A9E                            @display:
00014A9E 6100 AD92                  		bsr.w	SpeedToPos
00014AA2 4A28 0001                  		tst.b	obRender(a0)
00014AA6 6A00                       		bpl.s	@delete
00014AA8 4EF9 0000 F846             		jmp	(DisplaySprite).l
00014AAE                            
00014AAE                            	@delete:
00014AAE 4EF9 0000 F886             		jmp	(DeleteObject).l
00014AB4                            ; ===========================================================================
00014AB4                            
00014AB4                            Bub_Display:	; Routine 6
00014AB4 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014ABA 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00014AC0 4A28 0001                  		tst.b	obRender(a0)
00014AC4 6A00                       		bpl.s	@delete
00014AC6 4EF9 0000 F846             		jmp	(DisplaySprite).l
00014ACC                            
00014ACC                            	@delete:
00014ACC 4EF9 0000 F886             		jmp	(DeleteObject).l
00014AD2                            ; ===========================================================================
00014AD2                            
00014AD2                            Bub_Delete:	; Routine 8
00014AD2 6000 ADB2                  		bra.w	DeleteObject
00014AD6                            ; ===========================================================================
00014AD6                            
00014AD6                            Bub_BblMaker:	; Routine $A
00014AD6 4A68 0036                  		tst.w	$36(a0)
00014ADA 6600                       		bne.s	@loc_12874
00014ADC 3038 F646                  		move.w	(v_waterpos1).w,d0
00014AE0 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014AE4 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014AE8 4A28 0001                  		tst.b	obRender(a0)
00014AEC 6A00 0000                  		bpl.w	@chkdel
00014AF0 5368 0038                  		subq.w	#1,$38(a0)
00014AF4 6A00 0000                  		bpl.w	@loc_12914
00014AF8 317C 0001 0036             		move.w	#1,$36(a0)
00014AFE                            
00014AFE                            	@tryagain:
00014AFE 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B04 3200                       		move.w	d0,d1
00014B06 0240 0007                  		andi.w	#7,d0
00014B0A 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014B0E 64EE                       		bcc.s	@tryagain	; if yes, branch
00014B10                            
00014B10 1140 0034                  		move.b	d0,$34(a0)
00014B14 0241 000C                  		andi.w	#$C,d1
00014B18 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014B1E D2C1                       		adda.w	d1,a1
00014B20 2149 003C                  		move.l	a1,$3C(a0)
00014B24 5328 0032                  		subq.b	#1,bub_time(a0)
00014B28 6A00                       		bpl.s	@loc_12872
00014B2A 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014B30 08E8 0007 0036             		bset	#7,$36(a0)
00014B36                            
00014B36                            @loc_12872:
00014B36 6000                       		bra.s	@loc_1287C
00014B38                            ; ===========================================================================
00014B38                            
00014B38                            @loc_12874:
00014B38 5368 0038                  		subq.w	#1,$38(a0)
00014B3C 6A00 0000                  		bpl.w	@loc_12914
00014B40                            
00014B40                            @loc_1287C:
00014B40 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B46 0240 001F                  		andi.w	#$1F,d0
00014B4A 3140 0038                  		move.w	d0,$38(a0)
00014B4E 6100 B182                  		bsr.w	FindFreeObj
00014B52 6600                       		bne.s	@fail
00014B54 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014B58 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014B5E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B64 0240 000F                  		andi.w	#$F,d0
00014B68 5140                       		subq.w	#8,d0
00014B6A D169 0008                  		add.w	d0,obX(a1)
00014B6E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014B74 7000                       		moveq	#0,d0
00014B76 1028 0034                  		move.b	$34(a0),d0
00014B7A 2468 003C                  		movea.l	$3C(a0),a2
00014B7E 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014B84 0828 0007 0036             		btst	#7,$36(a0)
00014B8A 6700                       		beq.s	@fail
00014B8C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014B92 0240 0003                  		andi.w	#3,d0
00014B96 6600                       		bne.s	@loc_buh
00014B98 08E8 0006 0036             		bset	#6,$36(a0)
00014B9E 6600                       		bne.s	@fail
00014BA0 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014BA6                            
00014BA6                            @loc_buh:
00014BA6 4A28 0034                  		tst.b	$34(a0)
00014BAA 6600                       		bne.s	@fail
00014BAC 08E8 0006 0036             		bset	#6,$36(a0)
00014BB2 6600                       		bne.s	@fail
00014BB4 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014BBA                            
00014BBA                            	@fail:
00014BBA 5328 0034                  		subq.b	#1,$34(a0)
00014BBE 6A00                       		bpl.s	@loc_12914
00014BC0 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00014BC6 0240 007F                  		andi.w	#$7F,d0
00014BCA 0640 0080                  		addi.w	#$80,d0
00014BCE D168 0038                  		add.w	d0,$38(a0)
00014BD2 4268 0036                  		clr.w	$36(a0)
00014BD6                            
00014BD6                            @loc_12914:
00014BD6 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BDC 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00014BE2                            
00014BE2                            @chkdel:
00014C00 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C04 B068 000C                  		cmp.w	obY(a0),d0
00014C08 6500 AC3C                  		bcs.w	DisplaySprite
00014C0C 4E75                       		rts	
00014C0E                            ; ===========================================================================
00014C0E                            ; bubble production sequence
00014C0E                            
00014C0E                            ; 0 = small bubble, 1 =	large bubble
00014C0E                            
00014C0E 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014C20                            
00014C20                            ; ===========================================================================
00014C20                            
00014C20                            Bub_ChkSonic:
00014C20 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014C24 6B00                       		bmi.s	@loc_12998
00014C26 43F8 D000                  		lea	(v_player).w,a1
00014C2A 3029 0008                  		move.w	obX(a1),d0
00014C2E 3228 0008                  		move.w	obX(a0),d1
00014C32 0441 0010                  		subi.w	#$10,d1
00014C36 B240                       		cmp.w	d0,d1
00014C38 6400                       		bcc.s	@loc_12998
00014C3A 0641 0020                  		addi.w	#$20,d1
00014C3E B240                       		cmp.w	d0,d1
00014C40 6500                       		bcs.s	@loc_12998
00014C42 3029 000C                  		move.w	obY(a1),d0
00014C46 3228 000C                  		move.w	obY(a0),d1
00014C4A B240                       		cmp.w	d0,d1
00014C4C 6400                       		bcc.s	@loc_12998
00014C4E 0641 0010                  		addi.w	#$10,d1
00014C52 B240                       		cmp.w	d0,d1
00014C54 6500                       		bcs.s	@loc_12998
00014C56 7001                       		moveq	#1,d0
00014C58 4E75                       		rts	
00014C5A                            ; ===========================================================================
00014C5A                            
00014C5A                            @loc_12998:
00014C5A 7000                       		moveq	#0,d0
00014C5C 4E75                       		rts	
00014C5C 4E75                       		rts	
00014C5E                            		include	"_anim\Bubbles.asm"
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E                            ; Animation script - bubbles (LZ)
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014C60 0000                       		dc.w @medium-Ani_Bub
00014C62 0000                       		dc.w @large-Ani_Bub
00014C64 0000                       		dc.w @incroutine-Ani_Bub
00014C66 0000                       		dc.w @incroutine-Ani_Bub
00014C68 0000                       		dc.w @burst-Ani_Bub
00014C6A 0000                       		dc.w @bubmaker-Ani_Bub
00014C6C 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014C72 00                         		even
00014C72 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014C78 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014C80 00                         		even
00014C80 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014C82 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014C88 00                         		even
00014C88 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014C8E 00                         		even
00014C8E 00                         		even
00014C8E                            Map_Bub:	include	"_maps\Bubbles.asm"
00014C8E                            ; ---------------------------------------------------------------------------
00014C8E                            ; Sprite mappings - bubbles (LZ)
00014C8E                            ; ---------------------------------------------------------------------------
00014C8E                            Map_Bub_internal:
00014C8E 0000                       		dc.w @bubble1-Map_Bub_internal
00014C90 0000                       		dc.w @bubble2-Map_Bub_internal
00014C92 0000                       		dc.w @bubble3-Map_Bub_internal
00014C94 0000                       		dc.w @bubble4-Map_Bub_internal
00014C96 0000                       		dc.w @bubble5-Map_Bub_internal
00014C98 0000                       		dc.w @bubble6-Map_Bub_internal
00014C9A 0000                       		dc.w @bubblefull-Map_Bub_internal
00014C9C 0000                       		dc.w @burst1-Map_Bub_internal
00014C9E 0000                       		dc.w @burst2-Map_Bub_internal
00014CA0 0000                       		dc.w @zero_sm-Map_Bub_internal
00014CA2 0000                       		dc.w @five_sm-Map_Bub_internal
00014CA4 0000                       		dc.w @three_sm-Map_Bub_internal
00014CA6 0000                       		dc.w @one_sm-Map_Bub_internal
00014CA8 0000                       		dc.w @zero-Map_Bub_internal
00014CAA 0000                       		dc.w @five-Map_Bub_internal
00014CAC 0000                       		dc.w @four-Map_Bub_internal
00014CAE 0000                       		dc.w @three-Map_Bub_internal
00014CB0 0000                       		dc.w @two-Map_Bub_internal
00014CB2 0000                       		dc.w @one-Map_Bub_internal
00014CB4 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014CB6 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014CB8 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014CBA 0000                       		dc.w @blank-Map_Bub_internal
00014CBC 01                         @bubble1:	dc.b 1
00014CBD FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014CC2 01                         @bubble2:	dc.b 1
00014CC3 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014CC8 01                         @bubble3:	dc.b 1
00014CC9 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014CCE 01                         @bubble4:	dc.b 1
00014CCF F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014CD4 01                         @bubble5:	dc.b 1
00014CD5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014CDA 01                         @bubble6:	dc.b 1
00014CDB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014CE0 01                         @bubblefull:	dc.b 1
00014CE1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014CE6 04                         @burst1:	dc.b 4
00014CE7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014CEC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014CF1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014CF6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014CFB 04                         @burst2:	dc.b 4
00014CFC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014D01 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014D06 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014D0B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014D10 01                         @zero_sm:	dc.b 1
00014D11 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014D16 01                         @five_sm:	dc.b 1
00014D17 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014D1C 01                         @three_sm:	dc.b 1
00014D1D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014D22 01                         @one_sm:	dc.b 1
00014D23 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014D28 01                         @zero:		dc.b 1
00014D29 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014D2E 01                         @five:		dc.b 1
00014D2F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014D34 01                         @four:		dc.b 1
00014D35 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014D3A 01                         @three:		dc.b 1
00014D3B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014D40 01                         @two:		dc.b 1
00014D41 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014D46 01                         @one:		dc.b 1
00014D47 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014D4C 01                         @bubmaker1:	dc.b 1
00014D4D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014D52 01                         @bubmaker2:	dc.b 1
00014D53 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014D58 01                         @bubmaker3:	dc.b 1
00014D59 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014D5E 00                         @blank:		dc.b 0
00014D60 00                         		even
00014D60 00                         		even
00014D60                            		include	"_incObj\65 Waterfalls.asm"
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            ; Object 65 - waterfalls (LZ)
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            
00014D60                            Waterfall:
00014D60 7000                       		moveq	#0,d0
00014D62 1028 0024                  		move.b	obRoutine(a0),d0
00014D66 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014D6A 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014D6E                            ; ===========================================================================
00014D6E 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014D70 0000                       		dc.w WFall_Animate-WFall_Index
00014D72 0000                       		dc.w WFall_ChkDel-WFall_Index
00014D74 0000                       		dc.w WFall_OnWater-WFall_Index
00014D76 0000                       		dc.w loc_12B36-WFall_Index
00014D78                            ; ===========================================================================
00014D78                            
00014D78                            WFall_Main:	; Routine 0
00014D78 5828 0024                  		addq.b	#4,obRoutine(a0)
00014D7C 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014D84 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014D8A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014D90 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014D96 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014D9C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014DA0 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014DA2 08E8 0007 0002             		bset	#7,obGfx(a0)
00014DA8                            
00014DA8                            	@under80:
00014DA8 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014DAC 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014DB0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014DB4 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014DB6                            
00014DB6 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014DBA 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014DBE 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014DC4 6700                       		beq.s	@not49		; if not, branch
00014DC6                            
00014DC6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014DCC                            
00014DCC                            	@not49:
00014DCC 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014DD2 6700                       		beq.s	WFall_Animate	; if not, branch
00014DD4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014DDA                            
00014DDA                            WFall_Animate:	; Routine 2
00014DDA 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014DE0 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00014DE6                            
00014DE6                            WFall_ChkDel:	; Routine 4
00014DE6 6000 C9D4                  		bra.w	RememberState
00014DEA                            ; ===========================================================================
00014DEA                            
00014DEA                            WFall_OnWater:	; Routine 6
00014DEA 3038 F646                  		move.w	(v_waterpos1).w,d0
00014DEE 0440 0010                  		subi.w	#$10,d0
00014DF2 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014DF6 60E2                       		bra.s	WFall_Animate
00014DF8                            ; ===========================================================================
00014DF8                            
00014DF8                            loc_12B36:	; Routine 8
00014DF8 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014DFE 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014E04 6600                       		bne.s	@animate
00014E06 08E8 0007 0002             		bset	#7,obGfx(a0)
00014E0C                            
00014E0C                            	@animate:
00014E0C 60CC                       		bra.s	WFall_Animate
00014E0C 60CC                       		bra.s	WFall_Animate
00014E0E                            		include	"_anim\Waterfalls.asm"
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            ; Animation script - waterfall (LZ)
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014E10 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014E16 00                         		even
00014E16 00                         		even
00014E16                            Map_WFall	include	"_maps\Waterfalls.asm"
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            ; Sprite mappings - waterfalls (LZ)
00014E16                            ; ---------------------------------------------------------------------------
00014E16                            Map_WFall_internal:
00014E16 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014E18 0000                       		dc.w @cornerwide-Map_WFall_internal
00014E1A 0000                       		dc.w @cornermedium-Map_WFall_internal
00014E1C 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014E1E 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014E20 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014E22 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014E24 0000                       		dc.w @vertwide-Map_WFall_internal
00014E26 0000                       		dc.w @diagonal-Map_WFall_internal
00014E28 0000                       		dc.w @splash1-Map_WFall_internal
00014E2A 0000                       		dc.w @splash2-Map_WFall_internal
00014E2C 0000                       		dc.w @splash3-Map_WFall_internal
00014E2E 01                         @vertnarrow:	dc.b 1
00014E2F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014E34 02                         @cornerwide:	dc.b 2
00014E35 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014E3A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014E3F 02                         @cornermedium:	dc.b 2
00014E40 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014E45 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014E4A 01                         @cornernarrow:	dc.b 1
00014E4B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014E50 02                         @cornermedium2:	dc.b 2
00014E51 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014E56 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014E5B 01                         @cornernarrow2:	dc.b 1
00014E5C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014E61 01                         @cornernarrow3:	dc.b 1
00014E62 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014E67 01                         @vertwide:	dc.b 1
00014E68 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014E6D 02                         @diagonal:	dc.b 2
00014E6E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014E73 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014E78 02                         @splash1:	dc.b 2
00014E79 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014E7E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014E83 02                         @splash2:	dc.b 2
00014E84 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014E89 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014E8E 02                         @splash3:	dc.b 2
00014E8F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014E94 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014E9A 00                         		even
00014E9A 00                         		even
00014E9A                            
00014E9A                            
00014E9A                            SpinDash_dust:
00014E9A                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014E9A 7000                       		moveq	#0,d0
00014E9C 1028 0024                  		move.b	$24(a0),d0
00014EA0 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014EA4 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014EA8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EA8 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014EAA 0000                       		dc loc_1DD90-off_1DD2E; 1
00014EAC 0000                       		dc loc_1DE46-off_1DD2E; 2
00014EAE 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014EB0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014EB0                            
00014EB0                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014EB0 5428 0024                  		addq.b	#2,$24(a0)
00014EB4 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014EBC 0028 0004 0001             		or.b	#4,1(a0)
00014EC2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014EC8 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014ECE 317C 07A0 0002             		move	#$7A0,2(a0)
00014ED4 317C D000 003E             		move	#-$3000,$3E(a0)
00014EDA 317C F400 003C             		move	#$F400,$3C(a0)
00014EE0 B0FC D1C0                  		cmp	#-$2E40,a0
00014EE4 6700                       		beq.s	loc_1DD8C
00014EE6 117C 0001 0034             		move.b	#1,$34(a0)
00014EEC                            ;		cmp	#2,($FFFFFF70).w
00014EEC                            ;		beq.s	loc_1DD8C
00014EEC                            ;		move	#$48C,2(a0)
00014EEC                            ;		move	#-$4FC0,$3E(a0)
00014EEC                            ;		move	#-$6E80,$3C(a0)
00014EEC                            
00014EEC                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014EEC                            ;		bsr.w	sub_16D6E
00014EEC                            
00014EEC                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014EEC 3468 003E                  		movea.w	$3E(a0),a2
00014EF0 7000                       		moveq	#0,d0
00014EF2 1028 001C                  		move.b	$1C(a0),d0
00014EF6 D040                       		add	d0,d0
00014EF8 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014EFC 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014F00                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F00 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014F02 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014F04 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014F06 0000                       		dc loc_1DE20-off_1DDA4; 3
00014F08                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F08                            
00014F08                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014F08 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014F0E 4A28 001D                  		tst.b	$1D(a0)
00014F12 6600                       		bne.s	loc_1DE28
00014F14 316A 0008 0008             		move	8(a2),8(a0)
00014F1A 117C 0000 0022             		move.b	#0,$22(a0)
00014F20 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014F26 6000                       		bra.s	loc_1DE28
00014F28                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F28                            
00014F28                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014F28                            ;		cmp.b	#$C,$28(a2)
00014F28                            ;		bcs.s	loc_1DE3E
00014F28 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014F2E 6400                       		bcc.s	loc_1DE3E
00014F30 4A2A 0039                  		tst.b	$39(a2)
00014F34 6700                       		beq.s	loc_1DE3E
00014F36 316A 0008 0008             		move	8(a2),8(a0)
00014F3C 316A 000C 000C             		move	$C(a2),$C(a0)
00014F42 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014F48 0228 0001 0022             		and.b	#1,$22(a0)
00014F4E 4A28 0034                  		tst.b	$34(a0)
00014F52 6700                       		beq.s	loc_1DE06
00014F54 5968 000C                  		sub	#4,$C(a0)
00014F58                            
00014F58                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014F58 4A28 001D                  		tst.b	$1D(a0)
00014F5C 6600                       		bne.s	loc_1DE28
00014F5E 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014F64 4A6A 0002                  		tst	2(a2)
00014F68 6A00                       		bpl.s	loc_1DE28
00014F6A 0068 8000 0002             		or	#-$8000,2(a0)
00014F70                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F70                            
00014F70                            loc_1DE20:				; DATA XREF: h+6E30?o
00014F70                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014F70 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014F76 4EB9 0000 C8FA             		jsr	AnimateSprite
00014F7C 6100 0000                  		bsr.w	loc_1DEE4
00014F80 4EFA A8C4                  		jmp	DisplaySprite
00014F84                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F84                            
00014F84                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014F84 117C 0000 001C             		move.b	#0,$1C(a0)
00014F8A 4E75                       		rts	
00014F8C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F8C                            
00014F8C                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014F8C 6000 A8F8                  		bra.w	DeleteObject
00014F90                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014F90                            
00014F90                            
00014F90                            
00014F90                            loc_1DE4A:
00014F90 3468 003E                  	movea.w	$3E(a0),a2
00014F94 7210                       	moveq	#$10,d1
00014F96 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014F9C 6700                       	beq.s	loc_1DE64
00014F9E 7206                       	moveq	#$6,d1
00014FA0 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014FA6 6700                       	beq.s	loc_1DE64
00014FA8 117C 0002 0024             	move.b	#2,$24(a0)
00014FAE 117C 0000 0032             	move.b	#0,$32(a0)
00014FB4 4E75                       	rts
00014FB6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FB6                            
00014FB6                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014FB6 5328 0032                  		subq.b	#1,$32(a0)
00014FBA 6A00                       		bpl.s	loc_1DEE0
00014FBC 117C 0003 0032             		move.b	#3,$32(a0)
00014FC2 4EBA AD0E                  		jsr	FindFreeObj
00014FC6 6600                       		bne.s	loc_1DEE0
00014FC8 1290                       		move.b	0(a0),0(a1)
00014FCA 336A 0008 0008             		move	8(a2),8(a1)
00014FD0 336A 000C 000C             		move	$C(a2),$C(a1)
00014FD6 4A28 0034                  		tst.b	$34(a0)
00014FDA 6700                       		beq.s	loc_1DE9A
00014FDC 5941                       		sub	#4,d1
00014FDE                            
00014FDE                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014FDE D369 000C                  		add	d1,$C(a1)
00014FE2 137C 0000 0022             		move.b	#0,$22(a1)
00014FE8 137C 0003 001C             		move.b	#3,$1C(a1)
00014FEE 5429 0024                  		addq.b	#2,$24(a1)
00014FF2 2368 0004 0004             		move.l	4(a0),4(a1)
00014FF8 1368 0001 0001             		move.b	1(a0),1(a1)
00014FFE 337C 0080 0018             		move.w	#$80,obPriority(a1)
00015004 137C 0004 0014             		move.b	#4,obActWid(a1)
0001500A 3368 0002 0002             		move	2(a0),2(a1)
00015010 3368 003E 003E             		move	$3E(a0),$3E(a1)
00015016 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001501C 4A6A 0002                  		tst	2(a2)
00015020 6A00                       		bpl.s	loc_1DEE0
00015022 0069 8000 0002             		or	#-$8000,2(a1)
00015028                            
00015028                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015028 6100                       		bsr.s	loc_1DEE4
0001502A 4E75                       		rts	
0001502C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001502C                            
0001502C                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
0001502C 7000                       		moveq	#0,d0
0001502E 1028 001A                  		move.b	$1A(a0),d0
00015032 B028 0030                  		cmp.b	$30(a0),d0
00015036 6700 0000                  		beq.w	locret_1DF36
0001503A 1140 0030                  		move.b	d0,$30(a0)
0001503E 45F9 0000 0000             		lea	(off_1E074).l,a2
00015044 D040                       		add	d0,d0
00015046 D4F2 0000                  		add	(a2,d0.w),a2
0001504A 3A1A                       		move	(a2)+,d5
0001504C 5345                       		subq	#1,d5
0001504E 6B00 0000                  		bmi.w	locret_1DF36
00015052 3828 003C                  		move $3C(a0),d4
00015056                            
00015056                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00015056 7200                       		moveq	#0,d1
00015058 321A                       		move	(a2)+,d1
0001505A 3601                       		move	d1,d3
0001505C E04B                       		lsr.w	#8,d3
0001505E 0243 00F0                  		and	#$F0,d3	; 'ð'
00015062 0643 0010                  		add	#$10,d3
00015066 0241 0FFF                  		and	#$FFF,d1
0001506A EB89                       		lsl.l	#5,d1
0001506C 0681 0000 0000             		add.l	#Art_Dust,d1
00015072 3404                       		move	d4,d2
00015074 D843                       		add	d3,d4
00015076 D843                       		add	d3,d4
00015078 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
0001507E 51CD FFD6                  		dbf	d5,loc_1DF0A
00015082 4E75                           rts
00015084                            
00015084                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00015084 4E75                       		rts	
00015086                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015086 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00015088 0000                       		dc byte_1DF43-off_1DF38; 1
0001508A 0000                       		dc byte_1DF4F-off_1DF38; 2
0001508C 0000                       		dc byte_1DF58-off_1DF38; 3
0001508E 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00015091 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001509D 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000150A6 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000150AC                            ; -------------------------------------------------------------------------------
000150AC                            ; Unknown Sprite Mappings
000150AC                            ; -------------------------------------------------------------------------------
000150AC                            MapUnc_1DF5E:
000150AC 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000150AE 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000150B0 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000150B2 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000150B4 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000150B6 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000150B8 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000150BA 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000150BC 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000150BE 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000150C0 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000150C2 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000150C4 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000150C6 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000150C8 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000150CA 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000150CC 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000150CE 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000150D0 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000150D2 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000150D4 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000150D6 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000150D8 00                         word_1DF8A:	dc.b 0
000150D9 01                         word_1DF8C:	dc.b 1
000150DA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000150DF 01                         word_1DF96:	dc.b 1
000150E0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000150E5 01                         word_1DFA0:	dc.b 1
000150E6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000150EB 01                         word_1DFAA:	dc.b 1
000150EC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000150F1 01                         word_1DFB4:	dc.b 1
000150F2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000150F7 01                         word_1DFBE:	dc.b 1
000150F8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000150FD 01                         word_1DFC8:	dc.b 1
000150FE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015103 01                         word_1DFD2:	dc.b 1
00015104 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015109 01                         word_1DFDC:	dc.b 1
0001510A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001510F 01                         word_1DFE6:	dc.b 1
00015110 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015115 01                         word_1DFF0:	dc.b 1
00015116 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001511B 01                         word_1DFFA:	dc.b 1
0001511C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015121 02                         word_1E004:	dc.b 2
00015122 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00015127 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001512C 02                         word_1E016:	dc.b 2
0001512D F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015132 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00015137 02                         word_1E028:	dc.b 2
00015138 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001513D 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015142 02                         word_1E03A:	dc.b 2
00015143 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015148 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001514D 01                         word_1E04C:	dc.b 1
0001514E F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015153 01                         word_1E056:	dc.b 1
00015154 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00015159 01                         word_1E060:	dc.b 1
0001515A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001515F 01                         word_1E06A:	dc.b 1
00015160 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00015165 00                         	dc.b 0
00015166 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00015168 0000                       	dc word_1E0A2-off_1E074; 1
0001516A 0000                       	dc word_1E0A6-off_1E074; 2
0001516C 0000                       	dc word_1E0AA-off_1E074; 3
0001516E 0000                       	dc word_1E0AE-off_1E074; 4
00015170 0000                       	dc word_1E0B2-off_1E074; 5
00015172 0000                       	dc word_1E0B6-off_1E074; 6
00015174 0000                       	dc word_1E0BA-off_1E074; 7
00015176 0000                       	dc word_1E0BE-off_1E074; 8
00015178 0000                       	dc word_1E0C2-off_1E074; 9
0001517A 0000                       	dc word_1E0C6-off_1E074; 10
0001517C 0000                       	dc word_1E0CA-off_1E074; 11
0001517E 0000                       	dc word_1E0CE-off_1E074; 12
00015180 0000                       	dc word_1E0D2-off_1E074; 13
00015182 0000                       	dc word_1E0D8-off_1E074; 14
00015184 0000                       	dc word_1E0DE-off_1E074; 15
00015186 0000                       	dc word_1E0E4-off_1E074; 16
00015188 0000                       	dc word_1E0EA-off_1E074; 17
0001518A 0000                       	dc word_1E0EA-off_1E074; 18
0001518C 0000                       	dc word_1E0EA-off_1E074; 19
0001518E 0000                       	dc word_1E0EA-off_1E074; 20
00015190 0000                       	dc word_1E0EC-off_1E074; 21
00015192 0000                       word_1E0A0:	dc 0
00015194 0001                       word_1E0A2:	dc 1
00015196 7000                       	dc $7000
00015198 0001                       word_1E0A6:	dc 1
0001519A F008                       	dc $F008
0001519C 0001                       word_1E0AA:	dc 1
0001519E F018                       	dc $F018
000151A0 0001                       word_1E0AE:	dc 1
000151A2 F028                       	dc $F028
000151A4 0001                       word_1E0B2:	dc 1
000151A6 F038                       	dc $F038
000151A8 0001                       word_1E0B6:	dc 1
000151AA F048                       	dc $F048
000151AC 0001                       word_1E0BA:	dc 1
000151AE 7058                       	dc $7058
000151B0 0001                       word_1E0BE:	dc 1
000151B2 7060                       	dc $7060
000151B4 0001                       word_1E0C2:	dc 1
000151B6 7068                       	dc $7068
000151B8 0001                       word_1E0C6:	dc 1
000151BA 7070                       	dc $7070
000151BC 0001                       word_1E0CA:	dc 1
000151BE 7078                       	dc $7078
000151C0 0001                       word_1E0CE:	dc 1
000151C2 7080                       	dc $7080
000151C4 0002                       word_1E0D2:	dc 2
000151C6 1088                       	dc $1088
000151C8 708A                       	dc $708A
000151CA 0002                       word_1E0D8:	dc 2
000151CC 3092                       	dc $3092
000151CE 7096                       	dc $7096
000151D0 0002                       word_1E0DE:	dc 2
000151D2 509E                       	dc $509E
000151D4 70A4                       	dc $70A4
000151D6 0002                       word_1E0E4:	dc 2
000151D8 50AC                       	dc $50AC
000151DA 70B2                       	dc $70B2
000151DC 0000                       word_1E0EA:	dc 0
000151DE 0001                       word_1E0EC:	dc 1
000151E0 F0BA                       	dc $F0BA
000151E2                            	even
000151E2                            
000151E2                            ; ===========================================================================
000151E2                            
000151E2                            LoadPlayerPal:
000151E2 7000                       		moveq	#0,d0
000151E4 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000151E8 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
000151EC 4E75                       		rts
000151EE                            
000151EE                            	@palLUT:
000151EE 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
000151F3 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
000151F8                            
000151F8                            LoadPlayerWaterPal:
000151F8 7000                       		moveq	#0,d0
000151FA 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
000151FE 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015202 4E75                       		rts
00015204                            
00015204                            	@palLUT:
00015204 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015209 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
0001520E                            
0001520E                            ; ---------------------------------------------------------------------------
0001520E                            ; Object 01 - Sonic
0001520E                            ; ---------------------------------------------------------------------------
0001520E                            
0001520E                            SonicPlayer:
0001520E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015212 6700                       		beq.s	Sonic_Normal	; if not, branch
00015214 4EF9 0000 0000             		jmp	(DebugMode).l
0001521A                            ; ===========================================================================
0001521A                            
0001521A                            Sonic_Normal:
0001521A 7000                       		moveq	#0,d0
0001521C 1028 0024                  		move.b	obRoutine(a0),d0
00015220 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00015224 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015228                            ; ===========================================================================
00015228 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
0001522A 0000                       		dc.w Sonic_Control-Sonic_Index
0001522C 0000                       		dc.w Sonic_Hurt-Sonic_Index
0001522E 0000                       		dc.w Sonic_Death-Sonic_Index
00015230 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015232                            ; ===========================================================================
00015232                            
00015232                            Sonic_Main:	; Routine 0
00015232 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015238 5428 0024                  		addq.b	#2,obRoutine(a0)
0001523C 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015242 117C 0009 0017             		move.b	#9,obWidth(a0)
00015248 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015250 317C 0780 0002             		move.w	#$780,obGfx(a0)
00015256 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001525C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015262 117C 0004 0001             		move.b	#4,obRender(a0)
00015268 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
0001526E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00015274 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
0001527A 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00015280                            
00015280                            Sonic_Control:    ; Routine 2
00015280 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00015284 6700 0000                  		beq.w	@cont    
00015288 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
0001528A                             
0001528A                            	@cont: 
0001528A 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
0001528E 6700                       		beq.s    loc_12C58    ; if not, branch
00015290 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00015296 6700                       		beq.s    loc_12C58    ; if not, branch
00015298 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
0001529E 4238 F7CC                  		clr.b    (f_lockctrl).w
000152A2 4E75                       		rts
000152A4                            		
000152A4                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            ; Subroutine to    horizontally pan the camera view ahead of the player
000152A4                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000152A4                            ; ---------------------------------------------------------------------------
000152A4                            
000152A4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000152A4                            
000152A4                            
000152A4                            Sonic_PanCamera:
000152A4 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000152A8 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000152AC 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000152AE 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000152B0                            
000152B0                                @abs_inertia:
000152B0                            
000152B0                            ; These lines were intended to prevent the Camera from panning while
000152B0                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000152B0                            ; However, given that no such object exists in Sonic 1, I just went
000152B0                            ; ahead and commented these out.
000152B0                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000152B0                            ;        beq.s    @skip                    ; if not, branch
000152B0                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000152B0                            ;        bcs.s    @reset_pan                ; if so, branch
000152B0                            
000152B0                            ; These lines aren't part of the original routine; I added them myself.
000152B0                            ; If you've ported the Spin Dash, uncomment the following lines of code
000152B0                            ; to allow the camera to pan ahead while charging the Spin Dash:
000152B0 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000152B4 6700                               beq.s    @skip                    ; if not, branch
000152B6 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000152BC 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000152BE 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000152C0                            
000152C0                                @skip:
000152C0 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000152C4 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000152C6 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
000152CA 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
000152CC                            
000152CC                                @pan_right:
000152CC 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000152CE 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
000152D2 6500                               bcs.s    @update_pan                ; if not, branch
000152D4 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
000152D8 6000                               bra.s    @update_pan                ; branch
000152DA                            ; ---------------------------------------------------------------------------
000152DA                            
000152DA                                @pan_left:
000152DA 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000152DC 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
000152E0 6400                               bcc.s    @update_pan                ; if not, branch
000152E2 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
000152E6 6000                               bra.s    @update_pan                ; branch
000152E8                            ; ---------------------------------------------------------------------------
000152E8                            
000152E8                                @reset_pan:
000152E8 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
000152EC 6700                               beq.s    @update_pan                ; if so, branch
000152EE 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
000152F0                                 
000152F0                                @reset_right:
000152F0 5441                               addq.w    #2,d1                    ; add 2 to the pan value
000152F2 6000                               bra.s    @update_pan                ; branch
000152F4                            ; ---------------------------------------------------------------------------
000152F4                            
000152F4                                @reset_left:
000152F4 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
000152F6                            
000152F6                                @update_pan:
000152F6 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
000152FA 4E75                               rts                                ; return
000152FC                                 
000152FC                            ; End of function Sonic_PanCamera
000152FC                            
000152FC                            
000152FC                            ; ===========================================================================
000152FC                            
000152FC                            loc_12C58:
000152FC 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015300 6600                       		bne.s	loc_12C64	; if yes, branch
00015302 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015308                            
00015308                            loc_12C64:
00015308 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001530E 6600                       		bne.s	loc_12C7E	; if yes, branch
00015310 7000                       		moveq	#0,d0
00015312 1028 0022                  		move.b	obStatus(a0),d0
00015316 0240 0006                  		andi.w	#6,d0
0001531A 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001531E 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015322                            
00015322                            loc_12C7E:
00015322 6100                       		bsr.s	Sonic_Display
00015324 6100 0000                  		bsr.w	Sonic_RecordPosition
00015328 6100 0000                  		bsr.w	Sonic_Water
0001532C 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015332 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015338 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001533C 6700                       		beq.s	loc_12CA6
0001533E 4A28 001C                  		tst.b	obAnim(a0)
00015342 6600                       		bne.s	loc_12CA6
00015344 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
0001534A                            
0001534A                            loc_12CA6:
0001534A 6100 0000                  		bsr.w	Sonic_Animate
0001534E 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015352 6B00                       		bmi.s	loc_12CB6
00015354 4EB9 0000 0000             		jsr	(ReactToItem).l
0001535A                            
0001535A                            loc_12CB6:
0001535A 6100 0000                  		bsr.w	Sonic_Loops
0001535E 6100 0000                  		bsr.w	Sonic_LoadGfx
00015362 4E75                       		rts	
00015364                            ; ===========================================================================
00015364 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015366 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015368 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
0001536A 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
0001536C                            ; ---------------------------------------------------------------------------
0001536C                            ; Music	to play	after invincibility wears off
0001536C                            ; ---------------------------------------------------------------------------
0001536C                            MusicList2:
0001536C 00                         		dc.b bgm_GHZ
0001536D 00                         		dc.b bgm_LZ
0001536E 00                         		dc.b bgm_MZ
0001536F 00                         		dc.b bgm_SLZ
00015370 00                         		dc.b bgm_SYZ
00015371 00                         		dc.b bgm_SBZ
00015372                            		; The ending doesn't get an entry
00015372                            		even
00015372                            
00015372                            		include	"_incObj\Sonic Display.asm"
00015372                            ; ---------------------------------------------------------------------------
00015372                            ; Subroutine to display Sonic and set music
00015372                            ; ---------------------------------------------------------------------------
00015372                            
00015372                            Sonic_Display:
00015372 3028 0030                  		move.w    flashtime(a0),d0
00015376 6700                       		beq.s    @showAfterImage
00015378 5368 0030                  		subq.w    #1,flashtime(a0)
0001537C E648                               	lsr.w    #3,d0
0001537E 6400                               	bcc.s    @chkinvincible
00015380                            
00015380                            	@showAfterImage:
00015380 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
00015384 4A40                       		tst.w    d0                    ; is inertia greater than 0?
00015386 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
00015388 4440                       		neg        d0                    ; if not, negate it
0001538A                            
0001538A                            	@AfterImage_Start:        
0001538A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001538E 6700                       		beq.s	@display	; if not, don't show the After Image
00015390                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
00015390                            		;blt.s    @display	; if not, don't show the After Image
00015390                            	
00015390                            	@AfterImage_Start2:    
00015390 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
00015394 6600                               	bne.s    @display    ; if not have, don't load the After Image
00015396 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
0001539A 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000153A0 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000153A6 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000153AC                            
000153AC                                	@display:
000153AC 4EB9 0000 F846                     	jsr    (DisplaySprite).l
000153B2                            
000153B2                            	@chkinvincible:
000153B2 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000153B6 6700                       		beq.s	@chkshoes	; if not, branch
000153B8 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000153BC 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000153BE 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000153C2 6600                       		bne.s	@chkshoes
000153C4 4A38 F7AA                  		tst.b	(f_lockscreen).w
000153C8 6600                       		bne.s	@removeinvincible
000153CA 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000153D0 6500                       		bcs.s	@removeinvincible
000153D2 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000153D6 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
000153DC                            
000153DC                            	@removeinvincible:
000153DC 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
000153E2                            
000153E2                            	@chkshoes:
000153E2 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000153E6 6700                       		beq.s	@exit		; if not, branch
000153E8 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
000153EC 6700                       		beq.s	@exit
000153EE 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
000153F2 6600                       		bne.s	@exit
000153F4 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000153FA 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015400 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015406 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001540C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015410 4EB9 0000 124A                     	jsr	(PlaySound).l    ; play normal music
00015416                            		
00015416                            	@exit:
00015416 4E75                       		rts	
00015416 4E75                       		rts	
00015418                            		include	"_incObj\Sonic RecordPosition.asm"
00015418                            ; ---------------------------------------------------------------------------
00015418                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015418                            ; ---------------------------------------------------------------------------
00015418                            
00015418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015418                            
00015418                            
00015418                            Sonic_RecordPosition:
00015418 3038 F7A8                  		move.w	(v_trackpos).w,d0
0001541C 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015420 43F1 0000                  		lea	(a1,d0.w),a1
00015424 32E8 0008                  		move.w	obX(a0),(a1)+
00015428 32E8 000C                  		move.w	obY(a0),(a1)+
0001542C 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015430 4E75                       		rts	
00015432                            ; End of function Sonic_RecordPosition
00015432                            ; End of function Sonic_RecordPosition
00015432                            		include	"_incObj\Sonic Water.asm"
00015432                            ; ---------------------------------------------------------------------------
00015432                            ; Subroutine for Sonic when he's underwater
00015432                            ; ---------------------------------------------------------------------------
00015432                            
00015432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015432                            
00015432                            
00015432                            Sonic_Water:
00015432 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015438 6700                       		beq.s	WaterTagforMZ	; if yes, branch
0001543A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015440 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015442                            
00015442                            	Sonic_Water_Exit:
00015442 4E75                       		rts	
00015444                            ; ===========================================================================
00015444                            
00015444                            	Sonic_Water_LZ:
00015444 3038 F646                  		move.w	(v_waterpos1).w,d0
00015448 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001544C 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015450 6000 0000                  		bra	WaterStatus
00015454                            	WaterTagforMZ:
00015454 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001545A 6700 0000                  		beq.w	Abovewater	; if yes, branch
0001545E 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
00015462 43F8 34A0                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
00015466 45F8 FB00                          	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
0001546A 4EB8 24A0                  		jsr	Palload_Loop
0001546E                            	WaterStatus:
0001546E 08E8 0006 0022             		bset	#6,obStatus(a0)
00015474 6600 FFCC                  		bne.w	Sonic_Water_Exit
00015478 6100 0000                  		bsr.w	ResumeMusic
0001547C 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015482                            
00015482 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015488 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001548E 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015494 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
0001549A 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000154A0 E0E8 0010                  		asr	obVelX(a0)
000154A4 E0E8 0012                  		asr	obVelY(a0)
000154A8 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000154AC 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000154B0                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000154B0 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000154C0 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000154C6 6600 0000                  		bne.w	@return
000154CA                            		
000154CA                            		
000154CA                            	@return:
000154CA 4E75                       		rts
000154CC                            ; ===========================================================================
000154CC                            
000154CC                            Abovewater:
000154CC 08A8 0006 0022             		bclr	#6,obStatus(a0)
000154D2 6700 FF6E                  		beq.w	Sonic_Water_Exit
000154D6 6100 0000                  		bsr.w	ResumeMusic
000154DA 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000154E0                            
000154E0 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000154E6 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000154EC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000154F2 E1E8 0012                  		asl	obVelY(a0)
000154F6 6700 FF4A                  		beq.w	Sonic_Water_Exit
000154FA 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015500 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015506 6E00                       		bgt.s	@belowmaxspeed
00015508 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001550E                            
0001550E                            	@belowmaxspeed:
00015518                            ; End of function Sonic_Water
00015518                            ; End of function Sonic_Water
00015518                            		include "_incObj\03 Hangable Sprite.asm"
00015518                            ; ===========================================================================
00015518                            ; ----------------------------------------------------------------------------
00015518                            ; Object 03 - Invisible sprite that you can hang on to
00015518                            ; ----------------------------------------------------------------------------
00015518                            ; Sprite_2C92C:
00015518                            Obj03:
00015518 7000                       	moveq    #0,d0
0001551A 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001551E 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015522 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
00015526                            ; ===========================================================================
00015526                            ; off_2C93A:
00015526                            Obj03_Index:
00015526 0000                           dc.w Obj03_Main-Obj03_Index
00015528 0000                               dc.w Obj03_Init-Obj03_Index
0001552A                            ; ===========================================================================
0001552A                            ; loc_2C93E:
0001552A                            Obj03_Init:
0001552A 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
0001552E 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
00015534 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
0001553A 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015540                            ; loc_2C954:
00015540                            Obj03_Main:
00015540 45E8 0030                      lea    $30(a0),a2
00015544 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015548 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
0001554C 6100                           bsr.s    Obj03_Check
0001554E                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
0001554E                            ;    addq.w    #1,a2                          ;disabled
0001554E                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
0001554E                            ;    bsr.s    Obj03_Check         	;disabled
0001554E 4EF9 0000 0000             	jmp		bonu_chkdel
00015554                            ; ===========================================================================
00015554                            ; loc_2C972:
00015554                            Obj03_Check:
00015554 4A12                       		tst.b	(a2)
00015556 6700                       		beq.s	loc_2C9A0
00015558 0200 0070                  		andi.b	#btnABC,d0
0001555C 6700 0000                  		beq.w	Obj03_Check_End
00015560 4238 F7C8                  		clr.b	f_lockmulti.w
00015564 4212                       		clr.b	(a2)
00015566 157C 0012 0002             		move.b	#$12,2(a2)
0001556C 0240 0F00                  		andi.w	#$F00,d0
00015570 6700                       		beq.s	loc_2C954
00015572 157C 003C 0002             		move.b	#$3C,2(a2)
00015578                            	
00015578                            loc_2C954:
00015578 337C FD00 0012             		move.w	#-$300,y_vel(a1)
0001557E 6000 0000                  		bra.w	Obj03_Check_End
00015582                            ; ===========================================================================
00015582                            
00015582                            loc_2C9A0:
00015582 4A2A 0002                  		tst.b	2(a2)
00015586 6700                       		beq.s	loc_2C972
00015588 532A 0002                  		subq.b	#1,2(a2)
0001558C 6600 0000                  		bne.w	Obj03_Check_End
00015590                            
00015590                            loc_2C972:
00015590 3029 0008                  		move.w	obX(a1),d0
00015594 9068 0008                  		sub.w	obX(a0),d0
00015598 0640 0018                  		addi.w	#$18,d0
0001559C 0C40 0030                  		cmpi.w	#$30,d0
000155A0 6400 0000                  		bhs.w	Obj03_Check_End
000155A4 3229 000C                  		move.w	obY(a1),d1
000155A8 9268 000C                  		sub.w	obY(a0),d1
000155AC 0C41 0010                  		cmpi.w	#$10,d1
000155B0 6400 0000                  		bhs.w	Obj03_Check_End
000155B4 4A38 F7C8                  		tst.b	f_lockmulti.w
000155B8 6B00                       		bmi.s	Obj03_Check_End
000155BA 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000155C0 6400                       		bhs.s	Obj03_Check_End
000155C2 4A78 FFFA                  		tst.w	(f_debugmode).w
000155C6 6600                       		bne.s	Obj03_Check_End
000155C8 4269 0010                  		clr.w	x_vel(a1)
000155CC 4269 0012                  		clr.w	y_vel(a1)
000155D0 4269 0020                  		clr.w	obInertia(a1)
000155D4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000155DA 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
000155E0 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
000155E6 14BC 0001                  		move.b	#1,(a2)
000155EA                            
000155EA                            ; return_2CA08:
000155EA                            Obj03_Check_End:
000155EA 4E75                       		rts
000155EA 4E75                       		rts
000155EC                            
000155EC                            ; ===========================================================================
000155EC                            ; ---------------------------------------------------------------------------
000155EC                            ; Modes	for controlling	Sonic
000155EC                            ; ---------------------------------------------------------------------------
000155EC                            
000155EC                            Sonic_MdNormal:
000155EC 6100 0000                  		bsr.w	Sonic_Peelout
000155F0 6100 0000                  		bsr.w	Sonic_SpinDash
000155F4 6100 0000                  		bsr.w	Sonic_Jump
000155F8 6100 0000                  		bsr.w	Sonic_SlopeResist
000155FC 6100 0000                  		bsr.w	Sonic_Move
00015600 6100 0000                  		bsr.w	Sonic_Roll
00015604 6100 0000                  		bsr.w	Sonic_LevelBound
00015608 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001560E 6100 0000                  		bsr.w	Sonic_AnglePos
00015612 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015616 4E75                       		rts	
00015618                            
00015618                            ; ===========================================================================
00015618                            
00015618                            Sonic_MdJump:
00015618 6100 0000                  		bsr.w   Sonic_AirRoll
0001561C 6100 0000                  		bsr.w	Sonic_JumpHeight
00015620 6100 0000                  		bsr.w	Sonic_JumpDirection
00015624 6100 0000                  		bsr.w	Sonic_LevelBound
00015628 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001562E 0828 0006 0022             		btst	#6,obStatus(a0)
00015634 6700                       		beq.s	loc_12E5C
00015636 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001563C                            
0001563C                            loc_12E5C:
0001563C 6100 0000                  		bsr.w	Sonic_JumpAngle
00015640 6100 0000                  		bsr.w	Sonic_Floor
00015644 4E75                       		rts	
00015646                            ; ===========================================================================
00015646                            
00015646                            Sonic_MdRoll:
00015646 6100 0000                  		bsr.w	Sonic_Jump
0001564A 6100 0000                  		bsr.w	Sonic_RollRepel
0001564E 6100 0000                  		bsr.w	Sonic_RollSpeed
00015652 6100 0000                  		bsr.w	Sonic_LevelBound
00015656 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001565C 6100 0000                  		bsr.w	Sonic_AnglePos
00015660 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015664 4E75                       		rts	
00015666                            ; ===========================================================================
00015666                            
00015666                            Sonic_MdJump2:
00015666 6100 0000                  		bsr.w	Sonic_JumpHeight
0001566A 6100 0000                  		bsr.w	Sonic_JumpDirection
0001566E 6100 0000                  		bsr.w	Sonic_LevelBound
00015672 4EB9 0000 F7FA             		jsr	(ObjectFall).l
00015678 0828 0006 0022             		btst	#6,obStatus(a0)
0001567E 6700                       		beq.s	loc_12EA6
00015680 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015686                            
00015686                            loc_12EA6:
00015686 6100 0000                  		bsr.w	Sonic_JumpAngle
0001568A 6100 0000                  		bsr.w	Sonic_Floor
0001568E 4E75                       		rts	
00015690                            
00015690                            		include	"_incObj\Sonic Move.asm"
00015690                            ; ---------------------------------------------------------------------------
00015690                            ; Subroutine to	make Sonic walk/run
00015690                            ; ---------------------------------------------------------------------------
00015690                            
00015690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015690                            
00015690                            
00015690                            Sonic_Move:
00015690 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015694 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015698 3838 F764                  		move.w	(v_sonspeeddec).w,d4
0001569C 4A38 F7CA                  		tst.b	(f_jumponly).w
000156A0 6600 0000                  		bne.w	loc_12FEE
000156A4 4A68 003E                  		tst.w	$3E(a0)
000156A8 6600 0000                  		bne.w	Sonic_ResetScr
000156AC 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000156B2 6700                       		beq.s	@notleft	; if not, branch
000156B4 6100 0000                  		bsr.w	Sonic_MoveLeft
000156B8                            
000156B8                            	@notleft:
000156B8 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000156BE 6700                       		beq.s	@notright	; if not, branch
000156C0 6100 0000                  		bsr.w	Sonic_MoveRight
000156C4                            
000156C4                            	@notright:
000156C4 1028 0026                  		move.b	obAngle(a0),d0
000156C8 0600 0020                  		addi.b	#$20,d0
000156CC 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000156D0 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000156D4 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000156D8 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000156DC 08A8 0005 0022             		bclr	#5,obStatus(a0)
000156E2 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000156E8 0828 0003 0022             		btst	#3,obStatus(a0)
000156EE 6700                       		beq.s	Sonic_Balance
000156F0 7000                       		moveq	#0,d0
000156F2 1028 003D                  		move.b	$3D(a0),d0
000156F6 ED48                       		lsl.w	#6,d0
000156F8 43F8 D000                  		lea	(v_objspace).w,a1
000156FC 43F1 0000                  		lea	(a1,d0.w),a1
00015700 4A29 0022                  		tst.b	obStatus(a1)
00015704 6B00                       		bmi.s	Sonic_LookUp
00015706 7200                       		moveq	#0,d1
00015708 1229 0014                  		move.b	obActWid(a1),d1
0001570C 3401                       		move.w	d1,d2
0001570E D442                       		add.w	d2,d2
00015710 5942                       		subq.w	#4,d2
00015712 D268 0008                  		add.w	obX(a0),d1
00015716 9269 0008                  		sub.w	obX(a1),d1
0001571A 0C41 0004                  		cmpi.w	#4,d1
0001571E 6D00                       		blt.s	loc_12F6A
00015720 B242                       		cmp.w	d2,d1
00015722 6C00                       		bge.s	loc_12F5A
00015724 6000                       		bra.s	Sonic_LookUp
00015726                            ; ===========================================================================
00015726                            
00015726                            Sonic_Balance:
00015726 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001572C 0C41 000C                  		cmpi.w	#$C,d1
00015730 6D00                       		blt.s	Sonic_LookUp
00015732 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015738 6600                       		bne.s	loc_12F62
0001573A                            
0001573A                            loc_12F5A:
0001573A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015740 6000                       		bra.s	loc_12F70
00015742                            ; ===========================================================================
00015742                            
00015742                            loc_12F62:
00015742 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00015748 6600                       		bne.s	Sonic_LookUp
0001574A                            
0001574A                            loc_12F6A:
0001574A 08E8 0000 0022             		bset	#0,obStatus(a0)
00015750                            
00015750                            loc_12F70:
00015750 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00015756 6000 0000                  		bra.w	Sonic_ResetScr
0001575A                            ; ===========================================================================
0001575A                            
0001575A                            Sonic_LookUp:
0001575A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015760 6700                       		beq.s	Sonic_Duck	; if not, branch
00015762 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00015768 5238 C903                  		addq.b	#1,($FFFFC903).w
0001576C 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00015772 6500                       		bcs.s	Sonic_ResetScr_Part2
00015774 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001577A 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00015780 6700                       		beq.s	loc_12FC2
00015782 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00015786 6000                       		bra.s	loc_12FC2
00015788                            ; ===========================================================================
00015788                            
00015788                            Sonic_Duck:
00015788 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001578E 6700                       		beq.s	Sonic_ResetScr	; if not, branch
00015790 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00015796 5238 C903                  		addq.b	#1,($FFFFC903).w
0001579A 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000157A0 6500                       		bcs.s	Sonic_ResetScr_Part2
000157A2 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000157A8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000157AE 6700                       		beq.s	loc_12FC2
000157B0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000157B4 6000                       		bra.s	loc_12FC2
000157B6                            ; ===========================================================================
000157B6                            
000157B6                            Sonic_ResetScr:
000157B6 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000157BC                            		
000157BC                            Sonic_ResetScr_Part2:
000157BC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000157C2 6700                       		beq.s	loc_12FC2	; if yes, branch
000157C4 6400                       		bcc.s	loc_12FBE
000157C6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000157CA                            
000157CA                            loc_12FBE:
000157CA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000157CE                            
000157CE                            loc_12FC2:
000157CE 1038 F602                  		move.b	(v_jpadhold2).w,d0
000157D2 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000157D6 6600                       		bne.s	loc_12FEE	; if yes, branch
000157D8 3028 0020                  		move.w	obInertia(a0),d0
000157DC 6700                       		beq.s	loc_12FEE
000157DE 6B00                       		bmi.s	loc_12FE2
000157E0 9045                       		sub.w	d5,d0
000157E2 6400                       		bcc.s	loc_12FDC
000157E4 303C 0000                  		move.w	#0,d0
000157E8                            
000157E8                            loc_12FDC:
000157E8 3140 0020                  		move.w	d0,obInertia(a0)
000157EC 6000                       		bra.s	loc_12FEE
000157EE                            ; ===========================================================================
000157EE                            
000157EE                            loc_12FE2:
000157EE D045                       		add.w	d5,d0
000157F0 6400                       		bcc.s	loc_12FEA
000157F2 303C 0000                  		move.w	#0,d0
000157F6                            
000157F6                            loc_12FEA:
000157F6 3140 0020                  		move.w	d0,obInertia(a0)
000157FA                            
000157FA                            loc_12FEE:
000157FA 4A28 0039                  		tst.b	$39(a0) 	;Peelout
000157FE 6600                       		bne.s	loc_1300C 	;Peelout
00015800 1028 0026                  		move.b	obAngle(a0),d0
00015804 4EB9 0000 3A32             		jsr	(CalcSine).l
0001580A C3E8 0020                  		muls.w	obInertia(a0),d1
0001580E E081                       		asr.l	#8,d1
00015810 3141 0010                  		move.w	d1,obVelX(a0)
00015814 C1E8 0020                  		muls.w	obInertia(a0),d0
00015818 E080                       		asr.l	#8,d0
0001581A 3140 0012                  		move.w	d0,obVelY(a0)
0001581E                            
0001581E                            loc_1300C:
0001581E 1028 0026                  		move.b	obAngle(a0),d0
00015822 0600 0040                  		addi.b	#$40,d0
00015826 6B00                       		bmi.s	locret_1307C
00015828 123C 0040                  		move.b	#$40,d1
0001582C 4A68 0020                  		tst.w	obInertia(a0)
00015830 6700                       		beq.s	locret_1307C
00015832 6B00                       		bmi.s	loc_13024
00015834 4441                       		neg.w	d1
00015836                            
00015836                            loc_13024:
00015836 1028 0026                  		move.b	obAngle(a0),d0
0001583A D001                       		add.b	d1,d0
0001583C 3F00                       		move.w	d0,-(sp)
0001583E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015842 301F                       		move.w	(sp)+,d0
00015844 4A41                       		tst.w	d1
00015846 6A00                       		bpl.s	locret_1307C
00015848 E141                       		asl.w	#8,d1
0001584A 0600 0020                  		addi.b	#$20,d0
0001584E 0200 00C0                  		andi.b	#$C0,d0
00015852 6700                       		beq.s	loc_13078
00015854 0C00 0040                  		cmpi.b	#$40,d0
00015858 6700                       		beq.s	loc_13066
0001585A 0C00 0080                  		cmpi.b	#$80,d0
0001585E 6700                       		beq.s	loc_13060
00015860 D368 0010                  		add.w	d1,obVelX(a0)
00015864 08E8 0005 0022             		bset	#5,obStatus(a0)
0001586A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015870 4E75                       		rts	
00015872                            ; ===========================================================================
00015872                            
00015872                            loc_13060:
00015872 9368 0012                  		sub.w	d1,obVelY(a0)
00015876 4E75                       		rts	
00015878                            ; ===========================================================================
00015878                            
00015878                            loc_13066:
00015878 9368 0010                  		sub.w	d1,obVelX(a0)
0001587C 08E8 0005 0022             		bset	#5,obStatus(a0)
00015882 317C 0000 0020             		move.w	#0,obInertia(a0)
00015888 4E75                       		rts	
0001588A                            ; ===========================================================================
0001588A                            
0001588A                            loc_13078:
0001588A D368 0012                  		add.w	d1,obVelY(a0)
0001588E                            
0001588E                            locret_1307C:
0001588E 4E75                       		rts	
00015890                            ; End of function Sonic_Move
00015890                            
00015890                            
00015890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015890                            
00015890                            
00015890                            Sonic_MoveLeft:
00015890 3028 0020                  		move.w	obInertia(a0),d0
00015894 6700                       		beq.s	loc_13086
00015896 6A00                       		bpl.s	loc_130B2
00015898                            
00015898                            loc_13086:
00015898 08E8 0000 0022             		bset	#0,$22(a0)
0001589E 6600                       		bne.s	loc_1309A
000158A0 08A8 0005 0022             		bclr	#5,$22(a0)
000158A6 117C 0001 001D             		move.b	#1,$1D(a0)
000158AC                            
000158AC                            loc_1309A:
000158AC 9045                       		sub.w	d5,d0
000158AE 3206                       		move.w	d6,d1
000158B0 4441                       		neg.w	d1
000158B2 B041                       		cmp.w	d1,d0
000158B4 6E00                       		bgt.s	loc_130A6
000158B6 D045                       		add.w	d5,d0
000158B8 B041                       		cmp.w	d1,d0
000158BA 6F00                       		ble.s	loc_130A6
000158BC 3001                       		move.w	d1,d0
000158BE                            
000158BE                            loc_130A6:
000158BE 3140 0020                  		move.w	d0,obInertia(a0)
000158C2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000158C8 4E75                       		rts
000158CA                            ; ===========================================================================
000158CA                            
000158CA                            loc_130B2:
000158CA 9044                       		sub.w	d4,d0
000158CC 6400                       		bcc.s	loc_130BA
000158CE 303C FF80                  		move.w	#-$80,d0
000158D2                            
000158D2                            loc_130BA:
000158D2 3140 0020                  		move.w	d0,obInertia(a0)
000158D6 1228 0026                  		move.b	obAngle(a0),d1
000158DA 0601 0020                  		addi.b	#$20,d1
000158DE 0201 00C0                  		andi.b	#$C0,d1
000158E2 6600                       		bne.s	locret_130E8
000158E4 0C40 0400                  		cmpi.w	#$400,d0
000158E8 6D00                       		blt.s	locret_130E8
000158EA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000158F0 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015900 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015906 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001590C                            		
0001590C                            locret_130E8:
0001590C 4E75                       		rts	
0001590E                            ; End of function Sonic_MoveLeft
0001590E                            
0001590E                            
0001590E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001590E                            
0001590E                            
0001590E                            Sonic_MoveRight:
0001590E 3028 0020                  		move.w	obInertia(a0),d0
00015912 6B00                       		bmi.s	loc_13118
00015914 08A8 0000 0022             		bclr	#0,$22(a0)
0001591A 6700                       		beq.s	loc_13104
0001591C 08A8 0005 0022             		bclr	#5,$22(a0)
00015922 117C 0001 001D             		move.b	#1,$1D(a0)
00015928                            
00015928                            loc_13104:
00015928 D045                       		add.w	d5,d0
0001592A B046                       		cmp.w	d6,d0
0001592C 6D00                       		blt.s	loc_1310C
0001592E 9045                       		sub.w	d5,d0
00015930 B046                       		cmp.w	d6,d0
00015932 6C00                       		bge.s	loc_1310C
00015934 3006                       		move.w	d6,d0
00015936                            
00015936                            loc_1310C:
00015936 3140 0020                  		move.w	d0,obInertia(a0)
0001593A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015940 4E75                       		rts
00015942                            ; ===========================================================================
00015942                            
00015942                            loc_13118:
00015942 D044                       		add.w	d4,d0
00015944 6400                       		bcc.s	loc_13120
00015946 303C 0080                  		move.w	#$80,d0
0001594A                            
0001594A                            loc_13120:
0001594A 3140 0020                  		move.w	d0,obInertia(a0)
0001594E 1228 0026                  		move.b	obAngle(a0),d1
00015952 0601 0020                  		addi.b	#$20,d1
00015956 0201 00C0                  		andi.b	#$C0,d1
0001595A 6600                       		bne.s	locret_1314E
0001595C 0C40 FC00                  		cmpi.w	#-$400,d0
00015960 6E00                       		bgt.s	locret_1314E
00015962 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015968 08E8 0000 0022             		bset	#0,obStatus(a0)
00015978 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001597E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015984                            		
00015984                            locret_1314E:
00015984 4E75                       		rts	
00015986                            ; End of function Sonic_MoveRight
00015986                            ; End of function Sonic_MoveRight
00015986                            		include	"_incObj\Sonic RollSpeed.asm"
00015986                            ; ---------------------------------------------------------------------------
00015986                            ; Subroutine to	change Sonic's speed as he rolls
00015986                            ; ---------------------------------------------------------------------------
00015986                            
00015986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015986                            
00015986                            
00015986                            Sonic_RollSpeed:
00015986 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001598A E346                       		asl.w	#1,d6
0001598C 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001598E 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015992 E444                       		asr.w	#2,d4
00015994 4A38 F7CA                  		tst.b	(f_jumponly).w
00015998 6600 0000                  		bne.w	loc_131CC
0001599C 4A68 003E                  		tst.w	$3E(a0)
000159A0 6600                       		bne.s	@notright
000159A2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000159A8 6700                       		beq.s	@notleft	; if not, branch
000159AA 6100 0000                  		bsr.w	Sonic_RollLeft
000159AE                            
000159AE                            	@notleft:
000159AE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000159B4 6700                       		beq.s	@notright	; if not, branch
000159B6 6100 0000                  		bsr.w	Sonic_RollRight
000159BA                            
000159BA                            	@notright:
000159BA 3028 0020                  		move.w	obInertia(a0),d0
000159BE 6700                       		beq.s	loc_131AA
000159C0 6B00                       		bmi.s	loc_1319E
000159C2 9045                       		sub.w	d5,d0
000159C4 6400                       		bcc.s	loc_13198
000159C6 303C 0000                  		move.w	#0,d0
000159CA                            
000159CA                            loc_13198:
000159CA 3140 0020                  		move.w	d0,obInertia(a0)
000159CE 6000                       		bra.s	loc_131AA
000159D0                            ; ===========================================================================
000159D0                            
000159D0                            loc_1319E:
000159D0 D045                       		add.w	d5,d0
000159D2 6400                       		bcc.s	loc_131A6
000159D4 303C 0000                  		move.w	#0,d0
000159D8                            
000159D8                            loc_131A6:
000159D8 3140 0020                  		move.w	d0,obInertia(a0)
000159DC                            
000159DC                            loc_131AA:
000159DC 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000159E0 6600                       		bne.s	loc_131CC	; if yes, branch
000159E2 08A8 0002 0022             		bclr	#2,obStatus(a0)
000159E8 117C 0013 0016             		move.b	#$13,obHeight(a0)
000159EE 117C 0009 0017             		move.b	#9,obWidth(a0)
000159F4 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000159FA 5B68 000C                  		subq.w	#5,obY(a0)
000159FE                            
000159FE                            loc_131CC:
000159FE 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015A04 6700                       		beq.s	@cont2
00015A06 6400                       		bcc.s	@cont1
00015A08 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015A0C                            		
00015A0C                            @cont1:
00015A0C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015A10                            		
00015A10                            @cont2:
00015A10 1028 0026                  		move.b	obAngle(a0),d0
00015A14 4EB9 0000 3A32             		jsr	(CalcSine).l
00015A1A C1E8 0020                  		muls.w	obInertia(a0),d0
00015A1E E080                       		asr.l	#8,d0
00015A20 3140 0012                  		move.w	d0,obVelY(a0)
00015A24 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A28 E081                       		asr.l	#8,d1
00015A2A 0C41 1000                  		cmpi.w	#$1000,d1
00015A2E 6F00                       		ble.s	loc_131F0
00015A30 323C 1000                  		move.w	#$1000,d1
00015A34                            
00015A34                            loc_131F0:
00015A34 0C41 F000                  		cmpi.w	#-$1000,d1
00015A38 6C00                       		bge.s	loc_131FA
00015A3A 323C F000                  		move.w	#-$1000,d1
00015A3E                            
00015A3E                            loc_131FA:
00015A3E 3141 0010                  		move.w	d1,obVelX(a0)
00015A42 6000 FDDA                  		bra.w	loc_1300C
00015A46                            ; End of function Sonic_RollSpeed
00015A46                            
00015A46                            
00015A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A46                            
00015A46                            
00015A46                            Sonic_RollLeft:
00015A46 3028 0020                  		move.w	obInertia(a0),d0
00015A4A 6700                       		beq.s	loc_1320A
00015A4C 6A00                       		bpl.s	loc_13218
00015A4E                            
00015A4E                            loc_1320A:
00015A4E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015A54 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015A5A 4E75                       		rts	
00015A5C                            ; ===========================================================================
00015A5C                            
00015A5C                            loc_13218:
00015A5C 9044                       		sub.w	d4,d0
00015A5E 6400                       		bcc.s	loc_13220
00015A60 303C FF80                  		move.w	#-$80,d0
00015A64                            
00015A64                            loc_13220:
00015A64 3140 0020                  		move.w	d0,obInertia(a0)
00015A68 4E75                       		rts	
00015A6A                            ; End of function Sonic_RollLeft
00015A6A                            
00015A6A                            
00015A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A6A                            
00015A6A                            
00015A6A                            Sonic_RollRight:
00015A6A 3028 0020                  		move.w	obInertia(a0),d0
00015A6E 6B00                       		bmi.s	loc_1323A
00015A70 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A76 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015A7C 4E75                       		rts	
00015A7E                            ; ===========================================================================
00015A7E                            
00015A7E                            loc_1323A:
00015A7E D044                       		add.w	d4,d0
00015A80 6400                       		bcc.s	loc_13242
00015A82 303C 0080                  		move.w	#$80,d0
00015A86                            
00015A86                            loc_13242:
00015A86 3140 0020                  		move.w	d0,obInertia(a0)
00015A8A 4E75                       		rts	
00015A8C                            ; End of function Sonic_RollRight
00015A8C                            ; End of function Sonic_RollRight
00015A8C                            		include	"_incObj\Sonic JumpDirection.asm"
00015A8C                            ; ---------------------------------------------------------------------------
00015A8C                            ; Subroutine to	change Sonic's direction while jumping
00015A8C                            ; ---------------------------------------------------------------------------
00015A8C                            
00015A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A8C                            
00015A8C                            
00015A8C                            Sonic_JumpDirection:
00015A8C 3C38 F760                  		move.w	($FFFFF760).w,d6
00015A90 3A38 F762                  		move.w	($FFFFF762).w,d5
00015A94 E345                       		asl.w	#1,d5
00015A96 3028 0010                  		move.w	$10(a0),d0	
00015A9A 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015AA0 6700                       		beq.s	loc_13278; if not, branch	
00015AA2 08E8 0000 0022             		bset	#0,$22(a0)	
00015AA8 9045                       		sub.w	d5,d0	
00015AAA 3206                       		move.w	d6,d1	
00015AAC 4441                       		neg.w	d1	
00015AAE B041                       		cmp.w	d1,d0	
00015AB0 6E00                       		bgt.s	loc_13278	
00015AB2 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015AB4 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015AB6 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015AB8 3001                       		move.w	d1,d0
00015ABA                            
00015ABA                            loc_13278:
00015ABA 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015AC0 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015AC2 08A8 0000 0022             		bclr	#0,$22(a0)	
00015AC8 D045                       		add.w	d5,d0	
00015ACA B046                       		cmp.w	d6,d0	
00015ACC 6D00                       		blt.s	Obj01_JumpMove
00015ACE 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015AD0 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015AD2 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015AD4 3006                       		move.w	d6,d0
00015AD6                            
00015AD6                            Obj01_JumpMove:
00015AD6 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015ADA                            
00015ADA                            Obj01_ResetScr2:
00015ADA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015AE0 6700                       		beq.s	loc_132A4	; if yes, branch
00015AE2 6400                       		bcc.s	loc_132A0
00015AE4 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015AE8                            
00015AE8                            loc_132A0:
00015AE8 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015AEC                            
00015AEC                            loc_132A4:
00015AEC 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015AF2 6500                       		bcs.s	locret_132D2	; if yes, branch
00015AF4 3028 0010                  		move.w	obVelX(a0),d0
00015AF8 3200                       		move.w	d0,d1
00015AFA EA41                       		asr.w	#5,d1
00015AFC 6700                       		beq.s	locret_132D2
00015AFE 6B00                       		bmi.s	loc_132C6
00015B00 9041                       		sub.w	d1,d0
00015B02 6400                       		bcc.s	loc_132C0
00015B04 303C 0000                  		move.w	#0,d0
00015B08                            
00015B08                            loc_132C0:
00015B08 3140 0010                  		move.w	d0,obVelX(a0)
00015B0C 4E75                       		rts	
00015B0E                            ; ===========================================================================
00015B0E                            
00015B0E                            loc_132C6:
00015B0E 9041                       		sub.w	d1,d0
00015B10 6500                       		bcs.s	loc_132CE
00015B12 303C 0000                  		move.w	#0,d0
00015B16                            
00015B16                            loc_132CE:
00015B16 3140 0010                  		move.w	d0,obVelX(a0)
00015B1A                            
00015B1A                            locret_132D2:
00015B1A 4E75                       		rts	
00015B1C                            ; End of function Sonic_JumpDirection
00015B1C                            ; End of function Sonic_JumpDirection
00015B1C                            		include "_incObj\Sonic Peelout.asm"
00015B1C                            ; ---------------------------------------------------------------------------
00015B1C                            ; Subroutine to make Sonic perform a peelout
00015B1C                            ; ---------------------------------------------------------------------------
00015B1C                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B1C                            
00015B1C                            Sonic_Peelout:
00015B1C 0828 0001 0039             		btst	#1,$39(a0)
00015B22 6600                       		bne.s	SCDPeelout_Launch
00015B24 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015B2A 6600                       		bne.s	@return
00015B2C 1038 F603                  		move.b	($FFFFF603).w,d0
00015B30 0200 0070                  		andi.b	#%01110000,d0
00015B34 6700 0000                  		beq.w	@return
00015B38 117C 0001 001C             		move.b	#1,$1C(a0)
00015B3E 317C 0000 003A             		move.w	#0,$3A(a0)
00015B44 303C 00D2                  		move.w	#$D2,d0
00015B48 4EB9 0000 1250             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015B4E                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015B4E 588F                       		addq.l	#4,sp
00015B50 08E8 0001 0039             		bset	#1,$39(a0)
00015B56                            		
00015B56 4268 0020                  		clr.w	obInertia(a0)
00015B5A                             
00015B5A 6100 0000                  		bsr.w	Sonic_LevelBound
00015B5E 6100 0000                  		bsr.w	Sonic_AnglePos
00015B62                             
00015B62                            	@return:
00015B62 4E75                       		rts	
00015B64                            ; ---------------------------------------------------------------------------
00015B64                             
00015B64                            SCDPeelout_Launch:
00015B64 0828 0001 0039             		btst	#1,$39(a0)
00015B6A 1038 F602                  		move.b	($FFFFF602).w,d0
00015B6E 0800 0000                  		btst	#0,d0
00015B72 6600 0000                  		bne.w	SCDPeelout_Charge
00015B76 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015B7C 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015B82 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015B86 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015B8C 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015B92 3028 0020                  		move.w	obInertia(a0),d0
00015B96 0440 0800                  		subi.w	#$800,d0
00015B9A D040                       		add.w	d0,d0
00015B9C 0240 1F00                  		andi.w	#$1F00,d0
00015BA0 4440                       		neg.w	d0
00015BA2 0640 2000                  		addi.w	#$2000,d0
00015BA6 31C0 C904                  		move.w	d0,($FFFFC904).w
00015BAA 0828 0000 0022             		btst	#0,$22(a0)
00015BB0 6700                       		beq.s	@dontflip
00015BB2 4468 0020                  		neg.w	obInertia(a0)
00015BB6                             
00015BB6                            @dontflip:
00015BB6 08A8 0007 0022             		bclr	#7,$22(a0)
00015BBC 303C 00D3                  		move.w	#$D3,d0
00015BC0 4EB9 0000 1250             		jsr	(PlaySound_Special).l
00015BC6                            	;	sfx 	sfx_PeeloutRelease
00015BC6 1028 0026                  		move.b	obAngle(a0),d0
00015BCA 4EB9 0000 3A32             		jsr	(CalcSine).l
00015BD0 C3E8 0020                  		muls.w	obInertia(a0),d1
00015BD4 E081                       		asr.l	#8,d1
00015BD6 3141 0010                  		move.w	d1,obVelX(a0)
00015BDA C1E8 0020                  		muls.w	obInertia(a0),d0
00015BDE E080                       		asr.l	#8,d0
00015BE0 3140 0012                  		move.w	d0,obVelY(a0)	
00015BE4 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015BE8                            ; ---------------------------------------------------------------------------
00015BE8                             
00015BE8                            SCDPeelout_Charge:				; If still charging the dash...
00015BE8 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015BEC 3401                       		move.w	d1,d2
00015BEE D241                       		add.w	d1,d1
00015BF0 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015BF4 6700                       		beq.s	@noshoes
00015BF6 E242                       		asr.w	#1,d2
00015BF8 9242                       		sub.w	d2,d1
00015BFA                            
00015BFA                            @noshoes:
00015BFA 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015C00 B268 0020                  		cmp.w	obInertia(a0),d1
00015C04 6E00                       		bgt.s	@inctimer
00015C06 3141 0020                  		move.w	d1,obInertia(a0)
00015C0A                            
00015C0A                            @inctimer:
00015C0A 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015C0E 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015C14 6500                       		bcs.s	SCDPeelout_ResetScr
00015C16 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015C1C 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015C22                            		
00015C22                            SCDPeelout_Stop_Sound:
00015C22 303C 00D4                  		move.w	#$D4,d0
00015C26 4EB9 0000 1250             		jsr		(PlaySound_Special).l
00015C2C                            	;	sfx 	sfx_PeeloutStop
00015C2C 4268 0020                  		clr.w	obInertia(a0)
00015C30                            
00015C30                            SCDPeelout_ResetScr:
00015C30 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015C32 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015C38 6700                       		beq.s	@finish
00015C3A 6400                       		bcc.s	@skip
00015C3C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C40                             
00015C40                            	@skip:
00015C40 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C44                             
00015C44                            	@finish:
00015C44 6100 0000                  		bsr.w	Sonic_LevelBound
00015C48 6100 0000                  		bsr.w	Sonic_AnglePos
00015C4C 4E75                       		rts
00015C4E                            		
00015C4E                            		
00015C4E                            		include "_incObj\Sonic Spindash.asm"
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                            ; Subroutine to make Sonic perform a spindash
00015C4E                            ; ---------------------------------------------------------------------------
00015C4E                             
00015C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C4E                             
00015C4E                             
00015C4E                            Sonic_SpinDash:
00015C4E 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015C52 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015C54 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015C5A 6600                       		bne.s	locret2_1AC8C		; if not, return
00015C5C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015C60 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015C64 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015C68 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015C6E 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015C72 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play spin sound
00015C78 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015C7A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015C80 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015C86                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015C86                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015C86 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015C8C                            						; the smoke/dust object
00015C8C                            loc2_1AC84:
00015C8C 6100 0000                  		bsr.w	Sonic_LevelBound
00015C90 6100 0000                  		bsr.w	Sonic_AnglePos
00015C94                            
00015C94                            locret2_1AC8C:
00015C94 4E75                       		rts	
00015C96                            ; ---------------------------------------------------------------------------
00015C96                            
00015C96                            loc2_1AC8E:	
00015C96 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015C9C 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015CA0 0800 0001                  		btst	#1,d0			; check down button
00015CA4 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015CA8 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015CAE 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015CB4 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015CBA 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015CBE 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015CC4 7000                       		moveq	#0,d0
00015CC6 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015CCA D040                       		add.w	d0,d0			; double it
00015CCC 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015CD2 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015CD6 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015CDA D040                       		add.w	d0,d0			; double it
00015CDC 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015CE0 4440                       		neg.w	d0			; negate it
00015CE2 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015CE6 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015CEA 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015CF0 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015CF2 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015CF6                            
00015CF6                            loc2_1ACF4:
00015CF6 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015CFC 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015D02 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015D06 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play it!
00015D0C 1028 0026                  		move.b	obAngle(a0),d0
00015D10 4EB9 0000 3A32             		jsr	(CalcSine).l
00015D16 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D1A E081                       		asr.l	#8,d1
00015D1C 3141 0010                  		move.w	d1,obVelX(a0)
00015D20 C1E8 0020                  		muls.w	obInertia(a0),d0
00015D24 E080                       		asr.l	#8,d0
00015D26 3140 0012                  		move.w	d0,obVelY(a0)
00015D2A                            	
00015D2A 6000                       		bra.s	loc2_1AD78
00015D2C                            ; ===========================================================================
00015D2C                            Dash_Speeds:
00015D2C 0600                       		dc.w  $600		; 0
00015D2E 0680                       		dc.w  $680		; 1
00015D30 0700                       		dc.w  $700		; 2
00015D32 0780                       		dc.w  $780		; 3
00015D34 0800                       		dc.w  $800		; 4
00015D36 0880                       		dc.w  $880		; 5
00015D38 0900                       		dc.w  $900		; 6
00015D3A 0980                       		dc.w  $980		; 7
00015D3C 0A00                       		dc.w  $A00		; 8
00015D3E                            ; ===========================================================================
00015D3E                            
00015D3E                            loc2_1AD30:				; If still charging the dash...
00015D3E 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015D42 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015D44 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015D48 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015D4A 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015D4E 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015D50 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015D56                            
00015D56                            loc2_1AD48:
00015D56 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D5A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015D5E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015D62 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015D68 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015D6C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015D72 4EB9 0000 1250             		jsr	(PlaySound_Special).l	; play charge sound
00015D78 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015D7E 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015D84 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015D86 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015D8C                            
00015D8C                            loc2_1AD78:
00015D8C 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015D8E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015D94 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015D96 6400                       		bcc.s	loc2_1AD88
00015D98 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D9C                            
00015D9C                            loc2_1AD88:
00015D9C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015DA0                            
00015DA0                            loc2_1AD8C:
00015DA0 6100 0000                  		bsr.w	Sonic_LevelBound
00015DA4 6100 0000                  		bsr.w	Sonic_AnglePos
00015DA8                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015DA8 4E75                       		rts
00015DAA                            ; End of subroutine Sonic_SpinDash
00015DAA                            ; End of subroutine Sonic_SpinDash
00015DAA                            
00015DAA                            Sonic_AirRoll:
00015DAA 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015DB0 6600                               bne.s   AirRoll_Return   ; if not, return
00015DB2                            
00015DB2                            AirRoll_CheckBtn:
00015DB2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015DB6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015DBA 6700                               beq.s	AirRoll_Return
00015DBC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015DC2                                   ; move.w	#$BC,d0
00015DC2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015DC2                            
00015DC2                            AirRoll_Return:
00015DC2 4E75                               rts
00015DC4                            ; ===========================================================================
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4                            ; Unused subroutine to squash Sonic
00015DC4                            ; ---------------------------------------------------------------------------
00015DC4 1028 0026                  		move.b	obAngle(a0),d0
00015DC8 0600 0020                  		addi.b	#$20,d0
00015DCC 0200 00C0                  		andi.b	#$C0,d0
00015DD0 6600                       		bne.s	locret_13302
00015DD2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015DD6 4A41                       		tst.w	d1
00015DD8 6A00                       		bpl.s	locret_13302
00015DDA 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015DE0 317C 0000 0010             		move.w	#0,obVelX(a0)
00015DE6 317C 0000 0012             		move.w	#0,obVelY(a0)
00015DEC 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015DF2                            
00015DF2                            locret_13302:
00015DF2 4E75                       		rts		
00015DF4                            		include	"_incObj\Sonic LevelBound.asm"
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015DF4                            ; ---------------------------------------------------------------------------
00015DF4                            
00015DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DF4                            
00015DF4                            
00015DF4                            Sonic_LevelBound:
00015DF4 2228 0008                  		move.l	obX(a0),d1
00015DF8 3028 0010                  		move.w	obVelX(a0),d0
00015DFC 48C0                       		ext.l	d0
00015DFE E180                       		asl.l	#8,d0
00015E00 D280                       		add.l	d0,d1
00015E02 4841                       		swap	d1
00015E04 3038 F728                  		move.w	(v_limitleft2).w,d0
00015E08 0640 0010                  		addi.w	#$10,d0
00015E0C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015E0E 6200                       		bhi.s	@sides		; if yes, branch
00015E10 3038 F72A                  		move.w	(v_limitright2).w,d0
00015E14 0640 0128                  		addi.w	#$128,d0
00015E18 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015E1C 6600                       		bne.s	@screenlocked
00015E1E 0640 0040                  		addi.w	#$40,d0
00015E22                            
00015E22                            	@screenlocked:
00015E22 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015E24 6300                       		bls.s	@sides		; if yes, branch
00015E26                            
00015E26                            	@chkbottom:
00015E26 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015E2A 0640 00E0                  		addi.w	#$E0,d0
00015E2E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015E32 6D00                       		blt.s	@bottom		; if yes, branch
00015E34 4E75                       		rts	
00015E36                            ; ===========================================================================
00015E36                            
00015E36                            @bottom:
00015E36 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015E3A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015E3E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015E40 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015E42 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015E48 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015E4C 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015E52 6500 0000                  		bcs.w	Kill_transport
00015E56 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015E5A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015E60 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015E66 4E75                       		rts	
00015E68                            @dontkill: 
00015E68 4E75                       		rts
00015E6A                            ; ===========================================================================
00015E6A                            
00015E6A                            @sides:
00015E6A 3140 0008                  		move.w	d0,obX(a0)
00015E6E 317C 0000 000A             		move.w	#0,obX+2(a0)
00015E74 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015E7A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015E80 60A4                       		bra.s	@chkbottom
00015E82                            
00015E82                            Kill_transport: 
00015E82 4EF9 0000 0000                     	jmp        (KillSonic).l
00015E88                            
00015E88                            ; End of function Sonic_LevelBound
00015E88                            ; End of function Sonic_LevelBound
00015E88                            		include	"_incObj\Sonic Roll.asm"
00015E88                            ; ---------------------------------------------------------------------------
00015E88                            ; Subroutine allowing Sonic to roll when he's moving
00015E88                            ; ---------------------------------------------------------------------------
00015E88                            
00015E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E88                            
00015E88                            
00015E88                            Sonic_Roll:
00015E88 4A38 F7CA                  		tst.b	(f_jumponly).w
00015E8C 6600                       		bne.s	@noroll
00015E8E 3028 0020                  		move.w	obInertia(a0),d0
00015E92 6A00                       		bpl.s	@ispositive
00015E94 4440                       		neg.w	d0
00015E96                            
00015E96                            	@ispositive:
00015E96 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015E9A 6500                       		bcs.s	@noroll		; if not, branch
00015E9C 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015EA0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015EA4 6600                       		bne.s	@noroll		; if yes, branch
00015EA6 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015EAC 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015EAE                            
00015EAE                            	@noroll:
00015EAE 4E75                       		rts	
00015EB0                            ; ===========================================================================
00015EB0                            
00015EB0                            Sonic_ChkRoll:
00015EB0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015EB6 6700                       		beq.s	@roll		; if not, branch
00015EB8 4E75                       		rts	
00015EBA                            ; ===========================================================================
00015EBA                            
00015EBA                            @roll:
00015EBA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015EC0 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015EC6 117C 0007 0017             		move.b	#7,obWidth(a0)
00015ECC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015ED2 5A68 000C                  		addq.w	#5,obY(a0)
00015EE0 4A68 0020                  		tst.w	obInertia(a0)
00015EE4 6600                       		bne.s	@ismoving
00015EE6 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015EEC                            
00015EEC                            	@ismoving:
00015EEC 4E75                       		rts	
00015EEE                            ; End of function Sonic_Roll
00015EEE                            ; End of function Sonic_Roll
00015EEE                            		include	"_incObj\Sonic Jump.asm"
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            ; Subroutine allowing Sonic to jump
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            
00015EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EEE                            
00015EEE                            
00015EEE                            Sonic_Jump:
00015EEE 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015EF2 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015EF6 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015EFA 7000                       		moveq	#0,d0
00015EFC 1028 0026                  		move.b	obAngle(a0),d0
00015F00 0600 0080                  		addi.b	#$80,d0
00015F04 6100 0000                  		bsr.w	sub_14D48
00015F08 0C41 0006                  		cmpi.w	#6,d1
00015F0C 6D00 0000                  		blt.w	locret_1348E
00015F10 343C 0680                  		move.w	#$680,d2
00015F14 0828 0006 0022             		btst	#6,obStatus(a0)
00015F1A 6700                       		beq.s	loc_1341C
00015F1C 343C 0380                  		move.w	#$380,d2
00015F20                            
00015F20                            loc_1341C:
00015F20 7000                       		moveq	#0,d0
00015F22 1028 0026                  		move.b	obAngle(a0),d0
00015F26 0400 0040                  		subi.b	#$40,d0
00015F2A 4EB9 0000 3A32             		jsr	(CalcSine).l
00015F30 C3C2                       		muls.w	d2,d1
00015F32 E081                       		asr.l	#8,d1
00015F34 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015F38 C1C2                       		muls.w	d2,d0
00015F3A E080                       		asr.l	#8,d0
00015F3C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015F40 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F46 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015F4C 588F                       		addq.l	#4,sp
00015F4E 117C 0001 003C             		move.b	#1,$3C(a0)
00015F54 4228 0038                  		clr.b	$38(a0)
00015F62 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015F68 117C 0009 0017             		move.b	#9,obWidth(a0)
00015F6E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015F74 117C 0007 0017             		move.b	#7,obWidth(a0)
00015F7A                            Result_Check:
00015F7A 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015F7E 6700                       		beq.s   NormalJump ; If not, branch
00015F80 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
00015F86 6000                       		bra.s   cont ; Continue
00015F88                            NormalJump:
00015F88 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015F8E                            cont:
00015F8E 08E8 0002 0022             		bset	#2,obStatus(a0)
00015F94 5A68 000C                  		addq.w	#5,obY(a0)
00015F98                            
00015F98                            locret_1348E:
00015F98 4E75                       		rts	
00015F9A                            ; ===========================================================================
00015F9A                            
00015F9A                            ; End of function Sonic_Jump
00015F9A                            ; End of function Sonic_Jump
00015F9A                            		include	"_incObj\Sonic JumpHeight.asm"
00015F9A                            ; ---------------------------------------------------------------------------
00015F9A                            ; Subroutine controlling Sonic's jump height/duration
00015F9A                            ; ---------------------------------------------------------------------------
00015F9A                            
00015F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F9A                            
00015F9A                            
00015F9A                            Sonic_JumpHeight:
00015F9A 4A28 003C                  		tst.b	$3C(a0)
00015F9E 6700                       		beq.s	loc_134C4
00015FA0 323C FC00                  		move.w	#-$400,d1
00015FA4 0828 0006 0022             		btst	#6,obStatus(a0)
00015FAA 6700                       		beq.s	loc_134AE
00015FAC 323C FE00                  		move.w	#-$200,d1
00015FB0                            
00015FB0                            loc_134AE:
00015FB0 B268 0012                  		cmp.w	obVelY(a0),d1
00015FB4 6F00                       		ble.s	locret_134C2
00015FB6 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015FBA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015FBE 6600                       		bne.s	locret_134C2	; if yes, branch
00015FC0 3141 0012                  		move.w	d1,obVelY(a0)
00015FC4                            
00015FC4                            locret_134C2:
00015FC4 4E75                       		rts	
00015FC6                            ; ===========================================================================
00015FC6                            
00015FC6                            loc_134C4:
00015FC6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015FCC 6C00                       		bge.s	locret_134D2
00015FCE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015FD4                            
00015FD4                            locret_134D2:
00015FD4 4E75                       		rts	
00015FD6                            ; End of function Sonic_JumpHeight
00015FD6                            ; End of function Sonic_JumpHeight
00015FD6                            		include	"_incObj\Sonic SlopeResist.asm"
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            ; Subroutine to	slow Sonic walking up a	slope
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            
00015FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FD6                            
00015FD6                            
00015FD6                            Sonic_SlopeResist:
00015FD6 1028 0026                  		move.b	obAngle(a0),d0
00015FDA 0600 0060                  		addi.b	#$60,d0
00015FDE 0C00 00C0                  		cmpi.b	#$C0,d0
00015FE2 6400                       		bcc.s	locret_13508
00015FE4 1028 0026                  		move.b	obAngle(a0),d0
00015FE8 4EB9 0000 3A32             		jsr	(CalcSine).l
00015FEE C1FC 0020                  		muls.w	#$20,d0
00015FF2 E080                       		asr.l	#8,d0
00015FF4 4A68 0020                  		tst.w	obInertia(a0)
00015FF8 6700                       		beq.s	locret_13508
00015FFA 6B00                       		bmi.s	loc_13504
00015FFC 4A40                       		tst.w	d0
00015FFE 6700                       		beq.s	locret_13502
00016000 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00016004                            
00016004                            locret_13502:
00016004 4E75                       		rts	
00016006                            ; ===========================================================================
00016006                            
00016006                            loc_13504:
00016006 D168 0020                  		add.w	d0,obInertia(a0)
0001600A                            
0001600A                            locret_13508:
0001600A 4E75                       		rts	
0001600C                            ; End of function Sonic_SlopeResist
0001600C                            ; End of function Sonic_SlopeResist
0001600C                            		include	"_incObj\Sonic RollRepel.asm"
0001600C                            ; ---------------------------------------------------------------------------
0001600C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001600C                            ; ---------------------------------------------------------------------------
0001600C                            
0001600C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001600C                            
0001600C                            
0001600C                            Sonic_RollRepel:
0001600C 1028 0026                  		move.b	obAngle(a0),d0
00016010 0600 0060                  		addi.b	#$60,d0
00016014 0C00 00C0                  		cmpi.b	#-$40,d0
00016018 6400                       		bcc.s	locret_13544
0001601A 1028 0026                  		move.b	obAngle(a0),d0
0001601E 4EB9 0000 3A32             		jsr	(CalcSine).l
00016024 C1FC 0050                  		muls.w	#$50,d0
00016028 E080                       		asr.l	#8,d0
0001602A 4A68 0020                  		tst.w	obInertia(a0)
0001602E 6B00                       		bmi.s	loc_1353A
00016030 4A40                       		tst.w	d0
00016032 6A00                       		bpl.s	loc_13534
00016034 E480                       		asr.l	#2,d0
00016036                            
00016036                            loc_13534:
00016036 D168 0020                  		add.w	d0,obInertia(a0)
0001603A 4E75                       		rts	
0001603C                            ; ===========================================================================
0001603C                            
0001603C                            loc_1353A:
0001603C 4A40                       		tst.w	d0
0001603E 6B00                       		bmi.s	loc_13540
00016040 E480                       		asr.l	#2,d0
00016042                            
00016042                            loc_13540:
00016042 D168 0020                  		add.w	d0,obInertia(a0)
00016046                            
00016046                            locret_13544:
00016046 4E75                       		rts	
00016048                            ; End of function Sonic_RollRepel
00016048                            ; End of function Sonic_RollRepel
00016048                            		include	"_incObj\Sonic SlopeRepel.asm"
00016048                            ; ---------------------------------------------------------------------------
00016048                            ; Subroutine to	push Sonic down	a slope
00016048                            ; ---------------------------------------------------------------------------
00016048                            
00016048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016048                            
00016048                            
00016048                            Sonic_SlopeRepel:
00016048 4E71                       		nop	
0001604A 4A28 0038                  		tst.b	$38(a0)
0001604E 6600                       		bne.s	locret_13580
00016050 4A68 003E                  		tst.w	$3E(a0)
00016054 6600                       		bne.s	loc_13582
00016056 1028 0026                  		move.b	obAngle(a0),d0
0001605A 0600 0020                  		addi.b	#$20,d0
0001605E 0200 00C0                  		andi.b	#$C0,d0
00016062 6700                       		beq.s	locret_13580
00016064 3028 0020                  		move.w	obInertia(a0),d0
00016068 6A00                       		bpl.s	loc_1356A
0001606A 4440                       		neg.w	d0
0001606C                            
0001606C                            loc_1356A:
0001606C 0C40 0280                  		cmpi.w	#$280,d0
00016070 6400                       		bcc.s	locret_13580
00016072 4268 0020                  		clr.w	obInertia(a0)
00016076 08E8 0001 0022             		bset	#1,obStatus(a0)
0001607C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00016082                            
00016082                            locret_13580:
00016082 4E75                       		rts	
00016084                            ; ===========================================================================
00016084                            
00016084                            loc_13582:
00016084 5368 003E                  		subq.w	#1,$3E(a0)
00016088 4E75                       		rts	
0001608A                            ; End of function Sonic_SlopeRepel
0001608A                            ; End of function Sonic_SlopeRepel
0001608A                            		include	"_incObj\Sonic JumpAngle.asm"
0001608A                            ; ---------------------------------------------------------------------------
0001608A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001608A                            ; ---------------------------------------------------------------------------
0001608A                            
0001608A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001608A                            
0001608A                            
0001608A                            Sonic_JumpAngle:
0001608A 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
0001608E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00016090 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00016092                            
00016092 5400                       		addq.b	#2,d0		; increase angle
00016094 6400                       		bcc.s	loc_13596
00016096 7000                       		moveq	#0,d0
00016098                            
00016098                            loc_13596:
00016098 6000                       		bra.s	loc_1359E
0001609A                            ; ===========================================================================
0001609A                            
0001609A                            loc_13598:
0001609A 5500                       		subq.b	#2,d0		; decrease angle
0001609C 6400                       		bcc.s	loc_1359E
0001609E 7000                       		moveq	#0,d0
000160A0                            
000160A0                            loc_1359E:
000160A0 1140 0026                  		move.b	d0,obAngle(a0)
000160A4                            
000160A4                            locret_135A2:
000160A4 4E75                       		rts	
000160A6                            ; End of function Sonic_JumpAngle
000160A6                            ; End of function Sonic_JumpAngle
000160A6                            		include	"_incObj\Sonic Floor.asm"
000160A6                            ; ---------------------------------------------------------------------------
000160A6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000160A6                            ; ---------------------------------------------------------------------------
000160A6                            
000160A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160A6                            
000160A6                            
000160A6                            Sonic_Floor:
000160A6 3228 0010                  		move.w	obVelX(a0),d1
000160AA 3428 0012                  		move.w	obVelY(a0),d2
000160AE 4EB9 0000 3CC4             		jsr	(CalcAngle).l
000160B4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000160B8 0400 0020                  		subi.b	#$20,d0
000160BC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000160C0 0200 00C0                  		andi.b	#$C0,d0
000160C4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000160C8 0C00 0040                  		cmpi.b	#$40,d0
000160CC 6700 0000                  		beq.w	loc_13680
000160D0 0C00 0080                  		cmpi.b	#$80,d0
000160D4 6700 0000                  		beq.w	loc_136E2
000160D8 0C00 00C0                  		cmpi.b	#$C0,d0
000160DC 6700 0000                  		beq.w	loc_1373E
000160E0 6100 0000                  		bsr.w	Sonic_HitWall
000160E4 4A41                       		tst.w	d1
000160E6 6A00                       		bpl.s	loc_135F0
000160E8 9368 0008                  		sub.w	d1,obX(a0)
000160EC 317C 0000 0010             		move.w	#0,obVelX(a0)
000160F2                            
000160F2                            loc_135F0:
000160F2 6100 0000                  		bsr.w	sub_14EB4
000160F6 4A41                       		tst.w	d1
000160F8 6A00                       		bpl.s	loc_13602
000160FA D368 0008                  		add.w	d1,obX(a0)
000160FE 317C 0000 0010             		move.w	#0,obVelX(a0)
00016104                            
00016104                            loc_13602:
00016104 6100 0000                  		bsr.w	Sonic_HitFloor
00016108 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001610C 4A41                       		tst.w	d1
0001610E 6A00                       		bpl.s	locret_1367E
00016110 1428 0012                  		move.b	obVelY(a0),d2
00016114 5002                       		addq.b	#8,d2
00016116 4402                       		neg.b	d2
00016118 B202                       		cmp.b	d2,d1
0001611A 6C00                       		bge.s	loc_1361E
0001611C B002                       		cmp.b	d2,d0
0001611E 6D00                       		blt.s	locret_1367E
00016120                            
00016120                            loc_1361E:
00016120 D368 000C                  		add.w	d1,obY(a0)
00016124 1143 0026                  		move.b	d3,obAngle(a0)
00016128 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001612C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016132 1003                       		move.b	d3,d0
00016134 0600 0020                  		addi.b	#$20,d0
00016138 0200 0040                  		andi.b	#$40,d0
0001613C 6600                       		bne.s	loc_1365C
0001613E 1003                       		move.b	d3,d0
00016140 0600 0010                  		addi.b	#$10,d0
00016144 0200 0020                  		andi.b	#$20,d0
00016148 6700                       		beq.s	loc_1364E
0001614A E0E8 0012                  		asr	obVelY(a0)
0001614E 6000                       		bra.s	loc_13670
00016150                            ; ===========================================================================
00016150                            
00016150                            loc_1364E:
00016150 317C 0000 0012             		move.w	#0,obVelY(a0)
00016156 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001615C 4E75                       		rts	
0001615E                            ; ===========================================================================
0001615E                            
0001615E                            loc_1365C:
0001615E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016164 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001616A 6F00                       		ble.s	loc_13670
0001616C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016172                            
00016172                            loc_13670:
00016172 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016178 4A03                       		tst.b	d3
0001617A 6A00                       		bpl.s	locret_1367E
0001617C 4468 0020                  		neg.w	obInertia(a0)
00016180                            
00016180                            locret_1367E:
00016180 4E75                       		rts	
00016182                            ; ===========================================================================
00016182                            
00016182                            loc_13680:
00016182 6100 0000                  		bsr.w	Sonic_HitWall
00016186 4A41                       		tst.w	d1
00016188 6A00                       		bpl.s	loc_1369A
0001618A 9368 0008                  		sub.w	d1,obX(a0)
0001618E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016194 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001619A 4E75                       		rts	
0001619C                            ; ===========================================================================
0001619C                            
0001619C                            loc_1369A:
0001619C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000161A0 4A41                       		tst.w	d1
000161A2 6A00                       		bpl.s	loc_136B4
000161A4 9368 000C                  		sub.w	d1,obY(a0)
000161A8 4A68 0012                  		tst.w	obVelY(a0)
000161AC 6A00                       		bpl.s	locret_136B2
000161AE 317C 0000 0012             		move.w	#0,obVelY(a0)
000161B4                            
000161B4                            locret_136B2:
000161B4 4E75                       		rts	
000161B6                            ; ===========================================================================
000161B6                            
000161B6                            loc_136B4:
000161B6 4A68 0012                  		tst.w	obVelY(a0)
000161BA 6B00                       		bmi.s	locret_136E0
000161BC 6100 0000                  		bsr.w	Sonic_HitFloor
000161C0 4A41                       		tst.w	d1
000161C2 6A00                       		bpl.s	locret_136E0
000161C4 D368 000C                  		add.w	d1,obY(a0)
000161C8 1143 0026                  		move.b	d3,obAngle(a0)
000161CC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000161D0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000161D6 317C 0000 0012             		move.w	#0,obVelY(a0)
000161DC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000161E2                            
000161E2                            locret_136E0:
000161E2 4E75                       		rts	
000161E4                            ; ===========================================================================
000161E4                            
000161E4                            loc_136E2:
000161E4 6100 0000                  		bsr.w	Sonic_HitWall
000161E8 4A41                       		tst.w	d1
000161EA 6A00                       		bpl.s	loc_136F4
000161EC 9368 0008                  		sub.w	d1,obX(a0)
000161F0 317C 0000 0010             		move.w	#0,obVelX(a0)
000161F6                            
000161F6                            loc_136F4:
000161F6 6100 0000                  		bsr.w	sub_14EB4
000161FA 4A41                       		tst.w	d1
000161FC 6A00                       		bpl.s	loc_13706
000161FE D368 0008                  		add.w	d1,obX(a0)
00016202 317C 0000 0010             		move.w	#0,obVelX(a0)
00016208                            
00016208                            loc_13706:
00016208 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001620C 4A41                       		tst.w	d1
0001620E 6A00                       		bpl.s	locret_1373C
00016210 9368 000C                  		sub.w	d1,obY(a0)
00016214 1003                       		move.b	d3,d0
00016216 0600 0020                  		addi.b	#$20,d0
0001621A 0200 0040                  		andi.b	#$40,d0
0001621E 6600                       		bne.s	loc_13726
00016220 317C 0000 0012             		move.w	#0,obVelY(a0)
00016226 4E75                       		rts	
00016228                            ; ===========================================================================
00016228                            
00016228                            loc_13726:
00016228 1143 0026                  		move.b	d3,obAngle(a0)
0001622C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016230 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016236 4A03                       		tst.b	d3
00016238 6A00                       		bpl.s	locret_1373C
0001623A 4468 0020                  		neg.w	obInertia(a0)
0001623E                            
0001623E                            locret_1373C:
0001623E 4E75                       		rts	
00016240                            ; ===========================================================================
00016240                            
00016240                            loc_1373E:
00016240 6100 0000                  		bsr.w	sub_14EB4
00016244 4A41                       		tst.w	d1
00016246 6A00                       		bpl.s	loc_13758
00016248 D368 0008                  		add.w	d1,obX(a0)
0001624C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016252 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016258 4E75                       		rts	
0001625A                            ; ===========================================================================
0001625A                            
0001625A                            loc_13758:
0001625A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001625E 4A41                       		tst.w	d1
00016260 6A00                       		bpl.s	loc_13772
00016262 9368 000C                  		sub.w	d1,obY(a0)
00016266 4A68 0012                  		tst.w	obVelY(a0)
0001626A 6A00                       		bpl.s	locret_13770
0001626C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016272                            
00016272                            locret_13770:
00016272 4E75                       		rts	
00016274                            ; ===========================================================================
00016274                            
00016274                            loc_13772:
00016274 4A68 0012                  		tst.w	obVelY(a0)
00016278 6B00                       		bmi.s	locret_1379E
0001627A 6100 0000                  		bsr.w	Sonic_HitFloor
0001627E 4A41                       		tst.w	d1
00016280 6A00                       		bpl.s	locret_1379E
00016282 D368 000C                  		add.w	d1,obY(a0)
00016286 1143 0026                  		move.b	d3,obAngle(a0)
0001628A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001628E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016294 317C 0000 0012             		move.w	#0,obVelY(a0)
0001629A 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000162A0                            
000162A0                            locret_1379E:
000162A0 4E75                       		rts	
000162A2                            ; End of function Sonic_Floor
000162A2                            ; End of function Sonic_Floor
000162A2                            		include	"_incObj\Sonic ResetOnFloor.asm"
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            
000162A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162A2                            
000162A2                            
000162A2                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000162A2 08A8 0005 0022                     	bclr    #5,$22(a0)
000162A8 08A8 0001 0022                     	bclr    #1,$22(a0)
000162AE 0828 0002 0022                     	btst    #2,$22(a0)
000162B4 6700                               	beq.s    loc_137E4
000162B6 08A8 0002 0022             		bclr	#2,obStatus(a0)
000162BC 117C 0013 0016             		move.b	#$13,obHeight(a0)
000162C2 117C 0009 0017             		move.b	#9,obWidth(a0)
000162C8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000162CE 5B68 000C                  		subq.w	#5,obY(a0)
000162D2                            
000162D2                            loc_137E4:
000162D2 117C 0000 003C             		move.b	#0,$3C(a0)
000162D8 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000162DE 4E75                       		rts	
000162E0                            ; End of function Sonic_ResetOnFloor
000162E0                            ; End of function Sonic_ResetOnFloor
000162E0                            		include	"_incObj\Sonic (part 2).asm"
000162E0                            ; ---------------------------------------------------------------------------
000162E0                            ; Sonic	when he	gets hurt
000162E0                            ; ---------------------------------------------------------------------------
000162E0                            
000162E0                            Sonic_Hurt:	; Routine 4
000162E0 4EB9 0000 F832             		jsr	(SpeedToPos).l
000162E6 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000162EC 0828 0006 0022             		btst	#6,obStatus(a0)
000162F2 6700                       		beq.s	loc_1380C
000162F4 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000162FA                            
000162FA                            loc_1380C:
000162FA 6100 0000                  		bsr.w	Sonic_HurtStop
000162FE 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016302 6100 F114                  		bsr.w	Sonic_RecordPosition
00016306 6100 0000                  		bsr.w	Sonic_Animate
0001630A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001630E 4EF9 0000 F846             		jmp	(DisplaySprite).l
00016314                            
00016314                            ; ---------------------------------------------------------------------------
00016314                            ; Subroutine to	stop Sonic falling after he's been hurt
00016314                            ; ---------------------------------------------------------------------------
00016314                            
00016314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016314                            
00016314                            
00016314                            Sonic_HurtStop:
00016314 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016318 0640 00E0                  		addi.w	#$E0,d0
0001631C                            		;cmp.w	obY(a0),d0
0001631C                            		;bcs.w	KillSonic
0001631C 6100 FD88                  		bsr.w	Sonic_Floor
00016320 0828 0001 0022             		btst	#1,obStatus(a0)
00016326 6600                       		bne.s	locret_13860
00016328 7000                       		moveq	#0,d0
0001632A 3140 0012                  		move.w	d0,obVelY(a0)
0001632E 3140 0010                  		move.w	d0,obVelX(a0)
00016332 3140 0020                  		move.w	d0,obInertia(a0)
00016336 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001633C 5528 0024                  		subq.b	#2,obRoutine(a0)
00016340 317C 0078 0030             		move.w	#$78,$30(a0)
00016346                            
00016346                            locret_13860:
00016346 4E75                       		rts	
00016348                            ; End of function Sonic_HurtStop
00016348                            
00016348                            ; ---------------------------------------------------------------------------
00016348                            ; Sonic	when he	dies
00016348                            ; ---------------------------------------------------------------------------
00016348                            
00016348                            Sonic_Death:	; Routine 6
00016348 6100 0000                  		bsr.w	GameOver
0001634C 4EB9 0000 F7FA             		jsr	(ObjectFall).l
00016352 6100 F0C4                  		bsr.w	Sonic_RecordPosition
00016356 6100 0000                  		bsr.w	Sonic_Animate
0001635A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001635E 4EF9 0000 F846             		jmp	(DisplaySprite).l
00016364                            
00016364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016364                            
00016364                            GameOver:
00016364 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016368 0640 0100                  		addi.w	#$100,d0
0001636C B068 000C                  		cmp.w	obY(a0),d0
00016370 6400 0000                  		bcc.w	locret_13900
00016374 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001637A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001637E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016382 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016386 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001638A 6600                       		bne.s	loc_138D4
0001638C 317C 0000 003A             		move.w	#0,$3A(a0)
00016392 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
00016398 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
0001639E 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000163A4 4238 FE1A                  		clr.b	(f_timeover).w
000163A8                            
000163A8                            loc_138C2:
000163B2 7003                       		moveq	#3,d0
000163B4 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
000163BA                            		
000163BA                            loc_138C3:
000163C4 7003                       		moveq	#3,d0
000163C6 4EF9 0000 16EA             		jmp	(AddPLC).l	; load game over patterns
000163CC                            ; ===========================================================================
000163CC                            
000163CC                            loc_138D4:
000163CC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000163D2 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000163D6 6700                       		beq.s	locret_13900	; if not, branch
000163D8 317C 0000 003A             		move.w	#0,$3A(a0)
000163DE 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000163E4 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000163EA 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000163F0 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000163F6 60B0                       		bra.s	loc_138C2
000163F8                            		
000163F8                            
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            locret_13900:
000163F8 4E75                       		rts	
000163FA                            ; End of function GameOver
000163FA                            
000163FA                            ; ---------------------------------------------------------------------------
000163FA                            ; Sonic	when the level is restarted
000163FA                            ; ---------------------------------------------------------------------------
000163FA                            
000163FA                            Sonic_ResetLevel:; Routine 8
000163FA 4A68 003A                  		tst.w	$3A(a0)
000163FE 6700                       		beq.s	locret_13914
00016400 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016404 6600                       		bne.s	locret_13914
00016406 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001640C                            
0001640C                            	locret_13914:
0001640C 4E75                       		rts	
0001640C 4E75                       		rts	
0001640E                            		include	"_incObj\Sonic Loops.asm"
0001640E                            ; ---------------------------------------------------------------------------
0001640E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001640E                            ; ---------------------------------------------------------------------------
0001640E                            
0001640E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001640E                            
0001640E                            
0001640E                            Sonic_Loops:
0001640E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016414 6700                       		beq.s	@isstarlight	; if yes, branch
00016416 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001641A 6600 0000                  		bne.w	@noloops	; if not, branch
0001641E                            
0001641E                            	@isstarlight:
0001641E 3028 000C                  		move.w	obY(a0),d0
00016422 E248                       		lsr.w	#1,d0
00016424 0240 0380                  		andi.w	#$380,d0
00016428 1228 0008                  		move.b	obX(a0),d1
0001642C 0241 007F                  		andi.w	#$7F,d1
00016430 D041                       		add.w	d1,d0
00016432 43F8 A400                  		lea	(v_lvllayout).w,a1
00016436 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001643A                            
0001643A B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001643E 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016442 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016446 6700 FA68                  		beq.w	Sonic_ChkRoll
0001644A                            
0001644A B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001644E 6700                       		beq.s	@chkifleft	; if yes, branch
00016450 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016454 6700                       		beq.s	@chkifinair
00016456 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001645C 4E75                       		rts	
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            @chkifinair:
0001645E 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016464 6700                       		beq.s	@chkifleft	; if not, branch
00016466                            
00016466 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001646C 4E75                       		rts	
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            @chkifleft:
0001646E 3428 0008                  		move.w	obX(a0),d2
00016472 0C02 002C                  		cmpi.b	#$2C,d2
00016476 6400                       		bcc.s	@chkifright
00016478                            
00016478 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001647E 4E75                       		rts	
00016480                            ; ===========================================================================
00016480                            
00016480                            @chkifright:
00016480 0C02 00E0                  		cmpi.b	#$E0,d2
00016484 6500                       		bcs.s	@chkangle1
00016486                            
00016486 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001648C 4E75                       		rts	
0001648E                            ; ===========================================================================
0001648E                            
0001648E                            @chkangle1:
0001648E 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016494 6600                       		bne.s	@chkangle2	; if yes, branch
00016496                            
00016496 1228 0026                  		move.b	obAngle(a0),d1
0001649A 6700                       		beq.s	@done
0001649C 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000164A0 6200                       		bhi.s	@done		; if yes, branch
000164A2 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000164A8 4E75                       		rts	
000164AA                            ; ===========================================================================
000164AA                            
000164AA                            @chkangle2:
000164AA 1228 0026                  		move.b	obAngle(a0),d1
000164AE 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000164B2 6300                       		bls.s	@done		; if yes, branch
000164B4 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000164BA                            
000164BA                            @noloops:
000164BA                            @done:
000164BA 4E75                       		rts	
000164BC                            ; End of function Sonic_Loops
000164BC                            ; End of function Sonic_Loops
000164BC                            		include	"_incObj\Sonic Animate.asm"
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            ; Subroutine to	animate	Sonic's sprites
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            
000164BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164BC                            
000164BC                            
000164BC                            Sonic_Animate:				; XREF: Obj01_Control; et al
000164BC 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000164C2 7000                       		moveq	#0,d0
000164C4 1028 001C                  		move.b	obAnim(a0),d0
000164C8 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000164CC 6700                       		beq.s	@do		; if not, branch
000164CE 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000164D2 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000164D6 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000164DA                            		
000164DA 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000164E0                            
000164E0                            	@do:
000164E0 D040                       		add.w	d0,d0
000164E2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000164E6 1011                       		move.b	(a1),d0
000164E8 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000164EA 1228 0022                  		move.b	obStatus(a0),d1
000164EE 0201 0001                  		andi.b	#1,d1
000164F2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000164F8 8328 0001                  		or.b	d1,obRender(a0)
000164FC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016500 6A00                       		bpl.s	@delay		; if time remains, branch
00016502 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016506                            
00016506                            @loadframe:
00016506 7200                       		moveq	#0,d1
00016508 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001650C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016510 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016514 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016518                            
00016518                            	@next:
00016518 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001651C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016520                            
00016520                            	@delay:
00016520 4E75                       		rts	
00016522                            ; ===========================================================================
00016522                            
00016522                            @end_FF:
00016522 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016524 6600                       		bne.s	@end_FE		; if not, branch
00016526 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001652A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001652E 60E8                       		bra.s	@next
00016530                            ; ===========================================================================
00016530                            
00016530                            @end_FE:
00016530 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016532 6600                       		bne.s	@end_FD		; if not, branch
00016534 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016538 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001653C 9200                       		sub.b	d0,d1
0001653E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016542 60D4                       		bra.s	@next
00016544                            ; ===========================================================================
00016544                            
00016544                            @end_FD:
00016544 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016546 6600                       		bne.s	@end		; if not, branch
00016548 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001654E                            
0001654E                            	@end:
0001654E 4E75                       		rts	
00016550                            ; ===========================================================================
00016550                            
00016550                            @walkrunroll:
00016550 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016554 6ACA                       		bpl.s	@delay		; if time remains, branch
00016556 5200                       		addq.b	#1,d0		; is animation walking/running?
00016558 6600 0000                  		bne.w	@rolljump	; if not, branch
0001655C 7200                       		moveq	#0,d1
0001655E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016562 6B00                       		bmi.s	@ble 			; better handling of angles
00016564 6700                       		beq.s	@ble
00016566 5300                       		subq.b	#1,d0
00016568                            
00016568                            	@ble:																
00016568 1428 0022                  		move.b	obStatus(a0),d2
0001656C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016570 6600                       		bne.s	@flip		; if yes, branch
00016572 4600                       		not.b	d0		; reverse angle
00016574                            
00016574                            	@flip:
00016574 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016578 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001657A 7203                       		moveq	#3,d1
0001657C                            
0001657C                            	@noinvert:
0001657C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016582 B302                       		eor.b	d1,d2
00016584 8528 0001                  		or.b	d2,obRender(a0)
00016588 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
0001658E 6600 0000                  		bne.w	@push		; if yes, branch
00016592                            
00016592 E808                       		lsr.b	#4,d0		; divide angle by $10
00016594 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00016598 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001659C 6A00                       		bpl.s	@nomodspeed
0001659E 4442                       		neg.w	d2		; modulus speed
000165A0                            
000165A0                            	@nomodspeed:
000165A0 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000165A6 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000165AA 6400                       		bcc.s	@maxrunning	; if yes, branch
000165AC                            
000165AC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000165B2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000165B6 6400                       		bcc.s	@running	; if yes, branch
000165B8                            
000165B8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000165BE                            
000165BE                            	@running:
000165BE D000                       		add.b	d0,d0
000165C0 D000                       		add.b	d0,d0
000165C2 1600                       		move.b	d0,d3
000165C4 4442                       		neg.w	d2
000165C6 0642 0780                  		addi.w	#$780,d2
000165CA 6A00                       		bpl.s	@belowmax
000165CC 7400                       		moveq	#0,d2		; max animation speed
000165CE 6000                       		bra.s	@belowmax
000165D0                            
000165D0                            	@maxrunning:
000165D0 D000                       		add.b d0,d0
000165D2 1600                       		move.b d0,d3
000165D4 4442                       		neg.w d2
000165D6 0642 0800                  		addi.w #$800, d2
000165DA 6A00                       		bpl.s @belowmax
000165DC 7400                       		moveq #0, d2 
000165DE                            
000165DE                            	@belowmax:
000165DE E04A                       		lsr.w	#8,d2
000165E0 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000165E4 6100 FF20                  		bsr.w	@loadframe
000165E8 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000165EC 4E75                       		rts	
000165EE                            ; ===========================================================================
000165EE                            
000165EE                            @rolljump:
000165EE 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000165F0 6600                       		bne.s	@push		; if not, branch
000165F2 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000165F6 6A00                       		bpl.s	@nomodspeed2
000165F8 4442                       		neg.w	d2
000165FA                            
000165FA                            	@nomodspeed2:
000165FA 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016600 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016604 6400                       		bcc.s	@rollfast	; if yes, branch
00016606 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001660C                            
0001660C                            	@rollfast:
0001660C 4442                       		neg.w	d2
0001660E 0642 0400                  		addi.w	#$400,d2
00016612 6A00                       		bpl.s	@belowmax2
00016614 7400                       		moveq	#0,d2
00016616                            
00016616                            	@belowmax2:
00016616 E04A                       		lsr.w	#8,d2
00016618 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001661C 1228 0022                  		move.b	obStatus(a0),d1
00016620 0201 0001                  		andi.b	#1,d1
00016624 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001662A 8328 0001                  		or.b	d1,obRender(a0)
0001662E 6000 FED6                  		bra.w	@loadframe
00016632                            ; ===========================================================================
00016632                            
00016632                            @push:
00016632 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016636 6B00                       		bmi.s	@negspeed
00016638 4442                       		neg.w	d2
0001663A                            
0001663A                            	@negspeed:
0001663A 0642 0800                  		addi.w	#$800,d2
0001663E 6A00                       		bpl.s	@belowmax3	
00016640 7400                       		moveq	#0,d2
00016642                            
00016642                            	@belowmax3:
00016642 EC4A                       		lsr.w	#6,d2
00016644 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016648 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001664E 1228 0022                  		move.b	obStatus(a0),d1
00016652 0201 0001                  		andi.b	#1,d1
00016656 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001665C 8328 0001                  		or.b	d1,obRender(a0)
00016660 6000 FEA4                  		bra.w	@loadframe
00016664                            
00016664                            ; End of function Sonic_Animate
00016664                            ; End of function Sonic_Animate
00016664                            		include	"_anim\Sonic.asm"
00016664                            ; ---------------------------------------------------------------------------
00016664                            ; Animation script - Sonic
00016664                            ; ---------------------------------------------------------------------------
00016664                            Ani_Sonic:
00016664                            
00016664 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016666 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016668 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001666A 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001666C 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001666E 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016670 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016672 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016674 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016676 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016678 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001667A 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001667C 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001667E 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016680 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016682 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016684 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016686 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016688 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
0001668A 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
0001668C 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
0001668E 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016690 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016692 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016694 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
00016696 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00016698 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
0001669A 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
0001669C 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
0001669E 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000166A0 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000166A2 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000166A4 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000166A6 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000166A8 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000166AA 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000166AC 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000166AE 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000166B0                            
000166B0 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000166BE 00                         		even
000166BE FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000166CC 00                         		even
000166CC FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000166D3 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000166DA 00                         		even
000166DA FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000166E1 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000166E8 00                         		even
000166E8 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
000166F6 00                         		even
000166F6                            SonAni_Wait:	
000166F6 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016705 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016714 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016723 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016732 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016741 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016750 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
0001675F 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
0001676E 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
00016776                            		even
00016776 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
0001677C                            		even
0001677C 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016782 00                         		even
00016782 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
00016788                            		even
00016788 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
0001678C 00                         		even
0001678C 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016790 00                         		even
00016790 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
00016794 00                         		even
00016794 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016798 00                         		even
00016798 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000167A2                            		even
000167A2 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000167A8 00                         		even
000167A8 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000167B2 00                         		even
000167B2 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000167BC 00                         		even
000167BC 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000167C0                            		even
000167C0 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000167C6                            		even
000167C6 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
000167CC 00                         		even
000167CC 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000167D0 00                         		even
000167D0 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
000167D8 00                         		even
000167D8 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
000167DC 00                         		even
000167DC 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
000167E0 00                         		even
000167E0 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
000167E4 00                         		even
000167E4 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
000167E8 00                         		even
000167E8                            SonAni_WaterSlide:
000167E8 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
000167EC                            		even
000167EC 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
000167F0                            		even
000167F0 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
000167F8 00                         		even
000167F8 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
000167FC                            		even
000167FC FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001680A 00                         		even
0001680A 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016816                            		even
00016816 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
0001681A                            		even
0001681A 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
0001681E                            		even
0001681E 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016822                            		even
00016822 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
0001682C 00                         		even
0001682C 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016835 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
0001683D 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016844 3334 35                    		dc.b	$33, $34, $35
00016847 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
0001684E                            		even
0001684E 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016854                            		even
00016854                            
00016854                            
00016854 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016854 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016854 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016854 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016854 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016854 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016854 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016854 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016854 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016854 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016854 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016854 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016854 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016854 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016854 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016854 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016854 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016854 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016854 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016854 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016854 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016854 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016854 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016854 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016854 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016854 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016854 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016854 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016854 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016854 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016854 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016854 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016854 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016854 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016854 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016854 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016854 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016854 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016854 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016854                            		include	"_incObj\Sonic LoadGfx.asm"
00016854                            ; ---------------------------------------------------------------------------
00016854                            ; Sonic	graphics loading subroutine
00016854                            ; ---------------------------------------------------------------------------
00016854                            
00016854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016854                            
00016854                            
00016854                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016854 7000                       		moveq	#0,d0
00016856 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001685A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001685E 6700                       		beq.s	locret_13C96
00016860 11C0 F766                  		move.b	d0,($FFFFF766).w
00016864 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001686A D040                       		add.w	d0,d0
0001686C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016870 7A00                       		moveq	#0,d5
00016872 1A1A                       		move.b	(a2)+,d5
00016874 5345                       		subq.w	#1,d5
00016876 6B00                       		bmi.s	locret_13C96
00016878 383C F000                  		move.w	#$F000,d4
0001687C 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016882                            
00016882                            SPLC_ReadEntry:
00016882 7200                       		moveq	#0,d1
00016884 121A                       		move.b	(a2)+,d1
00016886 E149                       		lsl.w	#8,d1
00016888 121A                       		move.b	(a2)+,d1
0001688A 3601                       		move.w	d1,d3
0001688C E04B                       		lsr.w	#8,d3
0001688E 0243 00F0                  		andi.w	#$F0,d3
00016892 0643 0010                  		addi.w	#$10,d3
00016896 0241 0FFF                  		andi.w	#$FFF,d1
0001689A EB89                       		lsl.l	#5,d1
0001689C D286                       		add.l	d6,d1
0001689E 3404                       		move.w	d4,d2
000168A0 D843                       		add.w	d3,d4
000168A2 D843                       		add.w	d3,d4
000168A4 4EB9 0000 1426             		jsr	(QueueDMATransfer).l
000168AA 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000168AE                            
000168AE                            locret_13C96:
000168AE 4E75                       		rts	
000168B0                            ; End of function Sonic_LoadGfx
000168B0                            ; End of function Sonic_LoadGfx
000168B0                            
000168B0                            		include	"_incObj\0A Drowning Countdown.asm"
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000168B0                            ; Sonic's mouth (LZ)
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            DrownCount:
000168B0 7000                       		moveq	#0,d0
000168B2 1028 0024                  		move.b	obRoutine(a0),d0
000168B6 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000168BA 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000168BE                            ; ===========================================================================
000168BE                            Drown_Index:
000168BE 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000168C0 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000168C2 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000168C4 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000168C6 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000168C8 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000168CA 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000168CC 0000                       			dc.w Drown_Display-Drown_Index
000168CE 0000                       			dc.w Drown_Delete-Drown_Index
000168D0                            
000168D0 =00000030                  drown_origX:		equ $30		; original x-axis position
000168D0 =00000038                  drown_time:		equ $38		; time between each number changes
000168D0                            
000168D0 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
000168D0 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
000168D0 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
000168D0 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
000168D0 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
000168D0 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
000168D0 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
000168D0                            ; ===========================================================================
000168D0                            
000168D0                            Drown_Main:	; Routine 0
000168D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000168D4 217C 0001 4C8E 0004        		move.l	#Map_Bub,obMap(a0)
000168DC 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000168E2 117C 0084 0001             		move.b	#$84,obRender(a0)
000168E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000168EE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000168F4 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000168F8 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
000168FA                            
000168FA 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
000168FE 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016906 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001690C 0240 007F                  		andi.w	#$7F,d0
00016910 1140 0033                  		move.b	d0,$33(a0)
00016914 6000 0000                  		bra.w	Drown_Countdown
00016918                            ; ===========================================================================
00016918                            
00016918                            @smallbubble:
00016918 1140 001C                  		move.b	d0,obAnim(a0)
0001691C 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016922 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016928                            
00016928                            Drown_Animate:	; Routine 2
00016928 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001692E 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00016934                            
00016934                            Drown_ChkWater:	; Routine 4
00016934 3038 F646                  		move.w	(v_waterpos1).w,d0
00016938 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
0001693C 6500                       		bcs.s	@wobble		; if not, branch
0001693E                            
0001693E 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016944 5E28 001C                  		addq.b	#7,obAnim(a0)
00016948 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
0001694E 6700                       		beq.s	Drown_Display
00016950 6000                       		bra.s	Drown_Display
00016952                            ; ===========================================================================
00016952                            
00016952                            @wobble:
00016952 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016956 6700                       		beq.s	@notunnel	; if not, branch
00016958 5868 0030                  		addq.w	#4,drown_origX(a0)
0001695C                            
0001695C                            	@notunnel:
0001695C 1028 0026                  		move.b	obAngle(a0),d0
00016960 5228 0026                  		addq.b	#1,obAngle(a0)
00016964 0240 007F                  		andi.w	#$7F,d0
00016968 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
0001696E 1031 0000                  		move.b	(a1,d0.w),d0
00016972 4880                       		ext.w	d0
00016974 D068 0030                  		add.w	drown_origX(a0),d0
00016978 3140 0008                  		move.w	d0,obX(a0)
0001697C 6100                       		bsr.s	Drown_ShowNumber
0001697E 4EB9 0000 F832             		jsr	(SpeedToPos).l
00016984 4A28 0001                  		tst.b	obRender(a0)
00016988 6A00                       		bpl.s	@delete
0001698A 4EF9 0000 F846             		jmp	(DisplaySprite).l
00016990                            
00016990                            	@delete:
00016990 4EF9 0000 F886             		jmp	(DeleteObject).l
00016996                            ; ===========================================================================
00016996                            
00016996                            Drown_Display:	; Routine 6, Routine $E
00016996 6100                       		bsr.s	Drown_ShowNumber
00016998 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001699E 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
000169A4 4EF9 0000 F846             		jmp	(DisplaySprite).l
000169AA                            ; ===========================================================================
000169AA                            
000169AA                            Drown_Delete:	; Routine 8, Routine $10
000169AA 4EF9 0000 F886             		jmp	(DeleteObject).l
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            Drown_AirLeft:	; Routine $C
000169B0 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
000169B6 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
000169B8 5368 0038                  		subq.w	#1,drown_time(a0)
000169BC 6600                       		bne.s	@display
000169BE 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
000169C4 5E28 001C                  		addq.b	#7,obAnim(a0)
000169C8 60CC                       		bra.s	Drown_Display
000169CA                            ; ===========================================================================
000169CA                            
000169CA                            	@display:
000169CA 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000169D0 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
000169D6 4A28 0001                  		tst.b	obRender(a0)
000169DA 6A00                       		bpl.s	Drown_AirLeft_Delete
000169DC 4EF9 0000 F846             		jmp	(DisplaySprite).l
000169E2                            
000169E2                            Drown_AirLeft_Delete:	
000169E2 4EF9 0000 F886             		jmp	(DeleteObject).l
000169E8                            ; ===========================================================================
000169E8                            
000169E8                            Drown_ShowNumber:
000169E8 4A68 0038                  		tst.w	drown_time(a0)
000169EC 6700                       		beq.s	@nonumber
000169EE 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000169F2 6600                       		bne.s	@nonumber	; if time remains, branch
000169F4 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000169FA 6400                       		bcc.s	@nonumber
000169FC                            
000169FC 317C 000F 0038             		move.w	#15,drown_time(a0)
00016A02 4268 0012                  		clr.w	obVelY(a0)
00016A06 117C 0080 0001             		move.b	#$80,obRender(a0)
00016A0C 3028 0008                  		move.w	obX(a0),d0
00016A10 9078 F700                  		sub.w	(v_screenposx).w,d0
00016A14 0640 0080                  		addi.w	#$80,d0
00016A18 3140 0008                  		move.w	d0,obX(a0)
00016A1C 3028 000C                  		move.w	obY(a0),d0
00016A20 9078 F704                  		sub.w	(v_screenposy).w,d0
00016A24 0640 0080                  		addi.w	#$80,d0
00016A28 3140 000A                  		move.w	d0,obScreenY(a0)
00016A2C 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016A32                            
00016A32                            	@nonumber:
00016A32 4E75                       		rts	
00016A34                            ; ===========================================================================
00016A34                            Drown_WobbleData:
00016A34 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016A44 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016A54 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016A64 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016A74 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016A84 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016A94 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016AA4 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016AB4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016AC4 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016AD4 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016AE4 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016AF4 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016B04 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016B14 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016B24 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016B34                            ; ===========================================================================
00016B34                            
00016B34                            Drown_Countdown:; Routine $A
00016B34 4A68 002C                  		tst.w	$2C(a0)
00016B38 6600 0000                  		bne.w	@loc_13F86
00016B3C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016B42 6400 0000                  		bcc.w	@nocountdown
00016B46 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016B4C 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016B50                            
00016B50 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B54 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016B58 317C 003B 0038             		move.w	#59,drown_time(a0)
00016B5E 317C 0001 0036             		move.w	#1,$36(a0)
00016B64 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016B6A 0240 0001                  		andi.w	#1,d0
00016B6E 1140 0034                  		move.b	d0,$34(a0)
00016B72 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016B76 0C40 0019                  		cmpi.w	#25,d0
00016B7A 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016B7C 0C40 0014                  		cmpi.w	#20,d0
00016B80 6700                       		beq.s	@warnsound
00016B82 0C40 000F                  		cmpi.w	#15,d0
00016B86 6700                       		beq.s	@warnsound
00016B88 0C40 000C                  		cmpi.w	#12,d0
00016B8C 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016B8E                            
00016B8E                            	@skipmusic:
00016B98 5328 0032                  		subq.b	#1,$32(a0)
00016B9C 6A00                       		bpl.s	@reduceair
00016B9E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016BA4 08E8 0007 0036             		bset	#7,$36(a0)
00016BAA 6000                       		bra.s	@reduceair
00016BAC                            ; ===========================================================================
00016BAC                            
00016BAC                            @warnsound:
00016BB6                            
00016BB6                            @reduceair:
00016BB6 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016BBA 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016BBE                            
00016BBE                            		; Sonic drowns here
00016BBE 6100 0000                  		bsr.w	ResumeMusic
00016BC2 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016BD2 117C 000A 0034             		move.b	#$A,$34(a0)
00016BD8 317C 0001 0036             		move.w	#1,$36(a0)
00016BDE 317C 0078 002C             		move.w	#$78,$2C(a0)
00016BE4 2F08                       		move.l	a0,-(sp)
00016BE6 41F8 D000                  		lea	(v_player).w,a0
00016BEA 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016BEE 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016BF4 08E8 0001 0022             		bset	#1,obStatus(a0)
00016BFA 08E8 0007 0002             		bset	#7,obGfx(a0)
00016C00 317C 0000 0012             		move.w	#0,obVelY(a0)
00016C06 317C 0000 0010             		move.w	#0,obVelX(a0)
00016C0C 317C 0000 0020             		move.w	#0,obInertia(a0)
00016C12 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016C18 205F                       		movea.l	(sp)+,a0
00016C1A 4E75                       		rts	
00016C1C                            ; ===========================================================================
00016C1C                            
00016C1C                            @loc_13F86:
00016C1C 5368 002C                  		subq.w	#1,$2C(a0)
00016C20 6600                       		bne.s	@loc_13F94
00016C22 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016C28 4E75                       		rts	
00016C2A                            ; ===========================================================================
00016C2A                            
00016C2A                            	@loc_13F94:
00016C2A 2F08                       		move.l	a0,-(sp)
00016C2C 41F8 D000                  		lea	(v_player).w,a0
00016C30 4EB9 0000 F832             		jsr	(SpeedToPos).l
00016C36 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016C3C 205F                       		movea.l	(sp)+,a0
00016C3E 6000                       		bra.s	@nochange
00016C40                            ; ===========================================================================
00016C40                            
00016C40                            @gotomakenum:
00016C40 6000                       		bra.s	@makenum
00016C42                            ; ===========================================================================
00016C42                            
00016C42                            @nochange:
00016C42 4A68 0036                  		tst.w	$36(a0)
00016C46 6700 0000                  		beq.w	@nocountdown
00016C4A 5368 003A                  		subq.w	#1,$3A(a0)
00016C4E 6A00 0000                  		bpl.w	@nocountdown
00016C52                            
00016C52                            @makenum:
00016C52 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016C58 0240 000F                  		andi.w	#$F,d0
00016C5C 3140 003A                  		move.w	d0,$3A(a0)
00016C60 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
00016C66 6600 0000                  		bne.w	@nocountdown
00016C6A 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016C6E 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016C74 7006                       		moveq	#6,d0
00016C76 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016C7C 6700                       		beq.s	@noflip
00016C7E 4440                       		neg.w	d0
00016C80 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016C86                            
00016C86                            	@noflip:
00016C86 D169 0008                  		add.w	d0,obX(a1)
00016C8A 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016C90 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016C96 4A68 002C                  		tst.w	$2C(a0)
00016C9A 6700 0000                  		beq.w	@loc_1403E
00016C9E 0268 0007 003A             		andi.w	#7,$3A(a0)
00016CA4 0668 0000 003A             		addi.w	#0,$3A(a0)
00016CAA 3038 D00C                  		move.w	(v_player+obY).w,d0
00016CAE 0440 000C                  		subi.w	#$C,d0
00016CB2 3340 000C                  		move.w	d0,obY(a1)
00016CB6 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016CBC 1340 0026                  		move.b	d0,obAngle(a1)
00016CC0 3038 FE04                  		move.w	(v_framecount).w,d0
00016CC4 0200 0003                  		andi.b	#3,d0
00016CC8 6600                       		bne.s	@loc_14082
00016CCA 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016CD0 6000                       		bra.s	@loc_14082
00016CD2                            ; ===========================================================================
00016CD2                            
00016CD2                            @loc_1403E:
00016CD2 0828 0007 0036             		btst	#7,$36(a0)
00016CD8 6700                       		beq.s	@loc_14082
00016CDA 3438 FE14                  		move.w	(v_air).w,d2
00016CDE E24A                       		lsr.w	#1,d2
00016CE0 4EB9 0000 3A0C             		jsr	(RandomNumber).l
00016CE6 0240 0003                  		andi.w	#3,d0
00016CEA 6600                       		bne.s	@loc_1406A
00016CEC 08E8 0006 0036             		bset	#6,$36(a0)
00016CF2 6600                       		bne.s	@loc_14082
00016CF4 1342 0028                  		move.b	d2,obSubtype(a1)
00016CF8 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016CFE                            
00016CFE                            	@loc_1406A:
00016CFE 4A28 0034                  		tst.b	$34(a0)
00016D02 6600                       		bne.s	@loc_14082
00016D04 08E8 0006 0036             		bset	#6,$36(a0)
00016D0A 6600                       		bne.s	@loc_14082
00016D0C 1342 0028                  		move.b	d2,obSubtype(a1)
00016D10 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016D16                            
00016D16                            @loc_14082:
00016D16 5328 0034                  		subq.b	#1,$34(a0)
00016D1A 6A00                       		bpl.s	@nocountdown
00016D1C 4268 0036                  		clr.w	$36(a0)
00016D20                            
00016D20                            @nocountdown:
00016D20 4E75                       		rts	
00016D20 4E75                       		rts	
00016D22                            
00016D22                            
00016D22                            ; ---------------------------------------------------------------------------
00016D22                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016D22                            ; ---------------------------------------------------------------------------
00016D22                            
00016D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016D22                            
00016D22                            
00016D22                            ResumeMusic:
00016D22                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016D22                            		;bhi.s	@over12		; if yes, branch
00016D22                            		;move.b	(v_Saved_music),d0
00016D22                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016D22                            		;beq.s	@notinvinc ; if not, branch
00016D22                            		;move.w	#bgm_Invincible,d0
00016D22                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016D22                            		;beq.s	@notinvinc	; if not, branch
00016D22                            		;move.w	#bgm_Ending,d0
00016D22                            
00016D22                            	;@notinvinc:
00016D22                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016D22                            		;beq.s	@playselected ; if not, branch
00016D22                            		;move.w	#bgm_Boss,d0
00016D22                            
00016D22                            	;@playselected:
00016D22                            		;jsr	(PlaySound).l
00016D22                            
00016D22                            	;@over12:
00016D22 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016D28 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016D2C 4E75                       		rts	
00016D2E                            
00016D2E                            ;End of function ResumeMusic
00016D2E                            
00016D2E                            ; ===========================================================================
00016D2E                            
00016D2E                            		include	"_anim\Drowning Countdown.asm"
00016D2E                            ; ---------------------------------------------------------------------------
00016D2E                            ; Animation script - countdown numbers and bubbles (LZ)
00016D2E                            ; ---------------------------------------------------------------------------
00016D2E 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016D30 0000                       		dc.w @oneappear-Ani_Drown
00016D32 0000                       		dc.w @twoappear-Ani_Drown
00016D34 0000                       		dc.w @threeappear-Ani_Drown
00016D36 0000                       		dc.w @fourappear-Ani_Drown
00016D38 0000                       		dc.w @fiveappear-Ani_Drown
00016D3A 0000                       		dc.w @smallbubble-Ani_Drown
00016D3C 0000                       		dc.w @zeroflash-Ani_Drown
00016D3E 0000                       		dc.w @oneflash-Ani_Drown
00016D40 0000                       		dc.w @twoflash-Ani_Drown
00016D42 0000                       		dc.w @threeflash-Ani_Drown
00016D44 0000                       		dc.w @fourflash-Ani_Drown
00016D46 0000                       		dc.w @fiveflash-Ani_Drown
00016D48 0000                       		dc.w @blank-Ani_Drown
00016D4A 0000                       		dc.w @mediumbubble-Ani_Drown
00016D4C 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016D56 00                         		even
00016D56 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016D60 00                         		even
00016D60 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016D6A 00                         		even
00016D6A 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016D74 00                         		even
00016D74 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016D7E 00                         		even
00016D7E 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016D88 00                         		even
00016D88 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016D8E 00                         		even
00016D8E 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016D96 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016D9E 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016DA6 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016DAE 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016DB6 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016DBE 0EFC                       @blank:		dc.b $E, afRoutine
00016DC0 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016DC6                            		even
00016DC6                            		even
00016DC6                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016DC6                            ; ---------------------------------------------------------------------------
00016DC6                            ; Sprite mappings - drowning countdown numbers (LZ)
00016DC6                            ; ---------------------------------------------------------------------------
00016DC6                            Map_Drown_internal:
00016DC6 0000                       		dc.w @num-Map_Drown_internal
00016DC8 01                         @num:		dc.b 1
00016DC9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016DCE                            		even
00016DCE                            		even
00016DCE                            
00016DCE                            		include	"_incObj\4E Silver Shield.asm"
00016DCE                            ; ---------------------------------------------------------------------------
00016DCE                            ; Object 4E - Silver Shield
00016DCE                            ; ---------------------------------------------------------------------------
00016DCE                            
00016DCE                            SpShieldItem:
00016DCE 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016DD4 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016DD8                            		; In this case, VRAM = $541*20
00016DD8 363C 0200                  		move.w #$200,d3
00016DDC 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016DE2                            ; ---------------------------------------------------------------------------
00016DE2                            SpShieldObj_Main:
00016DE2 7000                       		moveq #0,d0
00016DE4 1028 0024                  		move.b $24(a0),d0
00016DE8 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016DEC 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016DF0                            ; ===========================================================================
00016DF0                            SpShield_Index:
00016DF0 0000                       		dc.w SpShield_Init-SpShield_Index
00016DF2 0000                       		dc.w SpShieldChecks-SpShield_Index
00016DF4                            ; ===========================================================================
00016DF4                            SpShield_Init:
00016DF4 5428 0024                  		addq.b #2,$24(a0)
00016DF8 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E00 117C 0004 0001             		move.b #4,1(a0)
00016E06 317C 0080 0018             		move.w #$80,$18(a0)
00016E0C 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E12 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016E18 0838 0007 D002             		btst #7,($FFFFD002).w
00016E1E 6700                       		beq.s SpShieldChecks
00016E20 08E8 0007 0002             		bset #7,2(a0)
00016E26                            ; ---------------------------------------------------------------------------
00016E26                            SpShieldChecks:
00016E26 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016E2A 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016E2C 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016E30 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016E32                            SpShieldProperties:
00016E32 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016E38 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016E3E 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016E44 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016E4A 4EB9 0000 C8FA             		jsr AnimateSprite
00016E50 4EFA 89F4                  		jmp DisplaySprite
00016E54                            SpSonicHasShield:
00016E54 4E75                       		rts
00016E56                            Spjmp_DeleteObj38: ; loc_12648:
00016E56 4EFA 8A2E                  		jmp DeleteObject
00016E56 4EFA 8A2E                  		jmp DeleteObject
00016E5A                            		include	"_incObj\04 Gold Shield.asm"
00016E5A                            ; ---------------------------------------------------------------------------
00016E5A                            ; Object 04 - Gold shield
00016E5A                            ; ---------------------------------------------------------------------------
00016E5A                            
00016E5A                            GShieldItem:
00016E5A 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016E60 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016E64                            		; In this case, VRAM = $541*20
00016E64 363C 0200                  		move.w #$200,d3
00016E68 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016E6E                            ; ---------------------------------------------------------------------------
00016E6E                            GShieldObj_Main:
00016E6E 7000                       		moveq #0,d0
00016E70 1028 0024                  		move.b $24(a0),d0
00016E74 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016E78 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016E7C                            ; ===========================================================================
00016E7C                            GShield_Index:
00016E7C 0000                       		dc.w GShield_Init-GShield_Index
00016E7E 0000                       		dc.w GShieldChecks-GShield_Index
00016E80                            ; ===========================================================================
00016E80                            GShield_Init:
00016E80 5428 0024                  		addq.b #2,$24(a0)
00016E84 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016E8C 117C 0004 0001             		move.b #4,1(a0)
00016E92 317C 0080 0018             		move.w #$80,$18(a0)
00016E98 117C 0018 0014             		move.b #$18,obActWid(a0)
00016E9E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016EA4 0838 0007 D002             		btst #7,($FFFFD002).w
00016EAA 6700                       		beq.s GShieldChecks
00016EAC 08E8 0007 0002             		bset #7,2(a0)
00016EB2                            ; ---------------------------------------------------------------------------
00016EB2                            GShieldChecks:
00016EB2 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016EB6 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016EB8 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016EBC 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016EBE                            GShieldProperties:
00016EBE 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016EC4 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016ECA 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016ED0 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016ED6 4EB9 0000 C8FA             		jsr AnimateSprite
00016EDC 4EFA 8968                  		jmp DisplaySprite
00016EE0                            GSonicHasShield:
00016EE0 4E75                       		rts
00016EE2                            Gjmp_DeleteObj38: ; loc_12648:
00016EE2 4EFA 89A2                  		jmp DeleteObject
00016EE2 4EFA 89A2                  		jmp DeleteObject
00016EE6                            		include	"_incObj\07 Red Shield.asm"
00016EE6                            ; ---------------------------------------------------------------------------
00016EE6                            ; Object 07 - red shield
00016EE6                            ; ---------------------------------------------------------------------------
00016EE6                            
00016EE6                            RShieldItem:
00016EE6 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00016EEC 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016EF0                            		; In this case, VRAM = $541*20
00016EF0 363C 0200                  		move.w #$200,d3
00016EF4 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016EFA                            ; ---------------------------------------------------------------------------
00016EFA                            RShieldObj_Main:
00016EFA 7000                       		moveq #0,d0
00016EFC 1028 0024                  		move.b $24(a0),d0
00016F00 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
00016F04 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00016F08                            ; ===========================================================================
00016F08                            RShield_Index:
00016F08 0000                       		dc.w RShield_Init-RShield_Index
00016F0A 0000                       		dc.w RShieldChecks-RShield_Index
00016F0C                            ; ===========================================================================
00016F0C                            RShield_Init:
00016F0C 5428 0024                  		addq.b #2,$24(a0)
00016F10 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F18 117C 0004 0001             		move.b #4,1(a0)
00016F1E 317C 0080 0018             		move.w #$80,$18(a0)
00016F24 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F2A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F30 0838 0007 D002             		btst #7,($FFFFD002).w
00016F36 6700                       		beq.s RShieldChecks
00016F38 08E8 0007 0002             		bset #7,2(a0)
00016F3E                            ; ---------------------------------------------------------------------------
00016F3E                            RShieldChecks:
00016F3E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F42 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
00016F44 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
00016F48 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00016F4A                            RShieldProperties:
00016F4A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F50 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F56 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F5C 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F62 4EB9 0000 C8FA             		jsr AnimateSprite
00016F68 4EFA 88DC                  		jmp DisplaySprite
00016F6C                            RSonicHasShield:
00016F6C 4E75                       		rts
00016F6E                            Rjmp_DeleteObj38: ; loc_12648:
00016F6E 4EFA 8916                  		jmp DeleteObject
00016F6E 4EFA 8916                  		jmp DeleteObject
00016F72                            		include	"_incObj\38 Shield.asm"
00016F72                            ; ---------------------------------------------------------------------------
00016F72                            ; Object 38 - shield
00016F72                            ; ---------------------------------------------------------------------------
00016F72                            
00016F72                            ShieldItem:
00016F72 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
00016F78 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F7C                            		; In this case, VRAM = $541*20
00016F7C 363C 0200                  		move.w #$200,d3
00016F80 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            ShieldObj_Main:
00016F86 7000                       		moveq #0,d0
00016F88 1028 0024                  		move.b $24(a0),d0
00016F8C 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
00016F90 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
00016F94                            ; ===========================================================================
00016F94                            Shield_Index:
00016F94 0000                       		dc.w Shield_Init-Shield_Index
00016F96 0000                       		dc.w ShieldChecks-Shield_Index
00016F98                            ; ===========================================================================
00016F98                            Shield_Init:
00016F98 5428 0024                  		addq.b #2,$24(a0)
00016F9C 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FA4 117C 0004 0001             		move.b #4,1(a0)
00016FAA 317C 0080 0018             		move.w #$80,$18(a0)
00016FB0 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FB6 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FBC 0838 0007 D002             		btst #7,($FFFFD002).w
00016FC2 6700                       		beq.s ShieldChecks
00016FC4 08E8 0007 0002             		bset #7,2(a0)
00016FCA                            ; ---------------------------------------------------------------------------
00016FCA                            ShieldChecks:
00016FCA 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FCE 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00016FD0 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
00016FD4 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
00016FD6                            ShieldProperties:
00016FD6 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FDC 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016FE2 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016FE8 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016FEE 4EB9 0000 C8FA             		jsr AnimateSprite
00016FF4 4EFA 8850                  		jmp DisplaySprite
00016FF8                            SonicHasShield:
00016FF8 4E75                       		rts
00016FFA                            jmp_DeleteObj38: ; loc_12648:
00016FFA 4EFA 888A                  		jmp DeleteObject
00016FFA 4EFA 888A                  		jmp DeleteObject
00016FFE                            		include	"_incObj\19 Invincibility Stars.asm"		
00016FFE                            ; ---------------------------------------------------------------------------
00016FFE                            ; Object 19 - Invincibility Stars
00016FFE                            ; ---------------------------------------------------------------------------
00016FFE                            
00016FFE                            InvStarsObj:
00016FFE 223C 0000 0000             		move.l #Unc_Stars,d1
00017004 343C A820                  		move.w #$A820,d2
00017008 363C 0200                  		move.w #$200,d3
0001700C 4EB9 0000 1426             		jsr (QueueDMATransfer).l
00017012                            Invincibility_Main:
00017012 7000                       		moveq #0,d0
00017014 1028 0024                  		move.b $24(a0),d0
00017018                            Invincibility_Init:
00017018 5428 0024                  		addq.b #2,$24(a0)
0001701C 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
00017024 117C 0004 0001             		move.b #4,1(a0)
0001702A 317C 0080 0018             		move.w #$80,$18(a0)
00017030 117C 0010 0014             		move.b #$10,obActWid(a0)
00017036 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            Obj19_Stars: ; XREF: Obj38_Index
0001703C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017040 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017042 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
00017046 1228 001C                  		move.b $1C(a0),d1
0001704A 5301                       		subq.b #1,d1
0001704C 6000                       		bra.s Obj19_StarTrail
0001704E                            ; ===========================================================================
0001704E E909                       		lsl.b #4,d1
00017050 5801                       		addq.b #4,d1
00017052 9001                       		sub.b d1,d0
00017054 1228 0030                  		move.b $30(a0),d1
00017058 9001                       		sub.b d1,d0
0001705A 5801                       		addq.b #4,d1
0001705C 0201 000F                  		andi.b #$F,d1
00017060 1141 0030                  		move.b d1,$30(a0)
00017064 6000                       		bra.s Obj19_StarTrail2a
00017066                            ; ===========================================================================
00017066                            
00017066                            Obj19_StarTrail: ; XREF: Obj19_Stars
00017066 E709                       		lsl.b #3,d1
00017068 1401                       		move.b d1,d2
0001706A D201                       		add.b d1,d1
0001706C D202                       		add.b d2,d1
0001706E 5801                       		addq.b #4,d1
00017070 9001                       		sub.b d1,d0
00017072 1228 0030                  		move.b $30(a0),d1
00017076 9001                       		sub.b d1,d0
00017078 5801                       		addq.b #4,d1
0001707A 0C01 0018                  		cmpi.b #$18,d1
0001707E 6500                       		bcs.s Obj19_StarTrail2
00017080 7200                       		moveq #0,d1
00017082                            
00017082                            Obj19_StarTrail2:
00017082 1141 0030                  		move.b d1,$30(a0)
00017086                            
00017086                            Obj19_StarTrail2a:
00017086 43F8 CB00                  		lea ($FFFFCB00).w,a1
0001708A 43F1 0000                  		lea (a1,d0.w),a1
0001708E 3159 0008                  		move.w (a1)+,8(a0)
00017092 3159 000C                  		move.w (a1)+,$C(a0)
00017096 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
0001709C 43F9 0000 0000             		lea (Ani_Shield).l,a1
000170A2 4EB9 0000 C8FA             		jsr (AnimateSprite).l
000170A8 4EF9 0000 F846             		jmp (DisplaySprite).l
000170AE                            ; ===========================================================================
000170AE                            
000170AE                            Obj19_Delete2: ; XREF: Obj19_Stars
000170AE 4EF9 0000 F886             		jmp (DeleteObject).l
000170AE 4EF9 0000 F886             		jmp (DeleteObject).l
000170B4                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000170B4                            ; ---------------------------------------------------------------------------
000170B4                            ; Object 4A - special stage entry from beta
000170B4                            ; ---------------------------------------------------------------------------
000170B4                            
000170B4                            VanishSonic:
000170B4 7000                       		moveq	#0,d0
000170B6 1028 0024                  		move.b	obRoutine(a0),d0
000170BA 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000170BE 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000170C2                            ; ===========================================================================
000170C2 0000                       Van_Index:	dc.w Van_Main-Van_Index
000170C4 0000                       		dc.w Van_RmvSonic-Van_Index
000170C6 0000                       		dc.w Van_LoadSonic-Van_Index
000170C8                            
000170C8 =00000030                  van_time:	equ $30		; time for Sonic to disappear
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            Van_Main:	; Routine 0
000170C8 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000170CC 6700                       		beq.s	@isempty	; if yes, branch
000170CE 4E75                       		rts	
000170D0                            
000170D0                            	@isempty:
000170D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000170D4 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000170DC 117C 0004 0001             		move.b	#4,obRender(a0)
000170E2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000170E8 117C 0038 0014             		move.b	#$38,obActWid(a0)
000170EE 317C 0541 0002             		move.w	#$541,obGfx(a0)
000170F4 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000170FA                            
000170FA                            Van_RmvSonic:	; Routine 2
000170FA 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017100 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00017106 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
0001710C 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017112 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00017118 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001711E 6600                       		bne.s	@display
00017120 4A38 D000                  		tst.b	(v_player).w
00017124 6700                       		beq.s	@display
00017126 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017136                            
00017136                            	@display:
00017136 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001713C                            ; ===========================================================================
0001713C                            
0001713C                            Van_LoadSonic:	; Routine 4
0001713C 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017140 6600                       		bne.s	@wait		; if time remains, branch
00017142 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017148 4EF9 0000 F886             		jmp	(DeleteObject).l
0001714E                            
0001714E                            	@wait:
0001714E 4E75                       		rts	
0001714E 4E75                       		rts	
00017150                            		include	"_incObj\08 Water Splash.asm"
00017150                            ; ---------------------------------------------------------------------------
00017150                            ; Object 08 - water splash (LZ)
00017150                            ; ---------------------------------------------------------------------------
00017150                            
00017150                            Splash:
00017150 7000                       		moveq	#0,d0
00017152 1028 0024                  		move.b	obRoutine(a0),d0
00017156 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
0001715A 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
0001715E                            ; ===========================================================================
0001715E 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017160 0000                       		dc.w Spla_Display-Spla_Index
00017162 0000                       		dc.w Spla_Delete-Spla_Index
00017164                            ; ===========================================================================
00017164                            
00017164                            Spla_Main:    ; Routine 0
00017164 5428 0024                          addq.b    #2,obRoutine(a0)
00017168 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017170 0028 0004 0001                     ori.b    #4,obRender(a0)
00017176 117C 0001 0018                     move.b    #1,obPriority(a0)
0001717C 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017182 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017188 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
0001718E                            
0001718E                            Spla_Display:    ; Routine 2
0001718E                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
0001718E 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017194 43F9 0000 0000                     lea    (Ani_Splash).l,a1
0001719A 4EB9 0000 C8FA                     jsr    (AnimateSprite).l
000171A0 4EF9 0000 F846                     jmp    (DisplaySprite).l
000171A6                            ; ===========================================================================
000171A6                            
000171A6                            Spla_Delete:	; Routine 4
000171A6 4EF9 0000 F886             		jmp	(DeleteObject).l	; delete when animation	is complete
000171A6 4EF9 0000 F886             		jmp	(DeleteObject).l	; delete when animation	is complete
000171AC                            		include	"_anim\Shield and Invincibility.asm"
000171AC                            ; ---------------------------------------------------------------------------
000171AC                            ; Animation script - shield and invincibility stars
000171AC                            ; ---------------------------------------------------------------------------
000171AC 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000171AE 0000                       		dc.w @stars1-Ani_Shield
000171B0 0000                       		dc.w @stars2-Ani_Shield
000171B2 0000                       		dc.w @stars3-Ani_Shield
000171B4 0000                       		dc.w @stars4-Ani_Shield
000171B6 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000171BE 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000171C4 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000171D5 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
000171DE 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000171EF 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
000171F8 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00017209 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017212                            		even
00017212                            		even
00017212                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017212                            ; --------------------------------------------------------------------------------
00017212                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017212                            ; --------------------------------------------------------------------------------
00017212                            
00017212                            SME_7M_8q:	
00017212 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
00017216 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
0001721A 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
0001721E 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017222 00                         SME_7M_8q_10:	dc.b 0	
00017223 04                         SME_7M_8q_11:	dc.b 4	
00017224 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017229 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001722E 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017233 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017238 04                         SME_7M_8q_26:	dc.b 4	
00017239 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
0001723E E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017243 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
00017248 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
0001724D 04                         SME_7M_8q_3B:	dc.b 4	
0001724E E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017253 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017258 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
0001725D 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017262 04                         SME_7M_8q_50:	dc.b 4	
00017263 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017268 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
0001726D 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017272 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017277 04                         SME_7M_8q_65:	dc.b 4	
00017278 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
0001727D E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
00017282 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017287 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001728C 04                         SME_7M_8q_7A:	dc.b 4	
0001728D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
00017292 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
00017297 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
0001729C 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000172A1 04                         SME_7M_8q_8F:	dc.b 4	
000172A2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000172A7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000172AC 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000172B1 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000172B6                            		even
000172B6                            		even
000172B6                            Map_Shield2:	include	"_maps\Shield 2.asm"
000172B6                            ; --------------------------------------------------------------------------------
000172B6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000172B6                            ; --------------------------------------------------------------------------------
000172B6                            
000172B6                            SME_X5P7B:	
000172B6 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000172BA 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000172BE 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000172C2 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000172C6 00                         SME_X5P7B_10:	dc.b 0	
000172C7 04                         SME_X5P7B_11:	dc.b 4	
000172C8 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000172CD E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000172D2 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000172D7 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000172DC 04                         SME_X5P7B_26:	dc.b 4	
000172DD E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000172E2 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000172E7 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000172EC 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000172F1 04                         SME_X5P7B_3B:	dc.b 4	
000172F2 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000172F7 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000172FC 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017301 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017306 04                         SME_X5P7B_50:	dc.b 4	
00017307 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
0001730C E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017311 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017316 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001731B 04                         SME_X5P7B_65:	dc.b 4	
0001731C E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017321 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017326 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001732B 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017330 04                         SME_X5P7B_7A:	dc.b 4	
00017331 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017336 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
0001733B 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017340 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017345 04                         SME_X5P7B_8F:	dc.b 4	
00017346 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
0001734B E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017350 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017355 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
0001735A                            		even
0001735A                            		even
0001735A                            
0001735A                            Map_Shield3:	include	"_maps\Shield 3.asm"
0001735A                            ; --------------------------------------------------------------------------------
0001735A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001735A                            ; --------------------------------------------------------------------------------
0001735A                            
0001735A                            SME__wWzO:	
0001735A 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
0001735E 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017362 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
00017366 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
0001736A 00                         SME__wWzO_10:	dc.b 0	
0001736B 04                         SME__wWzO_11:	dc.b 4	
0001736C E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017371 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017376 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001737B 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017380 04                         SME__wWzO_26:	dc.b 4	
00017381 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017386 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001738B 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017390 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017395 04                         SME__wWzO_3B:	dc.b 4	
00017396 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001739B E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000173A0 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000173A5 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000173AA 04                         SME__wWzO_50:	dc.b 4	
000173AB E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000173B0 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000173B5 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000173BA 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000173BF 04                         SME__wWzO_65:	dc.b 4	
000173C0 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000173C5 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000173CA 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000173CF 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000173D4 04                         SME__wWzO_7A:	dc.b 4	
000173D5 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
000173DA E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
000173DF 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
000173E4 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
000173E9 04                         SME__wWzO_8F:	dc.b 4	
000173EA E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000173EF E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000173F4 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000173F9 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000173FE                            		even
000173FE                            		even
000173FE                            		include	"_anim\Special Stage Entry (Unused).asm"
000173FE                            ; ---------------------------------------------------------------------------
000173FE                            ; Animation script - special stage entry effect from beta
000173FE                            ; ---------------------------------------------------------------------------
000173FE 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017400 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017414                            		even
00017414                            		even
00017414                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017414                            ; ---------------------------------------------------------------------------
00017414                            ; Sprite mappings - special stage entry	from beta
00017414                            ; ---------------------------------------------------------------------------
00017414                            Map_Vanish_internal:
00017414 0000                       		dc.w @flash1-Map_Vanish_internal
00017416 0000                       		dc.w @flash2-Map_Vanish_internal
00017418 0000                       		dc.w @flash3-Map_Vanish_internal
0001741A 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001741C 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001741E 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017420 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017422 0000                       		dc.w @blank-Map_Vanish_internal
00017424 03                         @flash1:	dc.b 3
00017425 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001742A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001742F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017434 03                         @flash2:	dc.b 3
00017435 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001743A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001743F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017444 05                         @flash3:	dc.b 5
00017445 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001744A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001744F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00017454 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017459 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001745E 09                         @sparkle1:	dc.b 9
0001745F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00017464 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00017469 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001746E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00017473 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00017478 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001747D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017482 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00017487 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001748C 12                         @sparkle2:	dc.b $12
0001748D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00017492 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00017497 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001749C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000174A1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000174A6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000174AB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000174B0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000174B5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000174BA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000174BF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000174C4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000174C9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000174CE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000174D3 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000174D8 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000174DD 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000174E2 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000174E7 11                         @sparkle3:	dc.b $11
000174E8 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000174ED F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000174F2 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000174F7 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000174FC 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017501 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017506 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001750B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017510 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017515 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001751A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001751F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017524 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017529 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001752E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017533 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017538 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001753D 09                         @sparkle4:	dc.b 9
0001753E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017543 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017548 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001754D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017552 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00017557 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001755C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017561 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00017566 04                         		dc.b 4
00017567 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
0001756C                            		even
0001756C                            		even
0001756C                            		include	"_anim\Water Splash.asm"
0001756C                            ; ---------------------------------------------------------------------------
0001756C                            ; Animation script - water splash (LZ)
0001756C                            ; ---------------------------------------------------------------------------
0001756C 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
0001756E 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00017574 00                         		even
00017574 00                         		even
00017574                            Map_Splash:	include	"_maps\Water Splash.asm"
00017574                            ; ---------------------------------------------------------------------------
00017574                            ; Sprite mappings - water splash (LZ)
00017574                            ; ---------------------------------------------------------------------------
00017574                            Map_Splash_internal:
00017574 0000                       		dc.w @splash1-Map_Splash_internal
00017576 0000                       		dc.w @splash2-Map_Splash_internal
00017578 0000                       		dc.w @splash3-Map_Splash_internal
0001757A 02                         @splash1:	dc.b 2
0001757B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00017580 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00017585 02                         @splash2:	dc.b 2
00017586 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001758B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00017590 01                         @splash3:	dc.b 1
00017591 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00017596                            		even
00017596                            		even
00017596                            
00017596                            		include	"_incObj\Sonic AnglePos.asm"
00017596                            ; ---------------------------------------------------------------------------
00017596                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00017596                            ; ---------------------------------------------------------------------------
00017596                            
00017596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017596                            
00017596                            
00017596                            Sonic_AnglePos:
00017596 0828 0003 0022             		btst	#3,obStatus(a0)
0001759C 6700                       		beq.s	loc_14602
0001759E 7000                       		moveq	#0,d0
000175A0 11C0 F768                  		move.b	d0,($FFFFF768).w
000175A4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000175A8 4E75                       		rts	
000175AA                            ; ===========================================================================
000175AA                            
000175AA                            loc_14602:
000175AA 7003                       		moveq	#3,d0
000175AC 11C0 F768                  		move.b	d0,($FFFFF768).w
000175B0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000175B4 1028 0026                  		move.b	obAngle(a0),d0
000175B8 0600 0020                  		addi.b	#$20,d0
000175BC 6A00                       		bpl.s	loc_14624
000175BE 1028 0026                  		move.b	obAngle(a0),d0
000175C2 6A00                       		bpl.s	loc_1461E
000175C4 5300                       		subq.b	#1,d0
000175C6                            
000175C6                            loc_1461E:
000175C6 0600 0020                  		addi.b	#$20,d0
000175CA 6000                       		bra.s	loc_14630
000175CC                            ; ===========================================================================
000175CC                            
000175CC                            loc_14624:
000175CC 1028 0026                  		move.b	obAngle(a0),d0
000175D0 6A00                       		bpl.s	loc_1462C
000175D2 5200                       		addq.b	#1,d0
000175D4                            
000175D4                            loc_1462C:
000175D4 0600 001F                  		addi.b	#$1F,d0
000175D8                            
000175D8                            loc_14630:
000175D8 0200 00C0                  		andi.b	#$C0,d0
000175DC 0C00 0040                  		cmpi.b	#$40,d0
000175E0 6700 0000                  		beq.w	Sonic_WalkVertL
000175E4 0C00 0080                  		cmpi.b	#$80,d0
000175E8 6700 0000                  		beq.w	Sonic_WalkCeiling
000175EC 0C00 00C0                  		cmpi.b	#$C0,d0
000175F0 6700 0000                  		beq.w	Sonic_WalkVertR
000175F4 3428 000C                  		move.w	obY(a0),d2
000175F8 3628 0008                  		move.w	obX(a0),d3
000175FC 7000                       		moveq	#0,d0
000175FE 1028 0016                  		move.b	obHeight(a0),d0
00017602 4880                       		ext.w	d0
00017604 D440                       		add.w	d0,d2
00017606 1028 0017                  		move.b	obWidth(a0),d0
0001760A 4880                       		ext.w	d0
0001760C D640                       		add.w	d0,d3
0001760E 49F8 F768                  		lea	($FFFFF768).w,a4
00017612 367C 0010                  		movea.w	#$10,a3
00017616 3C3C 0000                  		move.w	#0,d6
0001761A 7A0D                       		moveq	#$D,d5
0001761C 6100 0000                  		bsr.w	FindFloor
00017620 3F01                       		move.w	d1,-(sp)
00017622 3428 000C                  		move.w	obY(a0),d2
00017626 3628 0008                  		move.w	obX(a0),d3
0001762A 7000                       		moveq	#0,d0
0001762C 1028 0016                  		move.b	obHeight(a0),d0
00017630 4880                       		ext.w	d0
00017632 D440                       		add.w	d0,d2
00017634 1028 0017                  		move.b	obWidth(a0),d0
00017638 4880                       		ext.w	d0
0001763A 4440                       		neg.w	d0
0001763C D640                       		add.w	d0,d3
0001763E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017642 367C 0010                  		movea.w	#$10,a3
00017646 3C3C 0000                  		move.w	#0,d6
0001764A 7A0D                       		moveq	#$D,d5
0001764C 6100 0000                  		bsr.w	FindFloor
00017650 301F                       		move.w	(sp)+,d0
00017652 6100 0000                  		bsr.w	Sonic_Angle
00017656 4A41                       		tst.w	d1
00017658 6700                       		beq.s	locret_146BE
0001765A 6A00                       		bpl.s	loc_146C0
0001765C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017660 6D00                       		blt.s	locret_146E6
00017662 D368 000C                  		add.w	d1,obY(a0)
00017666                            
00017666                            locret_146BE:
00017666 4E75                       		rts	
00017668                            ; ===========================================================================
00017668                            
00017668                            loc_146C0:
00017668 0C41 000E                  		cmpi.w	#$E,d1
0001766C 6E00                       		bgt.s	loc_146CC
0001766E                            
0001766E                            loc_146C6:
0001766E D368 000C                  		add.w	d1,obY(a0)
00017672 4E75                       		rts	
00017674                            ; ===========================================================================
00017674                            
00017674                            loc_146CC:
00017674 4A28 0038                  		tst.b	$38(a0)
00017678 66F4                       		bne.s	loc_146C6
0001767A 08E8 0001 0022             		bset	#1,obStatus(a0)
00017680 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017686 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001768C 4E75                       		rts	
0001768E                            ; ===========================================================================
0001768E                            
0001768E                            locret_146E6:
0001768E 4E75                       		rts	
00017690                            ; End of function Sonic_AnglePos
00017690                            
00017690                            ; ===========================================================================
00017690 2428 0008                  		move.l	obX(a0),d2
00017694 3028 0010                  		move.w	obVelX(a0),d0
00017698 48C0                       		ext.l	d0
0001769A E180                       		asl.l	#8,d0
0001769C 9480                       		sub.l	d0,d2
0001769E 2142 0008                  		move.l	d2,obX(a0)
000176A2 303C 0038                  		move.w	#$38,d0
000176A6 48C0                       		ext.l	d0
000176A8 E180                       		asl.l	#8,d0
000176AA 9680                       		sub.l	d0,d3
000176AC 2143 000C                  		move.l	d3,obY(a0)
000176B0 4E75                       		rts	
000176B2                            ; ===========================================================================
000176B2                            
000176B2                            locret_1470A:
000176B2 4E75                       		rts	
000176B4                            ; ===========================================================================
000176B4 2628 000C                  		move.l	obY(a0),d3
000176B8 3028 0012                  		move.w	obVelY(a0),d0
000176BC 0440 0038                  		subi.w	#$38,d0
000176C0 3140 0012                  		move.w	d0,obVelY(a0)
000176C4 48C0                       		ext.l	d0
000176C6 E180                       		asl.l	#8,d0
000176C8 9680                       		sub.l	d0,d3
000176CA 2143 000C                  		move.l	d3,obY(a0)
000176CE 4E75                       		rts	
000176D0 4E75                       		rts	
000176D2                            ; ===========================================================================
000176D2 2428 0008                  		move.l	obX(a0),d2
000176D6 2628 000C                  		move.l	obY(a0),d3
000176DA 3028 0010                  		move.w	obVelX(a0),d0
000176DE 48C0                       		ext.l	d0
000176E0 E180                       		asl.l	#8,d0
000176E2 9480                       		sub.l	d0,d2
000176E4 3028 0012                  		move.w	obVelY(a0),d0
000176E8 48C0                       		ext.l	d0
000176EA E180                       		asl.l	#8,d0
000176EC 9680                       		sub.l	d0,d3
000176EE 2142 0008                  		move.l	d2,obX(a0)
000176F2 2143 000C                  		move.l	d3,obY(a0)
000176F6 4E75                       		rts	
000176F8                            
000176F8                            ; ---------------------------------------------------------------------------
000176F8                            ; Subroutine to	change Sonic's angle as he walks along the floor
000176F8                            ; ---------------------------------------------------------------------------
000176F8                            
000176F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176F8                            
000176F8                            
000176F8                            Sonic_Angle:
000176F8 1438 F76A                  		move.b	($FFFFF76A).w,d2
000176FC B240                       		cmp.w	d0,d1
000176FE 6F00                       		ble.s	loc_1475E
00017700 1438 F768                  		move.b	($FFFFF768).w,d2
00017704 3200                       		move.w	d0,d1
00017706                            
00017706                            loc_1475E:
00017706 0802 0000                  		btst	#0,d2
0001770A 6600                       		bne.s	loc_1476A
0001770C 1142 0026                  		move.b	d2,obAngle(a0)
00017710 4E75                       		rts	
00017712                            ; ===========================================================================
00017712                            
00017712                            loc_1476A:
00017712 1428 0026                  		move.b	obAngle(a0),d2
00017716 0602 0020                  		addi.b	#$20,d2
0001771A 0202 00C0                  		andi.b	#$C0,d2
0001771E 1142 0026                  		move.b	d2,obAngle(a0)
00017722 4E75                       		rts	
00017724                            ; End of function Sonic_Angle
00017724                            
00017724                            ; ---------------------------------------------------------------------------
00017724                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017724                            ; ---------------------------------------------------------------------------
00017724                            
00017724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017724                            
00017724                            
00017724                            Sonic_WalkVertR:
00017724 3428 000C                  		move.w	obY(a0),d2
00017728 3628 0008                  		move.w	obX(a0),d3
0001772C 7000                       		moveq	#0,d0
0001772E 1028 0017                  		move.b	obWidth(a0),d0
00017732 4880                       		ext.w	d0
00017734 4440                       		neg.w	d0
00017736 D440                       		add.w	d0,d2
00017738 1028 0016                  		move.b	obHeight(a0),d0
0001773C 4880                       		ext.w	d0
0001773E D640                       		add.w	d0,d3
00017740 49F8 F768                  		lea	($FFFFF768).w,a4
00017744 367C 0010                  		movea.w	#$10,a3
00017748 3C3C 0000                  		move.w	#0,d6
0001774C 7A0D                       		moveq	#$D,d5
0001774E 6100 0000                  		bsr.w	FindWall
00017752 3F01                       		move.w	d1,-(sp)
00017754 3428 000C                  		move.w	obY(a0),d2
00017758 3628 0008                  		move.w	obX(a0),d3
0001775C 7000                       		moveq	#0,d0
0001775E 1028 0017                  		move.b	obWidth(a0),d0
00017762 4880                       		ext.w	d0
00017764 D440                       		add.w	d0,d2
00017766 1028 0016                  		move.b	obHeight(a0),d0
0001776A 4880                       		ext.w	d0
0001776C D640                       		add.w	d0,d3
0001776E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017772 367C 0010                  		movea.w	#$10,a3
00017776 3C3C 0000                  		move.w	#0,d6
0001777A 7A0D                       		moveq	#$D,d5
0001777C 6100 0000                  		bsr.w	FindWall
00017780 301F                       		move.w	(sp)+,d0
00017782 6100 FF74                  		bsr.w	Sonic_Angle
00017786 4A41                       		tst.w	d1
00017788 6700                       		beq.s	locret_147F0
0001778A 6A00                       		bpl.s	loc_147F2
0001778C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017790 6D00 FF20                  		blt.w	locret_1470A
00017794 D368 0008                  		add.w	d1,obX(a0)
00017798                            
00017798                            locret_147F0:
00017798 4E75                       		rts	
0001779A                            ; ===========================================================================
0001779A                            
0001779A                            loc_147F2:
0001779A 0C41 000E                  		cmpi.w	#$E,d1
0001779E 6E00                       		bgt.s	loc_147FE
000177A0                            
000177A0                            loc_147F8:
000177A0 D368 0008                  		add.w	d1,obX(a0)
000177A4 4E75                       		rts	
000177A6                            ; ===========================================================================
000177A6                            
000177A6                            loc_147FE:
000177A6 4A28 0038                  		tst.b	$38(a0)
000177AA 66F4                       		bne.s	loc_147F8
000177AC 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177B8 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177BE 4E75                       		rts	
000177C0                            ; End of function Sonic_WalkVertR
000177C0                            
000177C0                            ; ---------------------------------------------------------------------------
000177C0                            ; Subroutine allowing Sonic to walk upside-down
000177C0                            ; ---------------------------------------------------------------------------
000177C0                            
000177C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177C0                            
000177C0                            
000177C0                            Sonic_WalkCeiling:
000177C0 3428 000C                  		move.w	obY(a0),d2
000177C4 3628 0008                  		move.w	obX(a0),d3
000177C8 7000                       		moveq	#0,d0
000177CA 1028 0016                  		move.b	obHeight(a0),d0
000177CE 4880                       		ext.w	d0
000177D0 9440                       		sub.w	d0,d2
000177D2 0A42 000F                  		eori.w	#$F,d2
000177D6 1028 0017                  		move.b	obWidth(a0),d0
000177DA 4880                       		ext.w	d0
000177DC D640                       		add.w	d0,d3
000177DE 49F8 F768                  		lea	($FFFFF768).w,a4
000177E2 367C FFF0                  		movea.w	#-$10,a3
000177E6 3C3C 1000                  		move.w	#$1000,d6
000177EA 7A0D                       		moveq	#$D,d5
000177EC 6100 0000                  		bsr.w	FindFloor
000177F0 3F01                       		move.w	d1,-(sp)
000177F2 3428 000C                  		move.w	obY(a0),d2
000177F6 3628 0008                  		move.w	obX(a0),d3
000177FA 7000                       		moveq	#0,d0
000177FC 1028 0016                  		move.b	obHeight(a0),d0
00017800 4880                       		ext.w	d0
00017802 9440                       		sub.w	d0,d2
00017804 0A42 000F                  		eori.w	#$F,d2
00017808 1028 0017                  		move.b	obWidth(a0),d0
0001780C 4880                       		ext.w	d0
0001780E 9640                       		sub.w	d0,d3
00017810 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017814 367C FFF0                  		movea.w	#-$10,a3
00017818 3C3C 1000                  		move.w	#$1000,d6
0001781C 7A0D                       		moveq	#$D,d5
0001781E 6100 0000                  		bsr.w	FindFloor
00017822 301F                       		move.w	(sp)+,d0
00017824 6100 FED2                  		bsr.w	Sonic_Angle
00017828 4A41                       		tst.w	d1
0001782A 6700                       		beq.s	locret_14892
0001782C 6A00                       		bpl.s	loc_14894
0001782E 0C41 FFF2                  		cmpi.w	#-$E,d1
00017832 6D00 FE5A                  		blt.w	locret_146E6
00017836 9368 000C                  		sub.w	d1,obY(a0)
0001783A                            
0001783A                            locret_14892:
0001783A 4E75                       		rts	
0001783C                            ; ===========================================================================
0001783C                            
0001783C                            loc_14894:
0001783C 0C41 000E                  		cmpi.w	#$E,d1
00017840 6E00                       		bgt.s	loc_148A0
00017842                            
00017842                            loc_1489A:
00017842 9368 000C                  		sub.w	d1,obY(a0)
00017846 4E75                       		rts	
00017848                            ; ===========================================================================
00017848                            
00017848                            loc_148A0:
00017848 4A28 0038                  		tst.b	$38(a0)
0001784C 66F4                       		bne.s	loc_1489A
0001784E 08E8 0001 0022             		bset	#1,obStatus(a0)
00017854 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001785A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017860 4E75                       		rts	
00017862                            ; End of function Sonic_WalkCeiling
00017862                            
00017862                            ; ---------------------------------------------------------------------------
00017862                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017862                            ; ---------------------------------------------------------------------------
00017862                            
00017862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017862                            
00017862                            
00017862                            Sonic_WalkVertL:
00017862 3428 000C                  		move.w	obY(a0),d2
00017866 3628 0008                  		move.w	obX(a0),d3
0001786A 7000                       		moveq	#0,d0
0001786C 1028 0017                  		move.b	obWidth(a0),d0
00017870 4880                       		ext.w	d0
00017872 9440                       		sub.w	d0,d2
00017874 1028 0016                  		move.b	obHeight(a0),d0
00017878 4880                       		ext.w	d0
0001787A 9640                       		sub.w	d0,d3
0001787C 0A43 000F                  		eori.w	#$F,d3
00017880 49F8 F768                  		lea	($FFFFF768).w,a4
00017884 367C FFF0                  		movea.w	#-$10,a3
00017888 3C3C 0800                  		move.w	#$800,d6
0001788C 7A0D                       		moveq	#$D,d5
0001788E 6100 0000                  		bsr.w	FindWall
00017892 3F01                       		move.w	d1,-(sp)
00017894 3428 000C                  		move.w	obY(a0),d2
00017898 3628 0008                  		move.w	obX(a0),d3
0001789C 7000                       		moveq	#0,d0
0001789E 1028 0017                  		move.b	obWidth(a0),d0
000178A2 4880                       		ext.w	d0
000178A4 D440                       		add.w	d0,d2
000178A6 1028 0016                  		move.b	obHeight(a0),d0
000178AA 4880                       		ext.w	d0
000178AC 9640                       		sub.w	d0,d3
000178AE 0A43 000F                  		eori.w	#$F,d3
000178B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178B6 367C FFF0                  		movea.w	#-$10,a3
000178BA 3C3C 0800                  		move.w	#$800,d6
000178BE 7A0D                       		moveq	#$D,d5
000178C0 6100 0000                  		bsr.w	FindWall
000178C4 301F                       		move.w	(sp)+,d0
000178C6 6100 FE30                  		bsr.w	Sonic_Angle
000178CA 4A41                       		tst.w	d1
000178CC 6700                       		beq.s	locret_14934
000178CE 6A00                       		bpl.s	loc_14936
000178D0 0C41 FFF2                  		cmpi.w	#-$E,d1
000178D4 6D00 FDDC                  		blt.w	locret_1470A
000178D8 9368 0008                  		sub.w	d1,obX(a0)
000178DC                            
000178DC                            locret_14934:
000178DC 4E75                       		rts	
000178DE                            ; ===========================================================================
000178DE                            
000178DE                            loc_14936:
000178DE 0C41 000E                  		cmpi.w	#$E,d1
000178E2 6E00                       		bgt.s	loc_14942
000178E4                            
000178E4                            loc_1493C:
000178E4 9368 0008                  		sub.w	d1,obX(a0)
000178E8 4E75                       		rts	
000178EA                            ; ===========================================================================
000178EA                            
000178EA                            loc_14942:
000178EA 4A28 0038                  		tst.b	$38(a0)
000178EE 66F4                       		bne.s	loc_1493C
000178F0 08E8 0001 0022             		bset	#1,obStatus(a0)
000178F6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178FC 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017902 4E75                       		rts	
00017904                            ; End of function Sonic_WalkVertL
00017904                            ; End of function Sonic_WalkVertL
00017904                            
00017904                            		include	"_incObj\sub FindNearestTile.asm"
00017904                            ; ---------------------------------------------------------------------------
00017904                            ; Subroutine to	find which tile	the object is standing on
00017904                            
00017904                            ; input:
00017904                            ;	d2 = y-position of object's bottom edge
00017904                            ;	d3 = x-position of object
00017904                            
00017904                            ; output:
00017904                            ;	a1 = address within 256x256 mappings where object is standing
00017904                            ;	     (refers to a 16x16 tile number)
00017904                            ; ---------------------------------------------------------------------------
00017904                            
00017904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017904                            
00017904                            
00017904                            FindNearestTile:
00017904 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017906 E248                       		lsr.w	#1,d0
00017908 0240 0380                  		andi.w	#$380,d0
0001790C 3203                       		move.w	d3,d1		; get x-pos. of object
0001790E E049                       		lsr.w	#8,d1
00017910 0241 007F                  		andi.w	#$7F,d1
00017914 D041                       		add.w	d1,d0		; combine
00017916 72FF                       		moveq	#-1,d1
00017918 43F8 A400                  		lea	(v_lvllayout).w,a1
0001791C 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017920 6700                       		beq.s	@blanktile	; branch if 0
00017922 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017924 5301                       		subq.b	#1,d1
00017926 4881                       		ext.w	d1
00017928 EE59                       		ror.w	#7,d1
0001792A 3002                       		move.w	d2,d0
0001792C D040                       		add.w	d0,d0
0001792E 0240 01E0                  		andi.w	#$1E0,d0
00017932 D240                       		add.w	d0,d1
00017934 3003                       		move.w	d3,d0
00017936 E648                       		lsr.w	#3,d0
00017938 0240 001E                  		andi.w	#$1E,d0
0001793C D240                       		add.w	d0,d1
0001793E                            
0001793E                            @blanktile:
0001793E 2241                       		movea.l	d1,a1
00017940 4E75                       		rts	
00017942                            ; ===========================================================================
00017942                            
00017942                            @specialtile:
00017942 0241 007F                  		andi.w	#$7F,d1
00017946 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
0001794C 6700                       		beq.s	@treatasnormal	; if not, branch
0001794E 5241                       		addq.w	#1,d1
00017950 0C41 0029                  		cmpi.w	#$29,d1
00017954 6600                       		bne.s	@treatasnormal
00017956 323C 0051                  		move.w	#$51,d1
0001795A                            
0001795A                            	@treatasnormal:
0001795A 5301                       		subq.b	#1,d1
0001795C EE59                       		ror.w	#7,d1
0001795E 3002                       		move.w	d2,d0
00017960 D040                       		add.w	d0,d0
00017962 0240 01E0                  		andi.w	#$1E0,d0
00017966 D240                       		add.w	d0,d1
00017968 3003                       		move.w	d3,d0
0001796A E648                       		lsr.w	#3,d0
0001796C 0240 001E                  		andi.w	#$1E,d0
00017970 D240                       		add.w	d0,d1
00017972 2241                       		movea.l	d1,a1
00017974 4E75                       		rts	
00017976                            ; End of function FindNearestTile
00017976                            ; End of function FindNearestTile
00017976                            		include	"_incObj\sub FindFloor.asm"
00017976                            ; ---------------------------------------------------------------------------
00017976                            ; Subroutine to	find the floor
00017976                            
00017976                            ; input:
00017976                            ;	d2 = y-position of object's bottom edge
00017976                            ;	d3 = x-position of object
00017976                            ;	d5 = bit to test for solidness
00017976                            
00017976                            ; output:
00017976                            ;	d1 = distance to the floor
00017976                            ;	a1 = address within 256x256 mappings where object is standing
00017976                            ;	     (refers to a 16x16 tile number)
00017976                            ;	(a4) = floor angle
00017976                            ; ---------------------------------------------------------------------------
00017976                            
00017976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017976                            
00017976                            
00017976                            FindFloor:
00017976 618C                       		bsr.s	FindNearestTile
00017978 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
0001797A 3800                       		move.w	d0,d4
0001797C 0240 07FF                  		andi.w	#$7FF,d0
00017980 6700                       		beq.s	@isblank	; branch if tile is blank
00017982 0B04                       		btst	d5,d4		; is the tile solid?
00017984 6600                       		bne.s	@issolid	; if yes, branch
00017986                            
00017986                            @isblank:
00017986 D44B                       		add.w	a3,d2
00017988 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
0001798C 944B                       		sub.w	a3,d2
0001798E 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017992 4E75                       		rts	
00017994                            ; ===========================================================================
00017994                            
00017994                            @issolid:
00017994 2478 F796                  		movea.l	(v_collindex).w,a2
00017998 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
0001799C 0240 00FF                  		andi.w	#$FF,d0
000179A0 67E4                       		beq.s	@isblank	; branch if 0
000179A2 45F9 0000 0000             		lea	(AngleMap).l,a2
000179A8 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
000179AC E948                       		lsl.w	#4,d0
000179AE 3203                       		move.w	d3,d1		; get x-pos. of object
000179B0 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
000179B4 6700                       		beq.s	@noflip		; if not, branch
000179B6 4641                       		not.w	d1
000179B8 4414                       		neg.b	(a4)
000179BA                            
000179BA                            	@noflip:
000179BA 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000179BE 6700                       		beq.s	@noflip2	; if not, branch
000179C0 0614 0040                  		addi.b	#$40,(a4)
000179C4 4414                       		neg.b	(a4)
000179C6 0414 0040                  		subi.b	#$40,(a4)
000179CA                            
000179CA                            	@noflip2:
000179CA 0241 000F                  		andi.w	#$F,d1
000179CE D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
000179D0 45F9 0000 0000             		lea	(CollArray1).l,a2
000179D6 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
000179DA 4880                       		ext.w	d0
000179DC BD44                       		eor.w	d6,d4
000179DE 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000179E2 6700                       		beq.s	@noflip3	; if not, branch
000179E4 4440                       		neg.w	d0
000179E6                            
000179E6                            	@noflip3:
000179E6 4A40                       		tst.w	d0
000179E8 679C                       		beq.s	@isblank	; branch if height is 0
000179EA 6B00                       		bmi.s	@negfloor	; branch if height is negative
000179EC 0C00 0010                  		cmpi.b	#$10,d0
000179F0 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000179F2 3202                       		move.w	d2,d1		; get y-pos. of object
000179F4 0241 000F                  		andi.w	#$F,d1
000179F8 D041                       		add.w	d1,d0
000179FA 323C 000F                  		move.w	#$F,d1
000179FE 9240                       		sub.w	d0,d1		; return distance to floor
00017A00 4E75                       		rts	
00017A02                            ; ===========================================================================
00017A02                            
00017A02                            @negfloor:
00017A02 3202                       		move.w	d2,d1
00017A04 0241 000F                  		andi.w	#$F,d1
00017A08 D041                       		add.w	d1,d0
00017A0A 6A00 FF7A                  		bpl.w	@isblank
00017A0E                            
00017A0E                            @maxfloor:
00017A0E 944B                       		sub.w	a3,d2
00017A10 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017A14 D44B                       		add.w	a3,d2
00017A16 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017A1A 4E75                       		rts	
00017A1C                            ; End of function FindFloor
00017A1C                            
00017A1C                            
00017A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A1C                            
00017A1C                            
00017A1C                            FindFloor2:
00017A1C 6100 FEE6                  		bsr.w	FindNearestTile
00017A20 3011                       		move.w	(a1),d0
00017A22 3800                       		move.w	d0,d4
00017A24 0240 07FF                  		andi.w	#$7FF,d0
00017A28 6700                       		beq.s	@isblank2
00017A2A 0B04                       		btst	d5,d4
00017A2C 6600                       		bne.s	@issolid
00017A2E                            
00017A2E                            @isblank2:
00017A2E 323C 000F                  		move.w	#$F,d1
00017A32 3002                       		move.w	d2,d0
00017A34 0240 000F                  		andi.w	#$F,d0
00017A38 9240                       		sub.w	d0,d1
00017A3A 4E75                       		rts	
00017A3C                            ; ===========================================================================
00017A3C                            
00017A3C                            @issolid:
00017A3C 2478 F796                  		movea.l	(v_collindex).w,a2
00017A40 1032 0000                  		move.b	(a2,d0.w),d0
00017A44 0240 00FF                  		andi.w	#$FF,d0
00017A48 67E4                       		beq.s	@isblank2
00017A4A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A50 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A54 E948                       		lsl.w	#4,d0
00017A56 3203                       		move.w	d3,d1
00017A58 0804 000B                  		btst	#$B,d4
00017A5C 6700                       		beq.s	@noflip
00017A5E 4641                       		not.w	d1
00017A60 4414                       		neg.b	(a4)
00017A62                            
00017A62                            	@noflip:
00017A62 0804 000C                  		btst	#$C,d4
00017A66 6700                       		beq.s	@noflip2
00017A68 0614 0040                  		addi.b	#$40,(a4)
00017A6C 4414                       		neg.b	(a4)
00017A6E 0414 0040                  		subi.b	#$40,(a4)
00017A72                            
00017A72                            	@noflip2:
00017A72 0241 000F                  		andi.w	#$F,d1
00017A76 D240                       		add.w	d0,d1
00017A78 45F9 0000 0000             		lea	(CollArray1).l,a2
00017A7E 1032 1000                  		move.b	(a2,d1.w),d0
00017A82 4880                       		ext.w	d0
00017A84 BD44                       		eor.w	d6,d4
00017A86 0804 000C                  		btst	#$C,d4
00017A8A 6700                       		beq.s	@noflip3
00017A8C 4440                       		neg.w	d0
00017A8E                            
00017A8E                            	@noflip3:
00017A8E 4A40                       		tst.w	d0
00017A90 679C                       		beq.s	@isblank2
00017A92 6B00                       		bmi.s	@negfloor
00017A94 3202                       		move.w	d2,d1
00017A96 0241 000F                  		andi.w	#$F,d1
00017A9A D041                       		add.w	d1,d0
00017A9C 323C 000F                  		move.w	#$F,d1
00017AA0 9240                       		sub.w	d0,d1
00017AA2 4E75                       		rts	
00017AA4                            ; ===========================================================================
00017AA4                            
00017AA4                            @negfloor:
00017AA4 3202                       		move.w	d2,d1
00017AA6 0241 000F                  		andi.w	#$F,d1
00017AAA D041                       		add.w	d1,d0
00017AAC 6A00 FF80                  		bpl.w	@isblank2
00017AB0 4641                       		not.w	d1
00017AB2 4E75                       		rts	
00017AB4                            ; End of function FindFloor2
00017AB4                            ; End of function FindFloor2
00017AB4                            		include	"_incObj\sub FindWall.asm"
00017AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AB4                            
00017AB4                            
00017AB4                            FindWall:
00017AB4 6100 FE4E                  		bsr.w	FindNearestTile
00017AB8 3011                       		move.w	(a1),d0
00017ABA 3800                       		move.w	d0,d4
00017ABC 0240 07FF                  		andi.w	#$7FF,d0
00017AC0 6700                       		beq.s	loc_14B1E
00017AC2 0B04                       		btst	d5,d4
00017AC4 6600                       		bne.s	loc_14B2C
00017AC6                            
00017AC6                            loc_14B1E:
00017AC6 D64B                       		add.w	a3,d3
00017AC8 6100 0000                  		bsr.w	FindWall2
00017ACC 964B                       		sub.w	a3,d3
00017ACE 0641 0010                  		addi.w	#$10,d1
00017AD2 4E75                       		rts	
00017AD4                            ; ===========================================================================
00017AD4                            
00017AD4                            loc_14B2C:
00017AD4 2478 F796                  		movea.l	(v_collindex).w,a2
00017AD8 1032 0000                  		move.b	(a2,d0.w),d0
00017ADC 0240 00FF                  		andi.w	#$FF,d0
00017AE0 67E4                       		beq.s	loc_14B1E
00017AE2 45F9 0000 0000             		lea	(AngleMap).l,a2
00017AE8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017AEC E948                       		lsl.w	#4,d0
00017AEE 3202                       		move.w	d2,d1
00017AF0 0804 000C                  		btst	#$C,d4
00017AF4 6700                       		beq.s	loc_14B5A
00017AF6 4641                       		not.w	d1
00017AF8 0614 0040                  		addi.b	#$40,(a4)
00017AFC 4414                       		neg.b	(a4)
00017AFE 0414 0040                  		subi.b	#$40,(a4)
00017B02                            
00017B02                            loc_14B5A:
00017B02 0804 000B                  		btst	#$B,d4
00017B06 6700                       		beq.s	loc_14B62
00017B08 4414                       		neg.b	(a4)
00017B0A                            
00017B0A                            loc_14B62:
00017B0A 0241 000F                  		andi.w	#$F,d1
00017B0E D240                       		add.w	d0,d1
00017B10 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B16 1032 1000                  		move.b	(a2,d1.w),d0
00017B1A 4880                       		ext.w	d0
00017B1C BD44                       		eor.w	d6,d4
00017B1E 0804 000B                  		btst	#$B,d4
00017B22 6700                       		beq.s	loc_14B7E
00017B24 4440                       		neg.w	d0
00017B26                            
00017B26                            loc_14B7E:
00017B26 4A40                       		tst.w	d0
00017B28 679C                       		beq.s	loc_14B1E
00017B2A 6B00                       		bmi.s	loc_14B9A
00017B2C 0C00 0010                  		cmpi.b	#$10,d0
00017B30 6700                       		beq.s	loc_14BA6
00017B32 3203                       		move.w	d3,d1
00017B34 0241 000F                  		andi.w	#$F,d1
00017B38 D041                       		add.w	d1,d0
00017B3A 323C 000F                  		move.w	#$F,d1
00017B3E 9240                       		sub.w	d0,d1
00017B40 4E75                       		rts	
00017B42                            ; ===========================================================================
00017B42                            
00017B42                            loc_14B9A:
00017B42 3203                       		move.w	d3,d1
00017B44 0241 000F                  		andi.w	#$F,d1
00017B48 D041                       		add.w	d1,d0
00017B4A 6A00 FF7A                  		bpl.w	loc_14B1E
00017B4E                            
00017B4E                            loc_14BA6:
00017B4E 964B                       		sub.w	a3,d3
00017B50 6100 0000                  		bsr.w	FindWall2
00017B54 D64B                       		add.w	a3,d3
00017B56 0441 0010                  		subi.w	#$10,d1
00017B5A 4E75                       		rts	
00017B5C                            ; End of function FindWall
00017B5C                            
00017B5C                            
00017B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B5C                            
00017B5C                            
00017B5C                            FindWall2:
00017B5C 6100 FDA6                  		bsr.w	FindNearestTile
00017B60 3011                       		move.w	(a1),d0
00017B62 3800                       		move.w	d0,d4
00017B64 0240 07FF                  		andi.w	#$7FF,d0
00017B68 6700                       		beq.s	loc_14BC6
00017B6A 0B04                       		btst	d5,d4
00017B6C 6600                       		bne.s	loc_14BD4
00017B6E                            
00017B6E                            loc_14BC6:
00017B6E 323C 000F                  		move.w	#$F,d1
00017B72 3003                       		move.w	d3,d0
00017B74 0240 000F                  		andi.w	#$F,d0
00017B78 9240                       		sub.w	d0,d1
00017B7A 4E75                       		rts	
00017B7C                            ; ===========================================================================
00017B7C                            
00017B7C                            loc_14BD4:
00017B7C 2478 F796                  		movea.l	(v_collindex).w,a2
00017B80 1032 0000                  		move.b	(a2,d0.w),d0
00017B84 0240 00FF                  		andi.w	#$FF,d0
00017B88 67E4                       		beq.s	loc_14BC6
00017B8A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B90 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B94 E948                       		lsl.w	#4,d0
00017B96 3202                       		move.w	d2,d1
00017B98 0804 000C                  		btst	#$C,d4
00017B9C 6700                       		beq.s	loc_14C02
00017B9E 4641                       		not.w	d1
00017BA0 0614 0040                  		addi.b	#$40,(a4)
00017BA4 4414                       		neg.b	(a4)
00017BA6 0414 0040                  		subi.b	#$40,(a4)
00017BAA                            
00017BAA                            loc_14C02:
00017BAA 0804 000B                  		btst	#$B,d4
00017BAE 6700                       		beq.s	loc_14C0A
00017BB0 4414                       		neg.b	(a4)
00017BB2                            
00017BB2                            loc_14C0A:
00017BB2 0241 000F                  		andi.w	#$F,d1
00017BB6 D240                       		add.w	d0,d1
00017BB8 45F9 0000 0000             		lea	(CollArray2).l,a2
00017BBE 1032 1000                  		move.b	(a2,d1.w),d0
00017BC2 4880                       		ext.w	d0
00017BC4 BD44                       		eor.w	d6,d4
00017BC6 0804 000B                  		btst	#$B,d4
00017BCA 6700                       		beq.s	loc_14C26
00017BCC 4440                       		neg.w	d0
00017BCE                            
00017BCE                            loc_14C26:
00017BCE 4A40                       		tst.w	d0
00017BD0 679C                       		beq.s	loc_14BC6
00017BD2 6B00                       		bmi.s	loc_14C3C
00017BD4 3203                       		move.w	d3,d1
00017BD6 0241 000F                  		andi.w	#$F,d1
00017BDA D041                       		add.w	d1,d0
00017BDC 323C 000F                  		move.w	#$F,d1
00017BE0 9240                       		sub.w	d0,d1
00017BE2 4E75                       		rts	
00017BE4                            ; ===========================================================================
00017BE4                            
00017BE4                            loc_14C3C:
00017BE4 3203                       		move.w	d3,d1
00017BE6 0241 000F                  		andi.w	#$F,d1
00017BEA D041                       		add.w	d1,d0
00017BEC 6A00 FF80                  		bpl.w	loc_14BC6
00017BF0 4641                       		not.w	d1
00017BF2 4E75                       		rts	
00017BF4                            ; End of function FindWall2
00017BF4                            ; End of function FindWall2
00017BF4                            
00017BF4                            ; ---------------------------------------------------------------------------
00017BF4                            ; Unused floor/wall subroutine - logs something	to do with collision
00017BF4                            ; ---------------------------------------------------------------------------
00017BF4                            
00017BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BF4                            
00017BF4                            
00017BF4                            FloorLog_Unk:
00017BF4 4E75                       		rts	
00017BF6                            
00017BF6 43F9 0000 0000             		lea	(CollArray1).l,a1
00017BFC 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C02 363C 00FF                  		move.w	#$FF,d3
00017C06                            
00017C06                            loc_14C5E:
00017C06 7A10                       		moveq	#$10,d5
00017C08 343C 000F                  		move.w	#$F,d2
00017C0C                            
00017C0C                            loc_14C64:
00017C0C 7800                       		moveq	#0,d4
00017C0E 323C 000F                  		move.w	#$F,d1
00017C12                            
00017C12                            loc_14C6A:
00017C12 3019                       		move.w	(a1)+,d0
00017C14 EAA8                       		lsr.l	d5,d0
00017C16 D944                       		addx.w	d4,d4
00017C18 51C9 FFF8                  		dbf	d1,loc_14C6A
00017C1C                            
00017C1C 34C4                       		move.w	d4,(a2)+
00017C1E 92FC 0020                  		suba.w	#$20,a1
00017C22 5345                       		subq.w	#1,d5
00017C24 51CA FFE6                  		dbf	d2,loc_14C64
00017C28                            
00017C28 D2FC 0020                  		adda.w	#$20,a1
00017C2C 51CB FFD8                  		dbf	d3,loc_14C5E
00017C30                            
00017C30 43F9 0000 0000             		lea	(CollArray1).l,a1
00017C36 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C3C 6100                       		bsr.s	FloorLog_Unk2
00017C3E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017C44 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C4A                            
00017C4A                            ; End of function FloorLog_Unk
00017C4A                            
00017C4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C4A                            
00017C4A                            
00017C4A                            FloorLog_Unk2:
00017C4A 363C 0FFF                  		move.w	#$FFF,d3
00017C4E                            
00017C4E                            loc_14CA6:
00017C4E 7400                       		moveq	#0,d2
00017C50 323C 000F                  		move.w	#$F,d1
00017C54 3019                       		move.w	(a1)+,d0
00017C56 6700                       		beq.s	loc_14CD4
00017C58 6B00                       		bmi.s	loc_14CBE
00017C5A                            
00017C5A                            loc_14CB2:
00017C5A E248                       		lsr.w	#1,d0
00017C5C 6400                       		bhs.s	loc_14CB8
00017C5E 5202                       		addq.b	#1,d2
00017C60                            
00017C60                            loc_14CB8:
00017C60 51C9 FFF8                  		dbf	d1,loc_14CB2
00017C64                            
00017C64 6000                       		bra.s	loc_14CD6
00017C66                            ; ===========================================================================
00017C66                            
00017C66                            loc_14CBE:
00017C66 0C40 FFFF                  		cmpi.w	#-1,d0
00017C6A 6700                       		beq.s	loc_14CD0
00017C6C                            
00017C6C                            loc_14CC4:
00017C6C E348                       		lsl.w	#1,d0
00017C6E 6400                       		bhs.s	loc_14CCA
00017C70 5302                       		subq.b	#1,d2
00017C72                            
00017C72                            loc_14CCA:
00017C72 51C9 FFF8                  		dbf	d1,loc_14CC4
00017C76                            
00017C76 6000                       		bra.s	loc_14CD6
00017C78                            ; ===========================================================================
00017C78                            
00017C78                            loc_14CD0:
00017C78 303C 0010                  		move.w	#$10,d0
00017C7C                            
00017C7C                            loc_14CD4:
00017C7C 3400                       		move.w	d0,d2
00017C7E                            
00017C7E                            loc_14CD6:
00017C7E 14C2                       		move.b	d2,(a2)+
00017C80 51CB FFCC                  		dbf	d3,loc_14CA6
00017C84                            
00017C84 4E75                       		rts	
00017C86                            
00017C86                            ; End of function FloorLog_Unk2
00017C86                            
00017C86                            
00017C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C86                            
00017C86                            
00017C86                            Sonic_WalkSpeed:
00017C86 2628 0008                  		move.l	obX(a0),d3
00017C8A 2428 000C                  		move.l	obY(a0),d2
00017C8E 3228 0010                  		move.w	obVelX(a0),d1
00017C92 48C1                       		ext.l	d1
00017C94 E181                       		asl.l	#8,d1
00017C96 D681                       		add.l	d1,d3
00017C98 3228 0012                  		move.w	obVelY(a0),d1
00017C9C 48C1                       		ext.l	d1
00017C9E E181                       		asl.l	#8,d1
00017CA0 D481                       		add.l	d1,d2
00017CA2 4842                       		swap	d2
00017CA4 4843                       		swap	d3
00017CA6 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017CAA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017CAE 1200                       		move.b	d0,d1
00017CB0 0600 0020                  		addi.b	#$20,d0
00017CB4 6A00                       		bpl.s	loc_14D1A
00017CB6 1001                       		move.b	d1,d0
00017CB8 6A00                       		bpl.s	loc_14D14
00017CBA 5300                       		subq.b	#1,d0
00017CBC                            
00017CBC                            loc_14D14:
00017CBC 0600 0020                  		addi.b	#$20,d0
00017CC0 6000                       		bra.s	loc_14D24
00017CC2                            ; ===========================================================================
00017CC2                            
00017CC2                            loc_14D1A:
00017CC2 1001                       		move.b	d1,d0
00017CC4 6A00                       		bpl.s	loc_14D20
00017CC6 5200                       		addq.b	#1,d0
00017CC8                            
00017CC8                            loc_14D20:
00017CC8 0600 001F                  		addi.b	#$1F,d0
00017CCC                            
00017CCC                            loc_14D24:
00017CCC 0200 00C0                  		andi.b	#$C0,d0
00017CD0 6700 0000                  		beq.w	loc_14DF0
00017CD4 0C00 0080                  		cmpi.b	#$80,d0
00017CD8 6700 0000                  		beq.w	loc_14F7C
00017CDC 0201 0038                  		andi.b	#$38,d1
00017CE0 6600                       		bne.s	loc_14D3C
00017CE2 5042                       		addq.w	#8,d2
00017CE4                            
00017CE4                            loc_14D3C:
00017CE4 0C00 0040                  		cmpi.b	#$40,d0
00017CE8 6700 0000                  		beq.w	loc_1504A
00017CEC 6000 0000                  		bra.w	loc_14EBC
00017CF0                            
00017CF0                            ; End of function Sonic_WalkSpeed
00017CF0                            
00017CF0                            
00017CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CF0                            
00017CF0                            
00017CF0                            sub_14D48:
00017CF0 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017CF4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017CF8 0600 0020                  		addi.b	#$20,d0
00017CFC 0200 00C0                  		andi.b	#$C0,d0
00017D00 0C00 0040                  		cmpi.b	#$40,d0
00017D04 6700 0000                  		beq.w	loc_14FD6
00017D08 0C00 0080                  		cmpi.b	#$80,d0
00017D0C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017D10 0C00 00C0                  		cmpi.b	#$C0,d0
00017D14 6700 0000                  		beq.w	sub_14E50
00017D18                            
00017D18                            ; End of function sub_14D48
00017D18                            
00017D18                            ; ---------------------------------------------------------------------------
00017D18                            ; Subroutine to	make Sonic land	on the floor after jumping
00017D18                            ; ---------------------------------------------------------------------------
00017D18                            
00017D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D18                            
00017D18                            
00017D18                            Sonic_HitFloor:
00017D18 3428 000C                  		move.w	obY(a0),d2
00017D1C 3628 0008                  		move.w	obX(a0),d3
00017D20 7000                       		moveq	#0,d0
00017D22 1028 0016                  		move.b	obHeight(a0),d0
00017D26 4880                       		ext.w	d0
00017D28 D440                       		add.w	d0,d2
00017D2A 1028 0017                  		move.b	obWidth(a0),d0
00017D2E 4880                       		ext.w	d0
00017D30 D640                       		add.w	d0,d3
00017D32 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D36 367C 0010                  		movea.w	#$10,a3
00017D3A 3C3C 0000                  		move.w	#0,d6
00017D3E 7A0D                       		moveq	#$D,d5
00017D40 6100 FC34                  		bsr.w	FindFloor
00017D44 3F01                       		move.w	d1,-(sp)
00017D46 3428 000C                  		move.w	obY(a0),d2
00017D4A 3628 0008                  		move.w	obX(a0),d3
00017D4E 7000                       		moveq	#0,d0
00017D50 1028 0016                  		move.b	obHeight(a0),d0
00017D54 4880                       		ext.w	d0
00017D56 D440                       		add.w	d0,d2
00017D58 1028 0017                  		move.b	obWidth(a0),d0
00017D5C 4880                       		ext.w	d0
00017D5E 9640                       		sub.w	d0,d3
00017D60 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017D64 367C 0010                  		movea.w	#$10,a3
00017D68 3C3C 0000                  		move.w	#0,d6
00017D6C 7A0D                       		moveq	#$D,d5
00017D6E 6100 FC06                  		bsr.w	FindFloor
00017D72 301F                       		move.w	(sp)+,d0
00017D74 143C 0000                  		move.b	#0,d2
00017D78                            
00017D78                            loc_14DD0:
00017D78 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017D7C B240                       		cmp.w	d0,d1
00017D7E 6F00                       		ble.s	loc_14DDE
00017D80 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D84 C141                       		exg	d0,d1
00017D86                            
00017D86                            loc_14DDE:
00017D86 0803 0000                  		btst	#0,d3
00017D8A 6700                       		beq.s	locret_14DE6
00017D8C 1602                       		move.b	d2,d3
00017D8E                            
00017D8E                            locret_14DE6:
00017D8E 4E75                       		rts	
00017D90                            
00017D90                            ; End of function Sonic_HitFloor
00017D90                            
00017D90                            ; ===========================================================================
00017D90 3428 000C                  		move.w	obY(a0),d2
00017D94 3628 0008                  		move.w	obX(a0),d3
00017D98                            
00017D98                            loc_14DF0:
00017D98 0642 000A                  		addi.w	#$A,d2
00017D9C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DA0 367C 0010                  		movea.w	#$10,a3
00017DA4 3C3C 0000                  		move.w	#0,d6
00017DA8 7A0E                       		moveq	#$E,d5
00017DAA 6100 FBCA                  		bsr.w	FindFloor
00017DAE 143C 0000                  		move.b	#0,d2
00017DB2                            
00017DB2                            loc_14E0A:
00017DB2 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DB6 0803 0000                  		btst	#0,d3
00017DBA 6700                       		beq.s	locret_14E16
00017DBC 1602                       		move.b	d2,d3
00017DBE                            
00017DBE                            locret_14E16:
00017DBE 4E75                       		rts	
00017DC0                            
00017DC0                            		include	"_incObj\sub ObjFloorDist.asm"
00017DC0                            ; ---------------------------------------------------------------------------
00017DC0                            ; Subroutine to find the distance of an object to the floor
00017DC0                            
00017DC0                            ; input:
00017DC0                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017DC0                            
00017DC0                            ; output:
00017DC0                            ;	d1 = distance to the floor
00017DC0                            ;	d3 = floor angle
00017DC0                            ;	a1 = address within 256x256 mappings where object is standing
00017DC0                            ;	     (refers to a 16x16 tile number)
00017DC0                            ;	(a4) = floor angle
00017DC0                            ; ---------------------------------------------------------------------------
00017DC0                            
00017DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DC0                            
00017DC0                            
00017DC0                            ObjFloorDist:
00017DC0 3628 0008                  		move.w	obX(a0),d3
00017DC4                            
00017DC4                            
00017DC4                            ObjFloorDist2:
00017DC4 3428 000C                  		move.w	obY(a0),d2
00017DC8 7000                       		moveq	#0,d0
00017DCA 1028 0016                  		move.b	obHeight(a0),d0
00017DCE 4880                       		ext.w	d0
00017DD0 D440                       		add.w	d0,d2
00017DD2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DD6 18BC 0000                  		move.b	#0,(a4)
00017DDA 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017DDE 3C3C 0000                  		move.w	#0,d6
00017DE2 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017DE4 6100 FB90                  		bsr.w	FindFloor
00017DE8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DEC 0803 0000                  		btst	#0,d3
00017DF0 6700                       		beq.s	locret_14E4E
00017DF2 163C 0000                  		move.b	#0,d3
00017DF6                            
00017DF6                            	locret_14E4E:
00017DF6 4E75                       		rts	
00017DF8                            
00017DF8                            ; End of function ObjFloorDist2
00017DF8                            ; End of function ObjFloorDist2
00017DF8                            
00017DF8                            
00017DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DF8                            
00017DF8                            
00017DF8                            sub_14E50:
00017DF8 3428 000C                  		move.w	obY(a0),d2
00017DFC 3628 0008                  		move.w	obX(a0),d3
00017E00 7000                       		moveq	#0,d0
00017E02 1028 0017                  		move.b	obWidth(a0),d0
00017E06 4880                       		ext.w	d0
00017E08 9440                       		sub.w	d0,d2
00017E0A 1028 0016                  		move.b	obHeight(a0),d0
00017E0E 4880                       		ext.w	d0
00017E10 D640                       		add.w	d0,d3
00017E12 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E16 367C 0010                  		movea.w	#$10,a3
00017E1A 3C3C 0000                  		move.w	#0,d6
00017E1E 7A0E                       		moveq	#$E,d5
00017E20 6100 FC92                  		bsr.w	FindWall
00017E24 3F01                       		move.w	d1,-(sp)
00017E26 3428 000C                  		move.w	obY(a0),d2
00017E2A 3628 0008                  		move.w	obX(a0),d3
00017E2E 7000                       		moveq	#0,d0
00017E30 1028 0017                  		move.b	obWidth(a0),d0
00017E34 4880                       		ext.w	d0
00017E36 D440                       		add.w	d0,d2
00017E38 1028 0016                  		move.b	obHeight(a0),d0
00017E3C 4880                       		ext.w	d0
00017E3E D640                       		add.w	d0,d3
00017E40 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E44 367C 0010                  		movea.w	#$10,a3
00017E48 3C3C 0000                  		move.w	#0,d6
00017E4C 7A0E                       		moveq	#$E,d5
00017E4E 6100 FC64                  		bsr.w	FindWall
00017E52 301F                       		move.w	(sp)+,d0
00017E54 143C 00C0                  		move.b	#-$40,d2
00017E58 6000 FF1E                  		bra.w	loc_14DD0
00017E5C                            
00017E5C                            ; End of function sub_14E50
00017E5C                            
00017E5C                            
00017E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E5C                            
00017E5C                            
00017E5C                            sub_14EB4:
00017E5C 3428 000C                  		move.w	obY(a0),d2
00017E60 3628 0008                  		move.w	obX(a0),d3
00017E64                            
00017E64                            loc_14EBC:
00017E64 0643 000A                  		addi.w	#$A,d3
00017E68 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E6C 367C 0010                  		movea.w	#$10,a3
00017E70 3C3C 0000                  		move.w	#0,d6
00017E74 7A0E                       		moveq	#$E,d5
00017E76 6100 FC3C                  		bsr.w	FindWall
00017E7A 143C 00C0                  		move.b	#-$40,d2
00017E7E 6000 FF32                  		bra.w	loc_14E0A
00017E82                            
00017E82                            ; End of function sub_14EB4
00017E82                            
00017E82                            ; ---------------------------------------------------------------------------
00017E82                            ; Subroutine to	detect when an object hits a wall to its right
00017E82                            ; ---------------------------------------------------------------------------
00017E82                            
00017E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E82                            
00017E82                            
00017E82                            ObjHitWallRight:
00017E82 D668 0008                  		add.w	obX(a0),d3
00017E86 3428 000C                  		move.w	obY(a0),d2
00017E8A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E8E 18BC 0000                  		move.b	#0,(a4)
00017E92 367C 0010                  		movea.w	#$10,a3
00017E96 3C3C 0000                  		move.w	#0,d6
00017E9A 7A0E                       		moveq	#$E,d5
00017E9C 6100 FC16                  		bsr.w	FindWall
00017EA0 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EA4 0803 0000                  		btst	#0,d3
00017EA8 6700                       		beq.s	locret_14F06
00017EAA 163C 00C0                  		move.b	#-$40,d3
00017EAE                            
00017EAE                            locret_14F06:
00017EAE 4E75                       		rts	
00017EB0                            
00017EB0                            ; End of function ObjHitWallRight
00017EB0                            
00017EB0                            ; ---------------------------------------------------------------------------
00017EB0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017EB0                            ; touches them
00017EB0                            ; ---------------------------------------------------------------------------
00017EB0                            
00017EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EB0                            
00017EB0                            
00017EB0                            Sonic_DontRunOnWalls:
00017EB0 3428 000C                  		move.w	obY(a0),d2
00017EB4 3628 0008                  		move.w	obX(a0),d3
00017EB8 7000                       		moveq	#0,d0
00017EBA 1028 0016                  		move.b	obHeight(a0),d0
00017EBE 4880                       		ext.w	d0
00017EC0 9440                       		sub.w	d0,d2
00017EC2 0A42 000F                  		eori.w	#$F,d2
00017EC6 1028 0017                  		move.b	obWidth(a0),d0
00017ECA 4880                       		ext.w	d0
00017ECC D640                       		add.w	d0,d3
00017ECE 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED2 367C FFF0                  		movea.w	#-$10,a3
00017ED6 3C3C 1000                  		move.w	#$1000,d6
00017EDA 7A0E                       		moveq	#$E,d5
00017EDC 6100 FA98                  		bsr.w	FindFloor
00017EE0 3F01                       		move.w	d1,-(sp)
00017EE2 3428 000C                  		move.w	obY(a0),d2
00017EE6 3628 0008                  		move.w	obX(a0),d3
00017EEA 7000                       		moveq	#0,d0
00017EEC 1028 0016                  		move.b	obHeight(a0),d0
00017EF0 4880                       		ext.w	d0
00017EF2 9440                       		sub.w	d0,d2
00017EF4 0A42 000F                  		eori.w	#$F,d2
00017EF8 1028 0017                  		move.b	obWidth(a0),d0
00017EFC 4880                       		ext.w	d0
00017EFE 9640                       		sub.w	d0,d3
00017F00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F04 367C FFF0                  		movea.w	#-$10,a3
00017F08 3C3C 1000                  		move.w	#$1000,d6
00017F0C 7A0E                       		moveq	#$E,d5
00017F0E 6100 FA66                  		bsr.w	FindFloor
00017F12 301F                       		move.w	(sp)+,d0
00017F14 143C 0080                  		move.b	#-$80,d2
00017F18 6000 FE5E                  		bra.w	loc_14DD0
00017F1C                            ; End of function Sonic_DontRunOnWalls
00017F1C                            
00017F1C                            ; ===========================================================================
00017F1C 3428 000C                  		move.w	obY(a0),d2
00017F20 3628 0008                  		move.w	obX(a0),d3
00017F24                            
00017F24                            loc_14F7C:
00017F24 0442 000A                  		subi.w	#$A,d2
00017F28 0A42 000F                  		eori.w	#$F,d2
00017F2C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F30 367C FFF0                  		movea.w	#-$10,a3
00017F34 3C3C 1000                  		move.w	#$1000,d6
00017F38 7A0E                       		moveq	#$E,d5
00017F3A 6100 FA3A                  		bsr.w	FindFloor
00017F3E 143C 0080                  		move.b	#-$80,d2
00017F42 6000 FE6E                  		bra.w	loc_14E0A
00017F46                            
00017F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F46                            
00017F46                            
00017F46                            ObjHitCeiling:
00017F46 3428 000C                  		move.w	obY(a0),d2
00017F4A 3628 0008                  		move.w	obX(a0),d3
00017F4E 7000                       		moveq	#0,d0
00017F50 1028 0016                  		move.b	obHeight(a0),d0
00017F54 4880                       		ext.w	d0
00017F56 9440                       		sub.w	d0,d2
00017F58 0A42 000F                  		eori.w	#$F,d2
00017F5C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F60 367C FFF0                  		movea.w	#-$10,a3
00017F64 3C3C 1000                  		move.w	#$1000,d6
00017F68 7A0E                       		moveq	#$E,d5
00017F6A 6100 FA0A                  		bsr.w	FindFloor
00017F6E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F72 0803 0000                  		btst	#0,d3
00017F76 6700                       		beq.s	locret_14FD4
00017F78 163C 0080                  		move.b	#-$80,d3
00017F7C                            
00017F7C                            locret_14FD4:
00017F7C 4E75                       		rts	
00017F7E                            ; End of function ObjHitCeiling
00017F7E                            
00017F7E                            ; ===========================================================================
00017F7E                            
00017F7E                            loc_14FD6:
00017F7E 3428 000C                  		move.w	obY(a0),d2
00017F82 3628 0008                  		move.w	obX(a0),d3
00017F86 7000                       		moveq	#0,d0
00017F88 1028 0017                  		move.b	obWidth(a0),d0
00017F8C 4880                       		ext.w	d0
00017F8E 9440                       		sub.w	d0,d2
00017F90 1028 0016                  		move.b	obHeight(a0),d0
00017F94 4880                       		ext.w	d0
00017F96 9640                       		sub.w	d0,d3
00017F98 0A43 000F                  		eori.w	#$F,d3
00017F9C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FA0 367C FFF0                  		movea.w	#-$10,a3
00017FA4 3C3C 0800                  		move.w	#$800,d6
00017FA8 7A0E                       		moveq	#$E,d5
00017FAA 6100 FB08                  		bsr.w	FindWall
00017FAE 3F01                       		move.w	d1,-(sp)
00017FB0 3428 000C                  		move.w	obY(a0),d2
00017FB4 3628 0008                  		move.w	obX(a0),d3
00017FB8 7000                       		moveq	#0,d0
00017FBA 1028 0017                  		move.b	obWidth(a0),d0
00017FBE 4880                       		ext.w	d0
00017FC0 D440                       		add.w	d0,d2
00017FC2 1028 0016                  		move.b	obHeight(a0),d0
00017FC6 4880                       		ext.w	d0
00017FC8 9640                       		sub.w	d0,d3
00017FCA 0A43 000F                  		eori.w	#$F,d3
00017FCE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017FD2 367C FFF0                  		movea.w	#-$10,a3
00017FD6 3C3C 0800                  		move.w	#$800,d6
00017FDA 7A0E                       		moveq	#$E,d5
00017FDC 6100 FAD6                  		bsr.w	FindWall
00017FE0 301F                       		move.w	(sp)+,d0
00017FE2 143C 0040                  		move.b	#$40,d2
00017FE6 6000 FD90                  		bra.w	loc_14DD0
00017FEA                            
00017FEA                            ; ---------------------------------------------------------------------------
00017FEA                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017FEA                            ; ---------------------------------------------------------------------------
00017FEA                            
00017FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FEA                            
00017FEA                            
00017FEA                            Sonic_HitWall:
00017FEA 3428 000C                  		move.w	obY(a0),d2
00017FEE 3628 0008                  		move.w	obX(a0),d3
00017FF2                            
00017FF2                            loc_1504A:
00017FF2 0443 000A                  		subi.w	#$A,d3
00017FF6 0A43 000F                  		eori.w	#$F,d3
00017FFA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FFE 367C FFF0                  		movea.w	#-$10,a3
00018002 3C3C 0800                  		move.w	#$800,d6
00018006 7A0E                       		moveq	#$E,d5
00018008 6100 FAAA                  		bsr.w	FindWall
0001800C 143C 0040                  		move.b	#$40,d2
00018010 6000 FDA0                  		bra.w	loc_14E0A
00018014                            ; End of function Sonic_HitWall
00018014                            
00018014                            ; ---------------------------------------------------------------------------
00018014                            ; Subroutine to	detect when an object hits a wall to its left
00018014                            ; ---------------------------------------------------------------------------
00018014                            
00018014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018014                            
00018014                            
00018014                            ObjHitWallLeft:
00018014 D668 0008                  		add.w	obX(a0),d3
00018018 3428 000C                  		move.w	obY(a0),d2
0001801C                            		; Engine bug: colliding with left walls is erratic with this function.
0001801C                            		; The cause is this: a missing instruction to flip collision on the found
0001801C                            		; 16x16 block; this one:
0001801C                            		;eori.w	#$F,d3
0001801C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018020 18BC 0000                  		move.b	#0,(a4)
00018024 367C FFF0                  		movea.w	#-$10,a3
00018028 3C3C 0800                  		move.w	#$800,d6
0001802C 7A0E                       		moveq	#$E,d5
0001802E 6100 FA84                  		bsr.w	FindWall
00018032 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018036 0803 0000                  		btst	#0,d3
0001803A 6700                       		beq.s	locret_15098
0001803C 163C 0040                  		move.b	#$40,d3
00018040                            
00018040                            locret_15098:
00018040 4E75                       		rts	
00018042                            ; End of function ObjHitWallLeft
00018042                            
00018042                            ; ===========================================================================
00018042                            
00018042                            		include	"_incObj\66 Rotating Junction.asm"
00018042                            ; ---------------------------------------------------------------------------
00018042                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018042                            ; ---------------------------------------------------------------------------
00018042                            
00018042                            Junction:
00018042 7000                       		moveq	#0,d0
00018044 1028 0024                  		move.b	obRoutine(a0),d0
00018048 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
0001804C 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018050                            ; ===========================================================================
00018050 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018052 0000                       		dc.w Jun_Action-Jun_Index
00018054 0000                       		dc.w Jun_Display-Jun_Index
00018056 0000                       		dc.w Jun_Release-Jun_Index
00018058                            
00018058 =00000034                  jun_frame:	equ $34		; current frame
00018058 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018058 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018058                            ; ===========================================================================
00018058                            
00018058                            Jun_Main:	; Routine 0
00018058 5428 0024                  		addq.b	#2,obRoutine(a0)
0001805C 323C 0001                  		move.w	#1,d1
00018060 2248                       		movea.l	a0,a1
00018062 6000                       		bra.s	@makeitem
00018064                            ; ===========================================================================
00018064                            
00018064                            	@repeat:
00018064 4EB9 0000 FCD2             		jsr	FindFreeObj
0001806A 6600                       		bne.s	@fail
0001806C 12BC 0066                  		move.b	#id_Junction,0(a1)
00018070 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00018074 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001807A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018080 337C 0180 0018             		move.w	#$180,obPriority(a1)
00018086 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
0001808C                            
0001808C                            @makeitem:
0001808C 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00018094 337C 4348 0002             		move.w	#$4348,obGfx(a1)
0001809A 0029 0004 0001             		ori.b	#4,obRender(a1)
000180A0 137C 0038 0014             		move.b	#$38,obActWid(a1)
000180A6                            
000180A6                            	@fail:
000180A6 51C9 FFBC                  		dbf	d1,@repeat
000180AA                            
000180AA 117C 0030 0014             		move.b	#$30,obActWid(a0)
000180B0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000180B6 317C 003C 0030             		move.w	#$3C,$30(a0)
000180BC 117C 0001 0034             		move.b	#1,jun_frame(a0)
000180C2 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000180C8                            
000180C8                            Jun_Action:	; Routine 2
000180C8 6100 0000                  		bsr.w	Jun_ChkSwitch
000180CC 4A28 0001                  		tst.b	obRender(a0)
000180D0 6A00 0000                  		bpl.w	Jun_Display
000180D4 323C 0030                  		move.w	#$30,d1
000180D8 3401                       		move.w	d1,d2
000180DA 3602                       		move.w	d2,d3
000180DC 5243                       		addq.w	#1,d3
000180DE 3828 0008                  		move.w	obX(a0),d4
000180E2 6100 9B70                  		bsr.w	SolidObject
000180E6 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
000180EC 6700 0000                  		beq.w	Jun_Display	; if not, branch
000180F0                            
000180F0 43F8 D000                  		lea	(v_player).w,a1
000180F4 720E                       		moveq	#$E,d1
000180F6 3029 0008                  		move.w	obX(a1),d0
000180FA B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
000180FE 6500                       		bcs.s	@isleft		; if yes, branch
00018100 7207                       		moveq	#7,d1		
00018102                            
00018102                            	@isleft:
00018102 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018106 6600                       		bne.s	Jun_Display	; if not, branch
00018108                            
00018108 1141 0032                  		move.b	d1,$32(a0)
0001810C 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018110 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018116 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001811C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018122 337C 0000 0010             		move.w	#0,obVelX(a1)
00018128 337C 0000 0012             		move.w	#0,obVelY(a1)
0001812E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018134 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001813A 08E9 0001 0022             		bset	#1,obStatus(a1)
00018140 3429 0008                  		move.w	obX(a1),d2
00018144 3629 000C                  		move.w	obY(a1),d3
00018148 6100 0000                  		bsr.w	Jun_ChgPos
0001814C D569 0008                  		add.w	d2,obX(a1)
00018150 D769 000C                  		add.w	d3,obY(a1)
00018154 E0E9 0008                  		asr	obX(a1)
00018158 E0E9 000C                  		asr	obY(a1)
0001815C                            
0001815C                            Jun_Display:	; Routine 4
0001815C 6000 965E                  		bra.w	RememberState
00018160                            ; ===========================================================================
00018160                            
00018160                            Jun_Release:	; Routine 6
00018160 1028 001A                  		move.b	obFrame(a0),d0
00018164 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00018168 6700                       		beq.s	@release	; if yes, branch
0001816A 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
0001816E 6600                       		bne.s	@dontrelease	; if not, branch
00018170                            
00018170                            	@release:
00018170 B028 0032                  		cmp.b	$32(a0),d0
00018174 6700                       		beq.s	@dontrelease
00018176 43F8 D000                  		lea	(v_player).w,a1
0001817A 337C 0000 0010             		move.w	#0,obVelX(a1)
00018180 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018186 0C00 0004                  		cmpi.b	#4,d0
0001818A 6700                       		beq.s	@isdown
0001818C 337C 0800 0010             		move.w	#$800,obVelX(a1)
00018192 337C 0800 0012             		move.w	#$800,obVelY(a1)
00018198                            
00018198                            	@isdown:
00018198 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
0001819C 5928 0024                  		subq.b	#4,obRoutine(a0)
000181A0                            
000181A0                            	@dontrelease:
000181A0 6100                       		bsr.s	Jun_ChkSwitch
000181A2 6100                       		bsr.s	Jun_ChgPos
000181A4 6000 9616                  		bra.w	RememberState
000181A8                            
000181A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181A8                            
000181A8                            
000181A8                            Jun_ChkSwitch:
000181A8 45F8 F7E0                  		lea	(f_switch).w,a2
000181AC 7000                       		moveq	#0,d0
000181AE 1028 0038                  		move.b	jun_switch(a0),d0
000181B2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000181B8 6700                       		beq.s	@unpressed	; if not, branch
000181BA                            
000181BA 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000181BE 6600                       		bne.s	@animate	; if yes, branch
000181C0 4428 0034                  		neg.b	jun_frame(a0)
000181C4 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
000181CA 6000                       		bra.s	@animate
000181CC                            ; ===========================================================================
000181CC                            
000181CC                            @unpressed:
000181CC 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
000181D0                            
000181D0                            @animate:
000181D0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
000181D4 6A00                       		bpl.s	@nochange	; if time remains, branch
000181D6 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000181DC 1228 0034                  		move.b	jun_frame(a0),d1
000181E0 1028 001A                  		move.b	obFrame(a0),d0
000181E4 D001                       		add.b	d1,d0
000181E6 0200 000F                  		andi.b	#$F,d0
000181EA 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
000181EE                            
000181EE                            	@nochange:
000181EE 4E75                       		rts	
000181F0                            ; End of function Jun_ChkSwitch
000181F0                            
000181F0                            
000181F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181F0                            
000181F0                            
000181F0                            Jun_ChgPos:
000181F0 43F8 D000                  		lea	(v_player).w,a1
000181F4 7000                       		moveq	#0,d0
000181F6 1028 001A                  		move.b	obFrame(a0),d0
000181FA D040                       		add.w	d0,d0
000181FC 45FB 0000                  		lea	@data(pc,d0.w),a2
00018200 101A                       		move.b	(a2)+,d0
00018202 4880                       		ext.w	d0
00018204 D068 0008                  		add.w	obX(a0),d0
00018208 3340 0008                  		move.w	d0,obX(a1)
0001820C 101A                       		move.b	(a2)+,d0
0001820E 4880                       		ext.w	d0
00018210 D068 000C                  		add.w	obY(a0),d0
00018214 3340 000C                  		move.w	d0,obY(a1)
00018218 4E75                       		rts	
0001821A                            
0001821A                            
0001821A E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001821E E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018222 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018226 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
0001822A 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001822E 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018232 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018236 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018236 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001823A                            Map_Jun:	include	"_maps\Rotating Junction.asm"
0001823A                            ; ---------------------------------------------------------------------------
0001823A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001823A                            ; ---------------------------------------------------------------------------
0001823A                            Map_Jun_internal:
0001823A 0000                       		dc.w @gap0-Map_Jun_internal
0001823C 0000                       		dc.w @gap1-Map_Jun_internal
0001823E 0000                       		dc.w @gap2-Map_Jun_internal
00018240 0000                       		dc.w @gap3-Map_Jun_internal
00018242 0000                       		dc.w @gap4-Map_Jun_internal
00018244 0000                       		dc.w @gap5-Map_Jun_internal
00018246 0000                       		dc.w @gap6-Map_Jun_internal
00018248 0000                       		dc.w @gap7-Map_Jun_internal
0001824A 0000                       		dc.w @gap8-Map_Jun_internal
0001824C 0000                       		dc.w @gap9-Map_Jun_internal
0001824E 0000                       		dc.w @gapA-Map_Jun_internal
00018250 0000                       		dc.w @gapB-Map_Jun_internal
00018252 0000                       		dc.w @gapC-Map_Jun_internal
00018254 0000                       		dc.w @gapD-Map_Jun_internal
00018256 0000                       		dc.w @gapE-Map_Jun_internal
00018258 0000                       		dc.w @gapF-Map_Jun_internal
0001825A 0000                       		dc.w @circle-Map_Jun_internal
0001825C 06                         @gap0:		dc.b 6
0001825D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018262 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00018267 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001826C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00018271 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00018276 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001827B 06                         @gap1:		dc.b 6
0001827C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00018281 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00018286 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001828B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00018290 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00018295 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001829A 06                         @gap2:		dc.b 6
0001829B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000182A0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000182A5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000182AA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000182AF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000182B4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000182B9 06                         @gap3:		dc.b 6
000182BA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000182BF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000182C4 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000182C9 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000182CE 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000182D3 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000182D8 06                         @gap4:		dc.b 6
000182D9 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000182DE 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000182E3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000182E8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000182ED 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000182F2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000182F7 06                         @gap5:		dc.b 6
000182F8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000182FD 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018302 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018307 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001830C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018311 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018316 06                         @gap6:		dc.b 6
00018317 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001831C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018321 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018326 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001832B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018330 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018335 06                         @gap7:		dc.b 6
00018336 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001833B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018340 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018345 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001834A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001834F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00018354 06                         @gap8:		dc.b 6
00018355 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001835A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001835F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00018364 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00018369 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001836E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00018373 06                         @gap9:		dc.b 6
00018374 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00018379 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001837E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00018383 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00018388 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001838D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00018392 06                         @gapA:		dc.b 6
00018393 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00018398 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001839D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000183A2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000183A7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000183AC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000183B1 06                         @gapB:		dc.b 6
000183B2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000183B7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000183BC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000183C1 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000183C6 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000183CB E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000183D0 06                         @gapC:		dc.b 6
000183D1 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000183D6 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000183DB C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000183E0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000183E5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000183EA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000183EF 06                         @gapD:		dc.b 6
000183F0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000183F5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000183FA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000183FF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018404 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018409 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001840E 06                         @gapE:		dc.b 6
0001840F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018414 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018419 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001841E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018423 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018428 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001842D 06                         @gapF:		dc.b 6
0001842E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018433 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018438 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001843D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018442 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018447 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001844C 0C                         @circle:	dc.b $C
0001844D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018452 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00018457 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001845C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018461 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00018466 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001846B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00018470 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00018475 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001847A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001847F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00018484 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001848A 00                         		even
0001848A 00                         		even
0001848A                            		include	"_incObj\67 Running Disc.asm"
0001848A                            ; ---------------------------------------------------------------------------
0001848A                            ; Object 67 - disc that	you run	around (SBZ)
0001848A                            ; ---------------------------------------------------------------------------
0001848A                            
0001848A                            RunningDisc:
0001848A 7000                       		moveq	#0,d0
0001848C 1028 0024                  		move.b	obRoutine(a0),d0
00018490 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00018494 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00018498                            ; ===========================================================================
00018498 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
0001849A 0000                       		dc.w Disc_Action-Disc_Index
0001849C                            
0001849C =00000032                  disc_origX:	equ $32		; original x-axis position
0001849C =00000030                  disc_origY:	equ $30		; original y-axis position
0001849C                            ; ===========================================================================
0001849C                            
0001849C                            Disc_Main:	; Routine 0
0001849C 5428 0024                  		addq.b	#2,obRoutine(a0)
000184A0 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000184A8 317C C344 0002             		move.w	#$C344,obGfx(a0)
000184AE 117C 0004 0001             		move.b	#4,obRender(a0)
000184B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000184BA 117C 0008 0014             		move.b	#8,obActWid(a0)
000184C0 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000184C6 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
000184CC 117C 0018 0034             		move.b	#$18,$34(a0)
000184D2 117C 0048 0038             		move.b	#$48,$38(a0)
000184D8 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184DC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000184E0 6700                       		beq.s	@typeis0	; branch if 0
000184E2 117C 0010 0034             		move.b	#$10,$34(a0)
000184E8 117C 0038 0038             		move.b	#$38,$38(a0)
000184EE                            
000184EE                            	@typeis0:
000184EE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000184F2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000184F6 4881                       		ext.w	d1
000184F8 E741                       		asl.w	#3,d1
000184FA 3141 0036                  		move.w	d1,$36(a0)
000184FE 1028 0022                  		move.b	obStatus(a0),d0
00018502 E418                       		ror.b	#2,d0
00018504 0200 00C0                  		andi.b	#$C0,d0
00018508 1140 0026                  		move.b	d0,obAngle(a0)
0001850C                            
0001850C                            Disc_Action:	; Routine 2
0001850C 6100 0000                  		bsr.w	Disc_MoveSonic
00018510 6100 0000                  		bsr.w	Disc_MoveSpot
00018514 6000 0000                  		bra.w	Disc_ChkDel
00018518                            ; ===========================================================================
00018518                            
00018518                            Disc_MoveSonic:
00018518 7400                       		moveq	#0,d2
0001851A 1428 0038                  		move.b	$38(a0),d2
0001851E 3602                       		move.w	d2,d3
00018520 D643                       		add.w	d3,d3
00018522 43F8 D000                  		lea	(v_player).w,a1
00018526 3029 0008                  		move.w	obX(a1),d0
0001852A 9068 0032                  		sub.w	disc_origX(a0),d0
0001852E D042                       		add.w	d2,d0
00018530 B043                       		cmp.w	d3,d0
00018532 6400                       		bcc.s	loc_155A8
00018534 3229 000C                  		move.w	obY(a1),d1
00018538 9268 0030                  		sub.w	disc_origY(a0),d1
0001853C D242                       		add.w	d2,d1
0001853E B243                       		cmp.w	d3,d1
00018540 6400                       		bcc.s	loc_155A8
00018542 0829 0001 0022             		btst	#1,obStatus(a1)
00018548 6700                       		beq.s	loc_155B8
0001854A 4228 003A                  		clr.b	$3A(a0)
0001854E 4E75                       		rts	
00018550                            ; ===========================================================================
00018550                            
00018550                            loc_155A8:
00018550 4A28 003A                  		tst.b	$3A(a0)
00018554 6700                       		beq.s	locret_155B6
00018556 4229 0038                  		clr.b	$38(a1)
0001855A 4228 003A                  		clr.b	$3A(a0)
0001855E                            
0001855E                            locret_155B6:
0001855E 4E75                       		rts	
00018560                            ; ===========================================================================
00018560                            
00018560                            loc_155B8:
00018560 4A28 003A                  		tst.b	$3A(a0)
00018564 6600                       		bne.s	loc_155E2
00018566 117C 0001 003A             		move.b	#1,$3A(a0)
0001856C 0829 0002 0022             		btst	#2,obStatus(a1)
00018572 6600                       		bne.s	loc_155D0
00018574 4229 001C                  		clr.b	obAnim(a1)
00018578                            
00018578                            loc_155D0:
00018578 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001857E 137C 0001 001D             		move.b	#1,obNextAni(a1)
00018584 137C 0001 0038             		move.b	#1,$38(a1)
0001858A                            
0001858A                            loc_155E2:
0001858A 3029 0020                  		move.w	obInertia(a1),d0
0001858E 4A68 0036                  		tst.w	$36(a0)
00018592 6A00                       		bpl.s	loc_15608
00018594 0C40 FC00                  		cmpi.w	#-$400,d0
00018598 6F00                       		ble.s	loc_155FA
0001859A 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000185A0 4E75                       		rts	
000185A2                            ; ===========================================================================
000185A2                            
000185A2                            loc_155FA:
000185A2 0C40 F100                  		cmpi.w	#-$F00,d0
000185A6 6C00                       		bge.s	locret_15606
000185A8 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000185AE                            
000185AE                            locret_15606:
000185AE 4E75                       		rts	
000185B0                            ; ===========================================================================
000185B0                            
000185B0                            loc_15608:
000185B0 0C40 0400                  		cmpi.w	#$400,d0
000185B4 6C00                       		bge.s	loc_15616
000185B6 337C 0400 0020             		move.w	#$400,obInertia(a1)
000185BC 4E75                       		rts	
000185BE                            ; ===========================================================================
000185BE                            
000185BE                            loc_15616:
000185BE 0C40 0F00                  		cmpi.w	#$F00,d0
000185C2 6F00                       		ble.s	locret_15622
000185C4 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
000185CA                            
000185CA                            locret_15622:
000185CA 4E75                       		rts	
000185CC                            ; ===========================================================================
000185CC                            
000185CC                            Disc_MoveSpot:
000185CC 3028 0036                  		move.w	$36(a0),d0
000185D0 D168 0026                  		add.w	d0,obAngle(a0)
000185D4 1028 0026                  		move.b	obAngle(a0),d0
000185D8 4EB9 0000 3A32             		jsr	(CalcSine).l
000185DE 3428 0030                  		move.w	disc_origY(a0),d2
000185E2 3628 0032                  		move.w	disc_origX(a0),d3
000185E6 7800                       		moveq	#0,d4
000185E8 1828 0034                  		move.b	$34(a0),d4
000185EC E14C                       		lsl.w	#8,d4
000185EE 2A04                       		move.l	d4,d5
000185F0 C9C0                       		muls.w	d0,d4
000185F2 4844                       		swap	d4
000185F4 CBC1                       		muls.w	d1,d5
000185F6 4845                       		swap	d5
000185F8 D842                       		add.w	d2,d4
000185FA DA43                       		add.w	d3,d5
000185FC 3144 000C                  		move.w	d4,obY(a0)
00018600 3145 0008                  		move.w	d5,obX(a0)
00018604 4E75                       		rts	
00018606                            ; ===========================================================================
00018606                            
00018606                            Disc_ChkDel:
00018622 4EF9 0000 F846             		jmp	(DisplaySprite).l
00018628                            
00018628                            	@delete:
00018628 4EF9 0000 F886             		jmp	(DeleteObject).l
00018628 4EF9 0000 F886             		jmp	(DeleteObject).l
0001862E                            Map_Disc:	include	"_maps\Running Disc.asm"
0001862E                            ; ---------------------------------------------------------------------------
0001862E                            ; Sprite mappings - disc that you run around (SBZ)
0001862E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001862E                            ; part of the level tiles.)
0001862E                            ; ---------------------------------------------------------------------------
0001862E                            Map_Disc_internal:
0001862E 0000                       		dc.w @spot-Map_Disc_internal
00018630 01                         @spot:		dc.b 1
00018631 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018636                            		even
00018636                            		even
00018636                            		include	"_incObj\68 Conveyor Belt.asm"
00018636                            ; ---------------------------------------------------------------------------
00018636                            ; Object 68 - conveyor belts (SBZ)
00018636                            ; ---------------------------------------------------------------------------
00018636                            
00018636                            Conveyor:
00018636 7000                       		moveq	#0,d0
00018638 1028 0024                  		move.b	obRoutine(a0),d0
0001863C 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018640 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018644                            ; ===========================================================================
00018644 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018646 0000                       		dc.w Conv_Action-Conv_Index
00018648                            
00018648 =00000036                  conv_speed:	equ $36
00018648 =00000038                  conv_width:	equ $38
00018648                            ; ===========================================================================
00018648                            
00018648                            Conv_Main:	; Routine 0
00018648 5428 0024                  		addq.b	#2,obRoutine(a0)
0001864C 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018652 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018656 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001865A 6700                       		beq.s	@typeis0	; if zero, branch
0001865C 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018662                            
00018662                            	@typeis0:
00018662 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018666 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001866A 4881                       		ext.w	d1
0001866C E841                       		asr.w	#4,d1
0001866E 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00018672                            
00018672                            Conv_Action:	; Routine 2
00018672 6100                       		bsr.s	@movesonic
00018690 4E75                       		rts	
00018692                            
00018692                            	@delete:
00018692 4EF9 0000 F886             		jmp	(DeleteObject).l
00018698                            ; ===========================================================================
00018698                            
00018698                            @movesonic:
00018698 7400                       		moveq	#0,d2
0001869A 1428 0038                  		move.b	conv_width(a0),d2
0001869E 3602                       		move.w	d2,d3
000186A0 D643                       		add.w	d3,d3
000186A2 43F8 D000                  		lea	(v_player).w,a1
000186A6 3029 0008                  		move.w	obX(a1),d0
000186AA 9068 0008                  		sub.w	obX(a0),d0
000186AE D042                       		add.w	d2,d0
000186B0 B043                       		cmp.w	d3,d0
000186B2 6400                       		bcc.s	@notonconveyor
000186B4 3229 000C                  		move.w	obY(a1),d1
000186B8 9268 000C                  		sub.w	obY(a0),d1
000186BC 0641 0030                  		addi.w	#$30,d1
000186C0 0C41 0030                  		cmpi.w	#$30,d1
000186C4 6400                       		bcc.s	@notonconveyor
000186C6 0829 0001 0022             		btst	#1,obStatus(a1)
000186CC 6600                       		bne.s	@notonconveyor
000186CE 3028 0036                  		move.w	conv_speed(a0),d0
000186D2 D169 0008                  		add.w	d0,obX(a1)
000186D6                            
000186D6                            	@notonconveyor:
000186D6 4E75                       		rts	
000186D6 4E75                       		rts	
000186D8                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
000186D8                            ; ---------------------------------------------------------------------------
000186D8                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000186D8                            ; ---------------------------------------------------------------------------
000186D8                            
000186D8                            SpinPlatform:
000186D8 7000                       		moveq	#0,d0
000186DA 1028 0024                  		move.b	obRoutine(a0),d0
000186DE 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
000186E2 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
000186E6                            ; ===========================================================================
000186E6 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
000186E8 0000                       		dc.w Spin_Trapdoor-Spin_Index
000186EA 0000                       		dc.w Spin_Spinner-Spin_Index
000186EC                            
000186EC =00000030                  spin_timer:	equ $30		; time counter until change
000186EC =00000032                  spin_timelen:	equ $32		; time between changes (general)
000186EC                            ; ===========================================================================
000186EC                            
000186EC                            Spin_Main:	; Routine 0
000186EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000186F0 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
000186F8 317C 4492 0002             		move.w	#$4492,obGfx(a0)
000186FE 0028 0004 0001             		ori.b	#4,obRender(a0)
00018704 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001870A 7000                       		moveq	#0,d0
0001870C 1028 0028                  		move.b	obSubtype(a0),d0
00018710 0240 000F                  		andi.w	#$F,d0
00018714 C0FC 003C                  		mulu.w	#$3C,d0
00018718 3140 0032                  		move.w	d0,spin_timelen(a0)
0001871C 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018720 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018722                            
00018722 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018726 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001872E 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018734 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001873A 117C 0002 001C             		move.b	#2,obAnim(a0)
00018740 7000                       		moveq	#0,d0
00018742 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018746 3200                       		move.w	d0,d1
00018748 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001874C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018750 3140 0030                  		move.w	d0,spin_timer(a0)
00018754 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018758 0241 0070                  		andi.w	#$70,d1
0001875C 0641 0010                  		addi.w	#$10,d1
00018760 E549                       		lsl.w	#2,d1
00018762 5341                       		subq.w	#1,d1
00018764 3141 0036                  		move.w	d1,$36(a0)
00018768 6000                       		bra.s	Spin_Spinner
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            Spin_Trapdoor:	; Routine 2
0001876A 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
0001876E 6A00                       		bpl.s	@animate	; if time remains, branch
00018770                            
00018770 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018776 0868 0000 001C             		bchg	#0,obAnim(a0)
0001877C 4A28 0001                  		tst.b	obRender(a0)
00018780 6A00                       		bpl.s	@animate
0001878C                            
0001878C                            	@animate:
0001878C 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018792 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00018798 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
0001879C 6600                       		bne.s	@notsolid	; if not, branch
0001879E 323C 004B                  		move.w	#$4B,d1
000187A2 343C 000C                  		move.w	#$C,d2
000187A6 3602                       		move.w	d2,d3
000187A8 5243                       		addq.w	#1,d3
000187AA 3828 0008                  		move.w	obX(a0),d4
000187AE 6100 94A4                  		bsr.w	SolidObject
000187B2 6000 9008                  		bra.w	RememberState
000187B6                            ; ===========================================================================
000187B6                            
000187B6                            @notsolid:
000187B6 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000187BC 6700                       		beq.s	@display	; if not, branch
000187BE 43F8 D000                  		lea	(v_player).w,a1
000187C2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000187C8 08A8 0003 0022             		bclr	#3,obStatus(a0)
000187CE 4228 0025                  		clr.b	obSolid(a0)
000187D2                            
000187D2                            	@display:
000187D2 6000 8FE8                  		bra.w	RememberState
000187D6                            ; ===========================================================================
000187D6                            
000187D6                            Spin_Spinner:	; Routine 4
000187D6 3038 FE04                  		move.w	(v_framecount).w,d0
000187DA C068 0036                  		and.w	$36(a0),d0
000187DE 6600                       		bne.s	@delay
000187E0 117C 0001 0034             		move.b	#1,$34(a0)
000187E6                            
000187E6                            	@delay:
000187E6 4A28 0034                  		tst.b	$34(a0)
000187EA 6700                       		beq.s	@animate
000187EC 5368 0030                  		subq.w	#1,spin_timer(a0)
000187F0 6A00                       		bpl.s	@animate
000187F2 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000187F8 4228 0034                  		clr.b	$34(a0)
000187FC 0868 0000 001C             		bchg	#0,obAnim(a0)
00018802                            
00018802                            	@animate:
00018802 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018808 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001880E 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018812 6600                       		bne.s	@notsolid2	; if not, branch
00018814 323C 001B                  		move.w	#$1B,d1
00018818 343C 0007                  		move.w	#7,d2
0001881C 3602                       		move.w	d2,d3
0001881E 5243                       		addq.w	#1,d3
00018820 3828 0008                  		move.w	obX(a0),d4
00018824 6100 942E                  		bsr.w	SolidObject
00018828 6000 8F92                  		bra.w	RememberState
0001882C                            ; ===========================================================================
0001882C                            
0001882C                            @notsolid2:
0001882C 0828 0003 0022             		btst	#3,obStatus(a0)
00018832 6700                       		beq.s	@display
00018834 43F8 D000                  		lea	(v_player).w,a1
00018838 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001883E 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018844 4228 0025                  		clr.b	obSolid(a0)
00018848                            
00018848                            	@display:
00018848 6000 8F72                  		bra.w	RememberState
00018848 6000 8F72                  		bra.w	RememberState
0001884C                            		include	"_anim\SBZ Spinning Platforms.asm"
0001884C                            ; ---------------------------------------------------------------------------
0001884C                            ; Animation script - trapdoor (SBZ)
0001884C                            ; ---------------------------------------------------------------------------
0001884C 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001884E 0000                       		dc.w @trapclose-Ani_Spin
00018850 0000                       		dc.w @spin1-Ani_Spin
00018852 0000                       		dc.w @spin2-Ani_Spin
00018854 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
0001885A 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018860 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018874 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018888                            		even
00018888                            		even
00018888                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018888                            ; ---------------------------------------------------------------------------
00018888                            ; Sprite mappings - trapdoor (SBZ)
00018888                            ; ---------------------------------------------------------------------------
00018888                            Map_Trap_internal:
00018888 0000                       		dc.w @closed-Map_Trap_internal
0001888A 0000                       		dc.w @half-Map_Trap_internal
0001888C 0000                       		dc.w @open-Map_Trap_internal
0001888E 04                         @closed:	dc.b 4
0001888F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018894 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018899 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001889E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000188A3 08                         @half:		dc.b 8
000188A4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000188A9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000188AE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000188B3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000188B8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000188BD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000188C2 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000188C7 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000188CC 04                         @open:		dc.b 4
000188CD 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000188D2 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000188D7 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000188DC 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000188E2 00                         		even
000188E2 00                         		even
000188E2                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000188E2                            ; ---------------------------------------------------------------------------
000188E2                            ; Sprite mappings - spinning platforms (SBZ)
000188E2                            ; ---------------------------------------------------------------------------
000188E2                            Map_Spin_internal:
000188E2 0000                       		dc.w @flat-Map_Spin_internal
000188E4 0000                       		dc.w @spin1-Map_Spin_internal
000188E6 0000                       		dc.w @spin2-Map_Spin_internal
000188E8 0000                       		dc.w @spin3-Map_Spin_internal
000188EA 0000                       		dc.w @spin4-Map_Spin_internal
000188EC 02                         @flat:		dc.b 2
000188ED F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000188F2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000188F7 02                         @spin1:		dc.b 2
000188F8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000188FD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018902 02                         @spin2:		dc.b 2
00018903 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018908 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001890D 02                         @spin3:		dc.b 2
0001890E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018913 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018918 02                         @spin4:		dc.b 2
00018919 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001891E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018924 00                         		even
00018924 00                         		even
00018924                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018924                            ; ---------------------------------------------------------------------------
00018924                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018924                            ; ---------------------------------------------------------------------------
00018924                            
00018924                            Saws:
00018924 7000                       		moveq	#0,d0
00018926 1028 0024                  		move.b	obRoutine(a0),d0
0001892A 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
0001892E 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018932                            ; ===========================================================================
00018932 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018934 0000                       		dc.w Saw_Action-Saw_Index
00018936                            
00018936 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018936 =00000038                  saw_origY:	equ $38		; original y-axis position
00018936 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018936                            ; ===========================================================================
00018936                            
00018936                            Saw_Main:	; Routine 0
00018936 5428 0024                  		addq.b	#2,obRoutine(a0)
0001893A 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018942 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018948 117C 0004 0001             		move.b	#4,obRender(a0)
0001894E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018954 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001895A 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018960 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018966 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
0001896C 6400                       		bcc.s	Saw_Action	; if yes, branch
0001896E 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018974                            
00018974                            Saw_Action:	; Routine 2
00018974 7000                       		moveq	#0,d0
00018976 1028 0028                  		move.b	obSubtype(a0),d0
0001897A 0240 0007                  		andi.w	#7,d0
0001897E D040                       		add.w	d0,d0
00018980 323B 0000                  		move.w	@index(pc,d0.w),d1
00018984 4EBB 1000                  		jsr	@index(pc,d1.w)
000189A4 4EF9 0000 F846             		jmp	(DisplaySprite).l
000189AA                            
000189AA                            	@delete:
000189AA 4EF9 0000 F886             		jmp	(DeleteObject).l
000189B0                            ; ===========================================================================
000189B0 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
000189B6 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
000189BA                            ; ===========================================================================
000189BA                            
000189BA                            @type00:
000189BA 4E75                       		rts			; doesn't move
000189BC                            ; ===========================================================================
000189BC                            
000189BC                            @type01:
000189BC 323C 0060                  		move.w	#$60,d1
000189C0 7000                       		moveq	#0,d0
000189C2 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000189C6 0828 0000 0022             		btst	#0,obStatus(a0)
000189CC 6700                       		beq.s	@noflip01
000189CE 4440                       		neg.w	d0
000189D0 D041                       		add.w	d1,d0
000189D2                            
000189D2                            	@noflip01:
000189D2 3228 003A                  		move.w	saw_origX(a0),d1
000189D6 9240                       		sub.w	d0,d1
000189D8 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000189DC                            
000189DC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000189E0 6A00                       		bpl.s	@sameframe01
000189E2 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000189E8 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000189EE                            
000189EE                            	@sameframe01:
000189EE 4A28 0001                  		tst.b	obRender(a0)
000189F2 6A00                       		bpl.s	@nosound01
000189F4 3038 FE04                  		move.w	(v_framecount).w,d0
000189F8 0240 000F                  		andi.w	#$F,d0
000189FC 6600                       		bne.s	@nosound01
00018A08                            
00018A08                            	@nosound01:
00018A08 4E75                       		rts	
00018A0A                            ; ===========================================================================
00018A0A                            
00018A0A                            @type02:
00018A0A 323C 0030                  		move.w	#$30,d1
00018A0E 7000                       		moveq	#0,d0
00018A10 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018A14 0828 0000 0022             		btst	#0,obStatus(a0)
00018A1A 6700                       		beq.s	@noflip02
00018A1C 4440                       		neg.w	d0
00018A1E 0640 0080                  		addi.w	#$80,d0
00018A22                            
00018A22                            	@noflip02:
00018A22 3228 0038                  		move.w	saw_origY(a0),d1
00018A26 9240                       		sub.w	d0,d1
00018A28 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018A2C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A30 6A00                       		bpl.s	@sameframe02
00018A32 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A38 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A3E                            
00018A3E                            	@sameframe02:
00018A3E 4A28 0001                  		tst.b	obRender(a0)
00018A42 6A00                       		bpl.s	@nosound02
00018A44 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018A48 0C00 0018                  		cmpi.b	#$18,d0
00018A4C 6600                       		bne.s	@nosound02
00018A58                            
00018A58                            	@nosound02:
00018A58 4E75                       		rts	
00018A5A                            ; ===========================================================================
00018A5A                            
00018A5A                            @type03:
00018A5A 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018A5E 6600                       		bne.s	@here03		; if yes, branch
00018A60                            
00018A60 3038 D008                  		move.w	(v_player+obX).w,d0
00018A64 0440 00C0                  		subi.w	#$C0,d0
00018A68 6500                       		bcs.s	@nosaw03x
00018A6A 9068 0008                  		sub.w	obX(a0),d0
00018A6E 6500                       		bcs.s	@nosaw03x
00018A70 3038 D00C                  		move.w	(v_player+obY).w,d0
00018A74 0440 0080                  		subi.w	#$80,d0
00018A78 B068 000C                  		cmp.w	obY(a0),d0
00018A7C 6400                       		bcc.s	@nosaw03y
00018A7E 0640 0100                  		addi.w	#$100,d0
00018A82 B068 000C                  		cmp.w	obY(a0),d0
00018A86 6500                       		bcs.s	@nosaw03y
00018A88 117C 0001 003D             		move.b	#1,saw_here(a0)
00018A8E 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018A94 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018A9A 117C 0002 001A             		move.b	#2,obFrame(a0)
00018AAA                            
00018AAA                            	@nosaw03x:
00018AAA 588F                       		addq.l	#4,sp
00018AAC                            
00018AAC                            	@nosaw03y:
00018AAC 4E75                       		rts	
00018AAE                            ; ===========================================================================
00018AAE                            
00018AAE                            @here03:
00018AAE 4EB9 0000 F832             		jsr	(SpeedToPos).l
00018AB4 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018ABA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018ABE 6A00                       		bpl.s	@sameframe03
00018AC0 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018AC6 0868 0000 001A             		bchg	#0,obFrame(a0)
00018ACC                            
00018ACC                            	@sameframe03:
00018ACC 4E75                       		rts	
00018ACE                            ; ===========================================================================
00018ACE                            
00018ACE                            @type04:
00018ACE 4A28 003D                  		tst.b	saw_here(a0)
00018AD2 6600                       		bne.s	@here04
00018AD4 3038 D008                  		move.w	(v_player+obX).w,d0
00018AD8 0640 00E0                  		addi.w	#$E0,d0
00018ADC 9068 0008                  		sub.w	obX(a0),d0
00018AE0 6400                       		bcc.s	@nosaw04x
00018AE2 3038 D00C                  		move.w	(v_player+obY).w,d0
00018AE6 0440 0080                  		subi.w	#$80,d0
00018AEA B068 000C                  		cmp.w	obY(a0),d0
00018AEE 6400                       		bcc.s	@nosaw04y
00018AF0 0640 0100                  		addi.w	#$100,d0
00018AF4 B068 000C                  		cmp.w	obY(a0),d0
00018AF8 6500                       		bcs.s	@nosaw04y
00018AFA 117C 0001 003D             		move.b	#1,saw_here(a0)
00018B00 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018B06 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018B0C 117C 0002 001A             		move.b	#2,obFrame(a0)
00018B1C                            
00018B1C                            	@nosaw04x:
00018B1C 588F                       		addq.l	#4,sp
00018B1E                            
00018B1E                            	@nosaw04y:
00018B1E 4E75                       		rts	
00018B20                            ; ===========================================================================
00018B20                            
00018B20                            @here04:
00018B20 4EB9 0000 F832             		jsr	(SpeedToPos).l
00018B26 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018B2C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B30 6A00                       		bpl.s	@sameframe04
00018B32 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B38 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B3E                            
00018B3E                            	@sameframe04:
00018B3E 4E75                       		rts	
00018B3E 4E75                       		rts	
00018B40                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018B40                            ; ---------------------------------------------------------------------------
00018B40                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018B40                            ; ---------------------------------------------------------------------------
00018B40                            Map_Saw_internal:
00018B40 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018B42 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018B44 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018B46 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018B48 07                         @pizzacutter1:	dc.b 7
00018B49 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018B4E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018B53 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018B58 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018B5D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018B62 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018B67 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018B6C 07                         @pizzacutter2:	dc.b 7
00018B6D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018B72 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018B77 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018B7C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018B81 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018B86 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018B8B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018B90 04                         @groundsaw1:	dc.b 4
00018B91 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018B96 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018B9B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018BA0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018BA5 04                         @groundsaw2:	dc.b 4
00018BA6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018BAB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018BB0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018BB5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018BBA                            		even
00018BBA                            		even
00018BBA                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018BBA                            ; ---------------------------------------------------------------------------
00018BBA                            ; Object 6B - stomper and sliding door (SBZ)
00018BBA                            ; ---------------------------------------------------------------------------
00018BBA                            
00018BBA                            ScrapStomp:
00018BBA 7000                       		moveq	#0,d0
00018BBC 1028 0024                  		move.b	obRoutine(a0),d0
00018BC0 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018BC4 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018BC8                            ; ===========================================================================
00018BC8 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018BCA 0000                       		dc.w Sto_Action-Sto_Index
00018BCC                            
00018BCC =00000016                  sto_height:	equ $16
00018BCC =00000034                  sto_origX:	equ $34		; original x-axis position
00018BCC =00000030                  sto_origY:	equ $30		; original y-axis position
00018BCC =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018BCC                            
00018BCC 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018BD0 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018BD4 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018BD8 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018BDC 8040 0005                  		dc.b  $80, $40,	  0,   5
00018BE0                            ; ===========================================================================
00018BE0                            
00018BE0                            Sto_Main:	; Routine 0
00018BE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00018BE4 7000                       		moveq	#0,d0
00018BE6 1028 0028                  		move.b	obSubtype(a0),d0
00018BEA E448                       		lsr.w	#2,d0
00018BEC 0240 001C                  		andi.w	#$1C,d0
00018BF0 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018BF4 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018BF8 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018BFC E448                       		lsr.w	#2,d0
00018BFE 1140 001A                  		move.b	d0,obFrame(a0)
00018C02 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018C0A 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018C10 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018C16 6600                       		bne.s	@isSBZ12	; if not, branch
00018C18 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018C1E 6700                       		beq.s	@isSBZ3
00018C20                            
00018C20                            @chkdel:
00018C20 45F8 FC00                  		lea	(v_objstate).w,a2
00018C24 7000                       		moveq	#0,d0
00018C26 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C2A 6700                       		beq.s	@delete
00018C2C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C32                            
00018C32                            	@delete:
00018C32 4EF9 0000 F886             		jmp	(DeleteObject).l
00018C38                            ; ===========================================================================
00018C38                            
00018C38                            @isSBZ3:
00018C38 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018C3E 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018C44 6600                       		bne.s	@isSBZ12
00018C46 45F8 FC00                  		lea	(v_objstate).w,a2
00018C4A 7000                       		moveq	#0,d0
00018C4C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C50 6700                       		beq.s	@isSBZ12
00018C52 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018C58 6700                       		beq.s	@isSBZ12
00018C5A 4238 F7CB                  		clr.b	(v_obj6B).w
00018C5E 60C0                       		bra.s	@chkdel
00018C60                            ; ===========================================================================
00018C60                            
00018C60                            @isSBZ12:
00018C60 0028 0004 0001             		ori.b	#4,obRender(a0)
00018C66 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018C6C 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018C72 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018C78 7000                       		moveq	#0,d0
00018C7A 101B                       		move.b	(a3)+,d0
00018C7C 3140 003C                  		move.w	d0,$3C(a0)
00018C80 7000                       		moveq	#0,d0
00018C82 1028 0028                  		move.b	obSubtype(a0),d0
00018C86 6A00                       		bpl.s	Sto_Action
00018C88 0200 000F                  		andi.b	#$F,d0
00018C8C 1140 003E                  		move.b	d0,$3E(a0)
00018C90 1153 0028                  		move.b	(a3),obSubtype(a0)
00018C94 0C13 0005                  		cmpi.b	#5,(a3)
00018C98 6600                       		bne.s	@chkgone
00018C9A 08E8 0004 0001             		bset	#4,obRender(a0)
00018CA0                            
00018CA0                            	@chkgone:
00018CA0 45F8 FC00                  		lea	(v_objstate).w,a2
00018CA4 7000                       		moveq	#0,d0
00018CA6 1028 0023                  		move.b	obRespawnNo(a0),d0
00018CAA 6700                       		beq.s	Sto_Action
00018CAC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018CB2                            
00018CB2                            Sto_Action:	; Routine 2
00018CB2 3F28 0008                  		move.w	obX(a0),-(sp)
00018CB6 7000                       		moveq	#0,d0
00018CB8 1028 0028                  		move.b	obSubtype(a0),d0
00018CBC 0240 000F                  		andi.w	#$F,d0
00018CC0 D040                       		add.w	d0,d0
00018CC2 323B 0000                  		move.w	@index(pc,d0.w),d1
00018CC6 4EBB 1000                  		jsr	@index(pc,d1.w)
00018CCA 381F                       		move.w	(sp)+,d4
00018CCC 4A28 0001                  		tst.b	obRender(a0)
00018CD0 6A00                       		bpl.s	@chkdel
00018CD2 7200                       		moveq	#0,d1
00018CD4 1228 0014                  		move.b	obActWid(a0),d1
00018CD8 0641 000B                  		addi.w	#$B,d1
00018CDC 7400                       		moveq	#0,d2
00018CDE 1428 0016                  		move.b	sto_height(a0),d2
00018CE2 3602                       		move.w	d2,d3
00018CE4 5243                       		addq.w	#1,d3
00018CE6 6100 8F6C                  		bsr.w	SolidObject
00018CEA                            
00018CEA                            	@chkdel:
00018D06 4EF9 0000 F846             		jmp	(DisplaySprite).l
00018D0C                            
00018D0C                            	@chkgone:
00018D0C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018D12 6600                       		bne.s	@delete
00018D14 4238 F7CB                  		clr.b	(v_obj6B).w
00018D18 45F8 FC00                  		lea	(v_objstate).w,a2
00018D1C 7000                       		moveq	#0,d0
00018D1E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D22 6700                       		beq.s	@delete
00018D24 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D2A                            
00018D2A                            	@delete:
00018D2A 4EF9 0000 F886             		jmp	(DeleteObject).l
00018D30                            ; ===========================================================================
00018D30 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018D34 0000 0000                  		dc.w @type02-@index, @type03-@index
00018D38 0000 0000                  		dc.w @type04-@index, @type05-@index
00018D3C                            ; ===========================================================================
00018D3C                            
00018D3C                            @type00:
00018D3C 4E75                       		rts
00018D3E                            ; ===========================================================================
00018D3E                            
00018D3E                            @type01:
00018D3E 4A28 0038                  		tst.b	sto_active(a0)
00018D42 6600                       		bne.s	@isactive01
00018D44 45F8 F7E0                  		lea	(f_switch).w,a2
00018D48 7000                       		moveq	#0,d0
00018D4A 1028 003E                  		move.b	$3E(a0),d0
00018D4E 0832 0000 0000             		btst	#0,(a2,d0.w)
00018D54 6700                       		beq.s	@loc_15DC2
00018D56 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D5C                            
00018D5C                            	@isactive01:
00018D5C 3028 003C                  		move.w	$3C(a0),d0
00018D60 B068 003A                  		cmp.w	$3A(a0),d0
00018D64 6700                       		beq.s	@loc_15DE0
00018D66 5468 003A                  		addq.w	#2,$3A(a0)
00018D6A                            
00018D6A                            	@loc_15DC2:
00018D6A 3028 003A                  		move.w	$3A(a0),d0
00018D6E 0828 0000 0022             		btst	#0,obStatus(a0)
00018D74 6700                       		beq.s	@noflip01
00018D76 4440                       		neg.w	d0
00018D78 0640 0080                  		addi.w	#$80,d0
00018D7C                            
00018D7C                            	@noflip01:
00018D7C 3228 0034                  		move.w	sto_origX(a0),d1
00018D80 9240                       		sub.w	d0,d1
00018D82 3141 0008                  		move.w	d1,obX(a0)
00018D86 4E75                       		rts	
00018D88                            ; ===========================================================================
00018D88                            
00018D88                            @loc_15DE0:
00018D88 5228 0028                  		addq.b	#1,obSubtype(a0)
00018D8C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018D92 4228 0038                  		clr.b	sto_active(a0)
00018D96 45F8 FC00                  		lea	(v_objstate).w,a2
00018D9A 7000                       		moveq	#0,d0
00018D9C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DA0 67C8                       		beq.s	@loc_15DC2
00018DA2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018DA8 60C0                       		bra.s	@loc_15DC2
00018DAA                            ; ===========================================================================
00018DAA                            
00018DAA                            @type02:
00018DAA 4A28 0038                  		tst.b	sto_active(a0)
00018DAE 6600                       		bne.s	@isactive02
00018DB0 5368 0036                  		subq.w	#1,$36(a0)
00018DB4 6600                       		bne.s	@loc_15E1E
00018DB6 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DBC                            
00018DBC                            	@isactive02:
00018DBC 4A68 003A                  		tst.w	$3A(a0)
00018DC0 6700                       		beq.s	@loc_15E3C
00018DC2 5568 003A                  		subq.w	#2,$3A(a0)
00018DC6                            
00018DC6                            	@loc_15E1E:
00018DC6 3028 003A                  		move.w	$3A(a0),d0
00018DCA 0828 0000 0022             		btst	#0,obStatus(a0)
00018DD0 6700                       		beq.s	@noflip02
00018DD2 4440                       		neg.w	d0
00018DD4 0640 0080                  		addi.w	#$80,d0
00018DD8                            
00018DD8                            	@noflip02:
00018DD8 3228 0034                  		move.w	sto_origX(a0),d1
00018DDC 9240                       		sub.w	d0,d1
00018DDE 3141 0008                  		move.w	d1,obX(a0)
00018DE2 4E75                       		rts	
00018DE4                            ; ===========================================================================
00018DE4                            
00018DE4                            @loc_15E3C:
00018DE4 5328 0028                  		subq.b	#1,obSubtype(a0)
00018DE8 4228 0038                  		clr.b	sto_active(a0)
00018DEC 45F8 FC00                  		lea	(v_objstate).w,a2
00018DF0 7000                       		moveq	#0,d0
00018DF2 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DF6 67CE                       		beq.s	@loc_15E1E
00018DF8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018DFE 60C6                       		bra.s	@loc_15E1E
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            @type03:
00018E00 4A28 0038                  		tst.b	sto_active(a0)
00018E04 6600                       		bne.s	@isactive03
00018E06 4A68 003A                  		tst.w	$3A(a0)
00018E0A 6700                       		beq.s	@loc_15E6A
00018E0C 5368 003A                  		subq.w	#1,$3A(a0)
00018E10 6000                       		bra.s	@loc_15E8E
00018E12                            ; ===========================================================================
00018E12                            
00018E12                            @loc_15E6A:
00018E12 5368 0036                  		subq.w	#1,$36(a0)
00018E16 6A00                       		bpl.s	@loc_15E8E
00018E18 317C 003C 0036             		move.w	#$3C,$36(a0)
00018E1E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E24                            
00018E24                            @isactive03:
00018E24 5068 003A                  		addq.w	#8,$3A(a0)
00018E28 3028 003A                  		move.w	$3A(a0),d0
00018E2C B068 003C                  		cmp.w	$3C(a0),d0
00018E30 6600                       		bne.s	@loc_15E8E
00018E32 4228 0038                  		clr.b	sto_active(a0)
00018E36                            
00018E36                            @loc_15E8E:
00018E36 3028 003A                  		move.w	$3A(a0),d0
00018E3A 0828 0000 0022             		btst	#0,obStatus(a0)
00018E40 6700                       		beq.s	@noflip03
00018E42 4440                       		neg.w	d0
00018E44 0640 0038                  		addi.w	#$38,d0
00018E48                            
00018E48                            	@noflip03:
00018E48 3228 0030                  		move.w	sto_origY(a0),d1
00018E4C D240                       		add.w	d0,d1
00018E4E 3141 000C                  		move.w	d1,obY(a0)
00018E52 4E75                       		rts	
00018E54                            ; ===========================================================================
00018E54                            
00018E54                            @type04:
00018E54 4A28 0038                  		tst.b	sto_active(a0)
00018E58 6600                       		bne.s	@isactive04
00018E5A 4A68 003A                  		tst.w	$3A(a0)
00018E5E 6700                       		beq.s	@loc_15EBE
00018E60 5168 003A                  		subq.w	#8,$3A(a0)
00018E64 6000                       		bra.s	@loc_15EF0
00018E66                            ; ===========================================================================
00018E66                            
00018E66                            @loc_15EBE:
00018E66 5368 0036                  		subq.w	#1,$36(a0)
00018E6A 6A00                       		bpl.s	@loc_15EF0
00018E6C 317C 003C 0036             		move.w	#$3C,$36(a0)
00018E72 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E78                            
00018E78                            @isactive04:
00018E78 3028 003A                  		move.w	$3A(a0),d0
00018E7C B068 003C                  		cmp.w	$3C(a0),d0
00018E80 6700                       		beq.s	@loc_15EE0
00018E82 5068 003A                  		addq.w	#8,$3A(a0)
00018E86 6000                       		bra.s	@loc_15EF0
00018E88                            ; ===========================================================================
00018E88                            
00018E88                            @loc_15EE0:
00018E88 5368 0036                  		subq.w	#1,$36(a0)
00018E8C 6A00                       		bpl.s	@loc_15EF0
00018E8E 317C 003C 0036             		move.w	#$3C,$36(a0)
00018E94 4228 0038                  		clr.b	sto_active(a0)
00018E98                            
00018E98                            @loc_15EF0:
00018E98 3028 003A                  		move.w	$3A(a0),d0
00018E9C 0828 0000 0022             		btst	#0,obStatus(a0)
00018EA2 6700                       		beq.s	@noflip04
00018EA4 4440                       		neg.w	d0
00018EA6 0640 0038                  		addi.w	#$38,d0
00018EAA                            
00018EAA                            	@noflip04:
00018EAA 3228 0030                  		move.w	sto_origY(a0),d1
00018EAE D240                       		add.w	d0,d1
00018EB0 3141 000C                  		move.w	d1,obY(a0)
00018EB4 4E75                       		rts	
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            @type05:
00018EB6 4A28 0038                  		tst.b	sto_active(a0)
00018EBA 6600                       		bne.s	@loc_15F3E
00018EBC 45F8 F7E0                  		lea	(f_switch).w,a2
00018EC0 7000                       		moveq	#0,d0
00018EC2 1028 003E                  		move.b	$3E(a0),d0
00018EC6 0832 0000 0000             		btst	#0,(a2,d0.w)
00018ECC 6700                       		beq.s	@locret_15F5C
00018ECE 117C 0001 0038             		move.b	#1,sto_active(a0)
00018ED4 45F8 FC00                  		lea	(v_objstate).w,a2
00018ED8 7000                       		moveq	#0,d0
00018EDA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018EDE 6700                       		beq.s	@loc_15F3E
00018EE0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EE6                            
00018EE6                            @loc_15F3E:
00018EE6 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018EEE 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018EF6 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018EFC 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018F02 6700                       		beq.s	@loc_15F5E
00018F04                            
00018F04                            @locret_15F5C:
00018F04 4E75                       		rts	
00018F06                            ; ===========================================================================
00018F06                            
00018F06                            @loc_15F5E:
00018F06 4228 0028                  		clr.b	obSubtype(a0)
00018F0A 4228 0038                  		clr.b	sto_active(a0)
00018F0E 4E75                       		rts	
00018F0E 4E75                       		rts	
00018F10                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018F10                            ; ---------------------------------------------------------------------------
00018F10                            ; Sprite mappings - stomper and	platforms (SBZ)
00018F10                            ; ---------------------------------------------------------------------------
00018F10                            Map_Stomp_internal:
00018F10 0000                       		dc.w @door-Map_Stomp_internal
00018F12 0000                       		dc.w @stomper-Map_Stomp_internal
00018F14 0000                       		dc.w @stomper-Map_Stomp_internal
00018F16 0000                       		dc.w @stomper-Map_Stomp_internal
00018F18 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018F1A 04                         @door:		dc.b 4
00018F1B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018F20 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018F25 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018F2A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018F2F 08                         @stomper:	dc.b 8
00018F30 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018F35 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018F3A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018F3F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018F44 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018F49 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018F4E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018F53 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018F58 0E                         @bigdoor:	dc.b $E
00018F59 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018F5E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018F63 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018F68 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018F6D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018F72 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018F77 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018F7C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018F81 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018F86 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018F8B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018F90 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018F95 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018F9A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018FA0 00                         		even
00018FA0 00                         		even
00018FA0                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018FA0                            ; ---------------------------------------------------------------------------
00018FA0                            ; Object 6C - vanishing	platforms (SBZ)
00018FA0                            ; ---------------------------------------------------------------------------
00018FA0                            
00018FA0                            VanishPlatform:
00018FA0 7000                       		moveq	#0,d0
00018FA2 1028 0024                  		move.b	obRoutine(a0),d0
00018FA6 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018FAA 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018FAE                            ; ===========================================================================
00018FAE 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018FB0 0000                       		dc.w VanP_Vanish-VanP_Index
00018FB2 0000                       		dc.w VanP_Appear-VanP_Index
00018FB4 0000                       		dc.w loc_16068-VanP_Index
00018FB6                            
00018FB6 =00000030                  vanp_timer:	equ $30		; counter for time until event
00018FB6 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018FB6                            ; ===========================================================================
00018FB6                            
00018FB6                            VanP_Main:	; Routine 0
00018FB6 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018FBA 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018FC2 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00018FC8 0028 0004 0001             		ori.b	#4,obRender(a0)
00018FCE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018FD4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018FDA 7000                       		moveq	#0,d0
00018FDC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018FE0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018FE4 5240                       		addq.w	#1,d0		; add 1
00018FE6 EF48                       		lsl.w	#7,d0		; multiply by $80
00018FE8 3200                       		move.w	d0,d1
00018FEA 5340                       		subq.w	#1,d0
00018FEC 3140 0030                  		move.w	d0,vanp_timer(a0)
00018FF0 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018FF4 7000                       		moveq	#0,d0
00018FF6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018FFA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018FFE 0641 0080                  		addi.w	#$80,d1
00019002 C0C1                       		mulu.w	d1,d0
00019004 E088                       		lsr.l	#8,d0
00019006 3140 0036                  		move.w	d0,$36(a0)
0001900A 5341                       		subq.w	#1,d1
0001900C 3141 0038                  		move.w	d1,$38(a0)
00019010                            
00019010                            loc_16068:	; Routine 6
00019010 3038 FE04                  		move.w	(v_framecount).w,d0
00019014 9068 0036                  		sub.w	$36(a0),d0
00019018 C068 0038                  		and.w	$38(a0),d0
0001901C 6600                       		bne.s	@animate
0001901E 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019022 6000                       		bra.s	VanP_Vanish
00019024                            ; ===========================================================================
00019024                            
00019024                            @animate:
00019024 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001902A 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00019030 6000 878A                  		bra.w	RememberState
00019034                            ; ===========================================================================
00019034                            
00019034                            VanP_Vanish:	; Routine 2
00019034                            VanP_Appear:	; Routine 4
00019034 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019038 6A00                       		bpl.s	@wait
0001903A 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019040 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00019044 6700                       		beq.s	@isvanishing	; if yes, branch
00019046 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001904C                            
0001904C                            	@isvanishing:
0001904C 0868 0000 001C             		bchg	#0,obAnim(a0)
00019052                            
00019052                            	@wait:
00019052 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019058 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001905E 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00019064 6600                       		bne.s	@notsolid	; if yes, branch
00019066 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001906C 6600                       		bne.s	@loc_160D6
0001906E 7200                       		moveq	#0,d1
00019070 1228 0014                  		move.b	obActWid(a0),d1
00019074 4EB9 0000 905A             		jsr	(PlatformObject).l
0001907A 6000 8740                  		bra.w	RememberState
0001907E                            ; ===========================================================================
0001907E                            
0001907E                            @loc_160D6:
0001907E 7200                       		moveq	#0,d1
00019080 1228 0014                  		move.b	obActWid(a0),d1
00019084 4EB9 0000 91CE             		jsr	(ExitPlatform).l
0001908A 3428 0008                  		move.w	obX(a0),d2
0001908E 4EB9 0000 9738             		jsr	(MvSonicOnPtfm2).l
00019094 6000 8726                  		bra.w	RememberState
00019098                            ; ===========================================================================
00019098                            
00019098                            @notsolid:
00019098 0828 0003 0022             		btst	#3,obStatus(a0)
0001909E 6700                       		beq.s	@display
000190A0 43F8 D000                  		lea	(v_player).w,a1
000190A4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000190AA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000190B0 117C 0002 0024             		move.b	#2,obRoutine(a0)
000190B6 4228 0025                  		clr.b	obSolid(a0)
000190BA                            
000190BA                            	@display:
000190BA 6000 8700                  		bra.w	RememberState
000190BA 6000 8700                  		bra.w	RememberState
000190BE                            		include	"_anim\SBZ Vanishing Platforms.asm"
000190BE                            ; ---------------------------------------------------------------------------
000190BE                            ; Animation script - vanishing platforms (SBZ)
000190BE                            ; ---------------------------------------------------------------------------
000190BE 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000190C0 0000                       		dc.w @appear-Ani_Van
000190C2 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
000190CA 00                         		even
000190CA 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
000190D2 00                         		even
000190D2 00                         		even
000190D2                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
000190D2                            ; ---------------------------------------------------------------------------
000190D2                            ; Sprite mappings - vanishing platforms	(SBZ)
000190D2                            ; ---------------------------------------------------------------------------
000190D2                            Map_VanP_internal:
000190D2 0000                       		dc.w @whole-Map_VanP_internal
000190D4 0000                       		dc.w @half-Map_VanP_internal
000190D6 0000                       		dc.w @quarter-Map_VanP_internal
000190D8 0000                       		dc.w @gone-Map_VanP_internal
000190DA 01                         @whole:		dc.b 1
000190DB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000190E0 01                         @half:		dc.b 1
000190E1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000190E6 01                         @quarter:	dc.b 1
000190E7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000190EC 00                         @gone:		dc.b 0
000190EE 00                         		even
000190EE 00                         		even
000190EE                            		include	"_incObj\6E Electrocuter.asm"
000190EE                            ; ---------------------------------------------------------------------------
000190EE                            ; Object 6E - electrocution orbs (SBZ)
000190EE                            ; ---------------------------------------------------------------------------
000190EE                            
000190EE                            Electro:
000190EE 7000                       		moveq	#0,d0
000190F0 1028 0024                  		move.b	obRoutine(a0),d0
000190F4 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
000190F8 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
000190FC                            ; ===========================================================================
000190FC 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
000190FE 0000                       		dc.w Elec_Shock-Elec_Index
00019100                            
00019100 =00000034                  elec_freq:	equ $34		; frequency
00019100                            ; ===========================================================================
00019100                            
00019100                            Elec_Main:	; Routine 0
00019100 5428 0024                  		addq.b	#2,obRoutine(a0)
00019104 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
0001910C 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019112 0028 0004 0001             		ori.b	#4,obRender(a0)
00019118 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001911E 7000                       		moveq	#0,d0
00019120 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019124 E948                       		lsl.w	#4,d0		; multiply by $10
00019126 5340                       		subq.w	#1,d0
00019128 3140 0034                  		move.w	d0,elec_freq(a0)
0001912C                            
0001912C                            Elec_Shock:	; Routine 2
0001912C 3038 FE04                  		move.w	(v_framecount).w,d0
00019130 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019134 6600                       		bne.s	@animate	; if not, branch
00019136                            
00019136 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001913C 4A28 0001                  		tst.b	obRender(a0)
00019140 6A00                       		bpl.s	@animate
0001914C                            
0001914C                            	@animate:
0001914C 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019152 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
00019158 117C 0000 0020             		move.b	#0,obColType(a0)
0001915E 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00019164 6600                       		bne.s	@display	; if not, branch
00019166 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001916C                            
0001916C                            	@display:
0001916C 6000 864E                  		bra.w	RememberState
0001916C 6000 864E                  		bra.w	RememberState
00019170                            		include	"_anim\Electrocuter.asm"
00019170                            ; ---------------------------------------------------------------------------
00019170                            ; Animation script - electrocution orbs (SBZ)
00019170                            ; ---------------------------------------------------------------------------
00019170 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00019172 0000                       		dc.w byte_161D0-Ani_Elec
00019174 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00019178 00                         		even
00019178 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00019188                            		even
00019188                            		even
00019188                            Map_Elec:	include	"_maps\Electrocuter.asm"
00019188                            ; --------------------------------------------------------------------------------
00019188                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019188                            ; --------------------------------------------------------------------------------
00019188                            
00019188                            SME_XNaLt:	
00019188 0000 0000                  		dc.w SME_XNaLt_C-SME_XNaLt, SME_XNaLt_17-SME_XNaLt	
0001918C 0000 0000                  		dc.w SME_XNaLt_27-SME_XNaLt, SME_XNaLt_41-SME_XNaLt	
00019190 0000 0000                  		dc.w SME_XNaLt_56-SME_XNaLt, SME_XNaLt_75-SME_XNaLt	
00019194 02                         SME_XNaLt_C:	dc.b 2	
00019195 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
0001919A 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
0001919F 03                         SME_XNaLt_17:	dc.b 3	
000191A0 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000191A5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
000191AA 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000191AF 05                         SME_XNaLt_27:	dc.b 5	
000191B0 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000191B5 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8	
000191BA 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000191BF F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
000191C4 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
000191C9 04                         SME_XNaLt_41:	dc.b 4	
000191CA F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000191CF 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000191D4 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8	
000191D9 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC	
000191DE 06                         SME_XNaLt_56:	dc.b 6	
000191DF F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000191E4 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
000191E9 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8	
000191EE F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC	
000191F3 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24	
000191F8 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0	
000191FD 04                         SME_XNaLt_75:	dc.b 4	
000191FE F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019203 0006 0002 F8               		dc.b 0, 6, 0, 2, $F8	
00019208 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24	
0001920D F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0	
00019212                            		even
00019212                            		even
00019212                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019212                            ; ---------------------------------------------------------------------------
00019212                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019212                            ; ---------------------------------------------------------------------------
00019212                            
00019212                            SpinConvey:
00019212 7000                       		moveq	#0,d0
00019214 1028 0024                  		move.b	obRoutine(a0),d0
00019218 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
0001921C 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
0001923C                            
0001923C                            SpinC_Display:
0001923C 4EF9 0000 F846             		jmp	(DisplaySprite).l
00019242                            ; ===========================================================================
00019242                            
00019242                            loc_1629A:
00019242 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00019248 6600                       		bne.s	SpinC_Act1or2	; if not, branch
0001924A 0C40 FF80                  		cmpi.w	#-$80,d0
0001924E 64EC                       		bcc.s	SpinC_Display
00019250                            
00019250                            SpinC_Act1or2:
00019250 1028 002F                  		move.b	$2F(a0),d0
00019254 6A00                       		bpl.s	SpinC_Delete
00019256 0240 007F                  		andi.w	#$7F,d0
0001925A 45F8 F7C1                  		lea	(v_obj63).w,a2
0001925E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00019264                            
00019264                            SpinC_Delete:
00019264 4EF9 0000 F886             		jmp	(DeleteObject).l
0001926A                            ; ===========================================================================
0001926A 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
0001926C 0000                       		dc.w loc_163D8-SpinC_Index
0001926E                            ; ===========================================================================
0001926E                            
0001926E                            SpinC_Main:	; Routine 0
0001926E 1028 0028                  		move.b	obSubtype(a0),d0
00019272 6B00 0000                  		bmi.w	loc_16380
00019276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001927A 217C 0001 88E2 0004        		move.l	#Map_Spin,obMap(a0)
00019282 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00019288 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001928E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019294 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001929A 7000                       		moveq	#0,d0
0001929C 1028 0028                  		move.b	obSubtype(a0),d0
000192A0 3200                       		move.w	d0,d1
000192A2 E648                       		lsr.w	#3,d0
000192A4 0240 001E                  		andi.w	#$1E,d0
000192A8 45FA 0000                  		lea	off_164A6(pc),a2
000192AC D4F2 0000                  		adda.w	(a2,d0.w),a2
000192B0 315A 0038                  		move.w	(a2)+,$38(a0)
000192B4 315A 0030                  		move.w	(a2)+,$30(a0)
000192B8 214A 003C                  		move.l	a2,$3C(a0)
000192BC 0241 000F                  		andi.w	#$F,d1
000192C0 E549                       		lsl.w	#2,d1
000192C2 1141 0038                  		move.b	d1,$38(a0)
000192C6 117C 0004 003A             		move.b	#4,$3A(a0)
000192CC 4A38 F7C0                  		tst.b	(f_conveyrev).w
000192D0 6700                       		beq.s	loc_16356
000192D2 117C 0001 003B             		move.b	#1,$3B(a0)
000192D8 4428 003A                  		neg.b	$3A(a0)
000192DC 7200                       		moveq	#0,d1
000192DE 1228 0038                  		move.b	$38(a0),d1
000192E2 D228 003A                  		add.b	$3A(a0),d1
000192E6 B228 0039                  		cmp.b	$39(a0),d1
000192EA 6500                       		bcs.s	loc_16352
000192EC 1001                       		move.b	d1,d0
000192EE 7200                       		moveq	#0,d1
000192F0 4A00                       		tst.b	d0
000192F2 6A00                       		bpl.s	loc_16352
000192F4 1228 0039                  		move.b	$39(a0),d1
000192F8 5901                       		subq.b	#4,d1
000192FA                            
000192FA                            loc_16352:
000192FA 1141 0038                  		move.b	d1,$38(a0)
000192FE                            
000192FE                            loc_16356:
000192FE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019304 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001930A 4A41                       		tst.w	d1
0001930C 6600                       		bne.s	loc_1636C
0001930E 117C 0001 001C             		move.b	#1,obAnim(a0)
00019314                            
00019314                            loc_1636C:
00019314 0C41 0008                  		cmpi.w	#8,d1
00019318 6600                       		bne.s	loc_16378
0001931A 117C 0000 001C             		move.b	#0,obAnim(a0)
00019320                            
00019320                            loc_16378:
00019320 6100 B512                  		bsr.w	LCon_ChangeDir
00019324 6000 0000                  		bra.w	loc_163D8
00019328                            ; ===========================================================================
00019328                            
00019328                            loc_16380:
00019328 1140 002F                  		move.b	d0,$2F(a0)
0001932C 0240 007F                  		andi.w	#$7F,d0
00019330 45F8 F7C1                  		lea	(v_obj63).w,a2
00019334 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001933A 6700                       		beq.s	loc_1639A
0001933C 4EF9 0000 F886             		jmp	(DeleteObject).l
00019342                            ; ===========================================================================
00019342                            
00019342                            loc_1639A:
00019342 D040                       		add.w	d0,d0
00019344 0240 001E                  		andi.w	#$1E,d0
00019348 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
0001934C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019352 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019356 321A                       		move.w	(a2)+,d1
00019358 2248                       		movea.l	a0,a1
0001935A 6000                       		bra.s	SpinC_LoadPform
0001935C                            ; ===========================================================================
0001935C                            
0001935C                            SpinC_Loop:
0001935C 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
00019362 6600                       		bne.s	loc_163D0
00019364                            
00019364                            SpinC_LoadPform:
00019364 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
00019368 335A 0008                  		move.w	(a2)+,obX(a1)
0001936C 335A 000C                  		move.w	(a2)+,obY(a1)
00019370 301A                       		move.w	(a2)+,d0
00019372 1340 0028                  		move.b	d0,obSubtype(a1)
00019376                            
00019376                            loc_163D0:
00019376 51C9 FFE4                  		dbf	d1,SpinC_Loop
0001937A                            
0001937A 588F                       		addq.l	#4,sp
0001937C 4E75                       		rts	
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            loc_163D8:	; Routine 2
0001937E 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00019384 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001938A 4A28 001A                  		tst.b	obFrame(a0)
0001938E 6600                       		bne.s	loc_16404
00019390 3F28 0008                  		move.w	obX(a0),-(sp)
00019394 6100 0000                  		bsr.w	loc_16424
00019398 323C 001B                  		move.w	#$1B,d1
0001939C 343C 0007                  		move.w	#7,d2
000193A0 3602                       		move.w	d2,d3
000193A2 5243                       		addq.w	#1,d3
000193A4 381F                       		move.w	(sp)+,d4
000193A6 6000 88AC                  		bra.w	SolidObject
000193AA                            ; ===========================================================================
000193AA                            
000193AA                            loc_16404:
000193AA 0828 0003 0022             		btst	#3,obStatus(a0)
000193B0 6700                       		beq.s	loc_16420
000193B2 43F8 D000                  		lea	(v_objspace).w,a1
000193B6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000193BC 08A8 0003 0022             		bclr	#3,obStatus(a0)
000193C2 4228 0025                  		clr.b	obSolid(a0)
000193C6                            
000193C6                            loc_16420:
000193C6 6000 0000                  		bra.w	loc_16424
000193CA                            
000193CA                            loc_16424:
000193CA 3028 0008                  		move.w	obX(a0),d0
000193CE B068 0034                  		cmp.w	$34(a0),d0
000193D2 6600                       		bne.s	loc_16484
000193D4 3028 000C                  		move.w	obY(a0),d0
000193D8 B068 0036                  		cmp.w	$36(a0),d0
000193DC 6600                       		bne.s	loc_16484
000193DE 7200                       		moveq	#0,d1
000193E0 1228 0038                  		move.b	$38(a0),d1
000193E4 D228 003A                  		add.b	$3A(a0),d1
000193E8 B228 0039                  		cmp.b	$39(a0),d1
000193EC 6500                       		bcs.s	loc_16456
000193EE 1001                       		move.b	d1,d0
000193F0 7200                       		moveq	#0,d1
000193F2 4A00                       		tst.b	d0
000193F4 6A00                       		bpl.s	loc_16456
000193F6 1228 0039                  		move.b	$39(a0),d1
000193FA 5901                       		subq.b	#4,d1
000193FC                            
000193FC                            loc_16456:
000193FC 1141 0038                  		move.b	d1,$38(a0)
00019400 2268 003C                  		movea.l	$3C(a0),a1
00019404 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001940A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019410 4A41                       		tst.w	d1
00019412 6600                       		bne.s	loc_16474
00019414 117C 0001 001C             		move.b	#1,obAnim(a0)
0001941A                            
0001941A                            loc_16474:
0001941A 0C41 0008                  		cmpi.w	#8,d1
0001941E 6600                       		bne.s	loc_16480
00019420 117C 0000 001C             		move.b	#0,obAnim(a0)
00019426                            
00019426                            loc_16480:
00019426 6100 B40C                  		bsr.w	LCon_ChangeDir
0001942A                            
0001942A                            loc_16484:
0001942A 4EF9 0000 F832             		jmp	(SpeedToPos).l
0001942A 4EF9 0000 F832             		jmp	(SpeedToPos).l
00019430                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019430                            ; ---------------------------------------------------------------------------
00019430                            ; Animation script - platform on conveyor belt (SBZ)
00019430                            ; ---------------------------------------------------------------------------
00019430 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019432 0000                       		dc.w @still-Ani_SpinConvey
00019434 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019441 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00019448 00                         		even
00019448 0F00 FF                    @still:		dc.b $F, 0, afEnd
0001944C 00                         		even
0001944C 00                         		even
0001944C                            
0001944C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019452 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00019458 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001946C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00019480 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00019494 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000194A8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000194BC 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000194D0                            ; ===========================================================================
000194D0                            
000194D0                            		include	"_incObj\70 Girder Block.asm"
000194D0                            ; ---------------------------------------------------------------------------
000194D0                            ; Object 70 - large girder block (SBZ)
000194D0                            ; ---------------------------------------------------------------------------
000194D0                            
000194D0                            Girder:
000194D0 7000                       		moveq	#0,d0
000194D2 1028 0024                  		move.b	obRoutine(a0),d0
000194D6 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
000194DA 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
000194DE                            ; ===========================================================================
000194DE 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
000194E0 0000                       		dc.w Gird_Action-Gird_Index
000194E2                            
000194E2 =00000016                  gird_height:	equ $16
000194E2 =00000032                  gird_origX:	equ $32		; original x-axis position
000194E2 =00000030                  gird_origY:	equ $30		; original y-axis position
000194E2 =00000034                  gird_time:	equ $34		; duration for movement in a direction
000194E2 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
000194E2 =0000003A                  gird_delay:	equ $3A		; delay for movement
000194E2                            ; ===========================================================================
000194E2                            
000194E2                            Gird_Main:	; Routine 0
000194E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000194E6 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
000194EE 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
000194F4 0028 0004 0001             		ori.b	#4,obRender(a0)
000194FA 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019500 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019506 117C 0018 0016             		move.b	#$18,gird_height(a0)
0001950C 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019512 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019518 6100 0000                  		bsr.w	Gird_ChgMove
0001951C                            
0001951C                            Gird_Action:	; Routine 2
0001951C 3F28 0008                  		move.w	obX(a0),-(sp)
00019520 4A68 003A                  		tst.w	gird_delay(a0)
00019524 6700                       		beq.s	@beginmove
00019526 5368 003A                  		subq.w	#1,gird_delay(a0)
0001952A 6600                       		bne.s	@solid
0001952C                            
0001952C                            	@beginmove:
0001952C 4EB9 0000 F832             		jsr	(SpeedToPos).l
00019532 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019536 6600                       		bne.s	@solid		; if time remains, branch
00019538 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
0001953C                            
0001953C                            	@solid:
0001953C 381F                       		move.w	(sp)+,d4
0001953E 4A28 0001                  		tst.b	obRender(a0)
00019542 6A00                       		bpl.s	@chkdel
00019544 7200                       		moveq	#0,d1
00019546 1228 0014                  		move.b	obActWid(a0),d1
0001954A 0641 000B                  		addi.w	#$B,d1
0001954E 7400                       		moveq	#0,d2
00019550 1428 0016                  		move.b	gird_height(a0),d2
00019554 3602                       		move.w	d2,d3
00019556 5243                       		addq.w	#1,d3
00019558 6100 86FA                  		bsr.w	SolidObject
0001955C                            
0001955C                            	@chkdel:
00019578 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001957E                            
0001957E                            	@delete:
0001957E 4EF9 0000 F886             		jmp	(DeleteObject).l
00019584                            ; ===========================================================================
00019584                            
00019584                            Gird_ChgMove:
00019584 1028 0038                  		move.b	gird_set(a0),d0
00019588 0240 0018                  		andi.w	#$18,d0
0001958C 43F9 0000 0000             		lea	(@settings).l,a1
00019592 43F1 0000                  		lea	(a1,d0.w),a1
00019596 3159 0010                  		move.w	(a1)+,obVelX(a0)
0001959A 3159 0012                  		move.w	(a1)+,obVelY(a0)
0001959E 3159 0034                  		move.w	(a1)+,gird_time(a0)
000195A2 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000195A6 317C 0007 003A             		move.w	#7,gird_delay(a0)
000195AC 4E75                       		rts	
000195AE                            ; ===========================================================================
000195AE                            @settings:	;   x-speed, y-speed, duration
000195AE 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000195B6 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000195BE FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000195C6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000195C6 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000195CE                            Map_Gird:	include	"_maps\Girder Block.asm"
000195CE                            ; ---------------------------------------------------------------------------
000195CE                            ; Sprite mappings - large girder block (SBZ)
000195CE                            ; ---------------------------------------------------------------------------
000195CE                            Map_Gird_internal:
000195CE 0000                       		dc.w @girder-Map_Gird_internal
000195D0 0C                         @girder:	dc.b $C
000195D1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000195D6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000195DB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000195E0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000195E5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000195EA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000195EF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000195F4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000195F9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000195FE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019603 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019608 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001960E 00                         		even
0001960E 00                         		even
0001960E                            		include	"_incObj\72 Teleporter.asm"
0001960E                            ; ---------------------------------------------------------------------------
0001960E                            ; Object 72 - teleporter (SBZ)
0001960E                            ; ---------------------------------------------------------------------------
0001960E                            
0001960E                            Teleport:
0001960E 7000                       		moveq	#0,d0
00019610 1028 0024                  		move.b	obRoutine(a0),d0
00019614 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019618 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019638 4E75                       		rts	
0001963A                            
0001963A                            	@delete:
0001963A 4EF9 0000 F886             		jmp	(DeleteObject).l
00019640                            ; ===========================================================================
00019640 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019642 0000                       		dc.w loc_166C8-Tele_Index
00019644 0000                       		dc.w loc_1675E-Tele_Index
00019646 0000                       		dc.w loc_16798-Tele_Index
00019648                            ; ===========================================================================
00019648                            
00019648                            Tele_Main:	; Routine 0
00019648 5428 0024                  		addq.b	#2,obRoutine(a0)
0001964C 1028 0028                  		move.b	obSubtype(a0),d0
00019650 D040                       		add.w	d0,d0
00019652 0240 001E                  		andi.w	#$1E,d0
00019656 45FA 0000                  		lea	Tele_Data(pc),a2
0001965A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001965E 315A 003A                  		move.w	(a2)+,$3A(a0)
00019662 214A 003C                  		move.l	a2,$3C(a0)
00019666 315A 0036                  		move.w	(a2)+,$36(a0)
0001966A 315A 0038                  		move.w	(a2)+,$38(a0)
0001966E                            
0001966E                            loc_166C8:	; Routine 2
0001966E 43F8 D000                  		lea	(v_player).w,a1
00019672 3029 0008                  		move.w	obX(a1),d0
00019676 9068 0008                  		sub.w	obX(a0),d0
0001967A 0828 0000 0022             		btst	#0,obStatus(a0)
00019680 6700                       		beq.s	loc_166E0
00019682 0640 000F                  		addi.w	#$F,d0
00019686                            
00019686                            loc_166E0:
00019686 0C40 0010                  		cmpi.w	#$10,d0
0001968A 6400                       		bcc.s	locret_1675C
0001968C 3229 000C                  		move.w	obY(a1),d1
00019690 9268 000C                  		sub.w	obY(a0),d1
00019694 0641 0020                  		addi.w	#$20,d1
00019698 0C41 0040                  		cmpi.w	#$40,d1
0001969C 6400                       		bcc.s	locret_1675C
0001969E 4A38 F7C8                  		tst.b	(f_lockmulti).w
000196A2 6600                       		bne.s	locret_1675C
000196A4 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000196AA 6600                       		bne.s	loc_1670E
000196AC 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000196B2 6500                       		bcs.s	locret_1675C
000196B4                            
000196B4                            loc_1670E:
000196B4 5428 0024                  		addq.b	#2,obRoutine(a0)
000196B8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000196BE 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000196C4 337C 0800 0020             		move.w	#$800,obInertia(a1)
000196CA 337C 0000 0010             		move.w	#0,obVelX(a1)
000196D0 337C 0000 0012             		move.w	#0,obVelY(a1)
000196D6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000196DC 08A9 0005 0022             		bclr	#5,obStatus(a1)
000196E2 08E9 0001 0022             		bset	#1,obStatus(a1)
000196E8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000196EE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000196F4 4228 0032                  		clr.b	$32(a0)
00019702                            
00019702                            locret_1675C:
00019702 4E75                       		rts	
00019704                            ; ===========================================================================
00019704                            
00019704                            loc_1675E:	; Routine 4
00019704 43F8 D000                  		lea	(v_player).w,a1
00019708 1028 0032                  		move.b	$32(a0),d0
0001970C 5428 0032                  		addq.b	#2,$32(a0)
00019710 4EB9 0000 3A32             		jsr	(CalcSine).l
00019716 EA40                       		asr.w	#5,d0
00019718 3428 000C                  		move.w	obY(a0),d2
0001971C 9440                       		sub.w	d0,d2
0001971E 3342 000C                  		move.w	d2,obY(a1)
00019722 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019728 6600                       		bne.s	locret_16796
0001972A 6100 0000                  		bsr.w	sub_1681C
0001972E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001973C                            
0001973C                            locret_16796:
0001973C 4E75                       		rts	
0001973E                            ; ===========================================================================
0001973E                            
0001973E                            loc_16798:	; Routine 6
0001973E 588F                       		addq.l	#4,sp
00019740 43F8 D000                  		lea	(v_player).w,a1
00019744 5328 002E                  		subq.b	#1,$2E(a0)
00019748 6A00                       		bpl.s	loc_167DA
0001974A 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019750 3368 0038 000C             		move.w	$38(a0),obY(a1)
00019756 7200                       		moveq	#0,d1
00019758 1228 003A                  		move.b	$3A(a0),d1
0001975C 5801                       		addq.b	#4,d1
0001975E B228 003B                  		cmp.b	$3B(a0),d1
00019762 6500                       		bcs.s	loc_167C2
00019764 7200                       		moveq	#0,d1
00019766 6000                       		bra.s	loc_16800
00019768                            ; ===========================================================================
00019768                            
00019768                            loc_167C2:
00019768 1141 003A                  		move.b	d1,$3A(a0)
0001976C 2468 003C                  		movea.l	$3C(a0),a2
00019770 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00019776 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001977C 6000 0000                  		bra.w	sub_1681C
00019780                            ; ===========================================================================
00019780                            
00019780                            loc_167DA:
00019780 2429 0008                  		move.l	obX(a1),d2
00019784 2629 000C                  		move.l	obY(a1),d3
00019788 3029 0010                  		move.w	obVelX(a1),d0
0001978C 48C0                       		ext.l	d0
0001978E E180                       		asl.l	#8,d0
00019790 D480                       		add.l	d0,d2
00019792 3029 0012                  		move.w	obVelY(a1),d0
00019796 48C0                       		ext.l	d0
00019798 E180                       		asl.l	#8,d0
0001979A D680                       		add.l	d0,d3
0001979C 2342 0008                  		move.l	d2,obX(a1)
000197A0 2343 000C                  		move.l	d3,obY(a1)
000197A4 4E75                       		rts	
000197A6                            ; ===========================================================================
000197A6                            
000197A6                            loc_16800:
000197A6 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000197AC 4228 0024                  		clr.b	obRoutine(a0)
000197B0 4238 F7C8                  		clr.b	(f_lockmulti).w
000197B4 337C 0000 0010             		move.w	#0,obVelX(a1)
000197BA 337C 0200 0012             		move.w	#$200,obVelY(a1)
000197C0 4E75                       		rts	
000197C2                            
000197C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000197C2                            
000197C2                            
000197C2                            sub_1681C:
000197C2 7000                       		moveq	#0,d0
000197C4 343C 1000                  		move.w	#$1000,d2
000197C8 3028 0036                  		move.w	$36(a0),d0
000197CC 9069 0008                  		sub.w	obX(a1),d0
000197D0 6C00                       		bge.s	loc_16830
000197D2 4440                       		neg.w	d0
000197D4 4442                       		neg.w	d2
000197D6                            
000197D6                            loc_16830:
000197D6 7200                       		moveq	#0,d1
000197D8 363C 1000                  		move.w	#$1000,d3
000197DC 3228 0038                  		move.w	$38(a0),d1
000197E0 9269 000C                  		sub.w	obY(a1),d1
000197E4 6C00                       		bge.s	loc_16844
000197E6 4441                       		neg.w	d1
000197E8 4443                       		neg.w	d3
000197EA                            
000197EA                            loc_16844:
000197EA B240                       		cmp.w	d0,d1
000197EC 6500                       		bcs.s	loc_1687A
000197EE 7200                       		moveq	#0,d1
000197F0 3228 0038                  		move.w	$38(a0),d1
000197F4 9269 000C                  		sub.w	obY(a1),d1
000197F8 4841                       		swap	d1
000197FA 83C3                       		divs.w	d3,d1
000197FC 7000                       		moveq	#0,d0
000197FE 3028 0036                  		move.w	$36(a0),d0
00019802 9069 0008                  		sub.w	obX(a1),d0
00019806 6700                       		beq.s	loc_16866
00019808 4840                       		swap	d0
0001980A 81C1                       		divs.w	d1,d0
0001980C                            
0001980C                            loc_16866:
0001980C 3340 0010                  		move.w	d0,obVelX(a1)
00019810 3343 0012                  		move.w	d3,obVelY(a1)
00019814 4A41                       		tst.w	d1
00019816 6A00                       		bpl.s	loc_16874
00019818 4441                       		neg.w	d1
0001981A                            
0001981A                            loc_16874:
0001981A 3141 002E                  		move.w	d1,$2E(a0)
0001981E 4E75                       		rts	
00019820                            ; ===========================================================================
00019820                            
00019820                            loc_1687A:
00019820 7000                       		moveq	#0,d0
00019822 3028 0036                  		move.w	$36(a0),d0
00019826 9069 0008                  		sub.w	obX(a1),d0
0001982A 4840                       		swap	d0
0001982C 81C2                       		divs.w	d2,d0
0001982E 7200                       		moveq	#0,d1
00019830 3228 0038                  		move.w	$38(a0),d1
00019834 9269 000C                  		sub.w	obY(a1),d1
00019838 6700                       		beq.s	loc_16898
0001983A 4841                       		swap	d1
0001983C 83C0                       		divs.w	d0,d1
0001983E                            
0001983E                            loc_16898:
0001983E 3341 0012                  		move.w	d1,obVelY(a1)
00019842 3342 0010                  		move.w	d2,obVelX(a1)
00019846 4A40                       		tst.w	d0
00019848 6A00                       		bpl.s	loc_168A6
0001984A 4440                       		neg.w	d0
0001984C                            
0001984C                            loc_168A6:
0001984C 3140 002E                  		move.w	d0,$2E(a0)
00019850 4E75                       		rts	
00019852                            ; End of function sub_1681C
00019852                            
00019852                            ; ===========================================================================
00019852 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019858 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001985E 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019862 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019868 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001986E 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019874 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001987A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019880 0884 0298 0894             		dc.w $884, $298, $894
00019886 0270 0894 0190             		dc.w $270, $894, $190
0001988C 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019892 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019898 1184 0498 1158             		dc.w $1184, $498, $1158
0001989E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000198A4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000198AA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000198B0 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000198B6 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000198BC 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000198C2 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000198C8 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000198CE FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000198D4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000198D4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000198DA                            
000198DA                            		include	"_incObj\78 Caterkiller.asm"
000198DA                            ; ---------------------------------------------------------------------------
000198DA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000198DA                            ; ---------------------------------------------------------------------------
000198DA                            
000198DA                            Caterkiller:
000198DA 7000                       		moveq	#0,d0
000198DC 1028 0024                  		move.b	obRoutine(a0),d0
000198E0 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
000198E4 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
000198E8                            ; ===========================================================================
000198E8 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
000198EA 0000                       		dc.w Cat_Head-Cat_Index
000198EC 0000                       		dc.w Cat_BodySeg1-Cat_Index
000198EE 0000                       		dc.w Cat_BodySeg2-Cat_Index
000198F0 0000                       		dc.w Cat_BodySeg1-Cat_Index
000198F2 0000                       		dc.w Cat_Delete-Cat_Index
000198F4 0000                       		dc.w loc_16CC0-Cat_Index
000198F6                            
000198F6 =0000003C                  cat_parent:	equ $3C		; address of parent object
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            locret_16950:
000198F6 4E75                       		rts	
000198F8                            ; ===========================================================================
000198F8                            
000198F8                            Cat_Main:	; Routine 0
000198F8 117C 0007 0016             		move.b	#7,obHeight(a0)
000198FE 117C 0008 0017             		move.b	#8,obWidth(a0)
00019904 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001990A 4EB9 0001 7DC0             		jsr	(ObjFloorDist).l
00019910 4A41                       		tst.w	d1
00019912 6AE2                       		bpl.s	locret_16950
00019914 D368 000C                  		add.w	d1,obY(a0)
00019918 4268 0012                  		clr.w	obVelY(a0)
0001991C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019920 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019928 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001992E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019934 6700                       		beq.s	@isscrapbrain
00019936 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001993C                            
0001993C                            	@isscrapbrain:
0001993C 0228 0003 0001             		andi.b	#3,obRender(a0)
00019942 0028 0004 0001             		ori.b	#4,obRender(a0)
00019948 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001994E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019954 117C 0008 0014             		move.b	#8,obActWid(a0)
0001995A 117C 000B 0020             		move.b	#$B,obColType(a0)
00019960 3428 0008                  		move.w	obX(a0),d2
00019964 7A0C                       		moveq	#$C,d5
00019966 0828 0000 0022             		btst	#0,obStatus(a0)
0001996C 6700                       		beq.s	@noflip
0001996E 4445                       		neg.w	d5
00019970                            
00019970                            	@noflip:
00019970 1C3C 0004                  		move.b	#4,d6
00019974 7600                       		moveq	#0,d3
00019976 7804                       		moveq	#4,d4
00019978 2448                       		movea.l	a0,a2
0001997A 7202                       		moveq	#2,d1
0001997C                            
0001997C                            Cat_Loop:
0001997C 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
00019982 6600 0000                  			bne.w	Cat_ChkGone
00019986 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001998A 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
0001998E 5406                       		addq.b	#2,d6		; alternate between the two
00019990 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019996 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001999C 337C 0280 0018             		move.w	#$280,obPriority(a1)
000199A2 137C 0008 0014             		move.b	#8,obActWid(a1)
000199A8 137C 00CB 0020             		move.b	#$CB,obColType(a1)
000199AE D445                       		add.w	d5,d2
000199B0 3342 0008                  		move.w	d2,obX(a1)
000199B4 3368 000C 000C             		move.w	obY(a0),obY(a1)
000199BA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000199C0 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
000199C6 137C 0008 001A             		move.b	#8,obFrame(a1)
000199CC 234A 003C                  		move.l	a2,cat_parent(a1)
000199D0 1344 003C                  		move.b	d4,cat_parent(a1)
000199D4 5804                       		addq.b	#4,d4
000199D6 2449                       		movea.l	a1,a2
000199D8                            
000199D8                            	@fail:
000199D8 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
000199DC                            
000199DC 117C 0007 002A             		move.b	#7,$2A(a0)
000199E2 4228 003C                  		clr.b	cat_parent(a0)
000199E6                            
000199E6                            Cat_Head:	; Routine 2
000199E6 4A28 0022                  		tst.b	obStatus(a0)
000199EA 6B00 0000                  		bmi.w	loc_16C96
000199EE 7000                       		moveq	#0,d0
000199F0 1028 0025                  		move.b	ob2ndRout(a0),d0
000199F4 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
000199F8 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
000199FC 1228 002B                  		move.b	$2B(a0),d1
00019A00 6A00                       		bpl.s	@display
00019A02 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019A08 1028 0026                  		move.b	obAngle(a0),d0
00019A0C 0240 007F                  		andi.w	#$7F,d0
00019A10 5828 0026                  		addq.b	#4,obAngle(a0)
00019A14 1031 0000                  		move.b	(a1,d0.w),d0
00019A18 6A00                       		bpl.s	@animate
00019A1A 08A8 0007 002B             		bclr	#7,$2B(a0)
00019A20 6000                       		bra.s	@display
00019A22                            
00019A22                            	@animate:
00019A22 0201 0010                  		andi.b	#$10,d1
00019A26 D001                       		add.b	d1,d0
00019A28 1140 001A                  		move.b	d0,obFrame(a0)
00019A2C                            
00019A2C                            	@display:
00019A4A 4EF9 0000 F846             		jmp	(DisplaySprite).l
00019A50                            
00019A50                            	Cat_ChkGone:
00019A50 45F8 FC00                  		lea	(v_objstate).w,a2
00019A54 7000                       		moveq	#0,d0
00019A56 1028 0023                  		move.b	obRespawnNo(a0),d0
00019A5A 6700                       		beq.s	@delete
00019A5C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019A62                            
00019A62                            	@delete:
00019A62 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019A68 4E75                       		rts	
00019A6A                            ; ===========================================================================
00019A6A                            
00019A6A                            Cat_Delete:	; Routine $A
00019A6A 4EF9 0000 F886             		jmp	(DeleteObject).l
00019A70                            ; ===========================================================================
00019A70 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019A72 0000                       		dc.w loc_16B02-Cat_Index2
00019A74                            ; ===========================================================================
00019A74                            
00019A74                            @wait:
00019A74 5328 002A                  		subq.b	#1,$2A(a0)
00019A78 6B00                       		bmi.s	@move
00019A7A 4E75                       		rts	
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            @move:
00019A7C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019A80 117C 0010 002A             		move.b	#$10,$2A(a0)
00019A86 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019A8C 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019A92 0868 0004 002B             		bchg	#4,$2B(a0)
00019A98 6600                       		bne.s	loc_16AFC
00019A9A 4268 0010                  		clr.w	obVelX(a0)
00019A9E 4468 001C                  		neg.w	obAnim(a0)
00019AA2                            
00019AA2                            loc_16AFC:
00019AA2 08E8 0007 002B             		bset	#7,$2B(a0)
00019AA8                            
00019AA8                            loc_16B02:
00019AA8 5328 002A                  		subq.b	#1,$2A(a0)
00019AAC 6B00                       		bmi.s	@loc_16B5E
00019AAE 4A68 0010                  			tst.w	obVelX(a0)
00019AB2 6700                       			beq.s	@notmoving
00019AB4 2428 0008                  			move.l	obX(a0),d2
00019AB8 2602                       			move.l	d2,d3
00019ABA 3028 0010                  		move.w	obVelX(a0),d0
00019ABE 0828 0000 0022             		btst	#0,obStatus(a0)
00019AC4 6700                       		beq.s	@noflip
00019AC6 4440                       		neg.w	d0
00019AC8                            
00019AC8                            	@noflip:
00019AC8 48C0                       		ext.l	d0
00019ACA E180                       		asl.l	#8,d0
00019ACC D480                       		add.l	d0,d2
00019ACE 2142 0008                  		move.l	d2,obX(a0)
00019AD2 4843                       			swap	d3
00019AD4 B668 0008                  			cmp.w	obX(a0),d3
00019AD8 6700                       			beq.s	@notmoving
00019ADA 4EB9 0001 7DC0             			jsr	(ObjFloorDist).l
00019AE0 0C41 FFF8                  			cmpi.w	#-8,d1
00019AE4 6D00                       			blt.s	@loc_16B70
00019AE6 0C41 000C                  			cmpi.w	#$C,d1
00019AEA 6C00                       			bge.s	@loc_16B70
00019AEC D368 000C                  			add.w	d1,obY(a0)
00019AF0 7000                       		moveq	#0,d0
00019AF2 1028 003C                  		move.b	cat_parent(a0),d0
00019AF6 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AFA 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B00 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019B04                            
00019B04                            	@notmoving:
00019B04 4E75                       		rts	
00019B06                            ; ===========================================================================
00019B06                            
00019B06                            @loc_16B5E:
00019B06 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019B0A 117C 0007 002A             		move.b	#7,$2A(a0)
00019B10 4268 0010                  			clr.w	obVelX(a0)
00019B14 4268 001C                  			clr.w	obAnim(a0)
00019B18 4E75                       		rts	
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            @loc_16B70:
00019B1A 7000                       			moveq	#0,d0
00019B1C 1028 003C                  			move.b	cat_parent(a0),d0
00019B20 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019B26 4468 000A                  			neg.w	obX+2(a0)
00019B2A 6700                       			beq.s	@loc_1730A
00019B2C 0828 0000 0022             			btst	#0,obStatus(a0)
00019B32 6700                       			beq.s	@loc_1730A
00019B34 5368 0008                  			subq.w	#1,obX(a0)
00019B38 5228 003C                  			addq.b	#1,cat_parent(a0)
00019B3C 7000                       			moveq	#0,d0
00019B3E 1028 003C                  			move.b	cat_parent(a0),d0
00019B42 4230 002C                  			clr.b	$2C(a0,d0)
00019B46                            	@loc_1730A:
00019B46 0868 0000 0022             			bchg	#0,obStatus(a0)
00019B4C 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019B52 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B56 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B5C 4E75                       		rts	
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            Cat_BodySeg2:	; Routine 6
00019B5E 2268 003C                  		movea.l	cat_parent(a0),a1
00019B62 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019B68 6A00                       		bpl.s	Cat_BodySeg1
00019B6A 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B70 1028 0026                  		move.b	obAngle(a0),d0
00019B74 0240 007F                  		andi.w	#$7F,d0
00019B78 5828 0026                  		addq.b	#4,obAngle(a0)
00019B7C 4A31 0004                  		tst.b	4(a1,d0.w)
00019B80 6A00                       		bpl.s	Cat_AniBody
00019B82 5828 0026                  		addq.b	#4,obAngle(a0)
00019B86                            
00019B86                            Cat_AniBody:
00019B86 1031 0000                  		move.b	(a1,d0.w),d0
00019B8A 5000                       		addq.b	#8,d0
00019B8C 1140 001A                  		move.b	d0,obFrame(a0)
00019B90                            
00019B90                            Cat_BodySeg1:	; Routine 4, 8
00019B90 2268 003C                  		movea.l	cat_parent(a0),a1
00019B94 4A28 0022                  		tst.b	obStatus(a0)
00019B98 6B00 0000                  		bmi.w	loc_16C90
00019B9C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019BA2 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019BA8 6700 0000                  		beq.w	loc_16C64
00019BAC 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019BB2 3029 0010                  		move.w	obVelX(a1),d0
00019BB6 D068 001C                  			add.w	obAnim(a0),d0
00019BBA 3140 0010                  		move.w	d0,obVelX(a0)
00019BBE 2428 0008                  		move.l	obX(a0),d2
00019BC2 2602                       		move.l	d2,d3
00019BC4 3028 0010                  		move.w	obVelX(a0),d0
00019BC8 0828 0000 0022             		btst	#0,obStatus(a0)
00019BCE 6700                       		beq.s	loc_16C0C
00019BD0 4440                       		neg.w	d0
00019BD2                            
00019BD2                            loc_16C0C:
00019BD2 48C0                       		ext.l	d0
00019BD4 E180                       		asl.l	#8,d0
00019BD6 D480                       		add.l	d0,d2
00019BD8 2142 0008                  		move.l	d2,obX(a0)
00019BDC 4843                       		swap	d3
00019BDE B668 0008                  		cmp.w	obX(a0),d3
00019BE2 6700                       		beq.s	loc_16C64
00019BE4 7000                       		moveq	#0,d0
00019BE6 1028 003C                  		move.b	cat_parent(a0),d0
00019BEA 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019BEE 0C01 0080                  		cmpi.b	#$80,d1
00019BF2 6600                       		bne.s	loc_16C50
00019BF4 1181 002C                  			move.b	d1,$2C(a0,d0)
00019BF8 4468 000A                  			neg.w	obX+2(a0)
00019BFC 6700                       			beq.s	locj_173E4
00019BFE 0828 0000 0022             			btst	#0,obStatus(a0)
00019C04 6700                       			beq.s	locj_173E4
00019C06 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019C0C 6600                       			bne.s	locj_173E4
00019C0E 5368 0008                  			subq.w	#1,obX(a0)
00019C12 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C16 7000                       			moveq	#0,d0
00019C18 1028 003C                  			move.b	cat_parent(a0),d0
00019C1C 4230 002C                  			clr.b	$2C(a0,d0)
00019C20                            	locj_173E4:
00019C20 0868 0000 0022             		bchg	#0,obStatus(a0)
00019C26 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019C2C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C30 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C36 6000                       		bra.s	loc_16C64
00019C38                            ; ===========================================================================
00019C38                            
00019C38                            loc_16C50:
00019C38 4881                       		ext.w	d1
00019C3A D368 000C                  		add.w	d1,obY(a0)
00019C3E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C42 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C48 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C4C                            
00019C4C                            loc_16C64:
00019C4C 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019C52 6700                       		beq.s	loc_16C90
00019C54 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019C58 6700                       		beq.s	loc_16C7C
00019C5A 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019C60 6600                       		bne.s	loc_16C82
00019C62                            
00019C62                            loc_16C7C:
00019C62 4229 0020                  		clr.b    $20(a1)
00019C66 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019C6C                            
00019C6C                            loc_16C82:
00019C6C 4EF9 0000 F846             		jmp	(DisplaySprite).l
00019C72                            
00019C72                            ; ===========================================================================
00019C72 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            loc_16C90:
00019C7A 08E9 0007 0022             		bset	#7,obStatus(a1)
00019C80                            
00019C80                            loc_16C96:
00019C80 7000                       		moveq	#0,d0
00019C82 1028 0024                  		move.b	obRoutine(a0),d0
00019C86 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019C8A 0828 0000 0022             		btst	#0,obStatus(a0)
00019C90 6700                       		beq.s	loc_16CAA
00019C92 4440                       		neg.w	d0
00019C94                            
00019C94                            loc_16CAA:
00019C94 3140 0010                  		move.w	d0,obVelX(a0)
00019C98 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019C9E 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019CA4 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019CAA                            
00019CAA                            loc_16CC0:	; Routine $C
00019CAA 4EB9 0000 F7FA             		jsr	(ObjectFall).l
00019CB0 4A68 0012                  		tst.w	obVelY(a0)
00019CB4 6B00                       		bmi.s	loc_16CE0
00019CB6 4EB9 0001 7DC0             		jsr	(ObjFloorDist).l
00019CBC 4A41                       		tst.w	d1
00019CBE 6A00                       		bpl.s	loc_16CE0
00019CC0 D368 000C                  		add.w	d1,obY(a0)
00019CC4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019CCA                            
00019CCA                            loc_16CE0:
00019CCA 4A28 0001                  		tst.b	obRender(a0)
00019CCE 6A00 FD80                  		bpl.w	Cat_ChkGone
00019CD2 4EF9 0000 F846             		jmp	(DisplaySprite).l
00019CD2 4EF9 0000 F846             		jmp	(DisplaySprite).l
00019CD8                            		include	"_anim\Caterkiller.asm"
00019CD8                            ; ---------------------------------------------------------------------------
00019CD8                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019CD8                            ; ---------------------------------------------------------------------------
00019CD8 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019CE8 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019CF8 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019D08 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019D18 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019D28 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019D38 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019D48 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019D58                            		even
00019D58                            		even
00019D58                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019D58                            ; ---------------------------------------------------------------------------
00019D58                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019D58                            ; ---------------------------------------------------------------------------
00019D58                            Map_Cat_internal:
00019D58 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019D5A 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019D5C 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019D5E 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019D60 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019D62 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019D64 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019D66 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019D68 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019D6A 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019D6C 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019D6E 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019D70 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019D72 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019D74 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019D76 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019D78 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019D7A 0000                       		dc.w byte_16E04-Map_Cat_internal
00019D7C 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019D7E 0000                       		dc.w byte_16E10-Map_Cat_internal
00019D80 0000                       		dc.w byte_16E16-Map_Cat_internal
00019D82 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019D84 0000                       		dc.w byte_16E22-Map_Cat_internal
00019D86 0000                       		dc.w byte_16E28-Map_Cat_internal
00019D88 01                         byte_16D9E:	dc.b 1
00019D89 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019D8E 01                         byte_16DA4:	dc.b 1
00019D8F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019D94 01                         byte_16DAA:	dc.b 1
00019D95 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019D9A 01                         byte_16DB0:	dc.b 1
00019D9B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019DA0 01                         byte_16DB6:	dc.b 1
00019DA1 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019DA6 01                         byte_16DBC:	dc.b 1
00019DA7 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019DAC 01                         byte_16DC2:	dc.b 1
00019DAD EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019DB2 01                         byte_16DC8:	dc.b 1
00019DB3 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019DB8 01                         byte_16DCE:	dc.b 1
00019DB9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019DBE 01                         byte_16DD4:	dc.b 1
00019DBF F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019DC4 01                         byte_16DDA:	dc.b 1
00019DC5 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019DCA 01                         byte_16DE0:	dc.b 1
00019DCB F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019DD0 01                         byte_16DE6:	dc.b 1
00019DD1 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019DD6 01                         byte_16DEC:	dc.b 1
00019DD7 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019DDC 01                         byte_16DF2:	dc.b 1
00019DDD F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019DE2 01                         byte_16DF8:	dc.b 1
00019DE3 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019DE8 01                         byte_16DFE:	dc.b 1
00019DE9 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019DEE 01                         byte_16E04:	dc.b 1
00019DEF F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019DF4 01                         byte_16E0A:	dc.b 1
00019DF5 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019DFA 01                         byte_16E10:	dc.b 1
00019DFB EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019E00 01                         byte_16E16:	dc.b 1
00019E01 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019E06 01                         byte_16E1C:	dc.b 1
00019E07 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019E0C 01                         byte_16E22:	dc.b 1
00019E0D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019E12 01                         byte_16E28:	dc.b 1
00019E13 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019E18                            		even
00019E18                            		even
00019E18                            
00019E18                            		include	"_incObj\79 Lamppost.asm"
00019E18                            ; ---------------------------------------------------------------------------
00019E18                            ; Object 79 - lamppost
00019E18                            ; ---------------------------------------------------------------------------
00019E18                            
00019E18                            Lamppost:
00019E18 7000                       		moveq	#0,d0
00019E1A 1028 0024                  		move.b	obRoutine(a0),d0
00019E1E 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019E22 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019E26 4EF9 0001 17BC             		jmp	(RememberState).l
00019E2C                            ; ===========================================================================
00019E2C 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019E2E 0000                       		dc.w Lamp_Blue-Lamp_Index
00019E30 0000                       		dc.w Lamp_Finish-Lamp_Index
00019E32 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019E34                            
00019E34 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019E34 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019E34 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019E34                            ; ===========================================================================
00019E34                            
00019E34                            Lamp_Main:	; Routine 0
00019E34 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E38 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019E40 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019E46 117C 0004 0001             		move.b	#4,obRender(a0)
00019E4C 117C 0008 0014             		move.b	#8,obActWid(a0)
00019E52 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019E58 45F8 FC00                  		lea	(v_objstate).w,a2
00019E5C 7000                       		moveq	#0,d0
00019E5E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E62 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019E68 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019E6E 6600                       		bne.s	@red
00019E70 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019E74 0201 007F                  		andi.b	#$7F,d1
00019E78 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019E7C 0202 007F                  		andi.b	#$7F,d2
00019E80 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019E82 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019E84                            
00019E84                            @red:
00019E84 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E8A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019E90 117C 0003 001A             		move.b	#3,obFrame(a0)
00019E96 4E75                       		rts	
00019E98                            
00019E98                            ; ===========================================================================
00019E98                            
00019E98                            Lamp_Blue:	; Routine 2
00019E98 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019E9C 6600 0000                  		bne.w	@donothing	; if yes, branch
00019EA0 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019EA4 6B00 0000                  		bmi.w	@donothing
00019EA8 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019EAC 0201 007F                  		andi.b	#$7F,d1
00019EB0 1428 0028                  		move.b	obSubtype(a0),d2
00019EB4 0202 007F                  		andi.b	#$7F,d2
00019EB8 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019EBA 6500                       		bcs.s	@chkhit		; if yes, branch
00019EBC 45F8 FC00                  		lea	(v_objstate).w,a2
00019EC0 7000                       		moveq	#0,d0
00019EC2 1028 0023                  		move.b	obRespawnNo(a0),d0
00019EC6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019ECC 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019ED2 117C 0003 001A             		move.b	#3,obFrame(a0)
00019ED8 6000 0000                  		bra.w	@donothing
00019EDC                            ; ===========================================================================
00019EDC                            
00019EDC                            @chkhit:
00019EDC 3038 D008                  		move.w	(v_player+obX).w,d0
00019EE0 9068 0008                  		sub.w	obX(a0),d0
00019EE4 5040                       		addq.w	#8,d0
00019EE6 0C40 0010                  		cmpi.w	#$10,d0
00019EEA 6400 0000                  		bcc.w	@donothing
00019EEE 3038 D00C                  		move.w	(v_player+obY).w,d0
00019EF2 9068 000C                  		sub.w	obY(a0),d0
00019EF6 0640 0040                  		addi.w	#$40,d0
00019EFA 0C40 0068                  		cmpi.w	#$68,d0
00019EFE 6400                       		bcc.s	@donothing
00019F00                            
00019F0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F0E 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
00019F14 6600                       		bne.s	@fail
00019F16 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019F1A 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019F20 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019F26 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019F2C 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019F32 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019F3A 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019F40 137C 0004 0001             		move.b	#4,obRender(a1)
00019F46 137C 0008 0014             		move.b	#8,obActWid(a1)
00019F4C 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019F52 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019F58 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019F5E                            
00019F5E                            	@fail:
00019F5E 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019F64 6100 0000                  		bsr.w	Lamp_StoreInfo
00019F68 45F8 FC00                  		lea	(v_objstate).w,a2
00019F6C 7000                       		moveq	#0,d0
00019F6E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F72 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019F78                            
00019F78                            	@donothing:
00019F78 4E75                       		rts	
00019F7A                            ; ===========================================================================
00019F7A                            
00019F7A                            Lamp_Finish:	; Routine 4	
00019F7A 4E75                       		rts	
00019F7C                            ; ===========================================================================
00019F7C                            
00019F7C                            Lamp_Twirl:	; Routine 6
00019F7C 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019F80 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019F82 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019F88                            
00019F88                            	@continue:
00019F88 1028 0026                  		move.b	obAngle(a0),d0
00019F8C 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019F92 0400 0040                  		subi.b	#$40,d0
00019F96 4EB9 0000 3A32             		jsr	(CalcSine).l
00019F9C C3FC 0C00                  		muls.w	#$C00,d1
00019FA0 4841                       		swap	d1
00019FA2 D268 0030                  		add.w	lamp_origX(a0),d1
00019FA6 3141 0008                  		move.w	d1,obX(a0)
00019FAA C1FC 0C00                  		muls.w	#$C00,d0
00019FAE 4840                       		swap	d0
00019FB0 D068 0032                  		add.w	lamp_origY(a0),d0
00019FB4 3140 000C                  		move.w	d0,obY(a0)
00019FB8 4E75                       		rts	
00019FBA                            ; ===========================================================================
00019FBA                            ; ---------------------------------------------------------------------------
00019FBA                            ; Subroutine to	store information when you hit a lamppost
00019FBA                            ; ---------------------------------------------------------------------------
00019FBA                            
00019FBA                            Lamp_StoreInfo:
00019FBA 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019FC0 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019FC6 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019FCC 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019FD2 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019FD8 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019FDE 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019FE4 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019FEA 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019FF0 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019FF6 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019FFC 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A002 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A008 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A00E 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A014 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A01A 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A020 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A026 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A02C 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A032 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A038 4E75                       		rts	
0001A03A                            
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            
0001A03A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A03A                            
0001A03A                            
0001A03A                            Lamp_LoadInfo:
0001A03A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A040 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A046 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A04C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A052 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A058 4278 FE20                  		clr.w	(v_rings).w
0001A05C 4238 FE1B                  		clr.b	(v_lifecount).w
0001A060 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A066 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A06C 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A070 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A076 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A07C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A082 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A088 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A08E 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A094 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A09A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A0A0 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A0A6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A0AC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A0B2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A0B8 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A0BE 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A0C4 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A0C6                            
0001A0C6 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A0CC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A0D2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A0D8                            
0001A0D8                            	@notlabyrinth:
0001A0D8 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A0DC 6A00                       		bpl.s	locret_170F6
0001A0DE 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A0E2 0440 00A0                  		subi.w	#$A0,d0
0001A0E6 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A0EA                            
0001A0EA                            locret_170F6:
0001A0EA 4E75                       		rts	
0001A0EA 4E75                       		rts	
0001A0EC                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A0EC                            ; --------------------------------------------------------------------------------
0001A0EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A0EC                            ; --------------------------------------------------------------------------------
0001A0EC                            
0001A0EC                            SME_JfaKr:	
0001A0EC 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A0F0 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A0F4 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A0F6 0A                         SME_JfaKr_A:	dc.b $A	
0001A0F7 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A0FC E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A101 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A106 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A10B F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A110 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A115 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A11A 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A11F 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A124 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A129 08                         SME_JfaKr_3D:	dc.b 8	
0001A12A E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A12F E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A134 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A139 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A13E 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A143 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A148 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A14D 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A152 02                         SME_JfaKr_66:	dc.b 2	
0001A153 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A158 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A15D 0A                         SME_JfaKr_71:	dc.b $A	
0001A15E E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A163 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A168 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A16D F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A172 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A177 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A17C 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A181 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A186 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A18B D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A190 0A                         SME_JfaKr_A4:	dc.b $A	
0001A191 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A196 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A19B F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A1A0 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A1A5 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A1AA 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A1AF 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A1B4 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A1B9 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A1BE D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A1C4 00                         		even
0001A1C4 00                         		even
0001A1C4                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A1C4                            ; ---------------------------------------------------------------------------
0001A1C4                            ; Object 7D - hidden points at the end of a level
0001A1C4                            ; ---------------------------------------------------------------------------
0001A1C4                            
0001A1C4                            HiddenBonus:
0001A1C4 7000                       		moveq	#0,d0
0001A1C6 1028 0024                  		move.b	obRoutine(a0),d0
0001A1CA 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A1CE 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A1D2                            ; ===========================================================================
0001A1D2 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A1D4 0000                       		dc.w Bonus_Display-Bonus_Index
0001A1D6                            
0001A1D6 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A1D6                            ; ===========================================================================
0001A1D6                            
0001A1D6                            Bonus_Main:	; Routine 0
0001A1D6 7410                       		moveq	#$10,d2
0001A1D8 3602                       		move.w	d2,d3
0001A1DA D643                       		add.w	d3,d3
0001A1DC 43F8 D000                  		lea	(v_player).w,a1
0001A1E0 3029 0008                  		move.w	obX(a1),d0
0001A1E4 9068 0008                  		sub.w	obX(a0),d0
0001A1E8 D042                       		add.w	d2,d0
0001A1EA B043                       		cmp.w	d3,d0
0001A1EC 6400                       		bcc.s	bonu_chkdel
0001A1EE 3229 000C                  		move.w	obY(a1),d1
0001A1F2 9268 000C                  		sub.w	obY(a0),d1
0001A1F6 D242                       		add.w	d2,d1
0001A1F8 B243                       		cmp.w	d3,d1
0001A1FA 6400                       		bcc.s	bonu_chkdel
0001A1FC 4A78 FE08                  		tst.w	(v_debuguse).w
0001A200 6600                       		bne.s	bonu_chkdel
0001A202 4A38 F7CD                  		tst.b	(f_bigring).w
0001A206 6600                       		bne.s	bonu_chkdel
0001A208 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A20C 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A214 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A21A 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A220 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A226 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A22C 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A232 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A242 7000                       		moveq	#0,d0
0001A244 1028 0028                  		move.b	obSubtype(a0),d0
0001A248 D040                       		add.w	d0,d0
0001A24A 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A24E 4EB9 0000 0000             		jsr	(AddPoints).l
0001A254                            
0001A254                            bonu_chkdel:
0001A270 4E75                       		rts	
0001A272                            
0001A272                            	@delete:
0001A272 4EF9 0000 F886             		jmp	(DeleteObject).l
0001A278                            
0001A278                            ; ===========================================================================
0001A278 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A27A 03E8                       		dc.w 1000
0001A27C 0064                       		dc.w 100
0001A27E 000A                       		dc.w 10
0001A280                            ; ===========================================================================
0001A280                            
0001A280                            Bonus_Display:	; Routine 2
0001A280 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A284 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A2A2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001A2A8                            
0001A2A8                            Bonus_Display_Delete:	
0001A2A8 4EF9 0000 F886             		jmp	(DeleteObject).l
0001A2A8 4EF9 0000 F886             		jmp	(DeleteObject).l
0001A2AE                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A2AE                            ; ---------------------------------------------------------------------------
0001A2AE                            ; Sprite mappings - hidden points at the end of	a level
0001A2AE                            ; ---------------------------------------------------------------------------
0001A2AE                            Map_Bonus_internal:
0001A2AE 0000                       		dc.w @blank-Map_Bonus_internal
0001A2B0 0000                       		dc.w @10000-Map_Bonus_internal
0001A2B2 0000                       		dc.w @1000-Map_Bonus_internal
0001A2B4 0000                       		dc.w @100-Map_Bonus_internal
0001A2B6 00                         @blank:		dc.b 0
0001A2B7 01                         @10000:		dc.b 1
0001A2B8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A2BD 01                         @1000:		dc.b 1
0001A2BE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A2C3 01                         @100:		dc.b 1
0001A2C4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A2CA 00                         		even
0001A2CA 00                         		even
0001A2CA                            
0001A2CA                            		include	"_incObj\8A Credits.asm"
0001A2CA                            ; ---------------------------------------------------------------------------
0001A2CA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A2CA                            ; ---------------------------------------------------------------------------
0001A2CA                            
0001A2CA                            CreditsText:
0001A2CA 7000                       		moveq	#0,d0
0001A2CC 1028 0024                  		move.b	obRoutine(a0),d0
0001A2D0 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A2D4 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A2D8                            ; ===========================================================================
0001A2D8 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A2DA 0000                       		dc.w Cred_Display-Cred_Index
0001A2DC                            ; ===========================================================================
0001A2DC                            
0001A2DC                            Cred_Main:	; Routine 0
0001A2DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A2E0 317C 0120 0008             		move.w	#$120,obX(a0)
0001A2E6 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A2EC 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A2F4 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A2FA 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A2FE 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A302 117C 0000 0001             		move.b	#0,obRender(a0)
0001A308 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A30E                            
0001A30E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A314 6600                       		bne.s	Cred_Display	; if not, branch
0001A316                            
0001A316 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A31C 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A322 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A326 6700                       		beq.s	Cred_Display	; if not, branch
0001A328 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A32E 6600                       		bne.s	Cred_Display	; if not, branch
0001A330 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A336 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A33C 4EF9 0000 F886             		jmp	(DeleteObject).l
0001A342                            ; ===========================================================================
0001A342                            
0001A342                            Cred_Display:	; Routine 2
0001A342 4EF9 0000 F846             		jmp	DisplaySprite
0001A342 4EF9 0000 F846             		jmp	DisplaySprite
0001A348                            Map_Cred:	include	"_maps\Credits.asm"
0001A348                            ; ---------------------------------------------------------------------------
0001A348                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A348                            ; ---------------------------------------------------------------------------
0001A348                            Map_Cred_internal:
0001A348 0000                       		dc.w @staff-Map_Cred_internal
0001A34A 0000                       		dc.w @gameplan-Map_Cred_internal
0001A34C 0000                       		dc.w @program-Map_Cred_internal
0001A34E 0000                       		dc.w @character-Map_Cred_internal
0001A350 0000                       		dc.w @design-Map_Cred_internal
0001A352 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A354 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A356 0000                       		dc.w @thanks-Map_Cred_internal
0001A358 0000                       		dc.w @presentedby-Map_Cred_internal
0001A35A 0000                       		dc.w @tryagain-Map_Cred_internal
0001A35C 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A35E 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A35F F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A364 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A369 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A36E F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A373 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A378 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A37D F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A382 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A387 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A38C F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A391 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A396 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A39B F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A3A0 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A3A5 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A3A6 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A3AB 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A3B0 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A3B5 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A3BA 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A3BF 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A3C4 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A3C9 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A3CE 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A3D3                            
0001A3D3 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A3D8 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A3DD B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A3E2 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A3E7 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A3EC 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A3ED 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A3F2 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A3F7 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A3FC 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A401 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A406 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A40B 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A410                            
0001A410 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A415 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A41A B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A41F B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A424 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A429 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A42E B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A433 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A438                            
0001A438 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A43D D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A442                            
0001A442 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A447 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A44C D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A451 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A456 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A45B D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A460                            
0001A460 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A465 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A46A F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A46F 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A470 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A475 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A47A 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A47F                            
0001A47F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A484 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A489 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A48E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A493 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A498 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A499 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A49E 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A4A3 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A4A8 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A4AD 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A4B2 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A4B7                            
0001A4B7 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A4BC B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A4C1 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A4C6 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A4CB B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A4D0 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A4D1 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A4D6 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A4DB 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A4E0 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A4E5 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A4EA 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4EF 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A4F4 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A4F9 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A4FE 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A503                            
0001A503 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A508 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A50D B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A512 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A517 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A51C B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A521 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A526 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A52B                            
0001A52B D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A530 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A535 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A53A D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A53F D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A544 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A549 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A54E D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A553 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A558 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A55D 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A55E D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A563 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A568 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A56D D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A572 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A577 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A57C D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A581 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A586 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A58B D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A590 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A595 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A59A 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A59F 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A5A4 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A5A9 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A5AE 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A5B3 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A5B8 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A5BD 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A5C2 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A5C7 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A5CC 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A5D1 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A5D2 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A5D7 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A5DC 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A5E1 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A5E6 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A5EB 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A5F0 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A5F5 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A5FA                            
0001A5FA B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A5FF B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A604 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A609 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A60E B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A613 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A618                            
0001A618 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A61D D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A622 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A627 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A628 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A62D 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A632 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A637 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A63C 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A641 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A646 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A64B 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A650 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A655                            
0001A655 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A65A B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A65F                            
0001A65F D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A664 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A669 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A66E D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A673 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A678 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A679 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A67E 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A683 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A688 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A68D 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A692 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A697 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A69C 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A6A1 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A6A2 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A6A7 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A6AC E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A6B1 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A6B6 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A6BB E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A6C0                            
0001A6C0 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A6C5 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A6CA 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A6CF 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A6D4 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A6D9 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A6DE 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A6E3 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A6E8                            		even
0001A6E8                            		even
0001A6E8                            
0001A6E8                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A6E8                            ; ---------------------------------------------------------------------------
0001A6E8                            ; Object 3D - Eggman (GHZ)
0001A6E8                            ; ---------------------------------------------------------------------------
0001A6E8                            
0001A6E8                            BossGreenHill:
0001A6E8 7000                       		moveq	#0,d0
0001A6EA 1028 0024                  		move.b	obRoutine(a0),d0
0001A6EE 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A6F2 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A6F6                            ; ===========================================================================
0001A6F6 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A6F8 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A6FA 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A6FC 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A6FE                            
0001A6FE 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A700 0401                       		dc.b 4,	1
0001A702 0607                       		dc.b 6,	7
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            BGHZ_Main:	; Routine 0
0001A704 45F9 0001 A6FE             		lea	(BGHZ_ObjData).l,a2
0001A70A 2248                       		movea.l	a0,a1
0001A70C 7202                       		moveq	#2,d1
0001A70E 6000                       		bra.s	BGHZ_LoadBoss
0001A710                            ; ===========================================================================
0001A710                            
0001A710                            BGHZ_Loop:
0001A710 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001A716 6600                       		bne.s	loc_17772
0001A718                            
0001A718                            BGHZ_LoadBoss:
0001A718 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A71C 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A720 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A726 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A72C 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A734 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A73A 137C 0004 0001             		move.b	#4,obRender(a1)
0001A740 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A746 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A74C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A750 2348 0034                  		move.l	a0,$34(a1)
0001A754 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A758                            
0001A758                            loc_17772:
0001A758 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A75E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A764 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A76A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A770                            
0001A770                            
0001A770                            BGHZ_ShipMain:	; Routine 2
0001A770 7000                       		moveq	#0,d0
0001A772 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A776 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A77A 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A77E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A784 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001A78A 1028 0022                  		move.b	obStatus(a0),d0
0001A78E 0200 0003                  		andi.b	#3,d0
0001A792 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A798 8128 0001                  		or.b	d0,obRender(a0)
0001A79C 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001A7A2                            ; ===========================================================================
0001A7A2 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A7A4 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A7A6 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A7A8 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A7AA 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A7AC 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A7AE 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A7B0                            ; ===========================================================================
0001A7B0                            
0001A7B0                            BGHZ_ShipStart:
0001A7B0 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A7B6 6100 0000                  		bsr.w	BossMove
0001A7BA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A7C0 6600                       		bne.s	loc_177E6
0001A7C2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A7C8 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A7CC                            
0001A7CC                            loc_177E6:
0001A7CC 1028 003F                  		move.b	$3F(a0),d0
0001A7D0 4EB9 0000 3A32             		jsr	(CalcSine).l
0001A7D6 EC40                       		asr.w	#6,d0
0001A7D8 D068 0038                  		add.w	$38(a0),d0
0001A7DC 3140 000C                  		move.w	d0,obY(a0)
0001A7E0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A7E6 5428 003F                  		addq.b	#2,$3F(a0)
0001A7EA 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A7F0 6400                       		bcc.s	locret_1784A
0001A7F2 4A28 0022                  		tst.b	obStatus(a0)
0001A7F6 6B00                       		bmi.s	loc_1784C
0001A7F8 4A28 0020                  		tst.b	obColType(a0)
0001A7FC 6600                       		bne.s	locret_1784A
0001A7FE 4A28 003E                  		tst.b	$3E(a0)
0001A802 6600                       		bne.s	BGHZ_ShipFlash
0001A804 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A814                            
0001A814                            BGHZ_ShipFlash:
0001A814 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A818 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A81A 4A51                       		tst.w	(a1)
0001A81C 6600                       		bne.s	loc_1783C
0001A81E 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A822                            
0001A822                            loc_1783C:
0001A822 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A824 5328 003E                  		subq.b	#1,$3E(a0)
0001A828 6600                       		bne.s	locret_1784A
0001A82A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A830                            
0001A830                            locret_1784A:
0001A830 4E75                       		rts	
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            loc_1784C:
0001A832 7064                       		moveq	#100,d0
0001A834 6100 0000                  		bsr.w	AddPoints
0001A838 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A83E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A844 4E75                       		rts	
0001A844 4E75                       		rts	
0001A846                            
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            ; Defeated boss	subroutine
0001A846                            ; ---------------------------------------------------------------------------
0001A846                            
0001A846                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A846                            
0001A846                            
0001A846                            BossDefeated:
0001A846 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A84A 0200 0007                  		andi.b	#7,d0
0001A84E 6600                       		bne.s	locret_178A2
0001A850 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001A856 6600                       		bne.s	locret_178A2
0001A858 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A85C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A862 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A868 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001A86E 3200                       		move.w	d0,d1
0001A870 7200                       		moveq	#0,d1
0001A872 1200                       		move.b	d0,d1
0001A874 E409                       		lsr.b	#2,d1
0001A876 0441 0020                  		subi.w	#$20,d1
0001A87A D369 0008                  		add.w	d1,obX(a1)
0001A87E E048                       		lsr.w	#8,d0
0001A880 E608                       		lsr.b	#3,d0
0001A882 D169 000C                  		add.w	d0,obY(a1)
0001A886                            
0001A886                            locret_178A2:
0001A886 4E75                       		rts	
0001A888                            ; End of function BossDefeated
0001A888                            
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            ; Subroutine to	move a boss
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            
0001A888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A888                            
0001A888                            
0001A888                            BossMove:
0001A888 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A88E E188                       		lsl.l	#8,d0
0001A890 D1A8 0030                  		add.l	d0,$30(a0)
0001A894 E18A                       		lsl.l	#8,d2
0001A896 D5A8 0038                  		add.l	d2,$38(a0)
0001A89A 4E75                       		rts
0001A89C                            ; End of function BossMove
0001A89C                            
0001A89C                            ; ===========================================================================
0001A89C                            
0001A89C                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A89C                            
0001A89C                            BGHZ_MakeBall:
0001A89C 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A8A2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A8A8 6100 FFDE                  		bsr.w	BossMove
0001A8AC 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A8B2 6600                       		bne.s	loc_17916
0001A8B4 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A8BA 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A8C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A8C4 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001A8CA 6600                       		bne.s	loc_17910
0001A8CC 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A8D0 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A8D6 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A8DC 2348 0034                  		move.l	a0,$34(a1)
0001A8E0                            
0001A8E0                            loc_17910:
0001A8E0 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A8E6                            
0001A8E6                            loc_17916:
0001A8E6 6000 FEE4                  		bra.w	loc_177E6
0001A8EA                            ; ===========================================================================
0001A8EA                            
0001A8EA                            BGHZ_ShipMove:
0001A8EA 5368 003C                  		subq.w	#1,$3C(a0)
0001A8EE 6A00                       		bpl.s	BGHZ_Reverse
0001A8F0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A8F4 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A8FA 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A900 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A906 6600                       		bne.s	BGHZ_Reverse
0001A908 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A90E 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A914                            
0001A914                            BGHZ_Reverse:
0001A914 0828 0000 0022             		btst	#0,obStatus(a0)
0001A91A 6600                       		bne.s	loc_17950
0001A91C 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A920                            
0001A920                            loc_17950:
0001A920 6000 FEAA                  		bra.w	loc_177E6
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            loc_17954:
0001A924 5368 003C                  		subq.w	#1,$3C(a0)
0001A928 6B00                       		bmi.s	loc_17960
0001A92A 6100 FF5C                  		bsr.w	BossMove
0001A92E 6000                       		bra.s	loc_17976
0001A930                            ; ===========================================================================
0001A930                            
0001A930                            loc_17960:
0001A930 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A936 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A93C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A940 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A946                            
0001A946                            loc_17976:
0001A946 6000 FE84                  		bra.w	loc_177E6
0001A94A                            ; ===========================================================================
0001A94A                            
0001A94A                            loc_1797A:
0001A94A 5368 003C                  		subq.w	#1,$3C(a0)
0001A94E 6B00                       		bmi.s	loc_17984
0001A950 6000 FEF4                  		bra.w	BossDefeated
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_17984:
0001A954 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A95A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A960 4268 0010                  		clr.w	obVelX(a0)
0001A964 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A968 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A96E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A972 6600                       		bne.s	locret_179AA
0001A974 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A97A                            
0001A97A                            locret_179AA:
0001A97A 4E75                       		rts	
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            loc_179AC:
0001A97C 5268 003C                  		addq.w	#1,$3C(a0)
0001A980 6700                       		beq.s	loc_179BC
0001A982 6A00                       		bpl.s	loc_179C2
0001A984 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A98A 6000                       		bra.s	loc_179EE
0001A98C                            ; ===========================================================================
0001A98C                            
0001A98C                            loc_179BC:
0001A98C 4268 0012                  		clr.w	obVelY(a0)
0001A990 6000                       		bra.s	loc_179EE
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            loc_179C2:
0001A992 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A998 6500                       		bcs.s	loc_179DA
0001A99A 6700                       		beq.s	loc_179E0
0001A99C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A9A2 6500                       		bcs.s	loc_179EE
0001A9A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9A8 6000                       		bra.s	loc_179EE
0001A9AA                            ; ===========================================================================
0001A9AA                            
0001A9AA                            loc_179DA:
0001A9AA 5168 0012                  		subq.w	#8,obVelY(a0)
0001A9AE 6000                       		bra.s	loc_179EE
0001A9B0                            ; ===========================================================================
0001A9B0                            
0001A9B0                            loc_179E0:
0001A9B0 4268 0012                          clr.w    obVelY(a0)
0001A9B4 4A38 FE2D                          tst.b     (v_invinc).w
0001A9B8 6600                               bne.s   @boss_invinc
0001A9BA 4A38 FE2E                          tst.b     (v_shoes).w
0001A9BE 6600                               bne.s   @boss_shoes
0001A9C0                            
0001A9C0 1038 F5C6                          move.b   (v_Saved_music),d0
0001A9C4 6000 0000                          bra.w      @boss_play
0001A9C8                            
0001A9C8                            @boss_invinc:
0001A9C8 103C 0000                          move.b #bgm_Invincible,d0
0001A9CC                            
0001A9CC                            @boss_shoes:
0001A9CC 103C 0000                          move.b #bgm_Ending,d0
0001A9D0                            
0001A9D0                            @boss_play:
0001A9D0 4EB8 124A                          jsr PlaySound
0001A9D4                            
0001A9D4                            loc_179EE:
0001A9D4 6100 FEB2                  		bsr.w	BossMove
0001A9D8 6000 FDF2                  		bra.w	loc_177E6
0001A9DC                            ; ===========================================================================
0001A9DC                            
0001A9DC                            loc_179F6:
0001A9DC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A9E2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A9E8 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001A9EE 6700                       		beq.s	loc_17A10
0001A9F0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A9F4 6000                       		bra.s	loc_17A16
0001A9F6                            ; ===========================================================================
0001A9F6                            
0001A9F6                            loc_17A10:
0001A9F6 4A28 0001                  		tst.b	obRender(a0)
0001A9FA 6A00                       		bpl.s	BGHZ_ShipDel
0001A9FC                            
0001A9FC                            loc_17A16:
0001A9FC 6100 FE8A                  		bsr.w	BossMove
0001AA00 6000 FDCA                  		bra.w	loc_177E6
0001AA04                            ; ===========================================================================
0001AA04                            
0001AA04                            BGHZ_ShipDel:
0001AA04 4EF9 0000 F886             		jmp	(DeleteObject).l
0001AA0A                            ; ===========================================================================
0001AA0A                            
0001AA0A                            BGHZ_FaceMain:	; Routine 4
0001AA0A 7000                       		moveq	#0,d0
0001AA0C 7201                       		moveq	#1,d1
0001AA0E 2268 0034                  		movea.l	$34(a0),a1
0001AA12 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AA16 5900                       		subq.b	#4,d0
0001AA18 6600                       		bne.s	loc_17A3E
0001AA1A 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AA20 6600                       		bne.s	loc_17A46
0001AA22 7204                       		moveq	#4,d1
0001AA24                            
0001AA24                            loc_17A3E:
0001AA24 5D00                       		subq.b	#6,d0
0001AA26 6B00                       		bmi.s	loc_17A46
0001AA28 720A                       		moveq	#$A,d1
0001AA2A 6000                       		bra.s	loc_17A5A
0001AA2C                            ; ===========================================================================
0001AA2C                            
0001AA2C                            loc_17A46:
0001AA2C 4A29 0020                  		tst.b	obColType(a1)
0001AA30 6600                       		bne.s	loc_17A50
0001AA32 7205                       		moveq	#5,d1
0001AA34 6000                       		bra.s	loc_17A5A
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            loc_17A50:
0001AA36 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AA3C 6500                       		bcs.s	loc_17A5A
0001AA3E 7204                       		moveq	#4,d1
0001AA40                            
0001AA40                            loc_17A5A:
0001AA40 1141 001C                  		move.b	d1,obAnim(a0)
0001AA44 5500                       		subq.b	#2,d0
0001AA46 6600                       		bne.s	BGHZ_FaceDisp
0001AA48 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AA4E 4A28 0001                  		tst.b	obRender(a0)
0001AA52 6A00                       		bpl.s	BGHZ_FaceDel
0001AA54                            
0001AA54                            BGHZ_FaceDisp:
0001AA54 6000                       		bra.s	BGHZ_Display
0001AA56                            ; ===========================================================================
0001AA56                            
0001AA56                            BGHZ_FaceDel:
0001AA56 4EF9 0000 F886             		jmp	(DeleteObject).l
0001AA5C                            ; ===========================================================================
0001AA5C                            
0001AA5C                            BGHZ_FlameMain:	; Routine 6
0001AA5C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AA62 2268 0034                  		movea.l	$34(a0),a1
0001AA66 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001AA6C 6600                       		bne.s	loc_17A96
0001AA6E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AA74 4A28 0001                  		tst.b	obRender(a0)
0001AA78 6A00                       		bpl.s	BGHZ_FlameDel
0001AA7A 6000                       		bra.s	BGHZ_FlameDisp
0001AA7C                            ; ===========================================================================
0001AA7C                            
0001AA7C                            loc_17A96:
0001AA7C 3029 0010                  		move.w	obVelX(a1),d0
0001AA80 6700                       		beq.s	BGHZ_FlameDisp
0001AA82 117C 0008 001C             		move.b	#8,obAnim(a0)
0001AA88                            
0001AA88                            BGHZ_FlameDisp:
0001AA88 6000                       		bra.s	BGHZ_Display
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            BGHZ_FlameDel:
0001AA8A 4EF9 0000 F886             		jmp	(DeleteObject).l
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            BGHZ_Display:
0001AA90 2268 0034                  		movea.l	$34(a0),a1
0001AA94 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AA9A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AAA0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AAA6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AAAC 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001AAB2 1028 0022                  		move.b	obStatus(a0),d0
0001AAB6 0200 0003                  		andi.b	#3,d0
0001AABA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AAC0 8128 0001                  		or.b	d0,obRender(a0)
0001AAC4 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AAC4 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AACA                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AACA                            ; ---------------------------------------------------------------------------
0001AACA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AACA                            ; ---------------------------------------------------------------------------
0001AACA                            
0001AACA                            BossBall:
0001AACA 7000                       		moveq	#0,d0
0001AACC 1028 0024                  		move.b	obRoutine(a0),d0
0001AAD0 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AAD4 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AAD8                            ; ===========================================================================
0001AAD8 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AADA 0000                       		dc.w GBall_Base-GBall_Index
0001AADC 0000                       		dc.w GBall_Display2-GBall_Index
0001AADE 0000                       		dc.w loc_17C68-GBall_Index
0001AAE0 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AAE2                            ; ===========================================================================
0001AAE2                            
0001AAE2                            GBall_Main:	; Routine 0
0001AAE2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AAE6 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AAEC 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AAF2 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AAFA 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AB00 45E8 0028                  		lea	obSubtype(a0),a2
0001AB04 14FC 0000                  		move.b	#0,(a2)+
0001AB08 7205                       		moveq	#5,d1
0001AB0A 2248                       		movea.l	a0,a1
0001AB0C 6000                       		bra.s	loc_17B60
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            GBall_MakeLinks:
0001AB0E 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001AB14 6600                       		bne.s	GBall_MakeBall
0001AB16 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AB1C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AB22 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AB26 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AB2C 237C 0000 9852 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AB34 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AB3A 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AB40 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AB44                            
0001AB44                            loc_17B60:
0001AB44 3A09                       		move.w	a1,d5
0001AB46 0445 D000                  		subi.w	#$D000,d5
0001AB4A EC4D                       		lsr.w	#6,d5
0001AB4C 0245 007F                  		andi.w	#$7F,d5
0001AB50 14C5                       		move.b	d5,(a2)+
0001AB52 137C 0004 0001             		move.b	#4,obRender(a1)
0001AB58 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AB5E 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AB64 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AB6A 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AB6E                            
0001AB6E                            GBall_MakeBall:
0001AB6E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AB74 237C 0000 9DAE 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AB7C 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AB82 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AB88 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AB8E 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AB94 4E75                       		rts	
0001AB96                            ; ===========================================================================
0001AB96                            
0001AB96 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AB9C                            
0001AB9C                            ; ===========================================================================
0001AB9C                            
0001AB9C                            GBall_Base:	; Routine 2
0001AB9C 47F9 0001 AB96             		lea	(GBall_PosData).l,a3
0001ABA2 45E8 0028                  		lea	obSubtype(a0),a2
0001ABA6 7C00                       		moveq	#0,d6
0001ABA8 1C1A                       		move.b	(a2)+,d6
0001ABAA                            
0001ABAA                            loc_17BC6:
0001ABAA 7800                       		moveq	#0,d4
0001ABAC 181A                       		move.b	(a2)+,d4
0001ABAE ED4C                       		lsl.w	#6,d4
0001ABB0 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ABB6 2244                       		movea.l	d4,a1
0001ABB8 101B                       		move.b	(a3)+,d0
0001ABBA B029 003C                  		cmp.b	$3C(a1),d0
0001ABBE 6700                       		beq.s	loc_17BE0
0001ABC0 5229 003C                  		addq.b	#1,$3C(a1)
0001ABC4                            
0001ABC4                            loc_17BE0:
0001ABC4 51CE FFE4                  		dbf	d6,loc_17BC6
0001ABC8                            
0001ABC8 B029 003C                  		cmp.b	$3C(a1),d0
0001ABCC 6600                       		bne.s	loc_17BFA
0001ABCE 2268 0034                  		movea.l	$34(a0),a1
0001ABD2 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001ABD8 6600                       		bne.s	loc_17BFA
0001ABDA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ABDE                            
0001ABDE                            loc_17BFA:
0001ABDE 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001ABE4 6700                       		beq.s	GBall_Display
0001ABE6 5268 0032                  		addq.w	#1,$32(a0)
0001ABEA                            
0001ABEA                            GBall_Display:
0001ABEA 6100 0000                  		bsr.w	sub_17C2A
0001ABEE 1028 0026                  		move.b	obAngle(a0),d0
0001ABF2 4EB9 0000 97C4             		jsr	(Swing_Move2).l
0001ABF8 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001ABFE                            ; ===========================================================================
0001ABFE                            
0001ABFE                            GBall_Display2:	; Routine 4
0001ABFE 6100 0000                  		bsr.w	sub_17C2A
0001AC02 4EB9 0000 9784             		jsr	(Obj48_Move).l
0001AC08 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AC0E                            
0001AC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AC0E                            
0001AC0E                            
0001AC0E                            sub_17C2A:
0001AC0E 2268 0034                  		movea.l	$34(a0),a1
0001AC12 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AC18 6400                       		bcc.s	loc_17C3C
0001AC1A 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AC20                            
0001AC20                            loc_17C3C:
0001AC20 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AC26 3029 000C                  		move.w	obY(a1),d0
0001AC2A D068 0032                  		add.w	$32(a0),d0
0001AC2E 3140 0038                  		move.w	d0,$38(a0)
0001AC32 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AC38 4A29 0022                  		tst.b	obStatus(a1)
0001AC3C 6A00                       		bpl.s	locret_17C66
0001AC3E 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AC42 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC48                            
0001AC48                            locret_17C66:
0001AC48 4E75                       		rts	
0001AC4A                            ; End of function sub_17C2A
0001AC4A                            
0001AC4A                            ; ===========================================================================
0001AC4A                            
0001AC4A                            loc_17C68:	; Routine 6
0001AC4A 2268 0034                  		movea.l	$34(a0),a1
0001AC4E 4A29 0022                  		tst.b	obStatus(a1)
0001AC52 6A00                       		bpl.s	GBall_Display3
0001AC54 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AC58 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC5E                            
0001AC5E                            GBall_Display3:
0001AC5E 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AC64                            ; ===========================================================================
0001AC64                            
0001AC64                            GBall_ChkVanish:; Routine 8
0001AC64 7000                       		moveq	#0,d0
0001AC66 4A28 001A                  		tst.b	obFrame(a0)
0001AC6A 6600                       		bne.s	GBall_Vanish
0001AC6C 5200                       		addq.b	#1,d0
0001AC6E                            
0001AC6E                            GBall_Vanish:
0001AC6E 1140 001A                  		move.b	d0,obFrame(a0)
0001AC72 2268 0034                  		movea.l	$34(a0),a1
0001AC76 4A29 0022                  		tst.b	obStatus(a1)
0001AC7A 6A00                       		bpl.s	GBall_Display4
0001AC7C 117C 0000 0020             		move.b	#0,obColType(a0)
0001AC82 6100 FBC2                  		bsr.w	BossDefeated
0001AC86 5328 003C                  		subq.b	#1,$3C(a0)
0001AC8A 6A00                       		bpl.s	GBall_Display4
0001AC8C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AC90 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AC96                            
0001AC96                            GBall_Display4:
0001AC96 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AC96 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AC9C                            		include	"_anim\Eggman.asm"
0001AC9C                            ; ---------------------------------------------------------------------------
0001AC9C                            ; Animation script - Eggman (bosses)
0001AC9C                            ; ---------------------------------------------------------------------------
0001AC9C 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AC9E 0000                       		dc.w @facenormal1-Ani_Eggman
0001ACA0 0000                       		dc.w @facenormal2-Ani_Eggman
0001ACA2 0000                       		dc.w @facenormal3-Ani_Eggman
0001ACA4 0000                       		dc.w @facelaugh-Ani_Eggman
0001ACA6 0000                       		dc.w @facehit-Ani_Eggman
0001ACA8 0000                       		dc.w @facepanic-Ani_Eggman
0001ACAA 0000                       		dc.w @blank-Ani_Eggman
0001ACAC 0000                       		dc.w @flame1-Ani_Eggman
0001ACAE 0000                       		dc.w @flame2-Ani_Eggman
0001ACB0 0000                       		dc.w @facedefeat-Ani_Eggman
0001ACB2 0000                       		dc.w @escapeflame-Ani_Eggman
0001ACB4 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ACB8 00                         		even
0001ACB8 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ACBC                            		even
0001ACBC 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ACC0                            		even
0001ACC0 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ACC4                            		even
0001ACC4 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ACC8                            		even
0001ACC8 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001ACCC                            		even
0001ACCC 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001ACD0                            		even
0001ACD0 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001ACD4 00                         		even
0001ACD4 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001ACD8                            		even
0001ACD8 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001ACDC                            		even
0001ACDC 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001ACE0 00                         		even
0001ACE0 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001ACEC 00                         		even
0001ACEC 00                         		even
0001ACEC                            Map_Eggman:	include	"_maps\Eggman.asm"
0001ACEC                            ; --------------------------------------------------------------------------------
0001ACEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001ACEC                            ; --------------------------------------------------------------------------------
0001ACEC                            
0001ACEC                            SME_F_pyS:	
0001ACEC 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001ACF0 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001ACF4 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001ACF8 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001ACFC 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AD00 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AD04 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AD06 05                         SME_F_pyS_1A:	dc.b 5	
0001AD07 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AD0C FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AD11 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AD16 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AD1B 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AD20 03                         SME_F_pyS_34:	dc.b 3	
0001AD21 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD26 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AD2B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD30 03                         SME_F_pyS_44:	dc.b 3	
0001AD31 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD36 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AD3B EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD40 04                         SME_F_pyS_54:	dc.b 4	
0001AD41 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AD46 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AD4B EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AD50 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD55 04                         SME_F_pyS_69:	dc.b 4	
0001AD56 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AD5B EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AD60 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AD65 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD6A 04                         SME_F_pyS_7E:	dc.b 4	
0001AD6B E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AD70 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AD75 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AD7A EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD7F 04                         SME_F_pyS_93:	dc.b 4	
0001AD80 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AD85 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AD8A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AD8F EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AD94 07                         SME_F_pyS_A8:	dc.b 7	
0001AD95 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AD9A E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AD9F EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ADA4 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001ADA9 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001ADAE F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001ADB3 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ADB8 01                         SME_F_pyS_CC:	dc.b 1	
0001ADB9 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001ADBE 01                         SME_F_pyS_D2:	dc.b 1	
0001ADBF 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001ADC4 00                         SME_F_pyS_D8:	dc.b 0	
0001ADC5 02                         SME_F_pyS_D9:	dc.b 2	
0001ADC6 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001ADCB 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001ADD0 02                         SME_F_pyS_E4:	dc.b 2	
0001ADD1 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001ADD6 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001ADDC 00                         		even
0001ADDC 00                         		even
0001ADDC                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001ADDC                            ; ---------------------------------------------------------------------------
0001ADDC                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001ADDC                            ; ---------------------------------------------------------------------------
0001ADDC                            Map_BossItems_internal:
0001ADDC 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001ADDE 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001ADE0 0000                       		dc.w @cross-Map_BossItems_internal
0001ADE2 0000                       		dc.w @widepipe-Map_BossItems_internal
0001ADE4 0000                       		dc.w @pipe-Map_BossItems_internal
0001ADE6 0000                       		dc.w @spike-Map_BossItems_internal
0001ADE8 0000                       		dc.w @legmask-Map_BossItems_internal
0001ADEA 0000                       		dc.w @legs-Map_BossItems_internal
0001ADEC 01                         @chainanchor1:	dc.b 1
0001ADED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001ADF2 02                         @chainanchor2:	dc.b 2
0001ADF3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001ADF8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ADFE 00                         		even
0001ADFE 01                         @cross:		dc.b 1
0001ADFF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AE04 01                         @widepipe:	dc.b 1
0001AE05 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AE0A 01                         @pipe:		dc.b 1
0001AE0B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AE10 04                         @spike:		dc.b 4
0001AE11 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AE16 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AE1B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AE20 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AE26 00                         		even
0001AE26 02                         @legmask:	dc.b 2
0001AE27 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AE2C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AE32 00                         		even
0001AE32 02                         @legs:		dc.b 2
0001AE33 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AE38 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AE3E 00                         		even
0001AE3E 00                         		even
0001AE3E                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AE3E                            ; ---------------------------------------------------------------------------
0001AE3E                            ; Object 77 - Eggman (LZ)
0001AE3E                            ; ---------------------------------------------------------------------------
0001AE3E                            
0001AE3E                            BossLabyrinth:
0001AE3E 7000                       		moveq	#0,d0
0001AE40 1028 0024                  		move.b	obRoutine(a0),d0
0001AE44 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AE48 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AE4C                            ; ===========================================================================
0001AE4C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AE4E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AE50 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AE52 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AE54                            
0001AE54 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AE56 0401                       		dc.b 4,	1
0001AE58 0607                       		dc.b 6,	7
0001AE5A                            ; ===========================================================================
0001AE5A                            
0001AE5A                            Obj77_Main:	; Routine 0
0001AE5A 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AE60 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AE66 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AE6C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AE72 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AE78 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AE7E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AE84 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AE88 2248                       		movea.l	a0,a1
0001AE8A 7202                       		moveq	#2,d1
0001AE8C 6000                       		bra.s	Obj77_LoadBoss
0001AE8E                            ; ===========================================================================
0001AE8E                            
0001AE8E                            Obj77_Loop:
0001AE8E 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001AE94 6600                       		bne.s	Obj77_ShipMain
0001AE96 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AE9A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AEA0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AEA6                            
0001AEA6                            Obj77_LoadBoss:
0001AEA6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AEAC 4229 0025                  		clr.b	ob2ndRout(a1)
0001AEB0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AEB4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AEB8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AEBE 237C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a1)
0001AEC6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AECC 137C 0004 0001             		move.b	#4,obRender(a1)
0001AED2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AED8 2348 0034                  		move.l	a0,$34(a1)
0001AEDC 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AEE0                            
0001AEE0                            Obj77_ShipMain:	; Routine 2
0001AEE0 43F8 D000                  		lea	(v_player).w,a1
0001AEE4 7000                       		moveq	#0,d0
0001AEE6 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AEEA 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AEEE 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AEF2 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001AEF8 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001AEFE 7003                       		moveq	#3,d0
0001AF00 C028 0022                  		and.b	obStatus(a0),d0
0001AF04 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AF0A 8128 0001                  		or.b	d0,obRender(a0)
0001AF0E 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001AF14                            ; ===========================================================================
0001AF14 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AF18 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AF1C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AF20 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AF24                            ; ===========================================================================
0001AF24                            
0001AF24                            loc_17F1E:
0001AF24 3029 0008                  		move.w	obX(a1),d0
0001AF28 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AF2C 6500                       		bcs.s	loc_17F38
0001AF2E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AF34 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AF3A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF3E                            
0001AF3E                            loc_17F38:
0001AF3E 6100 F948                  		bsr.w	BossMove
0001AF42 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AF48 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AF4E                            
0001AF4E                            loc_17F48:
0001AF4E 4A28 003D                  		tst.b	$3D(a0)
0001AF52 6600                       		bne.s	loc_17F8E
0001AF54 4A28 0022                  		tst.b	obStatus(a0)
0001AF58 6B00                       		bmi.s	loc_17F92
0001AF5A 4A28 0020                  		tst.b	obColType(a0)
0001AF5E 6600                       		bne.s	locret_17F8C
0001AF60 4A28 003E                  		tst.b	$3E(a0)
0001AF64 6600                       		bne.s	loc_17F70
0001AF66 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AF76                            
0001AF76                            loc_17F70:
0001AF76 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AF7A 7000                       		moveq	#0,d0
0001AF7C 4A51                       		tst.w	(a1)
0001AF7E 6600                       		bne.s	loc_17F7E
0001AF80 303C 0EEE                  		move.w	#cWhite,d0
0001AF84                            
0001AF84                            loc_17F7E:
0001AF84 3280                       		move.w	d0,(a1)
0001AF86 5328 003E                  		subq.b	#1,$3E(a0)
0001AF8A 6600                       		bne.s	locret_17F8C
0001AF8C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AF92                            
0001AF92                            locret_17F8C:
0001AF92 4E75                       		rts	
0001AF94                            ; ===========================================================================
0001AF94                            
0001AF94                            loc_17F8E:
0001AF94 6000 F8B0                  		bra.w	BossDefeated
0001AF98                            ; ===========================================================================
0001AF98                            
0001AF98                            loc_17F92:
0001AF98 7064                       		moveq	#100,d0
0001AF9A 6100 0000                  		bsr.w	AddPoints
0001AF9E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AFA4 4E75                       		rts	
0001AFA6                            ; ===========================================================================
0001AFA6                            
0001AFA6                            loc_17FA0:
0001AFA6 70FE                       		moveq	#-2,d0
0001AFA8 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AFAE 6500                       		bcs.s	loc_17FB6
0001AFB0 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AFB6 4268 0010                  		clr.w	obVelX(a0)
0001AFBA 5240                       		addq.w	#1,d0
0001AFBC                            
0001AFBC                            loc_17FB6:
0001AFBC 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AFC2 6E00                       		bgt.s	loc_17FCA
0001AFC4 317C 0500 0038             		move.w	#$500,$38(a0)
0001AFCA 4268 0012                  		clr.w	obVelY(a0)
0001AFCE 5240                       		addq.w	#1,d0
0001AFD0                            
0001AFD0                            loc_17FCA:
0001AFD0 6600                       		bne.s	loc_17FDC
0001AFD2 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AFD8 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AFDE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFE2                            
0001AFE2                            loc_17FDC:
0001AFE2 6000 FF5A                  		bra.w	loc_17F38
0001AFE6                            ; ===========================================================================
0001AFE6                            
0001AFE6                            loc_17FE0:
0001AFE6 70FE                       		moveq	#-2,d0
0001AFE8 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AFEE 6500                       		bcs.s	loc_17FF6
0001AFF0 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AFF6 4268 0010                  		clr.w	obVelX(a0)
0001AFFA 5240                       		addq.w	#1,d0
0001AFFC                            
0001AFFC                            loc_17FF6:
0001AFFC 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B002 6E00                       		bgt.s	loc_1800A
0001B004 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B00A 4268 0012                  		clr.w	obVelY(a0)
0001B00E 5240                       		addq.w	#1,d0
0001B010                            
0001B010                            loc_1800A:
0001B010 6600                       		bne.s	loc_1801A
0001B012 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B018 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B01C 4228 003F                  		clr.b	$3F(a0)
0001B020                            
0001B020                            loc_1801A:
0001B020 6000 FF1C                  		bra.w	loc_17F38
0001B024                            ; ===========================================================================
0001B024                            
0001B024                            loc_1801E:
0001B024 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B02A 6E00                       		bgt.s	loc_1804E
0001B02C 317C 0100 0038             		move.w	#$100,$38(a0)
0001B032 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B038 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B03E 4A28 003D                  		tst.b	$3D(a0)
0001B042 6700                       		beq.s	loc_18046
0001B044 E1E8 0010                  		asl	obVelX(a0)
0001B048 E1E8 0012                  		asl	obVelY(a0)
0001B04C                            
0001B04C                            loc_18046:
0001B04C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B050 6000 FEEC                  		bra.w	loc_17F38
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            loc_1804E:
0001B054 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B05A 5428 003F                  		addq.b	#2,$3F(a0)
0001B05E 1028 003F                  		move.b	$3F(a0),d0
0001B062 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B068 4A41                       		tst.w	d1
0001B06A 6A00                       		bpl.s	loc_1806C
0001B06C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B072                            
0001B072                            loc_1806C:
0001B072 E840                       		asr.w	#4,d0
0001B074 4840                       		swap	d0
0001B076 4240                       		clr.w	d0
0001B078 D0A8 0030                  		add.l	$30(a0),d0
0001B07C 4840                       		swap	d0
0001B07E 3140 0008                  		move.w	d0,obX(a0)
0001B082 3028 0012                  		move.w	obVelY(a0),d0
0001B086 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B08A 9268 000C                  		sub.w	obY(a0),d1
0001B08E 6500                       		bcs.s	loc_180A2
0001B090 0441 0048                  		subi.w	#$48,d1
0001B094 6500                       		bcs.s	loc_180A2
0001B096 E240                       		asr.w	#1,d0
0001B098 0441 0028                  		subi.w	#$28,d1
0001B09C 6500                       		bcs.s	loc_180A2
0001B09E E240                       		asr.w	#1,d0
0001B0A0 0441 0028                  		subi.w	#$28,d1
0001B0A4 6500                       		bcs.s	loc_180A2
0001B0A6 7000                       		moveq	#0,d0
0001B0A8                            
0001B0A8                            loc_180A2:
0001B0A8 48C0                       		ext.l	d0
0001B0AA E180                       		asl.l	#8,d0
0001B0AC 4A28 003D                  		tst.b	$3D(a0)
0001B0B0 6700                       		beq.s	loc_180AE
0001B0B2 D080                       		add.l	d0,d0
0001B0B4                            
0001B0B4                            loc_180AE:
0001B0B4 D1A8 0038                  		add.l	d0,$38(a0)
0001B0B8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B0BE 6000 FE8E                  		bra.w	loc_17F48
0001B0C2                            ; ===========================================================================
0001B0C2                            
0001B0C2                            loc_180BC:
0001B0C2 70FE                       		moveq	#-2,d0
0001B0C4 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B0CA 6500                       		bcs.s	loc_180D2
0001B0CC 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B0D2 4268 0010                  		clr.w	obVelX(a0)
0001B0D6 5240                       		addq.w	#1,d0
0001B0D8                            
0001B0D8                            loc_180D2:
0001B0D8 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B0DE 6E00                       		bgt.s	loc_180E6
0001B0E0 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B0E6 4268 0012                  		clr.w	obVelY(a0)
0001B0EA 5240                       		addq.w	#1,d0
0001B0EC                            
0001B0EC                            loc_180E6:
0001B0EC 6600                       		bne.s	loc_180F2
0001B0EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B0F2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B0F8                            
0001B0F8                            loc_180F2:
0001B0F8 6000 FE44                  		bra.w	loc_17F38
0001B0FC                            ; ===========================================================================
0001B0FC                            
0001B0FC                            loc_180F6:
0001B0FC 4A28 003D                  		tst.b	$3D(a0)
0001B100 6600                       		bne.s	loc_18112
0001B102 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B108 6D00                       		blt.s	loc_18126
0001B10A 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B110 6E00                       		bgt.s	loc_18126
0001B112 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B118                            
0001B118                            loc_18112:
0001B118 4A38 FE2D                          tst.b     (v_invinc).w
0001B11C 6600                               bne.s   @boss_invinc
0001B11E                            
0001B11E 1038 F5C6                          move.b   (v_Saved_music),d0
0001B122 6000 0000                          bra.w      @boss_play
0001B126                            
0001B126                            @boss_invinc:
0001B126 103C 0000                          move.b #bgm_Invincible,d0
0001B12A                            
0001B12A                            @boss_play:
0001B12A 4EB8 124A                          jsr PlaySound
0001B12E 4238 F7AA                          clr.b    (f_lockscreen).w
0001B132 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B138 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B13C                            
0001B13C                            loc_18126:
0001B13C 6000 FE00                  		bra.w	loc_17F38
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            loc_1812A:
0001B140 4A28 003D                  		tst.b	$3D(a0)
0001B144 6600                       		bne.s	loc_18136
0001B146 5328 003C                  		subq.b	#1,$3C(a0)
0001B14A 6600                       		bne.s	loc_1814E
0001B14C                            
0001B14C                            loc_18136:
0001B14C 4228 003C                  		clr.b	$3C(a0)
0001B150 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B156 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B15C 4228 003D                  		clr.b	$3D(a0)
0001B160 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B164                            
0001B164                            loc_1814E:
0001B164 6000 FDD8                  		bra.w	loc_17F38
0001B168                            ; ===========================================================================
0001B168                            
0001B168                            loc_18152:
0001B168 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B16E 6400                       		bcc.s	loc_18160
0001B170 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B174 6000                       		bra.s	loc_18166
0001B176                            ; ===========================================================================
0001B176                            
0001B176                            loc_18160:
0001B176 4A28 0001                  		tst.b	obRender(a0)
0001B17A 6A00                       		bpl.s	Obj77_ShipDel
0001B17C                            
0001B17C                            loc_18166:
0001B17C 6000 FDC0                  		bra.w	loc_17F38
0001B180                            ; ===========================================================================
0001B180                            
0001B180                            Obj77_ShipDel:
0001B180 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            Obj77_FaceMain:	; Routine 4
0001B186 2268 0034                  		movea.l	$34(a0),a1
0001B18A 1011                       		move.b	(a1),d0
0001B18C B010                       		cmp.b	(a0),d0
0001B18E 6600                       		bne.s	Obj77_FaceDel
0001B190 7000                       		moveq	#0,d0
0001B192 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B196 7201                       		moveq	#1,d1
0001B198 4A28 003D                  		tst.b	$3D(a0)
0001B19C 6700                       		beq.s	loc_1818C
0001B19E 720A                       		moveq	#$A,d1
0001B1A0 6000                       		bra.s	loc_181A0
0001B1A2                            ; ===========================================================================
0001B1A2                            
0001B1A2                            loc_1818C:
0001B1A2 4A29 0020                  		tst.b	obColType(a1)
0001B1A6 6600                       		bne.s	loc_18196
0001B1A8 7205                       		moveq	#5,d1
0001B1AA 6000                       		bra.s	loc_181A0
0001B1AC                            ; ===========================================================================
0001B1AC                            
0001B1AC                            loc_18196:
0001B1AC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B1B2 6500                       		bcs.s	loc_181A0
0001B1B4 7204                       		moveq	#4,d1
0001B1B6                            
0001B1B6                            loc_181A0:
0001B1B6 1141 001C                  		move.b	d1,obAnim(a0)
0001B1BA 0C00 000E                  		cmpi.b	#$E,d0
0001B1BE 6600                       		bne.s	loc_181B6
0001B1C0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B1C6 4A28 0001                  		tst.b	obRender(a0)
0001B1CA 6A00                       		bpl.s	Obj77_FaceDel
0001B1CC                            
0001B1CC                            loc_181B6:
0001B1CC 6000                       		bra.s	Obj77_Display
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            Obj77_FaceDel:
0001B1CE 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B1D4                            ; ===========================================================================
0001B1D4                            
0001B1D4                            Obj77_FlameMain:; Routine 6
0001B1D4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B1DA 2268 0034                  		movea.l	$34(a0),a1
0001B1DE 1011                       		move.b	(a1),d0
0001B1E0 B010                       		cmp.b	(a0),d0
0001B1E2 6600                       		bne.s	Obj77_FlameDel
0001B1E4 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B1EA 6600                       		bne.s	loc_181F0
0001B1EC 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B1F2 4A28 0001                  		tst.b	1(a0)
0001B1F6 6A00                       		bpl.s	Obj77_FlameDel
0001B1F8 6000                       		bra.s	loc_181F0
0001B1FA                            ; ===========================================================================
0001B1FA 4A69 0010                  		tst.w	obVelX(a1)
0001B1FE 6700                       		beq.s	loc_181F0
0001B200 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B206                            
0001B206                            loc_181F0:
0001B206 6000                       		bra.s	Obj77_Display
0001B208                            ; ===========================================================================
0001B208                            
0001B208                            Obj77_FlameDel:
0001B208 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B20E                            ; ===========================================================================
0001B20E                            
0001B20E                            Obj77_Display:
0001B20E 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001B214 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001B21A 2268 0034                  		movea.l	$34(a0),a1
0001B21E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B224 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B22A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B230 7003                       		moveq	#3,d0
0001B232 C028 0022                  		and.b	obStatus(a0),d0
0001B236 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B23C 8128 0001                  		or.b	d0,obRender(a0)
0001B240 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B240 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B246                            		include	"_incObj\73 Boss - Marble.asm"
0001B246                            ; ---------------------------------------------------------------------------
0001B246                            ; Object 73 - Eggman (MZ)
0001B246                            ; ---------------------------------------------------------------------------
0001B246                            
0001B246                            BossMarble:
0001B246 7000                       		moveq	#0,d0
0001B248 1028 0024                  		move.b	obRoutine(a0),d0
0001B24C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B250 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B254                            ; ===========================================================================
0001B254 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B256 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B258 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B25A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B25C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B25E                            
0001B25E 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B262 0401 0200                  		dc.b 4,	1, $02, $00
0001B266 0607 0200                  		dc.b 6,	7, $02, $00
0001B26A 0800 0180                  		dc.b 8,	0, $01, $80
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            Obj73_Main:	; Routine 0
0001B26E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B274 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B27A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B280 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B286 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B28A 2248                       		movea.l	a0,a1
0001B28C 7203                       		moveq	#3,d1
0001B28E 6000                       		bra.s	Obj73_LoadBoss
0001B290                            ; ===========================================================================
0001B290                            
0001B290                            Obj73_Loop:
0001B290 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001B296 6600                       		bne.s	Obj73_ShipMain
0001B298 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B29C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B2A2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B2A8                            
0001B2A8                            Obj73_LoadBoss:
0001B2A8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B2AE 4229 0025                  		clr.b	ob2ndRout(a1)
0001B2B2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B2B6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B2BA 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B2BE 237C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a1)
0001B2C6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B2CC 137C 0004 0001             		move.b	#4,obRender(a1)
0001B2D2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B2D8 2348 0034                  		move.l	a0,$34(a1)
0001B2DC 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B2E0                            
0001B2E0                            Obj73_ShipMain:	; Routine 2
0001B2E0 7000                       		moveq	#0,d0
0001B2E2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B2E6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B2EA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B2EE 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001B2F4 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001B2FA 7003                       		moveq	#3,d0
0001B2FC C028 0022                  		and.b	obStatus(a0),d0
0001B300 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B306 8128 0001                  		or.b	d0,obRender(a0)
0001B30A 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B310                            ; ===========================================================================
0001B310 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B312 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B314 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B316 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B318 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B31A                            ; ===========================================================================
0001B31A                            
0001B31A                            loc_18302:
0001B31A 1028 003F                  		move.b	$3F(a0),d0
0001B31E 5428 003F                  		addq.b	#2,$3F(a0)
0001B322 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B328 E440                       		asr.w	#2,d0
0001B32A 3140 0012                  		move.w	d0,obVelY(a0)
0001B32E 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B334 6100 F552                  		bsr.w	BossMove
0001B338 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B33E 6600                       		bne.s	loc_18334
0001B340 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B344 4228 0028                  		clr.b	obSubtype(a0)
0001B348 42A8 0010                  		clr.l	obVelX(a0)
0001B34C                            
0001B34C                            loc_18334:
0001B34C 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B352 1140 0034                  		move.b	d0,$34(a0)
0001B356                            
0001B356                            loc_1833E:
0001B356 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B35C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B362 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B368 6400                       		bcc.s	locret_18390
0001B36A 4A28 0022                  		tst.b	obStatus(a0)
0001B36E 6B00                       		bmi.s	loc_18392
0001B370 4A28 0020                  		tst.b	obColType(a0)
0001B374 6600                       		bne.s	locret_18390
0001B376 4A28 003E                  		tst.b	$3E(a0)
0001B37A 6600                       		bne.s	loc_18374
0001B37C 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B38C                            
0001B38C                            loc_18374:
0001B38C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B390 7000                       		moveq	#0,d0
0001B392 4A51                       		tst.w	(a1)
0001B394 6600                       		bne.s	loc_18382
0001B396 303C 0EEE                  		move.w	#cWhite,d0
0001B39A                            
0001B39A                            loc_18382:
0001B39A 3280                       		move.w	d0,(a1)
0001B39C 5328 003E                  		subq.b	#1,$3E(a0)
0001B3A0 6600                       		bne.s	locret_18390
0001B3A2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3A8                            
0001B3A8                            locret_18390:
0001B3A8 4E75                       		rts	
0001B3AA                            ; ===========================================================================
0001B3AA                            
0001B3AA                            loc_18392:
0001B3AA 7064                       		moveq	#100,d0
0001B3AC 6100 0000                  		bsr.w	AddPoints
0001B3B0 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B3B6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B3BC 4268 0010                  		clr.w	obVelX(a0)
0001B3C0 4E75                       		rts	
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            loc_183AA:
0001B3C2 7000                       		moveq	#0,d0
0001B3C4 1028 0028                  		move.b	obSubtype(a0),d0
0001B3C8 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B3CC 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B3D0 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B3D6 6000 FF7E                  		bra.w	loc_1833E
0001B3DA                            ; ===========================================================================
0001B3DA 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B3DC 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B3DE 0000                       		dc.w loc_183CA-off_183C2
0001B3E0 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B3E2                            ; ===========================================================================
0001B3E2                            
0001B3E2                            loc_183CA:
0001B3E2 4A68 0010                  		tst.w	obVelX(a0)
0001B3E6 6600                       		bne.s	loc_183FE
0001B3E8 7040                       		moveq	#$40,d0
0001B3EA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B3F0 6700                       		beq.s	loc_183E6
0001B3F2 6500                       		bcs.s	loc_183DE
0001B3F4 4440                       		neg.w	d0
0001B3F6                            
0001B3F6                            loc_183DE:
0001B3F6 3140 0012                  		move.w	d0,obVelY(a0)
0001B3FA 6000 F48C                  		bra.w	BossMove
0001B3FE                            ; ===========================================================================
0001B3FE                            
0001B3FE                            loc_183E6:
0001B3FE 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B404 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B40A 0828 0000 0022             		btst	#0,obStatus(a0)
0001B410 6600                       		bne.s	loc_183FE
0001B412 4468 0010                  		neg.w	obVelX(a0)
0001B416                            
0001B416                            loc_183FE:
0001B416 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B41C 6400                       		bcc.s	Obj73_MakeLava
0001B41E 6100 F468                  		bsr.w	BossMove
0001B422 5968 0012                  		subq.w	#4,obVelY(a0)
0001B426                            
0001B426                            Obj73_MakeLava:
0001B426 5328 0034                  		subq.b	#1,$34(a0)
0001B42A 6400                       		bcc.s	loc_1845C
0001B42C 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001B432 6600                       		bne.s	loc_1844A
0001B434 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B438 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B43E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B444 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B44A 80FC 0050                  		divu.w	#$50,d0
0001B44E 4840                       		swap	d0
0001B450 0640 1878                  		addi.w	#$1878,d0
0001B454 3340 0008                  		move.w	d0,obX(a1)
0001B458 EE09                       		lsr.b	#7,d1
0001B45A 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B460                            
0001B460                            loc_1844A:
0001B460 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001B466 0200 001F                  		andi.b	#$1F,d0
0001B46A 0600 0040                  		addi.b	#$40,d0
0001B46E 1140 0034                  		move.b	d0,$34(a0)
0001B472                            
0001B472                            loc_1845C:
0001B472 0828 0000 0022             		btst	#0,obStatus(a0)
0001B478 6700                       		beq.s	loc_18474
0001B47A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B480 6D00                       		blt.s	locret_1849C
0001B482 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B488 6000                       		bra.s	loc_18482
0001B48A                            ; ===========================================================================
0001B48A                            
0001B48A                            loc_18474:
0001B48A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B490 6E00                       		bgt.s	locret_1849C
0001B492 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B498                            
0001B498                            loc_18482:
0001B498 4268 0010                  		clr.w	obVelX(a0)
0001B49C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B4A2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B4A8 6400                       		bcc.s	loc_18498
0001B4AA 4468 0012                  		neg.w	obVelY(a0)
0001B4AE                            
0001B4AE                            loc_18498:
0001B4AE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B4B2                            
0001B4B2                            locret_1849C:
0001B4B2 4E75                       		rts	
0001B4B4                            ; ===========================================================================
0001B4B4                            
0001B4B4                            Obj73_MakeLava2:
0001B4B4 6100 F3D2                  		bsr.w	BossMove
0001B4B8 3028 0038                  		move.w	$38(a0),d0
0001B4BC 0440 022C                  		subi.w	#$22C,d0
0001B4C0 6E00                       		bgt.s	locret_184F4
0001B4C2 303C 022C                  		move.w	#$22C,d0
0001B4C6 4A68 0012                  		tst.w	obVelY(a0)
0001B4CA 6700                       		beq.s	loc_184EA
0001B4CC 4268 0012                  		clr.w	obVelY(a0)
0001B4D0 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B4D6 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B4DC 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001B4E2 6600                       		bne.s	loc_184EA
0001B4E4 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B4EA 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B4F0 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B4F6 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B4FA 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B500                            
0001B500                            loc_184EA:
0001B500 5368 003C                  		subq.w	#1,$3C(a0)
0001B504 6600                       		bne.s	locret_184F4
0001B506 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B50A                            
0001B50A                            locret_184F4:
0001B50A 4E75                       		rts	
0001B50C                            ; ===========================================================================
0001B50C                            
0001B50C                            loc_184F6:
0001B50C 5368 003C                  		subq.w	#1,$3C(a0)
0001B510 6B00                       		bmi.s	loc_18500
0001B512 6000 F332                  		bra.w	BossDefeated
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            loc_18500:
0001B516 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B51C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B522 4268 0010                  		clr.w	obVelX(a0)
0001B526 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B52A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B530 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B534 6600                       		bne.s	locret_1852A
0001B536 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B53C 4268 0012                  		clr.w	obVelY(a0)
0001B540                            
0001B540                            locret_1852A:
0001B540 4E75                       		rts	
0001B542                            ; ===========================================================================
0001B542                            
0001B542                            loc_1852C:
0001B542 5268 003C                  		addq.w	#1,$3C(a0)
0001B546 6700                       		beq.s	loc_18544
0001B548 6A00                       		bpl.s	loc_1854E
0001B54A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B550 6400                       		bcc.s	loc_18544
0001B552 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B558 6000                       		bra.s	loc_1857A
0001B55A                            ; ===========================================================================
0001B55A                            
0001B55A                            loc_18544:
0001B55A 4268 0012                  		clr.w	obVelY(a0)
0001B55E 4268 003C                  		clr.w	$3C(a0)
0001B562 6000                       		bra.s	loc_1857A
0001B564                            ; ===========================================================================
0001B564                            
0001B564                            loc_1854E:
0001B564 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B56A 6500                       		bcs.s	loc_18566
0001B56C 6700                       		beq.s	loc_1856C
0001B56E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B574 6500                       		bcs.s	loc_1857A
0001B576 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B57A 6000                       		bra.s	loc_1857A
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            loc_18566:
0001B57C 5168 0012                  		subq.w	#8,obVelY(a0)
0001B580 6000                       		bra.s	loc_1857A
0001B582                            ; ===========================================================================
0001B582                            
0001B582                            loc_1856C:
0001B582 4268 0012                  		clr.w	obVelY(a0)
0001B590                            
0001B590                            loc_1857A:
0001B590 6100 F2F6                  		bsr.w	BossMove
0001B594 6000 FDC0                  		bra.w	loc_1833E
0001B598                            ; ===========================================================================
0001B598                            
0001B598                            loc_18582:
0001B598 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B59E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B5A4 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B5AA 6400                       		bcc.s	loc_1859C
0001B5AC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B5B0 6000                       		bra.s	loc_185A2
0001B5B2                            ; ===========================================================================
0001B5B2                            
0001B5B2                            loc_1859C:
0001B5B2 4A28 0001                  		tst.b	obRender(a0)
0001B5B6 6A00                       		bpl.s	Obj73_ShipDel
0001B5B8                            
0001B5B8                            loc_185A2:
0001B5B8 6100 F2CE                  		bsr.w	BossMove
0001B5BC 6000 FD98                  		bra.w	loc_1833E
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            Obj73_ShipDel:
0001B5C0 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B5C6                            ; ===========================================================================
0001B5C6                            
0001B5C6                            Obj73_FaceMain:	; Routine 4
0001B5C6 7000                       		moveq	#0,d0
0001B5C8 7201                       		moveq	#1,d1
0001B5CA 2268 0034                  		movea.l	$34(a0),a1
0001B5CE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B5D2 5540                       		subq.w	#2,d0
0001B5D4 6600                       		bne.s	loc_185D2
0001B5D6 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B5DC 6700                       		beq.s	loc_185DA
0001B5DE 4A69 0012                  		tst.w	obVelY(a1)
0001B5E2 6600                       		bne.s	loc_185DA
0001B5E4 7204                       		moveq	#4,d1
0001B5E6 6000                       		bra.s	loc_185EE
0001B5E8                            ; ===========================================================================
0001B5E8                            
0001B5E8                            loc_185D2:
0001B5E8 5500                       		subq.b	#2,d0
0001B5EA 6B00                       		bmi.s	loc_185DA
0001B5EC 720A                       		moveq	#$A,d1
0001B5EE 6000                       		bra.s	loc_185EE
0001B5F0                            ; ===========================================================================
0001B5F0                            
0001B5F0                            loc_185DA:
0001B5F0 4A29 0020                  		tst.b	obColType(a1)
0001B5F4 6600                       		bne.s	loc_185E4
0001B5F6 7205                       		moveq	#5,d1
0001B5F8 6000                       		bra.s	loc_185EE
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            loc_185E4:
0001B5FA 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B600 6500                       		bcs.s	loc_185EE
0001B602 7204                       		moveq	#4,d1
0001B604                            
0001B604                            loc_185EE:
0001B604 1141 001C                  		move.b	d1,obAnim(a0)
0001B608 5900                       		subq.b	#4,d0
0001B60A 6600                       		bne.s	loc_18602
0001B60C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B612 4A28 0001                  		tst.b	obRender(a0)
0001B616 6A00                       		bpl.s	Obj73_FaceDel
0001B618                            
0001B618                            loc_18602:
0001B618 6000                       		bra.s	Obj73_Display
0001B61A                            ; ===========================================================================
0001B61A                            
0001B61A                            Obj73_FaceDel:
0001B61A 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B620                            ; ===========================================================================
0001B620                            
0001B620                            Obj73_FlameMain:; Routine 6
0001B620 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B626 2268 0034                  		movea.l	$34(a0),a1
0001B62A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B630 6D00                       		blt.s	loc_1862A
0001B632 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B638 4A28 0001                  		tst.b	obRender(a0)
0001B63C 6A00                       		bpl.s	Obj73_FlameDel
0001B63E 6000                       		bra.s	loc_18636
0001B640                            ; ===========================================================================
0001B640                            
0001B640                            loc_1862A:
0001B640 4A69 0010                  		tst.w	obVelX(a1)
0001B644 6700                       		beq.s	loc_18636
0001B646 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B64C                            
0001B64C                            loc_18636:
0001B64C 6000                       		bra.s	Obj73_Display
0001B64E                            ; ===========================================================================
0001B64E                            
0001B64E                            Obj73_FlameDel:
0001B64E 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B654                            ; ===========================================================================
0001B654                            
0001B654                            Obj73_Display:
0001B654 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001B65A 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001B660                            
0001B660                            loc_1864A:
0001B660 2268 0034                  		movea.l	$34(a0),a1
0001B664 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B66A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B670 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B676 7003                       		moveq	#3,d0
0001B678 C028 0022                  		and.b	obStatus(a0),d0
0001B67C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B682 8128 0001                  		or.b	d0,obRender(a0)
0001B686 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B68C                            ; ===========================================================================
0001B68C                            
0001B68C                            Obj73_TubeMain:	; Routine 8
0001B68C 2268 0034                  		movea.l	$34(a0),a1
0001B690 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B696 6600                       		bne.s	loc_18688
0001B698 4A28 0001                  		tst.b	obRender(a0)
0001B69C 6A00                       		bpl.s	Obj73_TubeDel
0001B69E                            
0001B69E                            loc_18688:
0001B69E 217C 0001 ADDC 0004        		move.l	#Map_BossItems,obMap(a0)
0001B6A6 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B6AC 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B6B2 60AC                       		bra.s	loc_1864A
0001B6B4                            ; ===========================================================================
0001B6B4                            
0001B6B4                            Obj73_TubeDel:
0001B6B4 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B6B4 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B6BA                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B6BA                            ; ---------------------------------------------------------------------------
0001B6BA                            ; Object 74 - lava that	Eggman drops (MZ)
0001B6BA                            ; ---------------------------------------------------------------------------
0001B6BA                            
0001B6BA                            BossFire:
0001B6BA 7000                       		moveq	#0,d0
0001B6BC 1028 0024                  		move.b	obRoutine(a0),d0
0001B6C0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B6C4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B6C8 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B6CE                            ; ===========================================================================
0001B6CE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B6D0 0000                       		dc.w Obj74_Action-Obj74_Index
0001B6D2 0000                       		dc.w loc_18886-Obj74_Index
0001B6D4 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B6D6                            ; ===========================================================================
0001B6D6                            
0001B6D6                            Obj74_Main:	; Routine 0
0001B6D6 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B6DC 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B6E2 217C 0000 D54C 0004        		move.l	#Map_Fire,obMap(a0)
0001B6EA 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B6F0 117C 0004 0001             		move.b	#4,obRender(a0)
0001B6F6 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B6FC 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B702 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B708 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B70C 4A28 0028                  		tst.b	obSubtype(a0)
0001B710 6600                       		bne.s	loc_1870A
0001B712 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B718 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B71C 6000 0000                  		bra.w	loc_18886
0001B720                            ; ===========================================================================
0001B720                            
0001B720                            loc_1870A:
0001B720 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B730                            
0001B730                            Obj74_Action:	; Routine 2
0001B730 7000                       		moveq	#0,d0
0001B732 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B736 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B73A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B73E 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001B744 43F9 0001 070A             		lea	(Ani_Fire).l,a1
0001B74A 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001B750 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B756 6200                       		bhi.s	Obj74_Delete
0001B758 4E75                       		rts	
0001B75A                            ; ===========================================================================
0001B75A                            
0001B75A                            Obj74_Delete:
0001B75A 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B760                            ; ===========================================================================
0001B760 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B762 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B764 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B766 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B768                            ; ===========================================================================
0001B768                            
0001B768                            Obj74_Drop:
0001B768 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B76E 5328 0029                  		subq.b	#1,$29(a0)
0001B772 6A00                       		bpl.s	locret_18780
0001B774 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B77A 4228 0028                  		clr.b	obSubtype(a0)
0001B77E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B784 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B78A 6100 C634                  		bsr.w	ObjFloorDist
0001B78E 4A41                       		tst.w	d1
0001B790 6A00                       		bpl.s	locret_18780
0001B792 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B796                            
0001B796                            locret_18780:
0001B796 4E75                       		rts	
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            Obj74_MakeFlame:
0001B798 5568 000C                  		subq.w	#2,obY(a0)
0001B79C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B7A2 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B7A8 4268 0012                  		clr.w	obVelY(a0)
0001B7AC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B7B2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B7B8 117C 0003 0029             		move.b	#3,$29(a0)
0001B7BE 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001B7C4 6600                       		bne.s	loc_187CA
0001B7C6 47D1                       		lea	(a1),a3
0001B7C8 45D0                       		lea	(a0),a2
0001B7CA 7003                       		moveq	#3,d0
0001B7CC                            
0001B7CC                            Obj74_Loop:
0001B7CC 26DA                       		move.l	(a2)+,(a3)+
0001B7CE 26DA                       		move.l	(a2)+,(a3)+
0001B7D0 26DA                       		move.l	(a2)+,(a3)+
0001B7D2 26DA                       		move.l	(a2)+,(a3)+
0001B7D4 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B7D8                            
0001B7D8 4469 0010                  		neg.w	obVelX(a1)
0001B7DC 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B7E0                            
0001B7E0                            loc_187CA:
0001B7E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B7E4 4E75                       		rts	
0001B7E6                            
0001B7E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7E6                            
0001B7E6                            
0001B7E6                            Obj74_Duplicate2:
0001B7E6 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001B7EC 6600                       		bne.s	locret_187EE
0001B7EE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7F4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7FA 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B7FE 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B804                            
0001B804                            locret_187EE:
0001B804 4E75                       		rts	
0001B806                            ; End of function Obj74_Duplicate2
0001B806                            
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            Obj74_Duplicate:
0001B806 6100 C5B8                  		bsr.w	ObjFloorDist
0001B80A 4A41                       		tst.w	d1
0001B80C 6A00                       		bpl.s	loc_18826
0001B80E 3028 0008                  		move.w	obX(a0),d0
0001B812 0C40 1940                  		cmpi.w	#$1940,d0
0001B816 6E00                       		bgt.s	loc_1882C
0001B818 3228 0030                  		move.w	$30(a0),d1
0001B81C B240                       		cmp.w	d0,d1
0001B81E 6700                       		beq.s	loc_1881E
0001B820 0240 0010                  		andi.w	#$10,d0
0001B824 0241 0010                  		andi.w	#$10,d1
0001B828 B240                       		cmp.w	d0,d1
0001B82A 6700                       		beq.s	loc_1881E
0001B82C 61B8                       		bsr.s	Obj74_Duplicate2
0001B82E 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B834                            
0001B834                            loc_1881E:
0001B834 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B83A 4E75                       		rts	
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            loc_18826:
0001B83C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B840 4E75                       		rts	
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            loc_1882C:
0001B842 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B846 4E75                       		rts	
0001B848                            ; ===========================================================================
0001B848                            
0001B848                            Obj74_FallEdge:
0001B848 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B84E 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B854 3028 0008                  		move.w	obX(a0),d0
0001B858 9068 0032                  		sub.w	$32(a0),d0
0001B85C 6A00                       		bpl.s	loc_1884A
0001B85E 4440                       		neg.w	d0
0001B860                            
0001B860                            loc_1884A:
0001B860 0C40 0012                  		cmpi.w	#$12,d0
0001B864 6600                       		bne.s	loc_18856
0001B866 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B86C                            
0001B86C                            loc_18856:
0001B86C 6100 C552                  		bsr.w	ObjFloorDist
0001B870 4A41                       		tst.w	d1
0001B872 6A00                       		bpl.s	locret_1887E
0001B874 5328 0029                  		subq.b	#1,$29(a0)
0001B878 6700                       		beq.s	Obj74_Delete2
0001B87A 4268 0012                  		clr.w	obVelY(a0)
0001B87E 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B884 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B88A 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B890 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B894                            
0001B894                            locret_1887E:
0001B894 4E75                       		rts	
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            Obj74_Delete2:
0001B896 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B89C                            ; ===========================================================================
0001B89C                            
0001B89C                            loc_18886:	; Routine 4
0001B89C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8A2 5328 0029                  		subq.b	#1,$29(a0)
0001B8A6 6600                       		bne.s	Obj74_Animate
0001B8A8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B8AE 5968 000C                  		subq.w	#4,obY(a0)
0001B8B2 4228 0020                  		clr.b	obColType(a0)
0001B8B6                            
0001B8B6                            Obj74_Animate:
0001B8B6 43F9 0001 070A             		lea	(Ani_Fire).l,a1
0001B8BC 4EF9 0000 C8FA             		jmp	(AnimateSprite).l
0001B8C2                            ; ===========================================================================
0001B8C2                            
0001B8C2                            Obj74_Delete3:	; Routine 6
0001B8C2 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B8C2 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B8C8                            
0001B8C8                            	Obj7A_Delete:
0001B8C8 4EF9 0000 F886             		jmp	(DeleteObject).l
0001B8CE                            
0001B8CE                            		include	"_incObj\7A Boss - Star Light.asm"
0001B8CE                            ; ---------------------------------------------------------------------------
0001B8CE                            ; Object 7A - Eggman (SLZ)
0001B8CE                            ; ---------------------------------------------------------------------------
0001B8CE                            
0001B8CE                            BossStarLight:
0001B8CE 7000                       		moveq	#0,d0
0001B8D0 1028 0024                  		move.b	obRoutine(a0),d0
0001B8D4 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B8D8 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B8DC                            ; ===========================================================================
0001B8DC 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B8DE 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B8E0 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B8E2 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B8E4 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B8E6                            
0001B8E6 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B8EA 0401 0200                  		dc.b 4,	1, $02, $00
0001B8EE 0607 0200                  		dc.b 6,	7, $02, $00
0001B8F2 0800 0180                  		dc.b 8,	0, $01, $80
0001B8F6                            ; ===========================================================================
0001B8F6                            
0001B8F6                            Obj7A_Main:
0001B8F6 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B8FC 317C 0228 000C             		move.w	#$228,obY(a0)
0001B902 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B908 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B90E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B914 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B91A 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B91E 2248                       		movea.l	a0,a1
0001B920 7203                       		moveq	#3,d1
0001B922 6000                       		bra.s	Obj7A_LoadBoss
0001B924                            ; ===========================================================================
0001B924                            
0001B924                            Obj7A_Loop:
0001B924 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001B92A 6600                       		bne.s	loc_1895C
0001B92C 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B930 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B936 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B93C                            
0001B93C                            Obj7A_LoadBoss:
0001B93C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B942 4229 0025                  		clr.b	ob2ndRout(a1)
0001B946 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B94A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B94E 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B952 237C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a1)
0001B95A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B960 137C 0004 0001             		move.b	#4,obRender(a1)
0001B966 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B96C 2348 0034                  		move.l	a0,$34(a1)
0001B970 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B974                            
0001B974                            loc_1895C:
0001B974 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B978 45E8 002A                  		lea	$2A(a0),a2
0001B97C 705E                       		moveq	#$5E,d0
0001B97E 723E                       		moveq	#$3E,d1
0001B980                            
0001B980                            loc_18968:
0001B980 B011                       		cmp.b	(a1),d0
0001B982 6600                       		bne.s	loc_18974
0001B984 4A29 0028                  		tst.b	obSubtype(a1)
0001B988 6700                       		beq.s	loc_18974
0001B98A 34C9                       		move.w	a1,(a2)+
0001B98C                            
0001B98C                            loc_18974:
0001B98C D2FC 0040                  		adda.w	#$40,a1
0001B990 51C9 FFEE                  		dbf	d1,loc_18968
0001B994                            
0001B994                            Obj7A_ShipMain:	; Routine 2
0001B994 7000                       		moveq	#0,d0
0001B996 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B99A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B99E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B9A2 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001B9A8 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001B9AE 7003                       		moveq	#3,d0
0001B9B0 C028 0022                  		and.b	obStatus(a0),d0
0001B9B4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B9BA 8128 0001                  		or.b	d0,obRender(a0)
0001B9BE 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001B9C4                            ; ===========================================================================
0001B9C4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B9C6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B9C8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B9CA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B9CC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B9CE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B9D0                            ; ===========================================================================
0001B9D0                            
0001B9D0                            loc_189B8:
0001B9D0 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B9D6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B9DC 6400                       		bcc.s	loc_189CA
0001B9DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9E2                            
0001B9E2                            loc_189CA:
0001B9E2 6100 EEA4                  		bsr.w	BossMove
0001B9E6 1028 003F                  		move.b	$3F(a0),d0
0001B9EA 5428 003F                  		addq.b	#2,$3F(a0)
0001B9EE 4EB9 0000 3A32             		jsr	(CalcSine).l
0001B9F4 EC40                       		asr.w	#6,d0
0001B9F6 D068 0038                  		add.w	$38(a0),d0
0001B9FA 3140 000C                  		move.w	d0,obY(a0)
0001B9FE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BA04 6000                       		bra.s	loc_189FE
0001BA06                            ; ===========================================================================
0001BA06                            
0001BA06                            loc_189EE:
0001BA06 6100 EE80                  		bsr.w	BossMove
0001BA0A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BA10 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BA16                            
0001BA16                            loc_189FE:
0001BA16 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BA1C 6400                       		bcc.s	locret_18A44
0001BA1E 4A28 0022                  		tst.b	obStatus(a0)
0001BA22 6B00                       		bmi.s	loc_18A46
0001BA24 4A28 0020                  		tst.b	obColType(a0)
0001BA28 6600                       		bne.s	locret_18A44
0001BA2A 4A28 003E                  		tst.b	$3E(a0)
0001BA2E 6600                       		bne.s	loc_18A28
0001BA30 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BA40                            
0001BA40                            loc_18A28:
0001BA40 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BA44 7000                       		moveq	#0,d0
0001BA46 4A51                       		tst.w	(a1)
0001BA48 6600                       		bne.s	loc_18A36
0001BA4A 303C 0EEE                  		move.w	#cWhite,d0
0001BA4E                            
0001BA4E                            loc_18A36:
0001BA4E 3280                       		move.w	d0,(a1)
0001BA50 5328 003E                  		subq.b	#1,$3E(a0)
0001BA54 6600                       		bne.s	locret_18A44
0001BA56 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA5C                            
0001BA5C                            locret_18A44:
0001BA5C 4E75                       		rts	
0001BA5E                            ; ===========================================================================
0001BA5E                            
0001BA5E                            loc_18A46:
0001BA5E 7064                       		moveq	#100,d0
0001BA60 6100 0000                  		bsr.w	AddPoints
0001BA64 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BA6A 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BA70 4268 0010                  		clr.w	obVelX(a0)
0001BA74 4E75                       		rts	
0001BA76                            ; ===========================================================================
0001BA76                            
0001BA76                            loc_18A5E:
0001BA76 3028 0030                  		move.w	$30(a0),d0
0001BA7A 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BA80 0828 0000 0022             		btst	#0,obStatus(a0)
0001BA86 6600                       		bne.s	loc_18A7C
0001BA88 4468 0010                  		neg.w	obVelX(a0)
0001BA8C 0C40 2008                  		cmpi.w	#$2008,d0
0001BA90 6E00                       		bgt.s	loc_18A88
0001BA92 6000                       		bra.s	loc_18A82
0001BA94                            ; ===========================================================================
0001BA94                            
0001BA94                            loc_18A7C:
0001BA94 0C40 2138                  		cmpi.w	#$2138,d0
0001BA98 6D00                       		blt.s	loc_18A88
0001BA9A                            
0001BA9A                            loc_18A82:
0001BA9A 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BAA0                            
0001BAA0                            loc_18A88:
0001BAA0 3028 0008                  		move.w	8(a0),d0
0001BAA4 72FF                       		moveq	#-1,d1
0001BAA6 7402                       		moveq	#2,d2
0001BAA8 45E8 002A                  		lea	$2A(a0),a2
0001BAAC 7828                       		moveq	#$28,d4
0001BAAE 4A68 0010                  		tst.w	obVelX(a0)
0001BAB2 6A00                       		bpl.s	loc_18A9E
0001BAB4 4444                       		neg.w	d4
0001BAB6                            
0001BAB6                            loc_18A9E:
0001BAB6 321A                       		move.w	(a2)+,d1
0001BAB8 2641                       		movea.l	d1,a3
0001BABA 082B 0003 0022             		btst	#3,obStatus(a3)
0001BAC0 6600                       		bne.s	loc_18AB4
0001BAC2 362B 0008                  		move.w	8(a3),d3
0001BAC6 D644                       		add.w	d4,d3
0001BAC8 9640                       		sub.w	d0,d3
0001BACA 6700                       		beq.s	loc_18AC0
0001BACC                            
0001BACC                            loc_18AB4:
0001BACC 51CA FFE8                  		dbf	d2,loc_18A9E
0001BAD0                            
0001BAD0 1142 0028                  		move.b	d2,obSubtype(a0)
0001BAD4 6000 FF0C                  		bra.w	loc_189CA
0001BAD8                            ; ===========================================================================
0001BAD8                            
0001BAD8                            loc_18AC0:
0001BAD8 1142 0028                  		move.b	d2,obSubtype(a0)
0001BADC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BAE0 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BAE6 6000 FEFA                  		bra.w	loc_189CA
0001BAEA                            ; ===========================================================================
0001BAEA                            
0001BAEA                            Obj7A_MakeBall:
0001BAEA 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BAF0 6600                       		bne.s	loc_18B36
0001BAF2 70FF                       		moveq	#-1,d0
0001BAF4 1028 0028                  		move.b	obSubtype(a0),d0
0001BAF8 4880                       		ext.w	d0
0001BAFA 6B00                       		bmi.s	loc_18B40
0001BAFC 5540                       		subq.w	#2,d0
0001BAFE 4440                       		neg.w	d0
0001BB00 D040                       		add.w	d0,d0
0001BB02 43E8 002A                  		lea	$2A(a0),a1
0001BB06 3031 0000                  		move.w	(a1,d0.w),d0
0001BB0A 2440                       		movea.l	d0,a2
0001BB0C 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BB10 723E                       		moveq	#$3E,d1
0001BB12                            
0001BB12                            loc_18AFA:
0001BB12 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BB16 6700                       		beq.s	loc_18B40
0001BB18 D2FC 0040                  		adda.w	#$40,a1
0001BB1C 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BB20                            
0001BB20 2F08                       		move.l	a0,-(sp)
0001BB22 41D2                       		lea	(a2),a0
0001BB24 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001BB2A 205F                       		movea.l	(sp)+,a0
0001BB2C 6600                       		bne.s	loc_18B40
0001BB2E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BB32 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB38 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB3E 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BB44 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BB4A 234A 003C                  		move.l	a2,$3C(a1)
0001BB4E                            
0001BB4E                            loc_18B36:
0001BB4E 5328 003C                  		subq.b	#1,$3C(a0)
0001BB52 6700                       		beq.s	loc_18B40
0001BB54 6000 FEC0                  		bra.w	loc_189FE
0001BB58                            ; ===========================================================================
0001BB58                            
0001BB58                            loc_18B40:
0001BB58 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BB5C 6000 FE84                  		bra.w	loc_189CA
0001BB60                            ; ===========================================================================
0001BB60                            
0001BB60                            loc_18B48:
0001BB60 5328 003C                  		subq.b	#1,$3C(a0)
0001BB64 6B00                       		bmi.s	loc_18B52
0001BB66 6000 ECDE                  		bra.w	BossDefeated
0001BB6A                            ; ===========================================================================
0001BB6A                            
0001BB6A                            loc_18B52:
0001BB6A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB6E 4268 0012                  		clr.w	obVelY(a0)
0001BB72 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BB78 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BB7E 4268 0010                  		clr.w	obVelX(a0)
0001BB82 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BB88 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BB8C 6600                       		bne.s	loc_18B7C
0001BB8E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BB94                            
0001BB94                            loc_18B7C:
0001BB94 6000 FE80                  		bra.w	loc_189FE
0001BB98                            ; ===========================================================================
0001BB98                            
0001BB98                            loc_18B80:
0001BB98 5228 003C                  		addq.b	#1,$3C(a0)
0001BB9C 6700                       		beq.s	loc_18B90
0001BB9E 6A00                       		bpl.s	loc_18B96
0001BBA0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BBA6 6000                       		bra.s	loc_18BC2
0001BBA8                            ; ===========================================================================
0001BBA8                            
0001BBA8                            loc_18B90:
0001BBA8 4268 0012                  		clr.w	obVelY(a0)
0001BBAC 6000                       		bra.s	loc_18BC2
0001BBAE                            ; ===========================================================================
0001BBAE                            
0001BBAE                            loc_18B96:
0001BBAE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BBB4 6500                       		bcs.s	loc_18BAE
0001BBB6 6700                       		beq.s	loc_18BB4
0001BBB8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BBBE 6500                       		bcs.s	loc_18BC2
0001BBC0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BBC4 6000                       		bra.s	loc_18BC2
0001BBC6                            ; ===========================================================================
0001BBC6                            
0001BBC6                            loc_18BAE:
0001BBC6 5168 0012                  		subq.w	#8,obVelY(a0)
0001BBCA 6000                       		bra.s	loc_18BC2
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            loc_18BB4:
0001BBCC 4268 0012                          	clr.w    obVelY(a0)
0001BBD0 4A38 FE2D                          	tst.b     (v_invinc).w
0001BBD4 6600                               	bne.s   @boss_invinc
0001BBD6                            
0001BBD6 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BBDA 6000 0000                          	bra.w      @boss_play
0001BBDE                            
0001BBDE                            	@boss_invinc:
0001BBDE 103C 0000                          	move.b #bgm_Invincible,d0
0001BBE2                            
0001BBE2                            	@boss_play:
0001BBE2 4EB8 124A                          	jsr PlaySound
0001BBE6                            
0001BBE6                            loc_18BC2:
0001BBE6 6000 FE1E                  		bra.w	loc_189EE
0001BBEA                            ; ===========================================================================
0001BBEA                            
0001BBEA                            loc_18BC6:
0001BBEA 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BBF0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BBF6 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BBFC 6400                       		bcc.s	loc_18BE0
0001BBFE 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BC02 6000                       		bra.s	loc_18BE8
0001BC04                            ; ===========================================================================
0001BC04                            
0001BC04                            loc_18BE0:
0001BC04 4A28 0001                  		tst.b	obRender(a0)
0001BC08 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BC0C                            
0001BC0C                            loc_18BE8:
0001BC0C 6100 EC7A                  		bsr.w	BossMove
0001BC10 6000 FDD0                  		bra.w	loc_189CA
0001BC14                            ; ===========================================================================
0001BC14                            
0001BC14                            Obj7A_FaceMain:	; Routine 4
0001BC14 7000                       		moveq	#0,d0
0001BC16 7201                       		moveq	#1,d1
0001BC18 2268 0034                  		movea.l	$34(a0),a1
0001BC1C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BC20 0C00 0006                  		cmpi.b	#6,d0
0001BC24 6B00                       		bmi.s	loc_18C06
0001BC26 720A                       		moveq	#$A,d1
0001BC28 6000                       		bra.s	loc_18C1A
0001BC2A                            ; ===========================================================================
0001BC2A                            
0001BC2A                            loc_18C06:
0001BC2A 4A29 0020                  		tst.b	obColType(a1)
0001BC2E 6600                       		bne.s	loc_18C10
0001BC30 7205                       		moveq	#5,d1
0001BC32 6000                       		bra.s	loc_18C1A
0001BC34                            ; ===========================================================================
0001BC34                            
0001BC34                            loc_18C10:
0001BC34 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BC3A 6500                       		bcs.s	loc_18C1A
0001BC3C 7204                       		moveq	#4,d1
0001BC3E                            
0001BC3E                            loc_18C1A:
0001BC3E 1141 001C                  		move.b	d1,obAnim(a0)
0001BC42 0C00 000A                  		cmpi.b	#$A,d0
0001BC46 6600                       		bne.s	loc_18C32
0001BC48 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BC4E 4A28 0001                  		tst.b	obRender(a0)
0001BC52 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BC56                            
0001BC56                            loc_18C32:
0001BC56 6000                       		bra.s	loc_18C6C
0001BC58                            ; ===========================================================================
0001BC58                            
0001BC58                            Obj7A_FlameMain:; Routine 6
0001BC58 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BC5E 2268 0034                  		movea.l	$34(a0),a1
0001BC62 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BC68 6600                       		bne.s	loc_18C56
0001BC6A 4A28 0001                  		tst.b	obRender(a0)
0001BC6E 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BC72 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BC78 6000                       		bra.s	loc_18C6C
0001BC7A                            ; ===========================================================================
0001BC7A                            
0001BC7A                            loc_18C56:
0001BC7A 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BC80 6E00                       		bgt.s	loc_18C6C
0001BC82 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BC88 6D00                       		blt.s	loc_18C6C
0001BC8A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BC90                            
0001BC90                            loc_18C6C:
0001BC90 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001BC96 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001BC9C                            
0001BC9C                            loc_18C78:
0001BC9C 2268 0034                  		movea.l	$34(a0),a1
0001BCA0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BCA6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BCAC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BCB2 7003                       		moveq	#3,d0
0001BCB4 C028 0022                  		and.b	obStatus(a0),d0
0001BCB8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BCBE 8128 0001                  		or.b	d0,obRender(a0)
0001BCC2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            Obj7A_TubeMain:	; Routine 8
0001BCC8 2268 0034                  		movea.l	$34(a0),a1
0001BCCC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BCD2 6600                       		bne.s	loc_18CB8
0001BCD4 4A28 0001                  		tst.b	obRender(a0)
0001BCD8 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BCDC                            
0001BCDC                            loc_18CB8:
0001BCDC 217C 0001 ADDC 0004        		move.l	#Map_BossItems,obMap(a0)
0001BCE4 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BCEA 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BCF0 60AA                       		bra.s	loc_18C78
0001BCF0 60AA                       		bra.s	loc_18C78
0001BCF2                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BCF2                            ; ---------------------------------------------------------------------------
0001BCF2                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BCF2                            ; ---------------------------------------------------------------------------
0001BCF2                            
0001BCF2                            BossSpikeball:
0001BCF2 7000                       		moveq	#0,d0
0001BCF4 1028 0024                  		move.b	obRoutine(a0),d0
0001BCF8 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BCFC 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BD00 3028 0030                  		move.w	$30(a0),d0
0001BD04 0240 FF80                  		andi.w	#$FF80,d0
0001BD08 3238 F700                  		move.w	(v_screenposx).w,d1
0001BD0C 0441 0080                  		subi.w	#$80,d1
0001BD10 0241 FF80                  		andi.w	#$FF80,d1
0001BD14 9041                       		sub.w	d1,d0
0001BD16 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BD1A 0C40 0280                  		cmpi.w	#$280,d0
0001BD1E 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BD22 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001BD28                            ; ===========================================================================
0001BD28 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BD2A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BD2C 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BD2E 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BD30 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BD32 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BD34                            ; ===========================================================================
0001BD34                            
0001BD34                            Obj7B_Main:	; Routine 0
0001BD34 217C 0001 3CBA 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BD3C 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BD42 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BD48 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BD4E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BD54 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BD5A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BD60 2268 003C                  		movea.l	$3C(a0),a1
0001BD64 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BD6A 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BD70 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BD76 3028 0008                  		move.w	obX(a0),d0
0001BD7A B069 0008                  		cmp.w	obX(a1),d0
0001BD7E 6E00                       		bgt.s	loc_18D68
0001BD80 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BD86 117C 0002 003A             		move.b	#2,$3A(a0)
0001BD8C                            
0001BD8C                            loc_18D68:
0001BD8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BD90                            
0001BD90                            Obj7B_Fall:	; Routine 2
0001BD90 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001BD96 2268 003C                  		movea.l	$3C(a0),a1
0001BD9A 45F9 0000 0000             		lea	(word_19018).l,a2
0001BDA0 7000                       		moveq	#0,d0
0001BDA2 1029 001A                  		move.b	obFrame(a1),d0
0001BDA6 3228 0008                  		move.w	8(a0),d1
0001BDAA 9268 0030                  		sub.w	$30(a0),d1
0001BDAE 6400                       		bcc.s	loc_18D8E
0001BDB0 5440                       		addq.w	#2,d0
0001BDB2                            
0001BDB2                            loc_18D8E:
0001BDB2 D040                       		add.w	d0,d0
0001BDB4 3228 0034                  		move.w	$34(a0),d1
0001BDB8 D272 0000                  		add.w	(a2,d0.w),d1
0001BDBC B268 000C                  		cmp.w	obY(a0),d1
0001BDC0 6E00                       		bgt.s	locret_18DC4
0001BDC2 2268 003C                  		movea.l	$3C(a0),a1
0001BDC6 7202                       		moveq	#2,d1
0001BDC8 0828 0000 0022             		btst	#0,obStatus(a0)
0001BDCE 6700                       		beq.s	loc_18DAE
0001BDD0 7200                       		moveq	#0,d1
0001BDD2                            
0001BDD2                            loc_18DAE:
0001BDD2 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BDD8 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BDDE 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BDE4 6000 0000                  		bra.w	loc_18FA2
0001BDE8                            ; ===========================================================================
0001BDE8                            
0001BDE8                            locret_18DC4:
0001BDE8 4E75                       		rts	
0001BDEA                            ; ===========================================================================
0001BDEA                            
0001BDEA                            loc_18DC6:	; Routine 4
0001BDEA 2268 003C                  		movea.l	$3C(a0),a1
0001BDEE 7000                       		moveq	#0,d0
0001BDF0 1028 003A                  		move.b	$3A(a0),d0
0001BDF4 9029 003A                  		sub.b	$3A(a1),d0
0001BDF8 6700                       		beq.s	loc_18E2A
0001BDFA 6400                       		bcc.s	loc_18DDA
0001BDFC 4400                       		neg.b	d0
0001BDFE                            
0001BDFE                            loc_18DDA:
0001BDFE 323C F7E8                  		move.w	#-$818,d1
0001BE02 343C FEEC                  		move.w	#-$114,d2
0001BE06 0C00 0001                  		cmpi.b	#1,d0
0001BE0A 6700                       		beq.s	loc_18E00
0001BE0C 323C F6A0                  		move.w	#-$960,d1
0001BE10 343C FF0C                  		move.w	#-$F4,d2
0001BE14 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BE1A 6D00                       		blt.s	loc_18E00
0001BE1C 323C F5E0                  		move.w	#-$A20,d1
0001BE20 343C FF80                  		move.w	#-$80,d2
0001BE24                            
0001BE24                            loc_18E00:
0001BE24 3141 0012                  		move.w	d1,obVelY(a0)
0001BE28 3142 0010                  		move.w	d2,obVelX(a0)
0001BE2C 3028 0008                  		move.w	obX(a0),d0
0001BE30 9068 0030                  		sub.w	$30(a0),d0
0001BE34 6400                       		bcc.s	loc_18E16
0001BE36 4468 0010                  		neg.w	obVelX(a0)
0001BE3A                            
0001BE3A                            loc_18E16:
0001BE3A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE40 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BE46 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BE4A 6000 0000                  		bra.w	loc_18EAA
0001BE4E                            ; ===========================================================================
0001BE4E                            
0001BE4E                            loc_18E2A:
0001BE4E 45F9 0000 0000             		lea	(word_19018).l,a2
0001BE54 7000                       		moveq	#0,d0
0001BE56 1029 001A                  		move.b	obFrame(a1),d0
0001BE5A 343C 0028                  		move.w	#$28,d2
0001BE5E 3228 0008                  		move.w	obX(a0),d1
0001BE62 9268 0030                  		sub.w	$30(a0),d1
0001BE66 6400                       		bcc.s	loc_18E48
0001BE68 4442                       		neg.w	d2
0001BE6A 5440                       		addq.w	#2,d0
0001BE6C                            
0001BE6C                            loc_18E48:
0001BE6C D040                       		add.w	d0,d0
0001BE6E 3228 0034                  		move.w	$34(a0),d1
0001BE72 D272 0000                  		add.w	(a2,d0.w),d1
0001BE76 3141 000C                  		move.w	d1,obY(a0)
0001BE7A D468 0030                  		add.w	$30(a0),d2
0001BE7E 3142 0008                  		move.w	d2,obX(a0)
0001BE82 4268 000E                  		clr.w	obY+2(a0)
0001BE86 4268 000A                  		clr.w	obX+2(a0)
0001BE8A 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BE8E 6600                       		bne.s	loc_18E7A
0001BE90 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BE96 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BE9C 4E75                       		rts	
0001BE9E                            ; ===========================================================================
0001BE9E                            
0001BE9E                            loc_18E7A:
0001BE9E 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BEA4 6600                       		bne.s	loc_18E88
0001BEA6 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BEAC                            
0001BEAC                            loc_18E88:
0001BEAC 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BEB2 6600                       		bne.s	loc_18E96
0001BEB4 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BEBA                            
0001BEBA                            loc_18E96:
0001BEBA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BEBE 6E00                       		bgt.s	locret_18EA8
0001BEC0 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BEC6 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BECC                            
0001BECC                            locret_18EA8:
0001BECC 4E75                       		rts	
0001BECE                            ; ===========================================================================
0001BECE                            
0001BECE                            loc_18EAA:	; Routine 6
0001BECE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BED2 707A                       		moveq	#id_BossStarLight,d0
0001BED4 7240                       		moveq	#$40,d1
0001BED6 743E                       		moveq	#$3E,d2
0001BED8                            
0001BED8                            loc_18EB4:
0001BED8 B011                       		cmp.b	(a1),d0
0001BEDA 6700                       		beq.s	loc_18EC0
0001BEDC D2C1                       		adda.w	d1,a1
0001BEDE 51CA FFF8                  		dbf	d2,loc_18EB4
0001BEE2                            
0001BEE2 6000                       		bra.s	loc_18F38
0001BEE4                            ; ===========================================================================
0001BEE4                            
0001BEE4                            loc_18EC0:
0001BEE4 3029 0008                  		move.w	obX(a1),d0
0001BEE8 3229 000C                  		move.w	obY(a1),d1
0001BEEC 3428 0008                  		move.w	obX(a0),d2
0001BEF0 3628 000C                  		move.w	obY(a0),d3
0001BEF4 45FA 0000                  		lea	byte_19022(pc),a2
0001BEF8 47FA 0000                  		lea	byte_19026(pc),a3
0001BEFC 181A                       		move.b	(a2)+,d4
0001BEFE 4884                       		ext.w	d4
0001BF00 D044                       		add.w	d4,d0
0001BF02 181B                       		move.b	(a3)+,d4
0001BF04 4884                       		ext.w	d4
0001BF06 D444                       		add.w	d4,d2
0001BF08 B440                       		cmp.w	d0,d2
0001BF0A 6500                       		bcs.s	loc_18F38
0001BF0C 181A                       		move.b	(a2)+,d4
0001BF0E 4884                       		ext.w	d4
0001BF10 D044                       		add.w	d4,d0
0001BF12 181B                       		move.b	(a3)+,d4
0001BF14 4884                       		ext.w	d4
0001BF16 D444                       		add.w	d4,d2
0001BF18 B042                       		cmp.w	d2,d0
0001BF1A 6500                       		bcs.s	loc_18F38
0001BF1C 181A                       		move.b	(a2)+,d4
0001BF1E 4884                       		ext.w	d4
0001BF20 D244                       		add.w	d4,d1
0001BF22 181B                       		move.b	(a3)+,d4
0001BF24 4884                       		ext.w	d4
0001BF26 D644                       		add.w	d4,d3
0001BF28 B641                       		cmp.w	d1,d3
0001BF2A 6500                       		bcs.s	loc_18F38
0001BF2C 181A                       		move.b	(a2)+,d4
0001BF2E 4884                       		ext.w	d4
0001BF30 D244                       		add.w	d4,d1
0001BF32 181B                       		move.b	(a3)+,d4
0001BF34 4884                       		ext.w	d4
0001BF36 D644                       		add.w	d4,d3
0001BF38 B243                       		cmp.w	d3,d1
0001BF3A 6500                       		bcs.s	loc_18F38
0001BF3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF40 4268 0028                  		clr.w	obSubtype(a0)
0001BF44 4229 0020                  		clr.b	obColType(a1)
0001BF48 5329 0021                  		subq.b	#1,obColProp(a1)
0001BF4C 6600                       		bne.s	loc_18F38
0001BF4E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BF54 4268 0010                  		clr.w	obVelX(a0)
0001BF58 4268 0012                  		clr.w	obVelY(a0)
0001BF5C                            
0001BF5C                            loc_18F38:
0001BF5C 4A68 0012                  		tst.w	obVelY(a0)
0001BF60 6A00                       		bpl.s	loc_18F5C
0001BF62 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001BF68 3028 0034                  		move.w	$34(a0),d0
0001BF6C 0440 002F                  		subi.w	#$2F,d0
0001BF70 B068 000C                  		cmp.w	obY(a0),d0
0001BF74 6E00                       		bgt.s	loc_18F58
0001BF76 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001BF7C                            
0001BF7C                            loc_18F58:
0001BF7C 6000 FF20                  		bra.w	loc_18E7A
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            loc_18F5C:
0001BF80 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001BF86 2268 003C                  		movea.l	$3C(a0),a1
0001BF8A 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF90 7000                       		moveq	#0,d0
0001BF92 1029 001A                  		move.b	obFrame(a1),d0
0001BF96 3228 0008                  		move.w	obX(a0),d1
0001BF9A 9268 0030                  		sub.w	$30(a0),d1
0001BF9E 6400                       		bcc.s	loc_18F7E
0001BFA0 5440                       		addq.w	#2,d0
0001BFA2                            
0001BFA2                            loc_18F7E:
0001BFA2 D040                       		add.w	d0,d0
0001BFA4 3228 0034                  		move.w	$34(a0),d1
0001BFA8 D272 0000                  		add.w	(a2,d0.w),d1
0001BFAC B268 000C                  		cmp.w	obY(a0),d1
0001BFB0 6ECA                       		bgt.s	loc_18F58
0001BFB2 2268 003C                  		movea.l	$3C(a0),a1
0001BFB6 7202                       		moveq	#2,d1
0001BFB8 4A68 0010                  		tst.w	obVelX(a0)
0001BFBC 6B00                       		bmi.s	loc_18F9C
0001BFBE 7200                       		moveq	#0,d1
0001BFC0                            
0001BFC0                            loc_18F9C:
0001BFC0 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BFC6                            
0001BFC6                            loc_18FA2:
0001BFC6 1341 003A                  		move.b	d1,$3A(a1)
0001BFCA 1141 003A                  		move.b	d1,$3A(a0)
0001BFCE B229 001A                  		cmp.b	obFrame(a1),d1
0001BFD2 6700                       		beq.s	loc_19008
0001BFD4 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BFDA 6700                       		beq.s	loc_19008
0001BFDC 4229 0025                  		clr.b	ob2ndRout(a1)
0001BFE0 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BFE6 45F8 D000                  		lea	(v_objspace).w,a2
0001BFEA 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BFF0 446A 0012                  		neg.w	obVelY(a2)
0001BFF4 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BFFA 6600                       		bne.s	loc_18FDC
0001BFFC E0EA 0012                  		asr	obVelY(a2)
0001C000                            
0001C000                            loc_18FDC:
0001C000 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C006 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C00C 422A 003C                  		clr.b	$3C(a2)
0001C010 2F08                       		move.l	a0,-(sp)
0001C012 41D2                       		lea	(a2),a0
0001C014 4EB9 0001 5EB0             		jsr	(Sonic_ChkRoll).l
0001C01A 205F                       		movea.l	(sp)+,a0
0001C01C 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C02C                            
0001C02C                            loc_19008:
0001C02C 4268 0010                  		clr.w	obVelX(a0)
0001C030 4268 0012                  		clr.w	obVelY(a0)
0001C034 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C038 6000 FE64                  		bra.w	loc_18E7A
0001C03C                            ; ===========================================================================
0001C03C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C046                            		even
0001C046 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C04A                            		even
0001C04A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C04E                            		even
0001C04E                            ; ===========================================================================
0001C04E                            
0001C04E                            Obj7B_Explode:	; Routine 8
0001C04E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C052 4228 0024                  		clr.b	obRoutine(a0)
0001C056 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C05C 6700                       		beq.s	Obj7B_MakeFrag
0001C05E 4E75                       		rts	
0001C060                            ; ===========================================================================
0001C060                            
0001C060                            Obj7B_MakeFrag:
0001C060 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C066 7203                       		moveq	#3,d1
0001C068 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C06C                            
0001C06C                            Obj7B_Loop:
0001C06C 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001C072 6600                       		bne.s	loc_1909A
0001C074 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C078 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C07E 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C086 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C08C 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C092 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C098 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C09E 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C0A2 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C0A6 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C0AC 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C0B2 08E9 0007 0001             		bset	#7,obRender(a1)
0001C0B8 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C0BE                            
0001C0BE                            loc_1909A:
0001C0BE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C0C2                            
0001C0C2 4E75                       		rts	
0001C0C4                            ; ===========================================================================
0001C0C4 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C0C8 FF60 FDC0                  		dc.w -$A0, -$240
0001C0CC 0100 FCC0                  		dc.w $100, -$340
0001C0D0 00A0 FDC0                  		dc.w $A0, -$240
0001C0D4                            ; ===========================================================================
0001C0D4                            
0001C0D4                            Obj7B_MoveFrag:	; Routine $A
0001C0D4 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001C0DA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C0E0 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C0E6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C0EC 7004                       		moveq	#4,d0
0001C0EE C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C0F2 E448                       		lsr.w	#2,d0
0001C0F4 1140 001A                  		move.b	d0,obFrame(a0)
0001C0F8 4A28 0001                  		tst.b	1(a0)
0001C0FC 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C100 4E75                       		rts	
0001C100 4E75                       		rts	
0001C102                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C102                            ; ---------------------------------------------------------------------------
0001C102                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C102                            ; ---------------------------------------------------------------------------
0001C102                            Map_BSBall_internal:
0001C102 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C104 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C106 01                         @fireball1:	dc.b 1
0001C107 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C10C 01                         @fireball2:	dc.b 1
0001C10D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C112                            		even
0001C112                            		even
0001C112                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C112                            ; ---------------------------------------------------------------------------
0001C112                            ; Object 75 - Eggman (SYZ)
0001C112                            ; ---------------------------------------------------------------------------
0001C112                            
0001C112                            BossSpringYard:
0001C112 7000                       		moveq	#0,d0
0001C114 1028 0024                  		move.b	obRoutine(a0),d0
0001C118 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C11C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C120                            ; ===========================================================================
0001C120 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C122 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C124 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C126 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C128 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C12A                            
0001C12A 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C12E 0401 0280                  		dc.b 4,	1, $02, $80
0001C132 0607 0280                  		dc.b 6,	7, $02, $80
0001C136 0800 0280                  		dc.b 8,	0, $02, $80
0001C13A                            ; ===========================================================================
0001C13A                            
0001C13A                            Obj75_Main:	; Routine 0
0001C13A 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C140 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C146 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C14C 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C152 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C158 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C15E 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C162 2248                       		movea.l	a0,a1
0001C164 7203                       		moveq	#3,d1
0001C166 6000                       		bra.s	Obj75_LoadBoss
0001C168                            ; ===========================================================================
0001C168                            
0001C168                            Obj75_Loop:
0001C168 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001C16E 6600                       		bne.s	Obj75_ShipMain
0001C170 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C174 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C17A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C180                            
0001C180                            Obj75_LoadBoss:
0001C180 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C186 4229 0025                  		clr.b	ob2ndRout(a1)
0001C18A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C18E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C192 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C196 237C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a1)
0001C19E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C1A4 137C 0004 0001             		move.b	#4,obRender(a1)
0001C1AA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C1B0 2348 0034                  		move.l	a0,$34(a1)
0001C1B4 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C1B8                            
0001C1B8                            Obj75_ShipMain:	; Routine 2
0001C1B8 7000                       		moveq	#0,d0
0001C1BA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C1BE 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C1C2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C1C6 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001C1CC 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001C1D2 7003                       		moveq	#3,d0
0001C1D4 C028 0022                  		and.b	obStatus(a0),d0
0001C1D8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C1DE 8128 0001                  		or.b	d0,obRender(a0)
0001C1E2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001C1E8                            ; ===========================================================================
0001C1E8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C1EC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C1F0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C1F4                            ; ===========================================================================
0001C1F4                            
0001C1F4                            loc_191CC:
0001C1F4 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C1FA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C200 6400                       		bcc.s	loc_191DE
0001C202 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C206                            
0001C206                            loc_191DE:
0001C206 1028 003F                  		move.b	$3F(a0),d0
0001C20A 5428 003F                  		addq.b	#2,$3F(a0)
0001C20E 4EB9 0000 3A32             		jsr	(CalcSine).l
0001C214 E440                       		asr.w	#2,d0
0001C216 3140 0012                  		move.w	d0,obVelY(a0)
0001C21A                            
0001C21A                            loc_191F2:
0001C21A 6100 E66C                  		bsr.w	BossMove
0001C21E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C224 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C22A                            
0001C22A                            loc_19202:
0001C22A 3028 0008                  		move.w	8(a0),d0
0001C22E 0440 2C00                  		subi.w	#$2C00,d0
0001C232 EA48                       		lsr.w	#5,d0
0001C234 1140 0034                  		move.b	d0,$34(a0)
0001C238 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C23E 6400                       		bcc.s	locret_19256
0001C240 4A28 0022                  		tst.b	obStatus(a0)
0001C244 6B00                       		bmi.s	loc_19258
0001C246 4A28 0020                  		tst.b	obColType(a0)
0001C24A 6600                       		bne.s	locret_19256
0001C24C 4A28 003E                  		tst.b	$3E(a0)
0001C250 6600                       		bne.s	loc_1923A
0001C252 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C262                            
0001C262                            loc_1923A:
0001C262 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C266 7000                       		moveq	#0,d0
0001C268 4A51                       		tst.w	(a1)
0001C26A 6600                       		bne.s	loc_19248
0001C26C 303C 0EEE                  		move.w	#cWhite,d0
0001C270                            
0001C270                            loc_19248:
0001C270 3280                       		move.w	d0,(a1)
0001C272 5328 003E                  		subq.b	#1,$3E(a0)
0001C276 6600                       		bne.s	locret_19256
0001C278 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C27E                            
0001C27E                            locret_19256:
0001C27E 4E75                       		rts	
0001C280                            ; ===========================================================================
0001C280                            
0001C280                            loc_19258:
0001C280 7064                       		moveq	#100,d0
0001C282 6100 0000                  		bsr.w	AddPoints
0001C286 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C28C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C292 4268 0010                  		clr.w	obVelX(a0)
0001C296 4E75                       		rts	
0001C298                            ; ===========================================================================
0001C298                            
0001C298                            loc_19270:
0001C298 3028 0030                  		move.w	$30(a0),d0
0001C29C 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C2A2 0828 0000 0022             		btst	#0,obStatus(a0)
0001C2A8 6600                       		bne.s	loc_1928E
0001C2AA 4468 0010                  		neg.w	obVelX(a0)
0001C2AE 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C2B2 6E00                       		bgt.s	loc_1929E
0001C2B4 6000                       		bra.s	loc_19294
0001C2B6                            ; ===========================================================================
0001C2B6                            
0001C2B6                            loc_1928E:
0001C2B6 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C2BA 6D00                       		blt.s	loc_1929E
0001C2BC                            
0001C2BC                            loc_19294:
0001C2BC 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C2C2 4228 003D                  		clr.b	$3D(a0)
0001C2C6                            
0001C2C6                            loc_1929E:
0001C2C6 0440 2C10                  		subi.w	#$2C10,d0
0001C2CA 0240 001F                  		andi.w	#$1F,d0
0001C2CE 0440 001F                  		subi.w	#$1F,d0
0001C2D2 6A00                       		bpl.s	loc_192AE
0001C2D4 4440                       		neg.w	d0
0001C2D6                            
0001C2D6                            loc_192AE:
0001C2D6 5340                       		subq.w	#1,d0
0001C2D8 6E00                       		bgt.s	loc_192E8
0001C2DA 4A28 003D                  		tst.b	$3D(a0)
0001C2DE 6600                       		bne.s	loc_192E8
0001C2E0 3238 D008                  		move.w	(v_player+obX).w,d1
0001C2E4 0441 2C00                  		subi.w	#$2C00,d1
0001C2E8 EA41                       		asr.w	#5,d1
0001C2EA B228 0034                  		cmp.b	$34(a0),d1
0001C2EE 6600                       		bne.s	loc_192E8
0001C2F0 7000                       		moveq	#0,d0
0001C2F2 1028 0034                  		move.b	$34(a0),d0
0001C2F6 EB40                       		asl.w	#5,d0
0001C2F8 0640 2C10                  		addi.w	#$2C10,d0
0001C2FC 3140 0030                  		move.w	d0,$30(a0)
0001C300 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C304 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C308 4268 0028                  		clr.w	obSubtype(a0)
0001C30C 4268 0010                  		clr.w	obVelX(a0)
0001C310                            
0001C310                            loc_192E8:
0001C310 6000 FEF4                  		bra.w	loc_191DE
0001C314                            ; ===========================================================================
0001C314                            
0001C314                            loc_192EC:
0001C314 7000                       		moveq	#0,d0
0001C316 1028 0028                  		move.b	obSubtype(a0),d0
0001C31A 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C31E 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C322                            ; ===========================================================================
0001C322 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C324 0000                       		dc.w loc_19348-off_192FA
0001C326 0000                       		dc.w loc_1938E-off_192FA
0001C328 0000                       		dc.w loc_193D0-off_192FA
0001C32A                            ; ===========================================================================
0001C32A                            
0001C32A                            loc_19302:
0001C32A 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C330 3028 0038                  		move.w	$38(a0),d0
0001C334 0C40 0556                  		cmpi.w	#$556,d0
0001C338 6500                       		bcs.s	loc_19344
0001C33A 317C 0556 0038             		move.w	#$556,$38(a0)
0001C340 4268 003C                  		clr.w	$3C(a0)
0001C344 70FF                       		moveq	#-1,d0
0001C346 3028 0036                  		move.w	$36(a0),d0
0001C34A 6700                       		beq.s	loc_1933C
0001C34C 2240                       		movea.l	d0,a1
0001C34E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C354 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C35A 2348 0034                  		move.l	a0,$34(a1)
0001C35E 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C364                            
0001C364                            loc_1933C:
0001C364 4268 0012                  		clr.w	obVelY(a0)
0001C368 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C36C                            
0001C36C                            loc_19344:
0001C36C 6000 FEAC                  		bra.w	loc_191F2
0001C370                            ; ===========================================================================
0001C370                            
0001C370                            loc_19348:
0001C370 5368 003C                  		subq.w	#1,$3C(a0)
0001C374 6A00                       		bpl.s	loc_19366
0001C376 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C37A 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C380 4A68 0036                  		tst.w	$36(a0)
0001C384 6600                       		bne.s	loc_19362
0001C386 E0E8 0012                  		asr	obVelY(a0)
0001C38A                            
0001C38A                            loc_19362:
0001C38A 7000                       		moveq	#0,d0
0001C38C 6000                       		bra.s	loc_1937C
0001C38E                            ; ===========================================================================
0001C38E                            
0001C38E                            loc_19366:
0001C38E 7000                       		moveq	#0,d0
0001C390 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C396 6E00                       		bgt.s	loc_1937C
0001C398 7002                       		moveq	#2,d0
0001C39A 0828 0001 003D             		btst	#1,$3D(a0)
0001C3A0 6700                       		beq.s	loc_1937C
0001C3A2 4440                       		neg.w	d0
0001C3A4                            
0001C3A4                            loc_1937C:
0001C3A4 D068 0038                  		add.w	$38(a0),d0
0001C3A8 3140 000C                  		move.w	d0,obY(a0)
0001C3AC 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C3B2 6000 FE76                  		bra.w	loc_19202
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            loc_1938E:
0001C3B6 303C 04DA                  		move.w	#$4DA,d0
0001C3BA 4A68 0036                  		tst.w	$36(a0)
0001C3BE 6700                       		beq.s	loc_1939C
0001C3C0 0440 0018                  		subi.w	#$18,d0
0001C3C4                            
0001C3C4                            loc_1939C:
0001C3C4 B068 0038                  		cmp.w	$38(a0),d0
0001C3C8 6D00                       		blt.s	loc_193BE
0001C3CA 317C 0008 003C             		move.w	#8,$3C(a0)
0001C3D0 4A68 0036                  		tst.w	$36(a0)
0001C3D4 6700                       		beq.s	loc_193B4
0001C3D6 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C3DC                            
0001C3DC                            loc_193B4:
0001C3DC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C3E0 4268 0012                  		clr.w	obVelY(a0)
0001C3E4 6000                       		bra.s	loc_193CC
0001C3E6                            ; ===========================================================================
0001C3E6                            
0001C3E6                            loc_193BE:
0001C3E6 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C3EC 6C00                       		bge.s	loc_193CC
0001C3EE 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C3F4                            
0001C3F4                            loc_193CC:
0001C3F4 6000 FE24                  		bra.w	loc_191F2
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            loc_193D0:
0001C3F8 5368 003C                  		subq.w	#1,$3C(a0)
0001C3FC 6E00                       		bgt.s	loc_19406
0001C3FE 6B00                       		bmi.s	loc_193EE
0001C400 70FF                       		moveq	#-1,d0
0001C402 3028 0036                  		move.w	$36(a0),d0
0001C406 6700                       		beq.s	loc_193E8
0001C408 2240                       		movea.l	d0,a1
0001C40A 137C 000A 0029             		move.b	#$A,$29(a1)
0001C410                            
0001C410                            loc_193E8:
0001C410 4268 0036                  		clr.w	$36(a0)
0001C414 6000                       		bra.s	loc_19406
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            loc_193EE:
0001C416 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C41C 6600                       		bne.s	loc_19406
0001C41E 4228 0029                  		clr.b	$29(a0)
0001C422 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C426 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C42C 6000                       		bra.s	loc_19446
0001C42E                            ; ===========================================================================
0001C42E                            
0001C42E                            loc_19406:
0001C42E 7001                       		moveq	#1,d0
0001C430 4A68 0036                  		tst.w	$36(a0)
0001C434 6700                       		beq.s	loc_19410
0001C436 7002                       		moveq	#2,d0
0001C438                            
0001C438                            loc_19410:
0001C438 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C43E 6700                       		beq.s	loc_19424
0001C440 6D00                       		blt.s	loc_1941C
0001C442 4440                       		neg.w	d0
0001C444                            
0001C444                            loc_1941C:
0001C444 4A68 0036                  		tst.w	$36(a0)
0001C448 D168 0038                  		add.w	d0,$38(a0)
0001C44C                            
0001C44C                            loc_19424:
0001C44C 7000                       		moveq	#0,d0
0001C44E 4A68 0036                  		tst.w	$36(a0)
0001C452 6700                       		beq.s	loc_19438
0001C454 7002                       		moveq	#2,d0
0001C456 0828 0000 003D             		btst	#0,$3D(a0)
0001C45C 6700                       		beq.s	loc_19438
0001C45E 4440                       		neg.w	d0
0001C460                            
0001C460                            loc_19438:
0001C460 D068 0038                  		add.w	$38(a0),d0
0001C464 3140 000C                  		move.w	d0,obY(a0)
0001C468 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C46E                            
0001C46E                            loc_19446:
0001C46E 6000 FDBA                  		bra.w	loc_19202
0001C472                            
0001C472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C472                            
0001C472                            
0001C472                            Obj75_FindBlocks:
0001C472 4268 0036                  		clr.w	$36(a0)
0001C476 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C47A 703E                       		moveq	#$3E,d0
0001C47C 7276                       		moveq	#$76,d1
0001C47E 1428 0034                  		move.b	$34(a0),d2
0001C482                            
0001C482                            Obj75_FindLoop:
0001C482 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C484 6600                       		bne.s	loc_1946A	; if not, branch
0001C486 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C48A 6600                       		bne.s	loc_1946A
0001C48C 3149 0036                  		move.w	a1,$36(a0)
0001C490 6000                       		bra.s	locret_19472
0001C492                            ; ===========================================================================
0001C492                            
0001C492                            loc_1946A:
0001C492 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C496 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C49A                            
0001C49A                            locret_19472:
0001C49A 4E75                       		rts	
0001C49C                            ; End of function Obj75_FindBlocks
0001C49C                            
0001C49C                            ; ===========================================================================
0001C49C                            
0001C49C                            loc_19474:
0001C49C 5368 003C                  		subq.w	#1,$3C(a0)
0001C4A0 6B00                       		bmi.s	loc_1947E
0001C4A2 6000 E3A2                  		bra.w	BossDefeated
0001C4A6                            ; ===========================================================================
0001C4A6                            
0001C4A6                            loc_1947E:
0001C4A6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C4AA 4268 0012                  		clr.w	obVelY(a0)
0001C4AE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C4B4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C4BA 4268 0010                  		clr.w	obVelX(a0)
0001C4BE 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C4C4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C4C8 6600                       		bne.s	loc_194A8
0001C4CA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C4D0                            
0001C4D0                            loc_194A8:
0001C4D0 6000 FD58                  		bra.w	loc_19202
0001C4D4                            ; ===========================================================================
0001C4D4                            
0001C4D4                            loc_194AC:
0001C4D4 5268 003C                  		addq.w	#1,$3C(a0)
0001C4D8 6700                       		beq.s	loc_194BC
0001C4DA 6A00                       		bpl.s	loc_194C2
0001C4DC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C4E2 6000                       		bra.s	loc_194EE
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            loc_194BC:
0001C4E4 4268 0012                  		clr.w	obVelY(a0)
0001C4E8 6000                       		bra.s	loc_194EE
0001C4EA                            ; ===========================================================================
0001C4EA                            
0001C4EA                            loc_194C2:
0001C4EA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C4F0 6500                       		bcs.s	loc_194DA
0001C4F2 6700                       		beq.s	loc_194E0
0001C4F4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C4FA 6500                       		bcs.s	loc_194EE
0001C4FC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C500 6000                       		bra.s	loc_194EE
0001C502                            ; ===========================================================================
0001C502                            
0001C502                            loc_194DA:
0001C502 5168 0012                  		subq.w	#8,obVelY(a0)
0001C506 6000                       		bra.s	loc_194EE
0001C508                            ; ===========================================================================
0001C508                            
0001C508                            loc_194E0:
0001C508 4268 0012                  		clr.w    obVelY(a0)
0001C50C 4A38 FE2D                          	tst.b     (v_invinc).w
0001C510 6600                               	bne.s   @boss_invinc
0001C512                            
0001C512 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C516 6000 0000                          	bra.w      @boss_play
0001C51A                            
0001C51A                            @boss_invinc:
0001C51A 103C 0000                          	move.b #bgm_Invincible,d0
0001C51E                            
0001C51E                            @boss_play:
0001C51E 4EB8 124A                          	jsr PlaySound
0001C522                            
0001C522                            loc_194EE:
0001C522 6000 FCF6                  		bra.w	loc_191F2
0001C526                            ; ===========================================================================
0001C526                            
0001C526                            loc_194F2:
0001C526 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C52C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C532 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C538 6400                       		bcc.s	loc_1950C
0001C53A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C53E 6000                       		bra.s	loc_19512
0001C540                            ; ===========================================================================
0001C540                            
0001C540                            loc_1950C:
0001C540 4A28 0001                  		tst.b	obRender(a0)
0001C544 6A00                       		bpl.s	Obj75_ShipDelete
0001C546                            
0001C546                            loc_19512:
0001C546 6100 E340                  		bsr.w	BossMove
0001C54A 6000 FCBA                  		bra.w	loc_191DE
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            Obj75_ShipDelete:
0001C54E 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            Obj75_FaceMain:	; Routine 4
0001C554 7201                       		moveq	#1,d1
0001C556 2268 0034                  		movea.l	$34(a0),a1
0001C55A 7000                       		moveq	#0,d0
0001C55C 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C560 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C564 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C568 1141 001C                  		move.b	d1,obAnim(a0)
0001C56C 1010                       		move.b	(a0),d0
0001C56E B011                       		cmp.b	(a1),d0
0001C570 6600                       		bne.s	Obj75_FaceDelete
0001C572 6000                       		bra.s	loc_195BE
0001C574                            ; ===========================================================================
0001C574                            
0001C574                            Obj75_FaceDelete:
0001C574 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C57A                            ; ===========================================================================
0001C57A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C57E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C582 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C586                            ; ===========================================================================
0001C586                            
0001C586                            loc_19552:
0001C586 720A                       		moveq	#$A,d1
0001C588 4E75                       		rts	
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            loc_19556:
0001C58A 7206                       		moveq	#6,d1
0001C58C 4E75                       		rts	
0001C58E                            ; ===========================================================================
0001C58E                            
0001C58E                            loc_1955A:
0001C58E 7000                       		moveq	#0,d0
0001C590 1029 0028                  		move.b	obSubtype(a1),d0
0001C594 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C598 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C59C                            ; ===========================================================================
0001C59C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C5A0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            loc_19570:
0001C5A4 6000                       		bra.s	loc_19574
0001C5A6                            ; ===========================================================================
0001C5A6                            
0001C5A6                            loc_19572:
0001C5A6 7206                       		moveq	#6,d1
0001C5A8                            
0001C5A8                            loc_19574:
0001C5A8 4A29 0020                  		tst.b	obColType(a1)
0001C5AC 6600                       		bne.s	loc_1957E
0001C5AE 7205                       		moveq	#5,d1
0001C5B0 4E75                       		rts	
0001C5B2                            ; ===========================================================================
0001C5B2                            
0001C5B2                            loc_1957E:
0001C5B2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C5B8 6500                       		bcs.s	locret_19588
0001C5BA 7204                       		moveq	#4,d1
0001C5BC                            
0001C5BC                            locret_19588:
0001C5BC 4E75                       		rts	
0001C5BE                            ; ===========================================================================
0001C5BE                            
0001C5BE                            Obj75_FlameMain:; Routine 6
0001C5BE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C5C4 2268 0034                  		movea.l	$34(a0),a1
0001C5C8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C5CE 6600                       		bne.s	loc_195AA
0001C5D0 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C5D6 4A28 0001                  		tst.b	1(a0)
0001C5DA 6A00                       		bpl.s	Obj75_FlameDelete
0001C5DC 6000                       		bra.s	loc_195B6
0001C5DE                            ; ===========================================================================
0001C5DE                            
0001C5DE                            loc_195AA:
0001C5DE 4A69 0010                  		tst.w	obVelX(a1)
0001C5E2 6700                       		beq.s	loc_195B6
0001C5E4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C5EA                            
0001C5EA                            loc_195B6:
0001C5EA 6000                       		bra.s	loc_195BE
0001C5EC                            ; ===========================================================================
0001C5EC                            
0001C5EC                            Obj75_FlameDelete:
0001C5EC 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C5F2                            ; ===========================================================================
0001C5F2                            
0001C5F2                            loc_195BE:
0001C5F2 43F9 0001 AC9C             		lea	(Ani_Eggman).l,a1
0001C5F8 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001C5FE 2268 0034                  		movea.l	$34(a0),a1
0001C602 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C608 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C60E                            
0001C60E                            loc_195DA:
0001C60E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C614 7003                       		moveq	#3,d0
0001C616 C028 0022                  		and.b	obStatus(a0),d0
0001C61A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C620 8128 0001                  		or.b	d0,obRender(a0)
0001C624 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            Obj75_SpikeMain:; Routine 8
0001C62A 217C 0001 ADDC 0004        		move.l	#Map_BossItems,obMap(a0)
0001C632 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C638 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C63E 2268 0034                  		movea.l	$34(a0),a1
0001C642 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C648 6600                       		bne.s	loc_1961C
0001C64A 4A28 0001                  		tst.b	obRender(a0)
0001C64E 6A00                       		bpl.s	Obj75_SpikeDelete
0001C650                            
0001C650                            loc_1961C:
0001C650 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C656 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C65C 3028 003C                  		move.w	$3C(a0),d0
0001C660 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C666 6600                       		bne.s	loc_19652
0001C668 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C66E 6700                       		beq.s	loc_1964C
0001C670 4A29 0028                  		tst.b	obSubtype(a1)
0001C674 6600                       		bne.s	loc_19658
0001C676 0C40 0094                  		cmpi.w	#$94,d0
0001C67A 6C00                       		bge.s	loc_19658
0001C67C 5E40                       		addq.w	#7,d0
0001C67E 6000                       		bra.s	loc_19658
0001C680                            ; ===========================================================================
0001C680                            
0001C680                            loc_1964C:
0001C680 4A69 003C                  		tst.w	$3C(a1)
0001C684 6A00                       		bpl.s	loc_19658
0001C686                            
0001C686                            loc_19652:
0001C686 4A40                       		tst.w	d0
0001C688 6F00                       		ble.s	loc_19658
0001C68A 5B40                       		subq.w	#5,d0
0001C68C                            
0001C68C                            loc_19658:
0001C68C 3140 003C                  		move.w	d0,$3C(a0)
0001C690 E440                       		asr.w	#2,d0
0001C692 D168 000C                  		add.w	d0,obY(a0)
0001C696 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C69C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C6A2 4228 0020                  		clr.b	obColType(a0)
0001C6A6 2268 0034                  		movea.l	$34(a0),a1
0001C6AA 4A29 0020                  		tst.b	obColType(a1)
0001C6AE 6700                       		beq.s	loc_19688
0001C6B0 4A29 0029                  		tst.b	$29(a1)
0001C6B4 6600                       		bne.s	loc_19688
0001C6B6 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C6BC                            
0001C6BC                            loc_19688:
0001C6BC 6000 FF50                  		bra.w	loc_195DA
0001C6C0                            ; ===========================================================================
0001C6C0                            
0001C6C0                            Obj75_SpikeDelete:
0001C6C0 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C6C0 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C6C6                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C6C6                            ; ---------------------------------------------------------------------------
0001C6C6                            
0001C6C6                            BossBlock:
0001C6C6 7000                       		moveq	#0,d0
0001C6C8 1028 0024                  		move.b	obRoutine(a0),d0
0001C6CC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C6D0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C6D4                            ; ===========================================================================
0001C6D4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C6D6 0000                       		dc.w Obj76_Action-Obj76_Index
0001C6D8 0000                       		dc.w loc_19762-Obj76_Index
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            Obj76_Main:	; Routine 0
0001C6DA 7800                       		moveq	#0,d4
0001C6DC 3A3C 2C10                  		move.w	#$2C10,d5
0001C6E0 7C09                       		moveq	#9,d6
0001C6E2 43D0                       		lea	(a0),a1
0001C6E4 6000                       		bra.s	Obj76_MakeBlock
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            Obj76_Loop:
0001C6E6 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001C6EC 6600                       		bne.s	Obj76_ExitLoop
0001C6EE                            
0001C6EE                            Obj76_MakeBlock:
0001C6EE 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C6F2 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C6FA 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C700 137C 0004 0001             		move.b	#4,obRender(a1)
0001C706 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C70C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C712 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C718 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C71C 337C 0582 000C             		move.w	#$582,obY(a1)
0001C722 3344 0028                  		move.w	d4,obSubtype(a1)
0001C726 0644 0101                  		addi.w	#$101,d4
0001C72A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C72E 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C732 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C736                            
0001C736                            Obj76_ExitLoop:
0001C736 4E75                       		rts	
0001C738                            ; ===========================================================================
0001C738                            
0001C738                            Obj76_Action:	; Routine 2
0001C738 1028 0029                  		move.b	$29(a0),d0
0001C73C B028 0028                  		cmp.b	obSubtype(a0),d0
0001C740 6700                       		beq.s	Obj76_Solid
0001C742 4A00                       		tst.b	d0
0001C744 6B00                       		bmi.s	loc_19718
0001C746                            
0001C746                            loc_19712:
0001C746 6100 0000                  		bsr.w	Obj76_Break
0001C74A 6000                       		bra.s	Obj76_Display
0001C74C                            ; ===========================================================================
0001C74C                            
0001C74C                            loc_19718:
0001C74C 2268 0034                  		movea.l	$34(a0),a1
0001C750 4A29 0021                  		tst.b	obColProp(a1)
0001C754 67F0                       		beq.s	loc_19712
0001C756 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C75C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C762 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C768 B2C8                       		cmpa.w	a0,a1
0001C76A 6500                       		bcs.s	Obj76_Display
0001C76C 3029 0012                  		move.w	obVelY(a1),d0
0001C770 48C0                       		ext.l	d0
0001C772 E080                       		asr.l	#8,d0
0001C774 D168 000C                  		add.w	d0,obY(a0)
0001C778 6000                       		bra.s	Obj76_Display
0001C77A                            ; ===========================================================================
0001C77A                            
0001C77A                            Obj76_Solid:
0001C77A 323C 001B                  		move.w	#$1B,d1
0001C77E 343C 0010                  		move.w	#$10,d2
0001C782 363C 0011                  		move.w	#$11,d3
0001C786 3828 0008                  		move.w	obX(a0),d4
0001C78A 4EB9 0001 1C54             		jsr	(SolidObject).l
0001C790                            
0001C790                            Obj76_Display:
0001C790 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001C796                            ; ===========================================================================
0001C796                            
0001C796                            loc_19762:	; Routine 4
0001C796 4A28 0001                  		tst.b	obRender(a0)
0001C79A 6A00                       		bpl.s	Obj76_Delete
0001C79C 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001C7A2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            Obj76_Delete:
0001C7A8 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C7AE                            
0001C7AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7AE                            
0001C7AE                            
0001C7AE                            Obj76_Break:
0001C7AE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C7B2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C7B6 7801                       		moveq	#1,d4
0001C7B8 7203                       		moveq	#3,d1
0001C7BA 7438                       		moveq	#$38,d2
0001C7BC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C7C0 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C7C6 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C7CC 43D0                       		lea	(a0),a1
0001C7CE 6000                       		bra.s	Obj76_MakeFrag
0001C7D0                            ; ===========================================================================
0001C7D0                            
0001C7D0                            Obj76_LoopFrag:
0001C7D0 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001C7D6 6600                       		bne.s	loc_197D4
0001C7D8                            
0001C7D8                            Obj76_MakeFrag:
0001C7D8 45D0                       		lea	(a0),a2
0001C7DA 47D1                       		lea	(a1),a3
0001C7DC 7603                       		moveq	#3,d3
0001C7DE                            
0001C7DE                            loc_197AA:
0001C7DE 26DA                       		move.l	(a2)+,(a3)+
0001C7E0 26DA                       		move.l	(a2)+,(a3)+
0001C7E2 26DA                       		move.l	(a2)+,(a3)+
0001C7E4 26DA                       		move.l	(a2)+,(a3)+
0001C7E6 51CB FFF6                  		dbf	d3,loc_197AA
0001C7EA                            
0001C7EA 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C7EE 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C7F2 361D                       		move.w	(a5)+,d3
0001C7F4 D769 0008                  		add.w	d3,obX(a1)
0001C7F8 361D                       		move.w	(a5)+,d3
0001C7FA D769 000C                  		add.w	d3,obY(a1)
0001C7FE 1344 001A                  		move.b	d4,obFrame(a1)
0001C802 5244                       		addq.w	#1,d4
0001C804 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C808                            
0001C808                            loc_197D4:
0001C812                            ; End of function Obj76_Break
0001C812                            
0001C812                            ; ===========================================================================
0001C812 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C816 0180 FE00                  		dc.w $180, -$200
0001C81A FF00 FF00                  		dc.w -$100, -$100
0001C81E 0100 FF00                  		dc.w $100, -$100
0001C822 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C826 0010 0000                  		dc.w $10, 0
0001C82A 0000 0010                  		dc.w 0,	$10
0001C82E 0010 0010                  		dc.w $10, $10
0001C82E 0010 0010                  		dc.w $10, $10
0001C832                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C832                            ; ---------------------------------------------------------------------------
0001C832                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C832                            ; ---------------------------------------------------------------------------
0001C832                            Map_BossBlock_internal:
0001C832 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C834 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C836 0000                       		dc.w @topright-Map_BossBlock_internal
0001C838 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C83A 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C83C 02                         @wholeblock:	dc.b 2
0001C83D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C842 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C847 00                         		dc.b 0
0001C848 01                         @topleft:	dc.b 1
0001C849 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C84E 01                         @topright:	dc.b 1
0001C84F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C854 01                         @bottomleft:	dc.b 1
0001C855 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C85A 01                         @bottomright:	dc.b 1
0001C85B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C860                            		even
0001C860                            		even
0001C860                            
0001C860                            loc_1982C:
0001C860 4EF9 0000 F886             		jmp	(DeleteObject).l
0001C866                            
0001C866                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C866                            ; ---------------------------------------------------------------------------
0001C866                            ; Object 82 - Eggman (SBZ2)
0001C866                            ; ---------------------------------------------------------------------------
0001C866                            
0001C866                            ScrapEggman:
0001C866 7000                       		moveq	#0,d0
0001C868 1028 0024                  		move.b	obRoutine(a0),d0
0001C86C 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C870 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C874                            ; ===========================================================================
0001C874 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C876 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C878 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C87A                            
0001C87A 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C87D 0400 03                    		dc.b 4,	0, 3
0001C880                            ; ===========================================================================
0001C880                            
0001C880                            SEgg_Main:	; Routine 0
0001C880 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C884 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C88A 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C890 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C896 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C89C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C8A2 4228 0025                  		clr.b	ob2ndRout(a0)
0001C8A6 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C8AA 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C8AE 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C8B2 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C8BA 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C8C0 117C 0004 0001             		move.b	#4,obRender(a0)
0001C8C6 08E8 0007 0001             		bset	#7,obRender(a0)
0001C8CC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C8D2 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001C8D8 6600                       		bne.s	SEgg_Eggman
0001C8DA 2348 0034                  		move.l	a0,$34(a1)
0001C8DE 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C8E2 337C 2130 0008             		move.w	#$2130,obX(a1)
0001C8E8 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001C8EE 4228 0025                  		clr.b	ob2ndRout(a0)
0001C8F2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C8F6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C8FA 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C8FE 237C 0000 E07C 0004        		move.l	#Map_But,obMap(a1)
0001C906 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C90C 137C 0004 0001             		move.b	#4,obRender(a1)
0001C912 08E9 0007 0001             		bset	#7,obRender(a1)
0001C918 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C91E 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C924                            
0001C924                            SEgg_Eggman:	; Routine 2
0001C924 7000                       		moveq	#0,d0
0001C926 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C92A 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C92E 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C932 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C936 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001C93C 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001C942                            ; ===========================================================================
0001C942 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C944 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C946 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C948 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C94A                            ; ===========================================================================
0001C94A                            
0001C94A                            SEgg_ChkSonic:
0001C94A 3028 0008                  		move.w	obX(a0),d0
0001C94E 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C952 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C956 6400                       		bcc.s	loc_19934	; if not, branch
0001C958 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C95C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C962 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C968                            
0001C968                            loc_19934:
0001C968 4EF9 0000 F832             		jmp	(SpeedToPos).l
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            SEgg_PreLeap:
0001C96E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C972 6600                       		bne.s	loc_19954	; if time remains, branch
0001C974 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C978 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C97E 5868 000C                  		addq.w	#4,obY(a0)
0001C982 317C 000F 003C             		move.w	#15,$3C(a0)
0001C988                            
0001C988                            loc_19954:
0001C988 60DE                       		bra.s	loc_19934
0001C98A                            ; ===========================================================================
0001C98A                            
0001C98A                            SEgg_Leap:
0001C98A 5368 003C                  		subq.w	#1,$3C(a0)
0001C98E 6E00                       		bgt.s	loc_199D0
0001C990 6600                       		bne.s	loc_1996A
0001C992 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C998 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C99E                            
0001C99E                            loc_1996A:
0001C99E 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001C9A4 6E00                       		bgt.s	loc_19976
0001C9A6 4268 0010                  		clr.w	obVelX(a0)
0001C9AA                            
0001C9AA                            loc_19976:
0001C9AA 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C9B0 4A68 0012                  		tst.w	obVelY(a0)
0001C9B4 6B00                       		bmi.s	SEgg_FindBlocks
0001C9B6 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001C9BC 6500                       		bcs.s	SEgg_FindBlocks
0001C9BE 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C9C4 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001C9CA 6500                       		bcs.s	SEgg_FindBlocks
0001C9CC 317C 059B 000C             		move.w	#$59B,obY(a0)
0001C9D2 4268 0012                  		clr.w	obVelY(a0)
0001C9D6                            
0001C9D6                            SEgg_FindBlocks:
0001C9D6 3028 0010                  		move.w	obVelX(a0),d0
0001C9DA 8068 0012                  		or.w	obVelY(a0),d0
0001C9DE 6600                       		bne.s	loc_199D0
0001C9E0 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C9E4 703E                       		moveq	#$3E,d0
0001C9E6 7240                       		moveq	#$40,d1
0001C9E8                            
0001C9E8                            SEgg_FindLoop:	
0001C9E8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C9EA 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C9EE 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C9F2                            
0001C9F2 6600                       		bne.s	loc_199D0
0001C9F4 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C9FA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C9FE 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA04                            
0001CA04                            loc_199D0:
0001CA04 6000 FF62                  		bra.w	loc_19934
0001CA08                            ; ===========================================================================
0001CA08                            
0001CA08                            SEgg_Switch:	; Routine 4
0001CA08 7000                       		moveq	#0,d0
0001CA0A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA0E 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CA12 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CA16                            ; ===========================================================================
0001CA16 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CA18 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CA1A                            ; ===========================================================================
0001CA1A                            
0001CA1A                            loc_199E6:
0001CA1A 2268 0034                  		movea.l	$34(a0),a1
0001CA1E 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CA24 6600                       		bne.s	SEgg_SwDisplay
0001CA26 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CA2C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA30                            
0001CA30                            SEgg_SwDisplay:
0001CA30 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CA30 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CA36                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CA36                            ; ---------------------------------------------------------------------------
0001CA36                            ; Animation script - Eggman (SBZ2)
0001CA36                            ; ---------------------------------------------------------------------------
0001CA36 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CA38 0000                       		dc.w @laugh-Ani_SEgg
0001CA3A 0000                       		dc.w @jump1-Ani_SEgg
0001CA3C 0000                       		dc.w @intube-Ani_SEgg
0001CA3E 0000                       		dc.w @running-Ani_SEgg
0001CA40 0000                       		dc.w @jump2-Ani_SEgg
0001CA42 0000                       		dc.w @starjump-Ani_SEgg
0001CA44 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CA48 00                         		even
0001CA48 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CA4C 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CA54 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CA58 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CA5E 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CA64 00                         		even
0001CA64 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CA68 00                         		even
0001CA68 00                         		even
0001CA68                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CA68                            ; ---------------------------------------------------------------------------
0001CA68                            ; Sprite mappings - Eggman (SBZ2)
0001CA68                            ; ---------------------------------------------------------------------------
0001CA68                            Map_SEgg_internal:
0001CA68 0000                       		dc.w @stand-Map_SEgg_internal
0001CA6A 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CA6C 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CA6E 0000                       		dc.w @jump1-Map_SEgg_internal
0001CA70 0000                       		dc.w @jump2-Map_SEgg_internal
0001CA72 0000                       		dc.w @surprise-Map_SEgg_internal
0001CA74 0000                       		dc.w @starjump-Map_SEgg_internal
0001CA76 0000                       		dc.w @running1-Map_SEgg_internal
0001CA78 0000                       		dc.w @running2-Map_SEgg_internal
0001CA7A 0000                       		dc.w @intube-Map_SEgg_internal
0001CA7C 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CA7E 03                         @stand:		dc.b 3
0001CA7F FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CA84 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA89 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA8E 04                         @laugh1:	dc.b 4
0001CA8F E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CA94 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CA99 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CA9E FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CAA3 00                         		dc.b 0
0001CAA4 04                         @laugh2:	dc.b 4
0001CAA5 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CAAA E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CAAF 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CAB4 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CAB9 00                         		dc.b 0
0001CABA 04                         @jump1:		dc.b 4
0001CABB F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CAC0 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CAC5 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CACA EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CACF 00                         		dc.b 0
0001CAD0 04                         @jump2:		dc.b 4
0001CAD1 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CAD6 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CADB 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CAE0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CAE5 00                         		dc.b 0
0001CAE6 04                         @surprise:	dc.b 4
0001CAE7 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CAEC E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CAF1 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CAF6 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CAFB 00                         		dc.b 0
0001CAFC 07                         @starjump:	dc.b 7
0001CAFD E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CB02 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CB07 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CB0C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CB11 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CB16 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CB1B F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CB20 05                         @running1:	dc.b 5
0001CB21 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CB26 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CB2B 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CB30 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CB35 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CB3A 06                         @running2:	dc.b 6
0001CB3B EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CB40 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CB45 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CB4A 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CB4F 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CB54 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CB59 00                         		dc.b 0
0001CB5A 08                         @intube:	dc.b 8
0001CB5B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CB60 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CB65 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CB6A 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CB6F E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CB74 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CB79 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CB7E 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CB83 03                         @cockpit:	dc.b 3
0001CB84 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CB89 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CB8E EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CB94 00                         		even
0001CB94 00                         		even
0001CB94                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CB94                            ; ---------------------------------------------------------------------------
0001CB94                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CB94                            ; ---------------------------------------------------------------------------
0001CB94                            
0001CB94                            FalseFloor:
0001CB94 7000                       		moveq	#0,d0
0001CB96 1028 0024                  		move.b	obRoutine(a0),d0
0001CB9A 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CB9E 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CBA2                            ; ===========================================================================
0001CBA2 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CBA4 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CBA6 0000                       		dc.w loc_19C36-FFloor_Index
0001CBA8 0000                       		dc.w loc_19C62-FFloor_Index
0001CBAA 0000                       		dc.w loc_19C72-FFloor_Index
0001CBAC 0000                       		dc.w loc_19C80-FFloor_Index
0001CBAE                            ; ===========================================================================
0001CBAE                            
0001CBAE                            FFloor_Main:	; Routine 0
0001CBAE 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CBB4 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CBBA 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CBC0 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CBC6 117C 0004 0001             		move.b	#4,obRender(a0)
0001CBCC 08E8 0007 0001             		bset	#7,obRender(a0)
0001CBD2 7800                       		moveq	#0,d4
0001CBD4 3A3C 2010                  		move.w	#$2010,d5
0001CBD8 7C07                       		moveq	#7,d6
0001CBDA 45E8 0030                  		lea	$30(a0),a2
0001CBDE                            
0001CBDE                            FFloor_MakeBlock:
0001CBDE 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001CBE4 6600                       		bne.s	FFloor_ExitMake
0001CBE6 34C9                       		move.w	a1,(a2)+
0001CBE8 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CBEC 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CBF4 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CBFA 137C 0004 0001             		move.b	#4,obRender(a1)
0001CC00 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CC06 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CC0C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CC12 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CC16 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CC1C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CC20 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CC26 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CC2A                            
0001CC2A                            FFloor_ExitMake:
0001CC2A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC2E 4E75                       		rts	
0001CC30                            ; ===========================================================================
0001CC30                            
0001CC30                            FFloor_ChkBreak:; Routine 2
0001CC30 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CC36 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CC38 4228 001A                  		clr.b	obFrame(a0)
0001CC3C 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CC40                            
0001CC40                            FFloor_Solid:
0001CC40 7000                       		moveq	#0,d0
0001CC42 1028 001A                  		move.b	obFrame(a0),d0
0001CC46 4400                       		neg.b	d0
0001CC48 4880                       		ext.w	d0
0001CC4A 5040                       		addq.w	#8,d0
0001CC4C E940                       		asl.w	#4,d0
0001CC4E 383C 2100                  		move.w	#$2100,d4
0001CC52 9840                       		sub.w	d0,d4
0001CC54 1140 0014                  		move.b	d0,obActWid(a0)
0001CC58 3144 0008                  		move.w	d4,obX(a0)
0001CC5C 720B                       		moveq	#$B,d1
0001CC5E D240                       		add.w	d0,d1
0001CC60 7410                       		moveq	#$10,d2
0001CC62 7611                       		moveq	#$11,d3
0001CC64 4EF9 0001 1C54             		jmp	(SolidObject).l
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            loc_19C36:	; Routine 4
0001CC6A 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CC70 6400                       		bcc.s	FFloor_Solid2
0001CC72 70FF                       		moveq	#-1,d0
0001CC74 1028 001A                  		move.b	obFrame(a0),d0
0001CC78 4880                       		ext.w	d0
0001CC7A D040                       		add.w	d0,d0
0001CC7C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CC80 2240                       		movea.l	d0,a1
0001CC82 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CC88 5228 001A                  		addq.b	#1,obFrame(a0)
0001CC8C 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CC92 6700                       		beq.s	loc_19C62
0001CC94                            
0001CC94                            FFloor_Solid2:
0001CC94 60AA                       		bra.s	FFloor_Solid
0001CC96                            ; ===========================================================================
0001CC96                            
0001CC96                            loc_19C62:	; Routine 6
0001CC96 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CC9C 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CCA2 6000 FBBC                  		bra.w	loc_1982C
0001CCA6                            ; ===========================================================================
0001CCA6                            
0001CCA6                            loc_19C72:	; Routine 8
0001CCA6 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CCAC 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CCAE 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CCB4                            ; ===========================================================================
0001CCB4                            
0001CCB4                            loc_19C80:	; Routine $A
0001CCB4 4A28 0001                  		tst.b	obRender(a0)
0001CCB8 6A00 FBA6                  		bpl.w	loc_1982C
0001CCBC 4EB9 0000 F7FA             		jsr	(ObjectFall).l
0001CCC2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CCC8                            ; ===========================================================================
0001CCC8                            
0001CCC8                            FFloor_Break:
0001CCC8 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CCCC 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CCD0 7801                       		moveq	#1,d4
0001CCD2 7203                       		moveq	#3,d1
0001CCD4 7438                       		moveq	#$38,d2
0001CCD6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CCDA 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CCE0 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CCE6 43D0                       		lea	(a0),a1
0001CCE8 6000                       		bra.s	FFloor_MakeFrag
0001CCEA                            ; ===========================================================================
0001CCEA                            
0001CCEA                            FFloor_LoopFrag:
0001CCEA 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001CCF0 6600                       		bne.s	FFloor_BreakSnd
0001CCF2                            
0001CCF2                            FFloor_MakeFrag:
0001CCF2 45D0                       		lea	(a0),a2
0001CCF4 47D1                       		lea	(a1),a3
0001CCF6 7603                       		moveq	#3,d3
0001CCF8                            
0001CCF8                            loc_19CC4:
0001CCF8 26DA                       		move.l	(a2)+,(a3)+
0001CCFA 26DA                       		move.l	(a2)+,(a3)+
0001CCFC 26DA                       		move.l	(a2)+,(a3)+
0001CCFE 26DA                       		move.l	(a2)+,(a3)+
0001CD00 51CB FFF6                  		dbf	d3,loc_19CC4
0001CD04                            
0001CD04 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CD08 361D                       		move.w	(a5)+,d3
0001CD0A D769 0008                  		add.w	d3,obX(a1)
0001CD0E 361D                       		move.w	(a5)+,d3
0001CD10 D769 000C                  		add.w	d3,obY(a1)
0001CD14 1344 001A                  		move.b	d4,obFrame(a1)
0001CD18 5244                       		addq.w	#1,d4
0001CD1A 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CD1E                            
0001CD1E                            FFloor_BreakSnd:
0001CD28 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CD2E                            ; ===========================================================================
0001CD2E 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CD32 0120 00C0                  		dc.w $120, $C0
0001CD36 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CD3A 0010 0000                  		dc.w $10, 0
0001CD3E 0000 0010                  		dc.w 0,	$10
0001CD42 0010 0010                  		dc.w $10, $10
0001CD42 0010 0010                  		dc.w $10, $10
0001CD46                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CD46                            ; ---------------------------------------------------------------------------
0001CD46                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CD46                            ; ---------------------------------------------------------------------------
0001CD46                            Map_FFloor_internal:
0001CD46 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CD48 0000                       		dc.w @topleft-Map_FFloor_internal
0001CD4A 0000                       		dc.w @topright-Map_FFloor_internal
0001CD4C 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CD4E 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CD50 01                         @wholeblock:	dc.b 1
0001CD51 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CD56 02                         @topleft:	dc.b 2
0001CD57 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CD5C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CD61 00                         		dc.b 0
0001CD62 02                         @topright:	dc.b 2
0001CD63 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CD68 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CD6D 00                         		dc.b 0
0001CD6E 02                         @bottomleft:	dc.b 2
0001CD6F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CD74 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CD79 00                         		dc.b 0
0001CD7A 02                         @bottomright:	dc.b 2
0001CD7B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CD80 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CD86 00                         		even
0001CD86 00                         		even
0001CD86                            		include	"_incObj\85 Boss - Final.asm"
0001CD86                            ; ---------------------------------------------------------------------------
0001CD86                            ; Object 85 - Eggman (FZ)
0001CD86                            ; ---------------------------------------------------------------------------
0001CD86                            
0001CD86                            Obj85_Delete:
0001CD86 4EF9 0000 F886             		jmp	(DeleteObject).l
0001CD8C                            ; ===========================================================================
0001CD8C                            
0001CD8C                            BossFinal:
0001CD8C 7000                       		moveq	#0,d0
0001CD8E 1028 0024                  		move.b	obRoutine(a0),d0
0001CD92 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CD96 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CD9A                            ; ===========================================================================
0001CD9A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CD9C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CD9E 0000                       		dc.w loc_1A38E-Obj85_Index
0001CDA0 0000                       		dc.w loc_1A346-Obj85_Index
0001CDA2 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CDA4 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CDA6 0000                       		dc.w loc_1A264-Obj85_Index
0001CDA8                            
0001CDA8 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CDAE 0001 CA68                  		dc.l Map_SEgg		; mappings pointer
0001CDB2 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CDB8 0000 0000                  		dc.l Map_EggCyl
0001CDBC 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CDC2 0000 0000                  		dc.l Map_FZLegs
0001CDC6 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CDCC 0001 CA68                  		dc.l Map_SEgg
0001CDD0 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CDD6 0001 ACEC                  		dc.l Map_Eggman
0001CDDA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CDE0 0001 ACEC                  		dc.l Map_Eggman
0001CDE4                            
0001CDE4                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CDE4 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CDEA 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CDF0 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CDF6 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CDFC 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CE02 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CE08                            ; ===========================================================================
0001CE08                            
0001CE08                            Obj85_Main:	; Routine 0
0001CE08 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CE0C 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CE10 2248                       		movea.l	a0,a1
0001CE12 7205                       		moveq	#5,d1
0001CE14 6000                       		bra.s	Obj85_LoadBoss
0001CE16                            ; ===========================================================================
0001CE16                            
0001CE16                            Obj85_Loop:
0001CE16 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001CE1C 6600                       		bne.s	loc_19E20
0001CE1E                            
0001CE1E                            Obj85_LoadBoss:
0001CE1E 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CE22 335A 0008                  		move.w	(a2)+,obX(a1)
0001CE26 335A 000C                  		move.w	(a2)+,obY(a1)
0001CE2A 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CE2E 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CE32 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CE36 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CE3A 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CE3E 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CE42 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CE46 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE4C 08E8 0007 0001             		bset	#7,obRender(a0)
0001CE52 2348 0034                  		move.l	a0,$34(a1)
0001CE56 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CE5A                            
0001CE5A                            loc_19E20:
0001CE5A 45E8 0036                  		lea	$36(a0),a2
0001CE5E 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001CE64 6600                       		bne.s	loc_19E5A
0001CE66 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CE6A 3489                       		move.w	a1,(a2)
0001CE6C 2348 0034                  		move.l	a0,$34(a1)
0001CE70 45E8 0038                  		lea	$38(a0),a2
0001CE74 7400                       		moveq	#0,d2
0001CE76 7203                       		moveq	#3,d1
0001CE78                            
0001CE78                            loc_19E3E:
0001CE78 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001CE7E 6600                       		bne.s	loc_19E5A
0001CE80 34C9                       		move.w	a1,(a2)+
0001CE82 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CE86 2348 0034                  		move.l	a0,$34(a1)
0001CE8A 1342 0028                  		move.b	d2,obSubtype(a1)
0001CE8E 5442                       		addq.w	#2,d2
0001CE90 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CE94                            
0001CE94                            loc_19E5A:
0001CE94 317C 0000 0034             		move.w	#0,$34(a0)
0001CE9A 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CEA0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CEA6                            
0001CEA6                            Obj85_Eggman:	; Routine 2
0001CEA6 7000                       		moveq	#0,d0
0001CEA8 1028 0034                  		move.b	$34(a0),d0
0001CEAC 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CEB0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CEB4 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001CEBA                            ; ===========================================================================
0001CEBA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CEBE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CEC2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CEC6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CECA                            ; ===========================================================================
0001CECA                            
0001CECA                            loc_19E90:
0001CECA 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CECE 6600                       		bne.s	loc_19EA2
0001CED0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CED6 6500                       		bcs.s	loc_19EA2
0001CED8 5428 0034                  		addq.b	#2,$34(a0)
0001CEDC                            
0001CEDC                            loc_19EA2:
0001CEDC 52B8 F636                  		addq.l	#1,(v_random).w
0001CEE0 4E75                       		rts	
0001CEE2                            ; ===========================================================================
0001CEE2                            
0001CEE2                            loc_19EA8:
0001CEE2 4A68 0030                  		tst.w	$30(a0)
0001CEE6 6A00                       		bpl.s	loc_19F10
0001CEE8 4268 0030                  		clr.w	$30(a0)
0001CEEC 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001CEF2 0240 000C                  		andi.w	#$C,d0
0001CEF6 3200                       		move.w	d0,d1
0001CEF8 5441                       		addq.w	#2,d1
0001CEFA 4A80                       		tst.l	d0
0001CEFC 6A00                       		bpl.s	loc_19EC6
0001CEFE C340                       		exg	d1,d0
0001CF00                            
0001CF00                            loc_19EC6:
0001CF00 43FA 0000                  		lea	word_19FD6(pc),a1
0001CF04 3031 0000                  		move.w	(a1,d0.w),d0
0001CF08 3231 1000                  		move.w	(a1,d1.w),d1
0001CF0C 3140 0030                  		move.w	d0,$30(a0)
0001CF10 74FF                       		moveq	#-1,d2
0001CF12 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CF16 2242                       		movea.l	d2,a1
0001CF18 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CF1E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CF24 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CF28 2242                       		movea.l	d2,a1
0001CF2A 137C 0001 0029             		move.b	#1,$29(a1)
0001CF30 337C 0000 0030             		move.w	#0,$30(a1)
0001CF36 317C 0001 0032             		move.w	#1,$32(a0)
0001CF3C 4228 0035                  		clr.b	$35(a0)
0001CF4A                            
0001CF4A                            loc_19F10:
0001CF4A 4A68 0032                  		tst.w	$32(a0)
0001CF4E 6B00 0000                  		bmi.w	loc_19FA6
0001CF52 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CF58 3038 D008                  		move.w	(v_player+obX).w,d0
0001CF5C 9068 0008                  		sub.w	obX(a0),d0
0001CF60 6500                       		bcs.s	loc_19F2E
0001CF62 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CF68                            
0001CF68                            loc_19F2E:
0001CF68 323C 002B                  		move.w	#$2B,d1
0001CF6C 343C 0014                  		move.w	#$14,d2
0001CF70 363C 0014                  		move.w	#$14,d3
0001CF74 3828 0008                  		move.w	obX(a0),d4
0001CF78 4EB9 0001 1C54             		jsr	(SolidObject).l
0001CF7E 4A44                       		tst.w	d4
0001CF80 6E00                       		bgt.s	loc_19F50
0001CF82                            
0001CF82                            loc_19F48:
0001CF82 4A28 0035                  		tst.b	$35(a0)
0001CF86 6600                       		bne.s	loc_19F88
0001CF88 6000                       		bra.s	loc_19F96
0001CF8A                            ; ===========================================================================
0001CF8A                            
0001CF8A                            loc_19F50:
0001CF8A 5E78 F636                  		addq.w	#7,(v_random).w
0001CF8E 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CF94 66EC                       		bne.s	loc_19F48
0001CF96 303C 0300                  		move.w	#$300,d0
0001CF9A 0828 0000 0022             		btst	#0,obStatus(a0)
0001CFA0 6600                       		bne.s	loc_19F6A
0001CFA2 4440                       		neg.w	d0
0001CFA4                            
0001CFA4                            loc_19F6A:
0001CFA4 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CFA8 4A28 0035                  		tst.b	$35(a0)
0001CFAC 6600                       		bne.s	loc_19F88
0001CFAE 5328 0021                  		subq.b	#1,obColProp(a0)
0001CFB2 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CFB8 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CFBE                            
0001CFBE                            loc_19F88:
0001CFBE 5328 0035                  		subq.b	#1,$35(a0)
0001CFC2 6700                       		beq.s	loc_19F96
0001CFC4 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CFCA 6000                       		bra.s	loc_19F9C
0001CFCC                            ; ===========================================================================
0001CFCC                            
0001CFCC                            loc_19F96:
0001CFCC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CFD2                            
0001CFD2                            loc_19F9C:
0001CFD2 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001CFD6 4EF9 0000 C8FA             		jmp	(AnimateSprite).l
0001CFDC                            ; ===========================================================================
0001CFDC                            
0001CFDC                            loc_19FA6:
0001CFDC 4A28 0021                  		tst.b	obColProp(a0)
0001CFE0 6700                       		beq.s	loc_19FBC
0001CFE2 5428 0034                  		addq.b	#2,$34(a0)
0001CFE6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFEC 4268 0032                  		clr.w	$32(a0)
0001CFF0 4E75                       		rts	
0001CFF2                            ; ===========================================================================
0001CFF2                            
0001CFF2                            loc_19FBC:
0001CFF2 7064                       			moveq	#100,d0
0001CFF4 6100 0000                  			bsr.w	AddPoints
0001CFF8 117C 0006 0034             		move.b	#6,$34(a0)
0001CFFE 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D004 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D00A 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D010 4E75                       		rts	
0001D012                            ; ===========================================================================
0001D012 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D022                            ; ===========================================================================
0001D022                            
0001D022                            loc_19FE6:
0001D022 70FF                       		moveq	#-1,d0
0001D024 3028 0036                  		move.w	$36(a0),d0
0001D028 2240                       		movea.l	d0,a1
0001D02A 4A68 0030                  		tst.w	$30(a0)
0001D02E 6A00                       		bpl.s	loc_1A000
0001D030 4268 0030                  		clr.w	$30(a0)
0001D034 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D03A 6100                       		bsr.s	loc_1A020
0001D03C                            
0001D03C                            loc_1A000:
0001D03C 700F                       		moveq	#$F,d0
0001D03E C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D042 6600                       		bne.s	loc_1A00A
0001D044 6100                       		bsr.s	loc_1A020
0001D046                            
0001D046                            loc_1A00A:
0001D046 4A68 0032                  		tst.w	$32(a0)
0001D04A 6700                       		beq.s	locret_1A01E
0001D04C 5528 0034                  		subq.b	#2,$34(a0)
0001D050 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D056 4268 0032                  		clr.w	$32(a0)
0001D05A                            
0001D05A                            locret_1A01E:
0001D05A 4E75                       		rts	
0001D05C                            ; ===========================================================================
0001D05C                            
0001D05C                            loc_1A020:
0001D066                            ; ===========================================================================
0001D066                            
0001D066                            loc_1A02A:
0001D066 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D06C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D072 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001D078 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D07E 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D084 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D08A 6500                       		bcs.s	loc_1A070
0001D08C 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D092 5428 0034                  		addq.b	#2,$34(a0)
0001D096 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D09C 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D0A2 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D0A8 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D0AC                            
0001D0AC                            loc_1A070:
0001D0AC 6000 0000                  		bra.w	loc_1A166
0001D0B0                            ; ===========================================================================
0001D0B0                            
0001D0B0                            loc_1A074:
0001D0B0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D0B6 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D0BC 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001D0C2 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D0C8 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D0CE 6500                       		bcs.s	loc_1A09A
0001D0D0 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D0D6                            
0001D0D6                            loc_1A09A:
0001D0D6 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D0DC 3028 0008                  		move.w	obX(a0),d0
0001D0E0 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D0E4 6A00                       		bpl.s	loc_1A0B4
0001D0E6 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D0EC 6000 0000                  		bra.w	loc_1A0F2
0001D0F0                            ; ===========================================================================
0001D0F0                            
0001D0F0                            loc_1A0B4:
0001D0F0 0440 0070                  		subi.w	#$70,d0
0001D0F4 6500                       		bcs.s	loc_1A0F2
0001D0F6 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D0FC 5140                       		subq.w	#8,d0
0001D0FE 6500                       		bcs.s	loc_1A0F2
0001D100 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D106 5140                       		subq.w	#8,d0
0001D108 6500                       		bcs.s	loc_1A0F2
0001D10A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D110 5140                       		subq.w	#8,d0
0001D112 6500                       		bcs.s	loc_1A0F2
0001D114 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D11A 5140                       		subq.w	#8,d0
0001D11C 6500                       		bcs.s	loc_1A0F2
0001D11E 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D124 0440 0038                  		subi.w	#$38,d0
0001D128 6500                       		bcs.s	loc_1A0F2
0001D12A 4268 0010                  		clr.w	obVelX(a0)
0001D12E                            
0001D12E                            loc_1A0F2:
0001D12E 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D134 6500                       		bcs.s	loc_1A110
0001D136 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D13C 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D142 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D148 5428 0034                  		addq.b	#2,$34(a0)
0001D14C                            
0001D14C                            loc_1A110:
0001D14C 6000                       		bra.s	loc_1A15C
0001D14E                            ; ===========================================================================
0001D14E                            
0001D14E                            loc_1A112:
0001D14E 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001D154 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D15A 6500                       		bcs.s	loc_1A124
0001D15C 4268 0010                  		clr.w	obVelX(a0)
0001D160                            
0001D160                            loc_1A124:
0001D160 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D166 4A68 0012                  		tst.w	obVelY(a0)
0001D16A 6B00                       		bmi.s	loc_1A142
0001D16C 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D172 6500                       		bcs.s	loc_1A142
0001D174 317C 0592 000C             		move.w	#$592,obY(a0)
0001D17A 4268 0012                  		clr.w	obVelY(a0)
0001D17E                            
0001D17E                            loc_1A142:
0001D17E 3028 0010                  		move.w	obVelX(a0),d0
0001D182 8068 0012                  		or.w	obVelY(a0),d0
0001D186 6600                       		bne.s	loc_1A15C
0001D188 5428 0034                  		addq.b	#2,$34(a0)
0001D18C 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D192 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D198                            
0001D198                            loc_1A15C:
0001D198 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D19C 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001D1A2                            
0001D1A2                            loc_1A166:
0001D1A2 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D1A8 6C00                       		bge.s	loc_1A172
0001D1AA 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D1AE                            
0001D1AE                            loc_1A172:
0001D1AE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D1B4 6C00                       		bge.s	locret_1A190
0001D1B6 323C 001B                  		move.w	#$1B,d1
0001D1BA 343C 0070                  		move.w	#$70,d2
0001D1BE 363C 0071                  		move.w	#$71,d3
0001D1C2 3828 0008                  		move.w	obX(a0),d4
0001D1C6 4EF9 0001 1C54             		jmp	(SolidObject).l
0001D1CC                            ; ===========================================================================
0001D1CC                            
0001D1CC                            locret_1A190:
0001D1CC 4E75                       		rts	
0001D1CE                            ; ===========================================================================
0001D1CE                            
0001D1CE                            loc_1A192:
0001D1CE 217C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a0)
0001D1D6 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D1DC 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D1E2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1E8 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001D1EE 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D1F4 6400                       		bcc.s	loc_1A1D0
0001D1F6 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D1FC 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D202 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D208 5428 0034                  		addq.b	#2,$34(a0)
0001D20C                            
0001D20C                            loc_1A1D0:
0001D20C 6000 FF8A                  		bra.w	loc_1A15C
0001D210                            ; ===========================================================================
0001D210                            
0001D210                            loc_1A1D4:
0001D210 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D216 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001D21C 4A68 0030                  		tst.w	$30(a0)
0001D220 6600                       		bne.s	loc_1A1FC
0001D222 4A28 0020                  		tst.b	obColType(a0)
0001D226 6600                       		bne.s	loc_1A216
0001D228 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D22E 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D234                            
0001D234                            loc_1A1FC:
0001D234 5368 0030                  		subq.w	#1,$30(a0)
0001D238 6600                       		bne.s	loc_1A216
0001D23A 4A28 0022                  		tst.b	obStatus(a0)
0001D23E 6A00                       		bpl.s	loc_1A210
0001D240 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D246 6000                       		bra.s	loc_1A216
0001D248                            ; ===========================================================================
0001D248                            
0001D248                            loc_1A210:
0001D248 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D24E                            
0001D24E                            loc_1A216:
0001D24E 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D254 6D00                       		blt.s	loc_1A23A
0001D256 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D25C 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D262 4278 D020                  		clr.w	(v_player+obInertia).w
0001D266 4A68 0012                  		tst.w	obVelY(a0)
0001D26A 6A00                       		bpl.s	loc_1A248
0001D26C 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D272                            
0001D272                            loc_1A23A:
0001D272 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D278 6D00                       		blt.s	loc_1A248
0001D27A 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D280                            
0001D280                            loc_1A248:
0001D280 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D286 6500                       		bcs.s	loc_1A260
0001D288 4A28 0001                  		tst.b	obRender(a0)
0001D28C 6B00                       		bmi.s	loc_1A260
0001D28E 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D294 6000 FAF0                  		bra.w	Obj85_Delete
0001D298                            ; ===========================================================================
0001D298                            
0001D298                            loc_1A260:
0001D298 6000 FEFE                  		bra.w	loc_1A15C
0001D29C                            ; ===========================================================================
0001D29C                            
0001D29C                            loc_1A264:	; Routine 4
0001D29C 2268 0034                  		movea.l	$34(a0),a1
0001D2A0 1011                       		move.b	(a1),d0
0001D2A2 B010                       		cmp.b	(a0),d0
0001D2A4 6600 FAE0                  		bne.w	Obj85_Delete
0001D2A8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D2AE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D2B4 6C00                       		bge.s	loc_1A280
0001D2B6 6000                       		bra.s	loc_1A2A6
0001D2B8                            ; ===========================================================================
0001D2B8                            
0001D2B8                            loc_1A280:
0001D2B8 4A69 0010                  		tst.w	obVelX(a1)
0001D2BC 6700                       		beq.s	loc_1A28C
0001D2BE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D2C4                            
0001D2C4                            loc_1A28C:
0001D2C4 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D2C8 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001D2CE                            
0001D2CE                            loc_1A296:
0001D2CE 2268 0034                  		movea.l	$34(a0),a1
0001D2D2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D2D8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D2DE                            
0001D2DE                            loc_1A2A6:
0001D2DE 2268 0034                  		movea.l	$34(a0),a1
0001D2E2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D2E8 7003                       		moveq	#3,d0
0001D2EA C028 0022                  		and.b	obStatus(a0),d0
0001D2EE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D2F4 8128 0001                  		or.b	d0,obRender(a0)
0001D2F8 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001D2FE                            ; ===========================================================================
0001D2FE                            
0001D2FE                            loc_1A2C6:	; Routine 6
0001D2FE 2268 0034                  		movea.l	$34(a0),a1
0001D302 1011                       		move.b	(a1),d0
0001D304 B010                       		cmp.b	(a0),d0
0001D306 6600 FA7E                  		bne.w	Obj85_Delete
0001D30A 0CA9 0001 ACEC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D312 6700                       		beq.s	loc_1A2E4
0001D314 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D31A 60C2                       		bra.s	loc_1A2A6
0001D31C                            ; ===========================================================================
0001D31C                            
0001D31C                            loc_1A2E4:
0001D31C 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D322 4A29 0021                  		tst.b	obColProp(a1)
0001D326 6F00                       		ble.s	loc_1A312
0001D328 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D32E 217C 0001 ACEC 0004        		move.l	#Map_Eggman,obMap(a0)
0001D336 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D33C 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D340 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001D346 6000 FF86                  		bra.w	loc_1A296
0001D34A                            ; ===========================================================================
0001D34A                            
0001D34A                            loc_1A312:
0001D34A 4A28 0001                  		tst.b	1(a0)
0001D34E 6A00 FA36                  		bpl.w	Obj85_Delete
0001D352 6100 D4F2                  		bsr.w	BossDefeated
0001D356 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D35C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D362 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D36A 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D370 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D374 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001D37A 6000 FF52                  		bra.w	loc_1A296
0001D37E                            ; ===========================================================================
0001D37E                            
0001D37E                            loc_1A346:	; Routine 8
0001D37E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D384 2268 0034                  		movea.l	$34(a0),a1
0001D388 0CA9 0001 ACEC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D390 6700                       		beq.s	loc_1A35E
0001D392 6000 FF4A                  		bra.w	loc_1A2A6
0001D396                            ; ===========================================================================
0001D396                            
0001D396                            loc_1A35E:
0001D396 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D39C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D3A2 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D3A6 6600                       		bne.s	loc_1A376
0001D3A8 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D3AE                            
0001D3AE                            loc_1A376:
0001D3AE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D3B2 6E00                       		bgt.s	loc_1A38A
0001D3B4 5228 001A                  		addq.b	#1,obFrame(a0)
0001D3B8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D3BE 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D3C2                            
0001D3C2                            loc_1A38A:
0001D3C2 6000 FF0A                  		bra.w	loc_1A296
0001D3C6                            ; ===========================================================================
0001D3C6                            
0001D3C6                            loc_1A38E:	; Routine $A
0001D3C6 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D3CC 3038 D008                  		move.w	(v_player+obX).w,d0
0001D3D0 9068 0008                  		sub.w	obX(a0),d0
0001D3D4 6500                       		bcs.s	loc_1A3A6
0001D3D6 4A28 0001                  		tst.b	obRender(a0)
0001D3DA 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D3DE                            
0001D3DE                            loc_1A3A6:
0001D3DE 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001D3E4                            ; ===========================================================================
0001D3E4                            
0001D3E4                            loc_1A3AC:	; Routine $C
0001D3E4 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D3EA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D3F0 2268 0034                  		movea.l	$34(a0),a1
0001D3F4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3FA 6600                       		bne.s	loc_1A3D0
0001D3FC 0CA9 0001 ACEC 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D404 6700 F980                  		beq.w	Obj85_Delete
0001D408                            
0001D408                            loc_1A3D0:
0001D408 6000 FED4                  		bra.w	loc_1A2A6
0001D40C                            		
0001D40C                            BossModeMusic:
0001D40C 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D412 6600 0000                  		bne.w	NormalMode
0001D416 4EF9 0000 0000             		jmp	PinchMode
0001D41C                            
0001D41C                            NormalMode:
0001D41C 303C 00AC                  		move.w	#$AC,d0
0001D420 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D426 4E75                       		rts
0001D428                            
0001D428                            PinchMode:
0001D428 303C 0094                  		move.w	#$94,d0
0001D42C 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001D432 303C 00E2                  		move.w	#$E2,d0
0001D436 4EB9 0000 124A             		jsr	(PlaySound).l
0001D43C 4E75                       		rts		
0001D43C 4E75                       		rts		
0001D43E                            		include	"_anim\FZ Eggman in Ship.asm"
0001D43E                            ; ---------------------------------------------------------------------------
0001D43E                            ; Animation script - Eggman (FZ)
0001D43E                            ; ---------------------------------------------------------------------------
0001D43E 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D440 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D444                            		even
0001D444                            		even
0001D444                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D444                            ; ---------------------------------------------------------------------------
0001D444                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D444                            ; ---------------------------------------------------------------------------
0001D444                            Map_FZDamaged_internal:
0001D444 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D446 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D448 06                         @damage1:	dc.b 6
0001D449 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D44E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D453 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D458 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D45D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D462 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D467 06                         @damage2:	dc.b 6
0001D468 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D46D EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D472 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D477 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D47C FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D481 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D486                            		even
0001D486                            		even
0001D486                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D486                            ; ---------------------------------------------------------------------------
0001D486                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D486                            ; ---------------------------------------------------------------------------
0001D486                            Map_FZLegs_internal:
0001D486 0000                       		dc.w @extended-Map_FZLegs_internal
0001D488 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D48A 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D48C 02                         @extended:	dc.b 2
0001D48D 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D492 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D497 03                         @halfway:	dc.b 3
0001D498 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D49D 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D4A2 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D4A7 02                         @retracted:	dc.b 2
0001D4A8 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D4AD 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D4B2                            		even
0001D4B2                            		even
0001D4B2                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D4B2                            ; ---------------------------------------------------------------------------
0001D4B2                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D4B2                            ; ---------------------------------------------------------------------------
0001D4B2                            
0001D4B2                            Obj84_Delete:
0001D4B2 4EF9 0000 F886             		jmp	(DeleteObject).l
0001D4B8                            ; ===========================================================================
0001D4B8                            
0001D4B8                            EggmanCylinder:
0001D4B8 7000                       		moveq	#0,d0
0001D4BA 1028 0024                  		move.b	obRoutine(a0),d0
0001D4BE 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D4C2 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D4C6                            ; ===========================================================================
0001D4C6 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D4C8 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D4CA 0000                       		dc.w loc_1A57E-Obj84_Index
0001D4CC                            
0001D4CC 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D4D0 2550 0620                  		dc.w $2550, $620
0001D4D4 2490 04C0                  		dc.w $2490, $4C0
0001D4D8 2510 04C0                  		dc.w $2510, $4C0
0001D4DC                            ; ===========================================================================
0001D4DC                            
0001D4DC                            Obj84_Main:	; Routine
0001D4DC 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D4E0 7000                       		moveq	#0,d0
0001D4E2 1028 0028                  		move.b	obSubtype(a0),d0
0001D4E6 D040                       		add.w	d0,d0
0001D4E8 D2C0                       		adda.w	d0,a1
0001D4EA 117C 0004 0001             		move.b	#4,obRender(a0)
0001D4F0 08E8 0007 0001             		bset	#7,obRender(a0)
0001D4F6 08E8 0004 0001             		bset	#4,obRender(a0)
0001D4FC 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D502 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D50A 3159 0008                  		move.w	(a1)+,obX(a0)
0001D50E 3151 000C                  		move.w	(a1),obY(a0)
0001D512 3159 0038                  		move.w	(a1)+,$38(a0)
0001D516 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D51C 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D522 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D528 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D52E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D534 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D538                            
0001D538                            loc_1A4CE:	; Routine 2
0001D538 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D53E 6F00                       		ble.s	loc_1A4DC
0001D540 08E8 0001 0001             		bset	#1,obRender(a0)
0001D546                            
0001D546                            loc_1A4DC:
0001D546 42A8 003C                  		clr.l	$3C(a0)
0001D54A 4A28 0029                  		tst.b	$29(a0)
0001D54E 6700                       		beq.s	loc_1A4EA
0001D550 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D554                            
0001D554                            loc_1A4EA:
0001D554 2028 003C                  		move.l	$3C(a0),d0
0001D558 2228 0038                  		move.l	$38(a0),d1
0001D55C D280                       		add.l	d0,d1
0001D55E 4841                       		swap	d1
0001D560 3141 000C                  		move.w	d1,obY(a0)
0001D564 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D56A 6600                       		bne.s	loc_1A524
0001D56C 4A68 0030                  		tst.w	$30(a0)
0001D570 6A00                       		bpl.s	loc_1A524
0001D572 70F6                       		moveq	#-$A,d0
0001D574 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D57A 6F00                       		ble.s	loc_1A514
0001D57C 700E                       		moveq	#$E,d0
0001D57E                            
0001D57E                            loc_1A514:
0001D57E D240                       		add.w	d0,d1
0001D580 2268 0034                  		movea.l	$34(a0),a1
0001D584 3341 000C                  		move.w	d1,obY(a1)
0001D588 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D58E                            
0001D58E                            loc_1A524:
0001D58E 323C 002B                  		move.w	#$2B,d1
0001D592 343C 0060                  		move.w	#$60,d2
0001D596 363C 0061                  		move.w	#$61,d3
0001D59A 3828 0008                  		move.w	obX(a0),d4
0001D59E 4EB9 0001 1C54             		jsr	(SolidObject).l
0001D5A4 7000                       		moveq	#0,d0
0001D5A6 3228 003C                  		move.w	$3C(a0),d1
0001D5AA 6A00                       		bpl.s	loc_1A550
0001D5AC 4441                       		neg.w	d1
0001D5AE 5141                       		subq.w	#8,d1
0001D5B0 6500                       		bcs.s	loc_1A55C
0001D5B2 5200                       		addq.b	#1,d0
0001D5B4 E841                       		asr.w	#4,d1
0001D5B6 D041                       		add.w	d1,d0
0001D5B8 6000                       		bra.s	loc_1A55C
0001D5BA                            ; ===========================================================================
0001D5BA                            
0001D5BA                            loc_1A550:
0001D5BA 0441 0027                  		subi.w	#$27,d1
0001D5BE 6500                       		bcs.s	loc_1A55C
0001D5C0 5200                       		addq.b	#1,d0
0001D5C2 E841                       		asr.w	#4,d1
0001D5C4 D041                       		add.w	d1,d0
0001D5C6                            
0001D5C6                            loc_1A55C:
0001D5C6 1140 001A                  		move.b	d0,obFrame(a0)
0001D5CA 3038 D008                  		move.w	(v_player+obX).w,d0
0001D5CE 9068 0008                  		sub.w	obX(a0),d0
0001D5D2 6B00                       		bmi.s	loc_1A578
0001D5D4 0440 0140                  		subi.w	#$140,d0
0001D5D8 6B00                       		bmi.s	loc_1A578
0001D5DA 4A28 0001                  		tst.b	obRender(a0)
0001D5DE 6A00 FED2                  		bpl.w	Obj84_Delete
0001D5E2                            
0001D5E2                            loc_1A578:
0001D5E2 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001D5E8                            ; ===========================================================================
0001D5E8                            
0001D5E8                            loc_1A57E:	; Routine 4
0001D5E8 7000                       		moveq	#0,d0
0001D5EA 1028 0028                  		move.b	obSubtype(a0),d0
0001D5EE 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D5F2 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D5F6 6000 FF5C                  		bra.w	loc_1A4EA
0001D5FA                            ; ===========================================================================
0001D5FA 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D5FC 0000                       		dc.w loc_1A598-off_1A590
0001D5FE 0000                       		dc.w loc_1A604-off_1A590
0001D600 0000                       		dc.w loc_1A604-off_1A590
0001D602                            ; ===========================================================================
0001D602                            
0001D602                            loc_1A598:
0001D602 4A28 0029                  		tst.b	$29(a0)
0001D606 6600                       		bne.s	loc_1A5D4
0001D608 2268 0034                  		movea.l	$34(a0),a1
0001D60C 4A29 0021                  		tst.b	obColProp(a1)
0001D610 6600                       		bne.s	loc_1A5B4
0001D612 6100 D232                  		bsr.w	BossDefeated
0001D616 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D61E                            
0001D61E                            loc_1A5B4:
0001D61E 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D626 6400                       		bcc.s	locret_1A602
0001D628 42A8 003C                  		clr.l	$3C(a0)
0001D62C 2268 0034                  		movea.l	$34(a0),a1
0001D630 5369 0032                  		subq.w	#1,$32(a1)
0001D634 4269 0030                  		clr.w	$30(a1)
0001D638 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D63C 4E75                       		rts	
0001D63E                            ; ===========================================================================
0001D63E                            
0001D63E                            loc_1A5D4:
0001D63E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D644 6C00                       		bge.s	loc_1A5E4
0001D646 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D64E                            
0001D64E                            loc_1A5E4:
0001D64E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D656 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D65C 6E00                       		bgt.s	locret_1A602
0001D65E 4268 003E                  		clr.w	$3E(a0)
0001D662 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D668 4228 0029                  		clr.b	$29(a0)
0001D66C                            
0001D66C                            locret_1A602:
0001D66C 4E75                       		rts	
0001D66E                            ; ===========================================================================
0001D66E                            
0001D66E                            loc_1A604:
0001D66E 08E8 0001 0001             		bset	#1,obRender(a0)
0001D674 4A28 0029                  		tst.b	$29(a0)
0001D678 6600                       		bne.s	loc_1A646
0001D67A 2268 0034                  		movea.l	$34(a0),a1
0001D67E 4A29 0021                  		tst.b	obColProp(a1)
0001D682 6600                       		bne.s	loc_1A626
0001D684 6100 D1C0                  		bsr.w	BossDefeated
0001D688 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D690                            
0001D690                            loc_1A626:
0001D690 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D698 6400                       		bcc.s	locret_1A674
0001D69A 42A8 003C                  		clr.l	$3C(a0)
0001D69E 2268 0034                  		movea.l	$34(a0),a1
0001D6A2 5369 0032                  		subq.w	#1,$32(a1)
0001D6A6 4269 0030                  		clr.w	$30(a1)
0001D6AA 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D6AE 4E75                       		rts	
0001D6B0                            ; ===========================================================================
0001D6B0                            
0001D6B0                            loc_1A646:
0001D6B0 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D6B6 6D00                       		blt.s	loc_1A656
0001D6B8 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D6C0                            
0001D6C0                            loc_1A656:
0001D6C0 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D6C8 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D6CE 6D00                       		blt.s	locret_1A674
0001D6D0 4268 003E                  		clr.w	$3E(a0)
0001D6D4 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D6DA 4228 0029                  		clr.b	$29(a0)
0001D6DE                            
0001D6DE                            locret_1A674:
0001D6DE 4E75                       		rts	
0001D6DE 4E75                       		rts	
0001D6E0                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D6E0                            ; --------------------------------------------------------------------------------
0001D6E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D6E0                            ; --------------------------------------------------------------------------------
0001D6E0                            
0001D6E0                            SME_SCUpI:	
0001D6E0 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D6E4 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D6E8 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D6EC 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D6F0 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D6F4 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D6F8 06                         SME_SCUpI_18:	dc.b 6	
0001D6F9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6FE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D703 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D708 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D70D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D712 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D717 08                         SME_SCUpI_37:	dc.b 8	
0001D718 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D71D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D722 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D727 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D72C B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D731 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D736 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D73B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D740 0A                         SME_SCUpI_60:	dc.b $A	
0001D741 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D746 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D74B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D750 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D755 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D75A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D75F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D764 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D769 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D76E A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D773 0C                         SME_SCUpI_93:	dc.b $C	
0001D774 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D779 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D77E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D783 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D788 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D78D D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D792 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D797 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D79C F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7A1 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7A6 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7AB A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7B0 0D                         SME_SCUpI_D0:	dc.b $D	
0001D7B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7B6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7BB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7C0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7C5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7CA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7CF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7D4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7D9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7DE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7E3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7E8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7ED A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7F2 0E                         SME_SCUpI_112:	dc.b $E	
0001D7F3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7F8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7FD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D802 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D807 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D80C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D811 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D816 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D81B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D820 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D825 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D82A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D82F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D834 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D839 0E                         SME_SCUpI_159:	dc.b $E	
0001D83A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D83F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D844 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D849 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D84E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D853 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D858 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D85D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D862 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D867 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D86C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D871 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D876 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D87B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D880 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D881 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D886 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D88B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D890 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D895 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D89A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D89F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8A4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8A9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8AE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8B3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8B8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8BD 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8C2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8C7 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D8C8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8CD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8D2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8D7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8DC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8E1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8E6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8EB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8F0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8F5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8FA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8FF 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D904 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D909 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D90E 0E                         SME_SCUpI_22E:	dc.b $E	
0001D90F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D914 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D919 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D91E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D923 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D928 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D92D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D932 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D937 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D93C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D941 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D946 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D94B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D950 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D955 0E                         SME_SCUpI_275:	dc.b $E	
0001D956 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D95B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D960 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D965 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D96A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D96F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D974 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D979 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D97E F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D983 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D988 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D98D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D992 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D997 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D99C 02                         SME_SCUpI_2BC:	dc.b 2	
0001D99D F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D9A2 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D9A8 00                         		even
0001D9A8 00                         		even
0001D9A8                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Object 86 - energy balls (FZ)
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            
0001D9A8                            BossPlasma:
0001D9A8 7000                       		moveq	#0,d0
0001D9AA 1028 0024                  		move.b	obRoutine(a0),d0
0001D9AE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D9B2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D9B6                            ; ===========================================================================
0001D9B6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D9B8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D9BA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D9BC 0000                       		dc.w loc_1A962-Obj86_Index
0001D9BE 0000                       		dc.w loc_1A982-Obj86_Index
0001D9C0                            ; ===========================================================================
0001D9C0                            
0001D9C0                            Obj86_Main:	; Routine 0
0001D9C0 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D9C6 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D9CC 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D9D2 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D9DA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D9E0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D9E6 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D9EC 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D9F2 117C 0004 0001             		move.b	#4,obRender(a0)
0001D9F8 08E8 0007 0001             		bset	#7,obRender(a0)
0001D9FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA02                            
0001DA02                            Obj86_Generator:; Routine 2
0001DA02 2268 0034                  		movea.l	$34(a0),a1
0001DA06 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DA0C 6600                       		bne.s	loc_1A850
0001DA0E 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DA12 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DA18 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001DA1E                            ; ===========================================================================
0001DA1E                            
0001DA1E                            loc_1A850:
0001DA1E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DA24 4A28 0029                  		tst.b	$29(a0)
0001DA28 6700                       		beq.s	loc_1A86C
0001DA2A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DA2E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DA34 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DA3A                            
0001DA3A                            loc_1A86C:
0001DA3A 323C 0013                  		move.w	#$13,d1
0001DA3E 343C 0008                  		move.w	#8,d2
0001DA42 363C 0011                  		move.w	#$11,d3
0001DA46 3828 0008                  		move.w	obX(a0),d4
0001DA4A 4EB9 0001 1C54             		jsr	(SolidObject).l
0001DA50 3038 D008                  		move.w	(v_player+obX).w,d0
0001DA54 9068 0008                  		sub.w	obX(a0),d0
0001DA58 6B00                       		bmi.s	loc_1A89A
0001DA5A 0440 0140                  		subi.w	#$140,d0
0001DA5E 6B00                       		bmi.s	loc_1A89A
0001DA60 4A28 0001                  		tst.b	obRender(a0)
0001DA64 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DA68                            
0001DA68                            loc_1A89A:
0001DA68 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DA6C 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001DA72 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001DA78                            ; ===========================================================================
0001DA78                            
0001DA78                            Obj86_MakeBalls:; Routine 4
0001DA78 4A28 0029                  		tst.b	$29(a0)
0001DA7C 6700 0000                  		beq.w	loc_1A954
0001DA80 4228 0029                  		clr.b	$29(a0)
0001DA84 D068 0030                  		add.w	$30(a0),d0
0001DA88 0240 001E                  		andi.w	#$1E,d0
0001DA8C D4C0                       		adda.w	d0,a2
0001DA8E 5868 0030                  		addq.w	#4,$30(a0)
0001DA92 4268 0032                  		clr.w	$32(a0)
0001DA96 7403                       		moveq	#3,d2
0001DA98                            
0001DA98                            Obj86_Loop:
0001DA98 4EB9 0000 FCE8             		jsr	(FindNextFreeObj).l
0001DA9E 6600 0000                  		bne.w	loc_1A954
0001DAA2 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DAA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DAAC 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DAB2 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DAB8 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DABE 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DAC6 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DACC 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DAD2 137C 0000 0020             		move.b	#0,obColType(a1)
0001DAD8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DADE 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DAE4 137C 0004 0001             		move.b	#4,obRender(a1)
0001DAEA 08E9 0007 0001             		bset	#7,obRender(a1)
0001DAF0 2348 0034                  		move.l	a0,$34(a1)
0001DAF4 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DAFA 3228 0032                  		move.w	$32(a0),d1
0001DAFE C3FC FFB1                  		muls.w	#-$4F,d1
0001DB02 0641 2578                  		addi.w	#$2578,d1
0001DB06 0240 001F                  		andi.w	#$1F,d0
0001DB0A 0440 0010                  		subi.w	#$10,d0
0001DB0E D041                       		add.w	d1,d0
0001DB10 3340 0030                  		move.w	d0,$30(a1)
0001DB14 5268 0032                  		addq.w	#1,$32(a0)
0001DB18 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DB1E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DB22                            
0001DB22                            loc_1A954:
0001DB22 4A68 0032                  		tst.w	$32(a0)
0001DB26 6600                       		bne.s	loc_1A95E
0001DB28 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB2C                            
0001DB2C                            loc_1A95E:
0001DB2C 6000 FF0C                  		bra.w	loc_1A86C
0001DB30                            ; ===========================================================================
0001DB30                            
0001DB30                            loc_1A962:	; Routine 6
0001DB30 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DB36 4A68 0038                  		tst.w	$38(a0)
0001DB3A 6600                       		bne.s	loc_1A97E
0001DB3C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DB42 2268 0034                  		movea.l	$34(a0),a1
0001DB46 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DB4C                            
0001DB4C                            loc_1A97E:
0001DB4C 6000 FEEC                  		bra.w	loc_1A86C
0001DB50                            ; ===========================================================================
0001DB50                            
0001DB50                            loc_1A982:	; Routine 8
0001DB50 7000                       		moveq	#0,d0
0001DB52 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DB56 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DB5A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DB5E 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DB62 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001DB68 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001DB6E                            ; ===========================================================================
0001DB6E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DB70 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DB72 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DB74                            ; ===========================================================================
0001DB74                            
0001DB74                            loc_1A9A6:
0001DB74 3028 0030                  		move.w	$30(a0),d0
0001DB78 9068 0008                  		sub.w	obX(a0),d0
0001DB7C E940                       		asl.w	#4,d0
0001DB7E 3140 0010                  		move.w	d0,obVelX(a0)
0001DB82 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB8C 4E75                       		rts	
0001DB8E                            ; ===========================================================================
0001DB8E                            
0001DB8E                            loc_1A9C0:
0001DB8E 4A68 0010                  		tst.w	obVelX(a0)
0001DB92 6700                       		beq.s	loc_1A9E6
0001DB94 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001DB9A 3028 0008                  		move.w	obX(a0),d0
0001DB9E 9068 0030                  		sub.w	$30(a0),d0
0001DBA2 6400                       		bcc.s	loc_1A9E6
0001DBA4 4268 0010                  		clr.w	obVelX(a0)
0001DBA8 D168 0008                  		add.w	d0,obX(a0)
0001DBAC 2268 0034                  		movea.l	$34(a0),a1
0001DBB0 5369 0032                  		subq.w	#1,$32(a1)
0001DBB4                            
0001DBB4                            loc_1A9E6:
0001DBB4 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DBBA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DBBE 6600                       		bne.s	locret_1AA1C
0001DBC0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DBC4 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DBCA 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DBD0 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DBD6 7000                       		moveq	#0,d0
0001DBD8 3038 D008                  		move.w	(v_player+obX).w,d0
0001DBDC 9068 0008                  		sub.w	obX(a0),d0
0001DBE0 3140 0010                  		move.w	d0,obVelX(a0)
0001DBE4 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DBEA                            
0001DBEA                            locret_1AA1C:
0001DBEA 4E75                       		rts	
0001DBEC                            ; ===========================================================================
0001DBEC                            
0001DBEC                            loc_1AA1E:
0001DBEC 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001DBF2 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DBF8 6400                       		bcc.s	loc_1AA34
0001DBFA 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DBFE 6700                       		beq.s	loc_1AA34
0001DC00 4E75                       		rts	
0001DC02                            ; ===========================================================================
0001DC02                            
0001DC02                            loc_1AA34:
0001DC02 2268 0034                  		movea.l	$34(a0),a1
0001DC06 5369 0038                  		subq.w	#1,$38(a1)
0001DC0A 6000 F8A6                  		bra.w	Obj84_Delete
0001DC0A 6000 F8A6                  		bra.w	Obj84_Delete
0001DC0E                            		include	"_anim\Plasma Ball Launcher.asm"
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E                            ; Animation script - energy ball launcher (FZ)
0001DC0E                            ; ---------------------------------------------------------------------------
0001DC0E 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DC10 0000                       		dc.w @redsparking-Ani_PLaunch
0001DC12 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DC14 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DC18 00                         		even
0001DC18 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DC1E                            		even
0001DC1E 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DC24                            		even
0001DC24                            		even
0001DC24                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Sprite mappings - energy ball	launcher (FZ)
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            Map_PLaunch_internal:
0001DC24 0000                       		dc.w @red-Map_PLaunch_internal
0001DC26 0000                       		dc.w @white-Map_PLaunch_internal
0001DC28 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DC2A 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DC2C 01                         @red:		dc.b 1
0001DC2D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DC32 01                         @white:		dc.b 1
0001DC33 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DC38 01                         @sparking1:	dc.b 1
0001DC39 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DC3E 01                         @sparking2:	dc.b 1
0001DC3F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DC44                            		even
0001DC44                            		even
0001DC44                            		include	"_anim\Plasma Balls.asm"
0001DC44                            ; ---------------------------------------------------------------------------
0001DC44                            ; Animation script - energy balls (FZ)
0001DC44                            ; ---------------------------------------------------------------------------
0001DC44 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DC46 0000                       		dc.w @short-Ani_Plasma
0001DC48 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DC57 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DC66 0A05 FF                    		dc.b $A, 5, afEnd
0001DC6A 00                         		even
0001DC6A 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DC74                            		even
0001DC74                            		even
0001DC74                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DC74                            ; ---------------------------------------------------------------------------
0001DC74                            ; Sprite mappings - energy balls (FZ)
0001DC74                            ; ---------------------------------------------------------------------------
0001DC74                            Map_Plasma_internal:
0001DC74 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DC76 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DC78 0000                       		dc.w @white1-Map_Plasma_internal
0001DC7A 0000                       		dc.w @white2-Map_Plasma_internal
0001DC7C 0000                       		dc.w @white3-Map_Plasma_internal
0001DC7E 0000                       		dc.w @white4-Map_Plasma_internal
0001DC80 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DC82 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DC84 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DC86 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DC88 0000                       		dc.w @blank-Map_Plasma_internal
0001DC8A 02                         @fuzzy1:	dc.b 2
0001DC8B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DC90 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DC95 02                         @fuzzy2:	dc.b 2
0001DC96 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DC9B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DCA0 02                         @white1:	dc.b 2
0001DCA1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DCA6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DCAB 02                         @white2:	dc.b 2
0001DCAC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DCB1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DCB6 02                         @white3:	dc.b 2
0001DCB7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DCBC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DCC1 02                         @white4:	dc.b 2
0001DCC2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DCC7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DCCC 01                         @fuzzy3:	dc.b 1
0001DCCD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DCD2 01                         @fuzzy4:	dc.b 1
0001DCD3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DCD8 02                         @fuzzy5:	dc.b 2
0001DCD9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DCDE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DCE3 02                         @fuzzy6:	dc.b 2
0001DCE4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DCE9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DCEE 00                         @blank:		dc.b 0
0001DCF0 00                         		even
0001DCF0 00                         		even
0001DCF0                            
0001DCF0                            		include	"_incObj\3E Prison Capsule.asm"
0001DCF0                            ; ---------------------------------------------------------------------------
0001DCF0                            ; Object 3E - prison capsule
0001DCF0                            ; ---------------------------------------------------------------------------
0001DCF0                            
0001DCF0                            Prison:
0001DCF0 7000                       		moveq	#0,d0
0001DCF2 1028 0024                  		move.b	obRoutine(a0),d0
0001DCF6 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DCFA 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DD1A 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001DD20                            
0001DD20                            	@delete:
0001DD20 4EF9 0000 F886             		jmp	(DeleteObject).l
0001DD26                            ; ===========================================================================
0001DD26 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DD28 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DD2A 0000                       		dc.w Pri_Switched-Pri_Index
0001DD2C 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD2E 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD30 0000                       		dc.w Pri_Explosion-Pri_Index
0001DD32 0000                       		dc.w Pri_Animals-Pri_Index
0001DD34 0000                       		dc.w Pri_EndAct-Pri_Index
0001DD36                            
0001DD36 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DD36                            
0001DD36 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DD3A 040C 0501                  		dc.b 4,	$C, 5, 1
0001DD3E 0610 0403                  		dc.b 6,	$10, 4,	3
0001DD42 0810 0305                  		dc.b 8,	$10, 3,	5
0001DD46                            ; ===========================================================================
0001DD46                            
0001DD46                            Pri_Main:	; Routine 0
0001DD46 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DD4E 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DD54 117C 0004 0001             		move.b	#4,obRender(a0)
0001DD5A 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DD60 7000                       		moveq	#0,d0
0001DD62 1028 0028                  		move.b	obSubtype(a0),d0
0001DD66 E548                       		lsl.w	#2,d0
0001DD68 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DD6C 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DD70 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DD74 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DD78 3028 0018                  		move.w obPriority(a0),d0 
0001DD7C E248                       		lsr.w #1,d0 
0001DD7E 0240 0380                  		andi.w #$380,d0 
0001DD82 3140 0018                  		move.w d0,obPriority(a0)		
0001DD86 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DD8A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DD8E 6600                       		bne.s	@not02		; if not, branch
0001DD90                            
0001DD90 117C 0006 0020             		move.b	#6,obColType(a0)
0001DD96 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DD9C                            
0001DD9C                            	@not02:
0001DD9C 4E75                       		rts	
0001DD9E                            ; ===========================================================================
0001DD9E                            
0001DD9E                            Pri_BodyMain:	; Routine 2
0001DD9E 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DDA4 6700                       		beq.s	@chkopened
0001DDA6 323C 002B                  		move.w	#$2B,d1
0001DDAA 343C 0018                  		move.w	#$18,d2
0001DDAE 363C 0018                  		move.w	#$18,d3
0001DDB2 3828 0008                  		move.w	obX(a0),d4
0001DDB6 4EF9 0001 1C54             		jmp	(SolidObject).l
0001DDBC                            ; ===========================================================================
0001DDBC                            
0001DDBC                            @chkopened:
0001DDBC 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DDC0 6700                       		beq.s	@open		; if yes, branch
0001DDC2 4228 0025                  		clr.b	ob2ndRout(a0)
0001DDC6 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DDCC 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DDD2                            
0001DDD2                            	@open:
0001DDD2 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DDD8 4E75                       		rts	
0001DDDA                            ; ===========================================================================
0001DDDA                            
0001DDDA                            Pri_Switched:	; Routine 4
0001DDDA 323C 0017                  		move.w	#$17,d1
0001DDDE 343C 0008                  		move.w	#8,d2
0001DDE2 363C 0008                  		move.w	#8,d3
0001DDE6 3828 0008                  		move.w	obX(a0),d4
0001DDEA 4EB9 0001 1C54             		jsr	(SolidObject).l
0001DDF0 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DDF6 4EB9 0000 C8FA             		jsr	(AnimateSprite).l
0001DDFC 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DE02 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DE06 6700                       		beq.s	@open2		; if yes, branch
0001DE08                            
0001DE08 5068 000C                  		addq.w	#8,obY(a0)
0001DE0C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DE12 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DE18 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DE1C 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DE20 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DE26 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DE2C 4228 0025                  		clr.b	ob2ndRout(a0)
0001DE30 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DE36 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DE3C                            
0001DE3C                            	@open2:
0001DE3C 4E75                       		rts	
0001DE3E                            ; ===========================================================================
0001DE3E                            
0001DE3E                            Pri_Explosion:	; Routine 6, 8, $A
0001DE3E 7007                       		moveq	#7,d0
0001DE40 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE44 6600                       		bne.s	@noexplosion
0001DE46 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001DE4C 6600                       		bne.s	@noexplosion
0001DE4E 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DE52 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE58 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE5E 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DE64 7200                       		moveq	#0,d1
0001DE66 1200                       		move.b	d0,d1
0001DE68 E409                       		lsr.b	#2,d1
0001DE6A 0441 0020                  		subi.w	#$20,d1
0001DE6E D369 0008                  		add.w	d1,obX(a1)
0001DE72 E048                       		lsr.w	#8,d0
0001DE74 E608                       		lsr.b	#3,d0
0001DE76 D169 000C                  		add.w	d0,obY(a1)
0001DE7A                            
0001DE7A                            	@noexplosion:
0001DE7A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DE7E 6700                       		beq.s	@makeanimal
0001DE80 4E75                       		rts	
0001DE82                            ; ===========================================================================
0001DE82                            
0001DE82                            @makeanimal:
0001DE82 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DE88 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DE8E 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DE94 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DE9A 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DEA0 7C07                       		moveq	#7,d6
0001DEA2 3A3C 009A                  		move.w	#$9A,d5
0001DEA6 78E4                       		moveq	#-$1C,d4
0001DEA8                            
0001DEA8                            	@loop:
0001DEA8 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001DEAE 6600                       		bne.s	@fail
0001DEB0 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DEB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DEBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DEC0 D969 0008                  		add.w	d4,obX(a1)
0001DEC4 5E44                       		addq.w	#7,d4
0001DEC6 3345 0036                  		move.w	d5,$36(a1)
0001DECA 5145                       		subq.w	#8,d5
0001DECC 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DED0                            
0001DED0                            	@fail:
0001DED0 4E75                       		rts	
0001DED2                            ; ===========================================================================
0001DED2                            
0001DED2                            Pri_Animals:	; Routine $C
0001DED2 7007                       		moveq	#7,d0
0001DED4 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DED8 6600                       		bne.s	@noanimal
0001DEDA 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001DEE0 6600                       		bne.s	@noanimal
0001DEE2 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DEE6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DEEC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DEF2 4EB9 0000 3A0C             		jsr	(RandomNumber).l
0001DEF8 0240 001F                  		andi.w	#$1F,d0
0001DEFC 5D40                       		subq.w	#6,d0
0001DEFE 4A41                       		tst.w	d1
0001DF00 6A00                       		bpl.s	@ispositive
0001DF02 4440                       		neg.w	d0
0001DF04                            
0001DF04                            	@ispositive:
0001DF04 D169 0008                  		add.w	d0,obX(a1)
0001DF08 337C 000C 0036             		move.w	#$C,$36(a1)
0001DF0E                            
0001DF0E                            	@noanimal:
0001DF0E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DF12 6600                       		bne.s	@wait
0001DF14 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DF18 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DF1E                            
0001DF1E                            	@wait:
0001DF1E 4E75                       		rts	
0001DF20                            ; ===========================================================================
0001DF20                            
0001DF20                            Pri_EndAct:	; Routine $E
0001DF20 703E                       		moveq	#$3E,d0
0001DF22 7228                       		moveq	#id_Animals,d1
0001DF24 7440                       		moveq	#$40,d2
0001DF26 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DF2A                            
0001DF2A                            	@findanimal:
0001DF2A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DF2C 6700                       		beq.s	@found		; if yes, branch
0001DF2E D2C2                       		adda.w	d2,a1		; next object RAM
0001DF30 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DF34                            
0001DF34 4EB9 0001 0F76             		jsr	(GotThroughAct1).l
0001DF3A 4EF9 0000 F886             		jmp	(DeleteObject).l
0001DF40                            
0001DF40                            	@found:
0001DF40 4E75                       		rts	
0001DF40 4E75                       		rts	
0001DF42                            		include	"_anim\Prison Capsule.asm"
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42                            ; Animation script - prison capsule
0001DF42                            ; ---------------------------------------------------------------------------
0001DF42 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DF44 0000                       		dc.w @switchflash-Ani_Pri
0001DF46 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DF4A                            		even
0001DF4A                            		even
0001DF4A                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DF4A                            ; ---------------------------------------------------------------------------
0001DF4A                            ; Sprite mappings - prison capsule
0001DF4A                            ; ---------------------------------------------------------------------------
0001DF4A                            Map_Pri_internal:
0001DF4A 0000                       		dc.w @capsule-Map_Pri_internal
0001DF4C 0000                       		dc.w @switch1-Map_Pri_internal
0001DF4E 0000                       		dc.w @broken-Map_Pri_internal
0001DF50 0000                       		dc.w @switch2-Map_Pri_internal
0001DF52 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DF54 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DF56 0000                       		dc.w @blank-Map_Pri_internal
0001DF58 07                         @capsule:	dc.b 7
0001DF59 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DF5E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DF63 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DF68 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DF6D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DF72 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF77 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF7C 01                         @switch1:	dc.b 1
0001DF7D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DF82 06                         @broken:	dc.b 6
0001DF83 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DF88 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DF8D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DF92 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DF97 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF9C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DFA1 01                         @switch2:	dc.b 1
0001DFA2 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DFA7 02                         @unusedthing1:	dc.b 2
0001DFA8 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DFAD 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DFB2 01                         @unusedthing2:	dc.b 1
0001DFB3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DFB8 00                         @blank:		dc.b 0
0001DFBA 00                         		even
0001DFBA 00                         		even
0001DFBA                            
0001DFBA                            		include	"_incObj\sub ReactToItem.asm"
0001DFBA                            ; ---------------------------------------------------------------------------
0001DFBA                            ; Subroutine to react to obColType(a0)
0001DFBA                            ; ---------------------------------------------------------------------------
0001DFBA                            
0001DFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFBA                            
0001DFBA                            
0001DFBA                            ReactToItem:
0001DFBA 4E71                       		nop	
0001DFBC 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DFC0 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DFC4 5142                       		subq.w	#8,d2
0001DFC6 7A00                       		moveq	#0,d5
0001DFC8 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DFCC 5705                       		subq.b	#3,d5
0001DFCE 9645                       		sub.w	d5,d3
0001DFD0 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DFD6 6600                       		bne.s	@notducking	; if not, branch
0001DFD8 0643 000C                  		addi.w	#$C,d3
0001DFDC 7A0A                       		moveq	#$A,d5
0001DFDE                            
0001DFDE                            	@notducking:
0001DFDE 383C 0010                  		move.w	#$10,d4
0001DFE2 DA45                       		add.w	d5,d5
0001DFE4 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DFE8 3C3C 005F                  		move.w	#$5F,d6
0001DFEC                            
0001DFEC                            @loop:
0001DFEC 4A29 0001                  		tst.b	obRender(a1)
0001DFF0 6A00                       		bpl.s	@next
0001DFF2 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DFF6 6600                       		bne.s	@proximity	; if nonzero, branch
0001DFF8                            
0001DFF8                            	@next:
0001DFF8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DFFC 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E000                            
0001E000 7000                       		moveq	#0,d0
0001E002 4E75                       		rts	
0001E004                            ; ===========================================================================
0001E004                            @sizes:		;   width, height
0001E004 1414                       		dc.b  $14, $14		; $01
0001E006 0C14                       		dc.b   $C, $14		; $02
0001E008 140C                       		dc.b  $14,  $C		; $03
0001E00A 0410                       		dc.b	4, $10		; $04
0001E00C 0C12                       		dc.b   $C, $12		; $05
0001E00E 1010                       		dc.b  $10, $10		; $06
0001E010 0606                       		dc.b	6,   6		; $07
0001E012 180C                       		dc.b  $18,  $C		; $08
0001E014 0C10                       		dc.b   $C, $10		; $09
0001E016 100C                       		dc.b  $10,  $C		; $0A
0001E018 0808                       		dc.b	8,   8		; $0B
0001E01A 1410                       		dc.b  $14, $10		; $0C
0001E01C 1408                       		dc.b  $14,   8		; $0D
0001E01E 0E0E                       		dc.b   $E,  $E		; $0E
0001E020 1818                       		dc.b  $18, $18		; $0F
0001E022 2810                       		dc.b  $28, $10		; $10
0001E024 1018                       		dc.b  $10, $18		; $11
0001E026 0810                       		dc.b	8, $10		; $12
0001E028 2070                       		dc.b  $20, $70		; $13
0001E02A 4020                       		dc.b  $40, $20		; $14
0001E02C 8020                       		dc.b  $80, $20		; $15
0001E02E 2020                       		dc.b  $20, $20		; $16
0001E030 0808                       		dc.b	8,   8		; $17
0001E032 0404                       		dc.b	4,   4		; $18
0001E034 2008                       		dc.b  $20,   8		; $19
0001E036 0C0C                       		dc.b   $C,  $C		; $1A
0001E038 0804                       		dc.b	8,   4		; $1B
0001E03A 1804                       		dc.b  $18,   4		; $1C
0001E03C 2804                       		dc.b  $28,   4		; $1D
0001E03E 0408                       		dc.b	4,   8		; $1E
0001E040 0418                       		dc.b	4, $18		; $1F
0001E042 0428                       		dc.b	4, $28		; $20
0001E044 0420                       		dc.b	4, $20		; $21
0001E046 1818                       		dc.b  $18, $18		; $22
0001E048 0C18                       		dc.b   $C, $18		; $23
0001E04A 4808                       		dc.b  $48,   8		; $24
0001E04C                            ; ===========================================================================
0001E04C                            
0001E04C                            @proximity:
0001E04C 0240 003F                  		andi.w	#$3F,d0
0001E050 D040                       		add.w	d0,d0
0001E052 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E056 7200                       		moveq	#0,d1
0001E058 121A                       		move.b	(a2)+,d1
0001E05A 3029 0008                  		move.w	obX(a1),d0
0001E05E 9041                       		sub.w	d1,d0
0001E060 9042                       		sub.w	d2,d0
0001E062 6400                       		bcc.s	@outsidex	; branch if not touching
0001E064 D241                       		add.w	d1,d1
0001E066 D041                       		add.w	d1,d0
0001E068 6500                       		bcs.s	@withinx	; branch if touching
0001E06A 6000 FF8C                  		bra.w	@next
0001E06E                            ; ===========================================================================
0001E06E                            
0001E06E                            @outsidex:
0001E06E 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E072 B044                       		cmp.w	d4,d0
0001E074 6200 FF82                  		bhi.w	@next
0001E078                            
0001E078                            @withinx:
0001E078 7200                       		moveq	#0,d1
0001E07A 121A                       		move.b	(a2)+,d1
0001E07C 3029 000C                  		move.w	obY(a1),d0
0001E080 9041                       		sub.w	d1,d0
0001E082 9043                       		sub.w	d3,d0
0001E084 6400                       		bcc.s	@outsidey	; branch if not touching
0001E086 D241                       		add.w	d1,d1
0001E088 D240                       		add.w	d0,d1
0001E08A 6500                       		bcs.s	@withiny	; branch if touching
0001E08C 6000 FF6A                  		bra.w	@next
0001E090                            
0001E090                            ; ===========================================================================
0001E090                            
0001E090                            @outsidey:
0001E090 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E094 B045                       		cmp.w	d5,d0
0001E096 6200 FF60                  		bhi.w	@next
0001E09A                            
0001E09A                            @withiny:
0001E09A                            	@chktype:
0001E09A 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E0A0 6600 0000                          	bne	NotGHZReact  ;TIS
0001E0A4 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E0A8 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E0AC 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E0B0 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E0B4 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E0B8 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E0BC 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E0C0                            NotGHZReact:                      ;TIS
0001E0C0 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E0C4 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E0C8 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E0CC 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E0D0 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E0D4 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E0D6 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E0DA                            
0001E0DA                            ; obColType is $40-$7F (powerups)
0001E0DA                            
0001E0DA 1029 0020                  		move.b	obColType(a1),d0
0001E0DE 0200 003F                  		andi.b	#$3F,d0
0001E0E2 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E0E6 6700                       		beq.s	React_Monitor	; if yes, branch
0001E0E8 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E0EE 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E0F2 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E0F6                            
0001E0F6                            	@invincible:
0001E0F6 4E75                       		rts	
0001E0F8                            ; ===========================================================================
0001E0F8                            
0001E0F8                            React_Monitor:
0001E0F8 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E0FC 6A00                       		bpl.s	@movingdown	; if not, branch
0001E0FE                            
0001E0FE 3028 000C                  		move.w	obY(a0),d0
0001E102 0440 0010                  		subi.w	#$10,d0
0001E106 B069 000C                  		cmp.w	obY(a1),d0
0001E10A 6500                       		bcs.s	@donothing
0001E10C 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E110 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E116 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E11A 6600                       		bne.s	@donothing
0001E11C 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E120 4E75                       		rts	
0001E122                            ; ===========================================================================
0001E122                            
0001E122                            @movingdown:
0001E122 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E128 6600                       		bne.s	@donothing
0001E12A 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E12E 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E132                            
0001E132                            	@donothing:
0001E132 4E75                       		rts	
0001E134                            ; ===========================================================================
0001E134                            
0001E134                            React_Enemy:
0001E134 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E138 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E13A 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E140 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E144 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E14A 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E14E                            
0001E14E                            	@donthurtsonic:
0001E14E 4A29 0021                  		tst.b	obColProp(a1)
0001E152 6700                       		beq.s	breakenemy
0001E154                            
0001E154 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E158 4468 0012                  		neg.w	obVelY(a0)
0001E15C E0E8 0010                  		asr	obVelX(a0)
0001E160 E0E8 0012                  		asr	obVelY(a0)
0001E164 137C 0000 0020             		move.b	#0,obColType(a1)
0001E16A 5329 0021                  		subq.b	#1,obColProp(a1)
0001E16E 6600                       		bne.s	@flagnotclear
0001E170 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E176                            
0001E176                            	@flagnotclear:
0001E176 4E75                       		rts	
0001E178                            ; ===========================================================================
0001E178                            
0001E178                            breakenemy:
0001E178 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E17E 7000                       		moveq	#0,d0
0001E180 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E184 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E188 0C40 0006                  		cmpi.w	#6,d0
0001E18C 6500                       		bcs.s	@bonusokay
0001E18E 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E190                            
0001E190                            	@bonusokay:
0001E190 3340 003E                  		move.w	d0,$3E(a1)
0001E194 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E198 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E19E 6500                       		bcs.s	@lessthan16	; if not, branch
0001E1A0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E1A4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E1AA                            
0001E1AA                            	@lessthan16:
0001E1AA 6100 0000                  		bsr.w	AddPoints
0001E1AE 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E1B2 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E1B8 4A68 0012                  		tst.w	obVelY(a0)
0001E1BC 6B00                       		bmi.s	@bouncedown
0001E1BE 3028 000C                  		move.w	obY(a0),d0
0001E1C2 B069 000C                  		cmp.w	obY(a1),d0
0001E1C6 6400                       		bcc.s	@bounceup
0001E1C8 4468 0012                  		neg.w	obVelY(a0)
0001E1CC 4E75                       		rts	
0001E1CE                            ; ===========================================================================
0001E1CE                            
0001E1CE                            	@bouncedown:
0001E1CE 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E1D4 4E75                       		rts	
0001E1D6                            
0001E1D6                            	@bounceup:
0001E1D6 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E1DC 4E75                       		rts	
0001E1DE                            
0001E1DE 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E1E6                            
0001E1E6                            ; ===========================================================================
0001E1E6                            
0001E1E6                            React_Caterkiller:
0001E1E6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E1EC                            
0001E1EC                            React_ChkHurt:
0001E1EC 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E1F0 6700                       		beq.s	notinvincible	; if not, branch
0001E1F2                            
0001E1F2                            	isflashing:
0001E1F2 70FF                       		moveq	#-1,d0
0001E1F4 4E75                       		rts	
0001E1F6                            ; ===========================================================================
0001E1F6                            
0001E1F6                            	notinvincible:
0001E1F6 4E71                       		nop	
0001E1F8 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E1FC 66F4                       		bne.s	isflashing	; if yes, branch
0001E1FE 2449                       		movea.l	a1,a2
0001E200                            
0001E200                            ; End of function ReactToItem
0001E200                            ; continue straight to HurtSonic
0001E200                            
0001E200                            ; ---------------------------------------------------------------------------
0001E200                            ; Hurting Sonic	subroutine
0001E200                            ; ---------------------------------------------------------------------------
0001E200                            
0001E200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E200                            
0001E200                            
0001E200                            HurtSonic:
0001E200 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E204 6600                       		bne.s	@hasshield	; if yes, branch
0001E206 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E20A 6600                       		bne.s	@hasshield	; if yes, branch
0001E20C 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E210 6600                       		bne.s	@hasshield	; if yes, branch
0001E212 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a gold shield?
0001E216 6600                       		bne.s	@hasshield	; if yes, branch
0001E218 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E21C 6700 0000                  		beq.w	@norings	; if not, branch
0001E220                            
0001E220 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
0001E226 6600                       		bne.s	@hasshield
0001E228 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E22C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E232 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E238                            
0001E238                            	@hasshield:
0001E238 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E23E 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E240 0C38 0001 F5C9             		cmpi.b	#1,(v_gshield).w     ; does sonic have a Gold Shield?
0001E246 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E248 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E24C 6700 FFA4                  		beq.w	isflashing
0001E250 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E254 6700 FF9C                  		beq.w	isflashing
0001E258                            
0001E258                            	@hasrshield:
0001E258 0C38 0001 F5C8             		cmpi.b	#1,(v_rshield).w     ; does sonic have a Red Shield?
0001E25E 6600                       		bne.s	@hasspshield          ; if no, check for gray shield
0001E260 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E264 6700 FF8C                  		beq.w 	isflashing
0001E268 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E26C 6700 FF84                  		beq.w 	isflashing
0001E270 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E274 6700 FF7C                  		beq.w 	isflashing
0001E278 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E27C 6700 FF74                  		beq.w 	isflashing
0001E280 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E284 6700 FF6C                  		beq.w 	isflashing
0001E288 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E28C 6700 FF64                  		beq.w 	isflashing
0001E290 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E294 6700 FF5C                  		beq.w 	isflashing
0001E298 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E29C 6700 FF54                  		beq.w 	isflashing
0001E2A0                            		
0001E2A0                            	@hasspshield:
0001E2A0 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E2A6 6600                       		bne.s	@hurtcont             ; if yes, make him invulnerable to metal objects
0001E2A8 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E2AC 6700 FF44                  		beq.w 	isflashing
0001E2B0 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E2B4 6700 FF3C                  		beq.w 	isflashing
0001E2B8 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E2BC 6700 FF34                  		beq.w 	isflashing
0001E2C0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E2C4 6700 FF2C                  		beq.w 	isflashing
0001E2C8 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E2CC 6700 FF24                  		beq.w 	isflashing
0001E2D0 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E2D4 6700 FF1C                  		beq.w 	isflashing
0001E2D8 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E2DC 6700 FF14                  		beq.w 	isflashing
0001E2E0 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E2E4 6700 FF0C                  		beq.w 	isflashing
0001E2E8 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E2EC 6700 FF04                  		beq.w 	isflashing
0001E2F0 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E2F4 6700 FE82                  		beq.w 	breakenemy
0001E2F8 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E2FC 6700 FE7A                  		beq.w 	breakenemy
0001E300 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E304 6700 FE72                  		beq.w 	breakenemy
0001E308 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E30C 6700 FE6A                  		beq.w 	breakenemy
0001E310 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E314 6700 FE62                  		beq.w 	breakenemy
0001E318                            
0001E318                            
0001E318                            	@hurtcont:
0001E318 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E31E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w	; remove red shield
0001E324 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove gold shield
0001E32A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove gold shield
0001E330 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E336 4EB9 0001 62A2             		jsr		Sonic_ResetOnFloor
0001E33C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E342 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E348 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E34E 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E354 6700                       		beq.s	@isdry		; if not, branch
0001E356                            
0001E356 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E35C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E362                            
0001E362                            	@isdry:
0001E362 3028 0008                  		move.w	obX(a0),d0
0001E366 B06A 0008                  		cmp.w	obX(a2),d0
0001E36A 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E36C 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E370                            
0001E370                            	@isleft:
0001E370 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E376 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E37C 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E382 317C 0120 0030             		move.w	#$120,$30(a0)
0001E388 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E38C 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E38E 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E392 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E394 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E39A 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E3A0 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E3A6 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E3AA 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E3AE 6600                       		bne.s	@sound		; if not, branch
0001E3B0 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E3B4 6600                       		bne.s	@sound		; if not, branch
0001E3B6 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E3BA                            
0001E3BA                            	@sound:
0001E3BA 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E3C0 70FF                       		moveq	#-1,d0
0001E3C2 4E75                       		rts	
0001E3C4                            	@hurtelec:
0001E3C4 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E3CA 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E3D0 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E3D4 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E3D8 66E0                       		bne.s	@sound		; if not, branch
0001E3DA 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E3DE 66DA                       		bne.s	@sound		; if not, branch
0001E3E0 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E3E4                            ; ===========================================================================
0001E3E4                            
0001E3E4                            @norings:
0001E3E4 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E3E8 6600 FE4E                  		bne.w	@hasshield	; if yes, branch
0001E3EC                            
0001E3EC                            ; ---------------------------------------------------------------------------
0001E3EC                            ; Subroutine to	kill Sonic
0001E3EC                            ; ---------------------------------------------------------------------------
0001E3EC                            
0001E3EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3EC                            
0001E3EC                            
0001E3EC                            KillSonic:
0001E3EC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E3F0 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E3F4 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E3FA 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E400 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E406 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E40C 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E412 4EB9 0001 62A2             		jsr		Sonic_ResetOnFloor
0001E418 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E41E 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E424 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E42A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E430 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E436 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E43A 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E43C 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E440 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E442 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E448 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E44E 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E452 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E456 6600                       		bne.s	@sound
0001E458 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E45C                            
0001E45C                            	@sound:
0001E45C 4EB9 0000 1250             		jsr	(PlaySound_Special).l
0001E462                            
0001E462                            	@dontdie:
0001E462 70FF                       		moveq	#-1,d0
0001E464 4E75                       		rts	
0001E466                            ; End of function KillSonic
0001E466                            Kill_Lava:	
0001E466                            	;bset	#7,obGfx(a0)
0001E466 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E46C 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E470 4EB9 0000 1250                 jsr		(PlaySound_Special).l
0001E476                            
0001E476                            
0001E476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E476                            
0001E476                            
0001E476                            React_Special:
0001E476 1229 0020                  		move.b	obColType(a1),d1
0001E47A 0201 003F                  		andi.b	#$3F,d1
0001E47E 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E482 6700                       		beq.s	@caterkiller	; if yes, branch
0001E484 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E488 6700                       		beq.s	@yadrin		; if yes, branch
0001E48A 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E48E 6700                       		beq.s	@D7orE1		; if yes, branch
0001E490 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E494 6700                       		beq.s	@D7orE1		; if yes, branch
0001E496 4E75                       		rts	
0001E498                            ; ===========================================================================
0001E498                            
0001E498                            @caterkiller:
0001E498 6000 FD4C                  		bra.w	React_Caterkiller
0001E49C                            ; ===========================================================================
0001E49C                            
0001E49C                            @yadrin:
0001E49C 9A40                       		sub.w	d0,d5
0001E49E 0C45 0008                  		cmpi.w	#8,d5
0001E4A2 6400                       		bcc.s	@normalenemy
0001E4A4 3029 0008                  		move.w	obX(a1),d0
0001E4A8 5940                       		subq.w	#4,d0
0001E4AA 0829 0000 0022             		btst	#0,obStatus(a1)
0001E4B0 6700                       		beq.s	@noflip
0001E4B2 0440 0010                  		subi.w	#$10,d0
0001E4B6                            
0001E4B6                            	@noflip:
0001E4B6 9042                       		sub.w	d2,d0
0001E4B8 6400                       		bcc.s	@loc_1B13C
0001E4BA 0640 0018                  		addi.w	#$18,d0
0001E4BE 6500                       		bcs.s	@loc_1B140
0001E4C0 6000                       		bra.s	@normalenemy
0001E4C2                            ; ===========================================================================
0001E4C2                            
0001E4C2                            	@loc_1B13C:
0001E4C2 B044                       		cmp.w	d4,d0
0001E4C4 6200                       		bhi.s	@normalenemy
0001E4C6                            
0001E4C6                            	@loc_1B140:
0001E4C6 6000 FD24                  		bra.w	React_ChkHurt
0001E4CA                            ; ===========================================================================
0001E4CA                            
0001E4CA                            	@normalenemy:
0001E4CA 6000 FC68                  		bra.w	React_Enemy
0001E4CE                            ; ===========================================================================
0001E4CE                            
0001E4CE                            @D7orE1:
0001E4CE 5229 0021                  		addq.b	#1,obColProp(a1)
0001E4D2 4E75                       		rts	
0001E4D4                            ; End of function React_Special
0001E4D4                            
0001E4D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4D4                            
0001E4D4                            React_ChkWaterTag:
0001E4D4 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E4DA 6600 0000                  		bne	NotWaterTag
0001E4DE 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E4E4                            	NotWaterTag:
0001E4E4 4E75                       		rts
0001E4E6                            
0001E4E6                            React_WaterTag:
0001E4E6 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E4EC 6700 0000                  		beq	SkipWaterTag
0001E4F0 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E4F6                            	SkipWaterTag:
0001E4F6 4E75                       		rts
0001E4F6 4E75                       		rts
0001E4F8                            
0001E4F8                            ; ---------------------------------------------------------------------------
0001E4F8                            ; Subroutine to	show the special stage layout
0001E4F8                            ; ---------------------------------------------------------------------------
0001E4F8                            
0001E4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4F8                            
0001E4F8                            
0001E4F8                            SS_ShowLayout:
0001E4F8 6100 0000                  		bsr.w	SS_AniWallsRings
0001E4FC 6100 0000                  		bsr.w	SS_AniItems
0001E500 3F05                       		move.w	d5,-(sp)
0001E502 43F8 8000                  		lea	($FFFF8000).w,a1
0001E506 1038 F780                  		move.b	(v_ssangle).w,d0
0001E50A 0200 00FC                  		andi.b	#$FC,d0
0001E50E 4EB9 0000 3A32             		jsr	(CalcSine).l
0001E514 3800                       		move.w	d0,d4
0001E516 3A01                       		move.w	d1,d5
0001E518 C9FC 0018                  		muls.w	#$18,d4
0001E51C CBFC 0018                  		muls.w	#$18,d5
0001E520 7400                       		moveq	#0,d2
0001E522 3438 F700                  		move.w	(v_screenposx).w,d2
0001E526 84FC 0018                  		divu.w	#$18,d2
0001E52A 4842                       		swap	d2
0001E52C 4442                       		neg.w	d2
0001E52E 0642 FF4C                  		addi.w	#-$B4,d2
0001E532 7600                       		moveq	#0,d3
0001E534 3638 F704                  		move.w	(v_screenposy).w,d3
0001E538 86FC 0018                  		divu.w	#$18,d3
0001E53C 4843                       		swap	d3
0001E53E 4443                       		neg.w	d3
0001E540 0643 FF4C                  		addi.w	#-$B4,d3
0001E544 3E3C 000F                  		move.w	#$F,d7
0001E548                            
0001E548                            loc_1B19E:
0001E548 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E54C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E550 4440                       		neg.w	d0
0001E552 C3C2                       		muls.w	d2,d1
0001E554 C1C3                       		muls.w	d3,d0
0001E556 2C00                       		move.l	d0,d6
0001E558 DC81                       		add.l	d1,d6
0001E55A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E55E C1C2                       		muls.w	d2,d0
0001E560 C3C3                       		muls.w	d3,d1
0001E562 D280                       		add.l	d0,d1
0001E564 2406                       		move.l	d6,d2
0001E566 3C3C 000F                  		move.w	#$F,d6
0001E56A                            
0001E56A                            loc_1B1C0:
0001E56A 2002                       		move.l	d2,d0
0001E56C E080                       		asr.l	#8,d0
0001E56E 32C0                       		move.w	d0,(a1)+
0001E570 2001                       		move.l	d1,d0
0001E572 E080                       		asr.l	#8,d0
0001E574 32C0                       		move.w	d0,(a1)+
0001E576 D485                       		add.l	d5,d2
0001E578 D284                       		add.l	d4,d1
0001E57A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E57E                            
0001E57E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E582 0643 0018                  		addi.w	#$18,d3
0001E586 51CF FFC0                  		dbf	d7,loc_1B19E
0001E58A                            
0001E58A 3A1F                       		move.w	(sp)+,d5
0001E58C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E592 7000                       		moveq	#0,d0
0001E594 3038 F704                  		move.w	(v_screenposy).w,d0
0001E598 80FC 0018                  		divu.w	#$18,d0
0001E59C C0FC 0080                  		mulu.w	#$80,d0
0001E5A0 D1C0                       		adda.l	d0,a0
0001E5A2 7000                       		moveq	#0,d0
0001E5A4 3038 F700                  		move.w	(v_screenposx).w,d0
0001E5A8 80FC 0018                  		divu.w	#$18,d0
0001E5AC D0C0                       		adda.w	d0,a0
0001E5AE 49F8 8000                  		lea	($FFFF8000).w,a4
0001E5B2 3E3C 000F                  		move.w	#$F,d7
0001E5B6                            
0001E5B6                            loc_1B20C:
0001E5B6 3C3C 000F                  		move.w	#$F,d6
0001E5BA                            
0001E5BA                            loc_1B210:
0001E5BA 7000                       		moveq	#0,d0
0001E5BC 1018                       		move.b	(a0)+,d0
0001E5BE 6700                       		beq.s	loc_1B268
0001E5C0 0C00 004E                  		cmpi.b	#$4E,d0
0001E5C4 6200                       		bhi.s	loc_1B268
0001E5C6 3614                       		move.w	(a4),d3
0001E5C8 0643 0120                  		addi.w	#$120,d3
0001E5CC 0C43 0070                  		cmpi.w	#$70,d3
0001E5D0 6500                       		blo.s	loc_1B268
0001E5D2 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E5D6 6400                       		bhs.s	loc_1B268
0001E5D8 342C 0002                  		move.w	2(a4),d2
0001E5DC 0642 00F0                  		addi.w	#$F0,d2
0001E5E0 0C42 0070                  		cmpi.w	#$70,d2
0001E5E4 6500                       		blo.s	loc_1B268
0001E5E6 0C42 0170                  		cmpi.w	#$170,d2
0001E5EA 6400                       		bhs.s	loc_1B268
0001E5EC 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E5F2 E748                       		lsl.w	#3,d0
0001E5F4 4BF5 0000                  		lea	(a5,d0.w),a5
0001E5F8 225D                       		movea.l	(a5)+,a1
0001E5FA 321D                       		move.w	(a5)+,d1
0001E5FC D241                       		add.w	d1,d1
0001E5FE D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E602 365D                       		movea.w	(a5)+,a3
0001E604 7200                       		moveq	#0,d1
0001E606 1219                       		move.b	(a1)+,d1
0001E608 5301                       		subq.b	#1,d1
0001E60A 6B00                       		bmi.s	loc_1B268
0001E60C 4EB9 0000 F9AA             		jsr	(BuildSpr_Normal).l
0001E612                            
0001E612                            loc_1B268:
0001E612 584C                       		addq.w	#4,a4
0001E614 51CE FFA4                  		dbf	d6,loc_1B210
0001E618                            
0001E618 41E8 0070                  		lea	$70(a0),a0
0001E61C 51CF FF98                  		dbf	d7,loc_1B20C
0001E620                            
0001E620 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E624 0C05 0050                  		cmpi.b	#$50,d5
0001E628 6700                       		beq.s	loc_1B288
0001E62A 24BC 0000 0000             		move.l	#0,(a2)
0001E630 4E75                       		rts	
0001E632                            ; ===========================================================================
0001E632                            
0001E632                            loc_1B288:
0001E632 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E638 4E75                       		rts	
0001E63A                            ; End of function SS_ShowLayout
0001E63A                            
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            ; Subroutine to	animate	walls and rings	in the special stage
0001E63A                            ; ---------------------------------------------------------------------------
0001E63A                            
0001E63A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E63A                            
0001E63A                            
0001E63A                            SS_AniWallsRings:
0001E63A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E640 7000                       		moveq	#0,d0
0001E642 1038 F780                  		move.b	(v_ssangle).w,d0
0001E646 E408                       		lsr.b	#2,d0
0001E648 0240 000F                  		andi.w	#$F,d0
0001E64C 7223                       		moveq	#$23,d1
0001E64E                            
0001E64E                            loc_1B2A4:
0001E64E 3280                       		move.w	d0,(a1)
0001E650 5049                       		addq.w	#8,a1
0001E652 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E656                            
0001E656 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E65C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E660 6A00                       		bpl.s	loc_1B2C8
0001E662 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E668 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E66C 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E672                            
0001E672                            loc_1B2C8:
0001E672 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E678 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E67C 6A00                       		bpl.s	loc_1B2E4
0001E67E 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E684 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E688 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E68E                            
0001E68E                            loc_1B2E4:
0001E68E 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E692 1340 0138                  		move.b	d0,$138(a1)
0001E696 1340 0160                  		move.b	d0,$160(a1)
0001E69A 1340 0148                  		move.b	d0,$148(a1)
0001E69E 1340 0150                  		move.b	d0,$150(a1)
0001E6A2 1340 01D8                  		move.b	d0,$1D8(a1)
0001E6A6 1340 01E0                  		move.b	d0,$1E0(a1)
0001E6AA 1340 01E8                  		move.b	d0,$1E8(a1)
0001E6AE 1340 01F0                  		move.b	d0,$1F0(a1)
0001E6B2 1340 01F8                  		move.b	d0,$1F8(a1)
0001E6B6 1340 0200                  		move.b	d0,$200(a1)
0001E6BA 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E6BE 6A00                       		bpl.s	loc_1B326
0001E6C0 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E6C6 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E6CA 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E6D0                            
0001E6D0                            loc_1B326:
0001E6D0 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E6D4 1340 0168                  		move.b	d0,$168(a1)
0001E6D8 1340 0170                  		move.b	d0,$170(a1)
0001E6DC 1340 0178                  		move.b	d0,$178(a1)
0001E6E0 1340 0180                  		move.b	d0,$180(a1)
0001E6E4 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E6E8 6A00                       		bpl.s	loc_1B350
0001E6EA 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E6F0 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E6F4 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E6FA                            
0001E6FA                            loc_1B350:
0001E6FA 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E700 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E706 7000                       		moveq	#0,d0
0001E708 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E70C D040                       		add.w	d0,d0
0001E70E 41F0 0000                  		lea	(a0,d0.w),a0
0001E712 3290                       		move.w	(a0),(a1)
0001E714 3368 0002 0008             		move.w	2(a0),8(a1)
0001E71A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E720 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E726 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E72C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E732 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E738 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E73E D0FC 0020                  		adda.w	#$20,a0
0001E742 D2FC 0048                  		adda.w	#$48,a1
0001E746 3290                       		move.w	(a0),(a1)
0001E748 3368 0002 0008             		move.w	2(a0),8(a1)
0001E74E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E754 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E75A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E760 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E766 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E76C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E772 D0FC 0020                  		adda.w	#$20,a0
0001E776 D2FC 0048                  		adda.w	#$48,a1
0001E77A 3290                       		move.w	(a0),(a1)
0001E77C 3368 0002 0008             		move.w	2(a0),8(a1)
0001E782 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E788 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E78E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E794 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E79A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E7A0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7A6 D0FC 0020                  		adda.w	#$20,a0
0001E7AA D2FC 0048                  		adda.w	#$48,a1
0001E7AE 3290                       		move.w	(a0),(a1)
0001E7B0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E7B6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E7BC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E7C2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E7C8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E7CE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E7D4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E7DA D0FC 0020                  		adda.w	#$20,a0
0001E7DE D2FC 0048                  		adda.w	#$48,a1
0001E7E2 4E75                       		rts	
0001E7E4                            ; End of function SS_AniWallsRings
0001E7E4                            
0001E7E4                            ; ===========================================================================
0001E7E4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E7F4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E804 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E814 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E824 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E834 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E844 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E854 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            ; Subroutine to	remove items when you collect them in the special stage
0001E864                            ; ---------------------------------------------------------------------------
0001E864                            
0001E864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E864                            
0001E864                            
0001E864                            SS_RemoveCollectedItem:
0001E864 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E86A 303C 001F                  		move.w	#$1F,d0
0001E86E                            
0001E86E                            loc_1B4C4:
0001E86E 4A12                       		tst.b	(a2)
0001E870 6700                       		beq.s	locret_1B4CE
0001E872 504A                       		addq.w	#8,a2
0001E874 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E878                            
0001E878                            locret_1B4CE:
0001E878 4E75                       		rts	
0001E87A                            ; End of function SS_RemoveCollectedItem
0001E87A                            
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            ; Subroutine to	animate	special	stage items when you touch them
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            
0001E87A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E87A                            
0001E87A                            
0001E87A                            SS_AniItems:
0001E87A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E880 3E3C 001F                  		move.w	#$1F,d7
0001E884                            
0001E884                            loc_1B4DA:
0001E884 7000                       		moveq	#0,d0
0001E886 1010                       		move.b	(a0),d0
0001E888 6700                       		beq.s	loc_1B4E8
0001E88A E548                       		lsl.w	#2,d0
0001E88C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E890 4E91                       		jsr	(a1)
0001E892                            
0001E892                            loc_1B4E8:
0001E892 5048                       		addq.w	#8,a0
0001E894                            
0001E894                            loc_1B4EA:
0001E894 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E898                            
0001E898 4E75                       		rts	
0001E89A                            ; End of function SS_AniItems
0001E89A                            
0001E89A                            ; ===========================================================================
0001E89A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E89E 0000 0000                  		dc.l SS_AniBumper
0001E8A2 0000 0000                  		dc.l SS_Ani1Up
0001E8A6 0000 0000                  		dc.l SS_AniReverse
0001E8AA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E8AE 0000 0000                  		dc.l SS_AniGlassBlock
0001E8B2                            ; ===========================================================================
0001E8B2                            
0001E8B2                            SS_AniRingSparks:
0001E8B2 5328 0002                  		subq.b	#1,2(a0)
0001E8B6 6A00                       		bpl.s	locret_1B530
0001E8B8 117C 0005 0002             		move.b	#5,2(a0)
0001E8BE 7000                       		moveq	#0,d0
0001E8C0 1028 0003                  		move.b	3(a0),d0
0001E8C4 5228 0003                  		addq.b	#1,3(a0)
0001E8C8 2268 0004                  		movea.l	4(a0),a1
0001E8CC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E8D0 1280                       		move.b	d0,(a1)
0001E8D2 6600                       		bne.s	locret_1B530
0001E8D4 4290                       		clr.l	(a0)
0001E8D6 42A8 0004                  		clr.l	4(a0)
0001E8DA                            
0001E8DA                            locret_1B530:
0001E8DA 4E75                       		rts	
0001E8DC                            ; ===========================================================================
0001E8DC 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E8E2                            ; ===========================================================================
0001E8E2                            
0001E8E2                            SS_AniBumper:
0001E8E2 5328 0002                  		subq.b	#1,2(a0)
0001E8E6 6A00                       		bpl.s	locret_1B566
0001E8E8 117C 0007 0002             		move.b	#7,2(a0)
0001E8EE 7000                       		moveq	#0,d0
0001E8F0 1028 0003                  		move.b	3(a0),d0
0001E8F4 5228 0003                  		addq.b	#1,3(a0)
0001E8F8 2268 0004                  		movea.l	4(a0),a1
0001E8FC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E900 6600                       		bne.s	loc_1B564
0001E902 4290                       		clr.l	(a0)
0001E904 42A8 0004                  		clr.l	4(a0)
0001E908 12BC 0025                  		move.b	#$25,(a1)
0001E90C 4E75                       		rts	
0001E90E                            ; ===========================================================================
0001E90E                            
0001E90E                            loc_1B564:
0001E90E 1280                       		move.b	d0,(a1)
0001E910                            
0001E910                            locret_1B566:
0001E910 4E75                       		rts	
0001E912                            ; ===========================================================================
0001E912 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E918                            ; ===========================================================================
0001E918                            
0001E918                            SS_Ani1Up:
0001E918 5328 0002                  		subq.b	#1,2(a0)
0001E91C 6A00                       		bpl.s	locret_1B596
0001E91E 117C 0005 0002             		move.b	#5,2(a0)
0001E924 7000                       		moveq	#0,d0
0001E926 1028 0003                  		move.b	3(a0),d0
0001E92A 5228 0003                  		addq.b	#1,3(a0)
0001E92E 2268 0004                  		movea.l	4(a0),a1
0001E932 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E936 1280                       		move.b	d0,(a1)
0001E938 6600                       		bne.s	locret_1B596
0001E93A 4290                       		clr.l	(a0)
0001E93C 42A8 0004                  		clr.l	4(a0)
0001E940                            
0001E940                            locret_1B596:
0001E940 4E75                       		rts	
0001E942                            ; ===========================================================================
0001E942 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E948                            ; ===========================================================================
0001E948                            
0001E948                            SS_AniReverse:
0001E948 5328 0002                  		subq.b	#1,2(a0)
0001E94C 6A00                       		bpl.s	locret_1B5CC
0001E94E 117C 0007 0002             		move.b	#7,2(a0)
0001E954 7000                       		moveq	#0,d0
0001E956 1028 0003                  		move.b	3(a0),d0
0001E95A 5228 0003                  		addq.b	#1,3(a0)
0001E95E 2268 0004                  		movea.l	4(a0),a1
0001E962 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E966 6600                       		bne.s	loc_1B5CA
0001E968 4290                       		clr.l	(a0)
0001E96A 42A8 0004                  		clr.l	4(a0)
0001E96E 12BC 002B                  		move.b	#$2B,(a1)
0001E972 4E75                       		rts	
0001E974                            ; ===========================================================================
0001E974                            
0001E974                            loc_1B5CA:
0001E974 1280                       		move.b	d0,(a1)
0001E976                            
0001E976                            locret_1B5CC:
0001E976 4E75                       		rts	
0001E978                            ; ===========================================================================
0001E978 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E97E                            ; ===========================================================================
0001E97E                            
0001E97E                            SS_AniEmeraldSparks:
0001E97E 5328 0002                  		subq.b	#1,2(a0)
0001E982 6A00                       		bpl.s	locret_1B60C
0001E984 117C 0005 0002             		move.b	#5,2(a0)
0001E98A 7000                       		moveq	#0,d0
0001E98C 1028 0003                  		move.b	3(a0),d0
0001E990 5228 0003                  		addq.b	#1,3(a0)
0001E994 2268 0004                  		movea.l	4(a0),a1
0001E998 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E99C 1280                       		move.b	d0,(a1)
0001E99E 6600                       		bne.s	locret_1B60C
0001E9A0 4290                       		clr.l	(a0)
0001E9A2 42A8 0004                  		clr.l	4(a0)
0001E9A6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E9B6                            
0001E9B6                            locret_1B60C:
0001E9B6 4E75                       		rts	
0001E9B8                            ; ===========================================================================
0001E9B8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E9BE                            ; ===========================================================================
0001E9BE                            
0001E9BE                            SS_AniGlassBlock:
0001E9BE 5328 0002                  		subq.b	#1,2(a0)
0001E9C2 6A00                       		bpl.s	locret_1B640
0001E9C4 117C 0001 0002             		move.b	#1,2(a0)
0001E9CA 7000                       		moveq	#0,d0
0001E9CC 1028 0003                  		move.b	3(a0),d0
0001E9D0 5228 0003                  		addq.b	#1,3(a0)
0001E9D4 2268 0004                  		movea.l	4(a0),a1
0001E9D8 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E9DC 1280                       		move.b	d0,(a1)
0001E9DE 6600                       		bne.s	locret_1B640
0001E9E0 12A8 0004                  		move.b	4(a0),(a1)
0001E9E4 4290                       		clr.l	(a0)
0001E9E6 42A8 0004                  		clr.l	4(a0)
0001E9EA                            
0001E9EA                            locret_1B640:
0001E9EA 4E75                       		rts	
0001E9EC                            ; ===========================================================================
0001E9EC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E9F6                            
0001E9F6                            ; ---------------------------------------------------------------------------
0001E9F6                            ; Special stage	layout pointers
0001E9F6                            ; ---------------------------------------------------------------------------
0001E9F6                            SS_LayoutIndex:
0001E9F6 0000 0000                  		dc.l SS_1
0001E9FA 0000 0000                  		dc.l SS_2
0001E9FE 0000 0000                  		dc.l SS_3
0001EA02 0000 0000                  		dc.l SS_4
0001EA06 0000 0000                  		dc.l SS_5
0001EA0A 0000 0000                  		dc.l SS_6
0001EA0E                            		even
0001EA0E                            
0001EA0E                            ; ---------------------------------------------------------------------------
0001EA0E                            ; Special stage start locations
0001EA0E                            ; ---------------------------------------------------------------------------
0001EA0E                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EA0E                            ; ---------------------------------------------------------------------------
0001EA0E                            ; Special stage start locations
0001EA0E                            ; ---------------------------------------------------------------------------
0001EA0E                            
0001EA0E                            		incbin	"startpos\ss1.bin"
0001EA12                            		incbin	"startpos\ss2.bin"
0001EA16                            		incbin	"startpos\ss3.bin"
0001EA1A                            		incbin	"startpos\ss4.bin"
0001EA1E                            		incbin	"startpos\ss5.bin"
0001EA22                            		incbin	"startpos\ss6.bin"
0001EA26                            		even
0001EA26                            		even
0001EA26                            
0001EA26                            ; ---------------------------------------------------------------------------
0001EA26                            ; Subroutine to	load special stage layout
0001EA26                            ; ---------------------------------------------------------------------------
0001EA26                            
0001EA26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA26                            
0001EA26                            
0001EA26                            SS_Load:
0001EA26 7000                       		moveq	#0,d0
0001EA28 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EA2C 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EA30 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EA36 6500                       		blo.s	SS_ChkEmldNum
0001EA38 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EA3E                            
0001EA3E                            SS_ChkEmldNum:
0001EA3E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EA44 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EA46 7200                       		moveq	#0,d1
0001EA48 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EA4C 5301                       		subq.b	#1,d1
0001EA4E 6500                       		blo.s	SS_LoadData
0001EA50 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EA54                            
0001EA54                            SS_ChkEmldLoop:	
0001EA54 B033 1000                  		cmp.b	(a3,d1.w),d0
0001EA58 6600                       		bne.s	SS_ChkEmldRepeat
0001EA5A 60CA                       		bra.s	SS_Load
0001EA5C                            ; ===========================================================================
0001EA5C                            
0001EA5C                            SS_ChkEmldRepeat:
0001EA5C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EA60                            
0001EA60                            SS_LoadData:
0001EA60 E548                       		lsl.w	#2,d0
0001EA62 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EA66 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EA6A 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EA6E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EA72 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EA78 303C 0000                  		move.w	#0,d0
0001EA7C 4EB9 0000 1888             		jsr	(EniDec).l
0001EA82 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EA88 303C 0FFF                  		move.w	#$FFF,d0
0001EA8C                            
0001EA8C                            SS_ClrRAM3:
0001EA8C 4299                       		clr.l	(a1)+
0001EA8E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EA92                            
0001EA92 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EA98 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EA9E 723F                       		moveq	#$3F,d1
0001EAA0                            
0001EAA0                            loc_1B6F6:
0001EAA0 743F                       		moveq	#$3F,d2
0001EAA2                            
0001EAA2                            loc_1B6F8:
0001EAA2 12D8                       		move.b	(a0)+,(a1)+
0001EAA4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EAA8                            
0001EAA8 43E9 0040                  		lea	$40(a1),a1
0001EAAC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EAB0                            
0001EAB0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EAB6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EABC 724D                       		moveq	#$4D,d1
0001EABE                            
0001EABE                            loc_1B714:
0001EABE 22D8                       		move.l	(a0)+,(a1)+
0001EAC0 32FC 0000                  		move.w	#0,(a1)+
0001EAC4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EACA 32D8                       		move.w	(a0)+,(a1)+
0001EACC 51C9 FFF0                  		dbf	d1,loc_1B714
0001EAD0                            
0001EAD0 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EAD6 323C 003F                  		move.w	#$3F,d1
0001EADA                            
0001EADA                            loc_1B730:
0001EADA                            
0001EADA 4299                       		clr.l	(a1)+
0001EADC 51C9 FFFC                  		dbf	d1,loc_1B730
0001EAE0                            
0001EAE0 4E75                       		rts	
0001EAE2                            ; End of function SS_Load
0001EAE2                            
0001EAE2                            ; ===========================================================================
0001EAE2                            
0001EAE2                            SS_MapIndex:
0001EAE2                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EAE2                            ; ---------------------------------------------------------------------------
0001EAE2                            ; Special stage	mappings and VRAM pointers
0001EAE2                            ; ---------------------------------------------------------------------------
0001EAE2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EAE6 0142                       	dc.w $142		; VRAM setting
0001EAE8 0000 0000                  	dc.l Map_SSWalls
0001EAEC 0142                       	dc.w $142
0001EAEE 0000 0000                  	dc.l Map_SSWalls
0001EAF2 0142                       	dc.w $142
0001EAF4 0000 0000                  	dc.l Map_SSWalls
0001EAF8 0142                       	dc.w $142
0001EAFA 0000 0000                  	dc.l Map_SSWalls
0001EAFE 0142                       	dc.w $142
0001EB00 0000 0000                  	dc.l Map_SSWalls
0001EB04 0142                       	dc.w $142
0001EB06 0000 0000                  	dc.l Map_SSWalls
0001EB0A 0142                       	dc.w $142
0001EB0C 0000 0000                  	dc.l Map_SSWalls
0001EB10 0142                       	dc.w $142
0001EB12 0000 0000                  	dc.l Map_SSWalls
0001EB16 0142                       	dc.w $142
0001EB18 0000 0000                  	dc.l Map_SSWalls
0001EB1C 2142                       	dc.w $2142
0001EB1E 0000 0000                  	dc.l Map_SSWalls
0001EB22 2142                       	dc.w $2142
0001EB24 0000 0000                  	dc.l Map_SSWalls
0001EB28 2142                       	dc.w $2142
0001EB2A 0000 0000                  	dc.l Map_SSWalls
0001EB2E 2142                       	dc.w $2142
0001EB30 0000 0000                  	dc.l Map_SSWalls
0001EB34 2142                       	dc.w $2142
0001EB36 0000 0000                  	dc.l Map_SSWalls
0001EB3A 2142                       	dc.w $2142
0001EB3C 0000 0000                  	dc.l Map_SSWalls
0001EB40 2142                       	dc.w $2142
0001EB42 0000 0000                  	dc.l Map_SSWalls
0001EB46 2142                       	dc.w $2142
0001EB48 0000 0000                  	dc.l Map_SSWalls
0001EB4C 2142                       	dc.w $2142
0001EB4E 0000 0000                  	dc.l Map_SSWalls
0001EB52 4142                       	dc.w $4142
0001EB54 0000 0000                  	dc.l Map_SSWalls
0001EB58 4142                       	dc.w $4142
0001EB5A 0000 0000                  	dc.l Map_SSWalls
0001EB5E 4142                       	dc.w $4142
0001EB60 0000 0000                  	dc.l Map_SSWalls
0001EB64 4142                       	dc.w $4142
0001EB66 0000 0000                  	dc.l Map_SSWalls
0001EB6A 4142                       	dc.w $4142
0001EB6C 0000 0000                  	dc.l Map_SSWalls
0001EB70 4142                       	dc.w $4142
0001EB72 0000 0000                  	dc.l Map_SSWalls
0001EB76 4142                       	dc.w $4142
0001EB78 0000 0000                  	dc.l Map_SSWalls
0001EB7C 4142                       	dc.w $4142
0001EB7E 0000 0000                  	dc.l Map_SSWalls
0001EB82 4142                       	dc.w $4142
0001EB84 0000 0000                  	dc.l Map_SSWalls
0001EB88 6142                       	dc.w $6142
0001EB8A 0000 0000                  	dc.l Map_SSWalls
0001EB8E 6142                       	dc.w $6142
0001EB90 0000 0000                  	dc.l Map_SSWalls
0001EB94 6142                       	dc.w $6142
0001EB96 0000 0000                  	dc.l Map_SSWalls
0001EB9A 6142                       	dc.w $6142
0001EB9C 0000 0000                  	dc.l Map_SSWalls
0001EBA0 6142                       	dc.w $6142
0001EBA2 0000 0000                  	dc.l Map_SSWalls
0001EBA6 6142                       	dc.w $6142
0001EBA8 0000 0000                  	dc.l Map_SSWalls
0001EBAC 6142                       	dc.w $6142
0001EBAE 0000 0000                  	dc.l Map_SSWalls
0001EBB2 6142                       	dc.w $6142
0001EBB4 0000 0000                  	dc.l Map_SSWalls
0001EBB8 6142                       	dc.w $6142
0001EBBA 0001 0D6A                  	dc.l Map_Bump
0001EBBE 023B                       	dc.w $23B
0001EBC0 0000 0000                  	dc.l Map_SS_R
0001EBC4 0570                       	dc.w $570
0001EBC6 0000 0000                  	dc.l Map_SS_R
0001EBCA 0251                       	dc.w $251
0001EBCC 0000 0000                  	dc.l Map_SS_R
0001EBD0 0370                       	dc.w $370
0001EBD2 0000 0000                  	dc.l Map_SS_Up
0001EBD6 0263                       	dc.w $263
0001EBD8 0000 0000                  	dc.l Map_SS_Down
0001EBDC 0263                       	dc.w $263
0001EBDE 0000 0000                  	dc.l Map_SS_R
0001EBE2 22F0                       	dc.w $22F0
0001EBE4 0000 0000                  	dc.l Map_SS_Glass
0001EBE8 0470                       	dc.w $470
0001EBEA 0000 0000                  	dc.l Map_SS_Glass
0001EBEE 05F0                       	dc.w $5F0
0001EBF0 0000 0000                  	dc.l Map_SS_Glass
0001EBF4 65F0                       	dc.w $65F0
0001EBF6 0000 0000                  	dc.l Map_SS_Glass
0001EBFA 25F0                       	dc.w $25F0
0001EBFC 0000 0000                  	dc.l Map_SS_Glass
0001EC00 45F0                       	dc.w $45F0
0001EC02 0000 0000                  	dc.l Map_SS_R
0001EC06 02F0                       	dc.w $2F0
0001EC08 0101 0D6A                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EC0C 023B                       	dc.w $23B
0001EC0E 0201 0D6A                  	dc.l Map_Bump+$2000000
0001EC12 023B                       	dc.w $23B
0001EC14 0000 0000                  	dc.l Map_SS_R
0001EC18 0797                       	dc.w $797
0001EC1A 0000 0000                  	dc.l Map_SS_R
0001EC1E 07A0                       	dc.w $7A0
0001EC20 0000 0000                  	dc.l Map_SS_R
0001EC24 07A9                       	dc.w $7A9
0001EC26 0000 0000                  	dc.l Map_SS_R
0001EC2A 0797                       	dc.w $797
0001EC2C 0000 0000                  	dc.l Map_SS_R
0001EC30 07A0                       	dc.w $7A0
0001EC32 0000 0000                  	dc.l Map_SS_R
0001EC36 07A9                       	dc.w $7A9
0001EC38 0000 BFA8                  	dc.l Map_Ring
0001EC3C 2798                       	dc.w $2798
0001EC3E 0000 0000                  	dc.l Map_SS_Chaos3
0001EC42 0770                       	dc.w $770
0001EC44 0000 0000                  	dc.l Map_SS_Chaos3
0001EC48 2770                       	dc.w $2770
0001EC4A 0000 0000                  	dc.l Map_SS_Chaos3
0001EC4E 4770                       	dc.w $4770
0001EC50 0000 0000                  	dc.l Map_SS_Chaos3
0001EC54 6770                       	dc.w $6770
0001EC56 0000 0000                  	dc.l Map_SS_Chaos1
0001EC5A 0770                       	dc.w $770
0001EC5C 0000 0000                  	dc.l Map_SS_Chaos2
0001EC60 0770                       	dc.w $770
0001EC62 0000 0000                  	dc.l Map_SS_R
0001EC66 04F0                       	dc.w $4F0
0001EC68 0400 BFA8                  	dc.l Map_Ring+$4000000
0001EC6C 2798                       	dc.w $2798
0001EC6E 0500 BFA8                  	dc.l Map_Ring+$5000000
0001EC72 2798                       	dc.w $2798
0001EC74 0600 BFA8                  	dc.l Map_Ring+$6000000
0001EC78 2798                       	dc.w $2798
0001EC7A 0700 BFA8                  	dc.l Map_Ring+$7000000
0001EC7E 2798                       	dc.w $2798
0001EC80 0000 0000                  	dc.l Map_SS_Glass
0001EC84 23F0                       	dc.w $23F0
0001EC86 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EC8A 23F0                       	dc.w $23F0
0001EC8C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EC90 23F0                       	dc.w $23F0
0001EC92 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EC96 23F0                       	dc.w $23F0
0001EC98 0000 0000                  	dc.l Map_SS_R+$2000000
0001EC9C 04F0                       	dc.w $4F0
0001EC9E 0000 0000                  	dc.l Map_SS_Glass
0001ECA2 05F0                       	dc.w $5F0
0001ECA4 0000 0000                  	dc.l Map_SS_Glass
0001ECA8 65F0                       	dc.w $65F0
0001ECAA 0000 0000                  	dc.l Map_SS_Glass
0001ECAE 25F0                       	dc.w $25F0
0001ECB0 0000 0000                  	dc.l Map_SS_Glass
0001ECB4 45F0                       	dc.w $45F0
0001ECB4 45F0                       	dc.w $45F0
0001ECB6                            
0001ECB6                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001ECB6                            ; ---------------------------------------------------------------------------
0001ECB6                            ; Sprite mappings - special stage "R" block
0001ECB6                            ; ---------------------------------------------------------------------------
0001ECB6                            Map_SS_R_internal:
0001ECB6 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001ECB8 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001ECBA 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001ECBC 01                         byte_1B912:	dc.b 1
0001ECBD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECC2 01                         byte_1B918:	dc.b 1
0001ECC3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ECC8 00                         byte_1B91E:	dc.b 0
0001ECCA 00                         		even
0001ECCA 00                         		even
0001ECCA                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001ECCA                            ; ---------------------------------------------------------------------------
0001ECCA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001ECCA                            ; ---------------------------------------------------------------------------
0001ECCA                            Map_SS_Glass_internal:
0001ECCA 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001ECCC 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001ECCE 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001ECD0 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001ECD2 01                         byte_1B928:	dc.b 1
0001ECD3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECD8 01                         byte_1B92E:	dc.b 1
0001ECD9 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001ECDE 01                         byte_1B934:	dc.b 1
0001ECDF F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001ECE4 01                         byte_1B93A:	dc.b 1
0001ECE5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001ECEA                            		even
0001ECEA                            		even
0001ECEA                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            ; Sprite mappings - special stage "UP" block
0001ECEA                            ; ---------------------------------------------------------------------------
0001ECEA                            Map_SS_Up_internal:
0001ECEA 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001ECEC 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001ECEE 01                         byte_1B944:	dc.b 1
0001ECEF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECF4 01                         byte_1B94A:	dc.b 1
0001ECF5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ECFA                            		even
0001ECFA                            		even
0001ECFA                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001ECFA                            ; ---------------------------------------------------------------------------
0001ECFA                            ; Sprite mappings - special stage "DOWN" block
0001ECFA                            ; ---------------------------------------------------------------------------
0001ECFA                            Map_SS_Down_internal:
0001ECFA 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001ECFC 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001ECFE 01                         byte_1B954:	dc.b 1
0001ECFF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ED04 01                         byte_1B95A:	dc.b 1
0001ED05 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ED0A                            		even
0001ED0A                            		even
0001ED0A                            		include	"_maps\SS Chaos Emeralds.asm"
0001ED0A                            ; ---------------------------------------------------------------------------
0001ED0A                            ; Sprite mappings - special stage chaos	emeralds
0001ED0A                            ; ---------------------------------------------------------------------------
0001ED0A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001ED0C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001ED0E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001ED10 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001ED12 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001ED14 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001ED16 01                         byte_1B96C:	dc.b 1
0001ED17 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ED1C 01                         byte_1B972:	dc.b 1
0001ED1D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001ED22 01                         byte_1B978:	dc.b 1
0001ED23 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001ED28 01                         byte_1B97E:	dc.b 1
0001ED29 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001ED2E                            		even
0001ED2E                            		even
0001ED2E                            
0001ED2E                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001ED2E                            ; ---------------------------------------------------------------------------
0001ED2E                            ; Object 09 - Sonic (special stage)
0001ED2E                            ; ---------------------------------------------------------------------------
0001ED2E                            
0001ED2E                            SonicSpecial:
0001ED2E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001ED32 6700                       		beq.s	Obj09_Normal	; if not, branch
0001ED34 6100 0000                  		bsr.w	SS_FixCamera
0001ED38 6000 0000                  		bra.w	DebugMode
0001ED3C                            ; ===========================================================================
0001ED3C                            
0001ED3C                            Obj09_Normal:
0001ED3C 7000                       		moveq	#0,d0
0001ED3E 1028 0024                  		move.b	obRoutine(a0),d0
0001ED42 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001ED46 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001ED4A                            ; ===========================================================================
0001ED4A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001ED4C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001ED4E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001ED50 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ED52                            ; ===========================================================================
0001ED52                            
0001ED52                            Obj09_Main:	; Routine 0
0001ED52 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ED56 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001ED5C 117C 0007 0017             		move.b	#7,obWidth(a0)
0001ED62 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001ED6A 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001ED70 117C 0004 0001             		move.b	#4,obRender(a0)
0001ED76 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ED7C 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001ED82 08E8 0002 0022             		bset	#2,obStatus(a0)
0001ED88 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ED8E                            
0001ED8E                            Obj09_ChkDebug:	; Routine 2
0001ED8E 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001ED92 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED94 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001ED9A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED9C 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EDA2                            
0001EDA2                            Obj09_NoDebug:
0001EDA2 117C 0000 0030             		move.b	#0,$30(a0)
0001EDA8 7000                       		moveq	#0,d0
0001EDAA 1028 0022                  		move.b	obStatus(a0),d0
0001EDAE 0240 0002                  		andi.w	#2,d0
0001EDB2 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EDB6 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EDBA 4EB9 0001 6854             		jsr	(Sonic_LoadGfx).l
0001EDC0 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001EDC6                            ; ===========================================================================
0001EDC6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EDC8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EDCA                            ; ===========================================================================
0001EDCA                            
0001EDCA                            Obj09_OnWall:
0001EDCA 6100 0000                  		bsr.w	Obj09_Jump
0001EDCE 6100 0000                  		bsr.w	Obj09_Move
0001EDD2 6100 0000                  		bsr.w	Obj09_Fall
0001EDD6 6000                       		bra.s	Obj09_Display
0001EDD8                            ; ===========================================================================
0001EDD8                            
0001EDD8                            Obj09_InAir:
0001EDD8 6100 0000                  		bsr.w	nullsub_2
0001EDDC 6100 0000                  		bsr.w	Obj09_Move
0001EDE0 6100 0000                  		bsr.w	Obj09_Fall
0001EDE4                            
0001EDE4                            Obj09_Display:
0001EDE4 6100 0000                  		bsr.w	Obj09_ChkItems
0001EDE8 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EDEC 4EB9 0000 F832             		jsr	(SpeedToPos).l
0001EDF2 6100 0000                  		bsr.w	SS_FixCamera
0001EDF6 3038 F780                  		move.w	(v_ssangle).w,d0
0001EDFA D078 F782                  		add.w	(v_ssrotate).w,d0
0001EDFE 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EE02 4EB9 0001 64BC             		jsr	(Sonic_Animate).l
0001EE08 4E75                       		rts	
0001EE0A                            
0001EE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE0A                            
0001EE0A                            
0001EE0A                            Obj09_Move:
0001EE0A 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EE10 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EE12 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EE16                            
0001EE16                            Obj09_ChkRight:
0001EE16 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EE1C 6700                       		beq.s	loc_1BA78	; if not, branch
0001EE1E 6100 0000                  		bsr.w	Obj09_MoveRight
0001EE22                            
0001EE22                            loc_1BA78:
0001EE22 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EE26 0200 000C                  		andi.b	#btnL+btnR,d0
0001EE2A 6600                       		bne.s	loc_1BAA8
0001EE2C 3028 0020                  		move.w	obInertia(a0),d0
0001EE30 6700                       		beq.s	loc_1BAA8
0001EE32 6B00                       		bmi.s	loc_1BA9A
0001EE34 0440 000C                  		subi.w	#$C,d0
0001EE38 6400                       		bcc.s	loc_1BA94
0001EE3A 303C 0000                  		move.w	#0,d0
0001EE3E                            
0001EE3E                            loc_1BA94:
0001EE3E 3140 0020                  		move.w	d0,obInertia(a0)
0001EE42 6000                       		bra.s	loc_1BAA8
0001EE44                            ; ===========================================================================
0001EE44                            
0001EE44                            loc_1BA9A:
0001EE44 0640 000C                  		addi.w	#$C,d0
0001EE48 6400                       		bcc.s	loc_1BAA4
0001EE4A 303C 0000                  		move.w	#0,d0
0001EE4E                            
0001EE4E                            loc_1BAA4:
0001EE4E 3140 0020                  		move.w	d0,obInertia(a0)
0001EE52                            
0001EE52                            loc_1BAA8:
0001EE52 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE56 0600 0020                  		addi.b	#$20,d0
0001EE5A 0200 00C0                  		andi.b	#$C0,d0
0001EE5E 4400                       		neg.b	d0
0001EE60 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EE66 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EE6A D3A8 0008                  		add.l	d1,obX(a0)
0001EE6E C1E8 0020                  		muls.w	obInertia(a0),d0
0001EE72 D1A8 000C                  		add.l	d0,obY(a0)
0001EE76 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EE7A 2428 000C                  		move.l	obY(a0),d2
0001EE7E 2628 0008                  		move.l	obX(a0),d3
0001EE82 6100 0000                  		bsr.w	sub_1BCE8
0001EE86 6700                       		beq.s	loc_1BAF2
0001EE88 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EE8C 93A8 0008                  		sub.l	d1,obX(a0)
0001EE90 91A8 000C                  		sub.l	d0,obY(a0)
0001EE94 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EE9A 4E75                       		rts	
0001EE9C                            ; ===========================================================================
0001EE9C                            
0001EE9C                            loc_1BAF2:
0001EE9C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EEA0 4E75                       		rts	
0001EEA2                            ; End of function Obj09_Move
0001EEA2                            
0001EEA2                            
0001EEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEA2                            
0001EEA2                            
0001EEA2                            Obj09_MoveLeft:
0001EEA2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EEA8 3028 0020                  		move.w	obInertia(a0),d0
0001EEAC 6700                       		beq.s	loc_1BB06
0001EEAE 6A00                       		bpl.s	loc_1BB1A
0001EEB0                            
0001EEB0                            loc_1BB06:
0001EEB0 0440 000C                  		subi.w	#$C,d0
0001EEB4 0C40 F800                  		cmpi.w	#-$800,d0
0001EEB8 6E00                       		bgt.s	loc_1BB14
0001EEBA 303C F800                  		move.w	#-$800,d0
0001EEBE                            
0001EEBE                            loc_1BB14:
0001EEBE 3140 0020                  		move.w	d0,obInertia(a0)
0001EEC2 4E75                       		rts	
0001EEC4                            ; ===========================================================================
0001EEC4                            
0001EEC4                            loc_1BB1A:
0001EEC4 0440 0040                  		subi.w	#$40,d0
0001EEC8 6400                       		bcc.s	loc_1BB22
0001EECA 4E71                       		nop	
0001EECC                            
0001EECC                            loc_1BB22:
0001EECC 3140 0020                  		move.w	d0,obInertia(a0)
0001EED0 4E75                       		rts	
0001EED2                            ; End of function Obj09_MoveLeft
0001EED2                            
0001EED2                            
0001EED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EED2                            
0001EED2                            
0001EED2                            Obj09_MoveRight:
0001EED2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EED8 3028 0020                  		move.w	obInertia(a0),d0
0001EEDC 6B00                       		bmi.s	loc_1BB48
0001EEDE 0640 000C                  		addi.w	#$C,d0
0001EEE2 0C40 0800                  		cmpi.w	#$800,d0
0001EEE6 6D00                       		blt.s	loc_1BB42
0001EEE8 303C 0800                  		move.w	#$800,d0
0001EEEC                            
0001EEEC                            loc_1BB42:
0001EEEC 3140 0020                  		move.w	d0,obInertia(a0)
0001EEF0 6000                       		bra.s	locret_1BB54
0001EEF2                            ; ===========================================================================
0001EEF2                            
0001EEF2                            loc_1BB48:
0001EEF2 0640 0040                  		addi.w	#$40,d0
0001EEF6 6400                       		bcc.s	loc_1BB50
0001EEF8 4E71                       		nop	
0001EEFA                            
0001EEFA                            loc_1BB50:
0001EEFA 3140 0020                  		move.w	d0,obInertia(a0)
0001EEFE                            
0001EEFE                            locret_1BB54:
0001EEFE 4E75                       		rts	
0001EF00                            ; End of function Obj09_MoveRight
0001EF00                            
0001EF00                            
0001EF00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF00                            
0001EF00                            
0001EF00                            Obj09_Jump:
0001EF00 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EF04 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EF08 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EF0A 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF0E 0200 00FC                  		andi.b	#$FC,d0
0001EF12 4400                       		neg.b	d0
0001EF14 0400 0040                  		subi.b	#$40,d0
0001EF18 4EB9 0000 3A32             		jsr	(CalcSine).l
0001EF1E C3FC 0680                  		muls.w	#$680,d1
0001EF22 E081                       		asr.l	#8,d1
0001EF24 3141 0010                  		move.w	d1,obVelX(a0)
0001EF28 C1FC 0680                  		muls.w	#$680,d0
0001EF2C E080                       		asr.l	#8,d0
0001EF2E 3140 0012                  		move.w	d0,obVelY(a0)
0001EF32 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF42                            
0001EF42                            Obj09_NoJump:
0001EF42 4E75                       		rts	
0001EF44                            ; End of function Obj09_Jump
0001EF44                            
0001EF44                            
0001EF44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF44                            
0001EF44                            
0001EF44                            nullsub_2:
0001EF44 4E75                       		rts	
0001EF46                            ; End of function nullsub_2
0001EF46                            
0001EF46                            ; ===========================================================================
0001EF46                            ; ---------------------------------------------------------------------------
0001EF46                            ; unused subroutine to limit Sonic's upward vertical speed
0001EF46                            ; ---------------------------------------------------------------------------
0001EF46 323C FC00                  		move.w	#-$400,d1
0001EF4A B268 0012                  		cmp.w	obVelY(a0),d1
0001EF4E 6F00                       		ble.s	locret_1BBB4
0001EF50 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF54 0200 0070                  		andi.b	#btnABC,d0
0001EF58 6600                       		bne.s	locret_1BBB4
0001EF5A 3141 0012                  		move.w	d1,obVelY(a0)
0001EF5E                            
0001EF5E                            locret_1BBB4:
0001EF5E 4E75                       		rts	
0001EF60                            ; ---------------------------------------------------------------------------
0001EF60                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EF60                            ; ---------------------------------------------------------------------------
0001EF60                            
0001EF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF60                            
0001EF60                            
0001EF60                            SS_FixCamera:
0001EF60 3428 000C                  		move.w	obY(a0),d2
0001EF64 3628 0008                  		move.w	obX(a0),d3
0001EF68 3038 F700                  		move.w	(v_screenposx).w,d0
0001EF6C 0443 00A0                  		subi.w	#$A0,d3
0001EF70 6500                       		bcs.s	loc_1BBCE
0001EF72 9043                       		sub.w	d3,d0
0001EF74 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EF78                            
0001EF78                            loc_1BBCE:
0001EF78 3038 F704                  		move.w	(v_screenposy).w,d0
0001EF7C 0442 0070                  		subi.w	#$70,d2
0001EF80 6500                       		bcs.s	locret_1BBDE
0001EF82 9042                       		sub.w	d2,d0
0001EF84 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EF88                            
0001EF88                            locret_1BBDE:
0001EF88 4E75                       		rts	
0001EF8A                            ; End of function SS_FixCamera
0001EF8A                            
0001EF8A                            ; ===========================================================================
0001EF8A                            
0001EF8A                            Obj09_ExitStage:
0001EF8A 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EF90 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EF96 6600                       		bne.s	loc_1BBF4
0001EF98 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EF9E                            
0001EF9E                            loc_1BBF4:
0001EF9E 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EFA4 6D00                       		blt.s	loc_1BC12
0001EFA6 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EFAC 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EFB2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EFB6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EFBC                            
0001EFBC                            loc_1BC12:
0001EFBC 3038 F780                  		move.w	(v_ssangle).w,d0
0001EFC0 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EFC4 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EFC8 4EB9 0001 64BC             		jsr	(Sonic_Animate).l
0001EFCE 4EB9 0001 6854             		jsr	(Sonic_LoadGfx).l
0001EFD4 6100 FF8A                  		bsr.w	SS_FixCamera
0001EFD8 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001EFDE                            ; ===========================================================================
0001EFDE                            
0001EFDE                            Obj09_Exit2:
0001EFDE 5368 0038                  		subq.w	#1,$38(a0)
0001EFE2 6600                       		bne.s	loc_1BC40
0001EFE4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EFEA                            
0001EFEA                            loc_1BC40:
0001EFEA 4EB9 0001 64BC             		jsr	(Sonic_Animate).l
0001EFF0 4EB9 0001 6854             		jsr	(Sonic_LoadGfx).l
0001EFF6 6100 FF68                  		bsr.w	SS_FixCamera
0001EFFA 4EF9 0000 F846             		jmp	(DisplaySprite).l
0001F000                            
0001F000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F000                            
0001F000                            
0001F000                            Obj09_Fall:
0001F000 2428 000C                  		move.l	obY(a0),d2
0001F004 2628 0008                  		move.l	obX(a0),d3
0001F008 1038 F780                  		move.b	(v_ssangle).w,d0
0001F00C 0200 00FC                  		andi.b	#$FC,d0
0001F010 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F016 3828 0010                  		move.w	obVelX(a0),d4
0001F01A 48C4                       		ext.l	d4
0001F01C E184                       		asl.l	#8,d4
0001F01E C1FC 002A                  		muls.w	#$2A,d0
0001F022 D084                       		add.l	d4,d0
0001F024 3828 0012                  		move.w	obVelY(a0),d4
0001F028 48C4                       		ext.l	d4
0001F02A E184                       		asl.l	#8,d4
0001F02C C3FC 002A                  		muls.w	#$2A,d1
0001F030 D284                       		add.l	d4,d1
0001F032 D680                       		add.l	d0,d3
0001F034 6100 0000                  		bsr.w	sub_1BCE8
0001F038 6700                       		beq.s	loc_1BCB0
0001F03A 9680                       		sub.l	d0,d3
0001F03C 7000                       		moveq	#0,d0
0001F03E 3140 0010                  		move.w	d0,obVelX(a0)
0001F042 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F048 D481                       		add.l	d1,d2
0001F04A 6100 0000                  		bsr.w	sub_1BCE8
0001F04E 6700                       		beq.s	loc_1BCC6
0001F050 9481                       		sub.l	d1,d2
0001F052 7200                       		moveq	#0,d1
0001F054 3141 0012                  		move.w	d1,obVelY(a0)
0001F058 4E75                       		rts	
0001F05A                            ; ===========================================================================
0001F05A                            
0001F05A                            loc_1BCB0:
0001F05A D481                       		add.l	d1,d2
0001F05C 6100 0000                  		bsr.w	sub_1BCE8
0001F060 6700                       		beq.s	loc_1BCD4
0001F062 9481                       		sub.l	d1,d2
0001F064 7200                       		moveq	#0,d1
0001F066 3141 0012                  		move.w	d1,obVelY(a0)
0001F06A 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F070                            
0001F070                            loc_1BCC6:
0001F070 E080                       		asr.l	#8,d0
0001F072 E081                       		asr.l	#8,d1
0001F074 3140 0010                  		move.w	d0,obVelX(a0)
0001F078 3141 0012                  		move.w	d1,obVelY(a0)
0001F07C 4E75                       		rts	
0001F07E                            ; ===========================================================================
0001F07E                            
0001F07E                            loc_1BCD4:
0001F07E E080                       		asr.l	#8,d0
0001F080 E081                       		asr.l	#8,d1
0001F082 3140 0010                  		move.w	d0,obVelX(a0)
0001F086 3141 0012                  		move.w	d1,obVelY(a0)
0001F08A 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F090 4E75                       		rts	
0001F092                            ; End of function Obj09_Fall
0001F092                            
0001F092                            
0001F092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F092                            
0001F092                            
0001F092                            sub_1BCE8:
0001F092 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F098 7800                       		moveq	#0,d4
0001F09A 4842                       		swap	d2
0001F09C 3802                       		move.w	d2,d4
0001F09E 4842                       		swap	d2
0001F0A0 0644 0044                  		addi.w	#$44,d4
0001F0A4 88FC 0018                  		divu.w	#$18,d4
0001F0A8 C8FC 0080                  		mulu.w	#$80,d4
0001F0AC D3C4                       		adda.l	d4,a1
0001F0AE 7800                       		moveq	#0,d4
0001F0B0 4843                       		swap	d3
0001F0B2 3803                       		move.w	d3,d4
0001F0B4 4843                       		swap	d3
0001F0B6 0644 0014                  		addi.w	#$14,d4
0001F0BA 88FC 0018                  		divu.w	#$18,d4
0001F0BE D2C4                       		adda.w	d4,a1
0001F0C0 7A00                       		moveq	#0,d5
0001F0C2 1819                       		move.b	(a1)+,d4
0001F0C4 6100                       		bsr.s	sub_1BD30
0001F0C6 1819                       		move.b	(a1)+,d4
0001F0C8 6100                       		bsr.s	sub_1BD30
0001F0CA D2FC 007E                  		adda.w	#$7E,a1
0001F0CE 1819                       		move.b	(a1)+,d4
0001F0D0 6100                       		bsr.s	sub_1BD30
0001F0D2 1819                       		move.b	(a1)+,d4
0001F0D4 6100                       		bsr.s	sub_1BD30
0001F0D6 4A05                       		tst.b	d5
0001F0D8 4E75                       		rts	
0001F0DA                            ; End of function sub_1BCE8
0001F0DA                            
0001F0DA                            
0001F0DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0DA                            
0001F0DA                            
0001F0DA                            sub_1BD30:
0001F0DA 6700                       		beq.s	locret_1BD44
0001F0DC 0C04 0028                  		cmpi.b	#$28,d4
0001F0E0 6700                       		beq.s	locret_1BD44
0001F0E2 0C04 003A                  		cmpi.b	#$3A,d4
0001F0E6 6500                       		bcs.s	loc_1BD46
0001F0E8 0C04 004B                  		cmpi.b	#$4B,d4
0001F0EC 6400                       		bcc.s	loc_1BD46
0001F0EE                            
0001F0EE                            locret_1BD44:
0001F0EE 4E75                       		rts	
0001F0F0                            ; ===========================================================================
0001F0F0                            
0001F0F0                            loc_1BD46:
0001F0F0 1144 0030                  		move.b	d4,$30(a0)
0001F0F4 2149 0032                  		move.l	a1,$32(a0)
0001F0F8 7AFF                       		moveq	#-1,d5
0001F0FA 4E75                       		rts	
0001F0FC                            ; End of function sub_1BD30
0001F0FC                            
0001F0FC                            
0001F0FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0FC                            
0001F0FC                            
0001F0FC                            Obj09_ChkItems:
0001F0FC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F102 7800                       		moveq	#0,d4
0001F104 3828 000C                  		move.w	obY(a0),d4
0001F108 0644 0050                  		addi.w	#$50,d4
0001F10C 88FC 0018                  		divu.w	#$18,d4
0001F110 C8FC 0080                  		mulu.w	#$80,d4
0001F114 D3C4                       		adda.l	d4,a1
0001F116 7800                       		moveq	#0,d4
0001F118 3828 0008                  		move.w	obX(a0),d4
0001F11C 0644 0020                  		addi.w	#$20,d4
0001F120 88FC 0018                  		divu.w	#$18,d4
0001F124 D2C4                       		adda.w	d4,a1
0001F126 1811                       		move.b	(a1),d4
0001F128 6600                       		bne.s	Obj09_ChkCont
0001F12A 4A28 003A                  		tst.b	$3A(a0)
0001F12E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F132 7800                       		moveq	#0,d4
0001F134 4E75                       		rts	
0001F136                            ; ===========================================================================
0001F136                            
0001F136                            Obj09_ChkCont:
0001F136 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F13A 6600                       		bne.s	Obj09_Chk1Up
0001F13C 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F140 6600                       		bne.s	Obj09_GetCont
0001F142 14BC 0001                  		move.b	#1,(a2)
0001F146 2549 0004                  		move.l	a1,4(a2)
0001F14A                            
0001F14A                            Obj09_GetCont:
0001F14A 4EB9 0000 BB10             		jsr	(CollectRing).l
0001F150 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F156 6500                       		bcs.s	Obj09_NoCont
0001F158 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F15E 6600                       		bne.s	Obj09_NoCont
0001F160 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F16E                            
0001F16E                            Obj09_NoCont:
0001F16E 7800                       		moveq	#0,d4
0001F170 4E75                       		rts	
0001F172                            ; ===========================================================================
0001F172                            
0001F172                            Obj09_Chk1Up:
0001F172 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F176 6600                       		bne.s	Obj09_ChkEmer
0001F178 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F17C 6600                       		bne.s	Obj09_Get1Up
0001F17E 14BC 0003                  		move.b	#3,(a2)
0001F182 2549 0004                  		move.l	a1,4(a2)
0001F186                            
0001F186                            Obj09_Get1Up:
0001F186 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F18A 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F198 7800                       		moveq	#0,d4
0001F19A 4E75                       		rts	
0001F19C                            ; ===========================================================================
0001F19C                            
0001F19C                            Obj09_ChkEmer:
0001F19C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F1A0 6500                       		bcs.s	Obj09_ChkGhost
0001F1A2 0C04 0040                  		cmpi.b	#$40,d4
0001F1A6 6200                       		bhi.s	Obj09_ChkGhost
0001F1A8 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F1AC 6600                       		bne.s	Obj09_GetEmer
0001F1AE 14BC 0005                  		move.b	#5,(a2)
0001F1B2 2549 0004                  		move.l	a1,4(a2)
0001F1B6                            
0001F1B6                            Obj09_GetEmer:
0001F1B6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F1BC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F1BE 0404 003B                  		subi.b	#$3B,d4
0001F1C2 7000                       		moveq	#0,d0
0001F1C4 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F1C8 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F1CC 1584 0000                  		move.b	d4,(a2,d0.w)
0001F1D0 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F1D4                            
0001F1D4                            Obj09_NoEmer:
0001F1DE 7800                       		moveq	#0,d4
0001F1E0 4E75                       		rts	
0001F1E2                            ; ===========================================================================
0001F1E2                            
0001F1E2                            Obj09_ChkGhost:
0001F1E2 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F1E6 6600                       		bne.s	Obj09_ChkGhostTag
0001F1E8 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F1EE                            
0001F1EE                            Obj09_ChkGhostTag:
0001F1EE 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F1F2 6600                       		bne.s	Obj09_NoGhost
0001F1F4 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F1FA 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F1FC 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F202                            
0001F202                            Obj09_NoGhost:
0001F202 78FF                       		moveq	#-1,d4
0001F204 4E75                       		rts	
0001F206                            ; ===========================================================================
0001F206                            
0001F206                            Obj09_MakeGhostSolid:
0001F206 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F20C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F20E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F214 723F                       		moveq	#$3F,d1
0001F216                            
0001F216                            Obj09_GhostLoop2:
0001F216 743F                       		moveq	#$3F,d2
0001F218                            
0001F218                            Obj09_GhostLoop:
0001F218 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F21C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F21E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F222                            
0001F222                            Obj09_NoReplace:
0001F222 5249                       		addq.w	#1,a1
0001F224 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F228 43E9 0040                  		lea	$40(a1),a1
0001F22C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F230                            
0001F230                            Obj09_GhostNotSolid:
0001F230 4228 003A                  		clr.b	$3A(a0)
0001F234 7800                       		moveq	#0,d4
0001F236 4E75                       		rts	
0001F238                            ; End of function Obj09_ChkItems
0001F238                            
0001F238                            
0001F238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F238                            
0001F238                            
0001F238                            Obj09_ChkItems2:
0001F238 1028 0030                  		move.b	$30(a0),d0
0001F23C 6600                       		bne.s	Obj09_ChkBumper
0001F23E 5328 0036                  		subq.b	#1,$36(a0)
0001F242 6A00                       		bpl.s	loc_1BEA0
0001F244 117C 0000 0036             		move.b	#0,$36(a0)
0001F24A                            
0001F24A                            loc_1BEA0:
0001F24A 5328 0037                  		subq.b	#1,$37(a0)
0001F24E 6A00                       		bpl.s	locret_1BEAC
0001F250 117C 0000 0037             		move.b	#0,$37(a0)
0001F256                            
0001F256                            locret_1BEAC:
0001F256 4E75                       		rts	
0001F258                            ; ===========================================================================
0001F258                            
0001F258                            Obj09_ChkBumper:
0001F258 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F25C 6600                       		bne.s	Obj09_GOAL
0001F25E 2228 0032                  		move.l	$32(a0),d1
0001F262 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F268 3401                       		move.w	d1,d2
0001F26A 0241 007F                  		andi.w	#$7F,d1
0001F26E C2FC 0018                  		mulu.w	#$18,d1
0001F272 0441 0014                  		subi.w	#$14,d1
0001F276 EE4A                       		lsr.w	#7,d2
0001F278 0242 007F                  		andi.w	#$7F,d2
0001F27C C4FC 0018                  		mulu.w	#$18,d2
0001F280 0442 0044                  		subi.w	#$44,d2
0001F284 9268 0008                  		sub.w	obX(a0),d1
0001F288 9468 000C                  		sub.w	obY(a0),d2
0001F28C 4EB9 0000 3CC4             		jsr	(CalcAngle).l
0001F292 4EB9 0000 3A32             		jsr	(CalcSine).l
0001F298 C3FC F900                  		muls.w	#-$700,d1
0001F29C E081                       		asr.l	#8,d1
0001F29E 3141 0010                  		move.w	d1,obVelX(a0)
0001F2A2 C1FC F900                  		muls.w	#-$700,d0
0001F2A6 E080                       		asr.l	#8,d0
0001F2A8 3140 0012                  		move.w	d0,obVelY(a0)
0001F2AC 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F2B2 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F2B6 6600                       		bne.s	Obj09_BumpSnd
0001F2B8 14BC 0002                  		move.b	#2,(a2)
0001F2BC 2028 0032                  		move.l	$32(a0),d0
0001F2C0 5380                       		subq.l	#1,d0
0001F2C2 2540 0004                  		move.l	d0,4(a2)
0001F2C6                            
0001F2C6                            Obj09_BumpSnd:
0001F2D0                            ; ===========================================================================
0001F2D0                            
0001F2D0                            Obj09_GOAL:
0001F2D0 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F2D4 6600                       		bne.s	Obj09_UPblock
0001F2D6 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F2E4 4E75                       		rts	
0001F2E6                            ; ===========================================================================
0001F2E6                            
0001F2E6                            Obj09_UPblock:
0001F2E6 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F2EA 6600                       		bne.s	Obj09_DOWNblock
0001F2EC 4A28 0036                  		tst.b	$36(a0)
0001F2F0 6600 0000                  		bne.w	Obj09_NoGlass
0001F2F4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F2FA 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F300 6700                       		beq.s	Obj09_UPsnd
0001F302 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F306 2268 0032                  		movea.l	$32(a0),a1
0001F30A 5389                       		subq.l	#1,a1
0001F30C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F310                            
0001F310                            Obj09_UPsnd:
0001F31A                            ; ===========================================================================
0001F31A                            
0001F31A                            Obj09_DOWNblock:
0001F31A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F31E 6600                       		bne.s	Obj09_Rblock
0001F320 4A28 0036                  		tst.b	$36(a0)
0001F324 6600 0000                  		bne.w	Obj09_NoGlass
0001F328 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F32E 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F334 6600                       		bne.s	Obj09_DOWNsnd
0001F336 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F33A 2268 0032                  		movea.l	$32(a0),a1
0001F33E 5389                       		subq.l	#1,a1
0001F340 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F344                            
0001F344                            Obj09_DOWNsnd:
0001F34E                            ; ===========================================================================
0001F34E                            
0001F34E                            Obj09_Rblock:
0001F34E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F352 6600                       		bne.s	Obj09_ChkGlass
0001F354 4A28 0037                  		tst.b	$37(a0)
0001F358 6600 0000                  		bne.w	Obj09_NoGlass
0001F35C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F362 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F366 6600                       		bne.s	Obj09_RevStage
0001F368 14BC 0004                  		move.b	#4,(a2)
0001F36C 2028 0032                  		move.l	$32(a0),d0
0001F370 5380                       		subq.l	#1,d0
0001F372 2540 0004                  		move.l	d0,4(a2)
0001F376                            
0001F376                            Obj09_RevStage:
0001F376 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F384                            ; ===========================================================================
0001F384                            
0001F384                            Obj09_ChkGlass:
0001F384 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F388 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F38A 0C00 002E                  		cmpi.b	#$2E,d0
0001F38E 6700                       		beq.s	Obj09_Glass
0001F390 0C00 002F                  		cmpi.b	#$2F,d0
0001F394 6700                       		beq.s	Obj09_Glass
0001F396 0C00 0030                  		cmpi.b	#$30,d0
0001F39A 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F39C                            
0001F39C                            Obj09_Glass:
0001F39C 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F3A0 6600                       		bne.s	Obj09_GlassSnd
0001F3A2 14BC 0006                  		move.b	#6,(a2)
0001F3A6 2268 0032                  		movea.l	$32(a0),a1
0001F3AA 5389                       		subq.l	#1,a1
0001F3AC 2549 0004                  		move.l	a1,4(a2)
0001F3B0 1011                       		move.b	(a1),d0
0001F3B2 5200                       		addq.b	#1,d0		; change glass type when touched
0001F3B4 0C00 0030                  		cmpi.b	#$30,d0
0001F3B8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F3BA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F3BC                            
0001F3BC                            Obj09_GlassUpdate:
0001F3BC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F3C0                            
0001F3C0                            Obj09_GlassSnd:
0001F3CA                            ; ===========================================================================
0001F3CA                            
0001F3CA                            Obj09_NoGlass:
0001F3CA 4E75                       		rts	
0001F3CC                            ; End of function Obj09_ChkItems2
0001F3CC                            ; End of function Obj09_ChkItems2
0001F3CC                            
0001F3CC                            		include	"_incObj\10.asm"
0001F3CC                            ; ---------------------------------------------------------------------------
0001F3CC                            ; Object 10 - After-Image
0001F3CC                            ; ---------------------------------------------------------------------------
0001F3CC                            
0001F3CC                            Obj10:
0001F3CC 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F3D2 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F3D6                            
0001F3D6 7000                             moveq   #0,d0
0001F3D8 1028 0024                        move.b   obRoutine(a0),d0
0001F3DC 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F3E0 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F3E4                            
0001F3E4                            ; ===========================================================================
0001F3E4                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F3E4                            ; ===========================================================================
0001F3E4                            Afterimage_Index:
0001F3E4 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3E6 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3E8 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3EA 0000                             dc.w AfterimageStart-Afterimage_Index
0001F3EC 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3EE 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3F0 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3F2 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F3F4 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F3F6                            ; ===========================================================================
0001F3F6                            NoAfterImage:
0001F3F6 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F3FA 4E75                             rts
0001F3FC                            ; ===========================================================================
0001F3FC                            AfterimageStart:
0001F3FC 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F402 6000                             bra.s   Afterimage_Show
0001F404                            ; ===========================================================================
0001F404                            AfterimageLPrio:
0001F404 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F408                            ; ===========================================================================
0001F408                            Afterimage_Show:
0001F408 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F40C 4EB9 0000 3A0C                   jsr   (RandomNumber).l         ; get a random number
0001F412 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F416 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F418 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F41A                            
0001F41A                            AfterimageException:
0001F41A 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F420 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F426 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F42C 4EF9 0000 F846                   jmp   DisplaySprite
0001F432                            ; ===========================================================================
0001F432                            AfterimageEnd:
0001F432 4EF9 0000 F886                   jmp   DeleteObject
0001F432 4EF9 0000 F886                   jmp   DeleteObject
0001F438                            
0001F438                            		include	"_inc\AnimateLevelGfx.asm"
0001F438                            ; ---------------------------------------------------------------------------
0001F438                            ; Subroutine to	animate	level graphics
0001F438                            ; ---------------------------------------------------------------------------
0001F438                            
0001F438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F438                            
0001F438                            
0001F438                            AnimateLevelGfx:
0001F438                            		;tst.w	(f_pause).w	; is the game paused?
0001F438                            		;bne.s	@ispaused	; if yes, branch
0001F438 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F43E 6100 0000                  		bsr.w	AniArt_GiantRing
0001F442 7000                       		moveq	#0,d0
0001F444 1038 FE10                  		move.b	(v_zone).w,d0
0001F448 D040                       		add.w	d0,d0
0001F44A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F44E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F452                            
0001F452                            	@ispaused:
0001F452 4E75                       		rts	
0001F454                            
0001F454                            ; ===========================================================================
0001F454 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F458 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F45C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F460 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F462                            ; ===========================================================================
0001F462                            ; ---------------------------------------------------------------------------
0001F462                            ; Animated pattern routine - Green Hill
0001F462                            ; ---------------------------------------------------------------------------
0001F462                            
0001F462                            AniArt_GHZ:
0001F462                            
0001F462                            AniArt_GHZ_Waterfall:
0001F462                            
0001F462 =00000008                  @size:		equ 8	; number of tiles per frame
0001F462                            
0001F462 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F466 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F468                            
0001F468 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F46E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F474 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F478 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F47C 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F480 6700                       		beq.s	@isframe0	; branch if frame 0
0001F482 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F486                            
0001F486                            	@isframe0:
0001F490 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F494 6000 0000                  		bra.w	LoadTiles
0001F498                            ; ===========================================================================
0001F498                            
0001F498                            AniArt_GHZ_Bigflower:
0001F498                            
0001F498 =00000010                  @size:		equ 16	; number of tiles per frame
0001F498                            
0001F498 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F49C 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F49E                            
0001F49E 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F4A4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F4AA 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F4AE 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F4B2 0240 0001                  		andi.w	#1,d0
0001F4B6 6700                       		beq.s	@isframe0
0001F4B8 43E9 0200                  		lea	@size*$20(a1),a1
0001F4BC                            
0001F4BC                            	@isframe0:
0001F4C6 323C 000F                  		move.w	#@size-1,d1
0001F4CA 6000 0000                  		bra.w	LoadTiles
0001F4CE                            ; ===========================================================================
0001F4CE                            
0001F4CE                            AniArt_GHZ_Smallflower:
0001F4CE                            
0001F4CE =0000000C                  @size:		equ 12	; number of tiles per frame
0001F4CE                            
0001F4CE 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F4D2 6A00                       		bpl.s	@end
0001F4D4                            
0001F4D4 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F4DA 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F4DE 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F4E2 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F4E6 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F4EA 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F4EE 6600                       		bne.s	@isframe1	; if not, branch
0001F4F0 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F4F6                            
0001F4F6                            	@isframe1:
0001F4F6 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F4F8 3200                       		move.w	d0,d1
0001F4FA D040                       		add.w	d0,d0
0001F4FC D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F508 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F50E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F512 323C 000B                  		move.w	#@size-1,d1
0001F516 6100 0000                  		bsr.w	LoadTiles
0001F51A                            
0001F51A                            @end:
0001F51A 4E75                       		rts	
0001F51C                            
0001F51C 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F520                            ; ===========================================================================
0001F520                            ; ---------------------------------------------------------------------------
0001F520                            ; Animated pattern routine - Marble
0001F520                            ; ---------------------------------------------------------------------------
0001F520                            
0001F520                            AniArt_MZ:
0001F520                            
0001F520                            AniArt_MZ_Lava:
0001F520                            
0001F520 =00000008                  @size:		equ 8	; number of tiles per frame
0001F520                            
0001F520 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F524 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F526                            
0001F526 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F52C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F532 7000                       		moveq	#0,d0
0001F534 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F538 5200                       		addq.b	#1,d0		; increment frame counter
0001F53A 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F53E 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F540 7000                       		moveq	#0,d0
0001F542                            
0001F542                            	@frame01or2:
0001F542 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F546 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F54A D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F556 323C 0007                  		move.w	#@size-1,d1
0001F55A 6100 0000                  		bsr.w	LoadTiles
0001F55E                            
0001F55E                            AniArt_MZ_Magma:
0001F55E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F562 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F564                            		
0001F564 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F56A 7000                       		moveq	#0,d0
0001F56C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F570 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F576 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F578 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F584 7600                       		moveq	#0,d3
0001F586 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F58A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F58E 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F592 343C 0003                  		move.w	#3,d2
0001F596                            
0001F596                            	@loop:
0001F596 3003                       		move.w	d3,d0
0001F598 D040                       		add.w	d0,d0
0001F59A 0240 001E                  		andi.w	#$1E,d0
0001F59E 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F5A4 3033 0000                  		move.w	(a3,d0.w),d0
0001F5A8 47F3 0000                  		lea	(a3,d0.w),a3
0001F5AC 224C                       		movea.l	a4,a1
0001F5AE 323C 001F                  		move.w	#$1F,d1
0001F5B2 4E93                       		jsr	(a3)
0001F5B4 5843                       		addq.w	#4,d3
0001F5B6 51CA FFDE                  		dbf	d2,@loop
0001F5BA 4E75                       		rts	
0001F5BC                            ; ===========================================================================
0001F5BC                            
0001F5BC                            AniArt_MZ_Torch:
0001F5BC                            
0001F5BC =00000006                  @size:		equ 6	; number of tiles per frame
0001F5BC                            
0001F5BC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F5C0 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F5C4                            		
0001F5C4 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F5CA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F5D0 7000                       		moveq	#0,d0
0001F5D2 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F5D6 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F5DA 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F5E0 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F5E4 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F5F0 323C 0005                  		move.w	#@size-1,d1
0001F5F4 6000 0000                  		bra.w	LoadTiles
0001F5F8                            
0001F5F8                            @end:
0001F5F8 4E75                       		rts	
0001F5FA                            ; ===========================================================================
0001F5FA                            ; ---------------------------------------------------------------------------
0001F5FA                            ; Animated pattern routine - Scrap Brain
0001F5FA                            ; ---------------------------------------------------------------------------
0001F5FA                            
0001F5FA                            AniArt_SBZ:
0001F5FA                            
0001F5FA =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5FA                            
0001F5FA 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F5FE 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F600                            		
0001F600 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F604 6000                       		bra.s	@chk_smokepuff2
0001F606                            ; ===========================================================================
0001F606                            
0001F606                            @smokepuff:
0001F606 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F60A 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F60C                            		
0001F60C 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F612 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F622 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F626 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F62A 0240 0007                  		andi.w	#7,d0
0001F62E 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F630 5340                       		subq.w	#1,d0
0001F632 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F636 43F1 0000                  		lea	(a1,d0.w),a1
0001F63A 323C 000B                  		move.w	#@size-1,d1
0001F63E 6000 0000                  		bra.w	LoadTiles
0001F642                            ; ===========================================================================
0001F642                            
0001F642                            @untilnextpuff:
0001F642 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F648                            
0001F648                            @clearsky:
0001F648 323C 0005                  		move.w	#(@size/2)-1,d1
0001F64C 6100 0000                  		bsr.w	LoadTiles
0001F650 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F656 323C 0005                  		move.w	#(@size/2)-1,d1
0001F65A 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F65E                            ; ===========================================================================
0001F65E                            
0001F65E                            @chk_smokepuff2:
0001F65E 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F662 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F664                            		
0001F664 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F668 6000                       		bra.s	@end
0001F66A                            ; ===========================================================================
0001F66A                            
0001F66A                            @smokepuff2:
0001F66A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F66E 6A00                       		bpl.s	@end		; branch if not 0
0001F670                            		
0001F670 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F676 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F686 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F68A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F68E 0240 0007                  		andi.w	#7,d0
0001F692 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F694 5340                       		subq.w	#1,d0
0001F696 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F69A 43F1 0000                  		lea	(a1,d0.w),a1
0001F69E 323C 000B                  		move.w	#@size-1,d1
0001F6A2 6000 0000                  		bra.w	LoadTiles
0001F6A6                            ; ===========================================================================
0001F6A6                            
0001F6A6                            @untilnextpuff2:
0001F6A6 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F6AC 609A                       		bra.s	@clearsky
0001F6AE                            ; ===========================================================================
0001F6AE                            
0001F6AE                            @end:
0001F6AE 4E75                       		rts	
0001F6B0                            ; ===========================================================================
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0                            ; Animated pattern routine - ending sequence
0001F6B0                            ; ---------------------------------------------------------------------------
0001F6B0                            
0001F6B0                            AniArt_Ending:
0001F6B0                            
0001F6B0                            AniArt_Ending_BigFlower:
0001F6B0                            
0001F6B0 =00000010                  @size:		equ 16	; number of tiles per frame
0001F6B0                            
0001F6B0 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F6B4 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F6B6                            		
0001F6B6 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F6BC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F6C2 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F6C6 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F6CA 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F6CE 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F6D2 6700                       		beq.s	@isframe0	; branch if frame 0
0001F6D4 43E9 0200                  		lea	@size*$20(a1),a1
0001F6D8 45EA 0200                  		lea	@size*$20(a2),a2
0001F6DC                            
0001F6DC                            	@isframe0:
0001F6E6 323C 000F                  		move.w	#@size-1,d1
0001F6EA 6100 0000                  		bsr.w	LoadTiles
0001F6EE 224A                       		movea.l	a2,a1
0001F6FA 323C 000F                  		move.w	#@size-1,d1
0001F6FE 6000 0000                  		bra.w	LoadTiles
0001F702                            ; ===========================================================================
0001F702                            
0001F702                            AniArt_Ending_SmallFlower:
0001F702                            
0001F702 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F702                            
0001F702 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F706 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F708                            		
0001F708 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F70E 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F712 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F716 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F71A 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F71E EF48                       		lsl.w	#7,d0		; multiply by $80
0001F720 3200                       		move.w	d0,d1
0001F722 D040                       		add.w	d0,d0
0001F724 D041                       		add.w	d1,d0		; multiply by 3
0001F730 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F736 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F73A 323C 000B                  		move.w	#@size-1,d1
0001F73E 6000 0000                  		bra.w	LoadTiles
0001F742                            ; ===========================================================================
0001F742 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F74A                            ; ===========================================================================
0001F74A                            
0001F74A                            AniArt_Ending_Flower3:
0001F74A                            
0001F74A =00000010                  @size:		equ 16	; number of tiles per frame
0001F74A                            
0001F74A 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F74E 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F750                            		
0001F750 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F756 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F75A 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F75E 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F762 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F766 E148                       		lsl.w	#8,d0		; multiply by $100
0001F768 D040                       		add.w	d0,d0		; multiply by 2
0001F774 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F778 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F77C 323C 000F                  		move.w	#@size-1,d1
0001F780 6000 0000                  		bra.w	LoadTiles
0001F784                            ; ===========================================================================
0001F784 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F788                            ; ===========================================================================
0001F788                            
0001F788                            AniArt_Ending_Flower4:
0001F788                            
0001F788 =00000010                  @size:		equ 16	; number of tiles per frame
0001F788                            
0001F788 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F78C 6A00                       		bpl.s	@end		; branch if not 0
0001F78E                            		
0001F78E 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F794 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F798 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F79C 0240 0003                  		andi.w	#3,d0
0001F7A0 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F7A4 E148                       		lsl.w	#8,d0		; multiply by $100
0001F7A6 D040                       		add.w	d0,d0		; multiply by 2
0001F7B2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F7B6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F7BA 323C 000F                  		move.w	#@size-1,d1
0001F7BE 6000 0000                  		bra.w	LoadTiles
0001F7C2                            ; ===========================================================================
0001F7C2                            
0001F7C2                            @end:
0001F7C2 4E75                       		rts	
0001F7C4                            ; ===========================================================================
0001F7C4                            
0001F7C4                            AniArt_none:
0001F7C4 4E75                       		rts	
0001F7C6                            
0001F7C6                            ; ---------------------------------------------------------------------------
0001F7C6                            ; Subroutine to	transfer graphics to VRAM
0001F7C6                            
0001F7C6                            ; input:
0001F7C6                            ;	a1 = source address
0001F7C6                            ;	a6 = vdp_data_port ($C00000)
0001F7C6                            ;	d1 = number of tiles to load (minus one)
0001F7C6                            ; ---------------------------------------------------------------------------
0001F7C6                            
0001F7C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F7C6                            
0001F7C6                            
0001F7C6                            LoadTiles:
0001F7C6 2C99                       		move.l	(a1)+,(a6)
0001F7C8 2C99                       		move.l	(a1)+,(a6)
0001F7CA 2C99                       		move.l	(a1)+,(a6)
0001F7CC 2C99                       		move.l	(a1)+,(a6)
0001F7CE 2C99                       		move.l	(a1)+,(a6)
0001F7D0 2C99                       		move.l	(a1)+,(a6)
0001F7D2 2C99                       		move.l	(a1)+,(a6)
0001F7D4 2C99                       		move.l	(a1)+,(a6)
0001F7D6 51C9 FFEE                  		dbf	d1,LoadTiles
0001F7DA 4E75                       		rts	
0001F7DC                            ; End of function LoadTiles
0001F7DC                            
0001F7DC                            ; ===========================================================================
0001F7DC                            ; ---------------------------------------------------------------------------
0001F7DC                            ; Animated pattern routine - more Marble Zone
0001F7DC                            ; ---------------------------------------------------------------------------
0001F7DC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F7E0 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F7E4 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F7E8 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F7EC 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F7F0 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F7F4 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F7F8 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F7FC                            ; ===========================================================================
0001F7FC                            
0001F7FC                            loc_1C3EE:
0001F7FC 2C91                       		move.l	(a1),(a6)
0001F7FE 43E9 0010                  		lea	$10(a1),a1
0001F802 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F806 4E75                       		rts	
0001F808                            ; ===========================================================================
0001F808                            
0001F808                            loc_1C3FA:
0001F808 2029 0002                  		move.l	2(a1),d0
0001F80C 1029 0001                  		move.b	1(a1),d0
0001F810 E098                       		ror.l	#8,d0
0001F812 2C80                       		move.l	d0,(a6)
0001F814 43E9 0010                  		lea	$10(a1),a1
0001F818 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F81C 4E75                       		rts	
0001F81E                            ; ===========================================================================
0001F81E                            
0001F81E                            loc_1C410:
0001F81E 2CA9 0002                  		move.l	2(a1),(a6)
0001F822 43E9 0010                  		lea	$10(a1),a1
0001F826 51C9 FFF6                  		dbf	d1,loc_1C410
0001F82A 4E75                       		rts	
0001F82C                            ; ===========================================================================
0001F82C                            
0001F82C                            loc_1C41E:
0001F82C 2029 0004                  		move.l	4(a1),d0
0001F830 1029 0003                  		move.b	3(a1),d0
0001F834 E098                       		ror.l	#8,d0
0001F836 2C80                       		move.l	d0,(a6)
0001F838 43E9 0010                  		lea	$10(a1),a1
0001F83C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F840 4E75                       		rts	
0001F842                            ; ===========================================================================
0001F842                            
0001F842                            loc_1C434:
0001F842 2CA9 0004                  		move.l	4(a1),(a6)
0001F846 43E9 0010                  		lea	$10(a1),a1
0001F84A 51C9 FFF6                  		dbf	d1,loc_1C434
0001F84E 4E75                       		rts	
0001F850                            ; ===========================================================================
0001F850                            
0001F850                            loc_1C442:
0001F850 2029 0006                  		move.l	6(a1),d0
0001F854 1029 0005                  		move.b	5(a1),d0
0001F858 E098                       		ror.l	#8,d0
0001F85A 2C80                       		move.l	d0,(a6)
0001F85C 43E9 0010                  		lea	$10(a1),a1
0001F860 51C9 FFEE                  		dbf	d1,loc_1C442
0001F864 4E75                       		rts	
0001F866                            ; ===========================================================================
0001F866                            
0001F866                            loc_1C458:
0001F866 2CA9 0006                  		move.l	6(a1),(a6)
0001F86A 43E9 0010                  		lea	$10(a1),a1
0001F86E 51C9 FFF6                  		dbf	d1,loc_1C458
0001F872 4E75                       		rts	
0001F874                            ; ===========================================================================
0001F874                            
0001F874                            loc_1C466:
0001F874 2029 0008                  		move.l	8(a1),d0
0001F878 1029 0007                  		move.b	7(a1),d0
0001F87C E098                       		ror.l	#8,d0
0001F87E 2C80                       		move.l	d0,(a6)
0001F880 43E9 0010                  		lea	$10(a1),a1
0001F884 51C9 FFEE                  		dbf	d1,loc_1C466
0001F888 4E75                       		rts	
0001F88A                            ; ===========================================================================
0001F88A                            
0001F88A                            loc_1C47C:
0001F88A 2CA9 0008                  		move.l	8(a1),(a6)
0001F88E 43E9 0010                  		lea	$10(a1),a1
0001F892 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F896 4E75                       		rts	
0001F898                            ; ===========================================================================
0001F898                            
0001F898                            loc_1C48A:
0001F898 2029 000A                  		move.l	$A(a1),d0
0001F89C 1029 0009                  		move.b	9(a1),d0
0001F8A0 E098                       		ror.l	#8,d0
0001F8A2 2C80                       		move.l	d0,(a6)
0001F8A4 43E9 0010                  		lea	$10(a1),a1
0001F8A8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F8AC 4E75                       		rts	
0001F8AE                            ; ===========================================================================
0001F8AE                            
0001F8AE                            loc_1C4A0:
0001F8AE 2CA9 000A                  		move.l	$A(a1),(a6)
0001F8B2 43E9 0010                  		lea	$10(a1),a1
0001F8B6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F8BA 4E75                       		rts	
0001F8BC                            ; ===========================================================================
0001F8BC                            
0001F8BC                            loc_1C4AE:
0001F8BC 2029 000C                  		move.l	$C(a1),d0
0001F8C0 1029 000B                  		move.b	$B(a1),d0
0001F8C4 E098                       		ror.l	#8,d0
0001F8C6 2C80                       		move.l	d0,(a6)
0001F8C8 43E9 0010                  		lea	$10(a1),a1
0001F8CC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F8D0 4E75                       		rts	
0001F8D2                            ; ===========================================================================
0001F8D2                            
0001F8D2                            loc_1C4C4:
0001F8D2 2CA9 000C                  		move.l	$C(a1),(a6)
0001F8D6 43E9 0010                  		lea	$10(a1),a1
0001F8DA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F8DE 4E75                       		rts	
0001F8E0                            ; ===========================================================================
0001F8E0                            
0001F8E0                            loc_1C4D2:
0001F8E0 2029 000C                  		move.l	$C(a1),d0
0001F8E4 E198                       		rol.l	#8,d0
0001F8E6 1011                       		move.b	0(a1),d0
0001F8E8 2C80                       		move.l	d0,(a6)
0001F8EA 43E9 0010                  		lea	$10(a1),a1
0001F8EE 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F8F2 4E75                       		rts	
0001F8F4                            ; ===========================================================================
0001F8F4                            
0001F8F4                            loc_1C4E8:
0001F8F4 3CA9 000E                  		move.w	$E(a1),(a6)
0001F8F8 3C91                       		move.w	0(a1),(a6)
0001F8FA 43E9 0010                  		lea	$10(a1),a1
0001F8FE 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F902 4E75                       		rts	
0001F904                            ; ===========================================================================
0001F904                            
0001F904                            loc_1C4FA:
0001F904 2011                       		move.l	0(a1),d0
0001F906 1029 000F                  		move.b	$F(a1),d0
0001F90A E098                       		ror.l	#8,d0
0001F90C 2C80                       		move.l	d0,(a6)
0001F90E 43E9 0010                  		lea	$10(a1),a1
0001F912 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F916 4E75                       		rts	
0001F918                            
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            ; Animated pattern routine - giant ring
0001F918                            ; ---------------------------------------------------------------------------
0001F918                            
0001F918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F918                            
0001F918                            
0001F918                            AniArt_GiantRing:
0001F918                            
0001F918 =0000000E                  @size:		equ 14
0001F918                            
0001F918 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F91C 6600                       		bne.s	@loadTiles		; If so, get to work
0001F91E 4E75                       		rts	
0001F920                            ; ===========================================================================
0001F920                            ; loc_1C518:
0001F920                            @loadTiles:
0001F920 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F926 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F92C 7000                       		moveq	#0,d0
0001F92E 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F932 43F1 0000                  		lea	(a1,d0.w),a1
0001F936                            		; Turn VRAM address into VDP command
0001F936 0640 8000                  		addi.w	#$8000,d0
0001F93A E588                       		lsl.l	#2,d0
0001F93C E448                       		lsr.w	#2,d0
0001F93E 0040 4000                  		ori.w	#$4000,d0
0001F942 4840                       		swap	d0
0001F944                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F944 2D40 0004                  		move.l	d0,4(a6)
0001F948                            
0001F948 323C 000D                  		move.w	#@size-1,d1
0001F94C 6000 FE78                  		bra.w	LoadTiles
0001F950                            
0001F950                            ; End of function AniArt_GiantRing
0001F950                            ; End of function AniArt_GiantRing
0001F950                            
0001F950                            		include	"_incObj\21 HUD.asm"
0001F950                            ; ---------------------------------------------------------------------------
0001F950                            ; Object 21 - SCORE, TIME, RINGS
0001F950                            ; ---------------------------------------------------------------------------
0001F950                            
0001F950                            HUD:
0001F950 7000                       		moveq	#0,d0
0001F952 1028 0024                  		move.b	obRoutine(a0),d0
0001F956 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F95A 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F95E                            ; ===========================================================================
0001F95E 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F960 0000                       		dc.w HUD_Flash-HUD_Index
0001F962                            ; ===========================================================================
0001F962                            
0001F962                            HUD_Main:	; Routine 0
0001F962 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F966 317C 0090 0008             		move.w	#$90,obX(a0)
0001F96C 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F972 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F97A 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F980 117C 0000 0001             		move.b	#0,obRender(a0)
0001F986 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F98C                            
0001F98C                            HUD_Flash:	; Routine 2
0001F98C 7000                       		moveq	#0,d0
0001F98E 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F994 6600                       		bne.s	@display
0001F996 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F99A 6600                       		bne.s	@norings	; if so, branch
0001F99C 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F99E                            ; ===========================================================================
0001F99E                            
0001F99E                            @norings:
0001F99E 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F9A4 6600                       		bne.s	@display	; if not, branch
0001F9A6 5440                       		addq.w	#2,d0		; make time counter flash red
0001F9A8                            
0001F9A8                            	@display:
0001F9A8 1140 001A                  		move.b	d0,obFrame(a0)
0001F9AC 4EF9 0000 F846             		jmp	DisplaySprite
0001F9AC 4EF9 0000 F846             		jmp	DisplaySprite
0001F9B2                            Map_HUD:	include	"_maps\HUD.asm"
0001F9B2                            ; ---------------------------------------------------------------------------
0001F9B2                            ; Sprite mappings - SCORE, TIME, RINGS
0001F9B2                            ; ---------------------------------------------------------------------------
0001F9B2                            Map_HUD_internal:
0001F9B2 0000                       		dc.w @allyellow-Map_HUD_internal
0001F9B4 0000                       		dc.w @ringred-Map_HUD_internal
0001F9B6 0000                       		dc.w @timered-Map_HUD_internal
0001F9B8 0000                       		dc.w @allred-Map_HUD_internal
0001F9BA 0A                         @allyellow:	dc.b $A
0001F9BB 800D 8000 00               		dc.b $80, $D, $80, 0, 0		; SCOR
0001F9C0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20	; E nnn
0001F9C5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40	; nnnn
0001F9CA 900D 8010 00               		dc.b $90, $D, $80, $10,	0	; TIME
0001F9CF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28	; n:nn
0001F9D4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0		; RING
0001F9D9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20	; S
0001F9DE A009 8030 30               		dc.b $A0, 9, $80, $30, $30	; rings
0001F9E3 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; icon
0001F9E8 400D 810E 10               		dc.b $40, $D, $81, $E, $10	; SONIC x nn
0001F9ED 00                         		dc.b 0
0001F9EE 08                         @ringred:	dc.b $8
0001F9EF 800D 8000 00               		dc.b $80, $D, $80, 0, 0		; SCOR
0001F9F4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20	; E nnn
0001F9F9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40	; nnnn
0001F9FE 900D 8010 00               		dc.b $90, $D, $80, $10,	0	; TIME
0001FA03 900D 8028 28               		dc.b $90, $D, $80, $28,	$28	; n:nn
0001FA08 A009 8030 30               		dc.b $A0, 9, $80, $30, $30	; rings
0001FA0D 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; icon
0001FA12 400D 810E 10               		dc.b $40, $D, $81, $E, $10	; SONIC x nn
0001FA17 00                         		dc.b 0
0001FA18 09                         @timered:	dc.b $9
0001FA19 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA1E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA23 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA28 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA2D A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FA32 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FA37 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA3C 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA41 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA46 00                         		dc.b 0
0001FA47 07                         @allred:	dc.b $7
0001FA48 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA4D 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA52 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA57 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA5C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA61 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA66 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA6C 00                         		even
0001FA6C 00                         		even
0001FA6C                            
0001FA6C                            ; ---------------------------------------------------------------------------
0001FA6C                            ; Add points subroutine
0001FA6C                            ; ---------------------------------------------------------------------------
0001FA6C                            
0001FA6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA6C                            
0001FA6C                            
0001FA6C                            AddPoints:
0001FA6C 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FA72                            
0001FA72                            
0001FA72 47F8 FE26                  			lea     (v_score).w,a3
0001FA76 D193                       			add.l   d0,(a3)
0001FA78 223C 000F 423F             			move.l  #999999,d1
0001FA7E B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FA80 6200                       			bhi.s   @belowmax ; if yes, branch
0001FA82 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FA84                            		@belowmax:
0001FA84 2013                       			move.l  (a3),d0
0001FA86 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FA8A 6500                       			blo.s   @noextralife ; if not, branch
0001FA8C                            
0001FA8C 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FA94 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FA98 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FA9A 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FA9E 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FAAC                            
0001FAAC                            @locret_1C6B6:
0001FAAC                            @noextralife:
0001FAAC 4E75                       		rts	
0001FAAE                            ; End of function AddPoints
0001FAAE                            
0001FAAE                            		include	"_inc\HUD_Update.asm"
0001FAAE                            ; ---------------------------------------------------------------------------
0001FAAE                            ; Subroutine to	update the HUD
0001FAAE                            ; ---------------------------------------------------------------------------
0001FAAE                            
0001FAAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FAAE                            
0001FAAE                            hudVRAM:	macro loc
0001FAAE                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FAAE                            		endm
0001FAAE                            
0001FAAE                            
0001FAAE                            HUD_Update:
0001FAAE 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FAB2 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FAB6 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FABA 6700                       		beq.s	@chkrings	; if not, branch
0001FABC                            
0001FABC 4238 FE1F                  		clr.b	(f_scorecount).w
0001FAC0 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FAC6 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FACA 6100 0000                  		bsr.w	Hud_Score
0001FACE                            
0001FACE                            	@chkrings:
0001FACE 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FAD2 6700                       		beq.s	@chktime	; if not, branch
0001FAD4 6A00                       		bpl.s	@notzero
0001FAD6 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FADA                            
0001FADA                            	@notzero:
0001FADA 4238 FE1D                  		clr.b	(f_ringcount).w
0001FADE 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FAE4 7200                       		moveq	#0,d1
0001FAE6 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FAEA 6100 0000                  		bsr.w	Hud_Rings
0001FAEE                            
0001FAEE                            	@chktime:
0001FAEE 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FAF2 6700                       		beq.s	@chklives	; if not, branch
0001FAF4 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FAF8 6600                       		bne.s	@chklives	; if yes, branch
0001FAFA 43F8 FE22                  		lea	(v_time).w,a1
0001FAFE 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FB04 6700                       		beq.s	TimeOver	; if yes, branch
0001FB06                            
0001FB06 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FB08 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB0C 6500                       		bcs.s	@chklives
0001FB0E 12BC 0000                  		move.b	#0,(a1)
0001FB12 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FB14 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FB18 6500                       		bcs.s	@updatetime
0001FB1A 12BC 0000                  		move.b	#0,(a1)
0001FB1E 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FB20 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FB24 6500                       		bcs.s	@updatetime
0001FB26 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FB2A                            
0001FB2A                            	@updatetime:
0001FB2A 203C 5E40 0003             		hudVRAM	$DE40
0001FB30 7200                       		moveq	#0,d1
0001FB32 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FB36 6100 0000                  		bsr.w	Hud_Mins
0001FB3A 203C 5EC0 0003             		hudVRAM	$DEC0
0001FB40 7200                       		moveq	#0,d1
0001FB42 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FB46 6100 0000                  		bsr.w	Hud_Secs
0001FB4A                            
0001FB4A                            	@chklives:
0001FB4A 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FB4E 6700                       		beq.s	@chkbonus	; if not, branch
0001FB50 4238 FE1C                  		clr.b	(f_lifecount).w
0001FB54 6100 0000                  		bsr.w	Hud_Lives
0001FB58                            
0001FB58                            	@chkbonus:
0001FB58 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FB5C 6700                       		beq.s	@finish		; if not, branch
0001FB5E 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FB6C 7200                       		moveq	#0,d1
0001FB6E 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FB72 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB76 7200                       		moveq	#0,d1
0001FB78 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FB7C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB80                            
0001FB80                            	@finish:
0001FB80 4E75                       		rts	
0001FB82                            ; ===========================================================================
0001FB82                            
0001FB82                            TimeOver:
0001FB82 4238 FE1E                  		clr.b	(f_timecount).w
0001FB86 41F8 D000                  		lea	(v_player).w,a0
0001FB8A 2448                       		movea.l	a0,a2
0001FB8C 6100 E85E                  		bsr.w	KillSonic
0001FB90 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FB96 4E75                       		rts	
0001FB98                            ; ===========================================================================
0001FB98                            
0001FB98                            HudDebug:
0001FB98 6100 0000                  		bsr.w	HudDb_XY
0001FB9C 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FBA0 6700                       		beq.s	@objcounter	; if not, branch
0001FBA2 6A00                       		bpl.s	@notzero
0001FBA4 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FBA8                            
0001FBA8                            	@notzero:
0001FBA8 4238 FE1D                  		clr.b	(f_ringcount).w
0001FBAC 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FBB2 7200                       		moveq	#0,d1
0001FBB4 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FBB8 6100 0000                  		bsr.w	Hud_Rings
0001FBBC                            
0001FBBC                            	@objcounter:
0001FBBC 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FBC2 7200                       		moveq	#0,d1
0001FBC4 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FBC8 6100 0000                  		bsr.w	Hud_Secs
0001FBCC 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FBD0 6700                       		beq.s	@chkbonus	; if not, branch
0001FBD2 4238 FE1C                  		clr.b	(f_lifecount).w
0001FBD6 6100 0000                  		bsr.w	Hud_Lives
0001FBDA                            
0001FBDA                            	@chkbonus:
0001FBDA 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FBDE 6700                       		beq.s	@finish		; if not, branch
0001FBE0 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FBEE 7200                       		moveq	#0,d1
0001FBF0 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FBF4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBF8 7200                       		moveq	#0,d1
0001FBFA 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FBFE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FC02                            
0001FC02                            	@finish:
0001FC02 4E75                       		rts	
0001FC04                            ; End of function HUD_Update
0001FC04                            
0001FC04                            ; ---------------------------------------------------------------------------
0001FC04                            ; Subroutine to	load "0" on the	HUD
0001FC04                            ; ---------------------------------------------------------------------------
0001FC04                            
0001FC04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC04                            
0001FC04                            
0001FC04                            Hud_LoadZero:
0001FC0E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FC12 343C 0002                  		move.w	#2,d2
0001FC16 6000                       		bra.s	loc_1C83E
0001FC18                            ; End of function Hud_LoadZero
0001FC18                            
0001FC18                            ; ---------------------------------------------------------------------------
0001FC18                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FC18                            ; ---------------------------------------------------------------------------
0001FC18                            
0001FC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC18                            
0001FC18                            
0001FC18                            Hud_Base:
0001FC18 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FC1E 6100 0000                  		bsr.w	Hud_Lives
0001FC2C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FC30 343C 000E                  		move.w	#$E,d2
0001FC34                            
0001FC34                            loc_1C83E:
0001FC34 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC38                            
0001FC38                            loc_1C842:
0001FC38 323C 000F                  		move.w	#$F,d1
0001FC3C 101A                       		move.b	(a2)+,d0
0001FC3E 6B00                       		bmi.s	loc_1C85E
0001FC40 4880                       		ext.w	d0
0001FC42 EB48                       		lsl.w	#5,d0
0001FC44 47F1 0000                  		lea	(a1,d0.w),a3
0001FC48                            
0001FC48                            loc_1C852:
0001FC48 2C9B                       		move.l	(a3)+,(a6)
0001FC4A 51C9 FFFC                  		dbf	d1,loc_1C852
0001FC4E                            
0001FC4E                            loc_1C858:
0001FC4E 51CA FFE8                  		dbf	d2,loc_1C842
0001FC52                            
0001FC52 4E75                       		rts	
0001FC54                            ; ===========================================================================
0001FC54                            
0001FC54                            loc_1C85E:
0001FC54 2CBC 0000 0000             		move.l	#0,(a6)
0001FC5A 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FC5E                            
0001FC5E 60EE                       		bra.s	loc_1C858
0001FC60                            ; End of function Hud_Base
0001FC60                            
0001FC60                            ; ===========================================================================
0001FC60 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FC6C FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FC70                            ; ---------------------------------------------------------------------------
0001FC70                            ; Subroutine to	load debug mode	numbers	patterns
0001FC70                            ; ---------------------------------------------------------------------------
0001FC70                            
0001FC70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC70                            
0001FC70                            
0001FC70                            HudDb_XY:
0001FC7A 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FC7E 4841                       		swap	d1
0001FC80 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FC84 6100                       		bsr.s	HudDb_XY2
0001FC86 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FC8A 4841                       		swap	d1
0001FC8C 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FC90                            ; End of function HudDb_XY
0001FC90                            
0001FC90                            
0001FC90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC90                            
0001FC90                            
0001FC90                            HudDb_XY2:
0001FC90 7C07                       		moveq	#7,d6
0001FC92 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FC98                            
0001FC98                            HudDb_XYLoop:
0001FC98 E959                       		rol.w	#4,d1
0001FC9A 3401                       		move.w	d1,d2
0001FC9C 0242 000F                  		andi.w	#$F,d2
0001FCA0 0C42 000A                  		cmpi.w	#$A,d2
0001FCA4 6500                       		bcs.s	loc_1C8B2
0001FCA6 5E42                       		addq.w	#7,d2
0001FCA8                            
0001FCA8                            loc_1C8B2:
0001FCA8 EB4A                       		lsl.w	#5,d2
0001FCAA 47F1 2000                  		lea	(a1,d2.w),a3
0001FCAE 2C9B                       		move.l	(a3)+,(a6)
0001FCB0 2C9B                       		move.l	(a3)+,(a6)
0001FCB2 2C9B                       		move.l	(a3)+,(a6)
0001FCB4 2C9B                       		move.l	(a3)+,(a6)
0001FCB6 2C9B                       		move.l	(a3)+,(a6)
0001FCB8 2C9B                       		move.l	(a3)+,(a6)
0001FCBA 2C9B                       		move.l	(a3)+,(a6)
0001FCBC 2C9B                       		move.l	(a3)+,(a6)
0001FCBE 4841                       		swap	d1
0001FCC0 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FCC4                            
0001FCC4 4E75                       		rts	
0001FCC6                            ; End of function HudDb_XY2
0001FCC6                            
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6                            ; Subroutine to	load rings numbers patterns
0001FCC6                            ; ---------------------------------------------------------------------------
0001FCC6                            
0001FCC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCC6                            
0001FCC6                            
0001FCC6                            Hud_Rings:
0001FCC6 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FCCC 7C02                       		moveq	#2,d6
0001FCCE 6000                       		bra.s	Hud_LoadArt
0001FCD0                            ; End of function Hud_Rings
0001FCD0                            
0001FCD0                            ; ---------------------------------------------------------------------------
0001FCD0                            ; Subroutine to	load score numbers patterns
0001FCD0                            ; ---------------------------------------------------------------------------
0001FCD0                            
0001FCD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCD0                            
0001FCD0                            
0001FCD0                            Hud_Score:
0001FCD0 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FCD6 7C05                       		moveq	#5,d6
0001FCD8                            
0001FCD8                            Hud_LoadArt:
0001FCD8 7800                       		moveq	#0,d4
0001FCDA 43FA 0000                  		lea	Art_Hud(pc),a1
0001FCDE                            
0001FCDE                            Hud_ScoreLoop:
0001FCDE 7400                       		moveq	#0,d2
0001FCE0 261A                       		move.l	(a2)+,d3
0001FCE2                            
0001FCE2                            loc_1C8EC:
0001FCE2 9283                       		sub.l	d3,d1
0001FCE4 6500                       		bcs.s	loc_1C8F4
0001FCE6 5242                       		addq.w	#1,d2
0001FCE8 60F8                       		bra.s	loc_1C8EC
0001FCEA                            ; ===========================================================================
0001FCEA                            
0001FCEA                            loc_1C8F4:
0001FCEA D283                       		add.l	d3,d1
0001FCEC 4A42                       		tst.w	d2
0001FCEE 6700                       		beq.s	loc_1C8FE
0001FCF0 383C 0001                  		move.w	#1,d4
0001FCF4                            
0001FCF4                            loc_1C8FE:
0001FCF4 4A44                       		tst.w	d4
0001FCF6 6700                       		beq.s	loc_1C92C
0001FCF8 ED4A                       		lsl.w	#6,d2
0001FCFA 2D40 0004                  		move.l	d0,4(a6)
0001FCFE 47F1 2000                  		lea	(a1,d2.w),a3
0001FD02 2C9B                       		move.l	(a3)+,(a6)
0001FD04 2C9B                       		move.l	(a3)+,(a6)
0001FD06 2C9B                       		move.l	(a3)+,(a6)
0001FD08 2C9B                       		move.l	(a3)+,(a6)
0001FD0A 2C9B                       		move.l	(a3)+,(a6)
0001FD0C 2C9B                       		move.l	(a3)+,(a6)
0001FD0E 2C9B                       		move.l	(a3)+,(a6)
0001FD10 2C9B                       		move.l	(a3)+,(a6)
0001FD12 2C9B                       		move.l	(a3)+,(a6)
0001FD14 2C9B                       		move.l	(a3)+,(a6)
0001FD16 2C9B                       		move.l	(a3)+,(a6)
0001FD18 2C9B                       		move.l	(a3)+,(a6)
0001FD1A 2C9B                       		move.l	(a3)+,(a6)
0001FD1C 2C9B                       		move.l	(a3)+,(a6)
0001FD1E 2C9B                       		move.l	(a3)+,(a6)
0001FD20 2C9B                       		move.l	(a3)+,(a6)
0001FD22                            
0001FD22                            loc_1C92C:
0001FD22 0680 0040 0000             		addi.l	#$400000,d0
0001FD28 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FD2C                            
0001FD2C 4E75                       		rts	
0001FD2E                            
0001FD2E                            ; End of function Hud_Score
0001FD2E                            ; End of function Hud_Score
0001FD2E                            
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E                            ; Subroutine to	load countdown numbers on the continue screen
0001FD2E                            ; ---------------------------------------------------------------------------
0001FD2E                            
0001FD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD2E                            
0001FD2E                            
0001FD2E                            ContScrCounter:
0001FD38 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FD3E 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FD44 7C01                       		moveq	#1,d6
0001FD46 7800                       		moveq	#0,d4
0001FD48 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FD4C                            
0001FD4C                            ContScr_Loop:
0001FD4C 7400                       		moveq	#0,d2
0001FD4E 261A                       		move.l	(a2)+,d3
0001FD50                            
0001FD50                            loc_1C95A:
0001FD50 9283                       		sub.l	d3,d1
0001FD52 6500                       		blo.s	loc_1C962
0001FD54 5242                       		addq.w	#1,d2
0001FD56 60F8                       		bra.s	loc_1C95A
0001FD58                            ; ===========================================================================
0001FD58                            
0001FD58                            loc_1C962:
0001FD58 D283                       		add.l	d3,d1
0001FD5A ED4A                       		lsl.w	#6,d2
0001FD5C 47F1 2000                  		lea	(a1,d2.w),a3
0001FD60 2C9B                       		move.l	(a3)+,(a6)
0001FD62 2C9B                       		move.l	(a3)+,(a6)
0001FD64 2C9B                       		move.l	(a3)+,(a6)
0001FD66 2C9B                       		move.l	(a3)+,(a6)
0001FD68 2C9B                       		move.l	(a3)+,(a6)
0001FD6A 2C9B                       		move.l	(a3)+,(a6)
0001FD6C 2C9B                       		move.l	(a3)+,(a6)
0001FD6E 2C9B                       		move.l	(a3)+,(a6)
0001FD70 2C9B                       		move.l	(a3)+,(a6)
0001FD72 2C9B                       		move.l	(a3)+,(a6)
0001FD74 2C9B                       		move.l	(a3)+,(a6)
0001FD76 2C9B                       		move.l	(a3)+,(a6)
0001FD78 2C9B                       		move.l	(a3)+,(a6)
0001FD7A 2C9B                       		move.l	(a3)+,(a6)
0001FD7C 2C9B                       		move.l	(a3)+,(a6)
0001FD7E 2C9B                       		move.l	(a3)+,(a6)
0001FD80 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FD84                            
0001FD84 4E75                       		rts	
0001FD86                            ; End of function ContScrCounter
0001FD86                            
0001FD86                            ; ===========================================================================
0001FD86                            
0001FD86                            		include	"_inc\HUD (part 2).asm"
0001FD86                            ; ---------------------------------------------------------------------------
0001FD86                            ; HUD counter sizes
0001FD86                            ; ---------------------------------------------------------------------------
0001FD86 0001 86A0                  Hud_100000:	dc.l 100000
0001FD8A 0000 2710                  Hud_10000:	dc.l 10000
0001FD8E 0000 03E8                  Hud_1000:	dc.l 1000
0001FD92 0000 0064                  Hud_100:	dc.l 100
0001FD96 0000 000A                  Hud_10:		dc.l 10
0001FD9A 0000 0001                  Hud_1:		dc.l 1
0001FD9E                            
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E                            ; Subroutine to	load time numbers patterns
0001FD9E                            ; ---------------------------------------------------------------------------
0001FD9E                            
0001FD9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD9E                            
0001FD9E                            
0001FD9E                            Hud_Mins:
0001FD9E 45F9 0001 FD9A             		lea	(Hud_1).l,a2
0001FDA4 7C00                       		moveq	#0,d6
0001FDA6 6000                       		bra.s	loc_1C9BA
0001FDA8                            ; End of function Hud_Mins
0001FDA8                            
0001FDA8                            
0001FDA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDA8                            
0001FDA8                            
0001FDA8                            Hud_Secs:
0001FDA8 45F9 0001 FD96             		lea	(Hud_10).l,a2
0001FDAE 7C01                       		moveq	#1,d6
0001FDB0                            
0001FDB0                            loc_1C9BA:
0001FDB0 7800                       		moveq	#0,d4
0001FDB2 43FA 0000                  		lea	Art_Hud(pc),a1
0001FDB6                            
0001FDB6                            Hud_TimeLoop:
0001FDB6 7400                       		moveq	#0,d2
0001FDB8 261A                       		move.l	(a2)+,d3
0001FDBA                            
0001FDBA                            loc_1C9C4:
0001FDBA 9283                       		sub.l	d3,d1
0001FDBC 6500                       		bcs.s	loc_1C9CC
0001FDBE 5242                       		addq.w	#1,d2
0001FDC0 60F8                       		bra.s	loc_1C9C4
0001FDC2                            ; ===========================================================================
0001FDC2                            
0001FDC2                            loc_1C9CC:
0001FDC2 D283                       		add.l	d3,d1
0001FDC4 4A42                       		tst.w	d2
0001FDC6 6700                       		beq.s	loc_1C9D6
0001FDC8 383C 0001                  		move.w	#1,d4
0001FDCC                            
0001FDCC                            loc_1C9D6:
0001FDCC ED4A                       		lsl.w	#6,d2
0001FDCE 2D40 0004                  		move.l	d0,4(a6)
0001FDD2 47F1 2000                  		lea	(a1,d2.w),a3
0001FDD6 2C9B                       		move.l	(a3)+,(a6)
0001FDD8 2C9B                       		move.l	(a3)+,(a6)
0001FDDA 2C9B                       		move.l	(a3)+,(a6)
0001FDDC 2C9B                       		move.l	(a3)+,(a6)
0001FDDE 2C9B                       		move.l	(a3)+,(a6)
0001FDE0 2C9B                       		move.l	(a3)+,(a6)
0001FDE2 2C9B                       		move.l	(a3)+,(a6)
0001FDE4 2C9B                       		move.l	(a3)+,(a6)
0001FDE6 2C9B                       		move.l	(a3)+,(a6)
0001FDE8 2C9B                       		move.l	(a3)+,(a6)
0001FDEA 2C9B                       		move.l	(a3)+,(a6)
0001FDEC 2C9B                       		move.l	(a3)+,(a6)
0001FDEE 2C9B                       		move.l	(a3)+,(a6)
0001FDF0 2C9B                       		move.l	(a3)+,(a6)
0001FDF2 2C9B                       		move.l	(a3)+,(a6)
0001FDF4 2C9B                       		move.l	(a3)+,(a6)
0001FDF6 0680 0040 0000             		addi.l	#$400000,d0
0001FDFC 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FE00                            
0001FE00 4E75                       		rts	
0001FE02                            ; End of function Hud_Secs
0001FE02                            
0001FE02                            ; ---------------------------------------------------------------------------
0001FE02                            ; Subroutine to	load time/ring bonus numbers patterns
0001FE02                            ; ---------------------------------------------------------------------------
0001FE02                            
0001FE02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE02                            
0001FE02                            
0001FE02                            Hud_TimeRingBonus:
0001FE02 45F9 0001 FD8E             		lea	(Hud_1000).l,a2
0001FE08 7C03                       		moveq	#3,d6
0001FE0A 7800                       		moveq	#0,d4
0001FE0C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE10                            
0001FE10                            Hud_BonusLoop:
0001FE10 7400                       		moveq	#0,d2
0001FE12 261A                       		move.l	(a2)+,d3
0001FE14                            
0001FE14                            loc_1CA1E:
0001FE14 9283                       		sub.l	d3,d1
0001FE16 6500                       		bcs.s	loc_1CA26
0001FE18 5242                       		addq.w	#1,d2
0001FE1A 60F8                       		bra.s	loc_1CA1E
0001FE1C                            ; ===========================================================================
0001FE1C                            
0001FE1C                            loc_1CA26:
0001FE1C D283                       		add.l	d3,d1
0001FE1E 4A42                       		tst.w	d2
0001FE20 6700                       		beq.s	loc_1CA30
0001FE22 383C 0001                  		move.w	#1,d4
0001FE26                            
0001FE26                            loc_1CA30:
0001FE26 4A44                       		tst.w	d4
0001FE28 6700                       		beq.s	Hud_ClrBonus
0001FE2A ED4A                       		lsl.w	#6,d2
0001FE2C 47F1 2000                  		lea	(a1,d2.w),a3
0001FE30 2C9B                       		move.l	(a3)+,(a6)
0001FE32 2C9B                       		move.l	(a3)+,(a6)
0001FE34 2C9B                       		move.l	(a3)+,(a6)
0001FE36 2C9B                       		move.l	(a3)+,(a6)
0001FE38 2C9B                       		move.l	(a3)+,(a6)
0001FE3A 2C9B                       		move.l	(a3)+,(a6)
0001FE3C 2C9B                       		move.l	(a3)+,(a6)
0001FE3E 2C9B                       		move.l	(a3)+,(a6)
0001FE40 2C9B                       		move.l	(a3)+,(a6)
0001FE42 2C9B                       		move.l	(a3)+,(a6)
0001FE44 2C9B                       		move.l	(a3)+,(a6)
0001FE46 2C9B                       		move.l	(a3)+,(a6)
0001FE48 2C9B                       		move.l	(a3)+,(a6)
0001FE4A 2C9B                       		move.l	(a3)+,(a6)
0001FE4C 2C9B                       		move.l	(a3)+,(a6)
0001FE4E 2C9B                       		move.l	(a3)+,(a6)
0001FE50                            
0001FE50                            loc_1CA5A:
0001FE50 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FE54                            
0001FE54 4E75                       		rts	
0001FE56                            ; ===========================================================================
0001FE56                            
0001FE56                            Hud_ClrBonus:
0001FE56 7A0F                       		moveq	#$F,d5
0001FE58                            
0001FE58                            Hud_ClrBonusLoop:
0001FE58 2CBC 0000 0000             		move.l	#0,(a6)
0001FE5E 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FE62                            
0001FE62 60EC                       		bra.s	loc_1CA5A
0001FE64                            ; End of function Hud_TimeRingBonus
0001FE64                            
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FE64                            ; ---------------------------------------------------------------------------
0001FE64                            
0001FE64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE64                            
0001FE64                            
0001FE64                            Hud_Lives:
0001FE64 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FE6A 7200                       		moveq	#0,d1
0001FE6C 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FE70 45F9 0001 FD96             		lea	(Hud_10).l,a2
0001FE76 7C01                       		moveq	#1,d6
0001FE78 7800                       		moveq	#0,d4
0001FE7A 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FE7E                            
0001FE7E                            Hud_LivesLoop:
0001FE7E 2D40 0004                  		move.l	d0,4(a6)
0001FE82 7400                       		moveq	#0,d2
0001FE84 261A                       		move.l	(a2)+,d3
0001FE86                            
0001FE86                            loc_1CA90:
0001FE86 9283                       		sub.l	d3,d1
0001FE88 6500                       		bcs.s	loc_1CA98
0001FE8A 5242                       		addq.w	#1,d2
0001FE8C 60F8                       		bra.s	loc_1CA90
0001FE8E                            ; ===========================================================================
0001FE8E                            
0001FE8E                            loc_1CA98:
0001FE8E D283                       		add.l	d3,d1
0001FE90 4A42                       		tst.w	d2
0001FE92 6700                       		beq.s	loc_1CAA2
0001FE94 383C 0001                  		move.w	#1,d4
0001FE98                            
0001FE98                            loc_1CAA2:
0001FE98 4A44                       		tst.w	d4
0001FE9A 6700                       		beq.s	Hud_ClrLives
0001FE9C                            
0001FE9C                            loc_1CAA6:
0001FE9C EB4A                       		lsl.w	#5,d2
0001FE9E 47F1 2000                  		lea	(a1,d2.w),a3
0001FEA2 2C9B                       		move.l	(a3)+,(a6)
0001FEA4 2C9B                       		move.l	(a3)+,(a6)
0001FEA6 2C9B                       		move.l	(a3)+,(a6)
0001FEA8 2C9B                       		move.l	(a3)+,(a6)
0001FEAA 2C9B                       		move.l	(a3)+,(a6)
0001FEAC 2C9B                       		move.l	(a3)+,(a6)
0001FEAE 2C9B                       		move.l	(a3)+,(a6)
0001FEB0 2C9B                       		move.l	(a3)+,(a6)
0001FEB2                            
0001FEB2                            loc_1CABC:
0001FEB2 0680 0040 0000             		addi.l	#$400000,d0
0001FEB8 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FEBC                            
0001FEBC 4E75                       		rts	
0001FEBE                            ; ===========================================================================
0001FEBE                            
0001FEBE                            Hud_ClrLives:
0001FEBE 4A46                       		tst.w	d6
0001FEC0 67DA                       		beq.s	loc_1CAA6
0001FEC2 7A07                       		moveq	#7,d5
0001FEC4                            
0001FEC4                            Hud_ClrLivesLoop:
0001FEC4 2CBC 0000 0000             		move.l	#0,(a6)
0001FECA 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FECE 60E2                       		bra.s	loc_1CABC
0001FED0                            ; End of function Hud_Lives
0001FED0                            ; End of function Hud_Lives
0001FED0                            
0001FED0                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
000201D0                            		even
000201D0                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020310                            		even
00020310                            
00020310                            		include	"_incObj\DebugMode.asm"
00020310                            ; ---------------------------------------------------------------------------
00020310                            ; When debug mode is currently in use
00020310                            ; ---------------------------------------------------------------------------
00020310                            
00020310                            DebugMode:
00020310 7000                       		moveq	#0,d0
00020312 1038 FE08                  		move.b	(v_debuguse).w,d0
00020316 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0002031A 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0002031E                            ; ===========================================================================
0002031E 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020320 0000                       		dc.w Debug_Action-Debug_Index
00020322                            ; ===========================================================================
00020322                            
00020322                            Debug_Main:	; Routine 0
00020322 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020326 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0002032C 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
00020332 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020338 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0002033E 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020344 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
0002034A 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020350 117C 0000 001A             		move.b	#0,obFrame(a0)
00020356 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0002035C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00020362 6600                       		bne.s	@islevel	; if not, branch
00020364                            
00020364 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
0002036A 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00020370 7006                       		moveq	#6,d0		; use 6th debug	item list
00020372 6000                       		bra.s	@selectlist
00020374                            ; ===========================================================================
00020374                            
00020374                            @islevel:
00020374 7000                       		moveq	#0,d0
00020376 1038 FE10                  		move.b	(v_zone).w,d0
0002037A                            
0002037A                            @selectlist:
0002037A 45F9 0000 0000             		lea	(DebugList).l,a2
00020380 D040                       		add.w	d0,d0
00020382 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020386 3C1A                       		move.w	(a2)+,d6
00020388 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
0002038C 6200                       		bhi.s	@noreset	; if not, branch
0002038E 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00020394                            
00020394                            	@noreset:
00020394 6100 0000                  		bsr.w	Debug_ShowItem
00020398 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002039E 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000203A4                            
000203A4                            Debug_Action:	; Routine 2
000203A4 7006                       		moveq	#6,d0
000203A6 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000203AC 6700                       		beq.s	@isntlevel
000203AE                            
000203AE 7000                       		moveq	#0,d0
000203B0 1038 FE10                  		move.b	(v_zone).w,d0
000203B4                            
000203B4                            	@isntlevel:
000203B4 45F9 0000 0000             		lea	(DebugList).l,a2
000203BA D040                       		add.w	d0,d0
000203BC D4F2 0000                  		adda.w	(a2,d0.w),a2
000203C0 3C1A                       		move.w	(a2)+,d6
000203C2 6100 0000                  		bsr.w	Debug_Control
000203C6 4EF9 0000 F846             		jmp	(DisplaySprite).l
000203CC                            
000203CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000203CC                            
000203CC                            
000203CC                            Debug_Control:
000203CC 7800                       		moveq	#0,d4
000203CE 323C 0001                  		move.w	#1,d1
000203D2 1838 F605                  		move.b	(v_jpadpress1).w,d4
000203D6 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000203DA 6600                       		bne.s	@dirpressed	; if yes, branch
000203DC                            
000203DC 1038 F604                  		move.b	(v_jpadhold1).w,d0
000203E0 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
000203E4 6600                       		bne.s	@dirheld	; if yes, branch
000203E6                            
000203E6 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000203EC 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000203F2 6000 0000                  		bra.w	Debug_ChgItem
000203F6                            ; ===========================================================================
000203F6                            
000203F6                            @dirheld:
000203F6 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000203FA 6600                       		bne.s	loc_1D01C
000203FC 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
00020402 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020406 6600                       		bne.s	@dirpressed
00020408 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
0002040E                            
0002040E                            @dirpressed:
0002040E 1838 F604                  		move.b	(v_jpadhold1).w,d4
00020412                            
00020412                            loc_1D01C:
00020412 7200                       		moveq	#0,d1
00020414 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020418 5241                       		addq.w	#1,d1
0002041A 4841                       		swap	d1
0002041C E881                       		asr.l	#4,d1
0002041E 2428 000C                  		move.l	obY(a0),d2
00020422 2628 0008                  		move.l	obX(a0),d3
00020426 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
0002042A 6700                       		beq.s	loc_1D03C	; if not, branch
0002042C 9481                       		sub.l	d1,d2
0002042E 6400                       		bcc.s	loc_1D03C
00020430 7400                       		moveq	#0,d2
00020432                            
00020432                            loc_1D03C:
00020432 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020436 6700                       		beq.s	loc_1D052	; if not, branch
00020438 D481                       		add.l	d1,d2
0002043A 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020440 6500                       		bcs.s	loc_1D052
00020442 243C 07FF 0000             		move.l	#$7FF0000,d2
00020448                            
00020448                            loc_1D052:
00020448 0804 0002                  		btst	#bitL,d4
0002044C 6700                       		beq.s	loc_1D05E
0002044E 9681                       		sub.l	d1,d3
00020450 6400                       		bcc.s	loc_1D05E
00020452 7600                       		moveq	#0,d3
00020454                            
00020454                            loc_1D05E:
00020454 0804 0003                  		btst	#bitR,d4
00020458 6700                       		beq.s	loc_1D066
0002045A D681                       		add.l	d1,d3
0002045C                            
0002045C                            loc_1D066:
0002045C 2142 000C                  		move.l	d2,obY(a0)
00020460 2143 0008                  		move.l	d3,obX(a0)
00020464                            
00020464                            Debug_ChgItem:
00020464 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0002046A 6700                       		beq.s	@createitem	; if not, branch
0002046C 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020472 6700                       		beq.s	@nextitem	; if not, branch
00020474 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020478 6400                       		bcc.s	@display
0002047A DD38 FE06                  		add.b	d6,(v_debugitem).w
0002047E 6000                       		bra.s	@display
00020480                            ; ===========================================================================
00020480                            
00020480                            @nextitem:
00020480 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020486 6700                       		beq.s	@createitem	; if not, branch
00020488 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
0002048C BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00020490 6200                       		bhi.s	@display
00020492 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020498                            
00020498                            	@display:
00020498 6000 0000                  		bra.w	Debug_ShowItem
0002049C                            ; ===========================================================================
0002049C                            
0002049C                            @createitem:
0002049C 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000204A2 6700                       		beq.s	@backtonormal	; if not, branch
000204A4 4EB9 0000 FCD2             		jsr	(FindFreeObj).l
000204AA 6600                       		bne.s	@backtonormal
000204AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000204B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000204B8 12A8 0004                  		move.b	4(a0),0(a1)	; create object
000204BC 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000204C2 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
000204C8 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
000204CE 7000                       		moveq	#0,d0
000204D0 1038 FE06                  		move.b	(v_debugitem).w,d0
000204D4 E748                       		lsl.w	#3,d0
000204D6 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000204DC 4E75                       		rts	
000204DE                            ; ===========================================================================
000204DE                            
000204DE                            @backtonormal:
000204DE 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
000204E4 6700                       		beq.s	@stayindebug	; if not, branch
000204E6 7000                       		moveq	#0,d0
000204E8 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000204EC 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000204F4 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000204FA 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000204FE 3140 000A                  		move.w	d0,obX+2(a0)
00020502 3140 000E                  		move.w	d0,obY+2(a0)
00020506 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0002050C 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
00020512 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020518 6600                       		bne.s	@stayindebug	; if not, branch
0002051A                            
0002051A 4278 F780                  		clr.w	(v_ssangle).w
0002051E 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020524 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002052C 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020532 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020538 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
0002053E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020544                            
00020544                            	@stayindebug:
00020544 4E75                       		rts	
00020546                            ; End of function Debug_Control
00020546                            
00020546                            
00020546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020546                            
00020546                            
00020546                            Debug_ShowItem:
00020546 7000                       		moveq	#0,d0
00020548 1038 FE06                  		move.b	(v_debugitem).w,d0
0002054C E748                       		lsl.w	#3,d0
0002054E 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00020554 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
0002055A 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00020560 4E75                       		rts	
00020562                            ; End of function Debug_ShowItem
00020562                            ; End of function Debug_ShowItem
00020562                            		include	"_inc\DebugList.asm"
00020562                            ; ---------------------------------------------------------------------------
00020562                            ; Debug	mode item lists
00020562                            ; ---------------------------------------------------------------------------
00020562                            DebugList:
00020562 0000                       	dc.w @GHZ-DebugList
00020564 0000                       	dc.w @LZ-DebugList
00020566 0000                       	dc.w @MZ-DebugList
00020568 0000                       	dc.w @SLZ-DebugList
0002056A 0000                       	dc.w @SYZ-DebugList
0002056C 0000                       	dc.w @SBZ-DebugList
0002056E 0000                       	dc.w @Ending-DebugList
00020570                            
00020570                            dbug:	macro map,object,subtype,frame,vram
00020570                            	dc.l map+(object<<24)
00020570                            	dc.b subtype,frame
00020570                            	dc.w vram
00020570                            	endm
00020570                            
00020570                            @GHZ:
00020570 0000                       	dc.w (@GHZend-@GHZ-2)/8
00020572                            
00020572                            ;		mappings	object		subtype	frame	VRAM setting
00020572 2500 BFA8 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
0002057A 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020582 1F00 B388 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002058A 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020592 2B00 CDAC 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
0002059A 3600 F1F0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000205A2 1800 9D42 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000205AA 3B00 F316 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
000205B2 4001 18AE 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
000205BA 4100 FF64 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000205C2 4201 018A 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
000205CA 4401 0498 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
000205D2 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000205DA 4B00 BFF8 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
000205E2 7D01 A2AE 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000205EA                            	@GHZend:
000205EA                            
000205EA                            @LZ:
000205EA 0000                       	dc.w (@LZend-@LZ-2)/8
000205EC                            
000205EC                            ;		mappings	object		subtype	frame	VRAM setting
000205EC 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000205F4 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000205FC 4100 FF64 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020604 2C00 CE52 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0002060C 2D00 D03E 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
00020614 1601 4262 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0002061C 1601 4262 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020624 3300 E4BC 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0002062C 3200 E07C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020634 3600 F1F0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002063C 5201 2338 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020644 6101 448A 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
0002064C 6101 448A 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00020654 6101 448A 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
0002065C 6201 45DE 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00020664 6101 448A 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0002066C 6101 448A 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00020674 6301 4940 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0002067C 6001 41AC 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00020684 6401 4C8E 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
0002068C 6501 4E16 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00020694 6501 4E16 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
0002069C 0B01 35F8 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000206A4 0C01 36C8 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000206AC 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000206B4                            	@LZend:
000206B4                            
000206B4                            @MZ:
000206B4 0000                       	dc.w (@MZend-@MZ-2)/8
000206B6                            
000206B6                            ;		mappings	object		subtype	frame	VRAM setting
000206B6 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000206BE 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206C6 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206CE 3600 F1F0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206D6 4100 FF64 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000206DE 1300 D54C 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
000206E6 4601 0B48 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000206EE 6E01 9188 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000206F6 6A01 8B40 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000206FE 3300 E4BC 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020706 1E00 AAA0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002070E 5101 206C 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020716 5201 22E2 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
0002071E 5300 A384 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020726 5401 1414 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0002072E 5501 24D6 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020736 7801 9D58 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002073E 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020746                            	@MZend:
00020746                            
00020746                            @SLZ:
00020746 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020748                            
00020748                            ;		mappings	object		subtype	frame	VRAM setting
00020748 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020750 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020758 5901 3020 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00020760 5300 A384 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020768 1800 9DA0 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00020770 5A01 315A 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020778 5B01 3312 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00020780 5D01 38E6 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020788 5E01 3C78 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00020790 4100 FF64 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020798 1300 D54C 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000207A0 1C00 A4A2 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000207A8 5F01 3EF6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000207B0 6001 41AC 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
000207B8 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207C0                            	@SLZend:
000207C0                            
000207C0                            @SYZ:
000207C0 0000                       	dc.w (@SYZend-@SYZ-2)/8
000207C2                            
000207C2                            ;		mappings	object		subtype	frame	VRAM setting
000207C2 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207CA 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207D2 3600 F1F0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000207DA 4100 FF64 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000207E2 4301 03EA 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
000207EA 1201 0BC6 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000207F2 4701 0D6A 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000207FA 1F00 B388 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020802 2200 B812 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002080A 5001 1B3E 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020812 1800 9D8E 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
0002081A 5601 29E0 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020822 3200 E07C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002082A 7801 9D58 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020832 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002083A                            	@SYZend:
0002083A                            
0002083A                            @SBZ:
0002083A 0000                       	dc.w (@SBZend-@SBZ-2)/8
0002083C                            
0002083C                            ;		mappings	object		subtype	frame	VRAM setting
0002083C 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020844 2600 C730 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002084C 5F01 3EF6 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020854 6001 41AC 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
0002085C 7801 9D58 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020864 1501 2D7C 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0002086C 6701 862E E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020874 5201 22E2 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0002087C 3200 E07C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020884 6901 8888 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
0002088C 6901 88E2 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020894 6A01 8B40 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0002089C 5300 A384 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000208A4 5201 22E2 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
000208AC 6B01 8F10 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
000208B4 2A00 A632 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
000208BC 6B01 8F10 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
000208C4 6A01 8B40 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
000208CC 6B01 8F10 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
000208D4 6A01 8B40 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
000208DC 6B01 8F10 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
000208E4 6C01 90D2 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
000208EC 6D01 083A 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000208F4 6D01 083A 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000208FC 6E01 9188 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020904 7001 95CE 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
0002090C 7101 378C 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020914 1E00 AAA0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0002091C 7901 A0EC 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020924                            	@SBZend:
00020924                            
00020924                            @Ending:
00020924 0000                       	dc.w (@Endingend-@Ending-2)/8
00020926                            
00020926                            ;		mappings	object		subtype	frame	VRAM setting
00020926 2500 BFA8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002092E 2500 BFA8 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020936                            	@Endingend:
00020936                            
00020936                            	even
00020936                            	even
00020936                            		include	"_inc\LevelHeaders.asm"
00020936                            ; ---------------------------------------------------------------------------
00020936                            ; Level Headers
00020936                            ; ---------------------------------------------------------------------------
00020936                            
00020936                            LevelHeaders:
00020936                            
00020936                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020936                            	dc.l (plc1<<24)+lvlgfx
00020936                            	dc.l (plc2<<24)+sixteen
00020936                            	dc.l twofivesix
00020936                            	dc.b 0, music, pal, pal
00020936                            	endm
00020936                            
00020936                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020936                            ; music (unused), palette (unused), palette
00020936                            
00020936                            ;		1st PLC				2nd PLC				256x256 data			palette
00020936                            ;				level gfx*			16x16 data			music*
00020936                            
00020936 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020946 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020956 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020966 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020976 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020986 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020996 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
000209A6                            	even
000209A6                            
000209A6                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000209A6                            ;	* music and level gfx are actually set elsewhere, so these values are useless
000209A6                            		include	"_inc\Pattern Load Cues.asm"
000209A6                            ; ---------------------------------------------------------------------------
000209A6                            ; Pattern load cues
000209A6                            ; ---------------------------------------------------------------------------
000209A6                            ArtLoadCues:
000209A6                            
000209A6 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
000209A8 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
000209AA 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
000209AC 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
000209AE                            PLC_Levels:
000209AE 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
000209B0 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
000209B2 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
000209B4 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
000209B6 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
000209B8 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
000209BA 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
000209BC 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
000209BE 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
000209C0 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
000209C2 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
000209C4 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
000209C6 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
000209C8 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
000209CA 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
000209CC 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
000209CE 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
000209D0                            PLC_Animals:
000209D0 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
000209D2 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
000209D4 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
000209D6 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
000209D8 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
000209DA 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
000209DC 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
000209DE 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
000209E0 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
000209E2 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
000209E4 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
000209E6 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
000209E8                            
000209E8                            plcm:	macro gfx,vram
000209E8                            	dc.l gfx
000209E8                            	dc.w vram
000209E8                            	endm
000209E8                            
000209E8                            ; ---------------------------------------------------------------------------
000209E8                            ; Pattern load cues - standard block 1
000209E8                            ; ---------------------------------------------------------------------------
000209E8 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
000209EA 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000209F0 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000209F6 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
000209FC 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020A02 0000 0000 F640             		plcm	Nem_Points, $F640 	; points from enemy
00020A08                            	PLC_Mainend:
00020A08                            ; ---------------------------------------------------------------------------
00020A08                            ; Pattern load cues - standard block 2
00020A08                            ; ---------------------------------------------------------------------------
00020A08 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020A0A 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020A10                            	PLC_Main2end:
00020A10                            ; ---------------------------------------------------------------------------
00020A10                            ; Pattern load cues - explosion
00020A10                            ; ---------------------------------------------------------------------------
00020A10 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020A12 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020A18                            	PLC_Explodeend:
00020A18                            ; ---------------------------------------------------------------------------
00020A18                            ; Pattern load cues - game/time	over
00020A18                            ; ---------------------------------------------------------------------------
00020A18 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020A1A 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020A20                            	PLC_GameOverend:
00020A20                            ; ---------------------------------------------------------------------------
00020A20                            ; Pattern load cues - Green Hill
00020A20                            ; ---------------------------------------------------------------------------
00020A20 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020A22 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020A28 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020A2E 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020A34 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020A3A 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020A40 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020A46 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020A4C 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020A52 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020A58 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A5E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A64 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A6A                            
00020A6A 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020A6C 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A72 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020A78 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020A7E 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020A84 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020A8A 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020A90                            	PLC_GHZ2end:
00020A90                            ; ---------------------------------------------------------------------------
00020A90                            ; Pattern load cues - Labyrinth
00020A90                            ; ---------------------------------------------------------------------------
00020A90 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020A92 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020A98                            		;plcm	Nem_LzBlock1, $3C00	; block
00020A98                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020A98                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020A98 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020A9E 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020AA4 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020AAA 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020AB0 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020AB6 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020ABC 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020AC2 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020AC8                            
00020AC8 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020ACA 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020AD0 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020AD6 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020ADC 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020AE2 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020AE8 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020AEE 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020AF4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020AFA 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020B00 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B06 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B0C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B12                            	PLC_LZ2end:
00020B12                            ; ---------------------------------------------------------------------------
00020B12                            ; Pattern load cues - Marble
00020B12                            ; ---------------------------------------------------------------------------
00020B12 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020B14 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020B1A 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020B20 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020B26 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020B2C 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020B32 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020B38 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020B3E 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B44 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020B4A 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020B50                            
00020B50 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020B52 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020B58 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020B5E                            		;plcm	Nem_MzSwitch, $A260	; switch
00020B5E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B64 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B6A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B70 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020B76 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B7C                            	PLC_MZ2end:
00020B7C                            ; ---------------------------------------------------------------------------
00020B7C                            ; Pattern load cues - Star Light
00020B7C                            ; ---------------------------------------------------------------------------
00020B7C 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020B7E 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020B84 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020B8A 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020B90 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020B96 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020B9C 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020BA2 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020BA8 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BAE 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BB4 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BBA                            
00020BBA 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020BBC 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020BC2 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020BC8 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020BCE 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020BD4 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020BDA 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020BE0                            	PLC_SLZ2end:
00020BE0                            ; ---------------------------------------------------------------------------
00020BE0                            ; Pattern load cues - Spring Yard
00020BE0                            ; ---------------------------------------------------------------------------
00020BE0 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020BE2 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020BE8                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020BE8                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020BE8 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020BEE 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020BF4 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020BFA 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020C00 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C06 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020C0C                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020C0C                            
00020C0C 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020C0E                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020C0E 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020C14 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020C1A 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020C20                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020C20 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020C26                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C26 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C2C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C32 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C38 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C3E                            	PLC_SYZ2end:
00020C3E                            ; ---------------------------------------------------------------------------
00020C3E                            ; Pattern load cues - Scrap Brain
00020C3E                            ; ---------------------------------------------------------------------------
00020C3E 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020C40 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020C46 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020C4C                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020C4C                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020C4C                            		;plcm	Nem_Girder, $5E00	; girder
00020C4C 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020C52 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C58                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020C58 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020C5E 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C64 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020C6A 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020C70                            
00020C70 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020C72                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020C72 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020C78 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020C7E                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020C7E 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C84 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020C8A 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020C90 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C96 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C9C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CA2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CA8 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CAE                            	PLC_SBZ2end:
00020CAE                            ; ---------------------------------------------------------------------------
00020CAE                            ; Pattern load cues - title card
00020CAE                            ; ---------------------------------------------------------------------------
00020CAE 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020CB0 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020CB6                            	PLC_TitleCardend:
00020CB6                            ; ---------------------------------------------------------------------------
00020CB6                            ; Pattern load cues - act 3 boss
00020CB6                            ; ---------------------------------------------------------------------------
00020CB6 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020CB8 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020CBE 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020CC4 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020CCA 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020CD0 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020CD6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020CDC                            	PLC_Bossend:
00020CDC                            ; ---------------------------------------------------------------------------
00020CDC                            ; Pattern load cues - act 1/2 signpost
00020CDC                            ; ---------------------------------------------------------------------------
00020CDC 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020CDE 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020CE4 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020CEA 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020CF0                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020CF0                            	PLC_Signpostend:
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0                            ; Pattern load cues - beta special stage warp effect
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0                            PLC_Warp:
00020CF0                            	PLC_Warpend:
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0                            ; Pattern load cues - special stage
00020CF0                            ; ---------------------------------------------------------------------------
00020CF0 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020CF2 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020CF8 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020CFE 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020D04 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020D0A 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020D10 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020D16 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020D1C 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020D22 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020D28 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020D2E 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020D34 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020D3A 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020D40 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020D46                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020D46                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020D46                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020D46                            	PLC_SpeStageend:
00020D46                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020D46                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020D46                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020D46                            ; ---------------------------------------------------------------------------
00020D46                            ; Pattern load cues - GHZ animals
00020D46                            ; ---------------------------------------------------------------------------
00020D46 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020D48 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020D4E 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020D54                            	PLC_GHZAnimalsend:
00020D54                            ; ---------------------------------------------------------------------------
00020D54                            ; Pattern load cues - LZ animals
00020D54                            ; ---------------------------------------------------------------------------
00020D54 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020D56 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020D5C 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020D62                            	PLC_LZAnimalsend:
00020D62                            ; ---------------------------------------------------------------------------
00020D62                            ; Pattern load cues - MZ animals
00020D62                            ; ---------------------------------------------------------------------------
00020D62 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020D64 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020D6A 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020D70                            	PLC_MZAnimalsend:
00020D70                            ; ---------------------------------------------------------------------------
00020D70                            ; Pattern load cues - SLZ animals
00020D70                            ; ---------------------------------------------------------------------------
00020D70 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020D72 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020D78 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020D7E                            	PLC_SLZAnimalsend:
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E                            ; Pattern load cues - SYZ animals
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020D80 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020D86 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020D8C                            	PLC_SYZAnimalsend:
00020D8C                            ; ---------------------------------------------------------------------------
00020D8C                            ; Pattern load cues - SBZ animals
00020D8C                            ; ---------------------------------------------------------------------------
00020D8C 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020D8E 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020D94 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020D9A                            	PLC_SBZAnimalsend:
00020D9A                            ; ---------------------------------------------------------------------------
00020D9A                            ; Pattern load cues - special stage results screen
00020D9A                            ; ---------------------------------------------------------------------------
00020D9A 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020D9C 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020DA2 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020DA8                            	PLC_SpeStResultend:
00020DA8                            ; ---------------------------------------------------------------------------
00020DA8                            ; Pattern load cues - ending sequence
00020DA8                            ; ---------------------------------------------------------------------------
00020DA8 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020DAA 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020DB0 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020DB6 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020DBC                            		;plcm	Nem_EndFlower, $7400	; flowers
00020DBC 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020DC2 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020DC8 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020DCE 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020DD4 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020DDA 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020DE0 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020DE6 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020DEC 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020DF2 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020DF8                            	PLC_Endingend:
00020DF8                            ; ---------------------------------------------------------------------------
00020DF8                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020DF8                            ; ---------------------------------------------------------------------------
00020DF8 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020DFA 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020E00 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020E06 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020E0C                            	PLC_TryAgainend:
00020E0C                            ; ---------------------------------------------------------------------------
00020E0C                            ; Pattern load cues - Eggman on SBZ 2
00020E0C                            ; ---------------------------------------------------------------------------
00020E0C 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020E0E 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020E14 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020E1A 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020E20                            	PLC_EggmanSBZ2end:
00020E20                            ; ---------------------------------------------------------------------------
00020E20                            ; Pattern load cues - final boss
00020E20                            ; ---------------------------------------------------------------------------
00020E20 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020E22 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020E28 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020E2E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E34 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020E3A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E40                            	PLC_FZBossend:
00020E40                            ; ---------------------------------------------------------------------------
00020E40                            ; Pattern load cues - Eggman
00020E40                            ; ---------------------------------------------------------------------------
00020E40 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E42 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E48 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E4E 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E54 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E5A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E60 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E66                            	PLC_Eggend:
00020E66                            		even
00020E66                            ; ---------------------------------------------------------------------------
00020E66                            ; Pattern load cue IDs
00020E66                            ; ---------------------------------------------------------------------------
00020E66 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020E66 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020E66 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020E66 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020E66 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020E66 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020E66 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020E66 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020E66 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020E66 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020E66 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020E66 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020E66 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020E66 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020E66 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020E66 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020E66 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020E66 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020E66 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020E66 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020E66 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020E66 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020E66 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020E66 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020E66 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020E66 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020E66 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020E66 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020E66 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020E66 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020E66 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020E66 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020E66 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020E66 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020E66                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024944                            		even
00024944                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00024DEC                            		even
00024DEC                            
00024DEC                            Map_Sonic:	include	"_maps\Sonic.asm"
00024DEC                            ; --------------------------------------------------------------------------------
00024DEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00024DEC                            ; --------------------------------------------------------------------------------
00024DEC                            
00024DEC                            SME_Lx_Kl:	
00024DEC 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00024DF0 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00024DF4 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00024DF8 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
00024DFC 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00024E00 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00024E04 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00024E08 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
00024E0C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00024E10 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00024E14 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00024E18 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
00024E1C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00024E20 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00024E24 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00024E28 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
00024E2C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00024E30 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00024E34 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00024E38 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
00024E3C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00024E40 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00024E44 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00024E48 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
00024E4C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00024E50 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00024E54 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00024E58 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
00024E5C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00024E60 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00024E64 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00024E68 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
00024E6C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
00024E70 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
00024E74 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
00024E78 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
00024E7C 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
00024E80 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
00024E84 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
00024E88 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
00024E8C 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
00024E90 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
00024E94 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
00024E98 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
00024E9C 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
00024EA0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
00024EA4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
00024EA8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
00024EAC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
00024EB0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
00024EB4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
00024EB8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
00024EBC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
00024EC0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
00024EC4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
00024EC8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
00024ECC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00024ED0 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00024ED4 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00024ED8 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
00024EDC 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00024EE0 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00024EE4 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00024EE8 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
00024EEC 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00024EF0 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00024EF4 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00024EF8 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
00024EFC 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00024F00 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00024F04 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00024F08 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
00024F0C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00024F10 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00024F14 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00024F18 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
00024F1C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00024F20 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00024F24 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00024F28 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
00024F2C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
00024F2E 00                         SME_Lx_Kl_142:	dc.b 0	
00024F2F 04                         SME_Lx_Kl_143:	dc.b 4	
00024F30 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F35 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00024F3A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00024F3F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024F44 09                         SME_Lx_Kl_158:	dc.b 9	
00024F45 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F4A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F4F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F54 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F59 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F5E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F63 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00024F68 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00024F6D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00024F72 0A                         SME_Lx_Kl_186:	dc.b $A	
00024F73 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00024F78 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00024F7D 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00024F82 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00024F87 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00024F8C F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024F91 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
00024F96 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
00024F9B F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
00024FA0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
00024FA5 04                         SME_Lx_Kl_1B9:	dc.b 4	
00024FA6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00024FAB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00024FB0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00024FB5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00024FBA 03                         SME_Lx_Kl_1CE:	dc.b 3	
00024FBB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FC0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FC5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FCA 03                         SME_Lx_Kl_1DE:	dc.b 3	
00024FCB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FD0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FD5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00024FDA 04                         SME_Lx_Kl_1EE:	dc.b 4	
00024FDB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00024FE0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00024FE5 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
00024FEA 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00024FEF 02                         SME_Lx_Kl_203:	dc.b 2	
00024FF0 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00024FF5 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00024FFA 03                         SME_Lx_Kl_20E:	dc.b 3	
00024FFB FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025000 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025005 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002500A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002500B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025010 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025015 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002501A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002501B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025020 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025025 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002502A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002502B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025030 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025035 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002503A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002503F 03                         SME_Lx_Kl_253:	dc.b 3	
00025040 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025045 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002504A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002504F 07                         SME_Lx_Kl_263:	dc.b 7	
00025050 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025055 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002505A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002505F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025064 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025069 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002506E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025073 05                         SME_Lx_Kl_287:	dc.b 5	
00025074 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025079 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
0002507E EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025083 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025088 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
0002508D 02                         SME_Lx_Kl_2A1:	dc.b 2	
0002508E FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025093 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025098 03                         SME_Lx_Kl_2AC:	dc.b 3	
00025099 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
0002509E EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000250A3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000250A8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000250A9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000250AE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000250B3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000250B8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000250BD 02                         SME_Lx_Kl_2D1:	dc.b 2	
000250BE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000250C3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000250C8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000250C9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000250CE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
000250D3 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
000250D8 05                         SME_Lx_Kl_2EC:	dc.b 5	
000250D9 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
000250DE 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
000250E3 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
000250E8 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
000250ED ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
000250F2 05                         SME_Lx_Kl_306:	dc.b 5	
000250F3 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000250F8 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
000250FD FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025102 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025107 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002510C 06                         SME_Lx_Kl_320:	dc.b 6	
0002510D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025112 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025117 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002511C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025121 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025126 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002512B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002512C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025131 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025136 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002513B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025140 03                         SME_Lx_Kl_354:	dc.b 3	
00025141 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025146 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002514B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025150 05                         SME_Lx_Kl_364:	dc.b 5	
00025151 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025156 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002515B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025160 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025165 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002516A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002516B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00025170 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00025175 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002517A 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
0002517F 03                         SME_Lx_Kl_393:	dc.b 3	
00025180 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
00025185 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
0002518A 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
0002518F 05                         SME_Lx_Kl_3A3:	dc.b 5	
00025190 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
00025195 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
0002519A FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
0002519F FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000251A4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000251A9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000251AA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000251AF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000251B4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000251B9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000251BE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000251BF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000251C4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000251C9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000251CA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000251CF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000251D4 05                         SME_Lx_Kl_3E8:	dc.b 5	
000251D5 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000251DA F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
000251DF F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
000251E4 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
000251E9 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
000251EE 04                         SME_Lx_Kl_402:	dc.b 4	
000251EF F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
000251F4 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
000251F9 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
000251FE 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025203 02                         SME_Lx_Kl_417:	dc.b 2	
00025204 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025209 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002520E 03                         SME_Lx_Kl_422:	dc.b 3	
0002520F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025214 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025219 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002521E 03                         SME_Lx_Kl_432:	dc.b 3	
0002521F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025224 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025229 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002522E 06                         SME_Lx_Kl_442:	dc.b 6	
0002522F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025234 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025239 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002523E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025243 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025248 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002524D 06                         SME_Lx_Kl_461:	dc.b 6	
0002524E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025253 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025258 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002525D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025262 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025267 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002526C 04                         SME_Lx_Kl_480:	dc.b 4	
0002526D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025272 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
00025277 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
0002527C 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025281 03                         SME_Lx_Kl_495:	dc.b 3	
00025282 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
00025287 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
0002528C 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00025291 05                         SME_Lx_Kl_4A5:	dc.b 5	
00025292 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025297 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
0002529C F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000252A1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000252A6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000252AB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000252AC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000252B1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000252B6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000252BB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000252C0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000252C1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000252C6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000252CB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000252D0 05                         SME_Lx_Kl_4E4:	dc.b 5	
000252D1 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000252D6 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000252DB F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000252E0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000252E5 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000252EA 02                         SME_Lx_Kl_4FE:	dc.b 2	
000252EB EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
000252F0 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
000252F5 02                         SME_Lx_Kl_509:	dc.b 2	
000252F6 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
000252FB EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025300 02                         SME_Lx_Kl_514:	dc.b 2	
00025301 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025306 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002530B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002530C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025311 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025316 02                         SME_Lx_Kl_52A:	dc.b 2	
00025317 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002531C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025321 02                         SME_Lx_Kl_535:	dc.b 2	
00025322 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025327 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002532C 02                         SME_Lx_Kl_540:	dc.b 2	
0002532D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025332 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025337 02                         SME_Lx_Kl_54B:	dc.b 2	
00025338 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002533D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025342 04                         SME_Lx_Kl_556:	dc.b 4	
00025343 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025348 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002534D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025352 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025357 03                         SME_Lx_Kl_56B:	dc.b 3	
00025358 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002535D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025362 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025367 03                         SME_Lx_Kl_57B:	dc.b 3	
00025368 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002536D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025372 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025377 03                         SME_Lx_Kl_58B:	dc.b 3	
00025378 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
0002537D EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
00025382 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025387 04                         SME_Lx_Kl_59B:	dc.b 4	
00025388 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002538D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025392 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025397 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002539C 03                         SME_Lx_Kl_5B0:	dc.b 3	
0002539D FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000253A2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000253A7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253AC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000253AD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000253B2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000253B7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253BC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000253BD EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000253C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000253C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000253CC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000253CD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253D2 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253D7 02                         SME_Lx_Kl_5EB:	dc.b 2	
000253D8 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253DD F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253E2 02                         SME_Lx_Kl_5F6:	dc.b 2	
000253E3 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253E8 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253ED 02                         SME_Lx_Kl_601:	dc.b 2	
000253EE F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253F3 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000253F8 02                         SME_Lx_Kl_60C:	dc.b 2	
000253F9 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000253FE F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025403 02                         SME_Lx_Kl_617:	dc.b 2	
00025404 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025409 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002540E 02                         SME_Lx_Kl_622:	dc.b 2	
0002540F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025414 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025419 02                         SME_Lx_Kl_62D:	dc.b 2	
0002541A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002541F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025424 04                         SME_Lx_Kl_638:	dc.b 4	
00025425 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002542A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002542F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025434 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025439 03                         SME_Lx_Kl_64D:	dc.b 3	
0002543A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002543F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025444 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025449 02                         SME_Lx_Kl_65D:	dc.b 2	
0002544A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002544F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025454 03                         SME_Lx_Kl_668:	dc.b 3	
00025455 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002545A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002545F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025464 04                         SME_Lx_Kl_678:	dc.b 4	
00025465 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002546A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002546F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025474 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025479 03                         SME_Lx_Kl_68D:	dc.b 3	
0002547A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002547F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025484 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025489 02                         SME_Lx_Kl_69D:	dc.b 2	
0002548A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002548F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025494 03                         SME_Lx_Kl_6A8:	dc.b 3	
00025495 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002549A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002549F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000254A4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000254A5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254AA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254AF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254B4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000254B5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000254BA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000254BF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000254C4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000254C5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254CA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254CF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000254D4 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000254D9 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
000254DE 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
000254E3 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
000254E8 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
000254ED F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
000254F2 09                         SME_Lx_Kl_706:	dc.b 9	
000254F3 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000254F8 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000254FD 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025502 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025507 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002550C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025511 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025516 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002551B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025520 03                         SME_Lx_Kl_734:	dc.b 3	
00025521 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025526 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002552B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025530 03                         SME_Lx_Kl_744:	dc.b 3	
00025531 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025536 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002553B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025540 03                         SME_Lx_Kl_754:	dc.b 3	
00025541 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025546 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002554B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025550 05                         SME_Lx_Kl_764:	dc.b 5	
00025551 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025556 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002555B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025560 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025565 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002556A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002556B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025570 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025575 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002557A 03                         SME_Lx_Kl_78E:	dc.b 3	
0002557B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025580 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025585 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
0002558A 05                         SME_Lx_Kl_79E:	dc.b 5	
0002558B 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025590 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025595 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
0002559A ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
0002559F ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255A4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000255A5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000255AA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000255AF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000255B4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000255B9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000255BE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000255BF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000255C4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000255C9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000255CE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
000255D3 04                         SME_Lx_Kl_7E7:	dc.b 4	
000255D4 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
000255D9 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
000255DE F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
000255E3 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
000255E8 04                         SME_Lx_Kl_7FC:	dc.b 4	
000255E9 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
000255EE F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
000255F3 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
000255F8 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
000255FD 04                         SME_Lx_Kl_811:	dc.b 4	
000255FE E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025603 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025608 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002560D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025612 01                         SME_Lx_Kl_826:	dc.b 1	
00025613 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025618 01                         SME_Lx_Kl_82C:	dc.b 1	
00025619 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002561E 01                         SME_Lx_Kl_832:	dc.b 1	
0002561F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025624 01                         SME_Lx_Kl_838:	dc.b 1	
00025625 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002562A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002562B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025630 01                         SME_Lx_Kl_844:	dc.b 1	
00025631 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025636 01                         SME_Lx_Kl_84A:	dc.b 1	
00025637 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002563C 03                         SME_Lx_Kl_850:	dc.b 3	
0002563D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025642 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025647 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002564C 01                         SME_Lx_Kl_860:	dc.b 1	
0002564D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025652 02                         SME_Lx_Kl_866:	dc.b 2	
00025653 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025658 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002565D 01                         SME_Lx_Kl_871:	dc.b 1	
0002565E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025663 02                         SME_Lx_Kl_877:	dc.b 2	
00025664 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025669 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002566E 01                         SME_Lx_Kl_882:	dc.b 1	
0002566F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025674 04                         SME_Lx_Kl_888:	dc.b 4	
00025675 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002567A FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
0002567F F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025684 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025689 07                         SME_Lx_Kl_89D:	dc.b 7	
0002568A ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
0002568F FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025694 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025699 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
0002569E F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000256A3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000256A8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000256AD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000256AE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000256B3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000256B8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000256BD F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000256C2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000256C7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000256C8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000256CD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
000256D2 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
000256D7 02                         SME_Lx_Kl_8EB:	dc.b 2	
000256D8 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
000256DD EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
000256E2 04                         SME_Lx_Kl_8F6:	dc.b 4	
000256E3 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
000256E8 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
000256ED F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
000256F2 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
000256F7 04                         SME_Lx_Kl_90B:	dc.b 4	
000256F8 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
000256FD FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025702 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025707 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002570C 04                         SME_Lx_Kl_920:	dc.b 4	
0002570D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025712 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025717 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002571C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025721 09                         SME_Lx_Kl_935:	dc.b 9	
00025722 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025727 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002572C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025731 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025736 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002573B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025740 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025745 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002574A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002574F 03                         SME_Lx_Kl_963:	dc.b 3	
00025750 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025755 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002575A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002575F 03                         SME_Lx_Kl_973:	dc.b 3	
00025760 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025765 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002576A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002576F 02                         SME_Lx_Kl_983:	dc.b 2	
00025770 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025775 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
0002577A 00                         SME_Lx_Kl_98E:	dc.b 0	
0002577B 08                         SME_Lx_Kl_98F:	dc.b 8	
0002577C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025781 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025786 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
0002578B F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025790 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025795 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
0002579A 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
0002579F 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000257A4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000257A5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257AA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000257AF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000257B4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000257B9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000257BE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000257C3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000257C8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000257C9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000257CE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
000257D3 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
000257D8 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
000257DD 03                         SME_Lx_Kl_9F1:	dc.b 3	
000257DE F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
000257E3 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
000257E8 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
000257ED 03                         SME_Lx_Kl_A01:	dc.b 3	
000257EE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
000257F3 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
000257F8 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
000257FD 03                         SME_Lx_Kl_A11:	dc.b 3	
000257FE F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025803 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025808 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
0002580D 02                         SME_Lx_Kl_A21:	dc.b 2	
0002580E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025813 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025818 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025819 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002581E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025823 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025828 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025829 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
0002582E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025833 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025838 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025839 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
0002583E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025843 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025848 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025849 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
0002584E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025853 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025858 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025859 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
0002585E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025863 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025868 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
0002586D 08                         SME_Lx_Kl_A81:	dc.b 8	
0002586E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025873 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025878 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
0002587D 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025882 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025887 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
0002588C 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025891 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025896 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025897 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
0002589C 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258A1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258A6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258AB 04                         SME_Lx_Kl_ABF:	dc.b 4	
000258AC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
000258B1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
000258B6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
000258BB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
000258C0 05                         SME_Lx_Kl_AD4:	dc.b 5	
000258C1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258C6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
000258CB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000258D0 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000258D5 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000258DA 05                         SME_Lx_Kl_AEE:	dc.b 5	
000258DB E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
000258E0 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
000258E5 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
000258EA 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
000258EF 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
000258F4 02                         SME_Lx_Kl_B08:	dc.b 2	
000258F5 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
000258FA 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
000258FF 05                         SME_Lx_Kl_B13:	dc.b 5	
00025900 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025905 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
0002590A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
0002590F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025914 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025919 03                         SME_Lx_Kl_B2D:	dc.b 3	
0002591A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
0002591F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025924 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025929 05                         SME_Lx_Kl_B3D:	dc.b 5	
0002592A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
0002592F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025934 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025939 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
0002593E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025943 02                         SME_Lx_Kl_B57:	dc.b 2	
00025944 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025949 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
0002594E 03                         SME_Lx_Kl_B62:	dc.b 3	
0002594F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025954 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025959 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002595E 03                         SME_Lx_Kl_B72:	dc.b 3	
0002595F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025964 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025969 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
0002596E 03                         SME_Lx_Kl_B82:	dc.b 3	
0002596F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025974 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025979 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
0002597E 02                         SME_Lx_Kl_B92:	dc.b 2	
0002597F EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025984 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025989 03                         SME_Lx_Kl_B9D:	dc.b 3	
0002598A E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
0002598F E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025994 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025999 0B                         SME_Lx_Kl_BAD:	dc.b $B	
0002599A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
0002599F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259A4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
000259A9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
000259AE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
000259B3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
000259B8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
000259BD F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
000259C2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
000259C7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
000259CC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
000259D1 06                         SME_Lx_Kl_BE5:	dc.b 6	
000259D2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
000259D7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
000259DC F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
000259E1 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
000259E6 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000259EB 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
000259F0 03                         SME_Lx_Kl_C04:	dc.b 3	
000259F1 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000259F6 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
000259FB 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025A00 07                         SME_Lx_Kl_C14:	dc.b 7	
00025A01 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025A06 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025A0B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025A10 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025A15 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025A1A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025A1F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025A24 02                         SME_Lx_Kl_C38:	dc.b 2	
00025A25 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025A2A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025A2F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025A30 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A35 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025A3A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A3F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025A44 03                         SME_Lx_Kl_C58:	dc.b 3	
00025A45 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A4A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025A4F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025A54 03                         SME_Lx_Kl_C68:	dc.b 3	
00025A55 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025A5A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025A5F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025A64 04                         SME_Lx_Kl_C78:	dc.b 4	
00025A65 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025A6A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025A6F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025A74 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025A79 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025A7A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A7F 01                         SME_Lx_Kl_C93:	dc.b 1	
00025A80 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A85 01                         SME_Lx_Kl_C99:	dc.b 1	
00025A86 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A8B 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025A8C F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025A91 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025A92 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025A97 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025A9C                            		even
00025A9C                            		even
00025A9C                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025A9C                            ; --------------------------------------------------------------------------------
00025A9C                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025A9C                            
00025A9C                            SME_vJmm3:	
00025A9C 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025AA0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025AA4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025AA8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025AAC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025AB0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025AB4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025AB8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025ABC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025AC0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025AC4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025AC8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025ACC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025AD0 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025AD4 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025AD8 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025ADC 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025AE0 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025AE4 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025AE8 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025AEC 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025AF0 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025AF4 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025AF8 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025AFC 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025B00 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025B04 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025B08 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025B0C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025B10 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025B14 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025B18 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025B1C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025B20 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025B24 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025B28 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025B2C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025B30 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025B34 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025B38 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025B3C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025B40 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025B44 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025B48 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025B4C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025B50 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025B54 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025B58 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025B5C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025B60 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025B64 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025B68 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025B6C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025B70 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025B74 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025B78 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025B7C 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025B80 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025B84 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025B88 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025B8C 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025B90 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025B94 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025B98 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025B9C 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025BA0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025BA4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025BA8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025BAC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025BB0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025BB4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025BB8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025BBC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025BC0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025BC4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025BC8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025BCC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025BD0 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025BD4 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025BD8 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025BDC 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025BDE 00                         SME_vJmm3_142:	dc.b 0	
00025BDF 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025BE8 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025BFB 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025C10 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025C19 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025C20 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025C27 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025C30 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025C35 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025C3C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025C43 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025C4A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025C53 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025C5A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025C69 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025C74 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025C7B 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025C82 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025C8B 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025C90 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025C97 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025CA2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025CAD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025CBA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025CC3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025CCA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025CD5 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025CDE 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025CE5 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025CF0 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025CF9 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025CFE 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025D03 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025D0E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025D17 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025D1C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025D23 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025D2A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025D37 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025D44 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025D4D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025D54 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025D5F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025D68 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025D6F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025D7A 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025D7F 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025D84 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025D89 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025D8E 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025D93 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025D98 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025D9D 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025DA2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025DAB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025DB2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025DB9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025DC0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025DC9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00025DD0 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00025DD7 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00025DDE 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00025DE3 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00025DE8 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
00025DED 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00025DF2 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00025DF7 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
00025DFC 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00025E01 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00025E06 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00025E0F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00025E16 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
00025E1B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00025E22 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
00025E2B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00025E32 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00025E37 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00025E3E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00025E45 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
00025E4C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00025E5F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00025E72 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00025E79 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00025E80 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00025E87 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
00025E92 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00025E99 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
00025EA0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00025EAB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00025EB6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00025EBF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00025EC8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00025ED1 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00025EDA 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
00025EDD 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00025EE0 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00025EE3 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00025EE6 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00025EE9 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
00025EEC 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
00025EEF 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00025EF6 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00025EF9 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
00025EFE 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00025F01 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00025F06 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00025F09 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00025F12 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00025F21 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00025F2C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00025F33 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00025F38 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00025F41 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00025F4A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00025F53 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00025F66 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00025F6D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00025F74 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
00025F79 00                         SME_vJmm3_4DD:	dc.b 0	
00025F7A 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00025F8B 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00025F9A 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00025FA3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FAA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FB1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FB8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
00025FBB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00025FC2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00025FC9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00025FD0 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00025FD7 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00025FE0 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00025FF1 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00025FFA 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026003 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002600E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026019 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002601E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026029 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026030 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002603B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026040 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026047 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002604E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026055 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002605A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026061 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00026078 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00026085 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
0002608C 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
0002609B 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000260A0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000260A9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000260B0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000260B7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000260C0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000260C3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000260C6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000260C9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000260CC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
000260D0 00                         		even
000260D0 00                         		even
000260D0                            
000260D0                            ; ---------------------------------------------------------------------------
000260D0                            ; Uncompressed graphics	- Sonic
000260D0                            ; ---------------------------------------------------------------------------
000260D0                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C6D0                            		even
0003C6D0                            ; ---------------------------------------------------------------------------
0003C6D0                            ; Compressed graphics - various
0003C6D0                            ; ---------------------------------------------------------------------------
0003C6D0                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CA30                            		even
0003CA30                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CD90                            		even
0003CD90                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D0F0                            		even
0003D0F0                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D450                            		even
0003D450                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003D8D0                            		even
0003D8D0                            
0003D8D0                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            ; Sprite mappings - walls of the special stage
0003D8D0                            ; ---------------------------------------------------------------------------
0003D8D0                            Map_SSWalls_internal:
0003D8D0 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003D8D2 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003D8D4 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003D8D6 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003D8D8 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003D8DA 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003D8DC 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003D8DE 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003D8E0 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003D8E2 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003D8E4 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003D8E6 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003D8E8 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003D8EA 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003D8EC 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003D8EE 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003D8F0 01                         byte_2C584:	dc.b 1
0003D8F1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003D8F6 01                         byte_2C58A:	dc.b 1
0003D8F7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003D8FC 01                         byte_2C590:	dc.b 1
0003D8FD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003D902 01                         byte_2C596:	dc.b 1
0003D903 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003D908 01                         byte_2C59C:	dc.b 1
0003D909 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003D90E 01                         byte_2C5A2:	dc.b 1
0003D90F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003D914 01                         byte_2C5A8:	dc.b 1
0003D915 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003D91A 01                         byte_2C5AE:	dc.b 1
0003D91B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003D920 01                         byte_2C5B4:	dc.b 1
0003D921 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003D926 01                         byte_2C5BA:	dc.b 1
0003D927 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003D92C 01                         byte_2C5C0:	dc.b 1
0003D92D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003D932 01                         byte_2C5C6:	dc.b 1
0003D933 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003D938 01                         byte_2C5CC:	dc.b 1
0003D939 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003D93E 01                         byte_2C5D2:	dc.b 1
0003D93F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003D944 01                         byte_2C5D8:	dc.b 1
0003D945 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003D94A 01                         byte_2C5DE:	dc.b 1
0003D94B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003D950                            		even
0003D950                            		even
0003D950                            
0003D950                            ; ---------------------------------------------------------------------------
0003D950                            ; Compressed graphics - special stage
0003D950                            ; ---------------------------------------------------------------------------
0003D950                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E288                            		even
0003E288                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E3BC                            		even
0003E3BC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F04C                            		even
0003F04C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F34C                            		even
0003F34C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003F840                            		even
0003F840                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003F92E                            		even
0003F92E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003F9FE                            		even
0003F9FE                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FAF4                            		even
0003FAF4                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FB52                            		even
0003FB52                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FBE4                            		even
0003FBE4                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FCA6                            		even
0003FCA6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FD74                            		even
0003FD74                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0003FE40                            		even
0003FE40                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0003FF08                            		even
0003FF08                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
0003FFD2                            		even
0003FFD2                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000400A2                            		even
000400A2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00040296                            		even
00040296                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
000403FE                            		even
000403FE                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000404AE                            		even
000404AE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
00040588                            		even
00040588                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004060C                            		even
0004060C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0004078A                            		even
0004078A                            ; ---------------------------------------------------------------------------
0004078A                            ; Compressed graphics - GHZ stuff
0004078A                            ; ---------------------------------------------------------------------------
0004078A                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000407EC                            		even
000407EC                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040906                            		even
00040906                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040A24                            		even
00040A24                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040A6C                            		even
00040A6C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040C0A                            		even
00040C0A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040C86                            		even
00040C86                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00040E9A                            		even
00040E9A                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00040FC6                            		even
00040FC6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004111A                            		even
0004111A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000411CA                            		even
000411CA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004122A                            		even
0004122A                            ; ---------------------------------------------------------------------------
0004122A                            ; Compressed graphics - LZ stuff
0004122A                            ; ---------------------------------------------------------------------------
0004122A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041302                            		even
00041302                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041AF6                            		even
00041AF6                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041C88 00                         		even
00041C88                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00041DF2                            		even
00041DF2                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042432 00                         		even
00042432                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000424D4 00                         		even
000424D4                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042558                            		even
00042558                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000426B4                            		even
000426B4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004273A                            		even
0004273A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000428A8                            		even
000428A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042D8A                            		even
00042D8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00042EFA                            		even
00042EFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000431B2                            		even
000431B2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000432F8                            		even
000432F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043422                            		even
00043422                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000435A8 00                         		even
000435A8                            ; ---------------------------------------------------------------------------
000435A8                            ; Compressed graphics - MZ stuff
000435A8                            ; ---------------------------------------------------------------------------
000435A8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043836                            		even
00043836                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000438F4                            		even
000438F4                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
000439CC                            		even
000439CC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043A20                            		even
00043A20                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043D3E 00                         		even
00043D3E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044654                            		even
00044654                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000447EA                            		even
000447EA                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044872                            		even
00044872                            ; ---------------------------------------------------------------------------
00044872                            ; Compressed graphics - SLZ stuff
00044872                            ; ---------------------------------------------------------------------------
00044872                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044AAE                            		even
00044AAE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044BF4                            		even
00044BF4                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00044E38                            		even
00044E38                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00044ED4 00                         		even
00044ED4                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00044FB6                            		even
00044FB6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00045198                            		even
00045198                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000452A4                            		even
000452A4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045348                            		even
00045348                            ; ---------------------------------------------------------------------------
00045348                            ; Compressed graphics - SYZ stuff
00045348                            ; ---------------------------------------------------------------------------
00045348                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000454D8                            		even
000454D8                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004553A                            		even
0004553A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004560A 00                         		even
0004560A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045898                            		even
00045898                            ; ---------------------------------------------------------------------------
00045898                            ; Compressed graphics - SBZ stuff
00045898                            ; ---------------------------------------------------------------------------
00045898                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000458EC                            		even
000458EC                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045B88                            		even
00045B88                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045D78                            		even
00045D78                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00045F16                            		even
00045F16                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046246                            		even
00046246                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046424                            		even
00046424                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004647C                            		even
0004647C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004661C                            		even
0004661C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004671A                            		even
0004671A                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
000468A8                            		even
000468A8                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046942                            		even
00046942                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0004699A                            		even
0004699A                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046A96                            		even
00046A96                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046BAC                            		even
00046BAC                            ; ---------------------------------------------------------------------------
00046BAC                            ; Compressed graphics - enemies
00046BAC                            ; ---------------------------------------------------------------------------
00046BAC                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00046FF4 00                         		even
00046FF4                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000474E4 00                         		even
000474E4                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
000477C8 00                         		even
000477C8                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047B3C 00                         		even
00047B3C                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047D24                            		even
00047D24                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048452 00                         		even
00048452                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
000486DA 00                         		even
000486DA                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048976 00                         		even
00048976                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00048F4A                            		even
00048F4A                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
000491DC                            		even
000491DC                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049826 00                         		even
00049826                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049C62                            		even
00049C62                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
00049F70 00                         		even
00049F70                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A1D0                            		even
0004A1D0                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A4CE                            		even
0004A4CE                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A6FA 00                         		even
0004A6FA                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004A888                            		even
0004A888                            ; ---------------------------------------------------------------------------
0004A888                            ; Compressed graphics - various
0004A888                            ; ---------------------------------------------------------------------------
0004A888                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004AED6 00                         		even
0004AED6                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B04E 00                         		even
0004B04E                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B172                            		even
0004B172                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B2C6 00                         		even
0004B2C6                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B7C0 00                         		even
0004B7C0                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004BE34                            		even
0004BE34                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004BECE 00                         		even
0004BECE                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C060                            		even
0004C060                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C17E 00                         		even
0004C17E                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C26A                            		even
0004C26A                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C7E2 00                         		even
0004C7E2                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004C8CC                            		even
0004C8CC                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CA40                            		even
0004CA40                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CDC8 00                         		even
0004CDC8                            ; ---------------------------------------------------------------------------
0004CDC8                            ; Compressed graphics - continue screen
0004CDC8                            ; ---------------------------------------------------------------------------
0004CDC8                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D078                            		even
0004D078                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D2B2                            		even
0004D2B2                            ; ---------------------------------------------------------------------------
0004D2B2                            ; Compressed graphics - animals
0004D2B2                            ; ---------------------------------------------------------------------------
0004D2B2                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D40A                            		even
0004D40A                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D566                            		even
0004D566                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D6E2                            		even
0004D6E2                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D7FE                            		even
0004D7FE                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004D978                            		even
0004D978                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DAB2                            		even
0004DAB2                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DC0E                            		even
0004DC0E                            ; ---------------------------------------------------------------------------
0004DC0E                            ; Compressed graphics - primary patterns and block mappings
0004DC0E                            ; ---------------------------------------------------------------------------
0004DC0E                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E610                            		even
0004E610                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0004FEB8                            		even
0004FEB8                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00051448                            		even
00051448                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053832                            		even
00053832                            Blk16_TS:	incbin	"map16\TS.bin"
00053AB6                            		even
00053AB6                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054BF4                            		even
00054BF4                            Blk256_TS:	incbin	"map256\TS.bin"
000557A2                            		even
000557A2                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056A1E                            		even
00056A1E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
00059EF0                            		even
00059EF0                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D3AE                            		even
0005D3AE                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DBB6                            		even
0005DBB6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
000605AE                            		even
000605AE                            		incbin	"map256\MZ (JP1).bin"
0006248C                            		even
0006248C                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062B0E                            		even
00062B0E                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066578                            		even
00066578                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068982                            		even
00068982                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
00069508                            		even
00069508                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006C8F8                            		even
0006C8F8                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DC9A                            		even
0006DC9A                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006E894                            		even
0006E894                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000710D6                            		even
000710D6                            		incbin	"map256\SBZ (JP1).bin"
00071C62                            		even
00071C62                            ; ---------------------------------------------------------------------------
00071C62                            ; Compressed graphics - bosses and ending sequence
00071C62                            ; ---------------------------------------------------------------------------
00071C62                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
000724DE 00                         		even
000724DE                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
000727C8                            		even
000727C8                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007304C                            		even
0007304C                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073878                            		even
00073878                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074046 00                         		even
00074046                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
000745C6                            		even
000745C6                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
000746E6                            		even
000746E6                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
000748EE 00                         		even
000748EE                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075ACC                            		even
00075ACC                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076410                            		even
00076410                            		even
00076410                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
000769A0                            		even
000769A0                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076C28                            		even
00076C28                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077226                            		even
00077226                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000774AE                            		even
000774AE                            
000774AE FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
000774EE                            ; ---------------------------------------------------------------------------
000774EE                            ; Collision data
000774EE                            ; ---------------------------------------------------------------------------
000774EE                            AngleMap:	incbin	"collide\Angle Map.bin"
000775EE                            		even
000775EE                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
000785EE                            		even
000785EE                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
000795EE                            		even
000795EE                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
000797AC 00                         		even
000797AC                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079A6A                            		even
00079A6A                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079BE4 00                         		even
00079BE4                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00079DD8                            		even
00079DD8                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
00079FC4 00                         		even
00079FC4                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A194 00                         		even
0007A194                            ; ---------------------------------------------------------------------------
0007A194                            ; Special Stage layouts
0007A194                            ; ---------------------------------------------------------------------------
0007A194                            SS_1:		incbin	"sslayout\1.bin"
0007A40E                            		even
0007A40E                            SS_2:		incbin	"sslayout\2.bin"
0007A820                            		even
0007A820                            SS_3:		incbin	"sslayout\3.bin"
0007AB7C                            		even
0007AB7C                            SS_4:		incbin	"sslayout\4.bin"
0007B056                            		even
0007B056                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B506                            			even
0007B506                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007B7F8                            		even
0007B7F8                            ; ---------------------------------------------------------------------------
0007B7F8                            ; Animated uncompressed graphics
0007B7F8                            ; ---------------------------------------------------------------------------
0007B7F8                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007B9F8                            		even
0007B9F8                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007BDF8                            		even
0007BDF8                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C278                            		even
0007C278                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C578                            		even
0007C578                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CB78                            		even
0007CB78                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007CE78                            		even
0007CE78                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007D8F8                            		even
0007D8F8                            
0007D8F8                            ; ---------------------------------------------------------------------------
0007D8F8                            ; Level	layout index
0007D8F8                            ; ---------------------------------------------------------------------------
0007D8F8                            Level_Index:
0007D8F8                            		; GHZ
0007D8F8 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007D8FE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007D904 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007D90A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007D910                            		; LZ
0007D910 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007D916 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007D91C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007D922 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007D928                            		; MZ
0007D928 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007D92E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007D934 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007D93A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007D940                            		; SLZ
0007D940 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D946 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D94C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007D952 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007D958                            		; SYZ
0007D958 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007D95E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007D964 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007D96A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007D970                            		; SBZ
0007D970 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007D976 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007D97C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007D982 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007D988                            		; Ending
0007D988 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D98E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007D994 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D99A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007D9A0                            
0007D9A0                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DBD2                            		even
0007DBD2 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DBD6                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007DCF8                            		even
0007DCF8 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007DCFC                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007DF7E                            		even
0007DF7E                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007DFC0                            		even
0007DFC0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007DFC4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007DFC8                            
0007DFC8                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E08A                            		even
0007E08A                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E18C                            		even
0007E18C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E190                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E22A                            		even
0007E22A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E22E                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E348                            		even
0007E348 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E34C                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E406                            		even
0007E406 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E40A                            
0007E40A                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E4FC                            		even
0007E4FC                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E61E                            		even
0007E61E                            Level_MZ2:	incbin	"levels\mz2.bin"
0007E710                            		even
0007E710                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007E832                            		even
0007E832 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007E836                            Level_MZ3:	incbin	"levels\mz3.bin"
0007E8A8                            		even
0007E8A8                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007E9CA                            		even
0007E9CA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007E9CE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007E9D2                            
0007E9D2                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EAE4                            		even
0007EAE4                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EB5E                            		even
0007EB5E                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EC4E                            		even
0007EC4E                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007ED68                            		even
0007ED68 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007ED6C                            
0007ED6C                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007EE70                            		even
0007EE70                            		incbin	"levels\syzbg (JP1).bin"
0007EEAA                            		even
0007EEAA 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007EEAE                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007EFB2                            		even
0007EFB2 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007EFB6                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F110 00                         		even
0007F110 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F114 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F118                            
0007F118                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F23A                            		even
0007F23A                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F278                            		even
0007F278                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F3BA                            		even
0007F3BA                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F524                            		even
0007F524 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F528 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F52C                            Level_End:	incbin	"levels\ending.bin"
0007F55C 00                         		even
0007F55C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F560                            
0007F560                            
0007F560                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000801A0                            		even
000801A0                            
00080200                            
00080200                            ; ---------------------------------------------------------------------------
00080200                            ; Sprite locations index
00080200                            ; ---------------------------------------------------------------------------
00080200                            ObjPos_Index:
00080200                            		; GHZ
00080200 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080204 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080208 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008020C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080210                            		; LZ
00080210 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080214 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080218 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008021C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080220                            		; MZ
00080220 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080224 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080228 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008022C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080230                            		; SLZ
00080230 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080234 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080238 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008023C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080240                            		; SYZ
00080240 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080244 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080248 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008024C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080250                            		; SBZ
00080250 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080254 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080258 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008025C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080260                            		; Ending
00080260 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080264 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080268 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008026C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080270                            		; --- Put extra object data here. ---
00080270                            ObjPosLZPlatform_Index:
00080270 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080274 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080278 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008027C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080280                            ObjPosSBZPlatform_Index:
00080280 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080284 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080288 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008028C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080290 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080296                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
000808F0                            		even
000808F0                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00080D46                            		even
00080D46                            		incbin	"objpos\ghz3 (JP1).bin"
00080F56                            		even
00080F56                            		incbin	"objpos\lz1 (JP1).bin"
00080F8C                            		even
00080F8C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000812CE                            		even
000812CE                            		incbin	"objpos\lz3 (JP1).bin"
00081892                            		even
00081892                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00081F22                            		even
00081F22                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00081F54                            		even
00081F54                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00081F86                            		even
00081F86                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00081FB8                            		even
00081FB8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
00081FEA                            		even
00081FEA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082034                            		even
00082034                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082072                            		even
00082072                            		incbin	"objpos\mz1 (JP1).bin"
0008265A                            		even
0008265A                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082966                            		even
00082966                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082B4C                            		even
00082B4C                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00083080                            		even
00083080                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
000834EE                            		even
000834EE                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083AD0                            		even
00083AD0                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083B18                            		even
00083B18                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083B42                            		even
00083B42                            		incbin	"objpos\syz3 (JP1).bin"
00083B72                            		even
00083B72                            		incbin	"objpos\sbz1 (JP1).bin"
00083BBA                            		even
00083BBA                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00083BE4                            		even
00083BE4                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00083C08                            		even
00083C08                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00083C3A                            		even
00083C3A                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00083C6C                            		even
00083C6C                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00083C9E                            		even
00083C9E                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00083CD0                            		even
00083CD0                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00083D02                            		even
00083D02                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00083D3A                            		even
00083D3A                            ObjPos_End:	incbin	"objpos\ending.bin"
00083E96                            		even
00083E96 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00083E9C                            
00083E9C                            		dcb.b $63C,$FF
000844D8                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
000844D8                            
000844D8                            SoundDriver:	include "s1.sounddriver.asm"
000844D8                            ; ---------------------------------------------------------------------------
000844D8                            ; Modified (early?) SMPS 68k Type 1b
000844D8                            ; ---------------------------------------------------------------------------
000844D8                            ; Go_SoundTypes:
000844D8 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
000844DC                            ; Go_SoundD0:
000844DC 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
000844E0 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
000844E4 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
000844E8                            ; off_719A0:
000844E8 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000844EC 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000844F0                            ; ---------------------------------------------------------------------------
000844F0                            ; PSG instruments used in music
000844F0                            ; ---------------------------------------------------------------------------
000844F0                            PSG_Index:
000844F0 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
000844FC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084508 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084514                            PSG1:		incbin	"sound/psg/psg1.bin"
0008452B                            PSG2:		incbin	"sound/psg/psg2.bin"
00084532                            PSG3:		incbin	"sound/psg/psg3.bin"
00084543                            PSG4:		incbin	"sound/psg/psg4.bin"
0008454E                            PSG6:		incbin	"sound/psg/psg6.bin"
0008455D                            PSG5:		incbin	"sound/psg/psg5.bin"
00084587                            PSG7:		incbin	"sound/psg/psg7.bin"
000845A3                            PSG8:		incbin	"sound/psg/psg8.bin"
000845CB                            PSG9:		incbin	"sound/psg/psg9.bin"
000845DC                            ; ---------------------------------------------------------------------------
000845DC                            ; New tempos for songs during speed shoes
000845DC                            ; ---------------------------------------------------------------------------
000845DC                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
000845DC                            ; tempos while speed shoes are active. If you don't want that, you should add
000845DC                            ; their "correct" sped-up main tempos to the list.
000845DC                            ; byte_71A94:
000845DC                            SpeedUpIndex:
000845DC 07                         		dc.b 7		; GHZ
000845DD 72                         		dc.b $72	; LZ
000845DE 73                         		dc.b $73	; MZ
000845DF 26                         		dc.b $26	; SLZ
000845E0 15                         		dc.b $15	; SYZ
000845E1 08                         		dc.b 8		; SBZ
000845E2 FF                         		dc.b $FF	; Invincibility
000845E3 05                         		dc.b 5		; Extra Life
000845E4                            		;dc.b ?		; Special Stage
000845E4                            		;dc.b ?		; Title Screen
000845E4                            		;dc.b ?		; Ending
000845E4                            		;dc.b ?		; Boss
000845E4                            		;dc.b ?		; FZ
000845E4                            		;dc.b ?		; Sonic Got Through
000845E4                            		;dc.b ?		; Game Over
000845E4                            		;dc.b ?		; Continue Screen
000845E4                            		;dc.b ?		; Credits
000845E4                            		;dc.b ?		; Drowning
000845E4                            		;dc.b ?		; Get Emerald
000845E4                            
000845E4                            ; ---------------------------------------------------------------------------
000845E4                            ; Music	Pointers
000845E4                            ; ---------------------------------------------------------------------------
000845E4                            MusicIndex:
000845E4 0000 0000                  ptr_mus81:	dc.l Music81
000845E8 0000 0000                  ptr_mus82:	dc.l Music82
000845EC 0000 0000                  ptr_mus83:	dc.l Music83
000845F0 0000 0000                  ptr_mus84:	dc.l Music84
000845F4 0000 0000                  ptr_mus85:	dc.l Music85
000845F8 0000 0000                  ptr_mus86:	dc.l Music86
000845FC 0000 0000                  ptr_mus87:	dc.l Music87
00084600 0000 0000                  ptr_mus88:	dc.l Music88
00084604 0000 0000                  ptr_mus89:	dc.l Music89
00084608 0000 0000                  ptr_mus8A:	dc.l Music8A
0008460C 0000 0000                  ptr_mus8B:	dc.l Music8B
00084610 0000 0000                  ptr_mus8C:	dc.l Music8C
00084614 0000 0000                  ptr_mus8D:	dc.l Music8D
00084618 0000 0000                  ptr_mus8E:	dc.l Music8E
0008461C 0000 0000                  ptr_mus8F:	dc.l Music8F
00084620 0000 0000                  ptr_mus90:	dc.l Music90
00084624 0000 0000                  ptr_mus91:	dc.l Music91
00084628 0000 0000                  ptr_mus92:	dc.l Music92
0008462C 0000 0000                  ptr_mus93:	dc.l Music93
00084630 0000 0000                  ptr_mus94:	dc.l Music94
00084634 0000 0000                  ptr_mus95:	dc.l Music95
00084638 0000 0000                  ptr_mus96:	dc.l Music96
0008463C 0000 0000                  ptr_mus97:	dc.l Music97
00084640 0000 0000                  ptr_mus98:	dc.l Music98
00084644                            ptr_musend
00084644                            ; ---------------------------------------------------------------------------
00084644                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084644                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084644                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084644                            ; any music or SFX can override it (as long as it can override whatever was
00084644                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084644                            ; will only override special SFX and music will only override music.
00084644                            ; ---------------------------------------------------------------------------
00084644                            ; SoundTypes:
00084644                            SoundPriorities:
00084644 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084653 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084663 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084673 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084683 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084693 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000846A3 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000846A8                            
000846A8                            ; ---------------------------------------------------------------------------
000846A8                            ; Subroutine to update music more than once per frame
000846A8                            ; (Called by horizontal & vert. interrupts)
000846A8                            ; ---------------------------------------------------------------------------
000846A8                            
000846A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000846A8                            
000846A8                            ; sub_71B4C:
000846A8                            UpdateMusic:
000846A8 33FC 0100 00A1 1100        		stopZ80
000846B0 4E71                       		nop	
000846B2 4E71                       		nop	
000846B4 4E71                       		nop	
000846B6                            ; loc_71B5A:
000846B6                            @updateloop:
000846B6 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
000846BE 66F6                       		bne.s	@updateloop			; If so, wait
000846C0                            
000846C0 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
000846C8 6700                       		beq.s	@driverinput			; Branch if yes
000846CA 33FC 0000 00A1 1100        		startZ80
000846D2 4E71                       		nop	
000846D4 4E71                       		nop	
000846D6 4E71                       		nop	
000846D8 4E71                       		nop	
000846DA 4E71                       		nop	
000846DC 60CA                       		bra.s	UpdateMusic
000846DE                            ; ===========================================================================
000846DE                            ; loc_71B82:
000846DE                            @driverinput:
000846DE 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
000846E4 422E 000E                  		clr.b	f_voice_selector(a6)
000846E8 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
000846EC 6600 0000                  		bne.w	PauseMusic			; if yes, branch
000846F0 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
000846F4 6600                       		bne.s	@skipdelay
000846F6 4EBA 0000                  		jsr	TempoWait(pc)
000846FA                            ; loc_71B9E:
000846FA                            @skipdelay:
000846FA 102E 0004                  		move.b	v_fadeout_counter(a6),d0
000846FE 6700                       		beq.s	@skipfadeout
00084700 4EBA 0000                  		jsr	DoFadeOut(pc)
00084704                            ; loc_71BA8:
00084704                            @skipfadeout:
00084704 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084708 6700                       		beq.s	@skipfadein
0008470A 4EBA 0000                  		jsr	DoFadeIn(pc)
0008470E                            ; loc_71BB2:
0008470E                            @skipfadein:
0008470E                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
0008470E 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084712 6700                       		beq.s	@nosndinput		; if not, branch
00084714 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084718                            ; loc_71BBC:
00084718                            @nosndinput:
00084718 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
0008471E 6700                       		beq.s	@nonewsound		; If yes, branch
00084720 4EBA 0000                  		jsr	PlaySoundID(pc)
00084724                            ; loc_71BC8:
00084724                            @nonewsound:
00084724 4A38 C901                  		tst.b	($FFFFC901).w
00084728 6700                       		beq.s	@cont
0008472A 5338 C901                  		subq.b	#1,($FFFFC901).w
0008472E                            		
0008472E                            @cont:
0008472E 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084732 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084734 6A00                       		bpl.s	@dacdone		; Branch if not
00084736 4EBA 0000                  		jsr	DACUpdateTrack(pc)
0008473A                            ; loc_71BD4:
0008473A                            @dacdone:
0008473A 422E 0008                  		clr.b	f_updating_dac(a6)
0008473E 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084740                            ; loc_71BDA:
00084740                            @bgmfmloop:
00084740 DAFC 0030                  		adda.w	#TrackSz,a5
00084744 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084746 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084748 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0008474C                            ; loc_71BE6:
0008474C                            @bgmfmnext:
0008474C 51CF FFF2                  		dbf	d7,@bgmfmloop
00084750                            
00084750 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084752                            ; loc_71BEC:
00084752                            @bgmpsgloop:
00084752 DAFC 0030                  		adda.w	#TrackSz,a5
00084756 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084758 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
0008475A 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
0008475E                            ; loc_71BF8:
0008475E                            @bgmpsgnext:
0008475E 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084762                            
00084762 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084768 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
0008476A                            ; loc_71C04:
0008476A                            @sfxfmloop:
0008476A DAFC 0030                  		adda.w	#TrackSz,a5
0008476E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084770 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084772 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084776                            ; loc_71C10:
00084776                            @sfxfmnext:
00084776 51CF FFF2                  		dbf	d7,@sfxfmloop
0008477A                            
0008477A 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
0008477C                            ; loc_71C16:
0008477C                            @sfxpsgloop:
0008477C DAFC 0030                  		adda.w	#TrackSz,a5
00084780 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084782 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084784 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084788                            ; loc_71C22:
00084788                            @sfxpsgnext:
00084788 51CF FFF2                  		dbf	d7,@sfxpsgloop
0008478C                            		
0008478C 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084792 DAFC 0030                  		adda.w	#TrackSz,a5
00084796 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084798 6A00                       		bpl.s	@specfmdone		; Branch if not
0008479A 4EBA 0000                  		jsr	FMUpdateTrack(pc)
0008479E                            ; loc_71C38:
0008479E                            @specfmdone:
0008479E DAFC 0030                  		adda.w	#TrackSz,a5
000847A2 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000847A4 6A00                       		bpl.s	DoStartZ80		; Branch if not
000847A6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000847AA                            ; loc_71C44:
000847AA                            DoStartZ80:
000847AA 33FC 0000 00A1 1100        		startZ80
000847B2 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
000847B8 6700                       		beq.s @end ; if not, branch
000847BA 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
000847C0 6600                       		bne.s @end ; if not, branch
000847C2 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
000847C8 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
000847CC                            
000847CC                            	@end:
000847CC 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
000847D0 4E75                       		rts
000847D2                            ; End of function UpdateMusic
000847D2                            
000847D2                            
000847D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000847D2                            
000847D2                            ; sub_71C4E: UpdateDAC:
000847D2                            DACUpdateTrack:
000847D2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
000847D6 6600                       		bne.s	@locret				; Return if not
000847D8 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
000847DE                            ;DACDoNext:
000847DE 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
000847E2                            ; loc_71C5E:
000847E2                            @sampleloop:
000847E2 7A00                       		moveq	#0,d5
000847E4 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
000847E6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000847EA 6500                       		blo.s	@notcoord	; Branch if not
000847EC 4EBA 0000                  		jsr	CoordFlag(pc)
000847F0 60F0                       		bra.s	@sampleloop
000847F2                            ; ===========================================================================
000847F2                            ; loc_71C6E:
000847F2                            @notcoord:
000847F2 4A05                       		tst.b	d5			; Is it a sample?
000847F4 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
000847F6 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
000847FA 1A1C                       		move.b	(a4)+,d5		; Get another byte
000847FC 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
000847FE 534C                       		subq.w	#1,a4			; Put byte back
00084800 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084806 6000                       		bra.s	@gotsampleduration
00084808                            ; ===========================================================================
00084808                            ; loc_71C84:
00084808                            @gotduration:
00084808 4EBA 0000                  		jsr	SetDuration(pc)
0008480C                            ; loc_71C88:
0008480C                            @gotsampleduration:
0008480C 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084810 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084814 6600                       		bne.s	@locret			; Return if yes
00084816 7000                       		moveq	#0,d0
00084818 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
0008481C 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084820 6700                       		beq.s	@locret			; Return if yes
00084822 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084826 6600                       		bne.s	@timpani		; Various timpani
00084828 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
0008482E                            ; locret_71CAA:
0008482E                            @locret:
0008482E 4E75                       		rts	
00084830                            ; ===========================================================================
00084830                            ; loc_71CAC:
00084830                            @timpani:
00084830 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084834 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084838                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084838                            		; use this value from then on.
00084838 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
0008483E 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084846 4E75                       		rts	
00084848                            ; End of function DACUpdateTrack
00084848                            
00084848                            ; ===========================================================================
00084848                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084848                            ; Also, $8C-$8D are so slow you may want to skip them.
00084848                            ; byte_71CC4:
00084848 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
0008484E                            
0008484E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008484E                            
0008484E                            ; sub_71CCA:
0008484E                            FMUpdateTrack:
0008484E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084852 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084854 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084858 4EBA 0000                  		jsr	FMDoNext(pc)
0008485C 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084860 6000 0000                  		bra.w	FMNoteOn
00084864                            ; ===========================================================================
00084864                            ; loc_71CE0:
00084864                            @notegoing:
00084864 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084868 4EBA 0000                  		jsr	DoModulation(pc)
0008486C 6000 0000                  		bra.w	FMUpdateFreq
00084870                            ; End of function FMUpdateTrack
00084870                            
00084870                            
00084870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084870                            
00084870                            ; sub_71CEC:
00084870                            FMDoNext:
00084870 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084874 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084878                            ; loc_71CF4:
00084878                            @noteloop:
00084878 7A00                       		moveq	#0,d5
0008487A 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0008487C 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084880 6500                       		blo.s	@gotnote	; Branch if not
00084882 4EBA 0000                  		jsr	CoordFlag(pc)
00084886 60F0                       		bra.s	@noteloop
00084888                            ; ===========================================================================
00084888                            ; loc_71D04:
00084888                            @gotnote:
00084888 4EBA 0000                  		jsr	FMNoteOff(pc)
0008488C 4A05                       		tst.b	d5		; Is this a note?
0008488E 6A00                       		bpl.s	@gotduration	; Branch if not
00084890 4EBA 0000                  		jsr	FMSetFreq(pc)
00084894 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084896 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084898 534C                       		subq.w	#1,a4		; Otherwise, put it back
0008489A 6000 0000                  		bra.w	FinishTrackUpdate
0008489E                            ; ===========================================================================
0008489E                            ; loc_71D1A:
0008489E                            @gotduration:
0008489E 4EBA 0000                  		jsr	SetDuration(pc)
000848A2 6000 0000                  		bra.w	FinishTrackUpdate
000848A6                            ; End of function FMDoNext
000848A6                            
000848A6                            
000848A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000848A6                            
000848A6                            ; sub_71D22:
000848A6                            FMSetFreq:
000848A6 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000848AA 6700                       		beq.s	TrackSetRest
000848AC DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000848B0 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000848B4 E34D                       		lsl.w	#1,d5
000848B6 41FA 0000                  		lea	FMFrequencies(pc),a0
000848BA 3C30 5000                  		move.w	(a0,d5.w),d6
000848BE 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
000848C2 4E75                       		rts	
000848C4                            ; End of function FMSetFreq
000848C4                            
000848C4                            
000848C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000848C4                            
000848C4                            ; sub_71D40:
000848C4                            SetDuration:
000848C4 1005                       		move.b	d5,d0
000848C6 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
000848CA                            ; loc_71D46:
000848CA                            @multloop:
000848CA 5301                       		subq.b	#1,d1
000848CC 6700                       		beq.s	@donemult
000848CE D005                       		add.b	d5,d0
000848D0 60F8                       		bra.s	@multloop
000848D2                            ; ===========================================================================
000848D2                            ; loc_71D4E:
000848D2                            @donemult:
000848D2 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
000848D6 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
000848DA 4E75                       		rts	
000848DC                            ; End of function SetDuration
000848DC                            
000848DC                            ; ===========================================================================
000848DC                            ; loc_71D58:
000848DC                            TrackSetRest:
000848DC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000848E0 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
000848E4                            
000848E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000848E4                            
000848E4                            ; sub_71D60:
000848E4                            FinishTrackUpdate:
000848E4 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
000848E8 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
000848EE 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
000848F2 6600                       		bne.s	@locret				; If so, branch
000848F4 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
000848FA 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
000848FE 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084902 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084904 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084908 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
0008490C 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084910 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084914 1018                       		move.b	(a0)+,d0			; Get steps
00084916 E208                       		lsr.b	#1,d0				; Halve them
00084918 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
0008491C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084920                            ; locret_71D9C:
00084920                            @locret:
00084920 4E75                       		rts	
00084922                            ; End of function FinishTrackUpdate
00084922                            
00084922                            
00084922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084922                            
00084922                            ; sub_71D9E: NoteFillUpdate
00084922                            NoteTimeoutUpdate:
00084922 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084926 6700                       		beq.s	@locret
00084928 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
0008492C 6600                       		bne.s	@locret				; Return if it hasn't expired
0008492E 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084932 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084936 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
0008493A 4EBA 0000                  		jsr	FMNoteOff(pc)
0008493E 584F                       		addq.w	#4,sp				; Do not return to caller
00084940 4E75                       		rts	
00084942                            ; ===========================================================================
00084942                            ; loc_71DBE:
00084942                            @psgnoteoff:
00084942 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084946 584F                       		addq.w	#4,sp		; Do not return to caller
00084948                            ; locret_71DC4:
00084948                            @locret:
00084948 4E75                       		rts	
0008494A                            ; End of function NoteTimeoutUpdate
0008494A                            
0008494A                            
0008494A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008494A                            
0008494A                            ; sub_71DC6:
0008494A                            DoModulation:
0008494A 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
0008494C 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084950 6700                       		beq.s	@locret				; Return if not
00084952 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084956 6700                       		beq.s	@waitdone			; If yes, branch
00084958 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
0008495C 4E75                       		rts	
0008495E                            ; ===========================================================================
0008495E                            ; loc_71DDA:
0008495E                            @waitdone:
0008495E 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084962 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084964 4E75                       		rts	
00084966                            ; ===========================================================================
00084966                            ; loc_71DE2:
00084966                            @updatemodulation:
00084966 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
0008496A 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084970 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084974 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084976 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
0008497C 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084980 4E75                       		rts	
00084982                            ; ===========================================================================
00084982                            ; loc_71DFE:
00084982                            @calcfreq:
00084982 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084986 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
0008498A 4886                       		ext.w	d6
0008498C DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084990 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084994 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084998 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
0008499A                            ; locret_71E16:
0008499A                            @locret:
0008499A 4E75                       		rts	
0008499C                            ; End of function DoModulation
0008499C                            
0008499C                            
0008499C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008499C                            
0008499C                            ; sub_71E18:
0008499C                            FMPrepareNote:
0008499C 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
000849A0 6600                       		bne.s	locret_71E48		; Return if so
000849A2 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
000849A6 6700                       		beq.s	FMSetRest		; Branch if zero
000849A8                            ; loc_71E24:
000849A8                            FMUpdateFreq:
000849A8 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
000849AC 4880                       		ext.w	d0
000849AE DC40                       		add.w	d0,d6			; Add note frequency
000849B0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000849B4 6600                       		bne.s	locret_71E48		; Return if so
000849B6 3206                       		move.w	d6,d1
000849B8 E049                       		lsr.w	#8,d1
000849BA 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
000849BE 4EBA 0000                  		jsr	WriteFMIorII(pc)
000849C2 1206                       		move.b	d6,d1
000849C4 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
000849C8 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
000849CC                            ; locret_71E48:
000849CC                            locret_71E48:
000849CC 4E75                       		rts	
000849CE                            ; ===========================================================================
000849CE                            ; loc_71E4A:
000849CE                            FMSetRest:
000849CE 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000849D2 4E75                       		rts	
000849D4                            ; End of function FMPrepareNote
000849D4                            
000849D4                            ; ===========================================================================
000849D4                            ; loc_71E50:
000849D4                            PauseMusic:
000849D4 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
000849D6 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000849DC 6700 0000                  		beq.w	@unpausedallfm
000849E0 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000849E6 7602                       		moveq	#2,d3
000849E8 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000849EC 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000849EE                            ; loc_71E6A:
000849EE                            @killpanloop:
000849EE 4EBA 0000                  		jsr	WriteFMI(pc)
000849F2 4EBA 0000                  		jsr	WriteFMII(pc)
000849F6 5200                       		addq.b	#1,d0
000849F8 51CB FFF4                  		dbf	d3,@killpanloop
000849FC                            
000849FC 7602                       		moveq	#2,d3
000849FE 7028                       		moveq	#$28,d0		; Key on/off register
00084A00                            ; loc_71E7C:
00084A00                            @noteoffloop:
00084A00 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084A02 4EBA 0000                  		jsr	WriteFMI(pc)
00084A06 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084A08 4EBA 0000                  		jsr	WriteFMI(pc)
00084A0C 51CB FFF2                  		dbf	d3,@noteoffloop
00084A10                            
00084A10 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084A14 6000 FD94                  		bra.w	DoStartZ80
00084A18                            ; ===========================================================================
00084A18                            ; loc_71E94:
00084A18                            @unpausemusic:
00084A18 422E 0003                  		clr.b	f_pausemusic(a6)
00084A1C 7630                       		moveq	#TrackSz,d3
00084A1E 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084A22 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084A24                            ; loc_71EA0:
00084A24                            @bgmfmloop:
00084A24 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084A28 6700                       		beq.s	@bgmfmnext		; Branch if not
00084A2A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084A2E 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084A30 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084A34 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084A38 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084A3C                            ; loc_71EB8:
00084A3C                            @bgmfmnext:
00084A3C DAC3                       		adda.w	d3,a5
00084A3E 51CC FFE4                  		dbf	d4,@bgmfmloop
00084A42                            
00084A42 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084A46 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084A48                            ; loc_71EC4:
00084A48                            @sfxfmloop:
00084A48 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084A4C 6700                       		beq.s	@sfxfmnext		; Branch if not
00084A4E 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084A52 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084A54 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084A58 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084A5C 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084A60                            ; loc_71EDC:
00084A60                            @sfxfmnext:
00084A60 DAC3                       		adda.w	d3,a5
00084A62 51CC FFE4                  		dbf	d4,@sfxfmloop
00084A66                            
00084A66 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084A6A 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084A6E 6700                       		beq.s	@unpausedallfm		; Branch if not
00084A70 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084A74 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084A76 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084A7A 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084A7E 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084A82                            ; loc_71EFE:
00084A82                            @unpausedallfm:
00084A82 6000 FD26                  		bra.w	DoStartZ80
00084A86                            
00084A86                            ; ---------------------------------------------------------------------------
00084A86                            ; Subroutine to	play a sound or	music track
00084A86                            ; ---------------------------------------------------------------------------
00084A86                            
00084A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084A86                            
00084A86                            ; Sound_Play:
00084A86                            CycleSoundQueue:
00084A86 2079 0008 44D8             		movea.l	(Go_SoundPriorities).l,a0
00084A8C 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084A90 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084A92 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084A94                            ; loc_71F12:
00084A94                            @inputloop:
00084A94 1011                       		move.b	(a1),d0			; move track number to d0
00084A96 1200                       		move.b	d0,d1
00084A98 4219                       		clr.b	(a1)+			; Clear entry
00084A9A 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084A9E 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084AA0 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084AA6 6700                       		beq.s	@havesound		; If yes, branch
00084AA8 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084AAC 6000                       		bra.s	@nextinput
00084AAE                            ; ===========================================================================
00084AAE                            ; loc_71F2C:
00084AAE                            @havesound:
00084AAE 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084AB2 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084AB6 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084AB8 6500                       		blo.s	@nextinput		; Branch if yes
00084ABA 1602                       		move.b	d2,d3			; Store new priority
00084ABC 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084AC0                            ; loc_71F3E:
00084AC0                            @nextinput:
00084AC0 51CC FFD2                  		dbf	d4,@inputloop
00084AC4                            
00084AC4 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084AC6 6B00                       		bmi.s	@locret
00084AC8 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084ACA                            ; locret_71F4A:
00084ACA                            @locret:
00084ACA 4E75                       		rts	
00084ACC                            ; End of function CycleSoundQueue
00084ACC                            
00084ACC                            
00084ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084ACC                            
00084ACC                            ; Sound_ChkValue:
00084ACC                            PlaySoundID:
00084ACC 7E00                       		moveq	#0,d7
00084ACE 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084AD2 6700 0000                  		beq.w	StopAllSound
00084AD6 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084AD8 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084ADE                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084ADE                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084ADE                            		; See LevSel_NoCheat for more.
00084ADE 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084AE2 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084AE6 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084AEA 6500 0000                  		blo.w	@locret			; Return if yes
00084AEE 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084AF2 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084AF6 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084AFA 6500 0000                  		blo.w	@locret			; Return if yes
00084AFE 0C07 00D1                  		cmpi.b	#$D1,d7
00084B02 6500 0000                  		bcs.w	Sound_PlaySpecial
00084B06 0C07 00DF                  		cmp.b	#$DF,d7
00084B0A 6F00 0000                  		ble.w	Sound_D1toDF
00084B0E 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084B12 6500 0000                  		blo.w	@locret			; Return if yes
00084B16 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084B1A 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084B1C                            ; locret_71F8C:
00084B1C                            @locret:
00084B1C 4E75                       		rts	
00084B1E                            ; ===========================================================================
00084B1E                            
00084B1E                            Sound_E0toE4:
00084B1E 0407 00E0                  		subi.b	#flg__First,d7
00084B22 E54F                       		lsl.w	#2,d7
00084B24 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084B28                            ; ===========================================================================
00084B28                            
00084B28                            Sound_ExIndex:
00084B28 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084B2C 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084B30 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084B34 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084B38 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084B3C                            ptr_flgend
00084B3C                            ; ===========================================================================
00084B3C                            ; ---------------------------------------------------------------------------
00084B3C                            ; Play "Say-gaa" PCM sound
00084B3C                            ; ---------------------------------------------------------------------------
00084B3C                            ; Sound_E1: PlaySega:
00084B3C                            PlaySegaSound:
00084B3C 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084B44 33FC 0000 00A1 1100        		startZ80
00084B4C 323C 0011                  		move.w	#$11,d1
00084B50                            ; loc_71FC0:
00084B50                            @busyloop_outer:
00084B50 303C FFFF                  		move.w	#-1,d0
00084B54                            ; loc_71FC4:
00084B54                            @busyloop:
00084B54 4E71                       		nop	
00084B56 51C8 FFFC                  		dbf	d0,@busyloop
00084B5A                            
00084B5A 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084B5E                            
00084B5E 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084B60 4E75                       		rts	
00084B62                            ; ===========================================================================
00084B62                            ; ---------------------------------------------------------------------------
00084B62                            ; Play music track $81-$9F
00084B62                            ; ---------------------------------------------------------------------------
00084B62                            ; Sound_81to9F:
00084B62                            Sound_PlayBGM:
00084B62 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084B66 6600                       		bne.s	@bgmnot1up		; if not, branch
00084B68 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084B6C 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084B70 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084B74 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084B76                            ; loc_71FE6:
00084B76                            @clearsfxloop:
00084B76 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084B7A DAFC 0030                  		adda.w	#TrackSz,a5
00084B7E 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084B82                            
00084B82 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084B86 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084B88                            ; loc_71FF8:
00084B88                            @cleartrackplayloop:
00084B88 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084B8C DAFC 0030                  		adda.w	#TrackSz,a5
00084B90 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084B94                            
00084B94 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084B96 204E                       		movea.l	a6,a0
00084B98 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084B9C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00084BA0                            ; loc_72012:
00084BA0                            @backupramloop:
00084BA0 22D8                       		move.l	(a0)+,(a1)+
00084BA2 51C8 FFFC                  		dbf	d0,@backupramloop
00084BA6                            
00084BA6 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00084BAC 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00084BAE 6000                       		bra.s	@bgm_loadMusic
00084BB0                            ; ===========================================================================
00084BB0                            ; loc_72024:
00084BB0                            @bgmnot1up:
00084BB0 422E 0027                  		clr.b	f_1up_playing(a6)
00084BB4 422E 0026                  		clr.b	v_fadein_counter(a6)
00084BB8                            ; loc_7202C:
00084BB8                            @bgm_loadMusic:
00084BB8 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00084BBC 2879 0008 44E8             		movea.l	(Go_SpeedUpIndex).l,a4
00084BC2 0407 0081                  		subi.b	#bgm__First,d7
00084BC6 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00084BCC 2879 0008 44E0             		movea.l	(Go_MusicIndex).l,a4
00084BD2 E54F                       		lsl.w	#2,d7
00084BD4 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00084BD8 7000                       		moveq	#0,d0
00084BDA 3014                       		move.w	(a4),d0			; load voice pointer
00084BDC D08C                       		add.l	a4,d0			; It is a relative pointer
00084BDE 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00084BE2 102C 0005                  		move.b	5(a4),d0		; load tempo
00084BE6 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00084BEA                            		;tst.b	f_speedup(a6)
00084BEA                            		;beq.s	@nospeedshoes
00084BEA                            		;move.b	v_speeduptempo(a6),d0
00084BEA                            ; loc_72068:
00084BEA                            ;@nospeedshoes:
00084BEA 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00084BEE 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00084BF2 7200                       		moveq	#0,d1
00084BF4 264C                       		movea.l	a4,a3
00084BF6 5C4C                       		addq.w	#6,a4			; Point past header
00084BF8 7E00                       		moveq	#0,d7
00084BFA 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00084BFE 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00084C02 5307                       		subq.b	#1,d7
00084C04 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00084C08 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00084C0C 7C30                       		moveq	#TrackSz,d6
00084C0E 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00084C12 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00084C16 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00084C1A                            ; loc_72098:
00084C1A                            @bmg_fmloadloop:
00084C1A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084C1E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084C22 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084C26 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084C2A 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00084C2E 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084C32 7000                       		moveq	#0,d0
00084C34 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00084C36 D08B                       		add.l	a3,d0				; Relative pointer
00084C38 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084C3C 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00084C40 D2C6                       		adda.w	d6,a1
00084C42 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00084C46                            		
00084C46 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00084C4C 6600                       		bne.s	@silencefm6
00084C4E 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00084C50 7200                       		moveq	#0,d1		; Disable DAC
00084C52 4EBA 0000                  		jsr	WriteFMI(pc)
00084C56 6000 0000                  		bra.w	@bgm_fmdone
00084C5A                            ; ===========================================================================
00084C5A                            ; loc_720D8:
00084C5A                            @silencefm6:
00084C5A 7028                       		moveq	#$28,d0		; Key on/off register
00084C5C 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00084C5E 4EBA 0000                  		jsr	WriteFMI(pc)
00084C62 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00084C66 727F                       		moveq	#$7F,d1		; Total silence
00084C68 4EBA 0000                  		jsr	WriteFMII(pc)
00084C6C 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00084C70 727F                       		moveq	#$7F,d1		; Total silence
00084C72 4EBA 0000                  		jsr	WriteFMII(pc)
00084C76 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00084C7A 727F                       		moveq	#$7F,d1		; Total silence
00084C7C 4EBA 0000                  		jsr	WriteFMII(pc)
00084C80 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00084C84 727F                       		moveq	#$7F,d1		; Total silence
00084C86 4EBA 0000                  		jsr	WriteFMII(pc)
00084C8A 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00084C8E 123C 00C0                  		move.b	#$C0,d1		; Stereo
00084C92 4EBA 0000                  		jsr	WriteFMII(pc)
00084C96                            ; loc_72114:
00084C96                            @bgm_fmdone:
00084C96 7E00                       		moveq	#0,d7
00084C98 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00084C9C 6700                       		beq.s	@bgm_psgdone	; branch if zero
00084C9E 5307                       		subq.b	#1,d7
00084CA0 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00084CA4 45FA 0000                  		lea	PSGInitBytes(pc),a2
00084CA8                            ; loc_72126:
00084CA8                            @bgm_psgloadloop:
00084CA8 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00084CAC 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00084CB0 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00084CB4 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00084CB8 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00084CBC 7000                       		moveq	#0,d0
00084CBE 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00084CC0 D08B                       		add.l	a3,d0				; Relative pointer
00084CC2 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00084CC6 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00084CCA 101C                       		move.b	(a4)+,d0			; load redundant byte
00084CCC 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00084CD0 D2C6                       		adda.w	d6,a1
00084CD2 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00084CD6                            ; loc_72154:
00084CD6                            @bgm_psgdone:
00084CD6 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00084CDA 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00084CDC                            ; loc_7215A:
00084CDC                            @sfxstoploop:
00084CDC 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00084CDE 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00084CE2 7000                       		moveq	#0,d0
00084CE4 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00084CE8 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00084CEA 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00084CEC E508                       		lsl.b	#2,d0			; Convert to index
00084CEE 6000                       		bra.s	@gotchannelindex
00084CF0                            ; ===========================================================================
00084CF0                            ; loc_7216E:
00084CF0                            @sfxpsgchannel:
00084CF0 E608                       		lsr.b	#3,d0		; Convert to index
00084CF2                            ; loc_72170:
00084CF2                            @gotchannelindex:
00084CF2 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00084CF6 2070 0000                  		movea.l	(a0,d0.w),a0
00084CFA 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00084CFE                            ; loc_7217C:
00084CFE                            @sfxnext:
00084CFE D2C6                       		adda.w	d6,a1
00084D00 51CF FFDA                  		dbf	d7,@sfxstoploop
00084D04                            
00084D04 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084D08 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00084D0A 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084D10                            ; loc_7218E:
00084D10                            @checkspecialpsg:
00084D10 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084D14 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00084D16 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084D1C                            ; loc_7219A:
00084D1C                            @sendfmnoteoff:
00084D1C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00084D20 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00084D22                            ; loc_721A0:
00084D22                            @fmnoteoffloop:
00084D22 4EBA 0000                  		jsr	FMNoteOff(pc)
00084D26 DAC6                       		adda.w	d6,a5
00084D28 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00084D2C 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00084D2E                            ; loc_721AC:
00084D2E                            @psgnoteoffloop:
00084D2E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084D32 DAC6                       		adda.w	d6,a5
00084D34 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00084D38                            ; loc_721B6:
00084D38                            @locdblret:
00084D38 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00084D3A 4E75                       		rts	
00084D3C                            ; ===========================================================================
00084D3C                            ; byte_721BA:
00084D3C 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00084D44 00                         		even
00084D44                            ; byte_721C2:
00084D44 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00084D48 00                         		even
00084D48                            ; ===========================================================================
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            ; Play Spin Dash sound effect
00084D48                            ; ---------------------------------------------------------------------------
00084D48                            Sound_D1toDF:
00084D48 4A2E 0027                  		tst.b	$27(a6)
00084D4C 6600 0000                  		bne.w	loc_722C6
00084D50 4A2E 0004                  		tst.b	4(a6)
00084D54 6600 0000                  		bne.w	loc_722C6
00084D58 4A2E 0024                  		tst.b	$24(a6)
00084D5C 6600 0000                  		bne.w	loc_722C6
00084D60 4238 C900                  		clr.b	($FFFFC900).w
00084D64 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00084D68 6600                       		bne.s	@cont3	; if not, branch
00084D6A 3F00                       		move.w	d0,-(sp)
00084D6C 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00084D70 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00084D74 6600                       		bne.s	@cont1		; if it is, branch
00084D76 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00084D7A                            		
00084D7A                            @cont1:
00084D7A 5200                       		addq.b	#1,d0
00084D7C 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00084D80 6400                       		bcc.s	@cont2		; if it has, branch
00084D82 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00084D86                            		
00084D86                            @cont2:
00084D86 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00084D8C 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00084D92 301F                       		move.w	(sp)+,d0
00084D94                            		
00084D94                            @cont3:	
00084D94 2079 0008 44E4             		movea.l	(Go_SoundIndex).l,a0
00084D9A 0407 00A0                  		sub.b	#$A0,d7
00084D9E 6000                       		bra.s	SoundEffects_Common
00084DA0                            ; ---------------------------------------------------------------------------
00084DA0                            ; Play normal sound effect
00084DA0                            ; ---------------------------------------------------------------------------
00084DA0                            ; Sound_A0toCF:
00084DA0                            Sound_PlaySFX:
00084DA0 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084DA4 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00084DA8 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084DAC 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084DB0 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084DB4 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00084DB8 4238 C900                  		clr.b	($FFFFC900).w
00084DBC 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00084DC0 6600                       		bne.s	Sound_notB5		; if not, branch
00084DC2 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00084DC6 6600                       		bne.s	loc_721EE		; Branch if not
00084DC8 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00084DCC                            
00084DCC                            loc_721EE:
00084DCC 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00084DD2                            
00084DD2                            Sound_notB5:
00084DD2 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00084DD6 6600                       		bne.s	Sound_notA7		; if not, branch
00084DD8 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00084DDC 6600 0000                  		bne.w	locret_722C4			; Return if not
00084DE0 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00084DE6                            		
00084DE6                            Sound_notA7:
00084DE6 2079 0008 44E4             		movea.l	(Go_SoundIndex).l,a0
00084DEC 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00084DF0                            
00084DF0                            SoundEffects_Common:		
00084DF0 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00084DF2 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00084DF6 224B                       		movea.l	a3,a1
00084DF8 7200                       		moveq	#0,d1
00084DFA 3219                       		move.w	(a1)+,d1		; Voice pointer
00084DFC D28B                       		add.l	a3,d1			; Relative pointer
00084DFE 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00084E00                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00084E00                            		; index entry is above $3F will cause a crash. This is actually the same way that
00084E00                            		; this bug is fixed in Ristar's driver.
00084E00 7E00                       		moveq	#0,d7	
00084E02 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00084E04 5307                       		subq.b	#1,d7
00084E06 7C30                       		moveq	#TrackSz,d6
00084E08                            
00084E08                            loc_72228:
00084E08 7600                       		moveq	#0,d3
00084E0A 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00084E0E 1803                       		move.b	d3,d4
00084E10 6B00                       		bmi.s	loc_72244	; Branch if PSG
00084E12 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00084E14 E54B                       		lsl.w	#2,d3
00084E16 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084E1A 2A75 3000                  		movea.l	(a5,d3.w),a5
00084E1E 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00084E22 6000                       		bra.s	loc_7226E
00084E24                            ; ===========================================================================
00084E24                            
00084E24                            loc_72244:
00084E24 E64B                       		lsr.w	#3,d3
00084E26 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00084E2A 2A75 3000                  		movea.l	(a5,d3.w),a5
00084E2E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00084E32 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00084E36 6600                       		bne.s	loc_7226E	; Branch if not
00084E38 1004                       		move.b	d4,d0
00084E3A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00084E3E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084E44 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00084E48 13C0 00C0 0011             		move.b	d0,(psg_input).l
00084E4E                            
00084E4E                            loc_7226E:
00084E4E 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00084E52 2A75 3000                  		movea.l	(a5,d3.w),a5
00084E56 244D                       		movea.l	a5,a2
00084E58 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00084E5A                            
00084E5A                            loc_72276:
00084E5A 429A                       		clr.l	(a2)+
00084E5C 51C8 FFFC                  		dbf	d0,loc_72276
00084E60                            
00084E60 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00084E62 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00084E66 7000                       		moveq	#0,d0
00084E68 3019                       		move.w	(a1)+,d0			; Track data pointer
00084E6A D08B                       		add.l	a3,d0				; Relative pointer
00084E6C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00084E70 3B59 0008                  		move.w	(a1)+,8(a5)
00084E74 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00084E78 6700                       		beq.s	@cont		; if not, branch
00084E7A 3F00                       		move.w	d0,-(sp)
00084E7C 1038 C902                  		move.b	($FFFFC902).w,d0
00084E80 D12D 0008                  		add.b	d0,8(a5)
00084E84 301F                       		move.w	(sp)+,d0
00084E86                            		
00084E86                            @cont:
00084E86 1B7C 0001 000E             		move.b	#1,$E(a5)
00084E8C 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00084E90 4A04                       		tst.b	d4				; Is this a PSG channel?
00084E92 6B00                       		bmi.s	loc_722A8		; Branch if yes
00084E94 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00084E9A 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00084E9E                            
00084E9E                            loc_722A8:
00084E9E 51CF FF68                  		dbf	d7,loc_72228
00084EA2                            
00084EA2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00084EA6 6A00                       		bpl.s	loc_722B8				; Branch if not
00084EA8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084EAE                            
00084EAE                            loc_722B8:
00084EAE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00084EB2 6A00                       		bpl.s	locret_722C4						; Branch if not
00084EB4 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084EBA                            
00084EBA                            locret_722C4:
00084EBA 4E75                       		rts	
00084EBC                            ; ===========================================================================
00084EBC                            
00084EBC                            loc_722C6:
00084EBC 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00084EBE 4E75                       		rts	
00084EC0                            ; ===========================================================================
00084EC0                            ; ---------------------------------------------------------------------------
00084EC0                            ; RAM addresses for FM and PSG channel variables used by the SFX
00084EC0                            ; ---------------------------------------------------------------------------
00084EC0                            ; dword_722CC: BGMChannelRAM:
00084EC0                            SFX_BGMChannelRAM:
00084EC0 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00084EC4 0000 0000                  		dc.l 0
00084EC8 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084ECC 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00084ED0 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00084ED4 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00084ED8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00084EDC 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00084EE0                            ; dword_722EC: SFXChannelRAM:
00084EE0                            SFX_SFXChannelRAM:
00084EE0 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00084EE4 0000 0000                  		dc.l 0
00084EE8 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084EEC 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00084EF0 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00084EF4 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00084EF8 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00084EFC 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00084F00                            ; ===========================================================================
00084F00                            ; ---------------------------------------------------------------------------
00084F00                            ; Play GHZ waterfall sound
00084F00                            ; ---------------------------------------------------------------------------
00084F00                            ; Sound_D0toDF:
00084F00                            Sound_PlaySpecial:
00084F00 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00084F04 6600 0000                  		bne.w	@locret			; Return if so
00084F08 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00084F0C 6600 0000                  		bne.w	@locret			; Exit if it is
00084F10 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00084F14 6600 0000                  		bne.w	@locret			; Exit if it is
00084F18 2079 0008 44DC             		movea.l	(Go_SpecSoundIndex).l,a0
00084F1E 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00084F22 E54F                       		lsl.w	#2,d7
00084F24 2670 7000                  		movea.l	(a0,d7.w),a3
00084F28 224B                       		movea.l	a3,a1
00084F2A 7000                       		moveq	#0,d0
00084F2C 3019                       		move.w	(a1)+,d0			; Voice pointer
00084F2E D08B                       		add.l	a3,d0				; Relative pointer
00084F30 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00084F34 1A19                       		move.b	(a1)+,d5			; Dividing timing
00084F36                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00084F36                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00084F36 7E00                       		moveq	#0,d7	
00084F38 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00084F3A 5307                       		subq.b	#1,d7
00084F3C 7C30                       		moveq	#TrackSz,d6
00084F3E                            ; loc_72348:
00084F3E                            @sfxloadloop:
00084F3E 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00084F42 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00084F44 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F4A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00084F4E 6000                       		bra.s	@sfxinitpsg
00084F50                            ; ===========================================================================
00084F50                            ; loc_7235A:
00084F50                            @sfxoverridepsg:
00084F50 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F56 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00084F5A                            ; loc_72364:
00084F5A                            @sfxinitpsg:
00084F5A 244D                       		movea.l	a5,a2
00084F5C 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00084F5E                            ; loc_72368:
00084F5E                            @clearsfxtrackram:
00084F5E 429A                       		clr.l	(a2)+
00084F60 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00084F64                            
00084F64 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00084F66 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00084F6A 7000                       		moveq	#0,d0
00084F6C 3019                       		move.w	(a1)+,d0			; Track data pointer
00084F6E D08B                       		add.l	a3,d0				; Relative pointer
00084F70 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00084F74 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00084F78 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00084F7E 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00084F82 4A04                       		tst.b	d4				; Is this a PSG channel?
00084F84 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00084F86 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00084F8C                            ; loc_72396:
00084F8C                            @sfxpsginitdone:
00084F8C 51CF FFB0                  		dbf	d7,@sfxloadloop
00084F90                            
00084F90 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00084F94 6A00                       		bpl.s	@doneoverride					; Branch if not
00084F96 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084F9C                            ; loc_723A6:
00084F9C                            @doneoverride:
00084F9C 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00084FA0 6A00                       		bpl.s	@locret						; Branch if not
00084FA2 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00084FA8 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00084FAC 13C4 00C0 0011             		move.b	d4,(psg_input).l
00084FB2 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00084FB6 13C4 00C0 0011             		move.b	d4,(psg_input).l
00084FBC                            ; locret_723C6:
00084FBC                            @locret:
00084FBC 4E75                       		rts	
00084FBE                            ; End of function PlaySoundID
00084FBE                            
00084FBE                            ; ===========================================================================
00084FBE                            ; ---------------------------------------------------------------------------
00084FBE                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00084FBE                            ; ---------------------------------------------------------------------------
00084FBE                            ; The first block would have been used for overriding the music tracks
00084FBE                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00084FBE                            ; The third block would be used to set up the Special SFX
00084FBE                            ; The second block, however, is for the SFX tracks, which have a higher priority
00084FBE                            ; and would be checked for if they're currently playing
00084FBE                            ; If they are, then the third block would be used again, this time to mark
00084FBE                            ; the new tracks as 'currently playing'
00084FBE                            
00084FBE                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00084FBE                            
00084FBE                            ; BGMFM4PSG3RAM:
00084FBE                            ;SpecSFX_BGMChannelRAM:
00084FBE 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00084FC2 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00084FC6                            ; SFXFM4PSG3RAM:
00084FC6                            ;SpecSFX_SFXChannelRAM:
00084FC6 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00084FCA 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00084FCE                            ; SpecialSFXFM4PSG3RAM:
00084FCE                            ;SpecSFX_SpecSFXChannelRAM:
00084FCE 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00084FD2 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00084FD6                            
00084FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FD6                            
00084FD6                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00084FD6                            StopSFX:
00084FD6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084FD8 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084FDC 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00084FDE                            ; loc_723EA:
00084FDE                            @trackloop:
00084FDE 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00084FE0 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00084FE4 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00084FE8 7600                       		moveq	#0,d3
00084FEA 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00084FEE 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00084FF0 4EBA 0000                  		jsr	FMNoteOff(pc)
00084FF4 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00084FF8 6600                       		bne.s	@getfmpointer					; Branch if not
00084FFA 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00084FFE 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085000                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085000                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085000                            		; is playing its sound!
00085000 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085004 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00085008 6000                       		bra.s	@gotfmpointer
0008500A                            ; ===========================================================================
0008500A                            ; loc_72416:
0008500A                            @getfmpointer:
0008500A 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008500C E50B                       		lsl.b	#2,d3
0008500E 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085012 264D                       		movea.l	a5,a3
00085014 2A70 3000                  		movea.l	(a0,d3.w),a5
00085018 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008501C                            ; loc_72428:
0008501C                            @gotfmpointer:
0008501C 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085020 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085024 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085028 4EBA 0000                  		jsr	SetVoice(pc)
0008502C 2A4B                       		movea.l	a3,a5
0008502E 6000                       		bra.s	@nexttrack
00085030                            ; ===========================================================================
00085030                            ; loc_7243C:
00085030                            @trackpsg:
00085030 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085034 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085038 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008503C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008503E 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00085042 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00085044 E60B                       		lsr.b	#3,d3
00085046 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
0008504A 2070 3000                  		movea.l	(a0,d3.w),a0
0008504E                            ; loc_7245A:
0008504E                            @gotpsgpointer:
0008504E 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085052 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085056 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
0008505C 6600                       		bne.s	@nexttrack			; Branch if not
0008505E 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00085066                            ; loc_72472:
00085066                            @nexttrack:
00085066 DAFC 0030                  		adda.w	#TrackSz,a5
0008506A 51CF FF72                  		dbf	d7,@trackloop
0008506E                            
0008506E 4E75                       		rts	
00085070                            ; End of function StopSFX
00085070                            
00085070                            
00085070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085070                            
00085070                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00085070                            StopSpecialSFX:
00085070 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085074 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085076 6A00                       		bpl.s	@fadedfm		; Branch if not
00085078 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008507C 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085080 6600                       		bne.s	@fadedfm		; Branch if not
00085082 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00085086 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0008508A 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008508E 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085092 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085094 6A00                       		bpl.s	@fadedfm		; Branch if not
00085096 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008509A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008509E 4EBA 0000                  		jsr	SetVoice(pc)
000850A2                            ; loc_724AE:
000850A2                            @fadedfm:
000850A2 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000850A6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000850A8 6A00                       		bpl.s	@fadedpsg		; Branch if not
000850AA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000850AE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000850B2 6600                       		bne.s	@fadedpsg		; Return if not
000850B4 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
000850B8 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
000850BC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000850C0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000850C4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000850C6 6A00                       		bpl.s	@fadedpsg		; Return if not
000850C8 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
000850CE 6600                       		bne.s	@fadedpsg			; Return if not
000850D0 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
000850D8                            ; locret_724E4:
000850D8                            @fadedpsg:
000850D8 4E75                       		rts	
000850DA                            ; End of function StopSpecialSFX
000850DA                            
000850DA                            ; ===========================================================================
000850DA                            ; ---------------------------------------------------------------------------
000850DA                            ; Fade out music
000850DA                            ; ---------------------------------------------------------------------------
000850DA                            ; Sound_E0:
000850DA                            FadeOutMusic:
000850DA 4EBA FEFA                  		jsr	StopSFX(pc)
000850DE 4EBA FF90                  		jsr	StopSpecialSFX(pc)
000850E2 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
000850E8 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000850EE 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000850F2 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
000850F6 4E75                       		rts	
000850F8                            
000850F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000850F8                            
000850F8                            ; sub_72504:
000850F8                            DoFadeOut:
000850F8 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
000850FC 6700                       		beq.s	@continuefade		; Branch if yes
000850FE 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085102 4E75                       		rts	
00085104                            ; ===========================================================================
00085104                            ; loc_72510:
00085104                            @continuefade:
00085104 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00085108 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008510C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085112 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085116 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085118                            ; loc_72524:
00085118                            @fmloop:
00085118 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008511A 6A00                       		bpl.s	@nextfm			; Branch if not
0008511C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085120 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085122 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085126 6000                       		bra.s	@nextfm
00085128                            ; ===========================================================================
00085128                            ; loc_72534:
00085128                            @sendfmtl:
00085128 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008512C                            ; loc_72538:
0008512C                            @nextfm:
0008512C DAFC 0030                  		adda.w	#TrackSz,a5
00085130 51CF FFE6                  		dbf	d7,@fmloop
00085134                            
00085134 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085136                            ; loc_72542:
00085136                            @psgloop:
00085136 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085138 6A00                       		bpl.s	@nextpsg		; branch if not
0008513A 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008513E 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00085144 6500                       		blo.s	@sendpsgvol		; Branch if not
00085146 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008514A 6000                       		bra.s	@nextpsg
0008514C                            ; ===========================================================================
0008514C                            ; loc_72558:
0008514C                            @sendpsgvol:
0008514C 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00085150 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085154                            ; loc_72560:
00085154                            @nextpsg:
00085154 DAFC 0030                  		adda.w	#TrackSz,a5
00085158 51CF FFDC                  		dbf	d7,@psgloop
0008515C                            
0008515C 4E75                       		rts	
0008515E                            ; End of function DoFadeOut
0008515E                            
0008515E                            
0008515E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008515E                            
0008515E                            ; sub_7256A:
0008515E                            FMSilenceAll:
0008515E 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00085160 7028                       		moveq	#$28,d0		; FM key on/off register
00085162                            ; loc_7256E:
00085162                            @noteoffloop:
00085162 1203                       		move.b	d3,d1
00085164 4EBA 0000                  		jsr	WriteFMI(pc)
00085168 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
0008516A 4EBA 0000                  		jsr	WriteFMI(pc)
0008516E 51CB FFF2                  		dbf	d3,@noteoffloop
00085172                            
00085172 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00085174 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00085176 7802                       		moveq	#2,d4		; ... for all 3 channels...
00085178                            ; loc_72584:
00085178                            @channelloop:
00085178 7603                       		moveq	#3,d3		; ... for all operators on each channel...
0008517A                            ; loc_72586:
0008517A                            @channeltlloop:
0008517A 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0008517E 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00085182 5840                       		addq.w	#4,d0		; Next TL operator
00085184 51CB FFF4                  		dbf	d3,@channeltlloop
00085188                            
00085188 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
0008518C 51CC FFEA                  		dbf	d4,@channelloop
00085190                            
00085190 4E75                       		rts	
00085192                            ; End of function FMSilenceAll
00085192                            
00085192                            ; ===========================================================================
00085192                            ; ---------------------------------------------------------------------------
00085192                            ; Stop music
00085192                            ; ---------------------------------------------------------------------------
00085192                            ; Sound_E4: StopSoundAndMusic:
00085192                            StopAllSound:
00085192 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00085194 123C 0080                  		move.b	#$80,d1		; Enable DAC
00085198 4EBA 0000                  		jsr	WriteFMI(pc)
0008519C 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
0008519E 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
000851A0 4EBA 0000                  		jsr	WriteFMI(pc)
000851A4 204E                       		movea.l	a6,a0
000851A6                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
000851A6                            		; Remove the '-$10' to fix this.
000851A6 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
000851AA                            ; loc_725B6:
000851AA                            @clearramloop:
000851AA 4298                       		clr.l	(a0)+
000851AC 51C8 FFFC                  		dbf	d0,@clearramloop
000851B0                            
000851B0 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000851B6 4EBA FFA6                  		jsr	FMSilenceAll(pc)
000851BA 6000 0000                  		bra.w	PSGSilenceAll
000851BE                            
000851BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851BE                            
000851BE                            ; sub_725CA:
000851BE                            InitMusicPlayback:
000851BE 204E                       		movea.l	a6,a0
000851C0                            		; Save several values
000851C0 1216                       		move.b	v_sndprio(a6),d1
000851C2 142E 0027                  		move.b	f_1up_playing(a6),d2
000851C6 162E 002A                  		move.b	f_speedup(a6),d3
000851CA 182E 0026                  		move.b	v_fadein_counter(a6),d4
000851CE                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
000851CE 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
000851D2 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
000851D6                            ; loc_725E4:
000851D6                            @clearramloop:
000851D6 4298                       		clr.l	(a0)+
000851D8 51C8 FFFC                  		dbf	d0,@clearramloop
000851DC                            
000851DC                            		; Restore the values saved above
000851DC 1C81                       		move.b	d1,v_sndprio(a6)
000851DE 1D42 0027                  		move.b	d2,f_1up_playing(a6)
000851E2 1D43 002A                  		move.b	d3,f_speedup(a6)
000851E6 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000851EA 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000851EE 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000851F4                            		; DANGER! This silences ALL channels, even the ones being used
000851F4                            		; by SFX, and not music! @sendfmnoteoff does this already, and
000851F4                            		; doesn't affect SFX channels, either.
000851F4                            		; This should be replaced with an 'rts'.
000851F4 4EBA FF68                  		jsr	FMSilenceAll(pc)
000851F8 6000 0000                  		bra.w	PSGSilenceAll
000851FC                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
000851FC                            		; don't do a very good job of setting up the music tracks.
000851FC                            		; Tracks that aren't defined in a music file's header don't have
000851FC                            		; their channels defined, meaning @sendfmnoteoff won't silence
000851FC                            		; hardware properly. In combination with removing the above
000851FC                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
000851FC                            		; notes.
000851FC                            		; To fix this, I suggest using this code, instead of an 'rts':
000851FC                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
000851FC                            		;lea	FMDACInitBytes(pc),a2
000851FC                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
000851FC                            		;bsr.s	@writeloop
000851FC                            		;lea	PSGInitBytes(pc),a2
000851FC                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
000851FC                            
000851FC                            ;@writeloop:
000851FC                            		;move.b	(a2)+,(a1)		; Write track's channel byte
000851FC                            		;lea	TrackSz(a1),a1		; Next track
000851FC                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
000851FC                            
000851FC                            		;rts
000851FC                            	
000851FC                            ; End of function InitMusicPlayback
000851FC                            
000851FC                            
000851FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000851FC                            
000851FC                            ; sub_7260C:
000851FC                            TempoWait:
000851FC 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085202 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085206 7030                       		moveq	#TrackSz,d0
00085208 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008520A                            ; loc_7261A:
0008520A                            @tempoloop:
0008520A 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008520C D0C0                       		adda.w	d0,a0	; Advance to next track
0008520E 51C9 FFFA                  		dbf	d1,@tempoloop
00085212                            
00085212 4E75                       		rts	
00085214                            ; End of function TempoWait
00085214                            
00085214                            ; ===========================================================================
00085214                            ; ---------------------------------------------------------------------------
00085214                            ; Speed	up music
00085214                            ; ---------------------------------------------------------------------------
00085214                            ; Sound_E2:
00085214                            SpeedUpMusic:
00085214 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085218 6600                       		bne.s	@speedup_1up
0008521A 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085220 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085226 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008522C 4E75                       		rts	
0008522E                            ; ===========================================================================
0008522E                            ; loc_7263E:
0008522E                            @speedup_1up:
0008522E 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085234 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008523A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00085240 4E75                       		rts	
00085242                            ; ===========================================================================
00085242                            ; ---------------------------------------------------------------------------
00085242                            ; Change music back to normal speed
00085242                            ; ---------------------------------------------------------------------------
00085242                            ; Sound_E3:
00085242                            SlowDownMusic:
00085242 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085246 6600                       		bne.s	@slowdown_1up
00085248 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0008524E 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00085254 422E 002A                  		clr.b	f_speedup(a6)
00085258 4E75                       		rts	
0008525A                            ; ===========================================================================
0008525A                            ; loc_7266A:
0008525A                            @slowdown_1up:
0008525A 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00085260 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085266 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
0008526A 4E75                       		rts	
0008526C                            
0008526C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008526C                            
0008526C                            ; sub_7267C:
0008526C                            DoFadeIn:
0008526C 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00085270 6700                       		beq.s	@continuefade		; Branch if yes
00085272 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00085276 4E75                       		rts	
00085278                            ; ===========================================================================
00085278                            ; loc_72688:
00085278                            @continuefade:
00085278 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
0008527C 6700                       		beq.s	@fadedone		; Branch if yes
0008527E 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00085282 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00085288 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0008528C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008528E                            ; loc_7269E:
0008528E                            @fmloop:
0008528E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085290 6A00                       		bpl.s	@nextfm			; Branch if not
00085292 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085296 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008529A                            ; loc_726AA:
0008529A                            @nextfm:
0008529A DAFC 0030                  		adda.w	#TrackSz,a5
0008529E 51CF FFEE                  		dbf	d7,@fmloop
000852A2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
000852A4                            ; loc_726B4:
000852A4                            @psgloop:
000852A4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000852A6 6A00                       		bpl.s	@nextpsg		; Branch if not
000852A8 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000852AC 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
000852B0 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
000852B4 6500                       		blo.s	@sendpsgvol		; Branch if yes
000852B6 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
000852B8                            ; loc_726C8:
000852B8                            @sendpsgvol:
000852B8 4EBA 0000                  		jsr	SetPSGVolume(pc)
000852BC                            ; loc_726CC:
000852BC                            @nextpsg:
000852BC DAFC 0030                  		adda.w	#TrackSz,a5
000852C0 51CF FFE2                  		dbf	d7,@psgloop
000852C4 4E75                       		rts	
000852C6                            ; ===========================================================================
000852C6                            ; loc_726D6:
000852C6                            @fadedone:
000852C6 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
000852CC 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
000852D0 4E75                       		rts	
000852D2                            ; End of function DoFadeIn
000852D2                            
000852D2                            ; ===========================================================================
000852D2                            ; loc_726E2:
000852D2                            FMNoteOn:
000852D2 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
000852D6 6600                       		bne.s	@locret		; Return if so
000852D8 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000852DC 6600                       		bne.s	@locret		; Return if so
000852DE 7028                       		moveq	#$28,d0		; Note on/off register
000852E0 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
000852E4 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
000852E8 6000 0000                  		bra.w	WriteFMI
000852EC                            ; ===========================================================================
000852EC                            ; locret_726FC:
000852EC                            @locret:
000852EC 4E75                       		rts	
000852EE                            
000852EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000852EE                            
000852EE                            ; sub_726FE:
000852EE                            FMNoteOff:
000852EE 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
000852F2 6600                       		bne.s	locret_72714	; Return if yes
000852F4 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000852F8 6600                       		bne.s	locret_72714	; Return if yes
000852FA                            ; loc_7270A:
000852FA                            SendFMNoteOff:
000852FA 7028                       		moveq	#$28,d0		; Note on/off register
000852FC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085300 6000 0000                  		bra.w	WriteFMI
00085304                            ; ===========================================================================
00085304                            
00085304                            locret_72714:
00085304 4E75                       		rts	
00085306                            ; End of function FMNoteOff
00085306                            
00085306                            ; ===========================================================================
00085306                            ; loc_72716:
00085306                            WriteFMIorIIMain:
00085306 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008530A 6600                       		bne.s	@locret		; Return if yes
0008530C 6000 0000                  		bra.w	WriteFMIorII
00085310                            ; ===========================================================================
00085310                            ; locret_72720:
00085310                            @locret:
00085310 4E75                       		rts	
00085312                            
00085312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085312                            
00085312                            ; sub_72722:
00085312                            WriteFMIorII:
00085312 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00085318 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008531A D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0008531E                            ; End of function WriteFMIorII
0008531E                            
0008531E                            
0008531E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008531E                            
0008531E                            ; The reason I think this is an *early* SMPS 68k Type 1b
0008531E                            ; is because this subroutine is the one from Type 1a:
0008531E                            ; other Type 1b drivers have a newer, optimised version.
0008531E                            ; The driver itself is Type 1b, with this odd exception.
0008531E                            
0008531E                            ; sub_7272E:
0008531E                            WriteFMI:
0008531E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085324 0802 0007                  		btst	#7,d2		; Is FM busy?
00085328 66F4                       		bne.s	WriteFMI	; Loop if so
0008532A 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085330 4E71                       		nop	
00085332 4E71                       		nop	
00085334 4E71                       		nop	
00085336                            ; loc_72746:
00085336                            @waitloop:
00085336 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008533C 0802 0007                  		btst	#7,d2		; Is FM busy?
00085340 66F4                       		bne.s	@waitloop	; Loop if so
00085342                            
00085342 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00085348 4E75                       		rts	
0008534A                            ; End of function WriteFMI
0008534A                            
0008534A                            ; ===========================================================================
0008534A                            ; loc_7275A:
0008534A                            WriteFMIIPart:
0008534A 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0008534E 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00085352 D002                       		add.b	d2,d0			; Add in to destination register
00085354                            
00085354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085354                            
00085354                            ; sub_72764:
00085354                            WriteFMII:
00085354 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008535A 0802 0007                  		btst	#7,d2		; Is FM busy?
0008535E 66F4                       		bne.s	WriteFMII	; Loop if so
00085360 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00085366 4E71                       		nop	
00085368 4E71                       		nop	
0008536A 4E71                       		nop	
0008536C                            ; loc_7277C:
0008536C                            @waitloop:
0008536C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085372 0802 0007                  		btst	#7,d2		; Is FM busy?
00085376 66F4                       		bne.s	@waitloop	; Loop if so
00085378                            
00085378 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0008537E 4E75                       		rts	
00085380                            ; End of function WriteFMII
00085380                            
00085380                            ; ===========================================================================
00085380                            ; ---------------------------------------------------------------------------
00085380                            ; FM Note Values: b-0 to a#8
00085380                            ; ---------------------------------------------------------------------------
00085380                            ; word_72790: FM_Notes:
00085380                            FMFrequencies:
00085380 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00085398 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000853B0 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
000853C8 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
000853E0 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
000853F8 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085410 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00085428 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00085440                            
00085440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085440                            
00085440                            ; sub_72850:
00085440                            PSGUpdateTrack:
00085440 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00085444 6600                       		bne.s	@notegoing
00085446 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0008544A 4EBA 0000                  		jsr	PSGDoNext(pc)
0008544E 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00085452 6000 0000                  		bra.w	PSGDoVolFX
00085456                            ; ===========================================================================
00085456                            ; loc_72866:
00085456                            @notegoing:
00085456 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
0008545A 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0008545E 4EBA F4EA                  		jsr	DoModulation(pc)
00085462 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00085466 4E75                       		rts
00085468                            ; End of function PSGUpdateTrack
00085468                            
00085468                            
00085468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085468                            
00085468                            ; sub_72878:
00085468                            PSGDoNext:
00085468 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
0008546C 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00085470                            ; loc_72880:
00085470                            @noteloop:
00085470 7A00                       		moveq	#0,d5
00085472 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00085474 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00085478 6500                       		blo.s	@gotnote	; Branch if not
0008547A 4EBA 0000                  		jsr	CoordFlag(pc)
0008547E 60F0                       		bra.s	@noteloop
00085480                            ; ===========================================================================
00085480                            ; loc_72890:
00085480                            @gotnote:
00085480 4A05                       		tst.b	d5		; Is it a note?
00085482 6A00                       		bpl.s	@gotduration	; Branch if not
00085484 4EBA 0000                  		jsr	PSGSetFreq(pc)
00085488 1A1C                       		move.b	(a4)+,d5	; Get another byte
0008548A 4A05                       		tst.b	d5		; Is it a duration?
0008548C 6A00                       		bpl.s	@gotduration	; Branch if yes
0008548E 534C                       		subq.w	#1,a4		; Put byte back
00085490 6000 F452                  		bra.w	FinishTrackUpdate
00085494                            ; ===========================================================================
00085494                            ; loc_728A4:
00085494                            @gotduration:
00085494 4EBA F42E                  		jsr	SetDuration(pc)
00085498 6000 F44A                  		bra.w	FinishTrackUpdate
0008549C                            ; End of function PSGDoNext
0008549C                            
0008549C                            
0008549C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008549C                            
0008549C                            ; sub_728AC:
0008549C                            PSGSetFreq:
0008549C 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000854A0 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000854A2 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000854A6 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000854AA E34D                       		lsl.w	#1,d5
000854AC 41FA 0000                  		lea	PSGFrequencies(pc),a0
000854B0 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000854B6 6000 F42C                  		bra.w	FinishTrackUpdate
000854BA                            ; ===========================================================================
000854BA                            ; loc_728CA:
000854BA                            @restpsg:
000854BA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000854BE 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000854C4 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
000854C8 6000 0000                  		bra.w	PSGNoteOff
000854CC                            ; End of function PSGSetFreq
000854CC                            
000854CC                            
000854CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854CC                            
000854CC                            ; sub_728DC:
000854CC                            PSGDoNoteOn:
000854CC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
000854D0 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
000854D2                            ; End of function PSGDoNoteOn
000854D2                            
000854D2                            
000854D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854D2                            
000854D2                            ; sub_728E2:
000854D2                            PSGUpdateFreq:
000854D2 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
000854D6 4880                       		ext.w	d0
000854D8 DC40                       		add.w	d0,d6		; Add to frequency
000854DA 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000854DE 6600                       		bne.s	@locret		; Return if yes
000854E0 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000854E4 6600                       		bne.s	@locret		; Return if yes
000854E6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
000854EA 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
000854EE 6600                       		bne.s	@notnoise	; Branch if not
000854F0 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
000854F4                            ; loc_72904:
000854F4                            @notnoise:
000854F4 3206                       		move.w	d6,d1
000854F6 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
000854FA 8001                       		or.b	d1,d0		; Latch tone data to channel
000854FC E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
000854FE 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085502 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085508 13C6 00C0 0011             		move.b	d6,(psg_input).l
0008550E                            ; locret_7291E:
0008550E                            @locret:
0008550E 4E75                       		rts	
00085510                            ; End of function PSGUpdateFreq
00085510                            
00085510                            ; ===========================================================================
00085510                            ; loc_72920:
00085510                            PSGSetRest:
00085510 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085514 4E75                       		rts	
00085516                            
00085516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085516                            
00085516                            ; sub_72926:
00085516                            PSGUpdateVolFX:
00085516 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0008551A 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0008551E                            ; loc_7292E:
0008551E                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0008551E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085522 7000                       		moveq	#0,d0
00085524 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085528 6700                       		beq.s	SetPSGVolume
0008552A 2079 0008 44EC             		movea.l	(Go_PSGIndex).l,a0
00085530 5340                       		subq.w	#1,d0
00085532 E548                       		lsl.w	#2,d0
00085534 2070 0000                  		movea.l	(a0,d0.w),a0
00085538 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0008553C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00085540 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085544 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085548 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0008554A 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0008554E 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085550                            ; loc_72960:
00085550                            @gotflutter:
00085550 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085552 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085556 6500                       		blo.s	SetPSGVolume	; Branch if not
00085558 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0008555A                            ; End of function PSGUpdateVolFX
0008555A                            
0008555A                            
0008555A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008555A                            
0008555A                            ; sub_7296A:
0008555A                            SetPSGVolume:
0008555A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0008555E 6600                       		bne.s	locret_7298A	; Return if so
00085560 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085564 6600                       		bne.s	locret_7298A	; Return if so
00085566 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0008556A 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
0008556C                            ; loc_7297C:
0008556C                            PSGSendVolume:
0008556C 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085570 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00085574 13C6 00C0 0011             		move.b	d6,(psg_input).l
0008557A                            
0008557A                            locret_7298A:
0008557A 4E75                       		rts	
0008557C                            ; ===========================================================================
0008557C                            ; loc_7298C: PSGCheckNoteFill:
0008557C                            PSGCheckNoteTimeout:
0008557C 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085580 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085582 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085586 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085588 4E75                       		rts	
0008558A                            ; End of function SetPSGVolume
0008558A                            
0008558A                            ; ===========================================================================
0008558A                            ; loc_7299A: FlutterDone:
0008558A                            VolEnvHold:
0008558A 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0008558E 4E75                       		rts	
00085590                            
00085590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085590                            
00085590                            ; sub_729A0:
00085590                            PSGNoteOff:
00085590 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085594 6600                       		bne.s	locret_729B4	; Return if so
00085596                            ; loc_729A6:
00085596                            SendPSGNoteOff:
00085596 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
0008559A 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
0008559E 13C0 00C0 0011             		move.b	d0,(psg_input).l
000855A4                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000855A4                            		; risk of music accidentally playing noise because it can't detect if
000855A4                            		; the PSG4/noise channel needs muting on track initialisation.
000855A4                            		; S&K's driver fixes it by doing this:
000855A4 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
000855A8 6600                       		bne.s	locret_729B4
000855AA 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000855B2                            
000855B2                            locret_729B4:
000855B2 4E75                       		rts	
000855B4                            ; End of function PSGNoteOff
000855B4                            
000855B4                            
000855B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855B4                            
000855B4                            ; sub_729B6:
000855B4                            PSGSilenceAll:
000855B4 41F9 00C0 0011             		lea	(psg_input).l,a0
000855BA 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000855BE 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000855C2 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
000855C6 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
000855CA 4E75                       		rts	
000855CC                            ; End of function PSGSilenceAll
000855CC                            
000855CC                            ; ===========================================================================
000855CC                            ; word_729CE:
000855CC                            PSGFrequencies:
000855CC 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
000855DC 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
000855EC 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
000855FC 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0008560C 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0008561C 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0008562C 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0008563C 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
0008564C 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085658                            
00085658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085658                            
00085658                            ; sub_72A5A:
00085658                            CoordFlag:
00085658 0445 00E0                  		subi.w	#$E0,d5
0008565C E54D                       		lsl.w	#2,d5
0008565E 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085662                            ; End of function CoordFlag
00085662                            
00085662                            ; ===========================================================================
00085662                            ; loc_72A64:
00085662                            coordflagLookup:
00085662 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085666                            ; ===========================================================================
00085666 6000 0000                  		bra.w	cfDetune		; $E1
0008566A                            ; ===========================================================================
0008566A 6000 0000                  		bra.w	cfSetCommunication	; $E2
0008566E                            ; ===========================================================================
0008566E 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085672                            ; ===========================================================================
00085672 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085676                            ; ===========================================================================
00085676 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
0008567A                            ; ===========================================================================
0008567A 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
0008567E                            ; ===========================================================================
0008567E 6000 0000                  		bra.w	cfHoldNote		; $E7
00085682                            ; ===========================================================================
00085682 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085686                            ; ===========================================================================
00085686 6000 0000                  		bra.w	cfChangeTransposition	; $E9
0008568A                            ; ===========================================================================
0008568A 6000 0000                  		bra.w	cfSetTempo		; $EA
0008568E                            ; ===========================================================================
0008568E 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085692                            ; ===========================================================================
00085692 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085696                            ; ===========================================================================
00085696 6000 0000                  		bra.w	cfClearPush		; $ED
0008569A                            ; ===========================================================================
0008569A 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
0008569E                            ; ===========================================================================
0008569E 6000 0000                  		bra.w	cfSetVoice		; $EF
000856A2                            ; ===========================================================================
000856A2 6000 0000                  		bra.w	cfModulation		; $F0
000856A6                            ; ===========================================================================
000856A6 6000 0000                  		bra.w	cfEnableModulation	; $F1
000856AA                            ; ===========================================================================
000856AA 6000 0000                  		bra.w	cfStopTrack		; $F2
000856AE                            ; ===========================================================================
000856AE 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
000856B2                            ; ===========================================================================
000856B2 6000 0000                  		bra.w	cfDisableModulation	; $F4
000856B6                            ; ===========================================================================
000856B6 6000 0000                  		bra.w	cfSetPSGTone		; $F5
000856BA                            ; ===========================================================================
000856BA 6000 0000                  		bra.w	cfJumpTo		; $F6
000856BE                            ; ===========================================================================
000856BE 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
000856C2                            ; ===========================================================================
000856C2 6000 0000                  		bra.w	cfJumpToGosub		; $F8
000856C6                            ; ===========================================================================
000856C6 6000 0000                  		bra.w	cfOpF9			; $F9
000856CA                            ; ===========================================================================
000856CA                            ; loc_72ACC:
000856CA                            cfPanningAMSFMS:
000856CA 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
000856CC 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
000856D0 6B00                       		bmi.s	locret_72AEA		; Return if yes
000856D2 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
000856D6 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
000856DA 8200                       		or.b	d0,d1			; Mask in new value
000856DC 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
000856E0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000856E4 6000 FC20                  		bra.w	WriteFMIorIIMain
000856E8                            ; ===========================================================================
000856E8                            
000856E8                            locret_72AEA:
000856E8 4E75                       		rts	
000856EA                            ; ===========================================================================
000856EA                            ; loc_72AEC: cfAlterNotes:
000856EA                            cfDetune:
000856EA 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
000856EE 4E75                       		rts	
000856F0                            ; ===========================================================================
000856F0                            ; loc_72AF2: cfUnknown1:
000856F0                            cfSetCommunication:
000856F0 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
000856F4 4E75                       		rts	
000856F6                            ; ===========================================================================
000856F6                            ; loc_72AF8:
000856F6                            cfJumpReturn:
000856F6 7000                       		moveq	#0,d0
000856F8 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
000856FC 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085700 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085708 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0008570A 5800                       		addq.b	#4,d0			; Actually 'pop' value
0008570C 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085710 4E75                       		rts	
00085712                            ; ===========================================================================
00085712                            ; loc_72B14:
00085712                            cfFadeInToPrevious:
00085712 204E                       		movea.l	a6,a0
00085714 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085718 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0008571C                            ; loc_72B1E:
0008571C                            @restoreramloop:
0008571C 20D9                       		move.l	(a1)+,(a0)+
0008571E 51C8 FFFC                  		dbf	d0,@restoreramloop
00085722                            
00085722 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085728 264D                       		movea.l	a5,a3
0008572A 1C3C 0028                  		move.b	#$28,d6
0008572E 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085732 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085734 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085738                            ; loc_72B3A:
00085738                            @fmloop:
00085738 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0008573C 6700                       		beq.s	@nextfm		; Branch if not
0008573E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085742 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085746 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008574A 6600                       		bne.s	@nextfm		; Branch if yes
0008574C 7000                       		moveq	#0,d0
0008574E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085752 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085756 4EBA 0000                  		jsr	SetVoice(pc)
0008575A                            ; loc_72B5C:
0008575A                            @nextfm:
0008575A DAFC 0030                  		adda.w	#TrackSz,a5
0008575E 51CF FFD8                  		dbf	d7,@fmloop
00085762                            
00085762 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085764                            ; loc_72B66:
00085764                            @psgloop:
00085764 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085768 6700                       		beq.s	@nextpsg	; Branch if not
0008576A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008576E 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085772 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085776                            ; loc_72B78:
00085776                            @nextpsg:
00085776 DAFC 0030                  		adda.w	#TrackSz,a5
0008577A 51CF FFE8                  		dbf	d7,@psgloop
0008577E                            		
0008577E 2A4B                       		movea.l	a3,a5
00085780 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085786 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
0008578C 422E 0027                  		clr.b	f_1up_playing(a6)
00085790 33FC 0000 00A1 1100        		startZ80
00085798 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0008579A 4E75                       		rts	
0008579C                            ; ===========================================================================
0008579C                            ; loc_72B9E:
0008579C                            cfSetTempoDivider:
0008579C 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
000857A0 4E75                       		rts	
000857A2                            ; ===========================================================================
000857A2                            ; loc_72BA4: cfSetVolume:
000857A2                            cfChangeFMVolume:
000857A2 101C                       		move.b	(a4)+,d0		; Get parameter
000857A4 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
000857A8 6000 0000                  		bra.w	SendVoiceTL
000857AC                            ; ===========================================================================
000857AC                            ; loc_72BAE: cfPreventAttack:
000857AC                            cfHoldNote:
000857AC 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
000857B0 4E75                       		rts	
000857B2                            ; ===========================================================================
000857B2                            ; loc_72BB4: cfNoteFill
000857B2                            cfNoteTimeout:
000857B2 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
000857B6 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
000857BA 4E75                       		rts	
000857BC                            ; ===========================================================================
000857BC                            ; loc_72BBE: cfAddKey:
000857BC                            cfChangeTransposition:
000857BC 101C                       		move.b	(a4)+,d0		; Get parameter
000857BE D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
000857C2 4E75                       		rts	
000857C4                            ; ===========================================================================
000857C4                            ; loc_72BC6:
000857C4                            cfSetTempo:
000857C4 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
000857C8 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
000857CC 4E75                       		rts	
000857CE                            ; ===========================================================================
000857CE                            ; loc_72BD0: cfSetTempoMod:
000857CE                            cfSetTempoDividerAll:
000857CE 41EE 0040                  		lea	v_music_track_ram(a6),a0
000857D2 101C                       		move.b	(a4)+,d0			; Get new tempo divider
000857D4 7230                       		moveq	#TrackSz,d1
000857D6 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
000857D8                            ; loc_72BDA:
000857D8                            @trackloop:
000857D8 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
000857DC D0C1                       		adda.w	d1,a0
000857DE 51CA FFF8                  		dbf	d2,@trackloop
000857E2                            
000857E2 4E75                       		rts	
000857E4                            ; ===========================================================================
000857E4                            ; loc_72BE6: cfChangeVolume:
000857E4                            cfChangePSGVolume:
000857E4 101C                       		move.b	(a4)+,d0		; Get volume change
000857E6 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
000857EA 4E75                       		rts	
000857EC                            ; ===========================================================================
000857EC                            ; loc_72BEE:
000857EC                            cfClearPush:
000857EC 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
000857F0 4E75                       		rts	
000857F2                            ; ===========================================================================
000857F2                            ; loc_72BF4:
000857F2                            cfStopSpecialFM4:
000857F2 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000857F6 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
000857FA 4EBA FAF2                  		jsr	FMNoteOff(pc)
000857FE 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085802 6B00                       		bmi.s	@locexit					; Branch if yes
00085804 264D                       		movea.l	a5,a3
00085806 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0008580A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0008580E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085812 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085816 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008581A 4EBA 0000                  		jsr	SetVoice(pc)
0008581E 2A4B                       		movea.l	a3,a5
00085820                            ; loc_72C22:
00085820                            @locexit:
00085820 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085822 4E75                       		rts	
00085824                            ; ===========================================================================
00085824                            ; loc_72C26:
00085824                            cfSetVoice:
00085824 7000                       		moveq	#0,d0
00085826 101C                       		move.b	(a4)+,d0		; Get new voice
00085828 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0008582C 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085830 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085834 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085838 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
0008583C 6700                       		beq.s	SetVoice		; If yes, branch
0008583E 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085842 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085846 6B00                       		bmi.s	SetVoice		; If yes, branch
00085848 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0008584C                            
0008584C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008584C                            
0008584C                            ; sub_72C4E:
0008584C                            SetVoice:
0008584C 5340                       		subq.w	#1,d0
0008584E 6B00                       		bmi.s	@havevoiceptr
00085850 323C 0019                  		move.w	#25,d1
00085854                            ; loc_72C56:
00085854                            @voicemultiply:
00085854 D2C1                       		adda.w	d1,a1
00085856 51C8 FFFC                  		dbf	d0,@voicemultiply
0008585A                            ; loc_72C5C:
0008585A                            @havevoiceptr:
0008585A 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0008585C 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085860 1801                       		move.b	d1,d4
00085862 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085866 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0008586A 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
0008586E 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085870                            ; loc_72C72:
00085870                            @sendvoiceloop:
00085870 101A                       		move.b	(a2)+,d0
00085872 1219                       		move.b	(a1)+,d1
00085874 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085878 51CB FFF6                  		dbf	d3,@sendvoiceloop
0008587C                            
0008587C 7A03                       		moveq	#3,d5
0008587E 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085882 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085886 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
0008588A                            ; loc_72C8C:
0008588A                            @sendtlloop:
0008588A 101A                       		move.b	(a2)+,d0
0008588C 1219                       		move.b	(a1)+,d1
0008588E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085890 6400                       		bcc.s	@sendtl		; Branch if not
00085892 D203                       		add.b	d3,d1		; Include additional attenuation
00085894                            ; loc_72C96:
00085894                            @sendtl:
00085894 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085898 51CD FFF0                  		dbf	d5,@sendtlloop
0008589C                            		
0008589C 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
000858A0 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
000858A4 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
000858A8                            
000858A8                            locret_72CAA:
000858A8 4E75                       		rts	
000858AA                            ; End of function SetVoice
000858AA                            
000858AA                            ; ===========================================================================
000858AA                            ; byte_72CAC:
000858AA 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000858B2                            
000858B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858B2                            
000858B2                            ; sub_72CB4:
000858B2                            SendVoiceTL:
000858B2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000858B6 6600                       		bne.s	@locret		; Return if so
000858B8 7000                       		moveq	#0,d0
000858BA 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000858BE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000858C2 4A2E 000E                  		tst.b	f_voice_selector(a6)
000858C6 6700                       		beq.s	@gotvoiceptr
000858C8                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
000858C8                            		; of a6!
000858C8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
000858CC 4A2E 000E                  		tst.b	f_voice_selector(a6)
000858D0 6B00                       		bmi.s	@gotvoiceptr
000858D2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
000858D6                            ; loc_72CD8:
000858D6                            @gotvoiceptr:
000858D6 5340                       		subq.w	#1,d0
000858D8 6B00                       		bmi.s	@gotvoice
000858DA 323C 0019                  		move.w	#25,d1
000858DE                            ; loc_72CE0:
000858DE                            @voicemultiply:
000858DE D2C1                       		adda.w	d1,a1
000858E0 51C8 FFFC                  		dbf	d0,@voicemultiply
000858E4                            ; loc_72CE6:
000858E4                            @gotvoice:
000858E4 D2FC 0015                  		adda.w	#21,a1				; Want TL
000858E8 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
000858EC 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
000858F0 0240 0007                  		andi.w	#7,d0				; Want only algorithm
000858F4 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
000858F8 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
000858FC 6B00                       		bmi.s	@locret				; If negative, stop
000858FE 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085900                            ; loc_72D02:
00085900                            @sendtlloop:
00085900 101A                       		move.b	(a2)+,d0
00085902 1219                       		move.b	(a1)+,d1
00085904 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085906 6400                       		bcc.s	@senttl		; Branch if not
00085908 D203                       		add.b	d3,d1		; Include additional attenuation
0008590A 6500                       		bcs.s	@senttl		; Branch on overflow
0008590C 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085910                            ; loc_72D12:
00085910                            @senttl:
00085910 51CD FFEE                  		dbf	d5,@sendtlloop
00085914                            ; locret_72D16:
00085914                            @locret:
00085914 4E75                       		rts	
00085916                            ; End of function SendVoiceTL
00085916                            
00085916                            ; ===========================================================================
00085916                            ; byte_72D18:
00085916                            FMInstrumentOperatorTable:
00085916 30                         		dc.b  $30		; Detune/multiple operator 1
00085917 38                         		dc.b  $38		; Detune/multiple operator 3
00085918 34                         		dc.b  $34		; Detune/multiple operator 2
00085919 3C                         		dc.b  $3C		; Detune/multiple operator 4
0008591A 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0008591B 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
0008591C 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
0008591D 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
0008591E 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
0008591F 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085920 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085921 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085922 70                         		dc.b  $70		; Secondary decay rate operator 1
00085923 78                         		dc.b  $78		; Secondary decay rate operator 3
00085924 74                         		dc.b  $74		; Secondary decay rate operator 2
00085925 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085926 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085927 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085928 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085929 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0008592A                            FMInstrumentOperatorTable_End
0008592A                            ; byte_72D2C:
0008592A                            FMInstrumentTLTable:
0008592A 40                         		dc.b  $40		; Total level operator 1
0008592B 48                         		dc.b  $48		; Total level operator 3
0008592C 44                         		dc.b  $44		; Total level operator 2
0008592D 4C                         		dc.b  $4C		; Total level operator 4
0008592E                            FMInstrumentTLTable_End
0008592E                            ; ===========================================================================
0008592E                            ; loc_72D30:
0008592E                            cfModulation:
0008592E 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085932 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085936 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
0008593A 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0008593E 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085942 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085944 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085946 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0008594A 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
0008594E 4E75                       		rts	
00085950                            ; ===========================================================================
00085950                            ; loc_72D52:
00085950                            cfEnableModulation:
00085950 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085954 4E75                       		rts	
00085956                            ; ===========================================================================
00085956                            ; loc_72D58:
00085956                            cfStopTrack:
00085956 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008595A 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0008595E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085962 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085964 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085968 6B00 0000                  		bmi.w	@locexit		; Exit if yes
0008596C 4EBA F980                  		jsr	FMNoteOff(pc)
00085970 6000                       		bra.s	@stoppedchannel
00085972                            ; ===========================================================================
00085972                            ; loc_72D74:
00085972                            @stoppsg:
00085972 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085976                            ; loc_72D78:
00085976                            @stoppedchannel:
00085976 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
0008597A 6A00 0000                  		bpl.w	@locexit		; Exit if not
0008597E 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085980 7000                       		moveq	#0,d0
00085982 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085986 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085988 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
0008598C 264D                       		movea.l	a5,a3
0008598E 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085992 6600                       		bne.s	@getpointer		; Branch if not
00085994 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085998 6A00                       		bpl.s	@getpointer		; Branch if not
0008599A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008599E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
000859A2 6000                       		bra.s	@gotpointer
000859A4                            ; ===========================================================================
000859A4                            ; loc_72DA8:
000859A4                            @getpointer:
000859A4 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
000859A6 E508                       		lsl.b	#2,d0
000859A8 2A70 0000                  		movea.l	(a0,d0.w),a5
000859AC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000859AE 6A00                       		bpl.s	@novoiceupd		; Branch if not
000859B0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
000859B4                            ; loc_72DB8:
000859B4                            @gotpointer:
000859B4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
000859B8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000859BC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000859C0 4EBA FE8A                  		jsr	SetVoice(pc)
000859C4                            ; loc_72DC8:
000859C4                            @novoiceupd:
000859C4 2A4B                       		movea.l	a3,a5
000859C6 6000                       		bra.s	@locexit
000859C8                            ; ===========================================================================
000859C8                            ; loc_72DCC:
000859C8                            @getpsgptr:
000859C8 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
000859CC 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
000859CE 6A00                       		bpl.s	@getchannelptr	; Branch if not
000859D0 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
000859D4 6700                       		beq.s	@gotchannelptr	; Branch if yes
000859D6 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
000859DA 6700                       		beq.s	@gotchannelptr	; Branch if yes
000859DC                            ; loc_72DE0:
000859DC                            @getchannelptr:
000859DC 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
000859E0 E608                       		lsr.b	#3,d0
000859E2 2070 0000                  		movea.l	(a0,d0.w),a0
000859E6                            ; loc_72DEA:
000859E6                            @gotchannelptr:
000859E6 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000859EA 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000859EE 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000859F4 6600                       		bne.s	@locexit			; Branch if not
000859F6 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000859FE                            ; loc_72E02:
000859FE                            @locexit:
000859FE 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085A00 4E75                       		rts	
00085A02                            ; ===========================================================================
00085A02                            ; loc_72E06:
00085A02                            cfSetPSGNoise:
00085A02 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085A08 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085A0C 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085A10 6600                       		bne.s	@locret				; Return if yes
00085A12 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085A1A                            ; locret_72E1E:
00085A1A                            @locret:
00085A1A 4E75                       		rts	
00085A1C                            ; ===========================================================================
00085A1C                            ; loc_72E20:
00085A1C                            cfDisableModulation:
00085A1C 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085A20 4E75                       		rts	
00085A22                            ; ===========================================================================
00085A22                            ; loc_72E26:
00085A22                            cfSetPSGTone:
00085A22 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085A26 4E75                       		rts	
00085A28                            ; ===========================================================================
00085A28                            ; loc_72E2C:
00085A28                            cfJumpTo:
00085A28 101C                       		move.b	(a4)+,d0	; High byte of offset
00085A2A E148                       		lsl.w	#8,d0		; Shift it into place
00085A2C 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085A2E D8C0                       		adda.w	d0,a4		; Add to current position
00085A30 534C                       		subq.w	#1,a4		; Put back one byte
00085A32 4E75                       		rts	
00085A34                            ; ===========================================================================
00085A34                            ; loc_72E38:
00085A34                            cfRepeatAtPos:
00085A34 7000                       		moveq	#0,d0
00085A36 101C                       		move.b	(a4)+,d0			; Loop index
00085A38 121C                       		move.b	(a4)+,d1			; Repeat count
00085A3A 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085A3E 6600                       		bne.s	@loopexists			; Branch if yes
00085A40 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085A44                            ; loc_72E48:
00085A44                            @loopexists:
00085A44 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085A48 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085A4A 544C                       		addq.w	#2,a4				; Skip target address
00085A4C 4E75                       		rts	
00085A4E                            ; ===========================================================================
00085A4E                            ; loc_72E52:
00085A4E                            cfJumpToGosub:
00085A4E 7000                       		moveq	#0,d0
00085A50 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085A54 5900                       		subq.b	#4,d0				; Add space for another target
00085A56 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085A5A 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085A5E 60C8                       		bra.s	cfJumpTo
00085A60                            ; ===========================================================================
00085A60                            ; loc_72E64:
00085A60                            cfOpF9:
00085A60 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085A64 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085A68 4EBA F8B4                  		jsr	WriteFMI(pc)
00085A6C 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085A70 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085A74 6000 F8A8                  		bra.w	WriteFMI
00085A78                            ; ===========================================================================
00085A78                            
00085A78                            Kos_Z80:
00085A78                            		incbin	"sound\z80.bin", 0, $15
00085A8D 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085A8E                            		incbin	"sound\z80.bin", $16, 6
00085A94 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085A95                            		incbin	"sound\z80.bin", $1D, $93
00085B28 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085B2A                            		incbin	"sound\z80.bin", $B2, 1
00085B2B 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085B2D                            		incbin	"sound\z80.bin", $B5, $16AB
000871CE                            		even
000871CE                            
000871CE                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
000884F2 00                         		even
000884F2                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00089D7A                            		even
00089D7A                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000916FA 00                         		even
000916FA                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00092F0E 00                         		even
00092F0E                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00093CB4                            		even
00093CB4                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
0009506C                            		even
0009506C                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095964 00                         		even
00095964                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095964                            extralifejingle_Header:
00095964                            	smpsHeaderStartSong 1
00095966 0703                       	smpsHeaderChan      $07, $03
00095968 0100                       	smpsHeaderTempo     $01, $00
0009596A                            
0009596E 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095972 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095976 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
0009597A 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
0009597E 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095982 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095998                            
00095998                            ; DAC Data
00095998                            extralifejingle_DAC:
00095998 807F 55                    	dc.b	nRst, $7F, $55
0009599B E4                         	smpsFade
0009599C                            ; PSG1 Data
0009599C                            extralifejingle_PSG1:
0009599C                            ; PSG2 Data
0009599C                            extralifejingle_PSG2:
0009599C                            ; PSG3 Data
0009599C                            extralifejingle_PSG3:
0009599C F2                         	smpsStop
0009599D                            
0009599D                            ; FM1 Data
0009599D                            extralifejingle_FM1:
0009599D EF00                       	smpsSetvoice        $00
0009599F E616                       	smpsAlterVol        $16
000959A1 E0C0                       	smpsPan             panCenter, $00
000959A3 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000959AF AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000959B3 F2                         	smpsStop
000959B4                            
000959B4                            ; FM2 Data
000959B4                            extralifejingle_FM2:
000959B4 EF01                       	smpsSetvoice        $01
000959B6 E616                       	smpsAlterVol        $16
000959B8 E0C0                       	smpsPan             panCenter, $00
000959BA B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000959C6 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000959CA F2                         	smpsStop
000959CB                            
000959CB                            ; FM3 Data
000959CB                            extralifejingle_FM3:
000959CB EF01                       	smpsSetvoice        $01
000959CD E616                       	smpsAlterVol        $16
000959CF E0C0                       	smpsPan             panCenter, $00
000959D1 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000959DD B106 800C                  	dc.b	nC4, $06, nRst, $0C
000959E1 F2                         	smpsStop
000959E2                            
000959E2                            ; FM4 Data
000959E2                            extralifejingle_FM4:
000959E2 EF02                       	smpsSetvoice        $02
000959E4 E0C0                       	smpsPan             panCenter, $00
000959E6 8001                       	dc.b	nRst, $01
000959E8 E616                       	smpsAlterVol        $16
000959EA BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000959F6 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000959FA F2                         	smpsStop
000959FB                            
000959FB                            ; FM5 Data
000959FB                            extralifejingle_FM5:
000959FB EF03                       	smpsSetvoice        $03
000959FD E602                       	smpsAlterVol        $02
000959FF E0C0                       	smpsPan             panCenter, $00
00095A01 8001                       	dc.b	nRst, $01
00095A03 EF05                       	smpsSetvoice        $05
00095A05 E60A                       	smpsAlterVol        $0A
00095A07 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095A13 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095A1F 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095A2B C1C4 80                    	dc.b	nE5, nG5, nRst
00095A2E F2                         	smpsStop
00095A2F                            
00095A2F                            ; FM6 Data
00095A2F                            extralifejingle_FM6:
00095A2F EF04                       	smpsSetvoice        $04
00095A31 E607                       	smpsAlterVol        $07
00095A33 E0C0                       	smpsPan             panCenter, $00
00095A35 8001                       	dc.b	nRst, $01
00095A37 EF06                       	smpsSetvoice        $06
00095A39 E6F9                       	smpsAlterVol        $F9
00095A3B A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095A42 F2                         	smpsStop
00095A43                            
00095A43                            extralifejingle_Voices:
00095A43                            ;	Voice $00
00095A43                            ;	$3A
00095A43                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095A43                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095A43                            	smpsVcAlgorithm     $02
00095A43                            	smpsVcFeedback      $07
00095A43                            	smpsVcUnusedBits    $00
00095A43                            	smpsVcDetune        $03, $07, $07, $03
00095A43                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095A43                            	smpsVcRateScale     $00, $00, $00, $00
00095A43                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095A43                            	smpsVcAmpMod        $00, $00, $00, $00
00095A43                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095A43                            	smpsVcDecayRate2    $00, $00, $00, $00
00095A43                            	smpsVcDecayLevel    $00, $00, $00, $00
00095A43                            	smpsVcReleaseRate   $05, $03, $03, $03
00095A5C                            
00095A5C                            ;	Voice $01
00095A5C                            ;	$3A
00095A5C                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095A5C                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095A5C                            	smpsVcAlgorithm     $02
00095A5C                            	smpsVcFeedback      $07
00095A5C                            	smpsVcUnusedBits    $00
00095A5C                            	smpsVcDetune        $03, $07, $07, $03
00095A5C                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095A5C                            	smpsVcRateScale     $00, $00, $00, $00
00095A5C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095A5C                            	smpsVcAmpMod        $00, $00, $00, $00
00095A5C                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095A5C                            	smpsVcDecayRate2    $00, $00, $00, $00
00095A5C                            	smpsVcDecayLevel    $00, $00, $00, $00
00095A5C                            	smpsVcReleaseRate   $05, $03, $03, $03
00095A75                            
00095A75                            ;	Voice $02
00095A75                            ;	$3A
00095A75                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095A75                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095A75                            	smpsVcAlgorithm     $02
00095A75                            	smpsVcFeedback      $07
00095A75                            	smpsVcUnusedBits    $00
00095A75                            	smpsVcDetune        $03, $07, $07, $03
00095A75                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095A75                            	smpsVcRateScale     $00, $00, $00, $00
00095A75                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095A75                            	smpsVcAmpMod        $00, $00, $00, $00
00095A75                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095A75                            	smpsVcDecayRate2    $00, $00, $00, $00
00095A75                            	smpsVcDecayLevel    $00, $00, $00, $00
00095A75                            	smpsVcReleaseRate   $05, $03, $03, $03
00095A8E                            
00095A8E                            ;	Voice $03
00095A8E                            ;	$00
00095A8E                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095A8E                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095A8E                            	smpsVcAlgorithm     $00
00095A8E                            	smpsVcFeedback      $00
00095A8E                            	smpsVcUnusedBits    $00
00095A8E                            	smpsVcDetune        $00, $00, $00, $00
00095A8E                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095A8E                            	smpsVcRateScale     $00, $00, $00, $00
00095A8E                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095A8E                            	smpsVcAmpMod        $00, $00, $00, $00
00095A8E                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095A8E                            	smpsVcDecayRate2    $00, $00, $00, $00
00095A8E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095A8E                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095AA7                            
00095AA7                            ;	Voice $04
00095AA7                            ;	$03
00095AA7                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095AA7                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095AA7                            	smpsVcAlgorithm     $03
00095AA7                            	smpsVcFeedback      $00
00095AA7                            	smpsVcUnusedBits    $00
00095AA7                            	smpsVcDetune        $03, $04, $04, $06
00095AA7                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095AA7                            	smpsVcRateScale     $00, $00, $00, $00
00095AA7                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095AA7                            	smpsVcAmpMod        $00, $00, $00, $00
00095AA7                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095AA7                            	smpsVcDecayRate2    $06, $04, $00, $01
00095AA7                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095AA7                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095AC0                            
00095AC0                            ;	Voice $05
00095AC0                            ;	$34
00095AC0                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095AC0                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095AC0                            	smpsVcAlgorithm     $04
00095AC0                            	smpsVcFeedback      $06
00095AC0                            	smpsVcUnusedBits    $00
00095AC0                            	smpsVcDetune        $07, $00, $07, $03
00095AC0                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095AC0                            	smpsVcRateScale     $00, $01, $00, $02
00095AC0                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095AC0                            	smpsVcAmpMod        $00, $00, $00, $00
00095AC0                            	smpsVcDecayRate1    $08, $07, $07, $14
00095AC0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095AC0                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095AC0                            	smpsVcReleaseRate   $07, $07, $04, $06
00095AD9                            
00095AD9                            ;	Voice $06
00095AD9                            ;	$30
00095AD9                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095AD9                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095AD9                            	smpsVcAlgorithm     $00
00095AD9                            	smpsVcFeedback      $06
00095AD9                            	smpsVcUnusedBits    $00
00095AD9                            	smpsVcDetune        $00, $00, $00, $00
00095AD9                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095AD9                            	smpsVcRateScale     $01, $00, $00, $02
00095AD9                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095AD9                            	smpsVcAmpMod        $00, $00, $00, $00
00095AD9                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095AD9                            	smpsVcDecayRate2    $08, $05, $18, $08
00095AD9                            	smpsVcDecayLevel    $01, $00, $00, $06
00095AD9                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095AF2                            
00095AF2                            
00095AF2                            		even
00095AF2                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
0009634A 00                         		even
0009634A                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
0009686A                            		even
0009686A                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096B2C 00                         		even
00096B2C                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097984                            		even
00097984                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00097BD0 00                         		even
00097BD0                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00097F06 00                         		even
00097F06                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000980B2 00                         		even
000980B2                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000982C0 00                         		even
000982C0                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000985A4 00                         		even
000985A4                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00098CD4 00                         		even
00098CD4                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00098DA2                            		even
00098DA2                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099210 00                         		even
00099210                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
00099D06                            		even
00099D06                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009A8E8                            		even
0009A8E8                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009BBEE 00                         		even
0009BBEE                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009BBEE                            PasswordEntry_Header:
0009BBEE                            	smpsHeaderStartSong 3
0009BBF0 0603                       	smpsHeaderChan      $06, $03
0009BBF2 0105                       	smpsHeaderTempo     $01, $05
0009BBF4                            
0009BBF8 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009BBFC 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009BC00 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009BC04 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009BC08 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009BC1E                            
0009BC1E                            ; FM1 Data
0009BC1E                            PasswordEntry_FM1:
0009BC1E EF00                       	smpsSetvoice        $00
0009BC25                            
0009BC25                            PasswordEntry_Jump00:
0009BC25 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009BC31 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009BC3D C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009BC49 C918 CB                    	dc.b	nC6, $18, nD6
0009BC4C F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009BC4F                            
0009BC4F                            ; FM2 Data
0009BC4F                            PasswordEntry_FM2:
0009BC4F EF01                       	smpsSetvoice        $01
0009BC51                            
0009BC51                            PasswordEntry_Jump03:
0009BC51 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009BC5D AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009BC69 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009BC75 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009BC7F F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009BC82                            
0009BC82                            ; FM3 Data
0009BC82                            PasswordEntry_FM3:
0009BC82 E080                       	smpsPan             panLeft, $00
0009BC84 EF02                       	smpsSetvoice        $02
0009BC86                            
0009BC86                            PasswordEntry_Jump02:
0009BC86 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009BC92 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009BC9E C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009BCAA C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009BCB6 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009BCC2 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009BCCE BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009BCDA C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009BCE6 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009BCF2 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BCFE BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BD06 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009BD09                            
0009BD09                            ; FM4 Data
0009BD09                            PasswordEntry_FM4:
0009BD09 E040                       	smpsPan             panRight, $00
0009BD0B EF02                       	smpsSetvoice        $02
0009BD0D                            
0009BD0D                            PasswordEntry_Jump01:
0009BD0D C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009BD19 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009BD25 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009BD31 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009BD3D BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009BD49 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009BD55 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009BD61 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009BD6D BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009BD79 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BD85 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009BD8D F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009BD90                            
0009BD90                            ; FM5 Data
0009BD90                            PasswordEntry_FM5:
0009BD90 EF00                       	smpsSetvoice        $00
0009BD92 E1FB                       	smpsAlterNote       $FB
0009BD94 800C                       	dc.b	nRst, $0C
0009BD96 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009BD99                            
0009BD99                            ; PSG1 Data
0009BD99                            PasswordEntry_PSG1:
0009BD99 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BDA5 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009BDB1 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009BDBD CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009BDC9 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009BDD5 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009BDE1 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009BDE5 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009BDE8                            
0009BDE8                            ; PSG2 Data
0009BDE8                            PasswordEntry_PSG2:
0009BDE8 E1FF                       	smpsAlterNote       $FF
0009BDEA 800C                       	dc.b	nRst, $0C
0009BDEC F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009BDEF                            
0009BDEF                            ; PSG3 Data
0009BDEF                            PasswordEntry_PSG3:
0009BDEF F502                       	smpsPSGvoice        fTone_02
0009BDF1 F3E7                       	smpsPSGform         $E7
0009BDF3 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BDFF C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009BE0B C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009BE12 F503                       	smpsPSGvoice        fTone_03
0009BE14 C5                         	dc.b	nAb5
0009BE15 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009BE18                            
0009BE18                            ; DAC Data
0009BE18                            PasswordEntry_DAC:
0009BE18 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BE24 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BE2C F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009BE31 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BE3D 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009BE45                            
0009BE45                            PasswordEntry_Loop00:
0009BE45 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009BE51 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009BE59 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009BE5E 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009BE6A 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009BE74 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009BE77                            
0009BE77                            PasswordEntry_Voices:
0009BE77                            ;	Voice $00
0009BE77                            ;	$04
0009BE77                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009BE77                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009BE77                            	smpsVcAlgorithm     $04
0009BE77                            	smpsVcFeedback      $00
0009BE77                            	smpsVcUnusedBits    $00
0009BE77                            	smpsVcDetune        $00, $00, $00, $00
0009BE77                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009BE77                            	smpsVcRateScale     $00, $00, $00, $00
0009BE77                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009BE77                            	smpsVcAmpMod        $00, $00, $00, $00
0009BE77                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009BE77                            	smpsVcDecayRate2    $05, $00, $00, $03
0009BE77                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009BE77                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009BE90                            
0009BE90                            ;	Voice $01
0009BE90                            ;	$39
0009BE90                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009BE90                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009BE90                            	smpsVcAlgorithm     $01
0009BE90                            	smpsVcFeedback      $07
0009BE90                            	smpsVcUnusedBits    $00
0009BE90                            	smpsVcDetune        $00, $04, $06, $00
0009BE90                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009BE90                            	smpsVcRateScale     $01, $01, $01, $00
0009BE90                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BE90                            	smpsVcAmpMod        $00, $00, $00, $00
0009BE90                            	smpsVcDecayRate1    $09, $09, $11, $10
0009BE90                            	smpsVcDecayRate2    $00, $00, $00, $06
0009BE90                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009BE90                            	smpsVcReleaseRate   $08, $08, $08, $08
0009BEA9                            
0009BEA9                            ;	Voice $02
0009BEA9                            ;	$2C
0009BEA9                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009BEA9                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009BEA9                            	smpsVcAlgorithm     $04
0009BEA9                            	smpsVcFeedback      $05
0009BEA9                            	smpsVcUnusedBits    $00
0009BEA9                            	smpsVcDetune        $00, $02, $00, $04
0009BEA9                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009BEA9                            	smpsVcRateScale     $00, $00, $00, $00
0009BEA9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009BEA9                            	smpsVcAmpMod        $00, $00, $00, $00
0009BEA9                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009BEA9                            	smpsVcDecayRate2    $05, $00, $05, $04
0009BEA9                            	smpsVcDecayLevel    $08, $08, $05, $04
0009BEA9                            	smpsVcReleaseRate   $06, $05, $06, $05
0009BEC2                            
0009BEC2                            
0009BEC2                            		even		
0009BEC2                            ; ---------------------------------------------------------------------------
0009BEC2                            ; Sound	effect pointers
0009BEC2                            ; ---------------------------------------------------------------------------
0009BEC2                            SoundIndex:
0009BEC2 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009BEC6 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009BECA 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009BECE 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009BED2 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009BED6 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009BEDA 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009BEDE 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009BEE2 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009BEE6 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009BEEA 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009BEEE 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009BEF2 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009BEF6 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009BEFA 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009BEFE 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009BF02 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009BF06 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009BF0A 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009BF0E 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009BF12 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009BF16 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009BF1A 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009BF1E 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009BF22 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009BF26 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009BF2A 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009BF2E 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009BF32 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009BF36 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009BF3A 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009BF3E 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009BF42 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009BF46 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009BF4A 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009BF4E 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009BF52 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009BF56 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009BF5A 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009BF5E 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009BF62 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009BF66 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009BF6A 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009BF6E 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009BF72 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009BF76 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009BF7A 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009BF7E 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009BF82                            ptr_sndend
0009BF82                            ; ---------------------------------------------------------------------------
0009BF82                            ; Special sound effect pointers
0009BF82                            ; ---------------------------------------------------------------------------
0009BF82                            SpecSoundIndex:
0009BF82 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009BF86 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009BF8A 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009BF8E 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009BF92 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009BF96 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009BF9A                            ptr_specend
0009BF9A                            SoundA0:	include	"sound/sfx/Jump.asm"
0009BF9A                            SndA0_Jump_Header:
0009BF9A                            	smpsHeaderStartSong 1
0009BF9C 01                         	smpsHeaderTempoSFX  $01
0009BF9D 01                         	smpsHeaderChanSFX   $01
0009BF9E                            
0009BFA4                            
0009BFA4                            ; PSG2 Data
0009BFA4                            SndA0_Jump_PSG2:
0009BFA4 F500                       	smpsPSGvoice        $00
0009BFA6 9E05                       	dc.b	nF2, $05
0009BFAD A315                       	dc.b	nBb2, $15
0009BFAF F2                         	smpsStop
0009BFB0                            
0009BFB0                            ; Song seems to not use any FM voices
0009BFB0                            SndA0_Jump_Voices:
0009BFB0                            SndA0_Jump_Voices:
0009BFB0                            		even
0009BFB0                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009BFDA                            		even
0009BFDA                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009BFDA                            SndDF_Header:
0009BFDA                            	smpsHeaderStartSong 3
0009BFDC 01                         	smpsHeaderTempoSFX  $01
0009BFDD 01                         	smpsHeaderChanSFX   $01
0009BFDE                            
0009BFE4                            
0009BFE4                            ; FM5 Data
0009BFE4                            SndDF_FM5:
0009BFE4 EF00                       	smpsSetvoice        $00
0009BFE6                            
0009BFE6                            SndDF_Loop00:
0009BFE6 F800 00                    	smpsCall            SndDF_Call00
0009BFE9 E905                       	smpsAlterPitch $05
0009BFEB E608                       	smpsFMAlterVol      $08
0009BFED F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009BFF2 E9EC                       	smpsAlterPitch $EC
0009BFF4 E6E0                       	smpsFMAlterVol      $E0
0009BFF6 F2                         	smpsStop
0009BFF7                            
0009BFF7                            SndDF_Call00:
0009BFF7 9902                       	dc.b	nC2, $02
0009BFF9 E901                       	smpsAlterPitch $01
0009BFFB F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C000 E9F6                       	smpsAlterPitch $F6
0009C002 E3                         	smpsReturn
0009C003                            
0009C003                            SndDF_Voices:
0009C003                            ;	Voice $00
0009C003                            ;	$07
0009C003                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C003                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C003                            	smpsVcAlgorithm     $07
0009C003                            	smpsVcFeedback      $00
0009C003                            	smpsVcUnusedBits    $00
0009C003                            	smpsVcDetune        $00, $00, $00, $00
0009C003                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C003                            	smpsVcRateScale     $00, $00, $00, $00
0009C003                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C003                            	smpsVcAmpMod        $00, $00, $00, $00
0009C003                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C003                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C003                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C003                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C01C                            		even
0009C01C                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C04E                            		even
0009C04E                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C092 00                         		even
0009C092                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C092                            SndD2_Header:
0009C092                            	smpsHeaderStartSong 3
0009C094 01                         	smpsHeaderTempoSFX  $01
0009C095 01                         	smpsHeaderChanSFX   $01
0009C096                            
0009C09C                            
0009C09C                            ; FM4 Data
0009C09C                            SndD2_FM4:
0009C09C EF00                       	smpsSetvoice        $00
0009C0A3 C645                       	dc.b	nA5, $45
0009C0A5 F2                         	smpsStop
0009C0A6                            
0009C0A6                            SndD2_Voices:
0009C0A6                            ;	Voice $00
0009C0A6                            ;	$04
0009C0A6                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C0A6                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C0A6                            	smpsVcAlgorithm     $04
0009C0A6                            	smpsVcFeedback      $00
0009C0A6                            	smpsVcUnusedBits    $00
0009C0A6                            	smpsVcDetune        $04, $00, $00, $02
0009C0A6                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C0A6                            	smpsVcRateScale     $00, $00, $00, $00
0009C0A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C0A6                            	smpsVcAmpMod        $00, $00, $00, $00
0009C0A6                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C0A6                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C0A6                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C0A6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C0C0 00                         		even
0009C0C0                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C0F0                            		even
0009C0F0                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C120                            		even
0009C120                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C154                            		even
0009C154                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C166                            		even
0009C166                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C166                            SndA2_Header:
0009C166                            	smpsHeaderStartSong 3
0009C168 01                         	smpsHeaderTempoSFX  $01
0009C169 02                         	smpsHeaderChanSFX   $02
0009C16A                            
0009C176                            
0009C176                            ; FM3 Data
0009C176                            SndA2_FM3:
0009C176 EF00                       	smpsSetvoice        $00
0009C17D 8106                       	dc.b	nC0, $06
0009C17F                            
0009C17F                            SndA2_Loop00:
0009C17F 810E                       	dc.b	nC0, $0E
0009C181 E60E                       	smpsAlterVol      $0E
0009C183 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C188 F2                         	smpsStop
0009C189                            
0009C189                            ; FM4 Data
0009C189                            SndA2_FM4:
0009C189 EF01                       	smpsSetvoice        $01
0009C18B A606 14                    	dc.b	nCs3, $06, $14
0009C18E F2                         	smpsStop
0009C18F                            
0009C18F                            SndA2_Voices:
0009C18F                            ;	Voice $00
0009C18F                            ;	$F9
0009C18F                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C18F                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C18F                            	smpsVcAlgorithm     $01
0009C18F                            	smpsVcFeedback      $07
0009C18F                            	smpsVcUnusedBits    $03
0009C18F                            	smpsVcDetune        $03, $01, $03, $02
0009C18F                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C18F                            	smpsVcRateScale     $00, $00, $00, $00
0009C18F                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C18F                            	smpsVcAmpMod        $00, $00, $00, $00
0009C18F                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C18F                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C18F                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C18F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1A8                            
0009C1A8                            ;	Voice $01
0009C1A8                            ;	$00
0009C1A8                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C1A8                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C1A8                            	smpsVcAlgorithm     $00
0009C1A8                            	smpsVcFeedback      $00
0009C1A8                            	smpsVcUnusedBits    $00
0009C1A8                            	smpsVcDetune        $00, $00, $00, $00
0009C1A8                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C1A8                            	smpsVcRateScale     $00, $00, $03, $03
0009C1A8                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C1A8                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1A8                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C1A8                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C1A8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C1A8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1C2 00                         		even
0009C1C2                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C1C2                            Sound_3E_Header:
0009C1C2                            	smpsHeaderStartSong 3
0009C1C4 01                         	smpsHeaderTempoSFX  $01
0009C1C5 01                         	smpsHeaderChanSFX   $01
0009C1C6                            
0009C1CC                            
0009C1CC                            ; FM5 Data
0009C1CC                            Sound_3E_3F_40_41_FM5:
0009C1CC EF00                       	smpsSetvoice        $00
0009C1CE A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C1D3 F2                         	smpsStop
0009C1D4                            
0009C1D4                            Sound_3E_Voices:
0009C1D4                            ;	Voice $00
0009C1D4                            ;	$0C
0009C1D4                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C1D4                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C1D4                            	smpsVcAlgorithm     $04
0009C1D4                            	smpsVcFeedback      $01
0009C1D4                            	smpsVcUnusedBits    $00
0009C1D4                            	smpsVcDetune        $03, $03, $02, $00
0009C1D4                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C1D4                            	smpsVcRateScale     $00, $00, $00, $00
0009C1D4                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C1D4                            	smpsVcAmpMod        $00, $00, $00, $00
0009C1D4                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C1D4                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C1D4                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C1D4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C1ED                            
0009C1ED                            
0009C1EE 00                         		even
0009C1EE                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C222                            		even
0009C222                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C258                            		even
0009C258                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C258                            Sound_70_Header:
0009C258                            	smpsHeaderStartSong 3
0009C25A 01                         	smpsHeaderTempoSFX  $01
0009C25B 02                         	smpsHeaderChanSFX   $02
0009C25C                            
0009C268                            
0009C268                            ; FM5 Data
0009C268                            Sound_70_FM5:
0009C268 EF00                       	smpsSetvoice        $00
0009C26A 8001                       	dc.b	nRst, $01
0009C271 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C275 F2                         	smpsStop
0009C276                            
0009C276                            ; PSG3 Data
0009C276                            Sound_70_PSG3:
0009C276 F500                       	smpsPSGvoice        sTone_0D
0009C278 800B                       	dc.b	nRst, $0B
0009C27A F3E7                       	smpsPSGform         $E7
0009C27C C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C27F                            
0009C27F                            Sound_70_Loop00:
0009C27F 02                         	dc.b	$02
0009C280 EC01                       	smpsPSGAlterVol     $01
0009C282 E7                         	dc.b	smpsNoAttack
0009C283 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C288 F2                         	smpsStop
0009C289                            
0009C289                            Sound_70_Voices:
0009C289                            ;	Voice $00
0009C289                            ;	$FA
0009C289                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C289                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C289                            	smpsVcAlgorithm     $02
0009C289                            	smpsVcFeedback      $07
0009C289                            	smpsVcUnusedBits    $03
0009C289                            	smpsVcDetune        $00, $00, $00, $00
0009C289                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C289                            	smpsVcRateScale     $00, $00, $00, $00
0009C289                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C289                            	smpsVcAmpMod        $00, $00, $00, $00
0009C289                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C289                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C289                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C289                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2A2                            
0009C2A2                            
0009C2A2                            		even
0009C2A2                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C2D0                            		even
0009C2D0                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C302                            		even
0009C302                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C32E                            		even
0009C32E                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C37E                            		even
0009C37E                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C3C8                            		even
0009C3C8                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C424                            		even
0009C424                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C452                            		even
0009C452                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C452                            SpikesSFX_Header:
0009C452                            	smpsHeaderStartSong 3
0009C454 01                         	smpsHeaderTempoSFX  $01
0009C455 02                         	smpsHeaderChanSFX   $02
0009C456                            
0009C462                            
0009C462                            ; FM6 Data
0009C462                            SndB7_FM4:
0009C462 EF01                       	smpsSetvoice        $01
0009C469 B105                       	dc.b	nC4, $05
0009C46B F1                         	smpsModOn
0009C46C E10A                       	smpsAlterNote       $0A
0009C46E E601                       	smpsAlterVol        $01
0009C470 F2                         	smpsStop
0009C471                            
0009C471                            ; FM5 Data
0009C471                            SndB7_FM5:
0009C471 8005                       	dc.b	nRst, $05			 
0009C473 EF00                       	smpsSetvoice        $00
0009C475 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C47B F2                         	smpsStop
0009C47C                            
0009C47C                            SndB7_Voices:
0009C47C                            ;	Voice $00
0009C47C                            ;	$34
0009C47C                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C47C                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C47C                            	smpsVcAlgorithm     $04
0009C47C                            	smpsVcFeedback      $06
0009C47C                            	smpsVcUnusedBits    $00
0009C47C                            	smpsVcDetune        $0D, $00, $00, $00
0009C47C                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C47C                            	smpsVcRateScale     $00, $00, $00, $00
0009C47C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C47C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C47C                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C47C                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C47C                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C47C                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C495                            
0009C495                            ;	Voice $01
0009C495                            ;	$FA
0009C495                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C495                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C495                            	smpsVcAlgorithm     $02
0009C495                            	smpsVcFeedback      $07
0009C495                            	smpsVcUnusedBits    $03
0009C495                            	smpsVcDetune        $03, $01, $03, $02
0009C495                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C495                            	smpsVcRateScale     $00, $00, $00, $00
0009C495                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C495                            	smpsVcAmpMod        $00, $00, $00, $00
0009C495                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C495                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C495                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C495                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C4AE                            		even
0009C4AE                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C4EA                            		even
0009C4EA                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C4EA                            SndBD_Header:
0009C4EA                            	smpsHeaderStartSong 3
0009C4EC 01                         	smpsHeaderTempoSFX  $01
0009C4ED 01                         	smpsHeaderChanSFX   $01
0009C4EE                            
0009C4F4                            
0009C4F4                            ; FM6 Data
0009C4F4                            SndBD_FM3:
0009C4F4 EF00                       	smpsSetvoice        $00
0009C4F6                            
0009C4F6                            SndBD_Loop00:
0009C4F6 C009                       	dc.b	nEb5, $09
0009C4F8 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C4FD F2                         	smpsStop
0009C4FE                            
0009C4FE                            SndBD_Voices:
0009C4FE                            ;	Voice $00
0009C4FE                            ;	$02
0009C4FE                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C4FE                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C4FE                            	smpsVcAlgorithm     $02
0009C4FE                            	smpsVcFeedback      $00
0009C4FE                            	smpsVcUnusedBits    $00
0009C4FE                            	smpsVcDetune        $00, $02, $05, $00
0009C4FE                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C4FE                            	smpsVcRateScale     $00, $00, $00, $00
0009C4FE                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C4FE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C4FE                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C4FE                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C4FE                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C4FE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C518 00                         		even
0009C518                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C518                            Sound_59_Header:
0009C518                            	smpsHeaderStartSong 3
0009C51A 01                         	smpsHeaderTempoSFX  $01
0009C51B 04                         	smpsHeaderChanSFX   $04
0009C51C                            
0009C534                            
0009C534                            ; FM3 Data
0009C534                            Sound_59_FM3:
0009C534 E040                       	smpsPan             panRight, $00
0009C536 8002                       	dc.b	nRst, $02
0009C538 F600 00                    	smpsJump            Sound_59_FM4
0009C53B                            
0009C53B                            ; FM5 Data
0009C53B                            Sound_59_FM5:
0009C53B E080                       	smpsPan             panLeft, $00
0009C53D 8001                       	dc.b	nRst, $01
0009C53F                            
0009C53F                            ; FM4 Data
0009C53F                            Sound_59_FM4:
0009C53F EF00                       	smpsSetvoice        $00
0009C546 8110                       	dc.b	nC0, $10
0009C548 F2                         	smpsStop
0009C549                            
0009C549                            ; PSG3 Data
0009C549                            Sound_59_PSG3:
0009C54E F3E7                       	smpsPSGform         $E7
0009C550                            
0009C550                            Sound_59_Loop00:
0009C550 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C553 EC03                       	smpsPSGAlterVol     $03
0009C555 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C55A F2                         	smpsStop
0009C55B                            
0009C55B                            Sound_59_Voices:
0009C55B                            ;	Voice $00
0009C55B                            ;	$F9
0009C55B                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C55B                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C55B                            	smpsVcAlgorithm     $01
0009C55B                            	smpsVcFeedback      $07
0009C55B                            	smpsVcUnusedBits    $03
0009C55B                            	smpsVcDetune        $03, $01, $03, $02
0009C55B                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C55B                            	smpsVcRateScale     $00, $00, $00, $00
0009C55B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C55B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C55B                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C55B                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C55B                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C55B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C574                            
0009C574                            
0009C574                            		even
0009C574                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C59C                            		even
0009C59C                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009C5C8                            		even
0009C5C8                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009C5C8                            Sound_B6_Header:
0009C5C8                            	smpsHeaderStartSong 3
0009C5CA 01                         	smpsHeaderTempoSFX  $01
0009C5CB 02                         	smpsHeaderChanSFX   $02
0009C5CC                            
0009C5D8                            
0009C5D8                            ; FM5 Data
0009C5D8                            Sound_B6_FM5:
0009C5D8 EF00                       	smpsSetvoice        $00
0009C5DF CD0F                       	dc.b	nE6, $0F
0009C5E1 F2                         	smpsStop
0009C5E2                            
0009C5E2                            ; PSG3 Data
0009C5E2                            Sound_B6_PSG3:
0009C5E2 F507                       	smpsPSGvoice        sTone_1D
0009C5E4 8006                       	dc.b	nRst, $06
0009C5EB F3E7                       	smpsPSGform         $E7
0009C5ED CD4F                       	dc.b	nE6, $4F
0009C5EF F2                         	smpsStop
0009C5F0                            
0009C5F0                            Sound_B6_Voices:
0009C5F0                            ;	Voice $00
0009C5F0                            ;	$3D
0009C5F0                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009C5F0                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009C5F0                            	smpsVcAlgorithm     $05
0009C5F0                            	smpsVcFeedback      $07
0009C5F0                            	smpsVcUnusedBits    $00
0009C5F0                            	smpsVcDetune        $00, $00, $00, $00
0009C5F0                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009C5F0                            	smpsVcRateScale     $00, $00, $00, $00
0009C5F0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C5F0                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5F0                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009C5F0                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C5F0                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C5F0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C609                            
0009C609                            
0009C60A 00                         		even
0009C60A                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009C65E                            		even
0009C65E                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009C698                            		even
0009C698                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009C70A                            		even
0009C70A                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009C738                            		even
0009C738                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009C772                            		even
0009C772                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009C772                            SndC1_Header:
0009C772                            	smpsHeaderStartSong 3
0009C774 01                         	smpsHeaderTempoSFX  $01
0009C775 01                         	smpsHeaderChanSFX   $01
0009C776                            
0009C77C                            
0009C77C                            ; FM4 Data
0009C77C                            SndC1_FM4:
0009C77C EF00                       	smpsSetvoice        $00
0009C77E D506 40                    	dc.b	nC7, $06, $40
0009C781 F2                         	smpsStop
0009C782                            
0009C782                            SndC1_Voices:
0009C782                            ;	Voice $00
0009C782                            ;	$38
0009C782                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009C782                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009C782                            	smpsVcAlgorithm     $00
0009C782                            	smpsVcFeedback      $07
0009C782                            	smpsVcUnusedBits    $00
0009C782                            	smpsVcDetune        $00, $00, $00, $00
0009C782                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009C782                            	smpsVcRateScale     $00, $00, $00, $00
0009C782                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C782                            	smpsVcAmpMod        $00, $00, $00, $00
0009C782                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009C782                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C782                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C782                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C79C 00                         		even
0009C79C                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009C816                            		even
0009C816                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009C83E                            		even
0009C83E                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009C83E                            Sound_B0_Header:
0009C83E                            	smpsHeaderStartSong 3
0009C840 01                         	smpsHeaderTempoSFX  $01
0009C841 03                         	smpsHeaderChanSFX   $03
0009C842                            
0009C854                            
0009C854                            ; FM5 Data
0009C854                            Sound_B0_FM5:
0009C854 EF00                       	smpsSetvoice        $00
0009C856 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009C85C F2                         	smpsStop
0009C85D                            
0009C85D                            ; FM4 Data
0009C85D                            Sound_B0_FM4:
0009C85D EF01                       	smpsSetvoice        $01
0009C85F 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009C863 F2                         	smpsStop
0009C864                            
0009C864                            ; FM3 Data
0009C864                            Sound_B0_FM3:
0009C864 EF02                       	smpsSetvoice        $02
0009C866 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009C86D F2                         	smpsStop
0009C86E                            
0009C86E                            Sound_B0_Voices:
0009C86E                            ;	Voice $00
0009C86E                            ;	$3B
0009C86E                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009C86E                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009C86E                            	smpsVcAlgorithm     $03
0009C86E                            	smpsVcFeedback      $07
0009C86E                            	smpsVcUnusedBits    $00
0009C86E                            	smpsVcDetune        $00, $00, $00, $00
0009C86E                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009C86E                            	smpsVcRateScale     $02, $00, $00, $00
0009C86E                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009C86E                            	smpsVcAmpMod        $00, $00, $00, $00
0009C86E                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009C86E                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C86E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C86E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C887                            
0009C887                            ;	Voice $01
0009C887                            ;	$04
0009C887                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C887                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009C887                            	smpsVcAlgorithm     $04
0009C887                            	smpsVcFeedback      $00
0009C887                            	smpsVcUnusedBits    $00
0009C887                            	smpsVcDetune        $04, $07, $07, $03
0009C887                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009C887                            	smpsVcRateScale     $00, $00, $00, $00
0009C887                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C887                            	smpsVcAmpMod        $00, $00, $00, $00
0009C887                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C887                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C887                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C887                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C8A0                            
0009C8A0                            ;	Voice $02
0009C8A0                            ;	$3C
0009C8A0                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009C8A0                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009C8A0                            	smpsVcAlgorithm     $04
0009C8A0                            	smpsVcFeedback      $07
0009C8A0                            	smpsVcUnusedBits    $00
0009C8A0                            	smpsVcDetune        $00, $00, $00, $00
0009C8A0                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009C8A0                            	smpsVcRateScale     $00, $00, $00, $00
0009C8A0                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009C8A0                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8A0                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009C8A0                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009C8A0                            	smpsVcDecayLevel    $02, $09, $09, $01
0009C8A0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C8B9                            
0009C8B9                            
0009C8BA 00                         		even
0009C8BA                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009C8FC                            		even
0009C8FC                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009C92A                            		even
0009C92A                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009C93C                            		even
0009C93C                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009C96A                            		even
0009C96A                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009C998                            		even
0009C998                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009C9E4                            		even
0009C9E4                            SoundCC:	include	"sound/sfx/Spring.asm"
0009C9E4                            Spring_Header:
0009C9E4                            	smpsHeaderStartSong 1
0009C9E6 01                         	smpsHeaderTempoSFX  $01
0009C9E7 01                         	smpsHeaderChanSFX   $01
0009C9E8                            
0009C9EE                            
0009C9EE                            ; FM6 Data
0009C9EE                            Spring_FM6:
0009C9EE EF00                       	smpsSetvoice        $00
0009C9F0 8001                       	dc.b	nRst, $01
0009C9F7 B006                       	dc.b	nB3, $06
0009C9F9 F4                         	smpsModOff
0009C9FA EF01                       	smpsSetvoice        $01
0009C9FC                            
0009C9FC                            Spring_Loop00:
0009C9FC BD02                       	dc.b	nC5, $02
0009C9FE E601                       	smpsAlterVol      $01
0009CA00 E7                         	dc.b	smpsNoAttack
0009CA01 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CA06 F2                         	smpsStop
0009CA07                            
0009CA07                            Spring_Voices:
0009CA07                            ;	Voice $00
0009CA07                            ;	$20
0009CA07                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CA07                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CA07                            	smpsVcAlgorithm     $00
0009CA07                            	smpsVcFeedback      $04
0009CA07                            	smpsVcUnusedBits    $00
0009CA07                            	smpsVcDetune        $03, $03, $03, $03
0009CA07                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CA07                            	smpsVcRateScale     $02, $02, $03, $03
0009CA07                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA07                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA07                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CA07                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CA07                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CA07                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA20                            
0009CA20                            ;	Voice $01
0009CA20                            ;	$20
0009CA20                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CA20                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CA20                            	smpsVcAlgorithm     $00
0009CA20                            	smpsVcFeedback      $04
0009CA20                            	smpsVcUnusedBits    $00
0009CA20                            	smpsVcDetune        $03, $03, $03, $03
0009CA20                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CA20                            	smpsVcRateScale     $02, $02, $02, $02
0009CA20                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA20                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA20                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CA20                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CA20                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CA20                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA3A 00                         		even
0009CA3A                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CA3A                            Snd99_Header:
0009CA3A                            	smpsHeaderStartSong 3
0009CA3C 01                         	smpsHeaderTempoSFX  $01
0009CA3D 01                         	smpsHeaderChanSFX   $01
0009CA3E                            
0009CA44                            
0009CA44                            ; FM4 Data
0009CA44                            Snd99_FM4:
0009CA44 EF00                       	smpsSetvoice        $00
0009CA46 B502                       	dc.b	nE4, $02
0009CA48 F2                         	smpsStop
0009CA49                            
0009CA49                            Snd99_Voices:
0009CA49                            ;	Voice $00
0009CA49                            ;	$07
0009CA49                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CA49                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CA49                            	smpsVcAlgorithm     $07
0009CA49                            	smpsVcFeedback      $00
0009CA49                            	smpsVcUnusedBits    $00
0009CA49                            	smpsVcDetune        $00, $00, $00, $00
0009CA49                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CA49                            	smpsVcRateScale     $00, $00, $00, $00
0009CA49                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA49                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA49                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CA49                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CA49                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CA49                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA62                            		even
0009CA62                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CA90                            		even
0009CA90                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CA90                            SignpostCD_Header:
0009CA90                            	smpsHeaderStartSong 3
0009CA92 01                         	smpsHeaderTempoSFX  $01
0009CA93 02                         	smpsHeaderChanSFX   $02
0009CA94                            
0009CAA0                            
0009CAA0                            ; FM5 Data
0009CAA0                            Snd9D_FM5:
0009CAA0 8004                       	dc.b	nRst, $04
0009CAA2                            
0009CAA2                            ; FM4 Data
0009CAA2                            Snd9D_FM4:
0009CAA2 EF00                       	smpsSetvoice        $00
0009CAA4                            
0009CAA4                            Snd9D_Loop00:
0009CAA4 B405                       	dc.b	nEb4, $05
0009CAA6 E604                       	smpsFMAlterVol      $04
0009CAA8 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CAAD F2                         	smpsStop
0009CAAE                            
0009CAAE                            Snd9D_Voices:
0009CAAE                            ;	Voice $00
0009CAAE                            ;	$F4
0009CAAE                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CAAE                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CAAE                            	smpsVcAlgorithm     $04
0009CAAE                            	smpsVcFeedback      $06
0009CAAE                            	smpsVcUnusedBits    $03
0009CAAE                            	smpsVcDetune        $00, $00, $00, $00
0009CAAE                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CAAE                            	smpsVcRateScale     $00, $00, $00, $00
0009CAAE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CAAE                            	smpsVcAmpMod        $00, $00, $00, $00
0009CAAE                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CAAE                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CAAE                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CAAE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CAC8 00                         		even
0009CAC8                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CB02                            		even
0009CB02                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CB02                            Sound_41_Header:
0009CB02                            	smpsHeaderStartSong 3
0009CB04 01                         	smpsHeaderTempoSFX  $01
0009CB05 01                         	smpsHeaderChanSFX   $01
0009CB06                            
0009CB0C                            	
0009CB0C                            Sound41_FM5:
0009CB0C EF00                       	smpsSetvoice        $00
0009CB0E A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CB13 F2                         	smpsStop
0009CB14                            
0009CB14                            Sound_41_Voices:
0009CB14                            ;	Voice $00
0009CB14                            ;	$36
0009CB14                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CB14                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CB14                            	smpsVcAlgorithm     $06
0009CB14                            	smpsVcFeedback      $06
0009CB14                            	smpsVcUnusedBits    $00
0009CB14                            	smpsVcDetune        $00, $00, $01, $00
0009CB14                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CB14                            	smpsVcRateScale     $00, $00, $00, $00
0009CB14                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CB14                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB14                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CB14                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CB14                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CB14                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB2D                            
0009CB2D                            
0009CB2E 00                         		even
0009CB2E                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CB2E                            Snd9B_Header:
0009CB2E                            	smpsHeaderStartSong 3
0009CB30 01                         	smpsHeaderTempoSFX  $01
0009CB31 01                         	smpsHeaderChanSFX   $01
0009CB32                            
0009CB38                            
0009CB38                            ; FM5 Data
0009CB38                            Snd9B_FM5:
0009CB38 EF00                       	smpsSetvoice        $00
0009CB3A 8001                       	dc.b	nRst, $01
0009CB41 CA25                       	dc.b	nCs6, $25
0009CB43 F4                         	smpsModOff
0009CB44                            
0009CB44                            Snd9B_Loop00:
0009CB44 E7                         	dc.b	smpsNoAttack
0009CB45 E601                       	smpsFMAlterVol      $01
0009CB47 D102                       	dc.b	nAb6, $02
0009CB49 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CB4E F2                         	smpsStop
0009CB4F                            
0009CB4F                            Snd9B_Voices:
0009CB4F                            ;	Voice $00
0009CB4F                            ;	$3C
0009CB4F                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CB4F                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CB4F                            	smpsVcAlgorithm     $04
0009CB4F                            	smpsVcFeedback      $07
0009CB4F                            	smpsVcUnusedBits    $00
0009CB4F                            	smpsVcDetune        $00, $00, $04, $00
0009CB4F                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CB4F                            	smpsVcRateScale     $00, $00, $00, $00
0009CB4F                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CB4F                            	smpsVcAmpMod        $00, $00, $00, $00
0009CB4F                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CB4F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CB4F                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CB4F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CB68                            
0009CB68                            
0009CB68                            		even		
0009CB68                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009CC00                            		even
0009CC00                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009CC0C                            		even				
0009CC0C                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009CC48                            		even			
0009CC48                            		; Don't let Sega sample cross $8000-byte boundary
0009CC48                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1250                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2182                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1180                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 12FE                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 12FE                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 1888                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 1888                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 1888                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 242C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1250                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A00                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20DC                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A00                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A2                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; green_hill_zone_act_1
000A6B04 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000A6B08 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000A6B0C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000A6B10 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000A6B16 21FC 0000 1388 FFC0        		move.l	#$1388,(v_scorelife).w ; extra life is awarded at 50000 points
000A6B1E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; => Level (Zone play mode)
000A6B24 4E75                       		rts
000A6B26                            ; ===========================================================================
000A6B26                            ; loc_90B6:
000A6B26                            OptionScreen_Select_Not1P:
000A6B26 5300                       		subq.b	#1,d0
000A6B28 6600                       		bne.s	OptionScreen_Select_Other
000A6B2A 6094                       		bra.s	OptionScreen_Main
000A6B2C                            ; ===========================================================================
000A6B2C                            ; loc_90D8:
000A6B2C                            OptionScreen_Select_Other:
000A6B2C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B32 4E75                       		rts
000A6B34                            
000A6B34                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B34                            
000A6B34                            ;sub_90E0:
000A6B34                            OptionScreen_Controls:
000A6B34 7400                       		moveq	#0,d2
000A6B36 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B3A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B3E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B42 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B44 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B46 6400                       		bcc.s	Option_Controls_Down
000A6B48 143C 0002                  		move.b	#2,d2
000A6B4C                            
000A6B4C                            Option_Controls_Down:
000A6B4C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B50 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B52 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B54 0C02 0003                  		cmpi.b	#3,d2
000A6B58 6500                       		blo.s	Option_Controls_Refresh
000A6B5A 7400                       		moveq	#0,d2
000A6B5C                            
000A6B5C                            Option_Controls_Refresh:
000A6B5C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B60 E54A                       		lsl.w	#2,d2
000A6B62 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B66 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B6A 3411                       		move.w	(a1),d2
000A6B6C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B70 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B72 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B74 6400                       		bcc.s	Option_Controls_Right
000A6B76 1403                       		move.b	d3,d2
000A6B78                            
000A6B78                            Option_Controls_Right:
000A6B78 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B7C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B7E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B80 B403                       		cmp.b	d3,d2
000A6B82 6300                       		bls.s	Option_Controls_Button_A
000A6B84 7400                       		moveq	#0,d2
000A6B86                            
000A6B86                            Option_Controls_Button_A:
000A6B86 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B8A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B8C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B90 B403                       		cmp.b	d3,d2
000A6B92 6300                       		bls.s	Option_Controls_Refresh2
000A6B94 7400                       		moveq	#0,d2
000A6B96                            
000A6B96                            Option_Controls_Refresh2:
000A6B96 3282                       		move.w	d2,(a1)
000A6B98                            
000A6B98                            Option_Controls_NoMove:
000A6B98 4E75                       		rts
000A6B9A                            ; End of function OptionScreen_Controls
000A6B9A                            
000A6B9A                            ; ===========================================================================
000A6B9A                            ; word_917A:
000A6B9A                            OptionScreen_Choices:
000A6B9A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B9E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6BA2 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6BA6                            		even
000A6BA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6BA6                            
000A6BA6                            
000A6BA6                            OptionScreen_DrawSelected:
000A6BA6 6100 0000                  		bsr.w	loc_9268
000A6BAA 7200                       		moveq	#0,d1
000A6BAC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BB0 E749                       		lsl.w	#3,d1
000A6BB2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BB8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BBC 303C 6000                  		move.w	#$6000,d0
000A6BC0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BC6 225B                       		movea.l	(a3)+,a1
000A6BC8 6100 FE5C                  		bsr.w	MenuScreenTextToRAM
000A6BCC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BD2 7200                       		moveq	#0,d1
000A6BD4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BDA 6700                       		beq.s	loc_9186
000A6BDC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BE0 E549                       		lsl.w	#2,d1
000A6BE2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BE6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BEA 3211                       		move.w	(a1),d1
000A6BEC E549                       		lsl.w	#2,d1
000A6BEE                            
000A6BEE                            loc_9186:		
000A6BEE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BF2 6100 FE32                  		bsr.w	MenuScreenTextToRAM
000A6BF6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BF6                            		;bne.s	loc2_9186
000A6BF6                            		;lea	($FFFF00C2).l,a2
000A6BF6                            		;bsr.w	loc_9296
000A6BF6                            
000A6BF6                            loc2_9186:		
000A6BF6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BFC 201B                       		move.l	(a3)+,d0
000A6BFE 7215                       		moveq	#$15,d1
000A6C00 7407                       		moveq	#7,d2
000A6C02 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C06                            ; ===========================================================================
000A6C06                            
000A6C06                            OptionScreen_DrawUnselected:
000A6C06 6100 0000                  		bsr.w	loc_9268
000A6C0A 7200                       		moveq	#0,d1
000A6C0C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C10 E749                       		lsl.w	#3,d1
000A6C12 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6C18 47F3 1000                  		lea	(a3,d1.w),a3
000A6C1C 7000                       		moveq	#0,d0
000A6C1E 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C24 225B                       		movea.l	(a3)+,a1
000A6C26 6100 FDFE                  		bsr.w	MenuScreenTextToRAM
000A6C2A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C30 7200                       		moveq	#0,d1
000A6C32 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C38 6700                       		beq.s	loc2_91F8
000A6C3A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C3E E549                       		lsl.w	#2,d1
000A6C40 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C44 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C48 3211                       		move.w	(a1),d1
000A6C4A E549                       		lsl.w	#2,d1
000A6C4C                            
000A6C4C                            loc2_91F8		
000A6C4C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C50 6100 FDD4                  		bsr.w	MenuScreenTextToRAM
000A6C54                            		;cmpi.b	#2,(Options_menu_box).w
000A6C54                            		;bne.s	loc3_91F8
000A6C54                            		;lea	($FFFF0222).l,a2
000A6C54                            		;bsr.w	loc_9296
000A6C54                            
000A6C54                            loc3_91F8		
000A6C54 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C5A 201B                       		move.l	(a3)+,d0
000A6C5C 7215                       		moveq	#$15,d1
000A6C5E 7407                       		moveq	#7,d2
000A6C60 4EF8 12D4                  		jmp	TilemapToVRAM
000A6C64                            ; ===========================================================================
000A6C64                            
000A6C64                            loc_9268:
000A6C64 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C6A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C6E 6A00                       		bpl.s	loc2_9268
000A6C70 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C76                            
000A6C76                            loc2_9268:
000A6C76 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C7A 6700                       		beq.s	loc3_9268
000A6C7C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C82                            
000A6C82                            loc3_9268:
000A6C82 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C88 6600                       		bne.s	loc4_9268		; rts
000A6C8A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C90                            
000A6C90                            loc4_9268:
000A6C90 4E75                       		rts
000A6C92                            ; ===========================================================================
000A6C92                            
000A6C92                            loc_9296:
000A6C92 4E75                       		rts
000A6C94                            
000A6C94                            Dynamic_Menu:
000A6C94 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C98                            
000A6C98                            loc_3FF30:
000A6C98 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C9A                            
000A6C9A                            loc_3FF32:
000A6C9A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C9C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C9E 7000                       	moveq	#0,d0
000A6CA0 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6CA4 B02A 0006                  	cmp.b	6(a2),d0
000A6CA8 6500                       	blo.s	loc_3FF48
000A6CAA 7000                       	moveq	#0,d0
000A6CAC 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6CB0                            
000A6CB0                            loc_3FF48:
000A6CB0 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6CB4 1692                       	move.b	(a2),(a3)	; set timer
000A6CB6 6A00                       	bpl.s	loc_3FF56
000A6CB8 D040                       	add.w	d0,d0
000A6CBA 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6CBE                            
000A6CBE                            loc_3FF56:
000A6CBE 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CC2 EB48                       	lsl.w	#5,d0
000A6CC4 342A 0004                  	move.w	4(a2),d2
000A6CC8 2212                       	move.l	(a2),d1
000A6CCA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CD0 D280                       	add.l	d0,d1
000A6CD2 7600                       	moveq	#0,d3
000A6CD4 162A 0007                  	move.b	7(a2),d3
000A6CD8 E94B                       	lsl.w	#4,d3
000A6CDA 4EB9 0000 1426             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CE0                            
000A6CE0                            loc_3FF78:
000A6CE0 102A 0006                  	move.b	6(a2),d0
000A6CE4 4A12                       	tst.b	(a2)
000A6CE6 6A00                       	bpl.s	loc_3FF82
000A6CE8 D000                       	add.b	d0,d0
000A6CEA                            
000A6CEA                            loc_3FF82:
000A6CEA 5200                       	addq.b	#1,d0
000A6CEC 0240 00FE                  	andi.w	#$FE,d0
000A6CF0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CF4 544B                       	addq.w	#2,a3
000A6CF6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CFA 4E75                       	rts
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ; MENU ANIMATION SCRIPT
000A6CFC                            ; ------------------------------------------------------------------------
000A6CFC                            ;word_87C6:
000A6CFC                            Anim_SonicMilesBG:
000A6CFC 0000                       	dc.w   0
000A6CFE                            ; Sonic/Miles animated background
000A6CFE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6D02 0020                       	dc.w $20
000A6D04 06                         	dc.b 6
000A6D05 0A                         	dc.b $A
000A6D06 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6D08 0A05                       	dc.b  $A,  5	; 2
000A6D0A 1405                       	dc.b $14,  5	; 4
000A6D0C 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6D0E 1405                       	dc.b $14,  5	; 8
000A6D10 0A05                       	dc.b  $A,  5	; 10	
000A6D12                            ; ===========================================================================
000A6D12                            ; off_92BA:
000A6D12                            OptScrBoxData:
000A6D12                            
000A6D12 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6D16 4192                       		dc.w $4192
000A6D18 0003                       		dc.w 3
000A6D1A 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6D1E 4592                       		dc.w $4592
000A6D20 0003                       		dc.w 3
000A6D22 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D26 4992                       		dc.w $4992
000A6D28 0003                       		dc.w 3
000A6D2A                            
000A6D2A                            off_92D2:
000A6D2A 0000 0000                  		dc.l TextOptScr_Default
000A6D2E 0000 0000                  		dc.l TextOptScr_Original
000A6D32 0000 0000                  		dc.l TextOptScr_Beta
000A6D36 0000 0000                  		dc.l TextOptScr_Midnight
000A6D3A 0000 0000                  		dc.l TextOptScr_C2
000A6D3E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D42 0000 0000                  		dc.l TextOptScr_RHS
000A6D46 0000 0000                  		dc.l TextOptScr_Socket
000A6D4A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D4E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D52                            off_92DE:
000A6D52 0000 0000                  		dc.l TextOptScr_Default
000A6D56 0000 0000                  		dc.l TextOptScr_Original
000A6D5A 0000 0000                  		dc.l TextOptScr_Beta
000A6D5E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D62 0000 0000                  		dc.l TextOptScr_C2
000A6D66 0000 0000                  		dc.l TextOptScr_Clackers
000A6D6A 0000 0000                  		dc.l TextOptScr_RHS
000A6D6E 0000 0000                  		dc.l TextOptScr_Socket
000A6D72 0000 0000                  		dc.l TextOptScr_Cringe
000A6D76 0000 0000                  		dc.l TextOptScr_Dark	
000A6D7A                            off_92EA:
000A6D7A 0000 0000                  		dc.l TextOptScr_On
000A6D7E 0000 0000                  		dc.l TextOptScr_Off
000A6D82                            off_92F2:
000A6D82 0000 0000                  		dc.l TextOptScr_Null
000A6D86 0000 0000                  		dc.l TextOptScr_Null2
000A6D8A                            ; ===========================================================================
000A6D8A                            
000A6EA9                            ; ============================================================================
000A6EA9                            
000A6EA9                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A73AA 00                         		even
000A73AA                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7556                            		even
000A7556                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AC0                            		even
000A7AC0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B40                            		even
000A7B40                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B6C                            		even
000A7B6C                            		even
000A7B6C                            
000A7B6C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253F0                                        even
001253F0                            
001253F0                            Art_Dust:	incbin	artunc\spindust.bin
00126D30                            
00126D30                            ; ===============================================================
00126D30                            ; ---------------------------------------------------------------
00126D30                            ; Error handling module
00126D30                            ; ---------------------------------------------------------------
00126D30                             
00126D30 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D34 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D3E 01                                 dc.b    1               ; extended stack frame
00126D40 00                                 even
00126D40                             
00126D40 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D44 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D52 01                                 dc.b    1               ; extended stack frame
00126D54 00                                 even
00126D54                             
00126D54 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D58 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D6C 00                                 dc.b    0               ; extended stack frame
00126D6E 00                                 even
00126D6E                             
00126D6E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D72 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D7E 00                                 dc.b    0               ; extended stack frame
00126D80 00                                 even
00126D80                             
00126D80 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D84 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D9A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126DAC 00                                 dc.b    0               ; extended stack frame
00126DAE 00                                 even
00126DAE                             
00126DAE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126DB2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DC6 00                                 dc.b    0               ; extended stack frame
00126DC8 00                                 even
00126DC8                             
00126DC8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DCC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DD2 00                                 dc.b    0               ; extended stack frame
00126DD4 00                                 even
00126DD4                             
00126DD4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DD8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DEB 00                                 dc.b    0               ; extended stack frame
00126DEC                                    even
00126DEC                             
00126DEC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DF0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126E03 00                                 dc.b    0               ; extended stack frame
00126E04                                    even
00126E04                             
00126E04 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126E08 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126E18 00                                 dc.b    0               ; extended stack frame
00126E1A 00                                 even
00126E1A                             
00126E1A                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275FE                            
001275FE                            ; end of 'ROM'
001275FE                            		even
001275FE                            EndOfRom:
001275FE                            
001275FE                            
